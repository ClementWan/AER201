

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Thu Feb 23 14:43:57 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           ; Version 1.40
    68                           ; Generated 01/12/2016 GMT
    69                           ; 
    70                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC18F4620 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101  0000                     
   102                           	psect	idataCOMRAM
   103  002F7A                     __pidataCOMRAM:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _measure
   107  002F7A  0005               	dw	5
   108                           
   109                           ;initializer for _release
   110  002F7C  0FA0               	dw	4000
   111                           
   112                           ;initializer for _IR1_PIN
   113  002F7E  01                 	db	1
   114                           
   115                           ;initializer for _IR2_PIN
   116  002F7F  02                 	db	2
   117                           
   118                           ;initializer for _PROX2_PIN
   119  002F80  01                 	db	1
   120                           
   121                           	psect	idataBIGRAM
   122  001C54                     __pidataBIGRAM:
   123                           	opt stack 0
   124                           
   125                           ;initializer for _menu
   126  001C54  31                 	db	49
   127  001C55  2E                 	db	46
   128  001C56  20                 	db	32
   129  001C57  53                 	db	83
   130  001C58  6F                 	db	111
   131  001C59  72                 	db	114
   132  001C5A  74                 	db	116
   133  001C5B  20                 	db	32
   134  001C5C  20                 	db	32
   135  001C5D  20                 	db	32
   136  001C5E  20                 	db	32
   137  001C5F  20                 	db	32
   138  001C60  20                 	db	32
   139  001C61  20                 	db	32
   140  001C62  20                 	db	32
   141  001C63  00                 	db	0
   142  001C64  00                 	db	0
   143  001C65  00                 	db	0
   144  001C66  32                 	db	50
   145  001C67  2E                 	db	46
   146  001C68  20                 	db	32
   147  001C69  50                 	db	80
   148  001C6A  20                 	db	32
   149  001C6B  4C                 	db	76
   150  001C6C  6F                 	db	111
   151  001C6D  67                 	db	103
   152  001C6E  73                 	db	115
   153  001C6F  20                 	db	32
   154  001C70  20                 	db	32
   155  001C71  20                 	db	32
   156  001C72  20                 	db	32
   157  001C73  20                 	db	32
   158  001C74  20                 	db	32
   159  001C75  00                 	db	0
   160  001C76  00                 	db	0
   161  001C77  00                 	db	0
   162  001C78  33                 	db	51
   163  001C79  2E                 	db	46
   164  001C7A  20                 	db	32
   165  001C7B  43                 	db	67
   166  001C7C  72                 	db	114
   167  001C7D  65                 	db	101
   168  001C7E  64                 	db	100
   169  001C7F  69                 	db	105
   170  001C80  74                 	db	116
   171  001C81  73                 	db	115
   172  001C82  20                 	db	32
   173  001C83  20                 	db	32
   174  001C84  20                 	db	32
   175  001C85  20                 	db	32
   176  001C86  20                 	db	32
   177  001C87  00                 	db	0
   178  001C88  00                 	db	0
   179  001C89  00                 	db	0
   180  001C8A  00                 	db	0
   181  001C8B  00                 	db	0
   182  001C8C  00                 	db	0
   183  001C8D  00                 	db	0
   184  001C8E  00                 	db	0
   185  001C8F  00                 	db	0
   186  001C90  00                 	db	0
   187  001C91  00                 	db	0
   188  001C92  00                 	db	0
   189  001C93  00                 	db	0
   190  001C94  00                 	db	0
   191  001C95  00                 	db	0
   192  001C96  00                 	db	0
   193  001C97  00                 	db	0
   194  001C98  00                 	db	0
   195  001C99  00                 	db	0
   196  001C9A  00                 	db	0
   197  001C9B  00                 	db	0
   198  001C9C  00                 	db	0
   199  001C9D  00                 	db	0
   200  001C9E  00                 	db	0
   201  001C9F  00                 	db	0
   202  001CA0  00                 	db	0
   203  001CA1  00                 	db	0
   204  001CA2  00                 	db	0
   205  001CA3  00                 	db	0
   206  001CA4  00                 	db	0
   207  001CA5  00                 	db	0
   208  001CA6  00                 	db	0
   209  001CA7  00                 	db	0
   210  001CA8  00                 	db	0
   211  001CA9  00                 	db	0
   212  001CAA  00                 	db	0
   213  001CAB  00                 	db	0
   214  001CAC  00                 	db	0
   215  001CAD  00                 	db	0
   216  001CAE  00                 	db	0
   217  001CAF  00                 	db	0
   218  001CB0  00                 	db	0
   219  001CB1  00                 	db	0
   220  001CB2  00                 	db	0
   221  001CB3  00                 	db	0
   222  001CB4  00                 	db	0
   223  001CB5  00                 	db	0
   224  001CB6  00                 	db	0
   225  001CB7  00                 	db	0
   226  001CB8  00                 	db	0
   227  001CB9  00                 	db	0
   228  001CBA  00                 	db	0
   229  001CBB  00                 	db	0
   230  001CBC  00                 	db	0
   231  001CBD  00                 	db	0
   232  001CBE  00                 	db	0
   233  001CBF  00                 	db	0
   234  001CC0  00                 	db	0
   235  001CC1  00                 	db	0
   236  001CC2  00                 	db	0
   237  001CC3  00                 	db	0
   238  001CC4  00                 	db	0
   239  001CC5  00                 	db	0
   240  001CC6  00                 	db	0
   241  001CC7  00                 	db	0
   242  001CC8  00                 	db	0
   243  001CC9  00                 	db	0
   244  001CCA  00                 	db	0
   245  001CCB  00                 	db	0
   246  001CCC  00                 	db	0
   247  001CCD  00                 	db	0
   248  001CCE  00                 	db	0
   249  001CCF  00                 	db	0
   250  001CD0  00                 	db	0
   251  001CD1  00                 	db	0
   252  001CD2  00                 	db	0
   253  001CD3  00                 	db	0
   254  001CD4  00                 	db	0
   255  001CD5  00                 	db	0
   256  001CD6  00                 	db	0
   257  001CD7  00                 	db	0
   258  001CD8  00                 	db	0
   259  001CD9  00                 	db	0
   260  001CDA  00                 	db	0
   261  001CDB  00                 	db	0
   262  001CDC  00                 	db	0
   263  001CDD  00                 	db	0
   264  001CDE  00                 	db	0
   265  001CDF  00                 	db	0
   266  001CE0  00                 	db	0
   267  001CE1  00                 	db	0
   268  001CE2  00                 	db	0
   269  001CE3  00                 	db	0
   270  001CE4  00                 	db	0
   271  001CE5  00                 	db	0
   272  001CE6  00                 	db	0
   273  001CE7  00                 	db	0
   274  001CE8  00                 	db	0
   275  001CE9  00                 	db	0
   276  001CEA  00                 	db	0
   277  001CEB  00                 	db	0
   278  001CEC  00                 	db	0
   279  001CED  00                 	db	0
   280  001CEE  00                 	db	0
   281  001CEF  00                 	db	0
   282  001CF0  00                 	db	0
   283  001CF1  00                 	db	0
   284  001CF2  00                 	db	0
   285  001CF3  00                 	db	0
   286  001CF4  00                 	db	0
   287  001CF5  00                 	db	0
   288  001CF6  00                 	db	0
   289  001CF7  00                 	db	0
   290  001CF8  00                 	db	0
   291  001CF9  00                 	db	0
   292  001CFA  00                 	db	0
   293  001CFB  00                 	db	0
   294  001CFC  00                 	db	0
   295  001CFD  00                 	db	0
   296  001CFE  00                 	db	0
   297  001CFF  00                 	db	0
   298  001D00  00                 	db	0
   299  001D01  00                 	db	0
   300  001D02  00                 	db	0
   301  001D03  00                 	db	0
   302  001D04  00                 	db	0
   303  001D05  00                 	db	0
   304  001D06  00                 	db	0
   305  001D07  00                 	db	0
   306  001D08  65                 	db	101
   307  001D09  76                 	db	118
   308  001D0A  65                 	db	101
   309  001D0B  6E                 	db	110
   310  001D0C  74                 	db	116
   311  001D0D  31                 	db	49
   312  001D0E  20                 	db	32
   313  001D0F  20                 	db	32
   314  001D10  20                 	db	32
   315  001D11  20                 	db	32
   316  001D12  20                 	db	32
   317  001D13  20                 	db	32
   318  001D14  20                 	db	32
   319  001D15  20                 	db	32
   320  001D16  20                 	db	32
   321  001D17  00                 	db	0
   322  001D18  00                 	db	0
   323  001D19  00                 	db	0
   324  001D1A  65                 	db	101
   325  001D1B  76                 	db	118
   326  001D1C  65                 	db	101
   327  001D1D  6E                 	db	110
   328  001D1E  74                 	db	116
   329  001D1F  32                 	db	50
   330  001D20  20                 	db	32
   331  001D21  20                 	db	32
   332  001D22  20                 	db	32
   333  001D23  20                 	db	32
   334  001D24  20                 	db	32
   335  001D25  20                 	db	32
   336  001D26  20                 	db	32
   337  001D27  20                 	db	32
   338  001D28  20                 	db	32
   339  001D29  00                 	db	0
   340  001D2A  00                 	db	0
   341  001D2B  00                 	db	0
   342  001D2C  65                 	db	101
   343  001D2D  76                 	db	118
   344  001D2E  65                 	db	101
   345  001D2F  6E                 	db	110
   346  001D30  74                 	db	116
   347  001D31  33                 	db	51
   348  001D32  20                 	db	32
   349  001D33  20                 	db	32
   350  001D34  20                 	db	32
   351  001D35  20                 	db	32
   352  001D36  20                 	db	32
   353  001D37  20                 	db	32
   354  001D38  20                 	db	32
   355  001D39  20                 	db	32
   356  001D3A  20                 	db	32
   357  001D3B  00                 	db	0
   358  001D3C  00                 	db	0
   359  001D3D  00                 	db	0
   360  001D3E  00                 	db	0
   361  001D3F  00                 	db	0
   362  001D40  00                 	db	0
   363  001D41  00                 	db	0
   364  001D42  00                 	db	0
   365  001D43  00                 	db	0
   366  001D44  00                 	db	0
   367  001D45  00                 	db	0
   368  001D46  00                 	db	0
   369  001D47  00                 	db	0
   370  001D48  00                 	db	0
   371  001D49  00                 	db	0
   372  001D4A  00                 	db	0
   373  001D4B  00                 	db	0
   374  001D4C  00                 	db	0
   375  001D4D  00                 	db	0
   376  001D4E  00                 	db	0
   377  001D4F  00                 	db	0
   378  001D50  00                 	db	0
   379  001D51  00                 	db	0
   380  001D52  00                 	db	0
   381  001D53  00                 	db	0
   382  001D54  00                 	db	0
   383  001D55  00                 	db	0
   384  001D56  00                 	db	0
   385  001D57  00                 	db	0
   386  001D58  00                 	db	0
   387  001D59  00                 	db	0
   388  001D5A  00                 	db	0
   389  001D5B  00                 	db	0
   390  001D5C  00                 	db	0
   391  001D5D  00                 	db	0
   392  001D5E  00                 	db	0
   393  001D5F  00                 	db	0
   394  001D60  00                 	db	0
   395  001D61  00                 	db	0
   396  001D62  00                 	db	0
   397  001D63  00                 	db	0
   398  001D64  00                 	db	0
   399  001D65  00                 	db	0
   400  001D66  00                 	db	0
   401  001D67  00                 	db	0
   402  001D68  00                 	db	0
   403  001D69  00                 	db	0
   404  001D6A  00                 	db	0
   405  001D6B  00                 	db	0
   406  001D6C  00                 	db	0
   407  001D6D  00                 	db	0
   408  001D6E  00                 	db	0
   409  001D6F  00                 	db	0
   410  001D70  00                 	db	0
   411  001D71  00                 	db	0
   412  001D72  00                 	db	0
   413  001D73  00                 	db	0
   414  001D74  00                 	db	0
   415  001D75  00                 	db	0
   416  001D76  00                 	db	0
   417  001D77  00                 	db	0
   418  001D78  00                 	db	0
   419  001D79  00                 	db	0
   420  001D7A  00                 	db	0
   421  001D7B  00                 	db	0
   422  001D7C  00                 	db	0
   423  001D7D  00                 	db	0
   424  001D7E  00                 	db	0
   425  001D7F  00                 	db	0
   426  001D80  00                 	db	0
   427  001D81  00                 	db	0
   428  001D82  00                 	db	0
   429  001D83  00                 	db	0
   430  001D84  00                 	db	0
   431  001D85  00                 	db	0
   432  001D86  00                 	db	0
   433  001D87  00                 	db	0
   434  001D88  00                 	db	0
   435  001D89  00                 	db	0
   436  001D8A  00                 	db	0
   437  001D8B  00                 	db	0
   438  001D8C  00                 	db	0
   439  001D8D  00                 	db	0
   440  001D8E  00                 	db	0
   441  001D8F  00                 	db	0
   442  001D90  00                 	db	0
   443  001D91  00                 	db	0
   444  001D92  00                 	db	0
   445  001D93  00                 	db	0
   446  001D94  00                 	db	0
   447  001D95  00                 	db	0
   448  001D96  00                 	db	0
   449  001D97  00                 	db	0
   450  001D98  00                 	db	0
   451  001D99  00                 	db	0
   452  001D9A  00                 	db	0
   453  001D9B  00                 	db	0
   454  001D9C  00                 	db	0
   455  001D9D  00                 	db	0
   456  001D9E  00                 	db	0
   457  001D9F  00                 	db	0
   458  001DA0  00                 	db	0
   459  001DA1  00                 	db	0
   460  001DA2  00                 	db	0
   461  001DA3  00                 	db	0
   462  001DA4  00                 	db	0
   463  001DA5  00                 	db	0
   464  001DA6  00                 	db	0
   465  001DA7  00                 	db	0
   466  001DA8  00                 	db	0
   467  001DA9  00                 	db	0
   468  001DAA  00                 	db	0
   469  001DAB  00                 	db	0
   470  001DAC  00                 	db	0
   471  001DAD  00                 	db	0
   472  001DAE  00                 	db	0
   473  001DAF  00                 	db	0
   474  001DB0  00                 	db	0
   475  001DB1  00                 	db	0
   476  001DB2  00                 	db	0
   477  001DB3  00                 	db	0
   478  001DB4  00                 	db	0
   479  001DB5  00                 	db	0
   480  001DB6  00                 	db	0
   481  001DB7  00                 	db	0
   482  001DB8  00                 	db	0
   483  001DB9  00                 	db	0
   484  001DBA  00                 	db	0
   485  001DBB  00                 	db	0
   486  001DBC  4D                 	db	77
   487  001DBD  69                 	db	105
   488  001DBE  63                 	db	99
   489  001DBF  72                 	db	114
   490  001DC0  6F                 	db	111
   491  001DC1  63                 	db	99
   492  001DC2  6F                 	db	111
   493  001DC3  6E                 	db	110
   494  001DC4  74                 	db	116
   495  001DC5  72                 	db	114
   496  001DC6  6F                 	db	111
   497  001DC7  6C                 	db	108
   498  001DC8  3A                 	db	58
   499  001DC9  20                 	db	32
   500  001DCA  20                 	db	32
   501  001DCB  00                 	db	0
   502  001DCC  00                 	db	0
   503  001DCD  00                 	db	0
   504  001DCE  43                 	db	67
   505  001DCF  6C                 	db	108
   506  001DD0  65                 	db	101
   507  001DD1  6D                 	db	109
   508  001DD2  65                 	db	101
   509  001DD3  6E                 	db	110
   510  001DD4  74                 	db	116
   511  001DD5  20                 	db	32
   512  001DD6  57                 	db	87
   513  001DD7  61                 	db	97
   514  001DD8  6E                 	db	110
   515  001DD9  20                 	db	32
   516  001DDA  20                 	db	32
   517  001DDB  20                 	db	32
   518  001DDC  20                 	db	32
   519  001DDD  00                 	db	0
   520  001DDE  00                 	db	0
   521  001DDF  00                 	db	0
   522  001DE0  43                 	db	67
   523  001DE1  69                 	db	105
   524  001DE2  72                 	db	114
   525  001DE3  63                 	db	99
   526  001DE4  75                 	db	117
   527  001DE5  69                 	db	105
   528  001DE6  74                 	db	116
   529  001DE7  73                 	db	115
   530  001DE8  3A                 	db	58
   531  001DE9  20                 	db	32
   532  001DEA  20                 	db	32
   533  001DEB  20                 	db	32
   534  001DEC  20                 	db	32
   535  001DED  20                 	db	32
   536  001DEE  20                 	db	32
   537  001DEF  00                 	db	0
   538  001DF0  00                 	db	0
   539  001DF1  00                 	db	0
   540  001DF2  4A                 	db	74
   541  001DF3  75                 	db	117
   542  001DF4  73                 	db	115
   543  001DF5  74                 	db	116
   544  001DF6  69                 	db	105
   545  001DF7  6E                 	db	110
   546  001DF8  20                 	db	32
   547  001DF9  51                 	db	81
   548  001DFA  75                 	db	117
   549  001DFB  20                 	db	32
   550  001DFC  20                 	db	32
   551  001DFD  20                 	db	32
   552  001DFE  20                 	db	32
   553  001DFF  20                 	db	32
   554  001E00  20                 	db	32
   555  001E01  00                 	db	0
   556  001E02  00                 	db	0
   557  001E03  00                 	db	0
   558  001E04  45                 	db	69
   559  001E05  6C                 	db	108
   560  001E06  65                 	db	101
   561  001E07  63                 	db	99
   562  001E08  74                 	db	116
   563  001E09  72                 	db	114
   564  001E0A  6F                 	db	111
   565  001E0B  6D                 	db	109
   566  001E0C  65                 	db	101
   567  001E0D  63                 	db	99
   568  001E0E  68                 	db	104
   569  001E0F  3A                 	db	58
   570  001E10  20                 	db	32
   571  001E11  20                 	db	32
   572  001E12  20                 	db	32
   573  001E13  00                 	db	0
   574  001E14  00                 	db	0
   575  001E15  00                 	db	0
   576  001E16  50                 	db	80
   577  001E17  65                 	db	101
   578  001E18  74                 	db	116
   579  001E19  65                 	db	101
   580  001E1A  72                 	db	114
   581  001E1B  20                 	db	32
   582  001E1C  46                 	db	70
   583  001E1D  65                 	db	101
   584  001E1E  6E                 	db	110
   585  001E1F  67                 	db	103
   586  001E20  20                 	db	32
   587  001E21  20                 	db	32
   588  001E22  20                 	db	32
   589  001E23  20                 	db	32
   590  001E24  20                 	db	32
   591  001E25  00                 	db	0
   592  001E26  00                 	db	0
   593  001E27  00                 	db	0
   594  001E28  00                 	db	0
   595  001E29  00                 	db	0
   596  001E2A  00                 	db	0
   597  001E2B  00                 	db	0
   598  001E2C  00                 	db	0
   599  001E2D  00                 	db	0
   600  001E2E  00                 	db	0
   601  001E2F  00                 	db	0
   602  001E30  00                 	db	0
   603  001E31  00                 	db	0
   604  001E32  00                 	db	0
   605  001E33  00                 	db	0
   606  001E34  00                 	db	0
   607  001E35  00                 	db	0
   608  001E36  00                 	db	0
   609  001E37  00                 	db	0
   610  001E38  00                 	db	0
   611  001E39  00                 	db	0
   612  001E3A  00                 	db	0
   613  001E3B  00                 	db	0
   614  001E3C  00                 	db	0
   615  001E3D  00                 	db	0
   616  001E3E  00                 	db	0
   617  001E3F  00                 	db	0
   618  001E40  00                 	db	0
   619  001E41  00                 	db	0
   620  001E42  00                 	db	0
   621  001E43  00                 	db	0
   622  001E44  00                 	db	0
   623  001E45  00                 	db	0
   624  001E46  00                 	db	0
   625  001E47  00                 	db	0
   626  001E48  00                 	db	0
   627  001E49  00                 	db	0
   628  001E4A  00                 	db	0
   629  001E4B  00                 	db	0
   630  001E4C  00                 	db	0
   631  001E4D  00                 	db	0
   632  001E4E  00                 	db	0
   633  001E4F  00                 	db	0
   634  001E50  00                 	db	0
   635  001E51  00                 	db	0
   636  001E52  00                 	db	0
   637  001E53  00                 	db	0
   638  001E54  00                 	db	0
   639  001E55  00                 	db	0
   640  001E56  00                 	db	0
   641  001E57  00                 	db	0
   642  001E58  00                 	db	0
   643  001E59  00                 	db	0
   644  001E5A  00                 	db	0
   645  001E5B  00                 	db	0
   646  001E5C  00                 	db	0
   647  001E5D  00                 	db	0
   648  001E5E  00                 	db	0
   649  001E5F  00                 	db	0
   650  001E60  00                 	db	0
   651  001E61  00                 	db	0
   652  001E62  00                 	db	0
   653  001E63  00                 	db	0
   654  001E64  00                 	db	0
   655  001E65  00                 	db	0
   656  001E66  00                 	db	0
   657  001E67  00                 	db	0
   658  001E68  00                 	db	0
   659  001E69  00                 	db	0
   660  001E6A  00                 	db	0
   661  001E6B  00                 	db	0
   662  001E6C  00                 	db	0
   663  001E6D  00                 	db	0
   664  001E6E  00                 	db	0
   665  001E6F  00                 	db	0
   666  001E70  00                 	db	0
   667  001E71  00                 	db	0
   668  001E72  00                 	db	0
   669  001E73  00                 	db	0
   670  001E74  00                 	db	0
   671  001E75  00                 	db	0
   672  001E76  00                 	db	0
   673  001E77  00                 	db	0
   674  001E78  00                 	db	0
   675  001E79  00                 	db	0
   676  001E7A  00                 	db	0
   677  001E7B  00                 	db	0
   678  001E7C  00                 	db	0
   679  001E7D  00                 	db	0
   680  001E7E  00                 	db	0
   681  001E7F  00                 	db	0
   682  001E80  00                 	db	0
   683  001E81  00                 	db	0
   684  001E82  00                 	db	0
   685  001E83  00                 	db	0
   686  001E84  00                 	db	0
   687  001E85  00                 	db	0
   688  001E86  00                 	db	0
   689  001E87  00                 	db	0
   690  001E88  00                 	db	0
   691  001E89  00                 	db	0
   692  001E8A  00                 	db	0
   693  001E8B  00                 	db	0
   694  001E8C  00                 	db	0
   695  001E8D  00                 	db	0
   696  001E8E  00                 	db	0
   697  001E8F  00                 	db	0
   698  001E90  00                 	db	0
   699  001E91  00                 	db	0
   700  001E92  00                 	db	0
   701  001E93  00                 	db	0
   702  001E94  00                 	db	0
   703  001E95  00                 	db	0
   704  001E96  00                 	db	0
   705  001E97  00                 	db	0
   706  001E98  00                 	db	0
   707  001E99  00                 	db	0
   708  001E9A  00                 	db	0
   709  001E9B  00                 	db	0
   710  001E9C  00                 	db	0
   711  001E9D  00                 	db	0
   712  001E9E  00                 	db	0
   713  001E9F  00                 	db	0
   714  001EA0  00                 	db	0
   715  001EA1  00                 	db	0
   716  001EA2  00                 	db	0
   717  001EA3  00                 	db	0
   718  001EA4  00                 	db	0
   719  001EA5  00                 	db	0
   720  001EA6  00                 	db	0
   721  001EA7  00                 	db	0
   722  001EA8  00                 	db	0
   723  001EA9  00                 	db	0
   724  001EAA  00                 	db	0
   725  001EAB  00                 	db	0
   726  001EAC  00                 	db	0
   727  001EAD  00                 	db	0
   728  001EAE  00                 	db	0
   729  001EAF  00                 	db	0
   730  001EB0  00                 	db	0
   731  001EB1  00                 	db	0
   732  001EB2  00                 	db	0
   733  001EB3  00                 	db	0
   734  001EB4  00                 	db	0
   735  001EB5  00                 	db	0
   736  001EB6  00                 	db	0
   737  001EB7  00                 	db	0
   738  001EB8  00                 	db	0
   739  001EB9  00                 	db	0
   740  001EBA  00                 	db	0
   741  001EBB  00                 	db	0
   742  001EBC  00                 	db	0
   743  001EBD  00                 	db	0
   744  001EBE  00                 	db	0
   745  001EBF  00                 	db	0
   746  001EC0  00                 	db	0
   747  001EC1  00                 	db	0
   748  001EC2  00                 	db	0
   749  001EC3  00                 	db	0
   750  001EC4  00                 	db	0
   751  001EC5  00                 	db	0
   752  001EC6  00                 	db	0
   753  001EC7  00                 	db	0
   754  001EC8  00                 	db	0
   755  001EC9  00                 	db	0
   756  001ECA  00                 	db	0
   757  001ECB  00                 	db	0
   758  001ECC  00                 	db	0
   759  001ECD  00                 	db	0
   760  001ECE  00                 	db	0
   761  001ECF  00                 	db	0
   762  001ED0  00                 	db	0
   763  001ED1  00                 	db	0
   764  001ED2  00                 	db	0
   765  001ED3  00                 	db	0
   766  001ED4  00                 	db	0
   767  001ED5  00                 	db	0
   768  001ED6  00                 	db	0
   769  001ED7  00                 	db	0
   770  001ED8  00                 	db	0
   771  001ED9  00                 	db	0
   772  001EDA  00                 	db	0
   773  001EDB  00                 	db	0
   774  001EDC  00                 	db	0
   775  001EDD  00                 	db	0
   776  001EDE  00                 	db	0
   777  001EDF  00                 	db	0
   778  001EE0  00                 	db	0
   779  001EE1  00                 	db	0
   780  001EE2  00                 	db	0
   781  001EE3  00                 	db	0
   782  001EE4  00                 	db	0
   783  001EE5  00                 	db	0
   784  001EE6  00                 	db	0
   785  001EE7  00                 	db	0
   786  001EE8  00                 	db	0
   787  001EE9  00                 	db	0
   788  001EEA  00                 	db	0
   789  001EEB  00                 	db	0
   790  001EEC  00                 	db	0
   791  001EED  00                 	db	0
   792  001EEE  00                 	db	0
   793  001EEF  00                 	db	0
   794  001EF0  00                 	db	0
   795  001EF1  00                 	db	0
   796  001EF2  00                 	db	0
   797  001EF3  00                 	db	0
   798  001EF4  00                 	db	0
   799  001EF5  00                 	db	0
   800  001EF6  00                 	db	0
   801  001EF7  00                 	db	0
   802  001EF8  00                 	db	0
   803  001EF9  00                 	db	0
   804  001EFA  00                 	db	0
   805  001EFB  00                 	db	0
   806  001EFC  00                 	db	0
   807  001EFD  00                 	db	0
   808  001EFE  00                 	db	0
   809  001EFF  00                 	db	0
   810  001F00  00                 	db	0
   811  001F01  00                 	db	0
   812  001F02  00                 	db	0
   813  001F03  00                 	db	0
   814  001F04  00                 	db	0
   815  001F05  00                 	db	0
   816  001F06  00                 	db	0
   817  001F07  00                 	db	0
   818  001F08  00                 	db	0
   819  001F09  00                 	db	0
   820  001F0A  00                 	db	0
   821  001F0B  00                 	db	0
   822  001F0C  00                 	db	0
   823  001F0D  00                 	db	0
   824  001F0E  00                 	db	0
   825  001F0F  00                 	db	0
   826  001F10  00                 	db	0
   827  001F11  00                 	db	0
   828  001F12  00                 	db	0
   829  001F13  00                 	db	0
   830  001F14  00                 	db	0
   831  001F15  00                 	db	0
   832  001F16  00                 	db	0
   833  001F17  00                 	db	0
   834  001F18  00                 	db	0
   835  001F19  00                 	db	0
   836  001F1A  00                 	db	0
   837  001F1B  00                 	db	0
   838  001F1C  00                 	db	0
   839  001F1D  00                 	db	0
   840  001F1E  00                 	db	0
   841  001F1F  00                 	db	0
   842  001F20  00                 	db	0
   843  001F21  00                 	db	0
   844  001F22  00                 	db	0
   845  001F23  00                 	db	0
   846                           
   847                           	psect	idataBANK0
   848  002F26                     __pidataBANK0:
   849                           	opt stack 0
   850                           
   851                           ;initializer for _nstate
   852  002F26  72                 	db	114
   853                           
   854                           ;initializer for _state
   855  002F27  72                 	db	114
   856                           
   857                           ;initializer for _creditIndex
   858  002F28  0001               	dw	1
   859                           
   860                           ;initializer for _creditSize
   861  002F2A  0005               	dw	5
   862                           
   863                           ;initializer for _endIndex
   864  002F2C  0001               	dw	1
   865                           
   866                           ;initializer for _endSize
   867  002F2E  0003               	dw	3
   868                           
   869                           ;initializer for _events
   870  002F30  0002               	dw	2
   871                           
   872                           ;initializer for _logIndex
   873  002F32  0001               	dw	1
   874                           
   875                           ;initializer for _menuIndex
   876  002F34  0001               	dw	1
   877                           
   878                           ;initializer for _menuSize
   879  002F36  0003               	dw	3
   880                           
   881                           	psect	mediumconst
   882  00FED4                     __pmediumconst:
   883                           	opt stack 0
   884  00FED4  00                 	db	0
   885  00FED5                     _keys:
   886                           	opt stack 0
   887  00FED5  31                 	db	49
   888  00FED6  32                 	db	50
   889  00FED7  33                 	db	51
   890  00FED8  41                 	db	65
   891  00FED9  34                 	db	52
   892  00FEDA  35                 	db	53
   893  00FEDB  36                 	db	54
   894  00FEDC  42                 	db	66
   895  00FEDD  37                 	db	55
   896  00FEDE  38                 	db	56
   897  00FEDF  39                 	db	57
   898  00FEE0  43                 	db	67
   899  00FEE1  2A                 	db	42
   900  00FEE2  30                 	db	48
   901  00FEE3  23                 	db	35
   902  00FEE4  44                 	db	68
   903  00FEE5  00                 	db	0
   904  00FEE6                     __end_of_keys:
   905                           	opt stack 0
   906  00FEE6                     _dpowers:
   907                           	opt stack 0
   908  00FEE6  0001               	dw	1
   909  00FEE8  000A               	dw	10
   910  00FEEA  0064               	dw	100
   911  00FEEC  03E8               	dw	1000
   912  00FEEE  2710               	dw	10000
   913  00FEF0                     __end_of_dpowers:
   914                           	opt stack 0
   915  00FEF0                     _hexpowers:
   916                           	opt stack 0
   917  00FEF0  0001               	dw	1
   918  00FEF2  0010               	dw	16
   919  00FEF4  0100               	dw	256
   920  00FEF6  1000               	dw	4096
   921  00FEF8                     __end_of_hexpowers:
   922                           	opt stack 0
   923  00FEF8                     _manualDateTime:
   924                           	opt stack 0
   925  00FEF8  00                 	db	0
   926  00FEF9  00                 	db	0
   927  00FEFA  00                 	db	0
   928  00FEFB  00                 	db	0
   929  00FEFC  01                 	db	1
   930  00FEFD  00                 	db	0
   931  00FEFE  17                 	db	23
   932  00FEFF                     __end_of_manualDateTime:
   933                           	opt stack 0
   934  0000                     _ADCON0	set	4034
   935  0000                     _ADCON0bits	set	4034
   936  0000                     _ADCON1	set	4033
   937  0000                     _ADRESL	set	4035
   938  0000                     _INTCONbits	set	4082
   939  0000                     _LATB	set	3978
   940  0000                     _LATC	set	3979
   941  0000                     _LATD	set	3980
   942  0000                     _LATDbits	set	3980
   943  0000                     _PORTB	set	3969
   944  0000                     _SSPADD	set	4040
   945  0000                     _SSPBUF	set	4041
   946  0000                     _SSPCON1	set	4038
   947  0000                     _SSPCON2	set	4037
   948  0000                     _SSPSTAT	set	4039
   949  0000                     _TRISB	set	3987
   950  0000                     _TRISC	set	3988
   951  0000                     _TRISD	set	3989
   952  0000                     _ADRESH	set	4036
   953  0000                     _ACKDT	set	32301
   954  0000                     _ACKEN	set	32300
   955  0000                     _ADON	set	32272
   956  0000                     _INT1IE	set	32643
   957  0000                     _INT1IF	set	32640
   958  0000                     _PEN	set	32298
   959  0000                     _RCEN	set	32299
   960  0000                     _RSEN	set	32297
   961  0000                     _SEN	set	32296
   962  0000                     _TRISC3	set	31907
   963  0000                     _TRISC4	set	31908
   964  0000                     _nRBPU	set	32655
   965  00FEFF                     STR_3:
   966  00FEFF  25                 	db	37
   967  00FF00  64                 	db	100	;'d'
   968  00FF01  3A                 	db	58	;':'
   969  00FF02  25                 	db	37
   970  00FF03  30                 	db	48	;'0'
   971  00FF04  32                 	db	50	;'2'
   972  00FF05  64                 	db	100	;'d'
   973  00FF06  20                 	db	32
   974  00FF07  65                 	db	101	;'e'
   975  00FF08  6E                 	db	110	;'n'
   976  00FF09  3A                 	db	58	;':'
   977  00FF0A  25                 	db	37
   978  00FF0B  30                 	db	48	;'0'
   979  00FF0C  32                 	db	50	;'2'
   980  00FF0D  64                 	db	100	;'d'
   981  00FF0E  20                 	db	32
   982  00FF0F  65                 	db	101	;'e'
   983  00FF10  63                 	db	99	;'c'
   984  00FF11  3A                 	db	58	;':'
   985  00FF12  25                 	db	37
   986  00FF13  30                 	db	48	;'0'
   987  00FF14  32                 	db	50	;'2'
   988  00FF15  64                 	db	100	;'d'
   989  00FF16  20                 	db	32
   990  00FF17  00                 	db	0
   991  00FF18                     STR_1:
   992  00FF18  25                 	db	37
   993  00FF19  30                 	db	48	;'0'
   994  00FF1A  32                 	db	50	;'2'
   995  00FF1B  78                 	db	120	;'x'
   996  00FF1C  2F                 	db	47
   997  00FF1D  25                 	db	37
   998  00FF1E  30                 	db	48	;'0'
   999  00FF1F  32                 	db	50	;'2'
  1000  00FF20  78                 	db	120	;'x'
  1001  00FF21  2F                 	db	47
  1002  00FF22  25                 	db	37
  1003  00FF23  30                 	db	48	;'0'
  1004  00FF24  32                 	db	50	;'2'
  1005  00FF25  78                 	db	120	;'x'
  1006  00FF26  20                 	db	32
  1007  00FF27  50                 	db	80	;'P'
  1008  00FF28  55                 	db	85	;'U'
  1009  00FF29  53                 	db	83	;'S'
  1010  00FF2A  48                 	db	72	;'H'
  1011  00FF2B  20                 	db	32
  1012  00FF2C  54                 	db	84	;'T'
  1013  00FF2D  4F                 	db	79	;'O'
  1014  00FF2E  00                 	db	0
  1015  00FF2F                     STR_2:
  1016  00FF2F  25                 	db	37
  1017  00FF30  30                 	db	48	;'0'
  1018  00FF31  32                 	db	50	;'2'
  1019  00FF32  78                 	db	120	;'x'
  1020  00FF33  3A                 	db	58	;':'
  1021  00FF34  25                 	db	37
  1022  00FF35  30                 	db	48	;'0'
  1023  00FF36  32                 	db	50	;'2'
  1024  00FF37  78                 	db	120	;'x'
  1025  00FF38  3A                 	db	58	;':'
  1026  00FF39  25                 	db	37
  1027  00FF3A  30                 	db	48	;'0'
  1028  00FF3B  32                 	db	50	;'2'
  1029  00FF3C  78                 	db	120	;'x'
  1030  00FF3D  20                 	db	32
  1031  00FF3E  20                 	db	32
  1032  00FF3F  20                 	db	32
  1033  00FF40  53                 	db	83	;'S'
  1034  00FF41  54                 	db	84	;'T'
  1035  00FF42  41                 	db	65	;'A'
  1036  00FF43  52                 	db	82	;'R'
  1037  00FF44  54                 	db	84	;'T'
  1038  00FF45  00                 	db	0
  1039  00FF46                     STR_8:
  1040  00FF46  72                 	db	114	;'r'
  1041  00FF47  75                 	db	117	;'u'
  1042  00FF48  6E                 	db	110	;'n'
  1043  00FF49  20                 	db	32
  1044  00FF4A  74                 	db	116	;'t'
  1045  00FF4B  69                 	db	105	;'i'
  1046  00FF4C  6D                 	db	109	;'m'
  1047  00FF4D  65                 	db	101	;'e'
  1048  00FF4E  3A                 	db	58	;':'
  1049  00FF4F  20                 	db	32
  1050  00FF50  25                 	db	37
  1051  00FF51  30                 	db	48	;'0'
  1052  00FF52  31                 	db	49	;'1'
  1053  00FF53  64                 	db	100	;'d'
  1054  00FF54  3A                 	db	58	;':'
  1055  00FF55  25                 	db	37
  1056  00FF56  30                 	db	48	;'0'
  1057  00FF57  32                 	db	50	;'2'
  1058  00FF58  64                 	db	100	;'d'
  1059  00FF59  20                 	db	32
  1060  00FF5A  00                 	db	0
  1061  00FF5B  00                 	db	0
  1062  00FF5C                     STR_9:
  1063  00FF5C  65                 	db	101	;'e'
  1064  00FF5D  6E                 	db	110	;'n'
  1065  00FF5E  3A                 	db	58	;':'
  1066  00FF5F  25                 	db	37
  1067  00FF60  30                 	db	48	;'0'
  1068  00FF61  32                 	db	50	;'2'
  1069  00FF62  64                 	db	100	;'d'
  1070  00FF63  20                 	db	32
  1071  00FF64  65                 	db	101	;'e'
  1072  00FF65  63                 	db	99	;'c'
  1073  00FF66  3A                 	db	58	;':'
  1074  00FF67  25                 	db	37
  1075  00FF68  30                 	db	48	;'0'
  1076  00FF69  32                 	db	50	;'2'
  1077  00FF6A  64                 	db	100	;'d'
  1078  00FF6B  20                 	db	32
  1079  00FF6C  20                 	db	32
  1080  00FF6D  20                 	db	32
  1081  00FF6E  20                 	db	32
  1082  00FF6F  00                 	db	0
  1083  00FF70                     STR_10:
  1084  00FF70  79                 	db	121	;'y'
  1085  00FF71  6E                 	db	110	;'n'
  1086  00FF72  3A                 	db	58	;':'
  1087  00FF73  25                 	db	37
  1088  00FF74  30                 	db	48	;'0'
  1089  00FF75  32                 	db	50	;'2'
  1090  00FF76  64                 	db	100	;'d'
  1091  00FF77  20                 	db	32
  1092  00FF78  79                 	db	121	;'y'
  1093  00FF79  63                 	db	99	;'c'
  1094  00FF7A  3A                 	db	58	;':'
  1095  00FF7B  25                 	db	37
  1096  00FF7C  30                 	db	48	;'0'
  1097  00FF7D  32                 	db	50	;'2'
  1098  00FF7E  64                 	db	100	;'d'
  1099  00FF7F  20                 	db	32
  1100  00FF80  20                 	db	32
  1101  00FF81  20                 	db	32
  1102  00FF82  20                 	db	32
  1103  00FF83  00                 	db	0
  1104  00FF84                     STR_7:
  1105  00FF84  62                 	db	98	;'b'
  1106  00FF85  6F                 	db	111	;'o'
  1107  00FF86  74                 	db	116	;'t'
  1108  00FF87  74                 	db	116	;'t'
  1109  00FF88  6C                 	db	108	;'l'
  1110  00FF89  65                 	db	101	;'e'
  1111  00FF8A  73                 	db	115	;'s'
  1112  00FF8B  3A                 	db	58	;':'
  1113  00FF8C  20                 	db	32
  1114  00FF8D  25                 	db	37
  1115  00FF8E  30                 	db	48	;'0'
  1116  00FF8F  32                 	db	50	;'2'
  1117  00FF90  64                 	db	100	;'d'
  1118  00FF91  20                 	db	32
  1119  00FF92  20                 	db	32
  1120  00FF93  20                 	db	32
  1121  00FF94  20                 	db	32
  1122  00FF95  00                 	db	0
  1123  00FF96  00                 	db	0
  1124  00FF97                     STR_19:
  1125  00FF97  30                 	db	48	;'0'
  1126  00FF98  31                 	db	49	;'1'
  1127  00FF99  32                 	db	50	;'2'
  1128  00FF9A  33                 	db	51	;'3'
  1129  00FF9B  34                 	db	52	;'4'
  1130  00FF9C  35                 	db	53	;'5'
  1131  00FF9D  36                 	db	54	;'6'
  1132  00FF9E  37                 	db	55	;'7'
  1133  00FF9F  38                 	db	56	;'8'
  1134  00FFA0  39                 	db	57	;'9'
  1135  00FFA1  61                 	db	97	;'a'
  1136  00FFA2  62                 	db	98	;'b'
  1137  00FFA3  63                 	db	99	;'c'
  1138  00FFA4  64                 	db	100	;'d'
  1139  00FFA5  65                 	db	101	;'e'
  1140  00FFA6  66                 	db	102	;'f'
  1141  00FFA7  00                 	db	0
  1142  00FFA8                     STR_4:
  1143  00FFA8  79                 	db	121	;'y'
  1144  00FFA9  6E                 	db	110	;'n'
  1145  00FFAA  3A                 	db	58	;':'
  1146  00FFAB  25                 	db	37
  1147  00FFAC  30                 	db	48	;'0'
  1148  00FFAD  32                 	db	50	;'2'
  1149  00FFAE  64                 	db	100	;'d'
  1150  00FFAF  20                 	db	32
  1151  00FFB0  79                 	db	121	;'y'
  1152  00FFB1  63                 	db	99	;'c'
  1153  00FFB2  3A                 	db	58	;':'
  1154  00FFB3  25                 	db	37
  1155  00FFB4  30                 	db	48	;'0'
  1156  00FFB5  32                 	db	50	;'2'
  1157  00FFB6  64                 	db	100	;'d'
  1158  00FFB7  00                 	db	0
  1159  00FFB8                     STR_6:
  1160  00FFB8  45                 	db	69	;'E'
  1161  00FFB9  4D                 	db	77	;'M'
  1162  00FFBA  45                 	db	69	;'E'
  1163  00FFBB  52                 	db	82	;'R'
  1164  00FFBC  47                 	db	71	;'G'
  1165  00FFBD  45                 	db	69	;'E'
  1166  00FFBE  4E                 	db	78	;'N'
  1167  00FFBF  43                 	db	67	;'C'
  1168  00FFC0  59                 	db	89	;'Y'
  1169  00FFC1  20                 	db	32
  1170  00FFC2  53                 	db	83	;'S'
  1171  00FFC3  54                 	db	84	;'T'
  1172  00FFC4  4F                 	db	79	;'O'
  1173  00FFC5  50                 	db	80	;'P'
  1174  00FFC6  00                 	db	0
  1175  00FFC7                     STR_16:
  1176  00FFC7  6D                 	db	109	;'m'
  1177  00FFC8  65                 	db	101	;'e'
  1178  00FFC9  6E                 	db	110	;'n'
  1179  00FFCA  75                 	db	117	;'u'
  1180  00FFCB  20                 	db	32
  1181  00FFCC  73                 	db	115	;'s'
  1182  00FFCD  65                 	db	101	;'e'
  1183  00FFCE  6C                 	db	108	;'l'
  1184  00FFCF  65                 	db	101	;'e'
  1185  00FFD0  63                 	db	99	;'c'
  1186  00FFD1  74                 	db	116	;'t'
  1187  00FFD2  69                 	db	105	;'i'
  1188  00FFD3  6F                 	db	111	;'o'
  1189  00FFD4  6E                 	db	110	;'n'
  1190  00FFD5  00                 	db	0
  1191  00FFD6                     STR_17:
  1192  00FFD6  6E                 	db	110	;'n'
  1193  00FFD7  6F                 	db	111	;'o'
  1194  00FFD8  20                 	db	32
  1195  00FFD9  70                 	db	112	;'p'
  1196  00FFDA  61                 	db	97	;'a'
  1197  00FFDB  67                 	db	103	;'g'
  1198  00FFDC  65                 	db	101	;'e'
  1199  00FFDD  20                 	db	32
  1200  00FFDE  66                 	db	102	;'f'
  1201  00FFDF  6F                 	db	111	;'o'
  1202  00FFE0  75                 	db	117	;'u'
  1203  00FFE1  6E                 	db	110	;'n'
  1204  00FFE2  64                 	db	100	;'d'
  1205  00FFE3  00                 	db	0
  1206  00FFE4                     STR_15:
  1207  00FFE4  69                 	db	105	;'i'
  1208  00FFE5  6E                 	db	110	;'n'
  1209  00FFE6  76                 	db	118	;'v'
  1210  00FFE7  61                 	db	97	;'a'
  1211  00FFE8  6C                 	db	108	;'l'
  1212  00FFE9  69                 	db	105	;'i'
  1213  00FFEA  64                 	db	100	;'d'
  1214  00FFEB  00                 	db	0
  1215  00FFEC                     STR_18:
  1216  00FFEC  28                 	db	40
  1217  00FFED  6E                 	db	110	;'n'
  1218  00FFEE  75                 	db	117	;'u'
  1219  00FFEF  6C                 	db	108	;'l'
  1220  00FFF0  6C                 	db	108	;'l'
  1221  00FFF1  29                 	db	41
  1222  00FFF2  00                 	db	0
  1223  00FFF3                     STR_5:
  1224  00FFF3  45                 	db	69	;'E'
  1225  00FFF4  52                 	db	82	;'R'
  1226  00FFF5  52                 	db	82	;'R'
  1227  00FFF6  4F                 	db	79	;'O'
  1228  00FFF7  52                 	db	82	;'R'
  1229  00FFF8  00                 	db	0
  1230  00FFF9                     STR_11:
  1231  00FFF9  25                 	db	37
  1232  00FFFA  73                 	db	115	;'s'
  1233  00FFFB  25                 	db	37
  1234  00FFFC  63                 	db	99	;'c'
  1235  00FFFD  00                 	db	0
  1236  0000                     
  1237                           ; #config settings
  1238  00FFFE  00                 	db	0	; dummy byte at the end
  1239  0000                     
  1240                           	psect	cinit
  1241  0027D4                     __pcinit:
  1242                           	opt stack 0
  1243  0027D4                     start_initialization:
  1244                           	opt stack 0
  1245  0027D4                     __initialization:
  1246                           	opt stack 0
  1247                           
  1248                           ; Initialize objects allocated to BIGRAM (720 bytes)
  1249                           ; load TBLPTR registers with __pidataBIGRAM
  1250  0027D4  0E54               	movlw	low __pidataBIGRAM
  1251  0027D6  6EF6               	movwf	tblptrl,c
  1252  0027D8  0E1C               	movlw	high __pidataBIGRAM
  1253  0027DA  6EF7               	movwf	tblptrh,c
  1254  0027DC  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
  1255  0027DE  6EF8               	movwf	tblptru,c
  1256  0027E0  EE01  F070         	lfsr	0,__pdataBIGRAM
  1257  0027E4  EE12 F0D0          	lfsr	1,720
  1258  0027E8                     copy_data0:
  1259  0027E8  0009               	tblrd		*+
  1260  0027EA  CFF5 FFEE          	movff	tablat,postinc0
  1261  0027EE  50E5               	movf	postdec1,w,c
  1262  0027F0  50E1               	movf	fsr1l,w,c
  1263  0027F2  E1FA               	bnz	copy_data0
  1264  0027F4  50E2               	movf	fsr1h,w,c
  1265  0027F6  E1F8               	bnz	copy_data0
  1266                           
  1267                           ; Initialize objects allocated to BANK0 (18 bytes)
  1268                           ; load TBLPTR registers with __pidataBANK0
  1269  0027F8  0E26               	movlw	low __pidataBANK0
  1270  0027FA  6EF6               	movwf	tblptrl,c
  1271  0027FC  0E2F               	movlw	high __pidataBANK0
  1272  0027FE  6EF7               	movwf	tblptrh,c
  1273  002800  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1274  002802  6EF8               	movwf	tblptru,c
  1275  002804  EE00  F0E7         	lfsr	0,__pdataBANK0
  1276  002808  EE10 F012          	lfsr	1,18
  1277  00280C                     copy_data1:
  1278  00280C  0009               	tblrd		*+
  1279  00280E  CFF5 FFEE          	movff	tablat,postinc0
  1280  002812  50E5               	movf	postdec1,w,c
  1281  002814  50E1               	movf	fsr1l,w,c
  1282  002816  E1FA               	bnz	copy_data1
  1283                           
  1284                           ; Initialize objects allocated to COMRAM (7 bytes)
  1285                           ; load TBLPTR registers with __pidataCOMRAM
  1286  002818  0E7A               	movlw	low __pidataCOMRAM
  1287  00281A  6EF6               	movwf	tblptrl,c
  1288  00281C  0E2F               	movlw	high __pidataCOMRAM
  1289  00281E  6EF7               	movwf	tblptrh,c
  1290  002820  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1291  002822  6EF8               	movwf	tblptru,c
  1292  002824  EE00  F070         	lfsr	0,__pdataCOMRAM
  1293  002828  EE10 F007          	lfsr	1,7
  1294  00282C                     copy_data2:
  1295  00282C  0009               	tblrd		*+
  1296  00282E  CFF5 FFEE          	movff	tablat,postinc0
  1297  002832  50E5               	movf	postdec1,w,c
  1298  002834  50E1               	movf	fsr1l,w,c
  1299  002836  E1FA               	bnz	copy_data2
  1300                           
  1301                           ; Clear objects allocated to BANK1 (102 bytes)
  1302  002838  EE01  F000         	lfsr	0,__pbssBANK1
  1303  00283C  0E66               	movlw	102
  1304  00283E                     clear_0:
  1305  00283E  6AEE               	clrf	postinc0,c
  1306  002840  06E8               	decf	wreg,f,c
  1307  002842  E1FD               	bnz	clear_0
  1308                           
  1309                           ; Clear objects allocated to BANK0 (45 bytes)
  1310  002844  EE00  F0BA         	lfsr	0,__pbssBANK0
  1311  002848  0E2D               	movlw	45
  1312  00284A                     clear_1:
  1313  00284A  6AEE               	clrf	postinc0,c
  1314  00284C  06E8               	decf	wreg,f,c
  1315  00284E  E1FD               	bnz	clear_1
  1316                           
  1317                           ; Clear objects allocated to COMRAM (50 bytes)
  1318  002850  EE00  F03E         	lfsr	0,__pbssCOMRAM
  1319  002854  0E32               	movlw	50
  1320  002856                     clear_2:
  1321  002856  6AEE               	clrf	postinc0,c
  1322  002858  06E8               	decf	wreg,f,c
  1323  00285A  E1FD               	bnz	clear_2
  1324  00285C                     end_of_initialization:
  1325                           	opt stack 0
  1326  00285C                     __end_of__initialization:
  1327                           	opt stack 0
  1328  00285C  9077               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1329  00285E  9277               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1330  002860  0100               	movlb	0
  1331  002862  EFA7  F014         	goto	_main	;jump to C main() function
  1332                           tblptru	equ	0xFF8
  1333                           tblptrh	equ	0xFF7
  1334                           tblptrl	equ	0xFF6
  1335                           tablat	equ	0xFF5
  1336                           postinc0	equ	0xFEE
  1337                           wreg	equ	0xFE8
  1338                           postdec1	equ	0xFE5
  1339                           fsr1h	equ	0xFE2
  1340                           fsr1l	equ	0xFE1
  1341                           
  1342                           	psect	bssCOMRAM
  1343  00003E                     __pbssCOMRAM:
  1344                           	opt stack 0
  1345  00003E                     _latestSortedBottleTime:
  1346                           	opt stack 0
  1347  00003E                     	ds	14
  1348  00004C                     _startTime:
  1349                           	opt stack 0
  1350  00004C                     	ds	14
  1351  00005A                     _PROX1:
  1352                           	opt stack 0
  1353  00005A                     	ds	10
  1354  000064                     _bottle_type:
  1355                           	opt stack 0
  1356  000064                     	ds	2
  1357  000066                     _discretize:
  1358                           	opt stack 0
  1359  000066                     	ds	2
  1360  000068                     _discretize_counter:
  1361                           	opt stack 0
  1362  000068                     	ds	2
  1363  00006A                     _measure_counter:
  1364                           	opt stack 0
  1365  00006A                     	ds	2
  1366  00006C                     _release_counter:
  1367                           	opt stack 0
  1368  00006C                     	ds	2
  1369  00006E                     _DIST1_PIN:
  1370                           	opt stack 0
  1371  00006E                     	ds	1
  1372  00006F                     _PROX1_PIN:
  1373                           	opt stack 0
  1374  00006F                     	ds	1
  1375                           tblptru	equ	0xFF8
  1376                           tblptrh	equ	0xFF7
  1377                           tblptrl	equ	0xFF6
  1378                           tablat	equ	0xFF5
  1379                           postinc0	equ	0xFEE
  1380                           wreg	equ	0xFE8
  1381                           postdec1	equ	0xFE5
  1382                           fsr1h	equ	0xFE2
  1383                           fsr1l	equ	0xFE1
  1384                           
  1385                           	psect	dataCOMRAM
  1386  000070                     __pdataCOMRAM:
  1387                           	opt stack 0
  1388  000070                     _measure:
  1389                           	opt stack 0
  1390  000070                     	ds	2
  1391  000072                     _release:
  1392                           	opt stack 0
  1393  000072                     	ds	2
  1394  000074                     _IR1_PIN:
  1395                           	opt stack 0
  1396  000074                     	ds	1
  1397  000075                     _IR2_PIN:
  1398                           	opt stack 0
  1399  000075                     	ds	1
  1400  000076                     _PROX2_PIN:
  1401                           	opt stack 0
  1402  000076                     	ds	1
  1403                           tblptru	equ	0xFF8
  1404                           tblptrh	equ	0xFF7
  1405                           tblptrl	equ	0xFF6
  1406                           tablat	equ	0xFF5
  1407                           postinc0	equ	0xFEE
  1408                           wreg	equ	0xFE8
  1409                           postdec1	equ	0xFE5
  1410                           fsr1h	equ	0xFE2
  1411                           fsr1l	equ	0xFE1
  1412                           
  1413                           	psect	bssBANK0
  1414  0000BA                     __pbssBANK0:
  1415                           	opt stack 0
  1416  0000BA                     _time_i:
  1417                           	opt stack 0
  1418  0000BA                     	ds	14
  1419  0000C8                     _PROX2:
  1420                           	opt stack 0
  1421  0000C8                     	ds	10
  1422  0000D2                     _time:
  1423                           	opt stack 0
  1424  0000D2                     	ds	7
  1425  0000D9                     _eskaNoCap:
  1426                           	opt stack 0
  1427  0000D9                     	ds	2
  1428  0000DB                     _eskaWCap:
  1429                           	opt stack 0
  1430  0000DB                     	ds	2
  1431  0000DD                     _runTime:
  1432                           	opt stack 0
  1433  0000DD                     	ds	2
  1434  0000DF                     _sorted_bottles:
  1435                           	opt stack 0
  1436  0000DF                     	ds	2
  1437  0000E1                     _timeDiff:
  1438                           	opt stack 0
  1439  0000E1                     	ds	2
  1440  0000E3                     _yopNoCap:
  1441                           	opt stack 0
  1442  0000E3                     	ds	2
  1443  0000E5                     _yopWCap:
  1444                           	opt stack 0
  1445  0000E5                     	ds	2
  1446                           tblptru	equ	0xFF8
  1447                           tblptrh	equ	0xFF7
  1448                           tblptrl	equ	0xFF6
  1449                           tablat	equ	0xFF5
  1450                           postinc0	equ	0xFEE
  1451                           wreg	equ	0xFE8
  1452                           postdec1	equ	0xFE5
  1453                           fsr1h	equ	0xFE2
  1454                           fsr1l	equ	0xFE1
  1455                           
  1456                           	psect	dataBANK0
  1457  0000E7                     __pdataBANK0:
  1458                           	opt stack 0
  1459  0000E7                     _nstate:
  1460                           	opt stack 0
  1461  0000E7                     	ds	1
  1462  0000E8                     _state:
  1463                           	opt stack 0
  1464  0000E8                     	ds	1
  1465  0000E9                     _creditIndex:
  1466                           	opt stack 0
  1467  0000E9                     	ds	2
  1468  0000EB                     _creditSize:
  1469                           	opt stack 0
  1470  0000EB                     	ds	2
  1471  0000ED                     _endIndex:
  1472                           	opt stack 0
  1473  0000ED                     	ds	2
  1474  0000EF                     _endSize:
  1475                           	opt stack 0
  1476  0000EF                     	ds	2
  1477  0000F1                     _events:
  1478                           	opt stack 0
  1479  0000F1                     	ds	2
  1480  0000F3                     _logIndex:
  1481                           	opt stack 0
  1482  0000F3                     	ds	2
  1483  0000F5                     _menuIndex:
  1484                           	opt stack 0
  1485  0000F5                     	ds	2
  1486  0000F7                     _menuSize:
  1487                           	opt stack 0
  1488  0000F7                     	ds	2
  1489                           tblptru	equ	0xFF8
  1490                           tblptrh	equ	0xFF7
  1491                           tblptrl	equ	0xFF6
  1492                           tablat	equ	0xFF5
  1493                           postinc0	equ	0xFEE
  1494                           wreg	equ	0xFE8
  1495                           postdec1	equ	0xFE5
  1496                           fsr1h	equ	0xFE2
  1497                           fsr1l	equ	0xFE1
  1498                           
  1499                           	psect	bssBANK1
  1500  000100                     __pbssBANK1:
  1501                           	opt stack 0
  1502  000100                     _DIST1:
  1503                           	opt stack 0
  1504  000100                     	ds	10
  1505  00010A                     _IR1:
  1506                           	opt stack 0
  1507  00010A                     	ds	10
  1508  000114                     _IR2:
  1509                           	opt stack 0
  1510  000114                     	ds	10
  1511  00011E                     _display0:
  1512                           	opt stack 0
  1513  00011E                     	ds	18
  1514  000130                     _display1:
  1515                           	opt stack 0
  1516  000130                     	ds	18
  1517  000142                     _ndisplay0:
  1518                           	opt stack 0
  1519  000142                     	ds	18
  1520  000154                     _ndisplay1:
  1521                           	opt stack 0
  1522  000154                     	ds	18
  1523                           tblptru	equ	0xFF8
  1524                           tblptrh	equ	0xFF7
  1525                           tblptrl	equ	0xFF6
  1526                           tablat	equ	0xFF5
  1527                           postinc0	equ	0xFEE
  1528                           wreg	equ	0xFE8
  1529                           postdec1	equ	0xFE5
  1530                           fsr1h	equ	0xFE2
  1531                           fsr1l	equ	0xFE1
  1532                           
  1533                           	psect	dataBIGRAM
  1534  000170                     __pdataBIGRAM:
  1535                           	opt stack 0
  1536  000170                     _menu:
  1537                           	opt stack 0
  1538  000170                     	ds	720
  1539                           tblptru	equ	0xFF8
  1540                           tblptrh	equ	0xFF7
  1541                           tblptrl	equ	0xFF6
  1542                           tablat	equ	0xFF5
  1543                           postinc0	equ	0xFEE
  1544                           wreg	equ	0xFE8
  1545                           postdec1	equ	0xFE5
  1546                           fsr1h	equ	0xFE2
  1547                           fsr1l	equ	0xFE1
  1548                           
  1549                           	psect	cstackBANK1
  1550  000166                     __pcstackBANK1:
  1551                           	opt stack 0
  1552  000166                     display_menu@selector:
  1553                           	opt stack 0
  1554                           
  1555                           ; 2 bytes @ 0x0
  1556  000166                     	ds	2
  1557  000168                     display_menu@menuSizePtr:
  1558                           	opt stack 0
  1559                           
  1560                           ; 2 bytes @ 0x2
  1561  000168                     	ds	2
  1562  00016A                     display_menu@menuSelection:
  1563                           	opt stack 0
  1564                           
  1565                           ; 2 bytes @ 0x4
  1566  00016A                     	ds	2
  1567  00016C                     _display_menu$1088:
  1568                           	opt stack 0
  1569                           
  1570                           ; 2 bytes @ 0x6
  1571  00016C                     	ds	2
  1572  00016E                     display_menu@menuIndexPtr:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0x8
  1576  00016E                     	ds	2
  1577                           tblptru	equ	0xFF8
  1578                           tblptrh	equ	0xFF7
  1579                           tblptrl	equ	0xFF6
  1580                           tablat	equ	0xFF5
  1581                           postinc0	equ	0xFEE
  1582                           wreg	equ	0xFE8
  1583                           postdec1	equ	0xFE5
  1584                           fsr1h	equ	0xFE2
  1585                           fsr1l	equ	0xFE1
  1586                           
  1587                           	psect	cstackBANK0
  1588  000080                     __pcstackBANK0:
  1589                           	opt stack 0
  1590  000080                     ??_readADC:
  1591  000080                     ??_isdigit:
  1592  000080                     ??_I2C_Master_Wait:
  1593  000080                     ?_strcmp:
  1594                           	opt stack 0
  1595  000080                     ?___wmul:
  1596                           	opt stack 0
  1597  000080                     ?___awdiv:
  1598                           	opt stack 0
  1599  000080                     ?___awmod:
  1600                           	opt stack 0
  1601  000080                     ?___lwdiv:
  1602                           	opt stack 0
  1603  000080                     ?___lldiv:
  1604                           	opt stack 0
  1605  000080                     lcdNibble@temp:
  1606                           	opt stack 0
  1607  000080                     ___wmul@multiplier:
  1608                           	opt stack 0
  1609  000080                     ___awdiv@dividend:
  1610                           	opt stack 0
  1611  000080                     ___awmod@dividend:
  1612                           	opt stack 0
  1613  000080                     ___lwdiv@dividend:
  1614                           	opt stack 0
  1615  000080                     strcmp@s1:
  1616                           	opt stack 0
  1617  000080                     strcpy@to:
  1618                           	opt stack 0
  1619  000080                     ___lldiv@dividend:
  1620                           	opt stack 0
  1621                           
  1622                           ; 4 bytes @ 0x0
  1623  000080                     	ds	1
  1624  000081                     I2C_Master_Read@a:
  1625                           	opt stack 0
  1626  000081                     lcdNibble@data:
  1627                           	opt stack 0
  1628  000081                     readADC@channel:
  1629                           	opt stack 0
  1630  000081                     _isdigit$698:
  1631                           	opt stack 0
  1632  000081                     I2C_Master_Write@d:
  1633                           	opt stack 0
  1634                           
  1635                           ; 2 bytes @ 0x1
  1636  000081                     	ds	1
  1637  000082                     ??_read_sensors:
  1638  000082                     I2C_Master_Read@temp:
  1639                           	opt stack 0
  1640  000082                     lcdInst@data:
  1641                           	opt stack 0
  1642  000082                     putch@data:
  1643                           	opt stack 0
  1644  000082                     isdigit@c:
  1645                           	opt stack 0
  1646  000082                     ___wmul@multiplicand:
  1647                           	opt stack 0
  1648  000082                     ___awdiv@divisor:
  1649                           	opt stack 0
  1650  000082                     ___awmod@divisor:
  1651                           	opt stack 0
  1652  000082                     ___lwdiv@divisor:
  1653                           	opt stack 0
  1654  000082                     strcmp@s2:
  1655                           	opt stack 0
  1656  000082                     strcpy@from:
  1657                           	opt stack 0
  1658                           
  1659                           ; 2 bytes @ 0x2
  1660  000082                     	ds	1
  1661  000083                     ??_initLCD:
  1662  000083                     set_time@i:
  1663                           	opt stack 0
  1664                           
  1665                           ; 1 bytes @ 0x3
  1666  000083                     	ds	1
  1667  000084                     ??_strcmp:
  1668  000084                     ___awdiv@counter:
  1669                           	opt stack 0
  1670  000084                     ___awmod@counter:
  1671                           	opt stack 0
  1672  000084                     ___lwdiv@counter:
  1673                           	opt stack 0
  1674  000084                     read_sensors@a:
  1675                           	opt stack 0
  1676  000084                     ___wmul@product:
  1677                           	opt stack 0
  1678  000084                     strcpy@cp:
  1679                           	opt stack 0
  1680  000084                     ___lldiv@divisor:
  1681                           	opt stack 0
  1682                           
  1683                           ; 4 bytes @ 0x4
  1684  000084                     	ds	1
  1685  000085                     ___awdiv@sign:
  1686                           	opt stack 0
  1687  000085                     ___awmod@sign:
  1688                           	opt stack 0
  1689  000085                     strcmp@r:
  1690                           	opt stack 0
  1691  000085                     ___lwdiv@quotient:
  1692                           	opt stack 0
  1693                           
  1694                           ; 2 bytes @ 0x5
  1695  000085                     	ds	1
  1696  000086                     ??_update_RTC:
  1697  000086                     ___awdiv@quotient:
  1698                           	opt stack 0
  1699                           
  1700                           ; 2 bytes @ 0x6
  1701  000086                     	ds	1
  1702  000087                     ?___lwmod:
  1703                           	opt stack 0
  1704  000087                     ___lwmod@dividend:
  1705                           	opt stack 0
  1706                           
  1707                           ; 2 bytes @ 0x7
  1708  000087                     	ds	1
  1709  000088                     ___lldiv@quotient:
  1710                           	opt stack 0
  1711                           
  1712                           ; 4 bytes @ 0x8
  1713  000088                     	ds	1
  1714  000089                     ___lwmod@divisor:
  1715                           	opt stack 0
  1716                           
  1717                           ; 2 bytes @ 0x9
  1718  000089                     	ds	1
  1719  00008A                     update_RTC@i:
  1720                           	opt stack 0
  1721                           
  1722                           ; 1 bytes @ 0xA
  1723  00008A                     	ds	1
  1724  00008B                     ___lwmod@counter:
  1725                           	opt stack 0
  1726                           
  1727                           ; 1 bytes @ 0xB
  1728  00008B                     	ds	1
  1729  00008C                     ?__doprnt:
  1730                           	opt stack 0
  1731  00008C                     ___lldiv@counter:
  1732                           	opt stack 0
  1733  00008C                     __doprnt@pb:
  1734                           	opt stack 0
  1735                           
  1736                           ; 2 bytes @ 0xC
  1737  00008C                     	ds	1
  1738  00008D                     I2C_Master_Init@c:
  1739                           	opt stack 0
  1740                           
  1741                           ; 4 bytes @ 0xD
  1742  00008D                     	ds	1
  1743  00008E                     __doprnt@f:
  1744                           	opt stack 0
  1745                           
  1746                           ; 2 bytes @ 0xE
  1747  00008E                     	ds	2
  1748  000090                     __doprnt@ap:
  1749                           	opt stack 0
  1750                           
  1751                           ; 2 bytes @ 0x10
  1752  000090                     	ds	1
  1753  000091                     ??_I2C_Master_Init:
  1754                           
  1755                           ; 1 bytes @ 0x11
  1756  000091                     	ds	1
  1757  000092                     ??__doprnt:
  1758                           
  1759                           ; 1 bytes @ 0x12
  1760  000092                     	ds	4
  1761  000096                     __doprnt@idx:
  1762                           	opt stack 0
  1763                           
  1764                           ; 1 bytes @ 0x16
  1765  000096                     	ds	1
  1766  000097                     __doprnt@prec:
  1767                           	opt stack 0
  1768                           
  1769                           ; 1 bytes @ 0x17
  1770  000097                     	ds	1
  1771  000098                     __doprnt@len:
  1772                           	opt stack 0
  1773                           
  1774                           ; 2 bytes @ 0x18
  1775  000098                     	ds	2
  1776  00009A                     __doprnt@cp:
  1777                           	opt stack 0
  1778                           
  1779                           ; 2 bytes @ 0x1A
  1780  00009A                     	ds	2
  1781  00009C                     __doprnt@val:
  1782                           	opt stack 0
  1783                           
  1784                           ; 2 bytes @ 0x1C
  1785  00009C                     	ds	2
  1786  00009E                     __doprnt@flag:
  1787                           	opt stack 0
  1788                           
  1789                           ; 1 bytes @ 0x1E
  1790  00009E                     	ds	1
  1791  00009F                     __doprnt@width:
  1792                           	opt stack 0
  1793                           
  1794                           ; 2 bytes @ 0x1F
  1795  00009F                     	ds	2
  1796  0000A1                     __doprnt@c:
  1797                           	opt stack 0
  1798                           
  1799                           ; 1 bytes @ 0x21
  1800  0000A1                     	ds	1
  1801  0000A2                     ?_printf:
  1802                           	opt stack 0
  1803  0000A2                     ?_sprintf:
  1804                           	opt stack 0
  1805  0000A2                     printf@f:
  1806                           	opt stack 0
  1807  0000A2                     sprintf@wh:
  1808                           	opt stack 0
  1809                           
  1810                           ; 2 bytes @ 0x22
  1811  0000A2                     	ds	2
  1812  0000A4                     printf@ap:
  1813                           	opt stack 0
  1814  0000A4                     sprintf@f:
  1815                           	opt stack 0
  1816                           
  1817                           ; 2 bytes @ 0x24
  1818  0000A4                     	ds	2
  1819  0000A6                     printf@pb:
  1820                           	opt stack 0
  1821                           
  1822                           ; 4 bytes @ 0x26
  1823  0000A6                     	ds	4
  1824  0000AA                     ??_update_lcd:
  1825                           
  1826                           ; 1 bytes @ 0x2A
  1827  0000AA                     	ds	1
  1828  0000AB                     update_lcd@flag:
  1829                           	opt stack 0
  1830                           
  1831                           ; 2 bytes @ 0x2B
  1832  0000AB                     	ds	3
  1833  0000AE                     sprintf@ap:
  1834                           	opt stack 0
  1835                           
  1836                           ; 2 bytes @ 0x2E
  1837  0000AE                     	ds	2
  1838  0000B0                     sprintf@pb:
  1839                           	opt stack 0
  1840                           
  1841                           ; 4 bytes @ 0x30
  1842  0000B0                     	ds	4
  1843  0000B4                     ??_update_state:
  1844  0000B4                     ??_display_menu:
  1845                           
  1846                           ; 1 bytes @ 0x34
  1847  0000B4                     	ds	2
  1848  0000B6                     update_state@i:
  1849                           	opt stack 0
  1850                           
  1851                           ; 2 bytes @ 0x36
  1852  0000B6                     	ds	3
  1853  0000B9                     ??_main:
  1854                           
  1855                           ; 1 bytes @ 0x39
  1856  0000B9                     	ds	1
  1857                           tblptru	equ	0xFF8
  1858                           tblptrh	equ	0xFF7
  1859                           tblptrl	equ	0xFF6
  1860                           tablat	equ	0xFF5
  1861                           postinc0	equ	0xFEE
  1862                           wreg	equ	0xFE8
  1863                           postdec1	equ	0xFE5
  1864                           fsr1h	equ	0xFE2
  1865                           fsr1l	equ	0xFE1
  1866                           
  1867                           	psect	cstackCOMRAM
  1868  000001                     __pcstackCOMRAM:
  1869                           	opt stack 0
  1870  000001                     ??i2_isdigit:
  1871  000001                     ?i2___wmul:
  1872                           	opt stack 0
  1873  000001                     ?i2___awmod:
  1874                           	opt stack 0
  1875  000001                     ?i2___lwdiv:
  1876                           	opt stack 0
  1877  000001                     i2lcdNibble@temp:
  1878                           	opt stack 0
  1879  000001                     i2___wmul@multiplier:
  1880                           	opt stack 0
  1881  000001                     i2___awmod@dividend:
  1882                           	opt stack 0
  1883  000001                     i2___lwdiv@dividend:
  1884                           	opt stack 0
  1885                           
  1886                           ; 2 bytes @ 0x0
  1887  000001                     	ds	1
  1888  000002                     i2lcdNibble@data:
  1889                           	opt stack 0
  1890  000002                     i2_isdigit$698:
  1891                           	opt stack 0
  1892                           
  1893                           ; 1 bytes @ 0x1
  1894  000002                     	ds	1
  1895  000003                     i2lcdInst@data:
  1896                           	opt stack 0
  1897  000003                     i2putch@data:
  1898                           	opt stack 0
  1899  000003                     i2isdigit@c:
  1900                           	opt stack 0
  1901  000003                     i2___wmul@multiplicand:
  1902                           	opt stack 0
  1903  000003                     i2___awmod@divisor:
  1904                           	opt stack 0
  1905  000003                     i2___lwdiv@divisor:
  1906                           	opt stack 0
  1907                           
  1908                           ; 2 bytes @ 0x2
  1909  000003                     	ds	2
  1910  000005                     i2___awmod@counter:
  1911                           	opt stack 0
  1912  000005                     i2___wmul@product:
  1913                           	opt stack 0
  1914  000005                     i2___lwdiv@quotient:
  1915                           	opt stack 0
  1916                           
  1917                           ; 2 bytes @ 0x4
  1918  000005                     	ds	1
  1919  000006                     i2___awmod@sign:
  1920                           	opt stack 0
  1921                           
  1922                           ; 1 bytes @ 0x5
  1923  000006                     	ds	1
  1924  000007                     i2___lwdiv@counter:
  1925                           	opt stack 0
  1926                           
  1927                           ; 1 bytes @ 0x6
  1928  000007                     	ds	1
  1929  000008                     ?i2___lwmod:
  1930                           	opt stack 0
  1931  000008                     i2___lwmod@dividend:
  1932                           	opt stack 0
  1933                           
  1934                           ; 2 bytes @ 0x7
  1935  000008                     	ds	2
  1936  00000A                     i2___lwmod@divisor:
  1937                           	opt stack 0
  1938                           
  1939                           ; 2 bytes @ 0x9
  1940  00000A                     	ds	2
  1941  00000C                     i2___lwmod@counter:
  1942                           	opt stack 0
  1943                           
  1944                           ; 1 bytes @ 0xB
  1945  00000C                     	ds	1
  1946  00000D                     ?i2__doprnt:
  1947                           	opt stack 0
  1948  00000D                     i2__doprnt@pb:
  1949                           	opt stack 0
  1950                           
  1951                           ; 2 bytes @ 0xC
  1952  00000D                     	ds	2
  1953  00000F                     i2__doprnt@f:
  1954                           	opt stack 0
  1955                           
  1956                           ; 2 bytes @ 0xE
  1957  00000F                     	ds	2
  1958  000011                     i2__doprnt@ap:
  1959                           	opt stack 0
  1960                           
  1961                           ; 2 bytes @ 0x10
  1962  000011                     	ds	2
  1963  000013                     ??i2__doprnt:
  1964                           
  1965                           ; 1 bytes @ 0x12
  1966  000013                     	ds	4
  1967  000017                     i2__doprnt@idx:
  1968                           	opt stack 0
  1969                           
  1970                           ; 1 bytes @ 0x16
  1971  000017                     	ds	1
  1972  000018                     i2__doprnt@prec:
  1973                           	opt stack 0
  1974                           
  1975                           ; 1 bytes @ 0x17
  1976  000018                     	ds	1
  1977  000019                     i2__doprnt@len:
  1978                           	opt stack 0
  1979                           
  1980                           ; 2 bytes @ 0x18
  1981  000019                     	ds	2
  1982  00001B                     i2__doprnt@cp:
  1983                           	opt stack 0
  1984                           
  1985                           ; 2 bytes @ 0x1A
  1986  00001B                     	ds	2
  1987  00001D                     i2__doprnt@val:
  1988                           	opt stack 0
  1989                           
  1990                           ; 2 bytes @ 0x1C
  1991  00001D                     	ds	2
  1992  00001F                     i2__doprnt@flag:
  1993                           	opt stack 0
  1994                           
  1995                           ; 1 bytes @ 0x1E
  1996  00001F                     	ds	1
  1997  000020                     i2__doprnt@width:
  1998                           	opt stack 0
  1999                           
  2000                           ; 2 bytes @ 0x1F
  2001  000020                     	ds	2
  2002  000022                     i2__doprnt@c:
  2003                           	opt stack 0
  2004                           
  2005                           ; 1 bytes @ 0x21
  2006  000022                     	ds	1
  2007  000023                     ?i2_printf:
  2008                           	opt stack 0
  2009  000023                     i2printf@f:
  2010                           	opt stack 0
  2011                           
  2012                           ; 2 bytes @ 0x22
  2013  000023                     	ds	2
  2014  000025                     i2printf@ap:
  2015                           	opt stack 0
  2016                           
  2017                           ; 2 bytes @ 0x24
  2018  000025                     	ds	2
  2019  000027                     i2printf@pb:
  2020                           	opt stack 0
  2021                           
  2022                           ; 4 bytes @ 0x26
  2023  000027                     	ds	4
  2024  00002B                     ??_keypressed:
  2025                           
  2026                           ; 1 bytes @ 0x2A
  2027  00002B                     	ds	16
  2028  00003B                     keypressed@i:
  2029                           	opt stack 0
  2030                           
  2031                           ; 2 bytes @ 0x3A
  2032  00003B                     	ds	2
  2033  00003D                     keypressed@keypress:
  2034                           	opt stack 0
  2035                           
  2036                           ; 1 bytes @ 0x3C
  2037  00003D                     	ds	1
  2038                           tblptru	equ	0xFF8
  2039                           tblptrh	equ	0xFF7
  2040                           tblptrl	equ	0xFF6
  2041                           tablat	equ	0xFF5
  2042                           postinc0	equ	0xFEE
  2043                           wreg	equ	0xFE8
  2044                           postdec1	equ	0xFE5
  2045                           fsr1h	equ	0xFE2
  2046                           fsr1l	equ	0xFE1
  2047                           
  2048 ;;
  2049 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2050 ;;
  2051 ;; *************** function _main *****************
  2052 ;; Defined at:
  2053 ;;		line 96 in file "main.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;		None
  2056 ;; Auto vars:     Size  Location     Type
  2057 ;;		None
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  1    wreg      void 
  2060 ;; Registers used:
  2061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2070 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2071 ;;Total ram usage:        1 bytes
  2072 ;; Hardware stack levels required when called:   11
  2073 ;; This function calls:
  2074 ;;		_I2C_Master_Init
  2075 ;;		_initLCD
  2076 ;;		_read_sensors
  2077 ;;		_set_time
  2078 ;;		_update_RTC
  2079 ;;		_update_display
  2080 ;;		_update_lcd
  2081 ;;		_update_state
  2082 ;; This function is called by:
  2083 ;;		Startup code after reset
  2084 ;; This function uses a non-reentrant model
  2085 ;;
  2086                           
  2087                           	psect	text0
  2088  00294E                     __ptext0:
  2089                           	opt stack 0
  2090  00294E                     _main:
  2091                           	opt stack 20
  2092                           
  2093                           ;main.c: 103: TRISC = 0x00;
  2094                           
  2095                           ;incstack = 0
  2096  00294E  0E00               	movlw	0
  2097  002950  6E94               	movwf	3988,c	;volatile
  2098                           
  2099                           ;main.c: 104: TRISD = 0x00;
  2100  002952  0E00               	movlw	0
  2101  002954  6E95               	movwf	3989,c	;volatile
  2102                           
  2103                           ;main.c: 105: TRISB = 0xFF;
  2104  002956  6893               	setf	3987,c	;volatile
  2105                           
  2106                           ;main.c: 106: LATB = 0x00;
  2107  002958  0E00               	movlw	0
  2108  00295A  6E8A               	movwf	3978,c	;volatile
  2109                           
  2110                           ;main.c: 107: LATC = 0x00;
  2111  00295C  0E00               	movlw	0
  2112  00295E  6E8B               	movwf	3979,c	;volatile
  2113                           
  2114                           ;main.c: 108: ADCON0 = 0x00;
  2115  002960  0E00               	movlw	0
  2116  002962  6EC2               	movwf	4034,c	;volatile
  2117                           
  2118                           ;main.c: 109: ADCON1 = 0xFF;
  2119  002964  68C1               	setf	4033,c	;volatile
  2120                           
  2121                           ;main.c: 110: initLCD();
  2122  002966  EC6E  F016         	call	_initLCD	;wreg free
  2123                           
  2124                           ;main.c: 111: INT1IE = 1;
  2125  00296A  86F0               	bsf	intcon3,3,c	;volatile
  2126                           
  2127                           ;main.c: 112: nRBPU = 0;
  2128  00296C  9EF1               	bcf	intcon2,7,c	;volatile
  2129                           
  2130                           ;main.c: 113: I2C_Master_Init(10000);
  2131  00296E  0E10               	movlw	16
  2132  002970  0100               	movlb	0	; () banked
  2133  002972  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2134  002974  0E27               	movlw	39
  2135  002976  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2136  002978  0E00               	movlw	0
  2137  00297A  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2138  00297C  0E00               	movlw	0
  2139  00297E  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2140  002980  EC71  F015         	call	_I2C_Master_Init	;wreg free
  2141                           
  2142                           ;main.c: 115: (INTCONbits.GIE = 0);
  2143  002984  9EF2               	bcf	intcon,7,c	;volatile
  2144                           
  2145                           ;main.c: 116: set_time();
  2146  002986  EC40  F015         	call	_set_time	;wreg free
  2147  00298A                     l7459:
  2148                           
  2149                           ;main.c: 118: (INTCONbits.GIE = 0);
  2150  00298A  9EF2               	bcf	intcon,7,c	;volatile
  2151                           
  2152                           ;main.c: 119: update_RTC();
  2153  00298C  ECEF  F010         	call	_update_RTC	;wreg free
  2154                           
  2155                           ;main.c: 120: read_sensors();
  2156  002990  EC1A  F017         	call	_read_sensors	;wreg free
  2157                           
  2158                           ;main.c: 121: update_state();
  2159  002994  EC92  F00F         	call	_update_state	;wreg free
  2160                           
  2161                           ;main.c: 122: update_display();
  2162  002998  ECA7  F011         	call	_update_display	;wreg free
  2163                           
  2164                           ;main.c: 123: update_lcd();
  2165  00299C  EC5D  F012         	call	_update_lcd	;wreg free
  2166                           
  2167                           ;main.c: 124: (INTCONbits.GIE = 1);
  2168  0029A0  8EF2               	bsf	intcon,7,c	;volatile
  2169                           
  2170                           ;main.c: 125: _delay((unsigned long)((50)*(10000000/4000.0)));
  2171  0029A2  0EA3               	movlw	163
  2172  0029A4  0100               	movlb	0	; () banked
  2173  0029A6  6FB9               	movwf	??_main& (0+255),b
  2174  0029A8  0E55               	movlw	85
  2175  0029AA                     u11677:
  2176  0029AA  2EE8               	decfsz	wreg,f,c
  2177  0029AC  D7FE               	bra	u11677
  2178  0029AE  2FB9               	decfsz	??_main& (0+255),f,b
  2179  0029B0  D7FC               	bra	u11677
  2180                           
  2181                           ;main.c: 126: (INTCONbits.GIE = 0);
  2182  0029B2  9EF2               	bcf	intcon,7,c	;volatile
  2183  0029B4  D7EA               	goto	l7459
  2184  0029B6                     __end_of_main:
  2185                           	opt stack 0
  2186                           tblptru	equ	0xFF8
  2187                           tblptrh	equ	0xFF7
  2188                           tblptrl	equ	0xFF6
  2189                           tablat	equ	0xFF5
  2190                           intcon	equ	0xFF2
  2191                           intcon2	equ	0xFF1
  2192                           intcon3	equ	0xFF0
  2193                           postinc0	equ	0xFEE
  2194                           wreg	equ	0xFE8
  2195                           postdec1	equ	0xFE5
  2196                           fsr1h	equ	0xFE2
  2197                           fsr1l	equ	0xFE1
  2198                           
  2199 ;; *************** function _update_state *****************
  2200 ;; Defined at:
  2201 ;;		line 202 in file "main.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;		None
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;  i               2   54[BANK0 ] int 
  2206 ;; Return value:  Size  Location     Type
  2207 ;;                  1    wreg      void 
  2208 ;; Registers used:
  2209 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2217 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2218 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2219 ;;Total ram usage:        4 bytes
  2220 ;; Hardware stack levels used:    1
  2221 ;; Hardware stack levels required when called:    9
  2222 ;; This function calls:
  2223 ;;		___awdiv
  2224 ;;		___awmod
  2225 ;;		_sprintf
  2226 ;; This function is called by:
  2227 ;;		_main
  2228 ;; This function uses a non-reentrant model
  2229 ;;
  2230                           
  2231                           	psect	text1
  2232  001F24                     __ptext1:
  2233                           	opt stack 0
  2234  001F24                     _update_state:
  2235                           	opt stack 21
  2236                           
  2237                           ;main.c: 203: if ((nstate=='s'&&state!='s')||(nstate=='m'&&state!='m')){
  2238                           
  2239                           ;incstack = 0
  2240  001F24  0E73               	movlw	115
  2241  001F26  0100               	movlb	0	; () banked
  2242  001F28  19E7               	xorwf	_nstate& (0+255),w,b
  2243  001F2A  A4D8               	btfss	status,2,c
  2244  001F2C  D005               	goto	l7329
  2245                           
  2246                           ; BSR set to: 0
  2247  001F2E  0E73               	movlw	115
  2248  001F30  0100               	movlb	0	; () banked
  2249  001F32  19E8               	xorwf	_state& (0+255),w,b
  2250  001F34  A4D8               	btfss	status,2,c
  2251  001F36  D00A               	goto	l7333
  2252  001F38                     l7329:
  2253                           
  2254                           ; BSR set to: 0
  2255  001F38  0E6D               	movlw	109
  2256  001F3A  0100               	movlb	0	; () banked
  2257  001F3C  19E7               	xorwf	_nstate& (0+255),w,b
  2258  001F3E  A4D8               	btfss	status,2,c
  2259  001F40  D033               	goto	l7345
  2260                           
  2261                           ; BSR set to: 0
  2262  001F42  0E6D               	movlw	109
  2263  001F44  0100               	movlb	0	; () banked
  2264  001F46  19E8               	xorwf	_state& (0+255),w,b
  2265  001F48  B4D8               	btfsc	status,2,c
  2266  001F4A  D02E               	goto	l7345
  2267  001F4C                     l7333:
  2268                           
  2269                           ; BSR set to: 0
  2270                           ;main.c: 204: int i;
  2271                           ;main.c: 205: for (i=0;i<7;i++)
  2272  001F4C  0E00               	movlw	0
  2273  001F4E  0100               	movlb	0	; () banked
  2274  001F50  6FB7               	movwf	(update_state@i+1)& (0+255),b
  2275  001F52  0E00               	movlw	0
  2276  001F54  6FB6               	movwf	update_state@i& (0+255),b
  2277  001F56                     l7335:
  2278                           
  2279                           ; BSR set to: 0
  2280  001F56  0100               	movlb	0	; () banked
  2281  001F58  BFB7               	btfsc	(update_state@i+1)& (0+255),7,b
  2282  001F5A  D008               	goto	l7339
  2283  001F5C  0100               	movlb	0	; () banked
  2284  001F5E  51B7               	movf	(update_state@i+1)& (0+255),w,b
  2285  001F60  E123               	bnz	l7345
  2286  001F62  0E07               	movlw	7
  2287  001F64  0100               	movlb	0	; () banked
  2288  001F66  5DB6               	subwf	update_state@i& (0+255),w,b
  2289  001F68  B0D8               	btfsc	status,0,c
  2290  001F6A  D01E               	goto	l7345
  2291  001F6C                     l7339:
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;main.c: 206: startTime[i]=time_i[i];
  2295  001F6C  90D8               	bcf	status,0,c
  2296  001F6E  0100               	movlb	0	; () banked
  2297  001F70  35B6               	rlcf	update_state@i& (0+255),w,b
  2298  001F72  6ED9               	movwf	fsr2l,c
  2299  001F74  0100               	movlb	0	; () banked
  2300  001F76  35B7               	rlcf	(update_state@i+1)& (0+255),w,b
  2301  001F78  6EDA               	movwf	fsr2h,c
  2302  001F7A  0EBA               	movlw	low _time_i
  2303  001F7C  26D9               	addwf	fsr2l,f,c
  2304  001F7E  0E00               	movlw	high _time_i
  2305  001F80  22DA               	addwfc	fsr2h,f,c
  2306  001F82  90D8               	bcf	status,0,c
  2307  001F84  0100               	movlb	0	; () banked
  2308  001F86  35B6               	rlcf	update_state@i& (0+255),w,b
  2309  001F88  6EE1               	movwf	fsr1l,c
  2310  001F8A  0100               	movlb	0	; () banked
  2311  001F8C  35B7               	rlcf	(update_state@i+1)& (0+255),w,b
  2312  001F8E  6EE2               	movwf	fsr1h,c
  2313  001F90  0E4C               	movlw	low _startTime
  2314  001F92  26E1               	addwf	fsr1l,f,c
  2315  001F94  0E00               	movlw	high _startTime
  2316  001F96  22E2               	addwfc	fsr1h,f,c
  2317  001F98  CFDE FFE6          	movff	postinc2,postinc1
  2318  001F9C  CFDD FFE5          	movff	postdec2,postdec1
  2319                           
  2320                           ; BSR set to: 0
  2321  001FA0  0100               	movlb	0	; () banked
  2322  001FA2  4BB6               	infsnz	update_state@i& (0+255),f,b
  2323  001FA4  2BB7               	incf	(update_state@i+1)& (0+255),f,b
  2324  001FA6  D7D7               	goto	l7335
  2325  001FA8                     l7345:
  2326                           
  2327                           ; BSR set to: 0
  2328                           ;main.c: 207: }
  2329                           ;main.c: 208: sorted_bottles=eskaNoCap+eskaWCap+yopNoCap+yopWCap;
  2330  001FA8  0100               	movlb	0	; () banked
  2331  001FAA  51DB               	movf	_eskaWCap& (0+255),w,b
  2332  001FAC  0100               	movlb	0	; () banked
  2333  001FAE  25D9               	addwf	_eskaNoCap& (0+255),w,b
  2334  001FB0  0100               	movlb	0	; () banked
  2335  001FB2  6FB4               	movwf	??_update_state& (0+255),b
  2336  001FB4  0100               	movlb	0	; () banked
  2337  001FB6  51DC               	movf	(_eskaWCap+1)& (0+255),w,b
  2338  001FB8  0100               	movlb	0	; () banked
  2339  001FBA  21DA               	addwfc	(_eskaNoCap+1)& (0+255),w,b
  2340  001FBC  0100               	movlb	0	; () banked
  2341  001FBE  6FB5               	movwf	(??_update_state+1)& (0+255),b
  2342  001FC0  0100               	movlb	0	; () banked
  2343  001FC2  51E3               	movf	_yopNoCap& (0+255),w,b
  2344  001FC4  0100               	movlb	0	; () banked
  2345  001FC6  27B4               	addwf	??_update_state& (0+255),f,b
  2346  001FC8  0100               	movlb	0	; () banked
  2347  001FCA  51E4               	movf	(_yopNoCap+1)& (0+255),w,b
  2348  001FCC  0100               	movlb	0	; () banked
  2349  001FCE  23B5               	addwfc	(??_update_state+1)& (0+255),f,b
  2350  001FD0  0100               	movlb	0	; () banked
  2351  001FD2  51E5               	movf	_yopWCap& (0+255),w,b
  2352  001FD4  0100               	movlb	0	; () banked
  2353  001FD6  25B4               	addwf	??_update_state& (0+255),w,b
  2354  001FD8  0100               	movlb	0	; () banked
  2355  001FDA  6FDF               	movwf	_sorted_bottles& (0+255),b
  2356  001FDC  0100               	movlb	0	; () banked
  2357  001FDE  51E6               	movf	(_yopWCap+1)& (0+255),w,b
  2358  001FE0  0100               	movlb	0	; () banked
  2359  001FE2  21B5               	addwfc	(??_update_state+1)& (0+255),w,b
  2360  001FE4  0100               	movlb	0	; () banked
  2361  001FE6  6FE0               	movwf	(_sorted_bottles+1)& (0+255),b
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;main.c: 209: sorted_bottles%=100;
  2365  001FE8  C0DF  F080         	movff	_sorted_bottles,___awmod@dividend
  2366  001FEC  C0E0  F081         	movff	_sorted_bottles+1,___awmod@dividend+1
  2367  001FF0  0E00               	movlw	0
  2368  001FF2  0100               	movlb	0	; () banked
  2369  001FF4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2370  001FF6  0E64               	movlw	100
  2371  001FF8  6F82               	movwf	___awmod@divisor& (0+255),b
  2372  001FFA  EC99  F013         	call	___awmod	;wreg free
  2373  001FFE  C080  F0DF         	movff	?___awmod,_sorted_bottles
  2374  002002  C081  F0E0         	movff	?___awmod+1,_sorted_bottles+1
  2375                           
  2376                           ;main.c: 210: if (state=='s'&&timeDiff>=180){
  2377  002006  0E73               	movlw	115
  2378  002008  0100               	movlb	0	; () banked
  2379  00200A  19E8               	xorwf	_state& (0+255),w,b
  2380  00200C  A4D8               	btfss	status,2,c
  2381  00200E  D00E               	goto	l7355
  2382                           
  2383                           ; BSR set to: 0
  2384  002010  0100               	movlb	0	; () banked
  2385  002012  BFE2               	btfsc	(_timeDiff+1)& (0+255),7,b
  2386  002014  D00B               	goto	l7355
  2387  002016  0100               	movlb	0	; () banked
  2388  002018  51E2               	movf	(_timeDiff+1)& (0+255),w,b
  2389  00201A  E105               	bnz	u11190
  2390  00201C  0EB4               	movlw	180
  2391  00201E  0100               	movlb	0	; () banked
  2392  002020  5DE1               	subwf	_timeDiff& (0+255),w,b
  2393  002022  A0D8               	btfss	status,0,c
  2394  002024  D003               	goto	l7355
  2395  002026                     u11190:
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;main.c: 211: nstate='e';
  2399  002026  0E65               	movlw	101
  2400  002028  0100               	movlb	0	; () banked
  2401  00202A  6FE7               	movwf	_nstate& (0+255),b
  2402  00202C                     l7355:
  2403                           
  2404                           ; BSR set to: 0
  2405                           ;main.c: 212: }
  2406                           ;main.c: 213: if (nstate=='e'&&state!='e'){
  2407  00202C  0E65               	movlw	101
  2408  00202E  0100               	movlb	0	; () banked
  2409  002030  19E7               	xorwf	_nstate& (0+255),w,b
  2410  002032  A4D8               	btfss	status,2,c
  2411  002034  D073               	goto	l7363
  2412                           
  2413                           ; BSR set to: 0
  2414  002036  0E65               	movlw	101
  2415  002038  0100               	movlb	0	; () banked
  2416  00203A  19E8               	xorwf	_state& (0+255),w,b
  2417  00203C  B4D8               	btfsc	status,2,c
  2418  00203E  D06E               	goto	l7363
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;main.c: 214: runTime=timeDiff;
  2422  002040  C0E1  F0DD         	movff	_timeDiff,_runTime
  2423  002044  C0E2  F0DE         	movff	_timeDiff+1,_runTime+1
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;main.c: 215: sprintf(menu[3][0],"bottles: %02d    \0", sorted_bottles);
  2427  002048  0E8C               	movlw	low (_menu+540)
  2428  00204A  0100               	movlb	0	; () banked
  2429  00204C  6FA2               	movwf	sprintf@wh& (0+255),b
  2430  00204E  0E03               	movlw	high (_menu+540)
  2431  002050  0100               	movlb	0	; () banked
  2432  002052  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2433  002054  0E84               	movlw	low STR_7
  2434  002056  0100               	movlb	0	; () banked
  2435  002058  6FA4               	movwf	sprintf@f& (0+255),b
  2436  00205A  0EFF               	movlw	high STR_7
  2437  00205C  0100               	movlb	0	; () banked
  2438  00205E  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2439  002060  C0DF  F0A6         	movff	_sorted_bottles,?_sprintf+4
  2440  002064  C0E0  F0A7         	movff	_sorted_bottles+1,?_sprintf+5
  2441  002068  ECF7  F015         	call	_sprintf	;wreg free
  2442                           
  2443                           ;main.c: 216: sprintf(menu[3][1],"run time: %01d:%02d \0",(runTime/60),timeDiff%60);
  2444  00206C  0E9E               	movlw	low (_menu+558)
  2445  00206E  0100               	movlb	0	; () banked
  2446  002070  6FA2               	movwf	sprintf@wh& (0+255),b
  2447  002072  0E03               	movlw	high (_menu+558)
  2448  002074  0100               	movlb	0	; () banked
  2449  002076  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2450  002078  0E46               	movlw	low STR_8
  2451  00207A  0100               	movlb	0	; () banked
  2452  00207C  6FA4               	movwf	sprintf@f& (0+255),b
  2453  00207E  0EFF               	movlw	high STR_8
  2454  002080  0100               	movlb	0	; () banked
  2455  002082  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2456  002084  C0DD  F080         	movff	_runTime,___awdiv@dividend
  2457  002088  C0DE  F081         	movff	_runTime+1,___awdiv@dividend+1
  2458  00208C  0E00               	movlw	0
  2459  00208E  0100               	movlb	0	; () banked
  2460  002090  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2461  002092  0E3C               	movlw	60
  2462  002094  6F82               	movwf	___awdiv@divisor& (0+255),b
  2463  002096  ECDC  F012         	call	___awdiv	;wreg free
  2464  00209A  C080  F0A6         	movff	?___awdiv,?_sprintf+4
  2465  00209E  C081  F0A7         	movff	?___awdiv+1,?_sprintf+5
  2466  0020A2  C0E1  F080         	movff	_timeDiff,___awmod@dividend
  2467  0020A6  C0E2  F081         	movff	_timeDiff+1,___awmod@dividend+1
  2468  0020AA  0E00               	movlw	0
  2469  0020AC  0100               	movlb	0	; () banked
  2470  0020AE  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2471  0020B0  0E3C               	movlw	60
  2472  0020B2  6F82               	movwf	___awmod@divisor& (0+255),b
  2473  0020B4  EC99  F013         	call	___awmod	;wreg free
  2474  0020B8  C080  F0A8         	movff	?___awmod,?_sprintf+6
  2475  0020BC  C081  F0A9         	movff	?___awmod+1,?_sprintf+7
  2476  0020C0  ECF7  F015         	call	_sprintf	;wreg free
  2477                           
  2478                           ;main.c: 217: sprintf(menu[3][2],"en:%02d ec:%02d    ", eskaNoCap,eskaWCap);
  2479  0020C4  0EB0               	movlw	low (_menu+576)
  2480  0020C6  0100               	movlb	0	; () banked
  2481  0020C8  6FA2               	movwf	sprintf@wh& (0+255),b
  2482  0020CA  0E03               	movlw	high (_menu+576)
  2483  0020CC  0100               	movlb	0	; () banked
  2484  0020CE  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2485  0020D0  0E5C               	movlw	low STR_9
  2486  0020D2  0100               	movlb	0	; () banked
  2487  0020D4  6FA4               	movwf	sprintf@f& (0+255),b
  2488  0020D6  0EFF               	movlw	high STR_9
  2489  0020D8  0100               	movlb	0	; () banked
  2490  0020DA  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2491  0020DC  C0D9  F0A6         	movff	_eskaNoCap,?_sprintf+4
  2492  0020E0  C0DA  F0A7         	movff	_eskaNoCap+1,?_sprintf+5
  2493  0020E4  C0DB  F0A8         	movff	_eskaWCap,?_sprintf+6
  2494  0020E8  C0DC  F0A9         	movff	_eskaWCap+1,?_sprintf+7
  2495  0020EC  ECF7  F015         	call	_sprintf	;wreg free
  2496                           
  2497                           ;main.c: 218: sprintf(menu[3][3],"yn:%02d yc:%02d    ", yopNoCap, yopWCap);
  2498  0020F0  0EC2               	movlw	low (_menu+594)
  2499  0020F2  0100               	movlb	0	; () banked
  2500  0020F4  6FA2               	movwf	sprintf@wh& (0+255),b
  2501  0020F6  0E03               	movlw	high (_menu+594)
  2502  0020F8  0100               	movlb	0	; () banked
  2503  0020FA  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2504  0020FC  0E70               	movlw	low STR_10
  2505  0020FE  0100               	movlb	0	; () banked
  2506  002100  6FA4               	movwf	sprintf@f& (0+255),b
  2507  002102  0EFF               	movlw	high STR_10
  2508  002104  0100               	movlb	0	; () banked
  2509  002106  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2510  002108  C0E3  F0A6         	movff	_yopNoCap,?_sprintf+4
  2511  00210C  C0E4  F0A7         	movff	_yopNoCap+1,?_sprintf+5
  2512  002110  C0E5  F0A8         	movff	_yopWCap,?_sprintf+6
  2513  002114  C0E6  F0A9         	movff	_yopWCap+1,?_sprintf+7
  2514  002118  ECF7  F015         	call	_sprintf	;wreg free
  2515  00211C                     l7363:
  2516                           
  2517                           ;main.c: 219: }
  2518                           ;main.c: 220: if ((state=='m'||state=='l'||state=='c')&&timeDiff>=10){
  2519  00211C  0E6D               	movlw	109
  2520  00211E  0100               	movlb	0	; () banked
  2521  002120  19E8               	xorwf	_state& (0+255),w,b
  2522  002122  B4D8               	btfsc	status,2,c
  2523  002124  D00A               	goto	l7369
  2524                           
  2525                           ; BSR set to: 0
  2526  002126  0E6C               	movlw	108
  2527  002128  0100               	movlb	0	; () banked
  2528  00212A  19E8               	xorwf	_state& (0+255),w,b
  2529  00212C  B4D8               	btfsc	status,2,c
  2530  00212E  D005               	goto	l7369
  2531                           
  2532                           ; BSR set to: 0
  2533  002130  0E63               	movlw	99
  2534  002132  0100               	movlb	0	; () banked
  2535  002134  19E8               	xorwf	_state& (0+255),w,b
  2536  002136  A4D8               	btfss	status,2,c
  2537  002138  D00E               	goto	l7373
  2538  00213A                     l7369:
  2539                           
  2540                           ; BSR set to: 0
  2541  00213A  0100               	movlb	0	; () banked
  2542  00213C  BFE2               	btfsc	(_timeDiff+1)& (0+255),7,b
  2543  00213E  D00B               	goto	l7373
  2544  002140  0100               	movlb	0	; () banked
  2545  002142  51E2               	movf	(_timeDiff+1)& (0+255),w,b
  2546  002144  E105               	bnz	u11250
  2547  002146  0E0A               	movlw	10
  2548  002148  0100               	movlb	0	; () banked
  2549  00214A  5DE1               	subwf	_timeDiff& (0+255),w,b
  2550  00214C  A0D8               	btfss	status,0,c
  2551  00214E  D003               	goto	l7373
  2552  002150                     u11250:
  2553                           
  2554                           ; BSR set to: 0
  2555                           ;main.c: 221: nstate='r';
  2556  002150  0E72               	movlw	114
  2557  002152  0100               	movlb	0	; () banked
  2558  002154  6FE7               	movwf	_nstate& (0+255),b
  2559  002156                     l7373:
  2560                           
  2561                           ; BSR set to: 0
  2562                           ;main.c: 222: }
  2563                           ;main.c: 223: state=nstate;
  2564  002156  C0E7  F0E8         	movff	_nstate,_state
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;main.c: 231: if (state!='m'&&state!='l'&&state!='c')
  2568  00215A  0E6D               	movlw	109
  2569  00215C  0100               	movlb	0	; () banked
  2570  00215E  19E8               	xorwf	_state& (0+255),w,b
  2571  002160  B4D8               	btfsc	status,2,c
  2572  002162  D019               	goto	l7383
  2573                           
  2574                           ; BSR set to: 0
  2575  002164  0E6C               	movlw	108
  2576  002166  0100               	movlb	0	; () banked
  2577  002168  19E8               	xorwf	_state& (0+255),w,b
  2578  00216A  B4D8               	btfsc	status,2,c
  2579  00216C  D014               	goto	l7383
  2580                           
  2581                           ; BSR set to: 0
  2582  00216E  0E63               	movlw	99
  2583  002170  0100               	movlb	0	; () banked
  2584  002172  19E8               	xorwf	_state& (0+255),w,b
  2585  002174  B4D8               	btfsc	status,2,c
  2586  002176  D00F               	goto	l7383
  2587                           
  2588                           ; BSR set to: 0
  2589                           ;main.c: 232: {
  2590                           ;main.c: 233: menuIndex=1;
  2591  002178  0E00               	movlw	0
  2592  00217A  0100               	movlb	0	; () banked
  2593  00217C  6FF6               	movwf	(_menuIndex+1)& (0+255),b
  2594  00217E  0E01               	movlw	1
  2595  002180  6FF5               	movwf	_menuIndex& (0+255),b
  2596                           
  2597                           ;main.c: 234: logIndex=1;
  2598  002182  0E00               	movlw	0
  2599  002184  0100               	movlb	0	; () banked
  2600  002186  6FF4               	movwf	(_logIndex+1)& (0+255),b
  2601  002188  0E01               	movlw	1
  2602  00218A  6FF3               	movwf	_logIndex& (0+255),b
  2603                           
  2604                           ;main.c: 235: creditIndex=1;
  2605  00218C  0E00               	movlw	0
  2606  00218E  0100               	movlb	0	; () banked
  2607  002190  6FEA               	movwf	(_creditIndex+1)& (0+255),b
  2608  002192  0E01               	movlw	1
  2609  002194  6FE9               	movwf	_creditIndex& (0+255),b
  2610  002196                     l7383:
  2611                           
  2612                           ; BSR set to: 0
  2613                           ;main.c: 236: }
  2614                           ;main.c: 237: if (state!='e')
  2615  002196  0E65               	movlw	101
  2616  002198  0100               	movlb	0	; () banked
  2617  00219A  19E8               	xorwf	_state& (0+255),w,b
  2618  00219C  B4D8               	btfsc	status,2,c
  2619  00219E  D005               	goto	l7387
  2620                           
  2621                           ; BSR set to: 0
  2622                           ;main.c: 238: endIndex=1;
  2623  0021A0  0E00               	movlw	0
  2624  0021A2  0100               	movlb	0	; () banked
  2625  0021A4  6FEE               	movwf	(_endIndex+1)& (0+255),b
  2626  0021A6  0E01               	movlw	1
  2627  0021A8  6FED               	movwf	_endIndex& (0+255),b
  2628  0021AA                     l7387:
  2629                           
  2630                           ; BSR set to: 0
  2631                           ;main.c: 239: if (state=='r'){
  2632  0021AA  0E72               	movlw	114
  2633  0021AC  0100               	movlb	0	; () banked
  2634  0021AE  19E8               	xorwf	_state& (0+255),w,b
  2635  0021B0  A4D8               	btfss	status,2,c
  2636  0021B2  0012               	return	
  2637                           
  2638                           ; BSR set to: 0
  2639                           ;main.c: 240: eskaNoCap=0;
  2640  0021B4  0E00               	movlw	0
  2641  0021B6  0100               	movlb	0	; () banked
  2642  0021B8  6FDA               	movwf	(_eskaNoCap+1)& (0+255),b
  2643  0021BA  0E00               	movlw	0
  2644  0021BC  6FD9               	movwf	_eskaNoCap& (0+255),b
  2645                           
  2646                           ;main.c: 241: eskaWCap=0;
  2647  0021BE  0E00               	movlw	0
  2648  0021C0  0100               	movlb	0	; () banked
  2649  0021C2  6FDC               	movwf	(_eskaWCap+1)& (0+255),b
  2650  0021C4  0E00               	movlw	0
  2651  0021C6  6FDB               	movwf	_eskaWCap& (0+255),b
  2652                           
  2653                           ;main.c: 242: yopNoCap=0;
  2654  0021C8  0E00               	movlw	0
  2655  0021CA  0100               	movlb	0	; () banked
  2656  0021CC  6FE4               	movwf	(_yopNoCap+1)& (0+255),b
  2657  0021CE  0E00               	movlw	0
  2658  0021D0  6FE3               	movwf	_yopNoCap& (0+255),b
  2659                           
  2660                           ;main.c: 243: yopWCap=0;
  2661  0021D2  0E00               	movlw	0
  2662  0021D4  0100               	movlb	0	; () banked
  2663  0021D6  6FE6               	movwf	(_yopWCap+1)& (0+255),b
  2664  0021D8  0E00               	movlw	0
  2665  0021DA  6FE5               	movwf	_yopWCap& (0+255),b
  2666  0021DC  0012               	return	
  2667  0021DE                     __end_of_update_state:
  2668                           	opt stack 0
  2669                           tblptru	equ	0xFF8
  2670                           tblptrh	equ	0xFF7
  2671                           tblptrl	equ	0xFF6
  2672                           tablat	equ	0xFF5
  2673                           intcon	equ	0xFF2
  2674                           intcon2	equ	0xFF1
  2675                           intcon3	equ	0xFF0
  2676                           postinc0	equ	0xFEE
  2677                           wreg	equ	0xFE8
  2678                           postinc1	equ	0xFE6
  2679                           postdec1	equ	0xFE5
  2680                           fsr1h	equ	0xFE2
  2681                           fsr1l	equ	0xFE1
  2682                           postinc2	equ	0xFDE
  2683                           postdec2	equ	0xFDD
  2684                           fsr2h	equ	0xFDA
  2685                           fsr2l	equ	0xFD9
  2686                           status	equ	0xFD8
  2687                           
  2688 ;; *************** function _update_lcd *****************
  2689 ;; Defined at:
  2690 ;;		line 138 in file "main.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;		None
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;  flag            2   43[BANK0 ] int 
  2695 ;;  j               2    0        int 
  2696 ;;  i               2    0        int 
  2697 ;; Return value:  Size  Location     Type
  2698 ;;                  1    wreg      void 
  2699 ;; Registers used:
  2700 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2701 ;; Tracked objects:
  2702 ;;		On entry : 0/0
  2703 ;;		On exit  : 0/0
  2704 ;;		Unchanged: 0/0
  2705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2707 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2708 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2709 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2710 ;;Total ram usage:        3 bytes
  2711 ;; Hardware stack levels used:    1
  2712 ;; Hardware stack levels required when called:    9
  2713 ;; This function calls:
  2714 ;;		_lcdInst
  2715 ;;		_printf
  2716 ;;		_strcmp
  2717 ;;		_strcpy
  2718 ;; This function is called by:
  2719 ;;		_main
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           	psect	text2
  2724  0024BA                     __ptext2:
  2725                           	opt stack 0
  2726  0024BA                     _update_lcd:
  2727                           	opt stack 21
  2728                           
  2729                           ;main.c: 139: int flag=0;
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;incstack = 0
  2733  0024BA  0E00               	movlw	0
  2734  0024BC  0100               	movlb	0	; () banked
  2735  0024BE  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  2736  0024C0  0E00               	movlw	0
  2737  0024C2  6FAB               	movwf	update_lcd@flag& (0+255),b
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;main.c: 140: int i,j;
  2741                           ;main.c: 142: if (strcmp(display0, ndisplay0)!=0){
  2742  0024C4  0E1E               	movlw	low _display0
  2743  0024C6  0100               	movlb	0	; () banked
  2744  0024C8  6F80               	movwf	strcmp@s1& (0+255),b
  2745  0024CA  0E01               	movlw	high _display0
  2746  0024CC  0100               	movlb	0	; () banked
  2747  0024CE  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  2748  0024D0  0E42               	movlw	low _ndisplay0
  2749  0024D2  0100               	movlb	0	; () banked
  2750  0024D4  6F82               	movwf	strcmp@s2& (0+255),b
  2751  0024D6  0E01               	movlw	high _ndisplay0
  2752  0024D8  0100               	movlb	0	; () banked
  2753  0024DA  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  2754  0024DC  ECA1  F015         	call	_strcmp	;wreg free
  2755  0024E0  0100               	movlb	0	; () banked
  2756  0024E2  5180               	movf	?_strcmp& (0+255),w,b
  2757  0024E4  0100               	movlb	0	; () banked
  2758  0024E6  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  2759  0024E8  B4D8               	btfsc	status,2,c
  2760  0024EA  D013               	goto	l7413
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;main.c: 143: strcpy(display0,ndisplay0);
  2764  0024EC  0E1E               	movlw	low _display0
  2765  0024EE  0100               	movlb	0	; () banked
  2766  0024F0  6F80               	movwf	strcpy@to& (0+255),b
  2767  0024F2  0E01               	movlw	high _display0
  2768  0024F4  0100               	movlb	0	; () banked
  2769  0024F6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  2770  0024F8  0E42               	movlw	low _ndisplay0
  2771  0024FA  0100               	movlb	0	; () banked
  2772  0024FC  6F82               	movwf	strcpy@from& (0+255),b
  2773  0024FE  0E01               	movlw	high _ndisplay0
  2774  002500  0100               	movlb	0	; () banked
  2775  002502  6F83               	movwf	(strcpy@from+1)& (0+255),b
  2776  002504  ECEA  F016         	call	_strcpy	;wreg free
  2777                           
  2778                           ;main.c: 144: flag=1;
  2779  002508  0E00               	movlw	0
  2780  00250A  0100               	movlb	0	; () banked
  2781  00250C  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  2782  00250E  0E01               	movlw	1
  2783  002510  6FAB               	movwf	update_lcd@flag& (0+255),b
  2784  002512                     l7413:
  2785                           
  2786                           ; BSR set to: 0
  2787                           ;main.c: 145: }
  2788                           ;main.c: 146: if (strcmp(display1, ndisplay1)!=0){
  2789  002512  0E30               	movlw	low _display1
  2790  002514  0100               	movlb	0	; () banked
  2791  002516  6F80               	movwf	strcmp@s1& (0+255),b
  2792  002518  0E01               	movlw	high _display1
  2793  00251A  0100               	movlb	0	; () banked
  2794  00251C  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  2795  00251E  0E54               	movlw	low _ndisplay1
  2796  002520  0100               	movlb	0	; () banked
  2797  002522  6F82               	movwf	strcmp@s2& (0+255),b
  2798  002524  0E01               	movlw	high _ndisplay1
  2799  002526  0100               	movlb	0	; () banked
  2800  002528  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  2801  00252A  ECA1  F015         	call	_strcmp	;wreg free
  2802  00252E  0100               	movlb	0	; () banked
  2803  002530  5180               	movf	?_strcmp& (0+255),w,b
  2804  002532  0100               	movlb	0	; () banked
  2805  002534  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  2806  002536  B4D8               	btfsc	status,2,c
  2807  002538  D013               	goto	l7419
  2808                           
  2809                           ; BSR set to: 0
  2810                           ;main.c: 147: strcpy(display1,ndisplay1);
  2811  00253A  0E30               	movlw	low _display1
  2812  00253C  0100               	movlb	0	; () banked
  2813  00253E  6F80               	movwf	strcpy@to& (0+255),b
  2814  002540  0E01               	movlw	high _display1
  2815  002542  0100               	movlb	0	; () banked
  2816  002544  6F81               	movwf	(strcpy@to+1)& (0+255),b
  2817  002546  0E54               	movlw	low _ndisplay1
  2818  002548  0100               	movlb	0	; () banked
  2819  00254A  6F82               	movwf	strcpy@from& (0+255),b
  2820  00254C  0E01               	movlw	high _ndisplay1
  2821  00254E  0100               	movlb	0	; () banked
  2822  002550  6F83               	movwf	(strcpy@from+1)& (0+255),b
  2823  002552  ECEA  F016         	call	_strcpy	;wreg free
  2824                           
  2825                           ;main.c: 148: flag=1;
  2826  002556  0E00               	movlw	0
  2827  002558  0100               	movlb	0	; () banked
  2828  00255A  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  2829  00255C  0E01               	movlw	1
  2830  00255E  6FAB               	movwf	update_lcd@flag& (0+255),b
  2831  002560                     l7419:
  2832                           
  2833                           ; BSR set to: 0
  2834                           ;main.c: 149: }
  2835                           ;main.c: 150: if (flag){
  2836  002560  0100               	movlb	0	; () banked
  2837  002562  51AB               	movf	update_lcd@flag& (0+255),w,b
  2838  002564  0100               	movlb	0	; () banked
  2839  002566  11AC               	iorwf	(update_lcd@flag+1)& (0+255),w,b
  2840  002568  B4D8               	btfsc	status,2,c
  2841  00256A  0012               	return	
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;main.c: 151: lcdInst(0x01);_delay((unsigned long)((10)*(10000000/4000.0)));;
  2845  00256C  0E01               	movlw	1
  2846  00256E  EC9C  F017         	call	_lcdInst
  2847  002572  0E21               	movlw	33
  2848  002574  0100               	movlb	0	; () banked
  2849  002576  6FAA               	movwf	??_update_lcd& (0+255),b
  2850  002578  0E76               	movlw	118
  2851  00257A                     u11687:
  2852  00257A  2EE8               	decfsz	wreg,f,c
  2853  00257C  D7FE               	bra	u11687
  2854  00257E  2FAA               	decfsz	??_update_lcd& (0+255),f,b
  2855  002580  D7FC               	bra	u11687
  2856  002582  F000               	nop	
  2857                           
  2858                           ;main.c: 152: lcdInst(0b10000000);;
  2859  002584  0E80               	movlw	128
  2860  002586  EC9C  F017         	call	_lcdInst
  2861                           
  2862                           ;main.c: 153: printf(display0);
  2863  00258A  0E1E               	movlw	low _display0
  2864  00258C  0100               	movlb	0	; () banked
  2865  00258E  6FA2               	movwf	printf@f& (0+255),b
  2866  002590  0E01               	movlw	high _display0
  2867  002592  0100               	movlb	0	; () banked
  2868  002594  6FA3               	movwf	(printf@f+1)& (0+255),b
  2869  002596  EC49  F016         	call	_printf	;wreg free
  2870                           
  2871                           ;main.c: 154: lcdInst(0b11000000);;
  2872  00259A  0EC0               	movlw	192
  2873  00259C  EC9C  F017         	call	_lcdInst
  2874                           
  2875                           ;main.c: 155: printf(display1);
  2876  0025A0  0E30               	movlw	low _display1
  2877  0025A2  0100               	movlb	0	; () banked
  2878  0025A4  6FA2               	movwf	printf@f& (0+255),b
  2879  0025A6  0E01               	movlw	high _display1
  2880  0025A8  0100               	movlb	0	; () banked
  2881  0025AA  6FA3               	movwf	(printf@f+1)& (0+255),b
  2882  0025AC  EC49  F016         	call	_printf	;wreg free
  2883                           
  2884                           ;main.c: 156: lcdInst(0b10010000);;
  2885  0025B0  0E90               	movlw	144
  2886  0025B2  EC9C  F017         	call	_lcdInst
  2887  0025B6  0012               	return	
  2888  0025B8                     __end_of_update_lcd:
  2889                           	opt stack 0
  2890                           tblptru	equ	0xFF8
  2891                           tblptrh	equ	0xFF7
  2892                           tblptrl	equ	0xFF6
  2893                           tablat	equ	0xFF5
  2894                           intcon	equ	0xFF2
  2895                           intcon2	equ	0xFF1
  2896                           intcon3	equ	0xFF0
  2897                           postinc0	equ	0xFEE
  2898                           wreg	equ	0xFE8
  2899                           postinc1	equ	0xFE6
  2900                           postdec1	equ	0xFE5
  2901                           fsr1h	equ	0xFE2
  2902                           fsr1l	equ	0xFE1
  2903                           postinc2	equ	0xFDE
  2904                           postdec2	equ	0xFDD
  2905                           fsr2h	equ	0xFDA
  2906                           fsr2l	equ	0xFD9
  2907                           status	equ	0xFD8
  2908                           
  2909 ;; *************** function _strcpy *****************
  2910 ;; Defined at:
  2911 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  2912 ;; Parameters:    Size  Location     Type
  2913 ;;  to              2    0[BANK0 ] PTR unsigned char 
  2914 ;;		 -> display1(18), display0(18), 
  2915 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  2916 ;;		 -> ndisplay1(18), ndisplay0(18), 
  2917 ;; Auto vars:     Size  Location     Type
  2918 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  2919 ;;		 -> display1(18), display0(18), 
  2920 ;; Return value:  Size  Location     Type
  2921 ;;                  2    0[BANK0 ] PTR unsigned char 
  2922 ;; Registers used:
  2923 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2924 ;; Tracked objects:
  2925 ;;		On entry : 0/0
  2926 ;;		On exit  : 0/0
  2927 ;;		Unchanged: 0/0
  2928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2929 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2930 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2932 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2933 ;;Total ram usage:        6 bytes
  2934 ;; Hardware stack levels used:    1
  2935 ;; Hardware stack levels required when called:    5
  2936 ;; This function calls:
  2937 ;;		Nothing
  2938 ;; This function is called by:
  2939 ;;		_update_lcd
  2940 ;; This function uses a non-reentrant model
  2941 ;;
  2942                           
  2943                           	psect	text3
  2944  002DD4                     __ptext3:
  2945                           	opt stack 0
  2946  002DD4                     _strcpy:
  2947                           	opt stack 24
  2948                           
  2949                           ;incstack = 0
  2950  002DD4  C080  F084         	movff	strcpy@to,strcpy@cp
  2951  002DD8  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  2952  002DDC  D006               	goto	l4251
  2953  002DDE                     l4249:
  2954  002DDE  0100               	movlb	0	; () banked
  2955  002DE0  4B84               	infsnz	strcpy@cp& (0+255),f,b
  2956  002DE2  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  2957  002DE4  0100               	movlb	0	; () banked
  2958  002DE6  4B82               	infsnz	strcpy@from& (0+255),f,b
  2959  002DE8  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  2960  002DEA                     l4251:
  2961  002DEA  C082  FFD9         	movff	strcpy@from,fsr2l
  2962  002DEE  C083  FFDA         	movff	strcpy@from+1,fsr2h
  2963  002DF2  C084  FFE1         	movff	strcpy@cp,fsr1l
  2964  002DF6  C085  FFE2         	movff	strcpy@cp+1,fsr1h
  2965  002DFA  CFDF FFE7          	movff	indf2,indf1
  2966  002DFE  50E7               	movf	indf1,w,c
  2967  002E00  B4D8               	btfsc	status,2,c
  2968  002E02  0012               	return	
  2969  002E04  D7EC               	goto	l4249
  2970  002E06                     __end_of_strcpy:
  2971                           	opt stack 0
  2972                           tblptru	equ	0xFF8
  2973                           tblptrh	equ	0xFF7
  2974                           tblptrl	equ	0xFF6
  2975                           tablat	equ	0xFF5
  2976                           intcon	equ	0xFF2
  2977                           intcon2	equ	0xFF1
  2978                           intcon3	equ	0xFF0
  2979                           postinc0	equ	0xFEE
  2980                           wreg	equ	0xFE8
  2981                           indf1	equ	0xFE7
  2982                           postinc1	equ	0xFE6
  2983                           postdec1	equ	0xFE5
  2984                           fsr1h	equ	0xFE2
  2985                           fsr1l	equ	0xFE1
  2986                           indf2	equ	0xFDF
  2987                           postinc2	equ	0xFDE
  2988                           postdec2	equ	0xFDD
  2989                           fsr2h	equ	0xFDA
  2990                           fsr2l	equ	0xFD9
  2991                           status	equ	0xFD8
  2992                           
  2993 ;; *************** function _strcmp *****************
  2994 ;; Defined at:
  2995 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  2998 ;;		 -> display1(18), display0(18), 
  2999 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  3000 ;;		 -> ndisplay1(18), ndisplay0(18), 
  3001 ;; Auto vars:     Size  Location     Type
  3002 ;;  r               1    5[BANK0 ] char 
  3003 ;; Return value:  Size  Location     Type
  3004 ;;                  2    0[BANK0 ] int 
  3005 ;; Registers used:
  3006 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3007 ;; Tracked objects:
  3008 ;;		On entry : 0/0
  3009 ;;		On exit  : 0/0
  3010 ;;		Unchanged: 0/0
  3011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3012 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3013 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3014 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3015 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3016 ;;Total ram usage:        6 bytes
  3017 ;; Hardware stack levels used:    1
  3018 ;; Hardware stack levels required when called:    5
  3019 ;; This function calls:
  3020 ;;		Nothing
  3021 ;; This function is called by:
  3022 ;;		_update_lcd
  3023 ;; This function uses a non-reentrant model
  3024 ;;
  3025                           
  3026                           	psect	text4
  3027  002B42                     __ptext4:
  3028                           	opt stack 0
  3029  002B42                     _strcmp:
  3030                           	opt stack 24
  3031                           
  3032                           ;incstack = 0
  3033  002B42  D006               	goto	l4239
  3034  002B44                     l4237:
  3035  002B44  0100               	movlb	0	; () banked
  3036  002B46  4B80               	infsnz	strcmp@s1& (0+255),f,b
  3037  002B48  2B81               	incf	(strcmp@s1+1)& (0+255),f,b
  3038  002B4A  0100               	movlb	0	; () banked
  3039  002B4C  4B82               	infsnz	strcmp@s2& (0+255),f,b
  3040  002B4E  2B83               	incf	(strcmp@s2+1)& (0+255),f,b
  3041  002B50                     l4239:
  3042  002B50  C080  FFD9         	movff	strcmp@s1,fsr2l
  3043  002B54  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3044  002B58  50DF               	movf	indf2,w,c
  3045  002B5A  0100               	movlb	0	; () banked
  3046  002B5C  6F84               	movwf	??_strcmp& (0+255),b
  3047  002B5E  C082  FFD9         	movff	strcmp@s2,fsr2l
  3048  002B62  C083  FFDA         	movff	strcmp@s2+1,fsr2h
  3049  002B66  50DF               	movf	indf2,w,c
  3050  002B68  0800               	sublw	0
  3051  002B6A  0100               	movlb	0	; () banked
  3052  002B6C  2584               	addwf	??_strcmp& (0+255),w,b
  3053  002B6E  0100               	movlb	0	; () banked
  3054  002B70  6F85               	movwf	strcmp@r& (0+255),b
  3055  002B72  0100               	movlb	0	; () banked
  3056  002B74  5185               	movf	strcmp@r& (0+255),w,b
  3057  002B76  A4D8               	btfss	status,2,c
  3058  002B78  D007               	goto	l4243
  3059                           
  3060                           ; BSR set to: 0
  3061  002B7A  C080  FFD9         	movff	strcmp@s1,fsr2l
  3062  002B7E  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3063  002B82  50DF               	movf	indf2,w,c
  3064  002B84  A4D8               	btfss	status,2,c
  3065  002B86  D7DE               	goto	l4237
  3066  002B88                     l4243:
  3067                           
  3068                           ; BSR set to: 0
  3069  002B88  0100               	movlb	0	; () banked
  3070  002B8A  5185               	movf	strcmp@r& (0+255),w,b
  3071  002B8C  0100               	movlb	0	; () banked
  3072  002B8E  6F80               	movwf	?_strcmp& (0+255),b
  3073  002B90  6B81               	clrf	(?_strcmp+1)& (0+255),b
  3074  002B92  BF80               	btfsc	?_strcmp& (0+255),7,b
  3075  002B94  0781               	decf	(?_strcmp+1)& (0+255),f,b
  3076  002B96  0012               	return	
  3077  002B98                     __end_of_strcmp:
  3078                           	opt stack 0
  3079                           tblptru	equ	0xFF8
  3080                           tblptrh	equ	0xFF7
  3081                           tblptrl	equ	0xFF6
  3082                           tablat	equ	0xFF5
  3083                           intcon	equ	0xFF2
  3084                           intcon2	equ	0xFF1
  3085                           intcon3	equ	0xFF0
  3086                           postinc0	equ	0xFEE
  3087                           wreg	equ	0xFE8
  3088                           indf1	equ	0xFE7
  3089                           postinc1	equ	0xFE6
  3090                           postdec1	equ	0xFE5
  3091                           fsr1h	equ	0xFE2
  3092                           fsr1l	equ	0xFE1
  3093                           indf2	equ	0xFDF
  3094                           postinc2	equ	0xFDE
  3095                           postdec2	equ	0xFDD
  3096                           fsr2h	equ	0xFDA
  3097                           fsr2l	equ	0xFD9
  3098                           status	equ	0xFD8
  3099                           
  3100 ;; *************** function _printf *****************
  3101 ;; Defined at:
  3102 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;  f               2   34[BANK0 ] PTR const unsigned char 
  3105 ;;		 -> STR_17(14), STR_16(15), STR_15(8), display1(18), 
  3106 ;;		 -> display0(18), 
  3107 ;; Auto vars:     Size  Location     Type
  3108 ;;  pb              4   38[BANK0 ] struct __prbuf
  3109 ;;  ap              2   36[BANK0 ] PTR void [1]
  3110 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
  3111 ;; Return value:  Size  Location     Type
  3112 ;;                  2   34[BANK0 ] int 
  3113 ;; Registers used:
  3114 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3115 ;; Tracked objects:
  3116 ;;		On entry : 0/0
  3117 ;;		On exit  : 0/0
  3118 ;;		Unchanged: 0/0
  3119 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3120 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3121 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3123 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3124 ;;Total ram usage:        8 bytes
  3125 ;; Hardware stack levels used:    1
  3126 ;; Hardware stack levels required when called:    8
  3127 ;; This function calls:
  3128 ;;		__doprnt
  3129 ;; This function is called by:
  3130 ;;		_update_lcd
  3131 ;; This function uses a non-reentrant model
  3132 ;;
  3133                           
  3134                           	psect	text5
  3135  002C92                     __ptext5:
  3136                           	opt stack 0
  3137  002C92                     _printf:
  3138                           	opt stack 21
  3139                           
  3140                           ; BSR set to: 0
  3141                           ;incstack = 0
  3142  002C92  0E00               	movlw	0
  3143  002C94  0100               	movlb	0	; () banked
  3144  002C96  6FA6               	movwf	printf@pb& (0+255),b
  3145  002C98  0E00               	movlw	0
  3146  002C9A  0100               	movlb	0	; () banked
  3147  002C9C  6FA7               	movwf	(printf@pb+1)& (0+255),b
  3148  002C9E  0EFC               	movlw	low _putch
  3149  002CA0  0100               	movlb	0	; () banked
  3150  002CA2  6FA8               	movwf	(printf@pb+2)& (0+255),b
  3151  002CA4  0E2E               	movlw	high _putch
  3152  002CA6  0100               	movlb	0	; () banked
  3153  002CA8  6FA9               	movwf	(printf@pb+3)& (0+255),b
  3154  002CAA  0EA4               	movlw	low (?_printf+2)
  3155  002CAC  0100               	movlb	0	; () banked
  3156  002CAE  6FA4               	movwf	printf@ap& (0+255),b
  3157  002CB0  0E00               	movlw	high (?_printf+2)
  3158  002CB2  0100               	movlb	0	; () banked
  3159  002CB4  6FA5               	movwf	(printf@ap+1)& (0+255),b
  3160                           
  3161                           ; BSR set to: 0
  3162                           ;	Return value of _printf is never used
  3163  002CB6  0EA6               	movlw	low printf@pb
  3164  002CB8  0100               	movlb	0	; () banked
  3165  002CBA  6F8C               	movwf	__doprnt@pb& (0+255),b
  3166  002CBC  0E00               	movlw	high printf@pb
  3167  002CBE  0100               	movlb	0	; () banked
  3168  002CC0  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  3169  002CC2  C0A2  F08E         	movff	printf@f,__doprnt@f
  3170  002CC6  C0A3  F08F         	movff	printf@f+1,__doprnt@f+1
  3171  002CCA  0EA4               	movlw	low printf@ap
  3172  002CCC  0100               	movlb	0	; () banked
  3173  002CCE  6F90               	movwf	__doprnt@ap& (0+255),b
  3174  002CD0  0E00               	movlw	high printf@ap
  3175  002CD2  0100               	movlb	0	; () banked
  3176  002CD4  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  3177  002CD6  EC09  F000         	call	__doprnt	;wreg free
  3178  002CDA  0012               	return	
  3179  002CDC                     __end_of_printf:
  3180                           	opt stack 0
  3181                           tblptru	equ	0xFF8
  3182                           tblptrh	equ	0xFF7
  3183                           tblptrl	equ	0xFF6
  3184                           tablat	equ	0xFF5
  3185                           intcon	equ	0xFF2
  3186                           intcon2	equ	0xFF1
  3187                           intcon3	equ	0xFF0
  3188                           postinc0	equ	0xFEE
  3189                           wreg	equ	0xFE8
  3190                           indf1	equ	0xFE7
  3191                           postinc1	equ	0xFE6
  3192                           postdec1	equ	0xFE5
  3193                           fsr1h	equ	0xFE2
  3194                           fsr1l	equ	0xFE1
  3195                           indf2	equ	0xFDF
  3196                           postinc2	equ	0xFDE
  3197                           postdec2	equ	0xFDD
  3198                           fsr2h	equ	0xFDA
  3199                           fsr2l	equ	0xFD9
  3200                           status	equ	0xFD8
  3201                           
  3202 ;; *************** function _update_display *****************
  3203 ;; Defined at:
  3204 ;;		line 178 in file "main.c"
  3205 ;; Parameters:    Size  Location     Type
  3206 ;;		None
  3207 ;; Auto vars:     Size  Location     Type
  3208 ;;		None
  3209 ;; Return value:  Size  Location     Type
  3210 ;;                  1    wreg      void 
  3211 ;; Registers used:
  3212 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3213 ;; Tracked objects:
  3214 ;;		On entry : 0/0
  3215 ;;		On exit  : 0/0
  3216 ;;		Unchanged: 0/0
  3217 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3218 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3219 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;Total ram usage:        0 bytes
  3223 ;; Hardware stack levels used:    1
  3224 ;; Hardware stack levels required when called:   10
  3225 ;; This function calls:
  3226 ;;		___awdiv
  3227 ;;		___awmod
  3228 ;;		_display_menu
  3229 ;;		_sprintf
  3230 ;; This function is called by:
  3231 ;;		_main
  3232 ;; This function uses a non-reentrant model
  3233 ;;
  3234                           
  3235                           	psect	text6
  3236  00234E                     __ptext6:
  3237                           	opt stack 0
  3238  00234E                     _update_display:
  3239                           	opt stack 20
  3240                           
  3241                           ;main.c: 179: switch(state)
  3242                           
  3243                           ;incstack = 0
  3244  00234E  D0A0               	goto	l7403
  3245  002350                     l7393:
  3246                           
  3247                           ;main.c: 182: sprintf(ndisplay0,"%02x/%02x/%02x PUSH TO", time[6],time[5],time[4]);
  3248  002350  0E42               	movlw	low _ndisplay0
  3249  002352  0100               	movlb	0	; () banked
  3250  002354  6FA2               	movwf	sprintf@wh& (0+255),b
  3251  002356  0E01               	movlw	high _ndisplay0
  3252  002358  0100               	movlb	0	; () banked
  3253  00235A  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3254  00235C  0E18               	movlw	low STR_1
  3255  00235E  0100               	movlb	0	; () banked
  3256  002360  6FA4               	movwf	sprintf@f& (0+255),b
  3257  002362  0EFF               	movlw	high STR_1
  3258  002364  0100               	movlb	0	; () banked
  3259  002366  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3260  002368  C0D8  F0A6         	movff	_time+6,?_sprintf+4
  3261  00236C  0100               	movlb	0	; () banked
  3262  00236E  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3263  002370  C0D7  F0A8         	movff	_time+5,?_sprintf+6
  3264  002374  0100               	movlb	0	; () banked
  3265  002376  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3266  002378  C0D6  F0AA         	movff	_time+4,?_sprintf+8
  3267  00237C  0100               	movlb	0	; () banked
  3268  00237E  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3269  002380  ECF7  F015         	call	_sprintf	;wreg free
  3270                           
  3271                           ;main.c: 183: sprintf(ndisplay1,"%02x:%02x:%02x   START", time[2],time[1],time[0]);
  3272  002384  0E54               	movlw	low _ndisplay1
  3273  002386  0100               	movlb	0	; () banked
  3274  002388  6FA2               	movwf	sprintf@wh& (0+255),b
  3275  00238A  0E01               	movlw	high _ndisplay1
  3276  00238C  0100               	movlb	0	; () banked
  3277  00238E  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3278  002390  0E2F               	movlw	low STR_2
  3279  002392  0100               	movlb	0	; () banked
  3280  002394  6FA4               	movwf	sprintf@f& (0+255),b
  3281  002396  0EFF               	movlw	high STR_2
  3282  002398  0100               	movlb	0	; () banked
  3283  00239A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3284  00239C  C0D4  F0A6         	movff	_time+2,?_sprintf+4
  3285  0023A0  0100               	movlb	0	; () banked
  3286  0023A2  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3287  0023A4  C0D3  F0A8         	movff	_time+1,?_sprintf+6
  3288  0023A8  0100               	movlb	0	; () banked
  3289  0023AA  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3290  0023AC  C0D2  F0AA         	movff	_time,?_sprintf+8
  3291  0023B0  0100               	movlb	0	; () banked
  3292  0023B2  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3293  0023B4  ECF7  F015         	call	_sprintf	;wreg free
  3294                           
  3295                           ;main.c: 184: break;
  3296  0023B8  0012               	return	
  3297  0023BA                     l7395:
  3298                           
  3299                           ;main.c: 186: case 'l':
  3300                           ;main.c: 187: case 'c':
  3301                           ;main.c: 188: case 'e':
  3302                           ;main.c: 189: display_menu();
  3303  0023BA  ECDD  F00B         	call	_display_menu	;wreg free
  3304                           
  3305                           ;main.c: 190: break;
  3306  0023BE  0012               	return	
  3307  0023C0                     l7397:
  3308                           
  3309                           ;main.c: 192: sprintf(ndisplay0,"%d:%02d en:%02d ec:%02d ",(timeDiff/60),timeDiff%60, es
      +                          kaNoCap,eskaWCap);
  3310  0023C0  0E42               	movlw	low _ndisplay0
  3311  0023C2  0100               	movlb	0	; () banked
  3312  0023C4  6FA2               	movwf	sprintf@wh& (0+255),b
  3313  0023C6  0E01               	movlw	high _ndisplay0
  3314  0023C8  0100               	movlb	0	; () banked
  3315  0023CA  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3316  0023CC  0EFF               	movlw	low STR_3
  3317  0023CE  0100               	movlb	0	; () banked
  3318  0023D0  6FA4               	movwf	sprintf@f& (0+255),b
  3319  0023D2  0EFE               	movlw	high STR_3
  3320  0023D4  0100               	movlb	0	; () banked
  3321  0023D6  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3322  0023D8  C0E1  F080         	movff	_timeDiff,___awdiv@dividend
  3323  0023DC  C0E2  F081         	movff	_timeDiff+1,___awdiv@dividend+1
  3324  0023E0  0E00               	movlw	0
  3325  0023E2  0100               	movlb	0	; () banked
  3326  0023E4  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  3327  0023E6  0E3C               	movlw	60
  3328  0023E8  6F82               	movwf	___awdiv@divisor& (0+255),b
  3329  0023EA  ECDC  F012         	call	___awdiv	;wreg free
  3330  0023EE  C080  F0A6         	movff	?___awdiv,?_sprintf+4
  3331  0023F2  C081  F0A7         	movff	?___awdiv+1,?_sprintf+5
  3332  0023F6  C0E1  F080         	movff	_timeDiff,___awmod@dividend
  3333  0023FA  C0E2  F081         	movff	_timeDiff+1,___awmod@dividend+1
  3334  0023FE  0E00               	movlw	0
  3335  002400  0100               	movlb	0	; () banked
  3336  002402  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3337  002404  0E3C               	movlw	60
  3338  002406  6F82               	movwf	___awmod@divisor& (0+255),b
  3339  002408  EC99  F013         	call	___awmod	;wreg free
  3340  00240C  C080  F0A8         	movff	?___awmod,?_sprintf+6
  3341  002410  C081  F0A9         	movff	?___awmod+1,?_sprintf+7
  3342  002414  C0D9  F0AA         	movff	_eskaNoCap,?_sprintf+8
  3343  002418  C0DA  F0AB         	movff	_eskaNoCap+1,?_sprintf+9
  3344  00241C  C0DB  F0AC         	movff	_eskaWCap,?_sprintf+10
  3345  002420  C0DC  F0AD         	movff	_eskaWCap+1,?_sprintf+11
  3346  002424  ECF7  F015         	call	_sprintf	;wreg free
  3347                           
  3348                           ;main.c: 193: sprintf(ndisplay1,"yn:%02d yc:%02d", yopNoCap, yopWCap);
  3349  002428  0E54               	movlw	low _ndisplay1
  3350  00242A  0100               	movlb	0	; () banked
  3351  00242C  6FA2               	movwf	sprintf@wh& (0+255),b
  3352  00242E  0E01               	movlw	high _ndisplay1
  3353  002430  0100               	movlb	0	; () banked
  3354  002432  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3355  002434  0EA8               	movlw	low STR_4
  3356  002436  0100               	movlb	0	; () banked
  3357  002438  6FA4               	movwf	sprintf@f& (0+255),b
  3358  00243A  0EFF               	movlw	high STR_4
  3359  00243C  0100               	movlb	0	; () banked
  3360  00243E  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3361  002440  C0E3  F0A6         	movff	_yopNoCap,?_sprintf+4
  3362  002444  C0E4  F0A7         	movff	_yopNoCap+1,?_sprintf+5
  3363  002448  C0E5  F0A8         	movff	_yopWCap,?_sprintf+6
  3364  00244C  C0E6  F0A9         	movff	_yopWCap+1,?_sprintf+7
  3365  002450  ECF7  F015         	call	_sprintf	;wreg free
  3366                           
  3367                           ;main.c: 194: break;
  3368  002454  0012               	return	
  3369  002456                     l7399:
  3370                           
  3371                           ;main.c: 196: sprintf(ndisplay0, "ERROR");
  3372  002456  0E42               	movlw	low _ndisplay0
  3373  002458  0100               	movlb	0	; () banked
  3374  00245A  6FA2               	movwf	sprintf@wh& (0+255),b
  3375  00245C  0E01               	movlw	high _ndisplay0
  3376  00245E  0100               	movlb	0	; () banked
  3377  002460  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3378  002462  0EF3               	movlw	low STR_5
  3379  002464  0100               	movlb	0	; () banked
  3380  002466  6FA4               	movwf	sprintf@f& (0+255),b
  3381  002468  0EFF               	movlw	high STR_5
  3382  00246A  0100               	movlb	0	; () banked
  3383  00246C  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3384  00246E  ECF7  F015         	call	_sprintf	;wreg free
  3385                           
  3386                           ;main.c: 197: sprintf(ndisplay1, "EMERGENCY STOP");
  3387  002472  0E54               	movlw	low _ndisplay1
  3388  002474  0100               	movlb	0	; () banked
  3389  002476  6FA2               	movwf	sprintf@wh& (0+255),b
  3390  002478  0E01               	movlw	high _ndisplay1
  3391  00247A  0100               	movlb	0	; () banked
  3392  00247C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3393  00247E  0EB8               	movlw	low STR_6
  3394  002480  0100               	movlb	0	; () banked
  3395  002482  6FA4               	movwf	sprintf@f& (0+255),b
  3396  002484  0EFF               	movlw	high STR_6
  3397  002486  0100               	movlb	0	; () banked
  3398  002488  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3399  00248A  ECF7  F015         	call	_sprintf	;wreg free
  3400                           
  3401                           ;main.c: 200: }
  3402                           
  3403                           ;main.c: 198: break;
  3404  00248E  0012               	return	
  3405  002490                     l7403:
  3406  002490  0100               	movlb	0	; () banked
  3407  002492  51E8               	movf	_state& (0+255),w,b
  3408                           
  3409                           ; Switch size 1, requested type "space"
  3410                           ; Number of cases is 6, Range of values is 99 to 115
  3411                           ; switch strategies available:
  3412                           ; Name         Instructions Cycles
  3413                           ; simple_byte           19    10 (average)
  3414                           ;	Chosen strategy is simple_byte
  3415  002494  0A63               	xorlw	99	; case 99
  3416  002496  B4D8               	btfsc	status,2,c
  3417  002498  D790               	goto	l7395
  3418  00249A  0A06               	xorlw	6	; case 101
  3419  00249C  B4D8               	btfsc	status,2,c
  3420  00249E  D78D               	goto	l7395
  3421  0024A0  0A09               	xorlw	9	; case 108
  3422  0024A2  B4D8               	btfsc	status,2,c
  3423  0024A4  D78A               	goto	l7395
  3424  0024A6  0A01               	xorlw	1	; case 109
  3425  0024A8  B4D8               	btfsc	status,2,c
  3426  0024AA  D787               	goto	l7395
  3427  0024AC  0A1F               	xorlw	31	; case 114
  3428  0024AE  B4D8               	btfsc	status,2,c
  3429  0024B0  D74F               	goto	l7393
  3430  0024B2  0A01               	xorlw	1	; case 115
  3431  0024B4  B4D8               	btfsc	status,2,c
  3432  0024B6  D784               	goto	l7397
  3433  0024B8  D7CE               	goto	l7399
  3434  0024BA                     __end_of_update_display:
  3435                           	opt stack 0
  3436                           tblptru	equ	0xFF8
  3437                           tblptrh	equ	0xFF7
  3438                           tblptrl	equ	0xFF6
  3439                           tablat	equ	0xFF5
  3440                           intcon	equ	0xFF2
  3441                           intcon2	equ	0xFF1
  3442                           intcon3	equ	0xFF0
  3443                           postinc0	equ	0xFEE
  3444                           wreg	equ	0xFE8
  3445                           indf1	equ	0xFE7
  3446                           postinc1	equ	0xFE6
  3447                           postdec1	equ	0xFE5
  3448                           fsr1h	equ	0xFE2
  3449                           fsr1l	equ	0xFE1
  3450                           indf2	equ	0xFDF
  3451                           postinc2	equ	0xFDE
  3452                           postdec2	equ	0xFDD
  3453                           fsr2h	equ	0xFDA
  3454                           fsr2l	equ	0xFD9
  3455                           status	equ	0xFD8
  3456                           
  3457 ;; *************** function _display_menu *****************
  3458 ;; Defined at:
  3459 ;;		line 246 in file "main.c"
  3460 ;; Parameters:    Size  Location     Type
  3461 ;;		None
  3462 ;; Auto vars:     Size  Location     Type
  3463 ;;  menuIndexPtr    2    8[BANK1 ] PTR int 
  3464 ;;		 -> endIndex(2), creditIndex(2), logIndex(2), menuIndex(2), 
  3465 ;;  menuSelectio    2    4[BANK1 ] int 
  3466 ;;  menuSizePtr     2    2[BANK1 ] PTR int 
  3467 ;;		 -> endSize(2), menuSize(2), creditSize(2), events(2), 
  3468 ;;  selector        2    0[BANK1 ] int 
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  1    wreg      void 
  3471 ;; Registers used:
  3472 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3479 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Totals:         0       5      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;Total ram usage:       15 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    9
  3485 ;; This function calls:
  3486 ;;		___wmul
  3487 ;;		_sprintf
  3488 ;; This function is called by:
  3489 ;;		_update_display
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           	psect	text7
  3494  0017BA                     __ptext7:
  3495                           	opt stack 0
  3496  0017BA                     _display_menu:
  3497                           	opt stack 20
  3498                           
  3499                           ;main.c: 247: int menuSelection;
  3500                           ;main.c: 248: int* menuIndexPtr;
  3501                           ;main.c: 249: int* menuSizePtr;
  3502                           ;main.c: 250: int selector=0;
  3503                           
  3504                           ;incstack = 0
  3505  0017BA  0E00               	movlw	0
  3506  0017BC  0101               	movlb	1	; () banked
  3507  0017BE  6F67               	movwf	(display_menu@selector+1)& (0+255),b
  3508  0017C0  0E00               	movlw	0
  3509  0017C2  6F66               	movwf	display_menu@selector& (0+255),b
  3510                           
  3511                           ;main.c: 251: switch(state)
  3512  0017C4  D049               	goto	l7087
  3513  0017C6                     l7063:
  3514                           
  3515                           ;main.c: 254: menuSelection=1;
  3516  0017C6  0E00               	movlw	0
  3517  0017C8  0101               	movlb	1	; () banked
  3518  0017CA  6F6B               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3519  0017CC  0E01               	movlw	1
  3520  0017CE  6F6A               	movwf	display_menu@menuSelection& (0+255),b
  3521                           
  3522                           ; BSR set to: 1
  3523                           ;main.c: 255: menuIndexPtr=&logIndex;
  3524  0017D0  0EF3               	movlw	low _logIndex
  3525  0017D2  0101               	movlb	1	; () banked
  3526  0017D4  6F6E               	movwf	display_menu@menuIndexPtr& (0+255),b
  3527  0017D6  0E00               	movlw	high _logIndex
  3528  0017D8  0101               	movlb	1	; () banked
  3529  0017DA  6F6F               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3530                           
  3531                           ; BSR set to: 1
  3532                           ;main.c: 256: menuSizePtr=&events;
  3533  0017DC  0EF1               	movlw	low _events
  3534  0017DE  0101               	movlb	1	; () banked
  3535  0017E0  6F68               	movwf	display_menu@menuSizePtr& (0+255),b
  3536  0017E2  0E00               	movlw	high _events
  3537  0017E4  D036               	goto	L2
  3538  0017E6                     l7069:
  3539                           
  3540                           ;main.c: 259: menuSelection=2;
  3541  0017E6  0E00               	movlw	0
  3542  0017E8  0101               	movlb	1	; () banked
  3543  0017EA  6F6B               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3544  0017EC  0E02               	movlw	2
  3545  0017EE  6F6A               	movwf	display_menu@menuSelection& (0+255),b
  3546                           
  3547                           ; BSR set to: 1
  3548                           ;main.c: 260: menuIndexPtr=&creditIndex;
  3549  0017F0  0EE9               	movlw	low _creditIndex
  3550  0017F2  0101               	movlb	1	; () banked
  3551  0017F4  6F6E               	movwf	display_menu@menuIndexPtr& (0+255),b
  3552  0017F6  0E00               	movlw	high _creditIndex
  3553  0017F8  0101               	movlb	1	; () banked
  3554  0017FA  6F6F               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3555                           
  3556                           ; BSR set to: 1
  3557                           ;main.c: 261: menuSizePtr=&creditSize;
  3558  0017FC  0EEB               	movlw	low _creditSize
  3559  0017FE  0101               	movlb	1	; () banked
  3560  001800  6F68               	movwf	display_menu@menuSizePtr& (0+255),b
  3561  001802  0E00               	movlw	high _creditSize
  3562  001804  D026               	goto	L2
  3563  001806                     l7075:
  3564                           
  3565                           ;main.c: 265: menuSelection=0;
  3566  001806  0E00               	movlw	0
  3567  001808  0101               	movlb	1	; () banked
  3568  00180A  6F6B               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3569  00180C  0E00               	movlw	0
  3570  00180E  6F6A               	movwf	display_menu@menuSelection& (0+255),b
  3571                           
  3572                           ; BSR set to: 1
  3573                           ;main.c: 266: menuIndexPtr=&menuIndex;
  3574  001810  0EF5               	movlw	low _menuIndex
  3575  001812  0101               	movlb	1	; () banked
  3576  001814  6F6E               	movwf	display_menu@menuIndexPtr& (0+255),b
  3577  001816  0E00               	movlw	high _menuIndex
  3578  001818  0101               	movlb	1	; () banked
  3579  00181A  6F6F               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3580                           
  3581                           ; BSR set to: 1
  3582                           ;main.c: 267: menuSizePtr=&menuSize;
  3583  00181C  0EF7               	movlw	low _menuSize
  3584  00181E  0101               	movlb	1	; () banked
  3585  001820  6F68               	movwf	display_menu@menuSizePtr& (0+255),b
  3586  001822  0E00               	movlw	high _menuSize
  3587  001824  0101               	movlb	1	; () banked
  3588  001826  6F69               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  3589                           
  3590                           ;main.c: 268: selector=1;
  3591  001828  0E00               	movlw	0
  3592  00182A  0101               	movlb	1	; () banked
  3593  00182C  6F67               	movwf	(display_menu@selector+1)& (0+255),b
  3594  00182E  0E01               	movlw	1
  3595  001830  6F66               	movwf	display_menu@selector& (0+255),b
  3596                           
  3597                           ;main.c: 269: break;
  3598  001832  D01F               	goto	l7089
  3599  001834                     l7081:
  3600                           
  3601                           ;main.c: 271: menuSelection=3;
  3602  001834  0E00               	movlw	0
  3603  001836  0101               	movlb	1	; () banked
  3604  001838  6F6B               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3605  00183A  0E03               	movlw	3
  3606  00183C  6F6A               	movwf	display_menu@menuSelection& (0+255),b
  3607                           
  3608                           ; BSR set to: 1
  3609                           ;main.c: 272: menuIndexPtr=&endIndex;
  3610  00183E  0EED               	movlw	low _endIndex
  3611  001840  0101               	movlb	1	; () banked
  3612  001842  6F6E               	movwf	display_menu@menuIndexPtr& (0+255),b
  3613  001844  0E00               	movlw	high _endIndex
  3614  001846  0101               	movlb	1	; () banked
  3615  001848  6F6F               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3616                           
  3617                           ; BSR set to: 1
  3618                           ;main.c: 273: menuSizePtr=&endSize;
  3619  00184A  0EEF               	movlw	low _endSize
  3620  00184C  0101               	movlb	1	; () banked
  3621  00184E  6F68               	movwf	display_menu@menuSizePtr& (0+255),b
  3622  001850  0E00               	movlw	high _endSize
  3623  001852                     L2:
  3624  001852  0101               	movlb	1	; () banked
  3625  001854  6F69               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  3626                           
  3627                           ;main.c: 274: }
  3628  001856  D00D               	goto	l7089
  3629  001858                     l7087:
  3630                           
  3631                           ; BSR set to: 1
  3632  001858  0100               	movlb	0	; () banked
  3633  00185A  51E8               	movf	_state& (0+255),w,b
  3634                           
  3635                           ; Switch size 1, requested type "space"
  3636                           ; Number of cases is 4, Range of values is 99 to 109
  3637                           ; switch strategies available:
  3638                           ; Name         Instructions Cycles
  3639                           ; simple_byte           13     7 (average)
  3640                           ;	Chosen strategy is simple_byte
  3641  00185C  0A63               	xorlw	99	; case 99
  3642  00185E  B4D8               	btfsc	status,2,c
  3643  001860  D7C2               	goto	l7069
  3644  001862  0A06               	xorlw	6	; case 101
  3645  001864  B4D8               	btfsc	status,2,c
  3646  001866  D7E6               	goto	l7081
  3647  001868  0A09               	xorlw	9	; case 108
  3648  00186A  B4D8               	btfsc	status,2,c
  3649  00186C  D7AC               	goto	l7063
  3650  00186E  0A01               	xorlw	1	; case 109
  3651  001870  D7CA               	goto	l7075
  3652  001872                     l7089:
  3653                           
  3654                           ;main.c: 275: if (selector){
  3655  001872  0101               	movlb	1	; () banked
  3656  001874  5166               	movf	display_menu@selector& (0+255),w,b
  3657  001876  0101               	movlb	1	; () banked
  3658  001878  1167               	iorwf	(display_menu@selector+1)& (0+255),w,b
  3659  00187A  B4D8               	btfsc	status,2,c
  3660  00187C  D14A               	goto	l7105
  3661                           
  3662                           ; BSR set to: 1
  3663                           ;main.c: 276: if (*menuIndexPtr<*menuSizePtr){
  3664  00187E  C168  FFD9         	movff	display_menu@menuSizePtr,fsr2l
  3665  001882  C169  FFDA         	movff	display_menu@menuSizePtr+1,fsr2h
  3666  001886  C16E  FFE1         	movff	display_menu@menuIndexPtr,fsr1l
  3667  00188A  C16F  FFE2         	movff	display_menu@menuIndexPtr+1,fsr1h
  3668  00188E  50DE               	movf	postinc2,w,c
  3669  001890  5CE6               	subwf	postinc1,w,c
  3670  001892  50E6               	movf	postinc1,w,c
  3671  001894  0A80               	xorlw	128
  3672  001896  0100               	movlb	0	; () banked
  3673  001898  6FB8               	movwf	(??_display_menu+4)& (0+255),b
  3674  00189A  50DE               	movf	postinc2,w,c
  3675  00189C  0A80               	xorlw	128
  3676  00189E  0100               	movlb	0	; () banked
  3677  0018A0  59B8               	subwfb	(??_display_menu+4)& (0+255),w,b
  3678  0018A2  B0D8               	btfsc	status,0,c
  3679  0018A4  D096               	goto	l7099
  3680                           
  3681                           ; BSR set to: 0
  3682                           ;main.c: 277: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  3683  0018A6  C16A  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  3684  0018AA  C16B  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  3685  0018AE  0E00               	movlw	0
  3686  0018B0  0100               	movlb	0	; () banked
  3687  0018B2  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3688  0018B4  0EB4               	movlw	180
  3689  0018B6  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3690  0018B8  ECB4  F016         	call	___wmul	;wreg free
  3691  0018BC  0E70               	movlw	low _menu
  3692  0018BE  0100               	movlb	0	; () banked
  3693  0018C0  6FB4               	movwf	??_display_menu& (0+255),b
  3694  0018C2  0E01               	movlw	high _menu
  3695  0018C4  0100               	movlb	0	; () banked
  3696  0018C6  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  3697  0018C8  0100               	movlb	0	; () banked
  3698  0018CA  5180               	movf	?___wmul& (0+255),w,b
  3699  0018CC  0100               	movlb	0	; () banked
  3700  0018CE  27B4               	addwf	??_display_menu& (0+255),f,b
  3701  0018D0  0100               	movlb	0	; () banked
  3702  0018D2  5181               	movf	(?___wmul+1)& (0+255),w,b
  3703  0018D4  0100               	movlb	0	; () banked
  3704  0018D6  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  3705  0018D8  C16E  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  3706  0018DC  C16F  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  3707  0018E0  CFDE F0B6          	movff	postinc2,??_display_menu+2
  3708  0018E4  CFDD F0B7          	movff	postdec2,??_display_menu+3
  3709  0018E8  0EFF               	movlw	255
  3710  0018EA  0100               	movlb	0	; () banked
  3711  0018EC  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  3712  0018EE  0100               	movlb	0	; () banked
  3713  0018F0  6F80               	movwf	___wmul@multiplier& (0+255),b
  3714  0018F2  0EFF               	movlw	255
  3715  0018F4  0100               	movlb	0	; () banked
  3716  0018F6  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  3717  0018F8  0100               	movlb	0	; () banked
  3718  0018FA  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  3719  0018FC  0E00               	movlw	0
  3720  0018FE  0100               	movlb	0	; () banked
  3721  001900  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3722  001902  0E12               	movlw	18
  3723  001904  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3724  001906  ECB4  F016         	call	___wmul	;wreg free
  3725  00190A  0100               	movlb	0	; () banked
  3726  00190C  5180               	movf	?___wmul& (0+255),w,b
  3727  00190E  0100               	movlb	0	; () banked
  3728  001910  25B4               	addwf	??_display_menu& (0+255),w,b
  3729  001912  0101               	movlb	1	; () banked
  3730  001914  6F6C               	movwf	_display_menu$1088& (0+255),b
  3731  001916  0100               	movlb	0	; () banked
  3732  001918  5181               	movf	(?___wmul+1)& (0+255),w,b
  3733  00191A  0100               	movlb	0	; () banked
  3734  00191C  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  3735  00191E  0101               	movlb	1	; () banked
  3736  001920  6F6D               	movwf	(_display_menu$1088+1)& (0+255),b
  3737                           
  3738                           ; BSR set to: 1
  3739                           ;main.c: 277: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  3740  001922  0E42               	movlw	low _ndisplay0
  3741  001924  0100               	movlb	0	; () banked
  3742  001926  6FA2               	movwf	sprintf@wh& (0+255),b
  3743  001928  0E01               	movlw	high _ndisplay0
  3744  00192A  0100               	movlb	0	; () banked
  3745  00192C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3746  00192E  0EF9               	movlw	low STR_11
  3747  001930  0100               	movlb	0	; () banked
  3748  001932  6FA4               	movwf	sprintf@f& (0+255),b
  3749  001934  0EFF               	movlw	high STR_11
  3750  001936  0100               	movlb	0	; () banked
  3751  001938  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3752  00193A  C16C  F0A6         	movff	_display_menu$1088,?_sprintf+4
  3753  00193E  C16D  F0A7         	movff	_display_menu$1088+1,?_sprintf+5
  3754  001942  0E00               	movlw	0
  3755  001944  0100               	movlb	0	; () banked
  3756  001946  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  3757  001948  0E3C               	movlw	60
  3758  00194A  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  3759  00194C  ECF7  F015         	call	_sprintf	;wreg free
  3760                           
  3761                           ;main.c: 278: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  3762  001950  C16A  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  3763  001954  C16B  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  3764  001958  0E00               	movlw	0
  3765  00195A  0100               	movlb	0	; () banked
  3766  00195C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3767  00195E  0EB4               	movlw	180
  3768  001960  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3769  001962  ECB4  F016         	call	___wmul	;wreg free
  3770  001966  0E70               	movlw	low _menu
  3771  001968  0100               	movlb	0	; () banked
  3772  00196A  6FB4               	movwf	??_display_menu& (0+255),b
  3773  00196C  0E01               	movlw	high _menu
  3774  00196E  0100               	movlb	0	; () banked
  3775  001970  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  3776  001972  0100               	movlb	0	; () banked
  3777  001974  5180               	movf	?___wmul& (0+255),w,b
  3778  001976  0100               	movlb	0	; () banked
  3779  001978  27B4               	addwf	??_display_menu& (0+255),f,b
  3780  00197A  0100               	movlb	0	; () banked
  3781  00197C  5181               	movf	(?___wmul+1)& (0+255),w,b
  3782  00197E  0100               	movlb	0	; () banked
  3783  001980  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  3784  001982  C16E  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  3785  001986  C16F  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  3786  00198A  CFDE F080          	movff	postinc2,___wmul@multiplier
  3787  00198E  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  3788  001992  0E00               	movlw	0
  3789  001994  0100               	movlb	0	; () banked
  3790  001996  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3791  001998  0E12               	movlw	18
  3792  00199A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3793  00199C  ECB4  F016         	call	___wmul	;wreg free
  3794  0019A0  0100               	movlb	0	; () banked
  3795  0019A2  5180               	movf	?___wmul& (0+255),w,b
  3796  0019A4  0100               	movlb	0	; () banked
  3797  0019A6  25B4               	addwf	??_display_menu& (0+255),w,b
  3798  0019A8  0101               	movlb	1	; () banked
  3799  0019AA  6F6C               	movwf	_display_menu$1088& (0+255),b
  3800  0019AC  0100               	movlb	0	; () banked
  3801  0019AE  5181               	movf	(?___wmul+1)& (0+255),w,b
  3802  0019B0  0100               	movlb	0	; () banked
  3803  0019B2  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  3804  0019B4  0101               	movlb	1	; () banked
  3805  0019B6  6F6D               	movwf	(_display_menu$1088+1)& (0+255),b
  3806                           
  3807                           ;main.c: 278: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  3808  0019B8  0E54               	movlw	low _ndisplay1
  3809  0019BA  0100               	movlb	0	; () banked
  3810  0019BC  6FA2               	movwf	sprintf@wh& (0+255),b
  3811  0019BE  0E01               	movlw	high _ndisplay1
  3812  0019C0  0100               	movlb	0	; () banked
  3813  0019C2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3814  0019C4  C16C  F0A4         	movff	_display_menu$1088,sprintf@f
  3815  0019C8  C16D  F0A5         	movff	_display_menu$1088+1,sprintf@f+1
  3816  0019CC  ECF7  F015         	call	_sprintf	;wreg free
  3817                           
  3818                           ;main.c: 279: }
  3819  0019D0  0012               	return	
  3820  0019D2                     l7099:
  3821                           
  3822                           ;main.c: 280: else{
  3823                           ;main.c: 281: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  3824  0019D2  C16A  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  3825  0019D6  C16B  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  3826  0019DA  0E00               	movlw	0
  3827  0019DC  0100               	movlb	0	; () banked
  3828  0019DE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3829  0019E0  0EB4               	movlw	180
  3830  0019E2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3831  0019E4  ECB4  F016         	call	___wmul	;wreg free
  3832  0019E8  0E70               	movlw	low _menu
  3833  0019EA  0100               	movlb	0	; () banked
  3834  0019EC  6FB4               	movwf	??_display_menu& (0+255),b
  3835  0019EE  0E01               	movlw	high _menu
  3836  0019F0  0100               	movlb	0	; () banked
  3837  0019F2  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  3838  0019F4  0100               	movlb	0	; () banked
  3839  0019F6  5180               	movf	?___wmul& (0+255),w,b
  3840  0019F8  0100               	movlb	0	; () banked
  3841  0019FA  27B4               	addwf	??_display_menu& (0+255),f,b
  3842  0019FC  0100               	movlb	0	; () banked
  3843  0019FE  5181               	movf	(?___wmul+1)& (0+255),w,b
  3844  001A00  0100               	movlb	0	; () banked
  3845  001A02  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  3846  001A04  C16E  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  3847  001A08  C16F  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  3848  001A0C  CFDE F0B6          	movff	postinc2,??_display_menu+2
  3849  001A10  CFDD F0B7          	movff	postdec2,??_display_menu+3
  3850  001A14  0EFE               	movlw	254
  3851  001A16  0100               	movlb	0	; () banked
  3852  001A18  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  3853  001A1A  0100               	movlb	0	; () banked
  3854  001A1C  6F80               	movwf	___wmul@multiplier& (0+255),b
  3855  001A1E  0EFF               	movlw	255
  3856  001A20  0100               	movlb	0	; () banked
  3857  001A22  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  3858  001A24  0100               	movlb	0	; () banked
  3859  001A26  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  3860  001A28  0E00               	movlw	0
  3861  001A2A  0100               	movlb	0	; () banked
  3862  001A2C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3863  001A2E  0E12               	movlw	18
  3864  001A30  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3865  001A32  ECB4  F016         	call	___wmul	;wreg free
  3866  001A36  0100               	movlb	0	; () banked
  3867  001A38  5180               	movf	?___wmul& (0+255),w,b
  3868  001A3A  0100               	movlb	0	; () banked
  3869  001A3C  25B4               	addwf	??_display_menu& (0+255),w,b
  3870  001A3E  0101               	movlb	1	; () banked
  3871  001A40  6F6C               	movwf	_display_menu$1088& (0+255),b
  3872  001A42  0100               	movlb	0	; () banked
  3873  001A44  5181               	movf	(?___wmul+1)& (0+255),w,b
  3874  001A46  0100               	movlb	0	; () banked
  3875  001A48  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  3876  001A4A  0101               	movlb	1	; () banked
  3877  001A4C  6F6D               	movwf	(_display_menu$1088+1)& (0+255),b
  3878                           
  3879                           ; BSR set to: 1
  3880                           ;main.c: 280: else{
  3881                           ;main.c: 281: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  3882  001A4E  0E42               	movlw	low _ndisplay0
  3883  001A50  0100               	movlb	0	; () banked
  3884  001A52  6FA2               	movwf	sprintf@wh& (0+255),b
  3885  001A54  0E01               	movlw	high _ndisplay0
  3886  001A56  0100               	movlb	0	; () banked
  3887  001A58  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3888  001A5A  C16C  F0A4         	movff	_display_menu$1088,sprintf@f
  3889  001A5E  C16D  F0A5         	movff	_display_menu$1088+1,sprintf@f+1
  3890  001A62  ECF7  F015         	call	_sprintf	;wreg free
  3891                           
  3892                           ;main.c: 282: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  3893  001A66  C16A  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  3894  001A6A  C16B  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  3895  001A6E  0E00               	movlw	0
  3896  001A70  0100               	movlb	0	; () banked
  3897  001A72  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3898  001A74  0EB4               	movlw	180
  3899  001A76  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3900  001A78  ECB4  F016         	call	___wmul	;wreg free
  3901  001A7C  0E70               	movlw	low _menu
  3902  001A7E  0100               	movlb	0	; () banked
  3903  001A80  6FB4               	movwf	??_display_menu& (0+255),b
  3904  001A82  0E01               	movlw	high _menu
  3905  001A84  0100               	movlb	0	; () banked
  3906  001A86  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  3907  001A88  0100               	movlb	0	; () banked
  3908  001A8A  5180               	movf	?___wmul& (0+255),w,b
  3909  001A8C  0100               	movlb	0	; () banked
  3910  001A8E  27B4               	addwf	??_display_menu& (0+255),f,b
  3911  001A90  0100               	movlb	0	; () banked
  3912  001A92  5181               	movf	(?___wmul+1)& (0+255),w,b
  3913  001A94  0100               	movlb	0	; () banked
  3914  001A96  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  3915  001A98  C16E  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  3916  001A9C  C16F  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  3917  001AA0  CFDE F0B6          	movff	postinc2,??_display_menu+2
  3918  001AA4  CFDD F0B7          	movff	postdec2,??_display_menu+3
  3919  001AA8  0EFF               	movlw	255
  3920  001AAA  0100               	movlb	0	; () banked
  3921  001AAC  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  3922  001AAE  0100               	movlb	0	; () banked
  3923  001AB0  6F80               	movwf	___wmul@multiplier& (0+255),b
  3924  001AB2  0EFF               	movlw	255
  3925  001AB4  0100               	movlb	0	; () banked
  3926  001AB6  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  3927  001AB8  0100               	movlb	0	; () banked
  3928  001ABA  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  3929  001ABC  0E00               	movlw	0
  3930  001ABE  0100               	movlb	0	; () banked
  3931  001AC0  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3932  001AC2  0E12               	movlw	18
  3933  001AC4  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3934  001AC6  ECB4  F016         	call	___wmul	;wreg free
  3935  001ACA  0100               	movlb	0	; () banked
  3936  001ACC  5180               	movf	?___wmul& (0+255),w,b
  3937  001ACE  0100               	movlb	0	; () banked
  3938  001AD0  25B4               	addwf	??_display_menu& (0+255),w,b
  3939  001AD2  0101               	movlb	1	; () banked
  3940  001AD4  6F6C               	movwf	_display_menu$1088& (0+255),b
  3941  001AD6  0100               	movlb	0	; () banked
  3942  001AD8  5181               	movf	(?___wmul+1)& (0+255),w,b
  3943  001ADA  0100               	movlb	0	; () banked
  3944  001ADC  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  3945  001ADE  0101               	movlb	1	; () banked
  3946  001AE0  6F6D               	movwf	(_display_menu$1088+1)& (0+255),b
  3947                           
  3948                           ;main.c: 282: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  3949  001AE2  0E54               	movlw	low _ndisplay1
  3950  001AE4  0100               	movlb	0	; () banked
  3951  001AE6  6FA2               	movwf	sprintf@wh& (0+255),b
  3952  001AE8  0E01               	movlw	high _ndisplay1
  3953  001AEA  0100               	movlb	0	; () banked
  3954  001AEC  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3955  001AEE  0EF9               	movlw	low STR_11
  3956  001AF0  0100               	movlb	0	; () banked
  3957  001AF2  6FA4               	movwf	sprintf@f& (0+255),b
  3958  001AF4  0EFF               	movlw	high STR_11
  3959  001AF6  0100               	movlb	0	; () banked
  3960  001AF8  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3961  001AFA  C16C  F0A6         	movff	_display_menu$1088,?_sprintf+4
  3962  001AFE  C16D  F0A7         	movff	_display_menu$1088+1,?_sprintf+5
  3963  001B02  0E00               	movlw	0
  3964  001B04  0100               	movlb	0	; () banked
  3965  001B06  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  3966  001B08  0E3C               	movlw	60
  3967  001B0A  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  3968  001B0C  ECF7  F015         	call	_sprintf	;wreg free
  3969                           
  3970                           ;main.c: 283: }
  3971                           ;main.c: 284: }
  3972  001B10  0012               	return	
  3973  001B12                     l7105:
  3974                           
  3975                           ;main.c: 285: else{
  3976                           ;main.c: 286: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  3977  001B12  C16A  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  3978  001B16  C16B  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  3979  001B1A  0E00               	movlw	0
  3980  001B1C  0100               	movlb	0	; () banked
  3981  001B1E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3982  001B20  0EB4               	movlw	180
  3983  001B22  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3984  001B24  ECB4  F016         	call	___wmul	;wreg free
  3985  001B28  0E70               	movlw	low _menu
  3986  001B2A  0100               	movlb	0	; () banked
  3987  001B2C  6FB4               	movwf	??_display_menu& (0+255),b
  3988  001B2E  0E01               	movlw	high _menu
  3989  001B30  0100               	movlb	0	; () banked
  3990  001B32  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  3991  001B34  0100               	movlb	0	; () banked
  3992  001B36  5180               	movf	?___wmul& (0+255),w,b
  3993  001B38  0100               	movlb	0	; () banked
  3994  001B3A  27B4               	addwf	??_display_menu& (0+255),f,b
  3995  001B3C  0100               	movlb	0	; () banked
  3996  001B3E  5181               	movf	(?___wmul+1)& (0+255),w,b
  3997  001B40  0100               	movlb	0	; () banked
  3998  001B42  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  3999  001B44  C16E  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4000  001B48  C16F  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4001  001B4C  CFDE F0B6          	movff	postinc2,??_display_menu+2
  4002  001B50  CFDD F0B7          	movff	postdec2,??_display_menu+3
  4003  001B54  0EFF               	movlw	255
  4004  001B56  0100               	movlb	0	; () banked
  4005  001B58  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  4006  001B5A  0100               	movlb	0	; () banked
  4007  001B5C  6F80               	movwf	___wmul@multiplier& (0+255),b
  4008  001B5E  0EFF               	movlw	255
  4009  001B60  0100               	movlb	0	; () banked
  4010  001B62  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  4011  001B64  0100               	movlb	0	; () banked
  4012  001B66  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4013  001B68  0E00               	movlw	0
  4014  001B6A  0100               	movlb	0	; () banked
  4015  001B6C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4016  001B6E  0E12               	movlw	18
  4017  001B70  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4018  001B72  ECB4  F016         	call	___wmul	;wreg free
  4019  001B76  0100               	movlb	0	; () banked
  4020  001B78  5180               	movf	?___wmul& (0+255),w,b
  4021  001B7A  0100               	movlb	0	; () banked
  4022  001B7C  25B4               	addwf	??_display_menu& (0+255),w,b
  4023  001B7E  0101               	movlb	1	; () banked
  4024  001B80  6F6C               	movwf	_display_menu$1088& (0+255),b
  4025  001B82  0100               	movlb	0	; () banked
  4026  001B84  5181               	movf	(?___wmul+1)& (0+255),w,b
  4027  001B86  0100               	movlb	0	; () banked
  4028  001B88  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4029  001B8A  0101               	movlb	1	; () banked
  4030  001B8C  6F6D               	movwf	(_display_menu$1088+1)& (0+255),b
  4031                           
  4032                           ; BSR set to: 1
  4033                           ;main.c: 285: else{
  4034                           ;main.c: 286: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  4035  001B8E  0E42               	movlw	low _ndisplay0
  4036  001B90  0100               	movlb	0	; () banked
  4037  001B92  6FA2               	movwf	sprintf@wh& (0+255),b
  4038  001B94  0E01               	movlw	high _ndisplay0
  4039  001B96  0100               	movlb	0	; () banked
  4040  001B98  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4041  001B9A  0EF9               	movlw	low STR_11
  4042  001B9C  0100               	movlb	0	; () banked
  4043  001B9E  6FA4               	movwf	sprintf@f& (0+255),b
  4044  001BA0  0EFF               	movlw	high STR_11
  4045  001BA2  0100               	movlb	0	; () banked
  4046  001BA4  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4047  001BA6  C16C  F0A6         	movff	_display_menu$1088,?_sprintf+4
  4048  001BAA  C16D  F0A7         	movff	_display_menu$1088+1,?_sprintf+5
  4049  001BAE  0E00               	movlw	0
  4050  001BB0  0100               	movlb	0	; () banked
  4051  001BB2  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4052  001BB4  0E5E               	movlw	94
  4053  001BB6  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4054  001BB8  ECF7  F015         	call	_sprintf	;wreg free
  4055                           
  4056                           ;main.c: 287: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4057  001BBC  C16A  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4058  001BC0  C16B  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4059  001BC4  0E00               	movlw	0
  4060  001BC6  0100               	movlb	0	; () banked
  4061  001BC8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4062  001BCA  0EB4               	movlw	180
  4063  001BCC  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4064  001BCE  ECB4  F016         	call	___wmul	;wreg free
  4065  001BD2  0E70               	movlw	low _menu
  4066  001BD4  0100               	movlb	0	; () banked
  4067  001BD6  6FB4               	movwf	??_display_menu& (0+255),b
  4068  001BD8  0E01               	movlw	high _menu
  4069  001BDA  0100               	movlb	0	; () banked
  4070  001BDC  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4071  001BDE  0100               	movlb	0	; () banked
  4072  001BE0  5180               	movf	?___wmul& (0+255),w,b
  4073  001BE2  0100               	movlb	0	; () banked
  4074  001BE4  27B4               	addwf	??_display_menu& (0+255),f,b
  4075  001BE6  0100               	movlb	0	; () banked
  4076  001BE8  5181               	movf	(?___wmul+1)& (0+255),w,b
  4077  001BEA  0100               	movlb	0	; () banked
  4078  001BEC  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4079  001BEE  C16E  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4080  001BF2  C16F  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4081  001BF6  CFDE F080          	movff	postinc2,___wmul@multiplier
  4082  001BFA  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  4083  001BFE  0E00               	movlw	0
  4084  001C00  0100               	movlb	0	; () banked
  4085  001C02  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4086  001C04  0E12               	movlw	18
  4087  001C06  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4088  001C08  ECB4  F016         	call	___wmul	;wreg free
  4089  001C0C  0100               	movlb	0	; () banked
  4090  001C0E  5180               	movf	?___wmul& (0+255),w,b
  4091  001C10  0100               	movlb	0	; () banked
  4092  001C12  25B4               	addwf	??_display_menu& (0+255),w,b
  4093  001C14  0101               	movlb	1	; () banked
  4094  001C16  6F6C               	movwf	_display_menu$1088& (0+255),b
  4095  001C18  0100               	movlb	0	; () banked
  4096  001C1A  5181               	movf	(?___wmul+1)& (0+255),w,b
  4097  001C1C  0100               	movlb	0	; () banked
  4098  001C1E  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4099  001C20  0101               	movlb	1	; () banked
  4100  001C22  6F6D               	movwf	(_display_menu$1088+1)& (0+255),b
  4101                           
  4102                           ;main.c: 287: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4103  001C24  0E54               	movlw	low _ndisplay1
  4104  001C26  0100               	movlb	0	; () banked
  4105  001C28  6FA2               	movwf	sprintf@wh& (0+255),b
  4106  001C2A  0E01               	movlw	high _ndisplay1
  4107  001C2C  0100               	movlb	0	; () banked
  4108  001C2E  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4109  001C30  0EF9               	movlw	low STR_11
  4110  001C32  0100               	movlb	0	; () banked
  4111  001C34  6FA4               	movwf	sprintf@f& (0+255),b
  4112  001C36  0EFF               	movlw	high STR_11
  4113  001C38  0100               	movlb	0	; () banked
  4114  001C3A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4115  001C3C  C16C  F0A6         	movff	_display_menu$1088,?_sprintf+4
  4116  001C40  C16D  F0A7         	movff	_display_menu$1088+1,?_sprintf+5
  4117  001C44  0E00               	movlw	0
  4118  001C46  0100               	movlb	0	; () banked
  4119  001C48  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4120  001C4A  0E5E               	movlw	94
  4121  001C4C  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4122  001C4E  ECF7  F015         	call	_sprintf	;wreg free
  4123  001C52  0012               	return	
  4124  001C54                     __end_of_display_menu:
  4125                           	opt stack 0
  4126                           tblptru	equ	0xFF8
  4127                           tblptrh	equ	0xFF7
  4128                           tblptrl	equ	0xFF6
  4129                           tablat	equ	0xFF5
  4130                           intcon	equ	0xFF2
  4131                           intcon2	equ	0xFF1
  4132                           intcon3	equ	0xFF0
  4133                           postinc0	equ	0xFEE
  4134                           wreg	equ	0xFE8
  4135                           indf1	equ	0xFE7
  4136                           postinc1	equ	0xFE6
  4137                           postdec1	equ	0xFE5
  4138                           fsr1h	equ	0xFE2
  4139                           fsr1l	equ	0xFE1
  4140                           indf2	equ	0xFDF
  4141                           postinc2	equ	0xFDE
  4142                           postdec2	equ	0xFDD
  4143                           fsr2h	equ	0xFDA
  4144                           fsr2l	equ	0xFD9
  4145                           status	equ	0xFD8
  4146                           
  4147 ;; *************** function _sprintf *****************
  4148 ;; Defined at:
  4149 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  4150 ;; Parameters:    Size  Location     Type
  4151 ;;  wh              2   34[BANK0 ] PTR unsigned char 
  4152 ;;		 -> menu(720), ndisplay1(18), ndisplay0(18), 
  4153 ;;  f               2   36[BANK0 ] PTR const unsigned char 
  4154 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
  4155 ;;		 -> STR_10(20), STR_9(20), STR_8(22), STR_7(19), 
  4156 ;;		 -> menu(720), STR_6(15), STR_5(6), STR_4(16), 
  4157 ;;		 -> STR_3(25), STR_2(23), STR_1(23), 
  4158 ;; Auto vars:     Size  Location     Type
  4159 ;;  pb              4   48[BANK0 ] struct __prbuf
  4160 ;;  ap              2   46[BANK0 ] PTR void [1]
  4161 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4162 ;; Return value:  Size  Location     Type
  4163 ;;                  2   34[BANK0 ] int 
  4164 ;; Registers used:
  4165 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4166 ;; Tracked objects:
  4167 ;;		On entry : 0/0
  4168 ;;		On exit  : 0/0
  4169 ;;		Unchanged: 0/0
  4170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4171 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4172 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;Total ram usage:       18 bytes
  4176 ;; Hardware stack levels used:    1
  4177 ;; Hardware stack levels required when called:    8
  4178 ;; This function calls:
  4179 ;;		__doprnt
  4180 ;; This function is called by:
  4181 ;;		_update_display
  4182 ;;		_update_state
  4183 ;;		_display_menu
  4184 ;; This function uses a non-reentrant model
  4185 ;;
  4186                           
  4187                           	psect	text8
  4188  002BEE                     __ptext8:
  4189                           	opt stack 0
  4190  002BEE                     _sprintf:
  4191                           	opt stack 21
  4192                           
  4193                           ;incstack = 0
  4194  002BEE  C0A2  F0B0         	movff	sprintf@wh,sprintf@pb
  4195  002BF2  C0A3  F0B1         	movff	sprintf@wh+1,sprintf@pb+1
  4196  002BF6  0E00               	movlw	0
  4197  002BF8  0100               	movlb	0	; () banked
  4198  002BFA  6FB2               	movwf	(sprintf@pb+2)& (0+255),b
  4199  002BFC  0E00               	movlw	0
  4200  002BFE  0100               	movlb	0	; () banked
  4201  002C00  6FB3               	movwf	(sprintf@pb+3)& (0+255),b
  4202  002C02  0EA6               	movlw	low (?_sprintf+4)
  4203  002C04  0100               	movlb	0	; () banked
  4204  002C06  6FAE               	movwf	sprintf@ap& (0+255),b
  4205  002C08  0E00               	movlw	high (?_sprintf+4)
  4206  002C0A  0100               	movlb	0	; () banked
  4207  002C0C  6FAF               	movwf	(sprintf@ap+1)& (0+255),b
  4208                           
  4209                           ; BSR set to: 0
  4210  002C0E  0EB0               	movlw	low sprintf@pb
  4211  002C10  0100               	movlb	0	; () banked
  4212  002C12  6F8C               	movwf	__doprnt@pb& (0+255),b
  4213  002C14  0E00               	movlw	high sprintf@pb
  4214  002C16  0100               	movlb	0	; () banked
  4215  002C18  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  4216  002C1A  C0A4  F08E         	movff	sprintf@f,__doprnt@f
  4217  002C1E  C0A5  F08F         	movff	sprintf@f+1,__doprnt@f+1
  4218  002C22  0EAE               	movlw	low sprintf@ap
  4219  002C24  0100               	movlb	0	; () banked
  4220  002C26  6F90               	movwf	__doprnt@ap& (0+255),b
  4221  002C28  0E00               	movlw	high sprintf@ap
  4222  002C2A  0100               	movlb	0	; () banked
  4223  002C2C  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  4224  002C2E  EC09  F000         	call	__doprnt	;wreg free
  4225  002C32  C0B0  FFD9         	movff	sprintf@pb,fsr2l
  4226  002C36  C0B1  FFDA         	movff	sprintf@pb+1,fsr2h
  4227  002C3A  0E00               	movlw	0
  4228  002C3C  6EDF               	movwf	indf2,c
  4229  002C3E  0012               	return	
  4230  002C40                     __end_of_sprintf:
  4231                           	opt stack 0
  4232                           tblptru	equ	0xFF8
  4233                           tblptrh	equ	0xFF7
  4234                           tblptrl	equ	0xFF6
  4235                           tablat	equ	0xFF5
  4236                           intcon	equ	0xFF2
  4237                           intcon2	equ	0xFF1
  4238                           intcon3	equ	0xFF0
  4239                           postinc0	equ	0xFEE
  4240                           wreg	equ	0xFE8
  4241                           indf1	equ	0xFE7
  4242                           postinc1	equ	0xFE6
  4243                           postdec1	equ	0xFE5
  4244                           fsr1h	equ	0xFE2
  4245                           fsr1l	equ	0xFE1
  4246                           indf2	equ	0xFDF
  4247                           postinc2	equ	0xFDE
  4248                           postdec2	equ	0xFDD
  4249                           fsr2h	equ	0xFDA
  4250                           fsr2l	equ	0xFD9
  4251                           status	equ	0xFD8
  4252                           
  4253 ;; *************** function __doprnt *****************
  4254 ;; Defined at:
  4255 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4256 ;; Parameters:    Size  Location     Type
  4257 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
  4258 ;;		 -> sprintf@pb(4), printf@pb(4), 
  4259 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4260 ;;		 -> STR_17(14), STR_16(15), STR_15(8), STR_14(5), 
  4261 ;;		 -> STR_13(5), STR_12(5), STR_11(5), STR_10(20), 
  4262 ;;		 -> STR_9(20), STR_8(22), STR_7(19), menu(720), 
  4263 ;;		 -> STR_6(15), STR_5(6), STR_4(16), STR_3(25), 
  4264 ;;		 -> STR_2(23), STR_1(23), display1(18), display0(18), 
  4265 ;;  ap              2   16[BANK0 ] PTR PTR void 
  4266 ;;		 -> sprintf@ap(2), printf@ap(2), 
  4267 ;; Auto vars:     Size  Location     Type
  4268 ;;  idx             1   22[BANK0 ] unsigned char 
  4269 ;;  tmpval          4    0        struct .
  4270 ;;  width           2   31[BANK0 ] int 
  4271 ;;  val             2   28[BANK0 ] unsigned int 
  4272 ;;  cp              2   26[BANK0 ] PTR const unsigned char 
  4273 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_18(7), 
  4274 ;;		 -> _doprnt@c(1), menu(720), ndisplay1(18), ndisplay0(18), 
  4275 ;;  len             2   24[BANK0 ] unsigned int 
  4276 ;;  c               1   33[BANK0 ] char 
  4277 ;;  flag            1   30[BANK0 ] unsigned char 
  4278 ;;  prec            1   23[BANK0 ] char 
  4279 ;; Return value:  Size  Location     Type
  4280 ;;                  2   12[BANK0 ] int 
  4281 ;; Registers used:
  4282 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4283 ;; Tracked objects:
  4284 ;;		On entry : 0/0
  4285 ;;		On exit  : 0/0
  4286 ;;		Unchanged: 0/0
  4287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4288 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4289 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4290 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4291 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4292 ;;Total ram usage:       22 bytes
  4293 ;; Hardware stack levels used:    1
  4294 ;; Hardware stack levels required when called:    7
  4295 ;; This function calls:
  4296 ;;		Absolute function
  4297 ;;		___lwdiv
  4298 ;;		___lwmod
  4299 ;;		___wmul
  4300 ;;		_isdigit
  4301 ;;		_putch
  4302 ;; This function is called by:
  4303 ;;		_printf
  4304 ;;		_sprintf
  4305 ;; This function uses a non-reentrant model
  4306 ;;
  4307                           
  4308                           	psect	text9
  4309  000012                     __ptext9:
  4310                           	opt stack 0
  4311  000012                     __doprnt:
  4312                           	opt stack 21
  4313                           
  4314                           ;doprnt.c: 499: signed char c;
  4315                           ;doprnt.c: 501: int width;
  4316                           ;doprnt.c: 506: signed char prec;
  4317                           ;doprnt.c: 508: unsigned char flag;
  4318                           ;doprnt.c: 523: union {
  4319                           ;doprnt.c: 524: unsigned long vd;
  4320                           ;doprnt.c: 525: double integ;
  4321                           ;doprnt.c: 526: } tmpval;
  4322                           ;doprnt.c: 528: unsigned int val;
  4323                           ;doprnt.c: 529: unsigned len;
  4324                           ;doprnt.c: 530: const char * cp;
  4325                           ;doprnt.c: 536: while(c = *f++) {
  4326                           
  4327                           ;incstack = 0
  4328  000012  EFA2  F004         	goto	l7041
  4329  000016                     l6835:
  4330                           
  4331                           ;doprnt.c: 538: if(c != '%')
  4332  000016  0E25               	movlw	37
  4333  000018  0100               	movlb	0	; () banked
  4334  00001A  19A1               	xorwf	__doprnt@c& (0+255),w,b
  4335  00001C  B4D8               	btfsc	status,2,c
  4336  00001E  D03C               	goto	l6845
  4337                           
  4338                           ; BSR set to: 0
  4339                           ;doprnt.c: 540: {
  4340                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4341  000020  0100               	movlb	0	; () banked
  4342  000022  EE20 F002          	lfsr	2,2
  4343  000026  518C               	movf	__doprnt@pb& (0+255),w,b
  4344  000028  26D9               	addwf	fsr2l,f,c
  4345  00002A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4346  00002C  22DA               	addwfc	fsr2h,f,c
  4347  00002E  50DE               	movf	postinc2,w,c
  4348  000030  10DE               	iorwf	postinc2,w,c
  4349  000032  B4D8               	btfsc	status,2,c
  4350  000034  D01A               	goto	l6841
  4351                           
  4352                           ; BSR set to: 0
  4353  000036  0100               	movlb	0	; () banked
  4354  000038  EE20 F002          	lfsr	2,2
  4355  00003C  518C               	movf	__doprnt@pb& (0+255),w,b
  4356  00003E  26D9               	addwf	fsr2l,f,c
  4357  000040  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4358  000042  22DA               	addwfc	fsr2h,f,c
  4359  000044  CFDE F092          	movff	postinc2,??__doprnt
  4360  000048  CFDD F093          	movff	postdec2,??__doprnt+1
  4361  00004C  D802               	call	u10068
  4362  00004E  EFA2  F004         	goto	l7041
  4363  000052                     u10068:
  4364  000052  0005               	push	
  4365  000054  6EFA               	movwf	pclath,c
  4366  000056  0100               	movlb	0	; () banked
  4367  000058  5192               	movf	??__doprnt& (0+255),w,b
  4368  00005A  6EFD               	movwf	tosl,c
  4369  00005C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4370  00005E  6EFE               	movwf	tosh,c
  4371  000060  6AFF               	clrf	tosu,c
  4372  000062  50FA               	movf	pclath,w,c
  4373  000064  0100               	movlb	0	; () banked
  4374  000066  51A1               	movf	__doprnt@c& (0+255),w,b
  4375  000068  0012               	return		;indir
  4376  00006A                     l6841:
  4377  00006A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4378  00006E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4379  000072  CFDE F092          	movff	postinc2,??__doprnt
  4380  000076  CFDD F093          	movff	postdec2,??__doprnt+1
  4381  00007A  C092  FFD9         	movff	??__doprnt,fsr2l
  4382  00007E  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4383  000082  C0A1  FFDF         	movff	__doprnt@c,indf2
  4384  000086  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4385  00008A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4386  00008E  2ADE               	incf	postinc2,f,c
  4387  000090  0E00               	movlw	0
  4388  000092  22DD               	addwfc	postdec2,f,c
  4389                           
  4390                           ;doprnt.c: 542: continue;
  4391  000094  EFA2  F004         	goto	l7041
  4392  000098                     l6845:
  4393                           
  4394                           ;doprnt.c: 543: }
  4395                           ;doprnt.c: 546: width = 0;
  4396  000098  0E00               	movlw	0
  4397  00009A  0100               	movlb	0	; () banked
  4398  00009C  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  4399  00009E  0E00               	movlw	0
  4400  0000A0  6F9F               	movwf	__doprnt@width& (0+255),b
  4401                           
  4402                           ;doprnt.c: 548: flag = 0;
  4403  0000A2  0E00               	movlw	0
  4404  0000A4  0100               	movlb	0	; () banked
  4405  0000A6  6F9E               	movwf	__doprnt@flag& (0+255),b
  4406                           
  4407                           ; BSR set to: 0
  4408                           ;doprnt.c: 551: switch(*f) {
  4409                           
  4410                           ;doprnt.c: 550: for(;;) {
  4411  0000A8  D005               	goto	l6851
  4412  0000AA                     l6847:
  4413                           
  4414                           ;doprnt.c: 580: flag |= 0x04;
  4415  0000AA  0100               	movlb	0	; () banked
  4416  0000AC  859E               	bsf	__doprnt@flag& (0+255),2,b
  4417                           
  4418                           ;doprnt.c: 581: f++;
  4419  0000AE  0100               	movlb	0	; () banked
  4420  0000B0  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  4421  0000B2  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  4422  0000B4                     l6851:
  4423  0000B4  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4424  0000B8  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4425  0000BC  0E00               	movlw	low (__mediumconst shr (0+16))
  4426  0000BE  6EF8               	movwf	tblptru,c
  4427  0000C0  0E0F               	movlw	(high __ramtop+-1)
  4428  0000C2  64F7               	cpfsgt	tblptrh,c
  4429  0000C4  D003               	bra	u10077
  4430  0000C6  0008               	tblrd		*
  4431  0000C8  50F5               	movf	tablat,w,c
  4432  0000CA  D005               	bra	u10070
  4433  0000CC                     u10077:
  4434  0000CC  CFF6 FFE9          	movff	tblptrl,fsr0l
  4435  0000D0  CFF7 FFEA          	movff	tblptrh,fsr0h
  4436  0000D4  50EF               	movf	indf0,w,c
  4437  0000D6                     u10070:
  4438                           
  4439                           ; Switch size 1, requested type "space"
  4440                           ; Number of cases is 1, Range of values is 48 to 48
  4441                           ; switch strategies available:
  4442                           ; Name         Instructions Cycles
  4443                           ; simple_byte            4     3 (average)
  4444                           ;	Chosen strategy is simple_byte
  4445  0000D6  0A30               	xorlw	48	; case 48
  4446  0000D8  B4D8               	btfsc	status,2,c
  4447  0000DA  D7E7               	goto	l6847
  4448                           
  4449                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4450                           
  4451                           ;doprnt.c: 586: }
  4452                           
  4453                           ;doprnt.c: 585: break;
  4454  0000DC  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4455  0000E0  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4456  0000E4  0E00               	movlw	low (__mediumconst shr (0+16))
  4457  0000E6  6EF8               	movwf	tblptru,c
  4458  0000E8  0E0F               	movlw	(high __ramtop+-1)
  4459  0000EA  64F7               	cpfsgt	tblptrh,c
  4460  0000EC  D003               	bra	u10087
  4461  0000EE  0008               	tblrd		*
  4462  0000F0  50F5               	movf	tablat,w,c
  4463  0000F2  D005               	bra	u10080
  4464  0000F4                     u10087:
  4465  0000F4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4466  0000F8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4467  0000FC  50EF               	movf	indf0,w,c
  4468  0000FE                     u10080:
  4469  0000FE  EC47  F017         	call	_isdigit
  4470  000102  A0D8               	btfss	status,0,c
  4471  000104  D18A               	goto	l6917
  4472                           
  4473                           ;doprnt.c: 598: width = 0;
  4474  000106  0E00               	movlw	0
  4475  000108  0100               	movlb	0	; () banked
  4476  00010A  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  4477  00010C  0E00               	movlw	0
  4478  00010E  6F9F               	movwf	__doprnt@width& (0+255),b
  4479  000110                     l6857:
  4480                           
  4481                           ;doprnt.c: 600: width *= 10;
  4482  000110  C09F  F080         	movff	__doprnt@width,___wmul@multiplier
  4483  000114  C0A0  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
  4484  000118  0E00               	movlw	0
  4485  00011A  0100               	movlb	0	; () banked
  4486  00011C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4487  00011E  0E0A               	movlw	10
  4488  000120  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4489  000122  ECB4  F016         	call	___wmul	;wreg free
  4490  000126  C080  F09F         	movff	?___wmul,__doprnt@width
  4491  00012A  C081  F0A0         	movff	?___wmul+1,__doprnt@width+1
  4492                           
  4493                           ;doprnt.c: 601: width += *f++ - '0';
  4494  00012E  0ED0               	movlw	208
  4495  000130  0100               	movlb	0	; () banked
  4496  000132  6F92               	movwf	??__doprnt& (0+255),b
  4497  000134  0EFF               	movlw	255
  4498  000136  0100               	movlb	0	; () banked
  4499  000138  6F93               	movwf	(??__doprnt+1)& (0+255),b
  4500  00013A  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4501  00013E  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4502  000142  0E00               	movlw	low (__mediumconst shr (0+16))
  4503  000144  6EF8               	movwf	tblptru,c
  4504  000146  0E0F               	movlw	(high __ramtop+-1)
  4505  000148  64F7               	cpfsgt	tblptrh,c
  4506  00014A  D003               	bra	u10107
  4507  00014C  0008               	tblrd		*
  4508  00014E  50F5               	movf	tablat,w,c
  4509  000150  D005               	bra	u10100
  4510  000152                     u10107:
  4511  000152  CFF6 FFE9          	movff	tblptrl,fsr0l
  4512  000156  CFF7 FFEA          	movff	tblptrh,fsr0h
  4513  00015A  50EF               	movf	indf0,w,c
  4514  00015C                     u10100:
  4515  00015C  0100               	movlb	0	; () banked
  4516  00015E  6F94               	movwf	(??__doprnt+2)& (0+255),b
  4517  000160  6B95               	clrf	(??__doprnt+3)& (0+255),b
  4518  000162  0100               	movlb	0	; () banked
  4519  000164  5192               	movf	??__doprnt& (0+255),w,b
  4520  000166  0100               	movlb	0	; () banked
  4521  000168  2794               	addwf	(??__doprnt+2)& (0+255),f,b
  4522  00016A  0100               	movlb	0	; () banked
  4523  00016C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4524  00016E  0100               	movlb	0	; () banked
  4525  000170  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
  4526  000172  0100               	movlb	0	; () banked
  4527  000174  5194               	movf	(??__doprnt+2)& (0+255),w,b
  4528  000176  0100               	movlb	0	; () banked
  4529  000178  279F               	addwf	__doprnt@width& (0+255),f,b
  4530  00017A  0100               	movlb	0	; () banked
  4531  00017C  5195               	movf	(??__doprnt+3)& (0+255),w,b
  4532  00017E  0100               	movlb	0	; () banked
  4533  000180  23A0               	addwfc	(__doprnt@width+1)& (0+255),f,b
  4534                           
  4535                           ; BSR set to: 0
  4536  000182  0100               	movlb	0	; () banked
  4537  000184  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  4538  000186  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  4539                           
  4540                           ; BSR set to: 0
  4541                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4542  000188  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4543  00018C  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4544  000190  0E00               	movlw	low (__mediumconst shr (0+16))
  4545  000192  6EF8               	movwf	tblptru,c
  4546  000194  0E0F               	movlw	(high __ramtop+-1)
  4547  000196  64F7               	cpfsgt	tblptrh,c
  4548  000198  D003               	bra	u10117
  4549  00019A  0008               	tblrd		*
  4550  00019C  50F5               	movf	tablat,w,c
  4551  00019E  D005               	bra	u10110
  4552  0001A0                     u10117:
  4553  0001A0  CFF6 FFE9          	movff	tblptrl,fsr0l
  4554  0001A4  CFF7 FFEA          	movff	tblptrh,fsr0h
  4555  0001A8  50EF               	movf	indf0,w,c
  4556  0001AA                     u10110:
  4557  0001AA  EC47  F017         	call	_isdigit
  4558  0001AE  A0D8               	btfss	status,0,c
  4559  0001B0  D134               	goto	l6917
  4560  0001B2  D7AE               	goto	l6857
  4561  0001B4                     l6865:
  4562                           
  4563                           ;doprnt.c: 721: flag |= 0x80;
  4564  0001B4  0100               	movlb	0	; () banked
  4565  0001B6  8F9E               	bsf	__doprnt@flag& (0+255),7,b
  4566                           
  4567                           ;doprnt.c: 723: break;
  4568  0001B8  D163               	goto	l444
  4569  0001BA                     l6867:
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4573  0001BA  C090  FFD9         	movff	__doprnt@ap,fsr2l
  4574  0001BE  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  4575  0001C2  CFDF F092          	movff	indf2,??__doprnt
  4576  0001C6  0E02               	movlw	2
  4577  0001C8  26DE               	addwf	postinc2,f,c
  4578  0001CA  CFDF F093          	movff	indf2,??__doprnt+1
  4579  0001CE  0E00               	movlw	0
  4580  0001D0  22DD               	addwfc	postdec2,f,c
  4581  0001D2  C092  FFD9         	movff	??__doprnt,fsr2l
  4582  0001D6  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4583  0001DA  CFDE F09A          	movff	postinc2,__doprnt@cp
  4584  0001DE  CFDD F09B          	movff	postdec2,__doprnt@cp+1
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;doprnt.c: 740: if(!cp)
  4588  0001E2  0100               	movlb	0	; () banked
  4589  0001E4  519A               	movf	__doprnt@cp& (0+255),w,b
  4590  0001E6  0100               	movlb	0	; () banked
  4591  0001E8  119B               	iorwf	(__doprnt@cp+1)& (0+255),w,b
  4592  0001EA  A4D8               	btfss	status,2,c
  4593  0001EC  D006               	goto	l6873
  4594                           
  4595                           ; BSR set to: 0
  4596                           ;doprnt.c: 741: cp = "(null)";
  4597  0001EE  0EEC               	movlw	low STR_18
  4598  0001F0  0100               	movlb	0	; () banked
  4599  0001F2  6F9A               	movwf	__doprnt@cp& (0+255),b
  4600  0001F4  0EFF               	movlw	high STR_18
  4601  0001F6  0100               	movlb	0	; () banked
  4602  0001F8  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  4603  0001FA                     l6873:
  4604                           
  4605                           ; BSR set to: 0
  4606                           ;doprnt.c: 745: len = 0;
  4607  0001FA  0E00               	movlw	0
  4608  0001FC  0100               	movlb	0	; () banked
  4609  0001FE  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  4610  000200  0E00               	movlw	0
  4611  000202  6F98               	movwf	__doprnt@len& (0+255),b
  4612                           
  4613                           ;doprnt.c: 746: while(cp[len])
  4614  000204  D003               	goto	l6877
  4615  000206                     l6875:
  4616                           
  4617                           ;doprnt.c: 747: len++;
  4618  000206  0100               	movlb	0	; () banked
  4619  000208  4B98               	infsnz	__doprnt@len& (0+255),f,b
  4620  00020A  2B99               	incf	(__doprnt@len+1)& (0+255),f,b
  4621  00020C                     l6877:
  4622                           
  4623                           ; BSR set to: 0
  4624  00020C  0100               	movlb	0	; () banked
  4625  00020E  5198               	movf	__doprnt@len& (0+255),w,b
  4626  000210  0100               	movlb	0	; () banked
  4627  000212  259A               	addwf	__doprnt@cp& (0+255),w,b
  4628  000214  0100               	movlb	0	; () banked
  4629  000216  6F92               	movwf	??__doprnt& (0+255),b
  4630  000218  0100               	movlb	0	; () banked
  4631  00021A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  4632  00021C  0100               	movlb	0	; () banked
  4633  00021E  219B               	addwfc	(__doprnt@cp+1)& (0+255),w,b
  4634  000220  0100               	movlb	0	; () banked
  4635  000222  6F93               	movwf	(??__doprnt+1)& (0+255),b
  4636  000224  C092  FFF6         	movff	??__doprnt,tblptrl
  4637  000228  C093  FFF7         	movff	??__doprnt+1,tblptrh
  4638  00022C  0E00               	movlw	low (__mediumconst shr (0+16))
  4639  00022E  6EF8               	movwf	tblptru,c
  4640  000230  0E0F               	movlw	(high __ramtop+-1)
  4641  000232  64F7               	cpfsgt	tblptrh,c
  4642  000234  D003               	bra	u10147
  4643  000236  0008               	tblrd		*
  4644  000238  50F5               	movf	tablat,w,c
  4645  00023A  D005               	bra	u10140
  4646  00023C                     u10147:
  4647  00023C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4648  000240  CFF7 FFEA          	movff	tblptrh,fsr0h
  4649  000244  50EF               	movf	indf0,w,c
  4650  000246                     u10140:
  4651  000246  0900               	iorlw	0
  4652  000248  A4D8               	btfss	status,2,c
  4653  00024A  D7DD               	goto	l6875
  4654  00024C                     l6879:
  4655                           
  4656                           ;doprnt.c: 757: if(width > len)
  4657  00024C  0100               	movlb	0	; () banked
  4658  00024E  519F               	movf	__doprnt@width& (0+255),w,b
  4659  000250  0100               	movlb	0	; () banked
  4660  000252  5D98               	subwf	__doprnt@len& (0+255),w,b
  4661  000254  0100               	movlb	0	; () banked
  4662  000256  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  4663  000258  0100               	movlb	0	; () banked
  4664  00025A  5999               	subwfb	(__doprnt@len+1)& (0+255),w,b
  4665  00025C  B0D8               	btfsc	status,0,c
  4666  00025E  D009               	goto	l6883
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;doprnt.c: 758: width -= len;
  4670  000260  0100               	movlb	0	; () banked
  4671  000262  5198               	movf	__doprnt@len& (0+255),w,b
  4672  000264  0100               	movlb	0	; () banked
  4673  000266  5F9F               	subwf	__doprnt@width& (0+255),f,b
  4674  000268  0100               	movlb	0	; () banked
  4675  00026A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  4676  00026C  0100               	movlb	0	; () banked
  4677  00026E  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  4678  000270  D03E               	goto	l6893
  4679  000272                     l6883:
  4680                           
  4681                           ; BSR set to: 0
  4682                           ;doprnt.c: 759: else
  4683                           ;doprnt.c: 760: width = 0;
  4684  000272  0E00               	movlw	0
  4685  000274  0100               	movlb	0	; () banked
  4686  000276  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  4687  000278  0E00               	movlw	0
  4688  00027A  6F9F               	movwf	__doprnt@width& (0+255),b
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;doprnt.c: 764: while(width--)
  4692  00027C  D038               	goto	l6893
  4693  00027E                     l6885:
  4694                           
  4695                           ; BSR set to: 0
  4696                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  4697  00027E  0100               	movlb	0	; () banked
  4698  000280  EE20 F002          	lfsr	2,2
  4699  000284  518C               	movf	__doprnt@pb& (0+255),w,b
  4700  000286  26D9               	addwf	fsr2l,f,c
  4701  000288  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4702  00028A  22DA               	addwfc	fsr2h,f,c
  4703  00028C  50DE               	movf	postinc2,w,c
  4704  00028E  10DE               	iorwf	postinc2,w,c
  4705  000290  B4D8               	btfsc	status,2,c
  4706  000292  D018               	goto	l6889
  4707                           
  4708                           ; BSR set to: 0
  4709  000294  0100               	movlb	0	; () banked
  4710  000296  EE20 F002          	lfsr	2,2
  4711  00029A  518C               	movf	__doprnt@pb& (0+255),w,b
  4712  00029C  26D9               	addwf	fsr2l,f,c
  4713  00029E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4714  0002A0  22DA               	addwfc	fsr2h,f,c
  4715  0002A2  CFDE F092          	movff	postinc2,??__doprnt
  4716  0002A6  CFDD F093          	movff	postdec2,??__doprnt+1
  4717  0002AA  D801               	call	u10188
  4718  0002AC  D020               	goto	l6893
  4719  0002AE                     u10188:
  4720  0002AE  0005               	push	
  4721  0002B0  6EFA               	movwf	pclath,c
  4722  0002B2  0100               	movlb	0	; () banked
  4723  0002B4  5192               	movf	??__doprnt& (0+255),w,b
  4724  0002B6  6EFD               	movwf	tosl,c
  4725  0002B8  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4726  0002BA  6EFE               	movwf	tosh,c
  4727  0002BC  6AFF               	clrf	tosu,c
  4728  0002BE  50FA               	movf	pclath,w,c
  4729  0002C0  0E20               	movlw	32
  4730  0002C2  0012               	return		;indir
  4731  0002C4                     l6889:
  4732  0002C4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4733  0002C8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4734  0002CC  CFDE F092          	movff	postinc2,??__doprnt
  4735  0002D0  CFDD F093          	movff	postdec2,??__doprnt+1
  4736  0002D4  C092  FFD9         	movff	??__doprnt,fsr2l
  4737  0002D8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4738  0002DC  0E20               	movlw	32
  4739  0002DE  6EDF               	movwf	indf2,c
  4740  0002E0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4741  0002E4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4742  0002E8  2ADE               	incf	postinc2,f,c
  4743  0002EA  0E00               	movlw	0
  4744  0002EC  22DD               	addwfc	postdec2,f,c
  4745  0002EE                     l6893:
  4746  0002EE  0100               	movlb	0	; () banked
  4747  0002F0  079F               	decf	__doprnt@width& (0+255),f,b
  4748  0002F2  A0D8               	btfss	status,0,c
  4749  0002F4  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  4750  0002F6  0100               	movlb	0	; () banked
  4751  0002F8  299F               	incf	__doprnt@width& (0+255),w,b
  4752  0002FA  E1C1               	bnz	l6885
  4753  0002FC  0100               	movlb	0	; () banked
  4754  0002FE  29A0               	incf	(__doprnt@width+1)& (0+255),w,b
  4755  000300  B4D8               	btfsc	status,2,c
  4756  000302  D060               	goto	l6907
  4757  000304  D7BC               	goto	l6885
  4758  000306                     l6895:
  4759                           
  4760                           ; BSR set to: 0
  4761                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  4762  000306  0100               	movlb	0	; () banked
  4763  000308  EE20 F002          	lfsr	2,2
  4764  00030C  518C               	movf	__doprnt@pb& (0+255),w,b
  4765  00030E  26D9               	addwf	fsr2l,f,c
  4766  000310  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4767  000312  22DA               	addwfc	fsr2h,f,c
  4768  000314  50DE               	movf	postinc2,w,c
  4769  000316  10DE               	iorwf	postinc2,w,c
  4770  000318  B4D8               	btfsc	status,2,c
  4771  00031A  D02C               	goto	l6901
  4772                           
  4773                           ; BSR set to: 0
  4774  00031C  0100               	movlb	0	; () banked
  4775  00031E  EE20 F002          	lfsr	2,2
  4776  000322  518C               	movf	__doprnt@pb& (0+255),w,b
  4777  000324  26D9               	addwf	fsr2l,f,c
  4778  000326  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4779  000328  22DA               	addwfc	fsr2h,f,c
  4780  00032A  CFDE F092          	movff	postinc2,??__doprnt
  4781  00032E  CFDD F093          	movff	postdec2,??__doprnt+1
  4782  000332  D801               	call	u10218
  4783  000334  D01B               	goto	l6899
  4784  000336                     u10218:
  4785  000336  0005               	push	
  4786  000338  6EFA               	movwf	pclath,c
  4787  00033A  0100               	movlb	0	; () banked
  4788  00033C  5192               	movf	??__doprnt& (0+255),w,b
  4789  00033E  6EFD               	movwf	tosl,c
  4790  000340  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4791  000342  6EFE               	movwf	tosh,c
  4792  000344  6AFF               	clrf	tosu,c
  4793  000346  50FA               	movf	pclath,w,c
  4794  000348  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  4795  00034C  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  4796  000350  0E00               	movlw	low (__mediumconst shr (0+16))
  4797  000352  6EF8               	movwf	tblptru,c
  4798  000354  0E0F               	movlw	(high __ramtop+-1)
  4799  000356  64F7               	cpfsgt	tblptrh,c
  4800  000358  D003               	bra	u10227
  4801  00035A  0008               	tblrd		*
  4802  00035C  50F5               	movf	tablat,w,c
  4803  00035E  D005               	bra	u10220
  4804  000360                     u10227:
  4805  000360  CFF6 FFE9          	movff	tblptrl,fsr0l
  4806  000364  CFF7 FFEA          	movff	tblptrh,fsr0h
  4807  000368  50EF               	movf	indf0,w,c
  4808  00036A                     u10220:
  4809  00036A  0012               	return		;indir
  4810  00036C                     l6899:
  4811  00036C  0100               	movlb	0	; () banked
  4812  00036E  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  4813  000370  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  4814  000372  D028               	goto	l6907
  4815  000374                     l6901:
  4816                           
  4817                           ; BSR set to: 0
  4818  000374  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  4819  000378  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  4820  00037C  0E00               	movlw	low (__mediumconst shr (0+16))
  4821  00037E  6EF8               	movwf	tblptru,c
  4822  000380  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4823  000384  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4824  000388  CFDE F092          	movff	postinc2,??__doprnt
  4825  00038C  CFDD F093          	movff	postdec2,??__doprnt+1
  4826  000390  C092  FFD9         	movff	??__doprnt,fsr2l
  4827  000394  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4828  000398  0E0F               	movlw	(high __ramtop+-1)
  4829  00039A  64F7               	cpfsgt	tblptrh,c
  4830  00039C  D003               	bra	u10237
  4831  00039E  0008               	tblrd		*
  4832  0003A0  50F5               	movf	tablat,w,c
  4833  0003A2  D005               	bra	u10230
  4834  0003A4                     u10237:
  4835  0003A4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4836  0003A8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4837  0003AC  50EF               	movf	indf0,w,c
  4838  0003AE                     u10230:
  4839  0003AE  6EDF               	movwf	indf2,c
  4840  0003B0  0100               	movlb	0	; () banked
  4841  0003B2  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  4842  0003B4  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  4843                           
  4844                           ; BSR set to: 0
  4845  0003B6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4846  0003BA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4847  0003BE  2ADE               	incf	postinc2,f,c
  4848  0003C0  0E00               	movlw	0
  4849  0003C2  22DD               	addwfc	postdec2,f,c
  4850  0003C4                     l6907:
  4851                           
  4852                           ; BSR set to: 0
  4853  0003C4  0100               	movlb	0	; () banked
  4854  0003C6  0798               	decf	__doprnt@len& (0+255),f,b
  4855  0003C8  A0D8               	btfss	status,0,c
  4856  0003CA  0799               	decf	(__doprnt@len+1)& (0+255),f,b
  4857  0003CC  0100               	movlb	0	; () banked
  4858  0003CE  2998               	incf	__doprnt@len& (0+255),w,b
  4859  0003D0  E19A               	bnz	l6895
  4860  0003D2  0100               	movlb	0	; () banked
  4861  0003D4  2999               	incf	(__doprnt@len+1)& (0+255),w,b
  4862  0003D6  B4D8               	btfsc	status,2,c
  4863  0003D8  D2B5               	goto	l7041
  4864  0003DA  D795               	goto	l6895
  4865  0003DC                     l6909:
  4866                           
  4867                           ; BSR set to: 0
  4868                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4869  0003DC  C090  FFD9         	movff	__doprnt@ap,fsr2l
  4870  0003E0  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  4871  0003E4  CFDF F092          	movff	indf2,??__doprnt
  4872  0003E8  0E02               	movlw	2
  4873  0003EA  26DE               	addwf	postinc2,f,c
  4874  0003EC  CFDF F093          	movff	indf2,??__doprnt+1
  4875  0003F0  0E00               	movlw	0
  4876  0003F2  22DD               	addwfc	postdec2,f,c
  4877  0003F4  C092  FFD9         	movff	??__doprnt,fsr2l
  4878  0003F8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4879  0003FC  50DF               	movf	indf2,w,c
  4880  0003FE  0100               	movlb	0	; () banked
  4881  000400  6FA1               	movwf	__doprnt@c& (0+255),b
  4882  000402                     l6911:
  4883                           
  4884                           ; BSR set to: 0
  4885                           ;doprnt.c: 805: cp = (char *)&c;
  4886  000402  0EA1               	movlw	low __doprnt@c
  4887  000404  0100               	movlb	0	; () banked
  4888  000406  6F9A               	movwf	__doprnt@cp& (0+255),b
  4889  000408  0E00               	movlw	high __doprnt@c
  4890  00040A  0100               	movlb	0	; () banked
  4891  00040C  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  4892                           
  4893                           ; BSR set to: 0
  4894                           ;doprnt.c: 806: len = 1;
  4895  00040E  0E00               	movlw	0
  4896  000410  0100               	movlb	0	; () banked
  4897  000412  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  4898  000414  0E01               	movlw	1
  4899  000416  6F98               	movwf	__doprnt@len& (0+255),b
  4900                           
  4901                           ;doprnt.c: 807: goto dostring;
  4902  000418  D719               	goto	l6879
  4903  00041A                     l6917:
  4904  00041A  0100               	movlb	0	; () banked
  4905  00041C  518E               	movf	__doprnt@f& (0+255),w,b
  4906  00041E  0100               	movlb	0	; () banked
  4907  000420  6F92               	movwf	??__doprnt& (0+255),b
  4908  000422  0100               	movlb	0	; () banked
  4909  000424  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  4910  000426  0100               	movlb	0	; () banked
  4911  000428  6F93               	movwf	(??__doprnt+1)& (0+255),b
  4912  00042A  0100               	movlb	0	; () banked
  4913  00042C  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  4914  00042E  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  4915  000430  C092  FFF6         	movff	??__doprnt,tblptrl
  4916  000434  C093  FFF7         	movff	??__doprnt+1,tblptrh
  4917  000438  0E00               	movlw	low (__mediumconst shr (0+16))
  4918  00043A  6EF8               	movwf	tblptru,c
  4919  00043C  0E0F               	movlw	(high __ramtop+-1)
  4920  00043E  64F7               	cpfsgt	tblptrh,c
  4921  000440  D003               	bra	u10257
  4922  000442  0008               	tblrd		*
  4923  000444  50F5               	movf	tablat,w,c
  4924  000446  D005               	bra	u10250
  4925  000448                     u10257:
  4926  000448  CFF6 FFE9          	movff	tblptrl,fsr0l
  4927  00044C  CFF7 FFEA          	movff	tblptrh,fsr0h
  4928  000450  50EF               	movf	indf0,w,c
  4929  000452                     u10250:
  4930  000452  0100               	movlb	0	; () banked
  4931  000454  6FA1               	movwf	__doprnt@c& (0+255),b
  4932  000456  0100               	movlb	0	; () banked
  4933  000458  51A1               	movf	__doprnt@c& (0+255),w,b
  4934                           
  4935                           ; Switch size 1, requested type "space"
  4936                           ; Number of cases is 6, Range of values is 0 to 120
  4937                           ; switch strategies available:
  4938                           ; Name         Instructions Cycles
  4939                           ; simple_byte           19    10 (average)
  4940                           ;	Chosen strategy is simple_byte
  4941  00045A  0A00               	xorlw	0	; case 0
  4942  00045C  B4D8               	btfsc	status,2,c
  4943  00045E  D295               	goto	l7043
  4944  000460  0A63               	xorlw	99	; case 99
  4945  000462  B4D8               	btfsc	status,2,c
  4946  000464  D7BB               	goto	l6909
  4947  000466  0A07               	xorlw	7	; case 100
  4948  000468  B4D8               	btfsc	status,2,c
  4949  00046A  D00A               	goto	l444
  4950  00046C  0A0D               	xorlw	13	; case 105
  4951  00046E  B4D8               	btfsc	status,2,c
  4952  000470  D007               	goto	l444
  4953  000472  0A1A               	xorlw	26	; case 115
  4954  000474  B4D8               	btfsc	status,2,c
  4955  000476  D6A1               	goto	l6867
  4956  000478  0A0B               	xorlw	11	; case 120
  4957  00047A  B4D8               	btfsc	status,2,c
  4958  00047C  D69B               	goto	l6865
  4959  00047E  D7C1               	goto	l6911
  4960  000480                     l444:
  4961                           
  4962                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4963  000480  0100               	movlb	0	; () banked
  4964  000482  BF9E               	btfsc	__doprnt@flag& (0+255),7,b
  4965  000484  D020               	goto	l6927
  4966                           
  4967                           ; BSR set to: 0
  4968                           ;doprnt.c: 1253: {
  4969                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4970  000486  C090  FFD9         	movff	__doprnt@ap,fsr2l
  4971  00048A  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  4972  00048E  CFDF F092          	movff	indf2,??__doprnt
  4973  000492  0E02               	movlw	2
  4974  000494  26DE               	addwf	postinc2,f,c
  4975  000496  CFDF F093          	movff	indf2,??__doprnt+1
  4976  00049A  0E00               	movlw	0
  4977  00049C  22DD               	addwfc	postdec2,f,c
  4978  00049E  C092  FFD9         	movff	??__doprnt,fsr2l
  4979  0004A2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4980  0004A6  CFDE F09C          	movff	postinc2,__doprnt@val
  4981  0004AA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  4982                           
  4983                           ; BSR set to: 0
  4984                           ;doprnt.c: 1261: if((int)val < 0) {
  4985  0004AE  0100               	movlb	0	; () banked
  4986  0004B0  AF9D               	btfss	(__doprnt@val+1)& (0+255),7,b
  4987  0004B2  D060               	goto	l6959
  4988                           
  4989                           ; BSR set to: 0
  4990                           ;doprnt.c: 1262: flag |= 0x03;
  4991  0004B4  0E03               	movlw	3
  4992  0004B6  0100               	movlb	0	; () banked
  4993  0004B8  139E               	iorwf	__doprnt@flag& (0+255),f,b
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;doprnt.c: 1263: val = -val;
  4997  0004BA  0100               	movlb	0	; () banked
  4998  0004BC  6D9C               	negf	__doprnt@val& (0+255),b
  4999  0004BE  1F9D               	comf	(__doprnt@val+1)& (0+255),f,b
  5000  0004C0  B0D8               	btfsc	status,0,c
  5001  0004C2  2B9D               	incf	(__doprnt@val+1)& (0+255),f,b
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;doprnt.c: 1264: }
  5005                           ;doprnt.c: 1266: }
  5006  0004C4  D057               	goto	l6959
  5007  0004C6                     l6927:
  5008                           
  5009                           ; BSR set to: 0
  5010                           ;doprnt.c: 1268: else
  5011                           ;doprnt.c: 1273: {
  5012                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5013  0004C6  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5014  0004CA  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5015  0004CE  CFDF F092          	movff	indf2,??__doprnt
  5016  0004D2  0E02               	movlw	2
  5017  0004D4  26DE               	addwf	postinc2,f,c
  5018  0004D6  CFDF F093          	movff	indf2,??__doprnt+1
  5019  0004DA  0E00               	movlw	0
  5020  0004DC  22DD               	addwfc	postdec2,f,c
  5021  0004DE  C092  FFD9         	movff	??__doprnt,fsr2l
  5022  0004E2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5023  0004E6  CFDE F09C          	movff	postinc2,__doprnt@val
  5024  0004EA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;doprnt.c: 1287: }
  5028                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5029  0004EE  D042               	goto	l6959
  5030  0004F0                     l6929:
  5031                           
  5032                           ; BSR set to: 0
  5033                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5034  0004F0  0E01               	movlw	1
  5035  0004F2  0100               	movlb	0	; () banked
  5036  0004F4  6FA1               	movwf	__doprnt@c& (0+255),b
  5037  0004F6                     l6931:
  5038                           
  5039                           ; BSR set to: 0
  5040  0004F6  0E05               	movlw	5
  5041  0004F8  0100               	movlb	0	; () banked
  5042  0004FA  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5043  0004FC  B4D8               	btfsc	status,2,c
  5044  0004FE  D043               	goto	l6961
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;doprnt.c: 1306: if(val < dpowers[c])
  5048                           
  5049                           ; BSR set to: 0
  5050                           
  5051                           ; BSR set to: 0
  5052  000500  0100               	movlb	0	; () banked
  5053  000502  51A1               	movf	__doprnt@c& (0+255),w,b
  5054  000504  0D02               	mullw	2
  5055  000506  0EE6               	movlw	low _dpowers
  5056  000508  24F3               	addwf	prodl,w,c
  5057  00050A  6EF6               	movwf	tblptrl,c
  5058  00050C  0EFE               	movlw	high _dpowers
  5059  00050E  20F4               	addwfc	prodh,w,c
  5060  000510  6EF7               	movwf	tblptrh,c
  5061  000512                     	if	1	;There are 3 active tblptr bytes
  5062  000512  6AF8               	clrf	tblptru,c
  5063  000514  0E00               	movlw	low (__mediumconst shr (0+16))
  5064  000516  22F8               	addwfc	tblptru,f,c
  5065  000518                     	endif
  5066  000518  0009               	tblrd		*+
  5067  00051A  50F5               	movf	tablat,w,c
  5068  00051C  0100               	movlb	0	; () banked
  5069  00051E  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5070  000520  0009               	tblrd		*+
  5071  000522  50F5               	movf	tablat,w,c
  5072  000524  0100               	movlb	0	; () banked
  5073  000526  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5074  000528  A0D8               	btfss	status,0,c
  5075  00052A  D02D               	goto	l6961
  5076                           
  5077                           ; BSR set to: 0
  5078                           
  5079                           ; BSR set to: 0
  5080                           
  5081                           ; BSR set to: 0
  5082                           ;doprnt.c: 1307: break;
  5083  00052C  0100               	movlb	0	; () banked
  5084  00052E  2BA1               	incf	__doprnt@c& (0+255),f,b
  5085  000530  D7E2               	goto	l6931
  5086  000532                     l6943:
  5087                           
  5088                           ; BSR set to: 0
  5089                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5090  000532  0E01               	movlw	1
  5091  000534  0100               	movlb	0	; () banked
  5092  000536  6FA1               	movwf	__doprnt@c& (0+255),b
  5093  000538                     l6945:
  5094                           
  5095                           ; BSR set to: 0
  5096  000538  0E04               	movlw	4
  5097  00053A  0100               	movlb	0	; () banked
  5098  00053C  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5099  00053E  B4D8               	btfsc	status,2,c
  5100  000540  D022               	goto	l6961
  5101                           
  5102                           ; BSR set to: 0
  5103                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5104                           
  5105                           ; BSR set to: 0
  5106                           
  5107                           ; BSR set to: 0
  5108  000542  0100               	movlb	0	; () banked
  5109  000544  51A1               	movf	__doprnt@c& (0+255),w,b
  5110  000546  0D02               	mullw	2
  5111  000548  0EF0               	movlw	low _hexpowers
  5112  00054A  24F3               	addwf	prodl,w,c
  5113  00054C  6EF6               	movwf	tblptrl,c
  5114  00054E  0EFE               	movlw	high _hexpowers
  5115  000550  20F4               	addwfc	prodh,w,c
  5116  000552  6EF7               	movwf	tblptrh,c
  5117  000554                     	if	1	;There are 3 active tblptr bytes
  5118  000554  6AF8               	clrf	tblptru,c
  5119  000556  0E00               	movlw	low (__mediumconst shr (0+16))
  5120  000558  22F8               	addwfc	tblptru,f,c
  5121  00055A                     	endif
  5122  00055A  0009               	tblrd		*+
  5123  00055C  50F5               	movf	tablat,w,c
  5124  00055E  0100               	movlb	0	; () banked
  5125  000560  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5126  000562  0009               	tblrd		*+
  5127  000564  50F5               	movf	tablat,w,c
  5128  000566  0100               	movlb	0	; () banked
  5129  000568  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5130  00056A  A0D8               	btfss	status,0,c
  5131  00056C  D00C               	goto	l6961
  5132                           
  5133                           ; BSR set to: 0
  5134                           
  5135                           ; BSR set to: 0
  5136                           
  5137                           ; BSR set to: 0
  5138                           ;doprnt.c: 1318: break;
  5139  00056E  0100               	movlb	0	; () banked
  5140  000570  2BA1               	incf	__doprnt@c& (0+255),f,b
  5141  000572  D7E2               	goto	l6945
  5142  000574                     l6959:
  5143                           
  5144                           ; BSR set to: 0
  5145  000574  0100               	movlb	0	; () banked
  5146  000576  519E               	movf	__doprnt@flag& (0+255),w,b
  5147  000578  0B80               	andlw	128
  5148                           
  5149                           ; Switch size 1, requested type "space"
  5150                           ; Number of cases is 2, Range of values is 0 to 128
  5151                           ; switch strategies available:
  5152                           ; Name         Instructions Cycles
  5153                           ; simple_byte            7     4 (average)
  5154                           ;	Chosen strategy is simple_byte
  5155  00057A  0A00               	xorlw	0	; case 0
  5156  00057C  B4D8               	btfsc	status,2,c
  5157  00057E  D7B8               	goto	l6929
  5158  000580  0A80               	xorlw	128	; case 128
  5159  000582  B4D8               	btfsc	status,2,c
  5160  000584  D7D6               	goto	l6943
  5161  000586                     l6961:
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5165  000586  0100               	movlb	0	; () banked
  5166  000588  519F               	movf	__doprnt@width& (0+255),w,b
  5167  00058A  0100               	movlb	0	; () banked
  5168  00058C  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5169  00058E  B4D8               	btfsc	status,2,c
  5170  000590  D00B               	goto	l6967
  5171                           
  5172                           ; BSR set to: 0
  5173  000592  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5174  000596  0E03               	movlw	3
  5175  000598  0100               	movlb	0	; () banked
  5176  00059A  1792               	andwf	??__doprnt& (0+255),f,b
  5177  00059C  B4D8               	btfsc	status,2,c
  5178  00059E  D004               	goto	l6967
  5179                           
  5180                           ; BSR set to: 0
  5181                           ;doprnt.c: 1346: width--;
  5182  0005A0  0100               	movlb	0	; () banked
  5183  0005A2  079F               	decf	__doprnt@width& (0+255),f,b
  5184  0005A4  A0D8               	btfss	status,0,c
  5185  0005A6  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5186  0005A8                     l6967:
  5187                           
  5188                           ; BSR set to: 0
  5189                           ;doprnt.c: 1381: if(width > c)
  5190  0005A8  0E80               	movlw	128
  5191  0005AA  0100               	movlb	0	; () banked
  5192  0005AC  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  5193  0005AE  0E7F               	movlw	127
  5194  0005B0  0100               	movlb	0	; () banked
  5195  0005B2  6F92               	movwf	??__doprnt& (0+255),b
  5196  0005B4  0100               	movlb	0	; () banked
  5197  0005B6  519F               	movf	__doprnt@width& (0+255),w,b
  5198  0005B8  0100               	movlb	0	; () banked
  5199  0005BA  5DA1               	subwf	__doprnt@c& (0+255),w,b
  5200  0005BC  0100               	movlb	0	; () banked
  5201  0005BE  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  5202  0005C0  0A80               	xorlw	128
  5203  0005C2  0100               	movlb	0	; () banked
  5204  0005C4  5992               	subwfb	??__doprnt& (0+255),w,b
  5205  0005C6  B0D8               	btfsc	status,0,c
  5206  0005C8  D00B               	goto	l6971
  5207                           
  5208                           ; BSR set to: 0
  5209                           ;doprnt.c: 1382: width -= c;
  5210  0005CA  0100               	movlb	0	; () banked
  5211  0005CC  51A1               	movf	__doprnt@c& (0+255),w,b
  5212  0005CE  0100               	movlb	0	; () banked
  5213  0005D0  5F9F               	subwf	__doprnt@width& (0+255),f,b
  5214  0005D2  0E00               	movlw	0
  5215  0005D4  0100               	movlb	0	; () banked
  5216  0005D6  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  5217  0005D8  0EFF               	movlw	255
  5218  0005DA  0100               	movlb	0	; () banked
  5219  0005DC  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5220  0005DE  D005               	goto	l6973
  5221  0005E0                     l6971:
  5222                           
  5223                           ; BSR set to: 0
  5224                           ;doprnt.c: 1383: else
  5225                           ;doprnt.c: 1384: width = 0;
  5226  0005E0  0E00               	movlw	0
  5227  0005E2  0100               	movlb	0	; () banked
  5228  0005E4  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5229  0005E6  0E00               	movlw	0
  5230  0005E8  6F9F               	movwf	__doprnt@width& (0+255),b
  5231  0005EA                     l6973:
  5232                           
  5233                           ; BSR set to: 0
  5234                           ;doprnt.c: 1387: if(flag & 0x04) {
  5235  0005EA  0100               	movlb	0	; () banked
  5236  0005EC  A59E               	btfss	__doprnt@flag& (0+255),2,b
  5237  0005EE  D082               	goto	l6997
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;doprnt.c: 1392: if(flag & 0x03)
  5241  0005F0  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5242  0005F4  0E03               	movlw	3
  5243  0005F6  0100               	movlb	0	; () banked
  5244  0005F8  1792               	andwf	??__doprnt& (0+255),f,b
  5245  0005FA  B4D8               	btfsc	status,2,c
  5246  0005FC  D038               	goto	l6985
  5247                           
  5248                           ; BSR set to: 0
  5249                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5250  0005FE  0100               	movlb	0	; () banked
  5251  000600  EE20 F002          	lfsr	2,2
  5252  000604  518C               	movf	__doprnt@pb& (0+255),w,b
  5253  000606  26D9               	addwf	fsr2l,f,c
  5254  000608  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5255  00060A  22DA               	addwfc	fsr2h,f,c
  5256  00060C  50DE               	movf	postinc2,w,c
  5257  00060E  10DE               	iorwf	postinc2,w,c
  5258  000610  B4D8               	btfsc	status,2,c
  5259  000612  D018               	goto	l6981
  5260                           
  5261                           ; BSR set to: 0
  5262  000614  0100               	movlb	0	; () banked
  5263  000616  EE20 F002          	lfsr	2,2
  5264  00061A  518C               	movf	__doprnt@pb& (0+255),w,b
  5265  00061C  26D9               	addwf	fsr2l,f,c
  5266  00061E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5267  000620  22DA               	addwfc	fsr2h,f,c
  5268  000622  CFDE F092          	movff	postinc2,??__doprnt
  5269  000626  CFDD F093          	movff	postdec2,??__doprnt+1
  5270  00062A  D801               	call	u10408
  5271  00062C  D020               	goto	l6985
  5272  00062E                     u10408:
  5273  00062E  0005               	push	
  5274  000630  6EFA               	movwf	pclath,c
  5275  000632  0100               	movlb	0	; () banked
  5276  000634  5192               	movf	??__doprnt& (0+255),w,b
  5277  000636  6EFD               	movwf	tosl,c
  5278  000638  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5279  00063A  6EFE               	movwf	tosh,c
  5280  00063C  6AFF               	clrf	tosu,c
  5281  00063E  50FA               	movf	pclath,w,c
  5282  000640  0E2D               	movlw	45
  5283  000642  0012               	return		;indir
  5284  000644                     l6981:
  5285  000644  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5286  000648  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5287  00064C  CFDE F092          	movff	postinc2,??__doprnt
  5288  000650  CFDD F093          	movff	postdec2,??__doprnt+1
  5289  000654  C092  FFD9         	movff	??__doprnt,fsr2l
  5290  000658  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5291  00065C  0E2D               	movlw	45
  5292  00065E  6EDF               	movwf	indf2,c
  5293  000660  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5294  000664  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5295  000668  2ADE               	incf	postinc2,f,c
  5296  00066A  0E00               	movlw	0
  5297  00066C  22DD               	addwfc	postdec2,f,c
  5298  00066E                     l6985:
  5299                           
  5300                           ;doprnt.c: 1415: if(width)
  5301  00066E  0100               	movlb	0	; () banked
  5302  000670  519F               	movf	__doprnt@width& (0+255),w,b
  5303  000672  0100               	movlb	0	; () banked
  5304  000674  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5305  000676  B4D8               	btfsc	status,2,c
  5306  000678  D0C4               	goto	l7019
  5307                           
  5308                           ; BSR set to: 0
  5309                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  5310                           
  5311                           ; BSR set to: 0
  5312                           
  5313                           ;doprnt.c: 1416: do
  5314  00067A  0100               	movlb	0	; () banked
  5315  00067C  EE20 F002          	lfsr	2,2
  5316  000680  518C               	movf	__doprnt@pb& (0+255),w,b
  5317  000682  26D9               	addwf	fsr2l,f,c
  5318  000684  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5319  000686  22DA               	addwfc	fsr2h,f,c
  5320  000688  50DE               	movf	postinc2,w,c
  5321  00068A  10DE               	iorwf	postinc2,w,c
  5322  00068C  B4D8               	btfsc	status,2,c
  5323  00068E  D018               	goto	l6991
  5324                           
  5325                           ; BSR set to: 0
  5326  000690  0100               	movlb	0	; () banked
  5327  000692  EE20 F002          	lfsr	2,2
  5328  000696  518C               	movf	__doprnt@pb& (0+255),w,b
  5329  000698  26D9               	addwf	fsr2l,f,c
  5330  00069A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5331  00069C  22DA               	addwfc	fsr2h,f,c
  5332  00069E  CFDE F092          	movff	postinc2,??__doprnt
  5333  0006A2  CFDD F093          	movff	postdec2,??__doprnt+1
  5334  0006A6  D801               	call	u10438
  5335  0006A8  D020               	goto	l6995
  5336  0006AA                     u10438:
  5337  0006AA  0005               	push	
  5338  0006AC  6EFA               	movwf	pclath,c
  5339  0006AE  0100               	movlb	0	; () banked
  5340  0006B0  5192               	movf	??__doprnt& (0+255),w,b
  5341  0006B2  6EFD               	movwf	tosl,c
  5342  0006B4  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5343  0006B6  6EFE               	movwf	tosh,c
  5344  0006B8  6AFF               	clrf	tosu,c
  5345  0006BA  50FA               	movf	pclath,w,c
  5346  0006BC  0E30               	movlw	48
  5347  0006BE  0012               	return		;indir
  5348  0006C0                     l6991:
  5349  0006C0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5350  0006C4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5351  0006C8  CFDE F092          	movff	postinc2,??__doprnt
  5352  0006CC  CFDD F093          	movff	postdec2,??__doprnt+1
  5353  0006D0  C092  FFD9         	movff	??__doprnt,fsr2l
  5354  0006D4  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5355  0006D8  0E30               	movlw	48
  5356  0006DA  6EDF               	movwf	indf2,c
  5357  0006DC  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5358  0006E0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5359  0006E4  2ADE               	incf	postinc2,f,c
  5360  0006E6  0E00               	movlw	0
  5361  0006E8  22DD               	addwfc	postdec2,f,c
  5362  0006EA                     l6995:
  5363                           
  5364                           ;doprnt.c: 1418: while(--width);
  5365  0006EA  0100               	movlb	0	; () banked
  5366  0006EC  079F               	decf	__doprnt@width& (0+255),f,b
  5367  0006EE  A0D8               	btfss	status,0,c
  5368  0006F0  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5369  0006F2  D7BD               	goto	l6985
  5370  0006F4                     l6997:
  5371                           
  5372                           ; BSR set to: 0
  5373                           ;doprnt.c: 1422: {
  5374                           ;doprnt.c: 1424: if(width
  5375                           ;doprnt.c: 1428: )
  5376  0006F4  0100               	movlb	0	; () banked
  5377  0006F6  519F               	movf	__doprnt@width& (0+255),w,b
  5378  0006F8  0100               	movlb	0	; () banked
  5379  0006FA  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5380  0006FC  B4D8               	btfsc	status,2,c
  5381  0006FE  D042               	goto	l7009
  5382  000700                     l6999:
  5383                           
  5384                           ; BSR set to: 0
  5385                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5386  000700  0100               	movlb	0	; () banked
  5387  000702  EE20 F002          	lfsr	2,2
  5388  000706  518C               	movf	__doprnt@pb& (0+255),w,b
  5389  000708  26D9               	addwf	fsr2l,f,c
  5390  00070A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5391  00070C  22DA               	addwfc	fsr2h,f,c
  5392  00070E  50DE               	movf	postinc2,w,c
  5393  000710  10DE               	iorwf	postinc2,w,c
  5394  000712  B4D8               	btfsc	status,2,c
  5395  000714  D018               	goto	l7003
  5396                           
  5397                           ; BSR set to: 0
  5398  000716  0100               	movlb	0	; () banked
  5399  000718  EE20 F002          	lfsr	2,2
  5400  00071C  518C               	movf	__doprnt@pb& (0+255),w,b
  5401  00071E  26D9               	addwf	fsr2l,f,c
  5402  000720  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5403  000722  22DA               	addwfc	fsr2h,f,c
  5404  000724  CFDE F092          	movff	postinc2,??__doprnt
  5405  000728  CFDD F093          	movff	postdec2,??__doprnt+1
  5406  00072C  D801               	call	u10478
  5407  00072E  D020               	goto	l7007
  5408  000730                     u10478:
  5409  000730  0005               	push	
  5410  000732  6EFA               	movwf	pclath,c
  5411  000734  0100               	movlb	0	; () banked
  5412  000736  5192               	movf	??__doprnt& (0+255),w,b
  5413  000738  6EFD               	movwf	tosl,c
  5414  00073A  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5415  00073C  6EFE               	movwf	tosh,c
  5416  00073E  6AFF               	clrf	tosu,c
  5417  000740  50FA               	movf	pclath,w,c
  5418  000742  0E20               	movlw	32
  5419  000744  0012               	return		;indir
  5420  000746                     l7003:
  5421  000746  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5422  00074A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5423  00074E  CFDE F092          	movff	postinc2,??__doprnt
  5424  000752  CFDD F093          	movff	postdec2,??__doprnt+1
  5425  000756  C092  FFD9         	movff	??__doprnt,fsr2l
  5426  00075A  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5427  00075E  0E20               	movlw	32
  5428  000760  6EDF               	movwf	indf2,c
  5429  000762  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5430  000766  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5431  00076A  2ADE               	incf	postinc2,f,c
  5432  00076C  0E00               	movlw	0
  5433  00076E  22DD               	addwfc	postdec2,f,c
  5434  000770                     l7007:
  5435                           
  5436                           ;doprnt.c: 1431: while(--width);
  5437  000770  0100               	movlb	0	; () banked
  5438  000772  079F               	decf	__doprnt@width& (0+255),f,b
  5439  000774  A0D8               	btfss	status,0,c
  5440  000776  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5441  000778  0100               	movlb	0	; () banked
  5442  00077A  519F               	movf	__doprnt@width& (0+255),w,b
  5443  00077C  0100               	movlb	0	; () banked
  5444  00077E  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5445  000780  A4D8               	btfss	status,2,c
  5446  000782  D7BE               	goto	l6999
  5447  000784                     l7009:
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;doprnt.c: 1438: if(flag & 0x03)
  5451  000784  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5452  000788  0E03               	movlw	3
  5453  00078A  0100               	movlb	0	; () banked
  5454  00078C  1792               	andwf	??__doprnt& (0+255),f,b
  5455  00078E  B4D8               	btfsc	status,2,c
  5456  000790  D038               	goto	l7019
  5457                           
  5458                           ; BSR set to: 0
  5459                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5460  000792  0100               	movlb	0	; () banked
  5461  000794  EE20 F002          	lfsr	2,2
  5462  000798  518C               	movf	__doprnt@pb& (0+255),w,b
  5463  00079A  26D9               	addwf	fsr2l,f,c
  5464  00079C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5465  00079E  22DA               	addwfc	fsr2h,f,c
  5466  0007A0  50DE               	movf	postinc2,w,c
  5467  0007A2  10DE               	iorwf	postinc2,w,c
  5468  0007A4  B4D8               	btfsc	status,2,c
  5469  0007A6  D018               	goto	l7015
  5470                           
  5471                           ; BSR set to: 0
  5472  0007A8  0100               	movlb	0	; () banked
  5473  0007AA  EE20 F002          	lfsr	2,2
  5474  0007AE  518C               	movf	__doprnt@pb& (0+255),w,b
  5475  0007B0  26D9               	addwf	fsr2l,f,c
  5476  0007B2  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5477  0007B4  22DA               	addwfc	fsr2h,f,c
  5478  0007B6  CFDE F092          	movff	postinc2,??__doprnt
  5479  0007BA  CFDD F093          	movff	postdec2,??__doprnt+1
  5480  0007BE  D801               	call	u10518
  5481  0007C0  D020               	goto	l7019
  5482  0007C2                     u10518:
  5483  0007C2  0005               	push	
  5484  0007C4  6EFA               	movwf	pclath,c
  5485  0007C6  0100               	movlb	0	; () banked
  5486  0007C8  5192               	movf	??__doprnt& (0+255),w,b
  5487  0007CA  6EFD               	movwf	tosl,c
  5488  0007CC  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5489  0007CE  6EFE               	movwf	tosh,c
  5490  0007D0  6AFF               	clrf	tosu,c
  5491  0007D2  50FA               	movf	pclath,w,c
  5492  0007D4  0E2D               	movlw	45
  5493  0007D6  0012               	return		;indir
  5494  0007D8                     l7015:
  5495  0007D8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5496  0007DC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5497  0007E0  CFDE F092          	movff	postinc2,??__doprnt
  5498  0007E4  CFDD F093          	movff	postdec2,??__doprnt+1
  5499  0007E8  C092  FFD9         	movff	??__doprnt,fsr2l
  5500  0007EC  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5501  0007F0  0E2D               	movlw	45
  5502  0007F2  6EDF               	movwf	indf2,c
  5503  0007F4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5504  0007F8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5505  0007FC  2ADE               	incf	postinc2,f,c
  5506  0007FE  0E00               	movlw	0
  5507  000800  22DD               	addwfc	postdec2,f,c
  5508  000802                     l7019:
  5509                           
  5510                           ;doprnt.c: 1469: }
  5511                           ;doprnt.c: 1472: prec = c;
  5512  000802  C0A1  F097         	movff	__doprnt@c,__doprnt@prec
  5513                           
  5514                           ;doprnt.c: 1474: while(prec--) {
  5515  000806  D098               	goto	l7039
  5516  000808                     l7021:
  5517                           
  5518                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5519  000808  0100               	movlb	0	; () banked
  5520  00080A  5197               	movf	__doprnt@prec& (0+255),w,b
  5521  00080C  0D02               	mullw	2
  5522  00080E  0EE6               	movlw	low _dpowers
  5523  000810  24F3               	addwf	prodl,w,c
  5524  000812  6EF6               	movwf	tblptrl,c
  5525  000814  0EFE               	movlw	high _dpowers
  5526  000816  20F4               	addwfc	prodh,w,c
  5527  000818  6EF7               	movwf	tblptrh,c
  5528  00081A                     	if	1	;There are 3 active tblptr bytes
  5529  00081A  6AF8               	clrf	tblptru,c
  5530  00081C  0E00               	movlw	low (__mediumconst shr (0+16))
  5531  00081E  22F8               	addwfc	tblptru,f,c
  5532  000820                     	endif
  5533  000820  0009               	tblrd		*+
  5534  000822  CFF5 F082          	movff	tablat,___lwdiv@divisor
  5535  000826  000A               	tblrd		*-
  5536  000828  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  5537  00082C  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  5538  000830  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  5539  000834  EC33  F014         	call	___lwdiv
  5540  000838  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  5541  00083C  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  5542  000840  0E00               	movlw	0
  5543  000842  0100               	movlb	0	; () banked
  5544  000844  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  5545  000846  0E0A               	movlw	10
  5546  000848  6F89               	movwf	___lwmod@divisor& (0+255),b
  5547  00084A  EC0F  F015         	call	___lwmod	;wreg free
  5548  00084E  0100               	movlb	0	; () banked
  5549  000850  5187               	movf	?___lwmod& (0+255),w,b
  5550  000852  0F30               	addlw	48
  5551  000854  0100               	movlb	0	; () banked
  5552  000856  6FA1               	movwf	__doprnt@c& (0+255),b
  5553                           
  5554                           ;doprnt.c: 1491: break;
  5555  000858  D036               	goto	l7031
  5556  00085A                     l7023:
  5557                           
  5558                           ; BSR set to: 0
  5559                           ;doprnt.c: 1499: {
  5560                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5561  00085A  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  5562  00085E  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  5563  000862  0100               	movlb	0	; () banked
  5564  000864  5197               	movf	__doprnt@prec& (0+255),w,b
  5565  000866  0D02               	mullw	2
  5566  000868  0EF0               	movlw	low _hexpowers
  5567  00086A  24F3               	addwf	prodl,w,c
  5568  00086C  6EF6               	movwf	tblptrl,c
  5569  00086E  0EFE               	movlw	high _hexpowers
  5570  000870  20F4               	addwfc	prodh,w,c
  5571  000872  6EF7               	movwf	tblptrh,c
  5572  000874                     	if	1	;There are 3 active tblptr bytes
  5573  000874  6AF8               	clrf	tblptru,c
  5574  000876  0E00               	movlw	low (__mediumconst shr (0+16))
  5575  000878  22F8               	addwfc	tblptru,f,c
  5576  00087A                     	endif
  5577  00087A  0009               	tblrd		*+
  5578  00087C  CFF5 F082          	movff	tablat,___lwdiv@divisor
  5579  000880  000A               	tblrd		*-
  5580  000882  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  5581  000886  EC33  F014         	call	___lwdiv	;wreg free
  5582  00088A  0100               	movlb	0	; () banked
  5583  00088C  5180               	movf	?___lwdiv& (0+255),w,b
  5584  00088E  0B0F               	andlw	15
  5585  000890  0100               	movlb	0	; () banked
  5586  000892  6F96               	movwf	__doprnt@idx& (0+255),b
  5587                           
  5588                           ; BSR set to: 0
  5589                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5590  000894  0100               	movlb	0	; () banked
  5591  000896  5196               	movf	__doprnt@idx& (0+255),w,b
  5592  000898  0D01               	mullw	1
  5593  00089A  0E97               	movlw	low STR_19
  5594  00089C  24F3               	addwf	prodl,w,c
  5595  00089E  6EF6               	movwf	tblptrl,c
  5596  0008A0  0EFF               	movlw	high STR_19
  5597  0008A2  20F4               	addwfc	prodh,w,c
  5598  0008A4  6EF7               	movwf	tblptrh,c
  5599  0008A6                     	if	1	;There are 3 active tblptr bytes
  5600  0008A6  6AF8               	clrf	tblptru,c
  5601  0008A8  0E00               	movlw	low (__mediumconst shr (0+16))
  5602  0008AA  22F8               	addwfc	tblptru,f,c
  5603  0008AC                     	endif
  5604  0008AC  0008               	tblrd		*
  5605  0008AE  CFF5 F0A1          	movff	tablat,__doprnt@c
  5606                           
  5607                           ; BSR set to: 0
  5608                           ;doprnt.c: 1523: }
  5609                           
  5610                           ;doprnt.c: 1508: }
  5611                           ;doprnt.c: 1510: break;
  5612  0008B2  D009               	goto	l7031
  5613  0008B4                     l7029:
  5614  0008B4  0100               	movlb	0	; () banked
  5615  0008B6  519E               	movf	__doprnt@flag& (0+255),w,b
  5616  0008B8  0B80               	andlw	128
  5617                           
  5618                           ; Switch size 1, requested type "space"
  5619                           ; Number of cases is 2, Range of values is 0 to 128
  5620                           ; switch strategies available:
  5621                           ; Name         Instructions Cycles
  5622                           ; simple_byte            7     4 (average)
  5623                           ;	Chosen strategy is simple_byte
  5624  0008BA  0A00               	xorlw	0	; case 0
  5625  0008BC  B4D8               	btfsc	status,2,c
  5626  0008BE  D7A4               	goto	l7021
  5627  0008C0  0A80               	xorlw	128	; case 128
  5628  0008C2  B4D8               	btfsc	status,2,c
  5629  0008C4  D7CA               	goto	l7023
  5630  0008C6                     l7031:
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  5634  0008C6  0100               	movlb	0	; () banked
  5635  0008C8  EE20 F002          	lfsr	2,2
  5636  0008CC  518C               	movf	__doprnt@pb& (0+255),w,b
  5637  0008CE  26D9               	addwf	fsr2l,f,c
  5638  0008D0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5639  0008D2  22DA               	addwfc	fsr2h,f,c
  5640  0008D4  50DE               	movf	postinc2,w,c
  5641  0008D6  10DE               	iorwf	postinc2,w,c
  5642  0008D8  B4D8               	btfsc	status,2,c
  5643  0008DA  D019               	goto	l7035
  5644                           
  5645                           ; BSR set to: 0
  5646  0008DC  0100               	movlb	0	; () banked
  5647  0008DE  EE20 F002          	lfsr	2,2
  5648  0008E2  518C               	movf	__doprnt@pb& (0+255),w,b
  5649  0008E4  26D9               	addwf	fsr2l,f,c
  5650  0008E6  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5651  0008E8  22DA               	addwfc	fsr2h,f,c
  5652  0008EA  CFDE F092          	movff	postinc2,??__doprnt
  5653  0008EE  CFDD F093          	movff	postdec2,??__doprnt+1
  5654  0008F2  D801               	call	u10538
  5655  0008F4  D021               	goto	l7039
  5656  0008F6                     u10538:
  5657  0008F6  0005               	push	
  5658  0008F8  6EFA               	movwf	pclath,c
  5659  0008FA  0100               	movlb	0	; () banked
  5660  0008FC  5192               	movf	??__doprnt& (0+255),w,b
  5661  0008FE  6EFD               	movwf	tosl,c
  5662  000900  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5663  000902  6EFE               	movwf	tosh,c
  5664  000904  6AFF               	clrf	tosu,c
  5665  000906  50FA               	movf	pclath,w,c
  5666  000908  0100               	movlb	0	; () banked
  5667  00090A  51A1               	movf	__doprnt@c& (0+255),w,b
  5668  00090C  0012               	return		;indir
  5669  00090E                     l7035:
  5670  00090E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5671  000912  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5672  000916  CFDE F092          	movff	postinc2,??__doprnt
  5673  00091A  CFDD F093          	movff	postdec2,??__doprnt+1
  5674  00091E  C092  FFD9         	movff	??__doprnt,fsr2l
  5675  000922  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5676  000926  C0A1  FFDF         	movff	__doprnt@c,indf2
  5677  00092A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5678  00092E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5679  000932  2ADE               	incf	postinc2,f,c
  5680  000934  0E00               	movlw	0
  5681  000936  22DD               	addwfc	postdec2,f,c
  5682  000938                     l7039:
  5683  000938  0100               	movlb	0	; () banked
  5684  00093A  0797               	decf	__doprnt@prec& (0+255),f,b
  5685  00093C  0100               	movlb	0	; () banked
  5686  00093E  2997               	incf	__doprnt@prec& (0+255),w,b
  5687  000940  A4D8               	btfss	status,2,c
  5688  000942  D7B8               	goto	l7029
  5689  000944                     l7041:
  5690  000944  0100               	movlb	0	; () banked
  5691  000946  518E               	movf	__doprnt@f& (0+255),w,b
  5692  000948  0100               	movlb	0	; () banked
  5693  00094A  6F92               	movwf	??__doprnt& (0+255),b
  5694  00094C  0100               	movlb	0	; () banked
  5695  00094E  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  5696  000950  0100               	movlb	0	; () banked
  5697  000952  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5698  000954  0100               	movlb	0	; () banked
  5699  000956  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5700  000958  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5701  00095A  C092  FFF6         	movff	??__doprnt,tblptrl
  5702  00095E  C093  FFF7         	movff	??__doprnt+1,tblptrh
  5703  000962  0E00               	movlw	low (__mediumconst shr (0+16))
  5704  000964  6EF8               	movwf	tblptru,c
  5705  000966  0E0F               	movlw	(high __ramtop+-1)
  5706  000968  64F7               	cpfsgt	tblptrh,c
  5707  00096A  D003               	bra	u10557
  5708  00096C  0008               	tblrd		*
  5709  00096E  50F5               	movf	tablat,w,c
  5710  000970  D005               	bra	u10550
  5711  000972                     u10557:
  5712  000972  CFF6 FFE9          	movff	tblptrl,fsr0l
  5713  000976  CFF7 FFEA          	movff	tblptrh,fsr0h
  5714  00097A  50EF               	movf	indf0,w,c
  5715  00097C                     u10550:
  5716  00097C  0100               	movlb	0	; () banked
  5717  00097E  6FA1               	movwf	__doprnt@c& (0+255),b
  5718  000980  0100               	movlb	0	; () banked
  5719  000982  51A1               	movf	__doprnt@c& (0+255),w,b
  5720  000984  A4D8               	btfss	status,2,c
  5721  000986  EF0B  F000         	goto	l6835
  5722  00098A                     l7043:
  5723                           
  5724                           ;doprnt.c: 1540: return 0;
  5725  00098A  0E00               	movlw	0
  5726  00098C  0100               	movlb	0	; () banked
  5727  00098E  6F8D               	movwf	(?__doprnt+1)& (0+255),b
  5728  000990  0E00               	movlw	0
  5729  000992  6F8C               	movwf	?__doprnt& (0+255),b
  5730  000994  0012               	return	
  5731  000996                     __end_of__doprnt:
  5732                           	opt stack 0
  5733                           tosu	equ	0xFFF
  5734                           tosh	equ	0xFFE
  5735                           tosl	equ	0xFFD
  5736                           pclath	equ	0xFFA
  5737                           tblptru	equ	0xFF8
  5738                           tblptrh	equ	0xFF7
  5739                           tblptrl	equ	0xFF6
  5740                           tablat	equ	0xFF5
  5741                           prodh	equ	0xFF4
  5742                           prodl	equ	0xFF3
  5743                           intcon	equ	0xFF2
  5744                           intcon2	equ	0xFF1
  5745                           intcon3	equ	0xFF0
  5746                           indf0	equ	0xFEF
  5747                           postinc0	equ	0xFEE
  5748                           fsr0h	equ	0xFEA
  5749                           fsr0l	equ	0xFE9
  5750                           wreg	equ	0xFE8
  5751                           indf1	equ	0xFE7
  5752                           postinc1	equ	0xFE6
  5753                           postdec1	equ	0xFE5
  5754                           fsr1h	equ	0xFE2
  5755                           fsr1l	equ	0xFE1
  5756                           indf2	equ	0xFDF
  5757                           postinc2	equ	0xFDE
  5758                           postdec2	equ	0xFDD
  5759                           fsr2h	equ	0xFDA
  5760                           fsr2l	equ	0xFD9
  5761                           status	equ	0xFD8
  5762                           
  5763 ;; *************** function _putch *****************
  5764 ;; Defined at:
  5765 ;;		line 30 in file "lcd.c"
  5766 ;; Parameters:    Size  Location     Type
  5767 ;;  data            1    wreg     unsigned char 
  5768 ;; Auto vars:     Size  Location     Type
  5769 ;;  data            1    2[BANK0 ] unsigned char 
  5770 ;; Return value:  Size  Location     Type
  5771 ;;                  1    wreg      void 
  5772 ;; Registers used:
  5773 ;;		wreg, status,2, status,0, cstack
  5774 ;; Tracked objects:
  5775 ;;		On entry : 0/0
  5776 ;;		On exit  : 0/0
  5777 ;;		Unchanged: 0/0
  5778 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5780 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5781 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5782 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5783 ;;Total ram usage:        1 bytes
  5784 ;; Hardware stack levels used:    1
  5785 ;; Hardware stack levels required when called:    6
  5786 ;; This function calls:
  5787 ;;		_lcdNibble
  5788 ;; This function is called by:
  5789 ;;		_printf
  5790 ;;		__doprnt
  5791 ;;		i2__doprnt
  5792 ;; This function uses a non-reentrant model
  5793 ;;
  5794                           
  5795                           	psect	text10
  5796  002EFC                     __ptext10:
  5797                           	opt stack 0
  5798  002EFC                     _putch:
  5799                           	opt stack 0
  5800                           
  5801                           ; BSR set to: 0
  5802                           ;Skip over the trampoline to the duplicate function for level 2
  5803  002EFC  B277               	btfsc	btemp,1,c
  5804  002EFE  EFA4  F017         	goto	i2_putch
  5805  002F02                     _putch$intlevel0:
  5806                           	opt stack 21
  5807                           
  5808                           ;incstack = 0
  5809                           ;putch@data stored from wreg
  5810  002F02  0100               	movlb	0	; () banked
  5811  002F04  6F82               	movwf	putch@data& (0+255),b
  5812                           
  5813                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  5814  002F06  848C               	bsf	3980,2,c	;volatile
  5815                           
  5816                           ;lcd.c: 32: lcdNibble(data);
  5817  002F08  0100               	movlb	0	; () banked
  5818  002F0A  5182               	movf	putch@data& (0+255),w,b
  5819  002F0C  ECDB  F014         	call	_lcdNibble
  5820  002F10  0012               	return		;funcret
  5821  002F12                     __end_of_putch:
  5822                           	opt stack 0
  5823                           tosu	equ	0xFFF
  5824                           tosh	equ	0xFFE
  5825                           tosl	equ	0xFFD
  5826                           pclath	equ	0xFFA
  5827                           tblptru	equ	0xFF8
  5828                           tblptrh	equ	0xFF7
  5829                           tblptrl	equ	0xFF6
  5830                           tablat	equ	0xFF5
  5831                           prodh	equ	0xFF4
  5832                           prodl	equ	0xFF3
  5833                           intcon	equ	0xFF2
  5834                           intcon2	equ	0xFF1
  5835                           intcon3	equ	0xFF0
  5836                           indf0	equ	0xFEF
  5837                           postinc0	equ	0xFEE
  5838                           fsr0h	equ	0xFEA
  5839                           fsr0l	equ	0xFE9
  5840                           wreg	equ	0xFE8
  5841                           indf1	equ	0xFE7
  5842                           postinc1	equ	0xFE6
  5843                           postdec1	equ	0xFE5
  5844                           fsr1h	equ	0xFE2
  5845                           fsr1l	equ	0xFE1
  5846                           indf2	equ	0xFDF
  5847                           postinc2	equ	0xFDE
  5848                           postdec2	equ	0xFDD
  5849                           fsr2h	equ	0xFDA
  5850                           fsr2l	equ	0xFD9
  5851                           status	equ	0xFD8
  5852                           
  5853 ;; *************** function _isdigit *****************
  5854 ;; Defined at:
  5855 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;  c               1    wreg     unsigned char 
  5858 ;; Auto vars:     Size  Location     Type
  5859 ;;  c               1    2[BANK0 ] unsigned char 
  5860 ;; Return value:  Size  Location     Type
  5861 ;;		None               void
  5862 ;; Registers used:
  5863 ;;		wreg, status,2, status,0
  5864 ;; Tracked objects:
  5865 ;;		On entry : 0/0
  5866 ;;		On exit  : 0/0
  5867 ;;		Unchanged: 0/0
  5868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5870 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5871 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5872 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5873 ;;Total ram usage:        3 bytes
  5874 ;; Hardware stack levels used:    1
  5875 ;; Hardware stack levels required when called:    5
  5876 ;; This function calls:
  5877 ;;		Nothing
  5878 ;; This function is called by:
  5879 ;;		__doprnt
  5880 ;; This function uses a non-reentrant model
  5881 ;;
  5882                           
  5883                           	psect	text11
  5884  002E8E                     __ptext11:
  5885                           	opt stack 0
  5886  002E8E                     _isdigit:
  5887                           	opt stack 22
  5888                           
  5889                           ;incstack = 0
  5890                           ;isdigit@c stored from wreg
  5891  002E8E  0100               	movlb	0	; () banked
  5892  002E90  6F82               	movwf	isdigit@c& (0+255),b
  5893  002E92  0E00               	movlw	0
  5894  002E94  0100               	movlb	0	; () banked
  5895  002E96  6F81               	movwf	_isdigit$698& (0+255),b
  5896                           
  5897                           ; BSR set to: 0
  5898  002E98  0E3A               	movlw	58
  5899  002E9A  0100               	movlb	0	; () banked
  5900  002E9C  6182               	cpfslt	isdigit@c& (0+255),b
  5901  002E9E  D007               	goto	l3931
  5902                           
  5903                           ; BSR set to: 0
  5904  002EA0  0E2F               	movlw	47
  5905  002EA2  0100               	movlb	0	; () banked
  5906  002EA4  6582               	cpfsgt	isdigit@c& (0+255),b
  5907  002EA6  D003               	goto	l3931
  5908                           
  5909                           ; BSR set to: 0
  5910  002EA8  0E01               	movlw	1
  5911  002EAA  0100               	movlb	0	; () banked
  5912  002EAC  6F81               	movwf	_isdigit$698& (0+255),b
  5913  002EAE                     l3931:
  5914                           
  5915                           ; BSR set to: 0
  5916  002EAE  C081  F080         	movff	_isdigit$698,??_isdigit
  5917  002EB2  0100               	movlb	0	; () banked
  5918  002EB4  3180               	rrcf	??_isdigit& (0+255),w,b
  5919  002EB6  0012               	return	
  5920  002EB8                     __end_of_isdigit:
  5921                           	opt stack 0
  5922                           tosu	equ	0xFFF
  5923                           tosh	equ	0xFFE
  5924                           tosl	equ	0xFFD
  5925                           pclath	equ	0xFFA
  5926                           tblptru	equ	0xFF8
  5927                           tblptrh	equ	0xFF7
  5928                           tblptrl	equ	0xFF6
  5929                           tablat	equ	0xFF5
  5930                           prodh	equ	0xFF4
  5931                           prodl	equ	0xFF3
  5932                           intcon	equ	0xFF2
  5933                           intcon2	equ	0xFF1
  5934                           intcon3	equ	0xFF0
  5935                           indf0	equ	0xFEF
  5936                           postinc0	equ	0xFEE
  5937                           fsr0h	equ	0xFEA
  5938                           fsr0l	equ	0xFE9
  5939                           wreg	equ	0xFE8
  5940                           indf1	equ	0xFE7
  5941                           postinc1	equ	0xFE6
  5942                           postdec1	equ	0xFE5
  5943                           fsr1h	equ	0xFE2
  5944                           fsr1l	equ	0xFE1
  5945                           indf2	equ	0xFDF
  5946                           postinc2	equ	0xFDE
  5947                           postdec2	equ	0xFDD
  5948                           fsr2h	equ	0xFDA
  5949                           fsr2l	equ	0xFD9
  5950                           status	equ	0xFD8
  5951                           
  5952 ;; *************** function ___lwmod *****************
  5953 ;; Defined at:
  5954 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  5955 ;; Parameters:    Size  Location     Type
  5956 ;;  dividend        2    7[BANK0 ] unsigned int 
  5957 ;;  divisor         2    9[BANK0 ] unsigned int 
  5958 ;; Auto vars:     Size  Location     Type
  5959 ;;  counter         1   11[BANK0 ] unsigned char 
  5960 ;; Return value:  Size  Location     Type
  5961 ;;                  2    7[BANK0 ] unsigned int 
  5962 ;; Registers used:
  5963 ;;		wreg, status,2, status,0
  5964 ;; Tracked objects:
  5965 ;;		On entry : 0/0
  5966 ;;		On exit  : 0/0
  5967 ;;		Unchanged: 0/0
  5968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5969 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5972 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5973 ;;Total ram usage:        5 bytes
  5974 ;; Hardware stack levels used:    1
  5975 ;; Hardware stack levels required when called:    5
  5976 ;; This function calls:
  5977 ;;		Nothing
  5978 ;; This function is called by:
  5979 ;;		__doprnt
  5980 ;; This function uses a non-reentrant model
  5981 ;;
  5982                           
  5983                           	psect	text12
  5984  002A1E                     __ptext12:
  5985                           	opt stack 0
  5986  002A1E                     ___lwmod:
  5987                           	opt stack 22
  5988                           
  5989                           ; BSR set to: 0
  5990                           ;incstack = 0
  5991  002A1E  0100               	movlb	0	; () banked
  5992  002A20  5189               	movf	___lwmod@divisor& (0+255),w,b
  5993  002A22  0100               	movlb	0	; () banked
  5994  002A24  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5995  002A26  B4D8               	btfsc	status,2,c
  5996  002A28  D026               	goto	l928
  5997                           
  5998                           ; BSR set to: 0
  5999  002A2A  0E01               	movlw	1
  6000  002A2C  0100               	movlb	0	; () banked
  6001  002A2E  6F8B               	movwf	___lwmod@counter& (0+255),b
  6002  002A30  D006               	goto	l3969
  6003  002A32                     l3967:
  6004                           
  6005                           ; BSR set to: 0
  6006  002A32  0100               	movlb	0	; () banked
  6007  002A34  90D8               	bcf	status,0,c
  6008  002A36  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  6009  002A38  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6010  002A3A  0100               	movlb	0	; () banked
  6011  002A3C  2B8B               	incf	___lwmod@counter& (0+255),f,b
  6012  002A3E                     l3969:
  6013                           
  6014                           ; BSR set to: 0
  6015  002A3E  0100               	movlb	0	; () banked
  6016  002A40  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6017  002A42  D7F7               	goto	l3967
  6018  002A44                     l3971:
  6019                           
  6020                           ; BSR set to: 0
  6021  002A44  0100               	movlb	0	; () banked
  6022  002A46  5189               	movf	___lwmod@divisor& (0+255),w,b
  6023  002A48  0100               	movlb	0	; () banked
  6024  002A4A  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  6025  002A4C  0100               	movlb	0	; () banked
  6026  002A4E  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6027  002A50  0100               	movlb	0	; () banked
  6028  002A52  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6029  002A54  A0D8               	btfss	status,0,c
  6030  002A56  D008               	goto	l3975
  6031                           
  6032                           ; BSR set to: 0
  6033  002A58  0100               	movlb	0	; () banked
  6034  002A5A  5189               	movf	___lwmod@divisor& (0+255),w,b
  6035  002A5C  0100               	movlb	0	; () banked
  6036  002A5E  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  6037  002A60  0100               	movlb	0	; () banked
  6038  002A62  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6039  002A64  0100               	movlb	0	; () banked
  6040  002A66  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6041  002A68                     l3975:
  6042                           
  6043                           ; BSR set to: 0
  6044  002A68  0100               	movlb	0	; () banked
  6045  002A6A  90D8               	bcf	status,0,c
  6046  002A6C  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6047  002A6E  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  6048                           
  6049                           ; BSR set to: 0
  6050  002A70  0100               	movlb	0	; () banked
  6051  002A72  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  6052  002A74  D7E7               	goto	l3971
  6053  002A76                     l928:
  6054                           
  6055                           ; BSR set to: 0
  6056  002A76  C087  F087         	movff	___lwmod@dividend,?___lwmod
  6057  002A7A  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  6058                           
  6059                           ; BSR set to: 0
  6060  002A7E  0012               	return		;funcret
  6061  002A80                     __end_of___lwmod:
  6062                           	opt stack 0
  6063                           tosu	equ	0xFFF
  6064                           tosh	equ	0xFFE
  6065                           tosl	equ	0xFFD
  6066                           pclath	equ	0xFFA
  6067                           tblptru	equ	0xFF8
  6068                           tblptrh	equ	0xFF7
  6069                           tblptrl	equ	0xFF6
  6070                           tablat	equ	0xFF5
  6071                           prodh	equ	0xFF4
  6072                           prodl	equ	0xFF3
  6073                           intcon	equ	0xFF2
  6074                           intcon2	equ	0xFF1
  6075                           intcon3	equ	0xFF0
  6076                           indf0	equ	0xFEF
  6077                           postinc0	equ	0xFEE
  6078                           fsr0h	equ	0xFEA
  6079                           fsr0l	equ	0xFE9
  6080                           wreg	equ	0xFE8
  6081                           indf1	equ	0xFE7
  6082                           postinc1	equ	0xFE6
  6083                           postdec1	equ	0xFE5
  6084                           fsr1h	equ	0xFE2
  6085                           fsr1l	equ	0xFE1
  6086                           indf2	equ	0xFDF
  6087                           postinc2	equ	0xFDE
  6088                           postdec2	equ	0xFDD
  6089                           fsr2h	equ	0xFDA
  6090                           fsr2l	equ	0xFD9
  6091                           status	equ	0xFD8
  6092                           
  6093 ;; *************** function ___lwdiv *****************
  6094 ;; Defined at:
  6095 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6096 ;; Parameters:    Size  Location     Type
  6097 ;;  dividend        2    0[BANK0 ] unsigned int 
  6098 ;;  divisor         2    2[BANK0 ] unsigned int 
  6099 ;; Auto vars:     Size  Location     Type
  6100 ;;  quotient        2    5[BANK0 ] unsigned int 
  6101 ;;  counter         1    4[BANK0 ] unsigned char 
  6102 ;; Return value:  Size  Location     Type
  6103 ;;                  2    0[BANK0 ] unsigned int 
  6104 ;; Registers used:
  6105 ;;		wreg, status,2, status,0
  6106 ;; Tracked objects:
  6107 ;;		On entry : 0/0
  6108 ;;		On exit  : 0/0
  6109 ;;		Unchanged: 0/0
  6110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6111 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6114 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6115 ;;Total ram usage:        7 bytes
  6116 ;; Hardware stack levels used:    1
  6117 ;; Hardware stack levels required when called:    5
  6118 ;; This function calls:
  6119 ;;		Nothing
  6120 ;; This function is called by:
  6121 ;;		__doprnt
  6122 ;; This function uses a non-reentrant model
  6123 ;;
  6124                           
  6125                           	psect	text13
  6126  002866                     __ptext13:
  6127                           	opt stack 0
  6128  002866                     ___lwdiv:
  6129                           	opt stack 22
  6130                           
  6131                           ; BSR set to: 0
  6132                           ;incstack = 0
  6133  002866  0E00               	movlw	0
  6134  002868  0100               	movlb	0	; () banked
  6135  00286A  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6136  00286C  0E00               	movlw	0
  6137  00286E  6F85               	movwf	___lwdiv@quotient& (0+255),b
  6138                           
  6139                           ; BSR set to: 0
  6140  002870  0100               	movlb	0	; () banked
  6141  002872  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6142  002874  0100               	movlb	0	; () banked
  6143  002876  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6144  002878  B4D8               	btfsc	status,2,c
  6145  00287A  D02C               	goto	l918
  6146                           
  6147                           ; BSR set to: 0
  6148  00287C  0E01               	movlw	1
  6149  00287E  0100               	movlb	0	; () banked
  6150  002880  6F84               	movwf	___lwdiv@counter& (0+255),b
  6151  002882  D006               	goto	l3949
  6152  002884                     l3947:
  6153                           
  6154                           ; BSR set to: 0
  6155  002884  0100               	movlb	0	; () banked
  6156  002886  90D8               	bcf	status,0,c
  6157  002888  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  6158  00288A  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6159  00288C  0100               	movlb	0	; () banked
  6160  00288E  2B84               	incf	___lwdiv@counter& (0+255),f,b
  6161  002890                     l3949:
  6162                           
  6163                           ; BSR set to: 0
  6164  002890  0100               	movlb	0	; () banked
  6165  002892  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6166  002894  D7F7               	goto	l3947
  6167  002896                     l3951:
  6168                           
  6169                           ; BSR set to: 0
  6170  002896  0100               	movlb	0	; () banked
  6171  002898  90D8               	bcf	status,0,c
  6172  00289A  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  6173  00289C  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6174                           
  6175                           ; BSR set to: 0
  6176  00289E  0100               	movlb	0	; () banked
  6177  0028A0  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6178  0028A2  0100               	movlb	0	; () banked
  6179  0028A4  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  6180  0028A6  0100               	movlb	0	; () banked
  6181  0028A8  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6182  0028AA  0100               	movlb	0	; () banked
  6183  0028AC  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6184  0028AE  A0D8               	btfss	status,0,c
  6185  0028B0  D00A               	goto	l3959
  6186                           
  6187                           ; BSR set to: 0
  6188  0028B2  0100               	movlb	0	; () banked
  6189  0028B4  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6190  0028B6  0100               	movlb	0	; () banked
  6191  0028B8  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  6192  0028BA  0100               	movlb	0	; () banked
  6193  0028BC  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6194  0028BE  0100               	movlb	0	; () banked
  6195  0028C0  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6196                           
  6197                           ; BSR set to: 0
  6198  0028C2  0100               	movlb	0	; () banked
  6199  0028C4  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  6200  0028C6                     l3959:
  6201                           
  6202                           ; BSR set to: 0
  6203  0028C6  0100               	movlb	0	; () banked
  6204  0028C8  90D8               	bcf	status,0,c
  6205  0028CA  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6206  0028CC  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  6207                           
  6208                           ; BSR set to: 0
  6209  0028CE  0100               	movlb	0	; () banked
  6210  0028D0  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  6211  0028D2  D7E1               	goto	l3951
  6212  0028D4                     l918:
  6213                           
  6214                           ; BSR set to: 0
  6215  0028D4  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  6216  0028D8  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6217                           
  6218                           ; BSR set to: 0
  6219  0028DC  0012               	return		;funcret
  6220  0028DE                     __end_of___lwdiv:
  6221                           	opt stack 0
  6222                           tosu	equ	0xFFF
  6223                           tosh	equ	0xFFE
  6224                           tosl	equ	0xFFD
  6225                           pclath	equ	0xFFA
  6226                           tblptru	equ	0xFF8
  6227                           tblptrh	equ	0xFF7
  6228                           tblptrl	equ	0xFF6
  6229                           tablat	equ	0xFF5
  6230                           prodh	equ	0xFF4
  6231                           prodl	equ	0xFF3
  6232                           intcon	equ	0xFF2
  6233                           intcon2	equ	0xFF1
  6234                           intcon3	equ	0xFF0
  6235                           indf0	equ	0xFEF
  6236                           postinc0	equ	0xFEE
  6237                           fsr0h	equ	0xFEA
  6238                           fsr0l	equ	0xFE9
  6239                           wreg	equ	0xFE8
  6240                           indf1	equ	0xFE7
  6241                           postinc1	equ	0xFE6
  6242                           postdec1	equ	0xFE5
  6243                           fsr1h	equ	0xFE2
  6244                           fsr1l	equ	0xFE1
  6245                           indf2	equ	0xFDF
  6246                           postinc2	equ	0xFDE
  6247                           postdec2	equ	0xFDD
  6248                           fsr2h	equ	0xFDA
  6249                           fsr2l	equ	0xFD9
  6250                           status	equ	0xFD8
  6251                           
  6252 ;; *************** function ___awmod *****************
  6253 ;; Defined at:
  6254 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  6255 ;; Parameters:    Size  Location     Type
  6256 ;;  dividend        2    0[BANK0 ] int 
  6257 ;;  divisor         2    2[BANK0 ] int 
  6258 ;; Auto vars:     Size  Location     Type
  6259 ;;  sign            1    5[BANK0 ] unsigned char 
  6260 ;;  counter         1    4[BANK0 ] unsigned char 
  6261 ;; Return value:  Size  Location     Type
  6262 ;;                  2    0[BANK0 ] int 
  6263 ;; Registers used:
  6264 ;;		wreg, status,2, status,0
  6265 ;; Tracked objects:
  6266 ;;		On entry : 0/0
  6267 ;;		On exit  : 0/0
  6268 ;;		Unchanged: 0/0
  6269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6270 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6271 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6272 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6273 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6274 ;;Total ram usage:        6 bytes
  6275 ;; Hardware stack levels used:    1
  6276 ;; Hardware stack levels required when called:    5
  6277 ;; This function calls:
  6278 ;;		Nothing
  6279 ;; This function is called by:
  6280 ;;		_update_display
  6281 ;;		_update_state
  6282 ;; This function uses a non-reentrant model
  6283 ;;
  6284                           
  6285                           	psect	text14
  6286  002732                     __ptext14:
  6287                           	opt stack 0
  6288  002732                     ___awmod:
  6289                           	opt stack 24
  6290                           
  6291                           ; BSR set to: 0
  6292                           ;incstack = 0
  6293  002732  0E00               	movlw	0
  6294  002734  0100               	movlb	0	; () banked
  6295  002736  6F85               	movwf	___awmod@sign& (0+255),b
  6296                           
  6297                           ; BSR set to: 0
  6298  002738  0100               	movlb	0	; () banked
  6299  00273A  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6300  00273C  D008               	goto	l4371
  6301                           
  6302                           ; BSR set to: 0
  6303  00273E  0100               	movlb	0	; () banked
  6304  002740  6D80               	negf	___awmod@dividend& (0+255),b
  6305  002742  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6306  002744  B0D8               	btfsc	status,0,c
  6307  002746  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6308                           
  6309                           ; BSR set to: 0
  6310  002748  0E01               	movlw	1
  6311  00274A  0100               	movlb	0	; () banked
  6312  00274C  6F85               	movwf	___awmod@sign& (0+255),b
  6313  00274E                     l4371:
  6314                           
  6315                           ; BSR set to: 0
  6316  00274E  0100               	movlb	0	; () banked
  6317  002750  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6318  002752  D005               	goto	l4375
  6319                           
  6320                           ; BSR set to: 0
  6321  002754  0100               	movlb	0	; () banked
  6322  002756  6D82               	negf	___awmod@divisor& (0+255),b
  6323  002758  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  6324  00275A  B0D8               	btfsc	status,0,c
  6325  00275C  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  6326  00275E                     l4375:
  6327                           
  6328                           ; BSR set to: 0
  6329  00275E  0100               	movlb	0	; () banked
  6330  002760  5182               	movf	___awmod@divisor& (0+255),w,b
  6331  002762  0100               	movlb	0	; () banked
  6332  002764  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6333  002766  B4D8               	btfsc	status,2,c
  6334  002768  D026               	goto	l4391
  6335                           
  6336                           ; BSR set to: 0
  6337  00276A  0E01               	movlw	1
  6338  00276C  0100               	movlb	0	; () banked
  6339  00276E  6F84               	movwf	___awmod@counter& (0+255),b
  6340  002770  D006               	goto	l4381
  6341  002772                     l4379:
  6342                           
  6343                           ; BSR set to: 0
  6344  002772  0100               	movlb	0	; () banked
  6345  002774  90D8               	bcf	status,0,c
  6346  002776  3782               	rlcf	___awmod@divisor& (0+255),f,b
  6347  002778  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6348  00277A  0100               	movlb	0	; () banked
  6349  00277C  2B84               	incf	___awmod@counter& (0+255),f,b
  6350  00277E                     l4381:
  6351                           
  6352                           ; BSR set to: 0
  6353  00277E  0100               	movlb	0	; () banked
  6354  002780  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6355  002782  D7F7               	goto	l4379
  6356  002784                     l4383:
  6357                           
  6358                           ; BSR set to: 0
  6359  002784  0100               	movlb	0	; () banked
  6360  002786  5182               	movf	___awmod@divisor& (0+255),w,b
  6361  002788  0100               	movlb	0	; () banked
  6362  00278A  5D80               	subwf	___awmod@dividend& (0+255),w,b
  6363  00278C  0100               	movlb	0	; () banked
  6364  00278E  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6365  002790  0100               	movlb	0	; () banked
  6366  002792  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6367  002794  A0D8               	btfss	status,0,c
  6368  002796  D008               	goto	l4387
  6369                           
  6370                           ; BSR set to: 0
  6371  002798  0100               	movlb	0	; () banked
  6372  00279A  5182               	movf	___awmod@divisor& (0+255),w,b
  6373  00279C  0100               	movlb	0	; () banked
  6374  00279E  5F80               	subwf	___awmod@dividend& (0+255),f,b
  6375  0027A0  0100               	movlb	0	; () banked
  6376  0027A2  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6377  0027A4  0100               	movlb	0	; () banked
  6378  0027A6  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6379  0027A8                     l4387:
  6380                           
  6381                           ; BSR set to: 0
  6382  0027A8  0100               	movlb	0	; () banked
  6383  0027AA  90D8               	bcf	status,0,c
  6384  0027AC  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6385  0027AE  3382               	rrcf	___awmod@divisor& (0+255),f,b
  6386                           
  6387                           ; BSR set to: 0
  6388  0027B0  0100               	movlb	0	; () banked
  6389  0027B2  2F84               	decfsz	___awmod@counter& (0+255),f,b
  6390  0027B4  D7E7               	goto	l4383
  6391  0027B6                     l4391:
  6392                           
  6393                           ; BSR set to: 0
  6394  0027B6  0100               	movlb	0	; () banked
  6395  0027B8  5185               	movf	___awmod@sign& (0+255),w,b
  6396  0027BA  0100               	movlb	0	; () banked
  6397  0027BC  B4D8               	btfsc	status,2,c
  6398  0027BE  D005               	goto	l4395
  6399                           
  6400                           ; BSR set to: 0
  6401  0027C0  0100               	movlb	0	; () banked
  6402  0027C2  6D80               	negf	___awmod@dividend& (0+255),b
  6403  0027C4  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6404  0027C6  B0D8               	btfsc	status,0,c
  6405  0027C8  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6406  0027CA                     l4395:
  6407                           
  6408                           ; BSR set to: 0
  6409  0027CA  C080  F080         	movff	___awmod@dividend,?___awmod
  6410  0027CE  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  6411  0027D2  0012               	return	
  6412  0027D4                     __end_of___awmod:
  6413                           	opt stack 0
  6414                           tosu	equ	0xFFF
  6415                           tosh	equ	0xFFE
  6416                           tosl	equ	0xFFD
  6417                           pclath	equ	0xFFA
  6418                           tblptru	equ	0xFF8
  6419                           tblptrh	equ	0xFF7
  6420                           tblptrl	equ	0xFF6
  6421                           tablat	equ	0xFF5
  6422                           prodh	equ	0xFF4
  6423                           prodl	equ	0xFF3
  6424                           intcon	equ	0xFF2
  6425                           intcon2	equ	0xFF1
  6426                           intcon3	equ	0xFF0
  6427                           indf0	equ	0xFEF
  6428                           postinc0	equ	0xFEE
  6429                           fsr0h	equ	0xFEA
  6430                           fsr0l	equ	0xFE9
  6431                           wreg	equ	0xFE8
  6432                           indf1	equ	0xFE7
  6433                           postinc1	equ	0xFE6
  6434                           postdec1	equ	0xFE5
  6435                           fsr1h	equ	0xFE2
  6436                           fsr1l	equ	0xFE1
  6437                           indf2	equ	0xFDF
  6438                           postinc2	equ	0xFDE
  6439                           postdec2	equ	0xFDD
  6440                           fsr2h	equ	0xFDA
  6441                           fsr2l	equ	0xFD9
  6442                           status	equ	0xFD8
  6443                           
  6444 ;; *************** function ___awdiv *****************
  6445 ;; Defined at:
  6446 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6447 ;; Parameters:    Size  Location     Type
  6448 ;;  dividend        2    0[BANK0 ] int 
  6449 ;;  divisor         2    2[BANK0 ] int 
  6450 ;; Auto vars:     Size  Location     Type
  6451 ;;  quotient        2    6[BANK0 ] int 
  6452 ;;  sign            1    5[BANK0 ] unsigned char 
  6453 ;;  counter         1    4[BANK0 ] unsigned char 
  6454 ;; Return value:  Size  Location     Type
  6455 ;;                  2    0[BANK0 ] int 
  6456 ;; Registers used:
  6457 ;;		wreg, status,2, status,0
  6458 ;; Tracked objects:
  6459 ;;		On entry : 0/0
  6460 ;;		On exit  : 0/0
  6461 ;;		Unchanged: 0/0
  6462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6463 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6464 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6466 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6467 ;;Total ram usage:        8 bytes
  6468 ;; Hardware stack levels used:    1
  6469 ;; Hardware stack levels required when called:    5
  6470 ;; This function calls:
  6471 ;;		Nothing
  6472 ;; This function is called by:
  6473 ;;		_update_display
  6474 ;;		_update_state
  6475 ;; This function uses a non-reentrant model
  6476 ;;
  6477                           
  6478                           	psect	text15
  6479  0025B8                     __ptext15:
  6480                           	opt stack 0
  6481  0025B8                     ___awdiv:
  6482                           	opt stack 24
  6483                           
  6484                           ; BSR set to: 0
  6485                           ;incstack = 0
  6486  0025B8  0E00               	movlw	0
  6487  0025BA  0100               	movlb	0	; () banked
  6488  0025BC  6F85               	movwf	___awdiv@sign& (0+255),b
  6489                           
  6490                           ; BSR set to: 0
  6491  0025BE  0100               	movlb	0	; () banked
  6492  0025C0  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6493  0025C2  D008               	goto	l4327
  6494                           
  6495                           ; BSR set to: 0
  6496  0025C4  0100               	movlb	0	; () banked
  6497  0025C6  6D82               	negf	___awdiv@divisor& (0+255),b
  6498  0025C8  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6499  0025CA  B0D8               	btfsc	status,0,c
  6500  0025CC  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6501                           
  6502                           ; BSR set to: 0
  6503  0025CE  0E01               	movlw	1
  6504  0025D0  0100               	movlb	0	; () banked
  6505  0025D2  6F85               	movwf	___awdiv@sign& (0+255),b
  6506  0025D4                     l4327:
  6507                           
  6508                           ; BSR set to: 0
  6509  0025D4  0100               	movlb	0	; () banked
  6510  0025D6  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6511  0025D8  D008               	goto	l4333
  6512                           
  6513                           ; BSR set to: 0
  6514  0025DA  0100               	movlb	0	; () banked
  6515  0025DC  6D80               	negf	___awdiv@dividend& (0+255),b
  6516  0025DE  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6517  0025E0  B0D8               	btfsc	status,0,c
  6518  0025E2  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6519                           
  6520                           ; BSR set to: 0
  6521  0025E4  0E01               	movlw	1
  6522  0025E6  0100               	movlb	0	; () banked
  6523  0025E8  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  6524  0025EA                     l4333:
  6525                           
  6526                           ; BSR set to: 0
  6527  0025EA  0E00               	movlw	0
  6528  0025EC  0100               	movlb	0	; () banked
  6529  0025EE  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  6530  0025F0  0E00               	movlw	0
  6531  0025F2  6F86               	movwf	___awdiv@quotient& (0+255),b
  6532                           
  6533                           ; BSR set to: 0
  6534  0025F4  0100               	movlb	0	; () banked
  6535  0025F6  5182               	movf	___awdiv@divisor& (0+255),w,b
  6536  0025F8  0100               	movlb	0	; () banked
  6537  0025FA  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6538  0025FC  B4D8               	btfsc	status,2,c
  6539  0025FE  D02C               	goto	l4355
  6540                           
  6541                           ; BSR set to: 0
  6542  002600  0E01               	movlw	1
  6543  002602  0100               	movlb	0	; () banked
  6544  002604  6F84               	movwf	___awdiv@counter& (0+255),b
  6545  002606  D006               	goto	l4341
  6546  002608                     l4339:
  6547                           
  6548                           ; BSR set to: 0
  6549  002608  0100               	movlb	0	; () banked
  6550  00260A  90D8               	bcf	status,0,c
  6551  00260C  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  6552  00260E  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6553  002610  0100               	movlb	0	; () banked
  6554  002612  2B84               	incf	___awdiv@counter& (0+255),f,b
  6555  002614                     l4341:
  6556                           
  6557                           ; BSR set to: 0
  6558  002614  0100               	movlb	0	; () banked
  6559  002616  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6560  002618  D7F7               	goto	l4339
  6561  00261A                     l4343:
  6562                           
  6563                           ; BSR set to: 0
  6564  00261A  0100               	movlb	0	; () banked
  6565  00261C  90D8               	bcf	status,0,c
  6566  00261E  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  6567  002620  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6568                           
  6569                           ; BSR set to: 0
  6570  002622  0100               	movlb	0	; () banked
  6571  002624  5182               	movf	___awdiv@divisor& (0+255),w,b
  6572  002626  0100               	movlb	0	; () banked
  6573  002628  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  6574  00262A  0100               	movlb	0	; () banked
  6575  00262C  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6576  00262E  0100               	movlb	0	; () banked
  6577  002630  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6578  002632  A0D8               	btfss	status,0,c
  6579  002634  D00A               	goto	l4351
  6580                           
  6581                           ; BSR set to: 0
  6582  002636  0100               	movlb	0	; () banked
  6583  002638  5182               	movf	___awdiv@divisor& (0+255),w,b
  6584  00263A  0100               	movlb	0	; () banked
  6585  00263C  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  6586  00263E  0100               	movlb	0	; () banked
  6587  002640  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6588  002642  0100               	movlb	0	; () banked
  6589  002644  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6590                           
  6591                           ; BSR set to: 0
  6592  002646  0100               	movlb	0	; () banked
  6593  002648  8186               	bsf	___awdiv@quotient& (0+255),0,b
  6594  00264A                     l4351:
  6595                           
  6596                           ; BSR set to: 0
  6597  00264A  0100               	movlb	0	; () banked
  6598  00264C  90D8               	bcf	status,0,c
  6599  00264E  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6600  002650  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  6601                           
  6602                           ; BSR set to: 0
  6603  002652  0100               	movlb	0	; () banked
  6604  002654  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  6605  002656  D7E1               	goto	l4343
  6606  002658                     l4355:
  6607                           
  6608                           ; BSR set to: 0
  6609  002658  0100               	movlb	0	; () banked
  6610  00265A  5185               	movf	___awdiv@sign& (0+255),w,b
  6611  00265C  0100               	movlb	0	; () banked
  6612  00265E  B4D8               	btfsc	status,2,c
  6613  002660  D005               	goto	l4359
  6614                           
  6615                           ; BSR set to: 0
  6616  002662  0100               	movlb	0	; () banked
  6617  002664  6D86               	negf	___awdiv@quotient& (0+255),b
  6618  002666  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6619  002668  B0D8               	btfsc	status,0,c
  6620  00266A  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6621  00266C                     l4359:
  6622                           
  6623                           ; BSR set to: 0
  6624  00266C  C086  F080         	movff	___awdiv@quotient,?___awdiv
  6625  002670  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  6626  002674  0012               	return	
  6627  002676                     __end_of___awdiv:
  6628                           	opt stack 0
  6629                           tosu	equ	0xFFF
  6630                           tosh	equ	0xFFE
  6631                           tosl	equ	0xFFD
  6632                           pclath	equ	0xFFA
  6633                           tblptru	equ	0xFF8
  6634                           tblptrh	equ	0xFF7
  6635                           tblptrl	equ	0xFF6
  6636                           tablat	equ	0xFF5
  6637                           prodh	equ	0xFF4
  6638                           prodl	equ	0xFF3
  6639                           intcon	equ	0xFF2
  6640                           intcon2	equ	0xFF1
  6641                           intcon3	equ	0xFF0
  6642                           indf0	equ	0xFEF
  6643                           postinc0	equ	0xFEE
  6644                           fsr0h	equ	0xFEA
  6645                           fsr0l	equ	0xFE9
  6646                           wreg	equ	0xFE8
  6647                           indf1	equ	0xFE7
  6648                           postinc1	equ	0xFE6
  6649                           postdec1	equ	0xFE5
  6650                           fsr1h	equ	0xFE2
  6651                           fsr1l	equ	0xFE1
  6652                           indf2	equ	0xFDF
  6653                           postinc2	equ	0xFDE
  6654                           postdec2	equ	0xFDD
  6655                           fsr2h	equ	0xFDA
  6656                           fsr2l	equ	0xFD9
  6657                           status	equ	0xFD8
  6658                           
  6659 ;; *************** function _update_RTC *****************
  6660 ;; Defined at:
  6661 ;;		line 159 in file "main.c"
  6662 ;; Parameters:    Size  Location     Type
  6663 ;;		None
  6664 ;; Auto vars:     Size  Location     Type
  6665 ;;  i               1   10[BANK0 ] unsigned char 
  6666 ;; Return value:  Size  Location     Type
  6667 ;;                  1    wreg      void 
  6668 ;; Registers used:
  6669 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6670 ;; Tracked objects:
  6671 ;;		On entry : 0/0
  6672 ;;		On exit  : 0/0
  6673 ;;		Unchanged: 0/0
  6674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6676 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6677 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6678 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6679 ;;Total ram usage:        5 bytes
  6680 ;; Hardware stack levels used:    1
  6681 ;; Hardware stack levels required when called:    7
  6682 ;; This function calls:
  6683 ;;		_I2C_Master_Read
  6684 ;;		_I2C_Master_Start
  6685 ;;		_I2C_Master_Stop
  6686 ;;		_I2C_Master_Write
  6687 ;;		___wmul
  6688 ;; This function is called by:
  6689 ;;		_main
  6690 ;; This function uses a non-reentrant model
  6691 ;;
  6692                           
  6693                           	psect	text16
  6694  0021DE                     __ptext16:
  6695                           	opt stack 0
  6696  0021DE                     _update_RTC:
  6697                           	opt stack 23
  6698                           
  6699                           ;main.c: 162: I2C_Master_Start();
  6700                           
  6701                           ; BSR set to: 0
  6702                           ;incstack = 0
  6703  0021DE  ECB9  F017         	call	_I2C_Master_Start	;wreg free
  6704                           
  6705                           ;main.c: 163: I2C_Master_Write(0b11010000);
  6706  0021E2  0E00               	movlw	0
  6707  0021E4  0100               	movlb	0	; () banked
  6708  0021E6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6709  0021E8  0ED0               	movlw	208
  6710  0021EA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6711  0021EC  ECB0  F017         	call	_I2C_Master_Write	;wreg free
  6712                           
  6713                           ;main.c: 164: I2C_Master_Write(0x00);
  6714  0021F0  0E00               	movlw	0
  6715  0021F2  0100               	movlb	0	; () banked
  6716  0021F4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6717  0021F6  0E00               	movlw	0
  6718  0021F8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6719  0021FA  ECB0  F017         	call	_I2C_Master_Write	;wreg free
  6720                           
  6721                           ;main.c: 165: I2C_Master_Stop();
  6722  0021FE  ECB5  F017         	call	_I2C_Master_Stop	;wreg free
  6723                           
  6724                           ;main.c: 168: I2C_Master_Start();
  6725  002202  ECB9  F017         	call	_I2C_Master_Start	;wreg free
  6726                           
  6727                           ;main.c: 169: I2C_Master_Write(0b11010001);
  6728  002206  0E00               	movlw	0
  6729  002208  0100               	movlb	0	; () banked
  6730  00220A  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6731  00220C  0ED1               	movlw	209
  6732  00220E  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6733  002210  ECB0  F017         	call	_I2C_Master_Write	;wreg free
  6734                           
  6735                           ;main.c: 170: for(unsigned char i=0;i<0x06;i++){
  6736  002214  0E00               	movlw	0
  6737  002216  0100               	movlb	0	; () banked
  6738  002218  6F8A               	movwf	update_RTC@i& (0+255),b
  6739  00221A                     l4677:
  6740                           
  6741                           ; BSR set to: 0
  6742  00221A  0E05               	movlw	5
  6743  00221C  0100               	movlb	0	; () banked
  6744  00221E  658A               	cpfsgt	update_RTC@i& (0+255),b
  6745  002220  D001               	goto	l4681
  6746  002222  D047               	goto	l4689
  6747  002224                     l4681:
  6748                           
  6749                           ; BSR set to: 0
  6750                           ;main.c: 171: time[i] = I2C_Master_Read(1);
  6751  002224  0100               	movlb	0	; () banked
  6752  002226  518A               	movf	update_RTC@i& (0+255),w,b
  6753  002228  0D01               	mullw	1
  6754  00222A  0ED2               	movlw	low _time
  6755  00222C  24F3               	addwf	prodl,w,c
  6756  00222E  6ED9               	movwf	fsr2l,c
  6757  002230  0E00               	movlw	high _time
  6758  002232  20F4               	addwfc	prodh,w,c
  6759  002234  6EDA               	movwf	fsr2h,c
  6760  002236  0E01               	movlw	1
  6761  002238  EC03  F017         	call	_I2C_Master_Read
  6762  00223C  6EDF               	movwf	indf2,c
  6763                           
  6764                           ;main.c: 172: time_i[i]=(time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  6765  00223E  0100               	movlb	0	; () banked
  6766  002240  518A               	movf	update_RTC@i& (0+255),w,b
  6767  002242  0D01               	mullw	1
  6768  002244  0ED2               	movlw	low _time
  6769  002246  24F3               	addwf	prodl,w,c
  6770  002248  6ED9               	movwf	fsr2l,c
  6771  00224A  0E00               	movlw	high _time
  6772  00224C  20F4               	addwfc	prodh,w,c
  6773  00224E  6EDA               	movwf	fsr2h,c
  6774  002250  50DF               	movf	indf2,w,c
  6775  002252  0B0F               	andlw	15
  6776  002254  0100               	movlb	0	; () banked
  6777  002256  6F86               	movwf	??_update_RTC& (0+255),b
  6778  002258  6B87               	clrf	(??_update_RTC+1)& (0+255),b
  6779  00225A  0100               	movlb	0	; () banked
  6780  00225C  518A               	movf	update_RTC@i& (0+255),w,b
  6781  00225E  0D01               	mullw	1
  6782  002260  0ED2               	movlw	low _time
  6783  002262  24F3               	addwf	prodl,w,c
  6784  002264  6ED9               	movwf	fsr2l,c
  6785  002266  0E00               	movlw	high _time
  6786  002268  20F4               	addwfc	prodh,w,c
  6787  00226A  6EDA               	movwf	fsr2h,c
  6788  00226C  50DF               	movf	indf2,w,c
  6789  00226E  0100               	movlb	0	; () banked
  6790  002270  6F88               	movwf	(??_update_RTC+2)& (0+255),b
  6791  002272  0100               	movlb	0	; () banked
  6792  002274  3B88               	swapf	(??_update_RTC+2)& (0+255),f,b
  6793  002276  0E0F               	movlw	15
  6794  002278  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  6795  00227A  0E0F               	movlw	15
  6796  00227C  0100               	movlb	0	; () banked
  6797  00227E  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  6798  002280  0100               	movlb	0	; () banked
  6799  002282  5188               	movf	(??_update_RTC+2)& (0+255),w,b
  6800  002284  0D0A               	mullw	10
  6801  002286  50F3               	movf	prodl,w,c
  6802  002288  0100               	movlb	0	; () banked
  6803  00228A  2786               	addwf	??_update_RTC& (0+255),f,b
  6804  00228C  50F4               	movf	prodh,w,c
  6805  00228E  0100               	movlb	0	; () banked
  6806  002290  2387               	addwfc	(??_update_RTC+1)& (0+255),f,b
  6807  002292  0100               	movlb	0	; () banked
  6808  002294  518A               	movf	update_RTC@i& (0+255),w,b
  6809  002296  0D02               	mullw	2
  6810  002298  0EBA               	movlw	low _time_i
  6811  00229A  24F3               	addwf	prodl,w,c
  6812  00229C  6ED9               	movwf	fsr2l,c
  6813  00229E  0E00               	movlw	high _time_i
  6814  0022A0  20F4               	addwfc	prodh,w,c
  6815  0022A2  6EDA               	movwf	fsr2h,c
  6816  0022A4  C086  FFDE         	movff	??_update_RTC,postinc2
  6817  0022A8  C087  FFDD         	movff	??_update_RTC+1,postdec2
  6818                           
  6819                           ; BSR set to: 0
  6820  0022AC  0100               	movlb	0	; () banked
  6821  0022AE  2B8A               	incf	update_RTC@i& (0+255),f,b
  6822  0022B0  D7B4               	goto	l4677
  6823  0022B2                     l4689:
  6824                           
  6825                           ; BSR set to: 0
  6826                           ;main.c: 173: }
  6827                           ;main.c: 174: timeDiff=time_i[1]*60-startTime[1]*60+time_i[0]-startTime[0];
  6828  0022B2  C04C  F086         	movff	_startTime,??_update_RTC
  6829  0022B6  C04D  F087         	movff	_startTime+1,??_update_RTC+1
  6830  0022BA  0100               	movlb	0	; () banked
  6831  0022BC  1F86               	comf	??_update_RTC& (0+255),f,b
  6832  0022BE  1F87               	comf	(??_update_RTC+1)& (0+255),f,b
  6833  0022C0  4B86               	infsnz	??_update_RTC& (0+255),f,b
  6834  0022C2  2B87               	incf	(??_update_RTC+1)& (0+255),f,b
  6835  0022C4  C0BC  F080         	movff	_time_i+2,___wmul@multiplier
  6836  0022C8  C0BD  F081         	movff	_time_i+3,___wmul@multiplier+1
  6837  0022CC  0E00               	movlw	0
  6838  0022CE  0100               	movlb	0	; () banked
  6839  0022D0  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6840  0022D2  0E3C               	movlw	60
  6841  0022D4  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6842  0022D6  ECB4  F016         	call	___wmul	;wreg free
  6843  0022DA  C080  F088         	movff	?___wmul,??_update_RTC+2
  6844  0022DE  C081  F089         	movff	?___wmul+1,??_update_RTC+3
  6845  0022E2  C04E  F080         	movff	_startTime+2,___wmul@multiplier
  6846  0022E6  C04F  F081         	movff	_startTime+3,___wmul@multiplier+1
  6847  0022EA  0E00               	movlw	0
  6848  0022EC  0100               	movlb	0	; () banked
  6849  0022EE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6850  0022F0  0E3C               	movlw	60
  6851  0022F2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6852  0022F4  ECB4  F016         	call	___wmul	;wreg free
  6853  0022F8  0100               	movlb	0	; () banked
  6854  0022FA  1F80               	comf	?___wmul& (0+255),f,b
  6855  0022FC  0100               	movlb	0	; () banked
  6856  0022FE  1F81               	comf	(?___wmul+1)& (0+255),f,b
  6857  002300  0100               	movlb	0	; () banked
  6858  002302  4B80               	infsnz	?___wmul& (0+255),f,b
  6859  002304  2B81               	incf	(?___wmul+1)& (0+255),f,b
  6860  002306  0100               	movlb	0	; () banked
  6861  002308  5180               	movf	?___wmul& (0+255),w,b
  6862  00230A  0100               	movlb	0	; () banked
  6863  00230C  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  6864  00230E  0100               	movlb	0	; () banked
  6865  002310  5181               	movf	(?___wmul+1)& (0+255),w,b
  6866  002312  0100               	movlb	0	; () banked
  6867  002314  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  6868  002316  0100               	movlb	0	; () banked
  6869  002318  5186               	movf	??_update_RTC& (0+255),w,b
  6870  00231A  0100               	movlb	0	; () banked
  6871  00231C  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  6872  00231E  0100               	movlb	0	; () banked
  6873  002320  5187               	movf	(??_update_RTC+1)& (0+255),w,b
  6874  002322  0100               	movlb	0	; () banked
  6875  002324  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  6876  002326  0100               	movlb	0	; () banked
  6877  002328  51BA               	movf	_time_i& (0+255),w,b
  6878  00232A  0100               	movlb	0	; () banked
  6879  00232C  2588               	addwf	(??_update_RTC+2)& (0+255),w,b
  6880  00232E  0100               	movlb	0	; () banked
  6881  002330  6FE1               	movwf	_timeDiff& (0+255),b
  6882  002332  0100               	movlb	0	; () banked
  6883  002334  51BB               	movf	(_time_i+1)& (0+255),w,b
  6884  002336  0100               	movlb	0	; () banked
  6885  002338  2189               	addwfc	(??_update_RTC+3)& (0+255),w,b
  6886  00233A  0100               	movlb	0	; () banked
  6887  00233C  6FE2               	movwf	(_timeDiff+1)& (0+255),b
  6888                           
  6889                           ; BSR set to: 0
  6890                           ;main.c: 175: time[6] = I2C_Master_Read(0);
  6891  00233E  0E00               	movlw	0
  6892  002340  EC03  F017         	call	_I2C_Master_Read
  6893  002344  0100               	movlb	0	; () banked
  6894  002346  6FD8               	movwf	(_time+6)& (0+255),b
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;main.c: 176: I2C_Master_Stop();
  6898  002348  ECB5  F017         	call	_I2C_Master_Stop	;wreg free
  6899  00234C  0012               	return		;funcret
  6900  00234E                     __end_of_update_RTC:
  6901                           	opt stack 0
  6902                           tosu	equ	0xFFF
  6903                           tosh	equ	0xFFE
  6904                           tosl	equ	0xFFD
  6905                           pclath	equ	0xFFA
  6906                           tblptru	equ	0xFF8
  6907                           tblptrh	equ	0xFF7
  6908                           tblptrl	equ	0xFF6
  6909                           tablat	equ	0xFF5
  6910                           prodh	equ	0xFF4
  6911                           prodl	equ	0xFF3
  6912                           intcon	equ	0xFF2
  6913                           intcon2	equ	0xFF1
  6914                           intcon3	equ	0xFF0
  6915                           indf0	equ	0xFEF
  6916                           postinc0	equ	0xFEE
  6917                           fsr0h	equ	0xFEA
  6918                           fsr0l	equ	0xFE9
  6919                           wreg	equ	0xFE8
  6920                           indf1	equ	0xFE7
  6921                           postinc1	equ	0xFE6
  6922                           postdec1	equ	0xFE5
  6923                           fsr1h	equ	0xFE2
  6924                           fsr1l	equ	0xFE1
  6925                           indf2	equ	0xFDF
  6926                           postinc2	equ	0xFDE
  6927                           postdec2	equ	0xFDD
  6928                           fsr2h	equ	0xFDA
  6929                           fsr2l	equ	0xFD9
  6930                           status	equ	0xFD8
  6931                           
  6932 ;; *************** function ___wmul *****************
  6933 ;; Defined at:
  6934 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  6935 ;; Parameters:    Size  Location     Type
  6936 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6937 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6938 ;; Auto vars:     Size  Location     Type
  6939 ;;  product         2    4[BANK0 ] unsigned int 
  6940 ;; Return value:  Size  Location     Type
  6941 ;;                  2    0[BANK0 ] unsigned int 
  6942 ;; Registers used:
  6943 ;;		wreg, status,2, status,0, prodl, prodh
  6944 ;; Tracked objects:
  6945 ;;		On entry : 0/0
  6946 ;;		On exit  : 0/0
  6947 ;;		Unchanged: 0/0
  6948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6949 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6950 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6952 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6953 ;;Total ram usage:        6 bytes
  6954 ;; Hardware stack levels used:    1
  6955 ;; Hardware stack levels required when called:    5
  6956 ;; This function calls:
  6957 ;;		Nothing
  6958 ;; This function is called by:
  6959 ;;		_update_RTC
  6960 ;;		_display_menu
  6961 ;;		__doprnt
  6962 ;;		_sort
  6963 ;; This function uses a non-reentrant model
  6964 ;;
  6965                           
  6966                           	psect	text17
  6967  002D68                     __ptext17:
  6968                           	opt stack 0
  6969  002D68                     ___wmul:
  6970                           	opt stack 22
  6971                           
  6972                           ;incstack = 0
  6973  002D68  0100               	movlb	0	; () banked
  6974  002D6A  5180               	movf	___wmul@multiplier& (0+255),w,b
  6975  002D6C  0100               	movlb	0	; () banked
  6976  002D6E  0382               	mulwf	___wmul@multiplicand& (0+255),b
  6977  002D70  CFF3 F084          	movff	prodl,___wmul@product
  6978  002D74  CFF4 F085          	movff	prodh,___wmul@product+1
  6979  002D78  0100               	movlb	0	; () banked
  6980  002D7A  5180               	movf	___wmul@multiplier& (0+255),w,b
  6981  002D7C  0100               	movlb	0	; () banked
  6982  002D7E  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6983  002D80  50F3               	movf	prodl,w,c
  6984  002D82  0100               	movlb	0	; () banked
  6985  002D84  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  6986  002D86  0100               	movlb	0	; () banked
  6987  002D88  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6988  002D8A  0100               	movlb	0	; () banked
  6989  002D8C  0382               	mulwf	___wmul@multiplicand& (0+255),b
  6990  002D8E  50F3               	movf	prodl,w,c
  6991  002D90  0100               	movlb	0	; () banked
  6992  002D92  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  6993                           
  6994                           ; BSR set to: 0
  6995  002D94  C084  F080         	movff	___wmul@product,?___wmul
  6996  002D98  C085  F081         	movff	___wmul@product+1,?___wmul+1
  6997  002D9C  0012               	return	
  6998  002D9E                     __end_of___wmul:
  6999                           	opt stack 0
  7000                           tosu	equ	0xFFF
  7001                           tosh	equ	0xFFE
  7002                           tosl	equ	0xFFD
  7003                           pclath	equ	0xFFA
  7004                           tblptru	equ	0xFF8
  7005                           tblptrh	equ	0xFF7
  7006                           tblptrl	equ	0xFF6
  7007                           tablat	equ	0xFF5
  7008                           prodh	equ	0xFF4
  7009                           prodl	equ	0xFF3
  7010                           intcon	equ	0xFF2
  7011                           intcon2	equ	0xFF1
  7012                           intcon3	equ	0xFF0
  7013                           indf0	equ	0xFEF
  7014                           postinc0	equ	0xFEE
  7015                           fsr0h	equ	0xFEA
  7016                           fsr0l	equ	0xFE9
  7017                           wreg	equ	0xFE8
  7018                           indf1	equ	0xFE7
  7019                           postinc1	equ	0xFE6
  7020                           postdec1	equ	0xFE5
  7021                           fsr1h	equ	0xFE2
  7022                           fsr1l	equ	0xFE1
  7023                           indf2	equ	0xFDF
  7024                           postinc2	equ	0xFDE
  7025                           postdec2	equ	0xFDD
  7026                           fsr2h	equ	0xFDA
  7027                           fsr2l	equ	0xFD9
  7028                           status	equ	0xFD8
  7029                           
  7030 ;; *************** function _I2C_Master_Read *****************
  7031 ;; Defined at:
  7032 ;;		line 53 in file "I2C.c"
  7033 ;; Parameters:    Size  Location     Type
  7034 ;;  a               1    wreg     unsigned char 
  7035 ;; Auto vars:     Size  Location     Type
  7036 ;;  a               1    1[BANK0 ] unsigned char 
  7037 ;;  temp            1    2[BANK0 ] unsigned char 
  7038 ;; Return value:  Size  Location     Type
  7039 ;;                  1    wreg      unsigned char 
  7040 ;; Registers used:
  7041 ;;		wreg, status,2, status,0, cstack
  7042 ;; Tracked objects:
  7043 ;;		On entry : 0/0
  7044 ;;		On exit  : 0/0
  7045 ;;		Unchanged: 0/0
  7046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7048 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7050 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7051 ;;Total ram usage:        2 bytes
  7052 ;; Hardware stack levels used:    1
  7053 ;; Hardware stack levels required when called:    6
  7054 ;; This function calls:
  7055 ;;		_I2C_Master_Wait
  7056 ;; This function is called by:
  7057 ;;		_update_RTC
  7058 ;; This function uses a non-reentrant model
  7059 ;;
  7060                           
  7061                           	psect	text18
  7062  002E06                     __ptext18:
  7063                           	opt stack 0
  7064  002E06                     _I2C_Master_Read:
  7065                           	opt stack 23
  7066                           
  7067                           ; BSR set to: 0
  7068                           ;incstack = 0
  7069                           ;I2C_Master_Read@a stored from wreg
  7070  002E06  0100               	movlb	0	; () banked
  7071  002E08  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7072                           
  7073                           ;I2C.c: 55: unsigned char temp;
  7074                           ;I2C.c: 56: I2C_Master_Wait();
  7075  002E0A  EC89  F017         	call	_I2C_Master_Wait	;wreg free
  7076                           
  7077                           ;I2C.c: 57: RCEN = 1;
  7078  002E0E  86C5               	bsf	4037,3,c	;volatile
  7079                           
  7080                           ;I2C.c: 58: I2C_Master_Wait();
  7081  002E10  EC89  F017         	call	_I2C_Master_Wait	;wreg free
  7082                           
  7083                           ;I2C.c: 59: temp = SSPBUF;
  7084  002E14  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7085                           
  7086                           ;I2C.c: 60: I2C_Master_Wait();
  7087  002E18  EC89  F017         	call	_I2C_Master_Wait	;wreg free
  7088                           
  7089                           ;I2C.c: 61: ACKDT = (a)?0:1;
  7090  002E1C  0100               	movlb	0	; () banked
  7091  002E1E  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7092  002E20  0100               	movlb	0	; () banked
  7093  002E22  A4D8               	btfss	status,2,c
  7094  002E24  D002               	goto	u5250
  7095  002E26  8AC5               	bsf	4037,5,c	;volatile
  7096  002E28  D001               	goto	l4225
  7097  002E2A                     u5250:
  7098  002E2A  9AC5               	bcf	4037,5,c	;volatile
  7099  002E2C                     l4225:
  7100                           
  7101                           ;I2C.c: 62: ACKEN = 1;
  7102  002E2C  88C5               	bsf	4037,4,c	;volatile
  7103                           
  7104                           ;I2C.c: 63: return temp;
  7105  002E2E  0100               	movlb	0	; () banked
  7106  002E30  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7107  002E32  0012               	return	
  7108  002E34                     __end_of_I2C_Master_Read:
  7109                           	opt stack 0
  7110                           tosu	equ	0xFFF
  7111                           tosh	equ	0xFFE
  7112                           tosl	equ	0xFFD
  7113                           pclath	equ	0xFFA
  7114                           tblptru	equ	0xFF8
  7115                           tblptrh	equ	0xFF7
  7116                           tblptrl	equ	0xFF6
  7117                           tablat	equ	0xFF5
  7118                           prodh	equ	0xFF4
  7119                           prodl	equ	0xFF3
  7120                           intcon	equ	0xFF2
  7121                           intcon2	equ	0xFF1
  7122                           intcon3	equ	0xFF0
  7123                           indf0	equ	0xFEF
  7124                           postinc0	equ	0xFEE
  7125                           fsr0h	equ	0xFEA
  7126                           fsr0l	equ	0xFE9
  7127                           wreg	equ	0xFE8
  7128                           indf1	equ	0xFE7
  7129                           postinc1	equ	0xFE6
  7130                           postdec1	equ	0xFE5
  7131                           fsr1h	equ	0xFE2
  7132                           fsr1l	equ	0xFE1
  7133                           indf2	equ	0xFDF
  7134                           postinc2	equ	0xFDE
  7135                           postdec2	equ	0xFDD
  7136                           fsr2h	equ	0xFDA
  7137                           fsr2l	equ	0xFD9
  7138                           status	equ	0xFD8
  7139                           
  7140 ;; *************** function _set_time *****************
  7141 ;; Defined at:
  7142 ;;		line 395 in file "main.c"
  7143 ;; Parameters:    Size  Location     Type
  7144 ;;		None
  7145 ;; Auto vars:     Size  Location     Type
  7146 ;;  i               1    3[BANK0 ] unsigned char 
  7147 ;; Return value:  Size  Location     Type
  7148 ;;                  1    wreg      void 
  7149 ;; Registers used:
  7150 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7151 ;; Tracked objects:
  7152 ;;		On entry : 0/0
  7153 ;;		On exit  : 0/0
  7154 ;;		Unchanged: 0/0
  7155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7156 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7157 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7159 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7160 ;;Total ram usage:        1 bytes
  7161 ;; Hardware stack levels used:    1
  7162 ;; Hardware stack levels required when called:    7
  7163 ;; This function calls:
  7164 ;;		_I2C_Master_Start
  7165 ;;		_I2C_Master_Stop
  7166 ;;		_I2C_Master_Write
  7167 ;; This function is called by:
  7168 ;;		_main
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172                           	psect	text19
  7173  002A80                     __ptext19:
  7174                           	opt stack 0
  7175  002A80                     _set_time:
  7176                           	opt stack 23
  7177                           
  7178                           ;main.c: 396: I2C_Master_Start();
  7179                           
  7180                           ; BSR set to: 0
  7181                           ;incstack = 0
  7182  002A80  ECB9  F017         	call	_I2C_Master_Start	;wreg free
  7183                           
  7184                           ;main.c: 397: I2C_Master_Write(0b11010000);
  7185  002A84  0E00               	movlw	0
  7186  002A86  0100               	movlb	0	; () banked
  7187  002A88  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7188  002A8A  0ED0               	movlw	208
  7189  002A8C  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7190  002A8E  ECB0  F017         	call	_I2C_Master_Write	;wreg free
  7191                           
  7192                           ;main.c: 398: I2C_Master_Write(0x00);
  7193  002A92  0E00               	movlw	0
  7194  002A94  0100               	movlb	0	; () banked
  7195  002A96  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7196  002A98  0E00               	movlw	0
  7197  002A9A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7198  002A9C  ECB0  F017         	call	_I2C_Master_Write	;wreg free
  7199                           
  7200                           ;main.c: 399: for(char i=0; i<7; i++){
  7201  002AA0  0E00               	movlw	0
  7202  002AA2  0100               	movlb	0	; () banked
  7203  002AA4  6F83               	movwf	set_time@i& (0+255),b
  7204  002AA6                     l4661:
  7205                           
  7206                           ; BSR set to: 0
  7207  002AA6  0E06               	movlw	6
  7208  002AA8  0100               	movlb	0	; () banked
  7209  002AAA  6583               	cpfsgt	set_time@i& (0+255),b
  7210  002AAC  D001               	goto	l4665
  7211  002AAE  D016               	goto	l4671
  7212  002AB0                     l4665:
  7213                           
  7214                           ; BSR set to: 0
  7215                           ;main.c: 400: I2C_Master_Write(manualDateTime[i]);
  7216  002AB0  0100               	movlb	0	; () banked
  7217  002AB2  5183               	movf	set_time@i& (0+255),w,b
  7218  002AB4  0D01               	mullw	1
  7219  002AB6  0EF8               	movlw	low _manualDateTime
  7220  002AB8  24F3               	addwf	prodl,w,c
  7221  002ABA  6EF6               	movwf	tblptrl,c
  7222  002ABC  0EFE               	movlw	high _manualDateTime
  7223  002ABE  20F4               	addwfc	prodh,w,c
  7224  002AC0  6EF7               	movwf	tblptrh,c
  7225  002AC2                     	if	1	;There are 3 active tblptr bytes
  7226  002AC2  6AF8               	clrf	tblptru,c
  7227  002AC4  0E00               	movlw	low (__mediumconst shr (0+16))
  7228  002AC6  22F8               	addwfc	tblptru,f,c
  7229  002AC8                     	endif
  7230  002AC8  0008               	tblrd		*
  7231  002ACA  50F5               	movf	tablat,w,c
  7232  002ACC  0100               	movlb	0	; () banked
  7233  002ACE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7234  002AD0  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7235  002AD2  ECB0  F017         	call	_I2C_Master_Write	;wreg free
  7236  002AD6  0100               	movlb	0	; () banked
  7237  002AD8  2B83               	incf	set_time@i& (0+255),f,b
  7238  002ADA  D7E5               	goto	l4661
  7239  002ADC                     l4671:
  7240                           
  7241                           ; BSR set to: 0
  7242                           ;main.c: 401: }
  7243                           ;main.c: 402: I2C_Master_Stop();
  7244  002ADC  ECB5  F017         	call	_I2C_Master_Stop	;wreg free
  7245  002AE0  0012               	return		;funcret
  7246  002AE2                     __end_of_set_time:
  7247                           	opt stack 0
  7248                           tosu	equ	0xFFF
  7249                           tosh	equ	0xFFE
  7250                           tosl	equ	0xFFD
  7251                           pclath	equ	0xFFA
  7252                           tblptru	equ	0xFF8
  7253                           tblptrh	equ	0xFF7
  7254                           tblptrl	equ	0xFF6
  7255                           tablat	equ	0xFF5
  7256                           prodh	equ	0xFF4
  7257                           prodl	equ	0xFF3
  7258                           intcon	equ	0xFF2
  7259                           intcon2	equ	0xFF1
  7260                           intcon3	equ	0xFF0
  7261                           indf0	equ	0xFEF
  7262                           postinc0	equ	0xFEE
  7263                           fsr0h	equ	0xFEA
  7264                           fsr0l	equ	0xFE9
  7265                           wreg	equ	0xFE8
  7266                           indf1	equ	0xFE7
  7267                           postinc1	equ	0xFE6
  7268                           postdec1	equ	0xFE5
  7269                           fsr1h	equ	0xFE2
  7270                           fsr1l	equ	0xFE1
  7271                           indf2	equ	0xFDF
  7272                           postinc2	equ	0xFDE
  7273                           postdec2	equ	0xFDD
  7274                           fsr2h	equ	0xFDA
  7275                           fsr2l	equ	0xFD9
  7276                           status	equ	0xFD8
  7277                           
  7278 ;; *************** function _I2C_Master_Write *****************
  7279 ;; Defined at:
  7280 ;;		line 47 in file "I2C.c"
  7281 ;; Parameters:    Size  Location     Type
  7282 ;;  d               2    1[BANK0 ] unsigned int 
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;		None
  7285 ;; Return value:  Size  Location     Type
  7286 ;;                  1    wreg      void 
  7287 ;; Registers used:
  7288 ;;		wreg, status,2, status,0, cstack
  7289 ;; Tracked objects:
  7290 ;;		On entry : 0/0
  7291 ;;		On exit  : 0/0
  7292 ;;		Unchanged: 0/0
  7293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7294 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7297 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7298 ;;Total ram usage:        2 bytes
  7299 ;; Hardware stack levels used:    1
  7300 ;; Hardware stack levels required when called:    6
  7301 ;; This function calls:
  7302 ;;		_I2C_Master_Wait
  7303 ;; This function is called by:
  7304 ;;		_update_RTC
  7305 ;;		_set_time
  7306 ;; This function uses a non-reentrant model
  7307 ;;
  7308                           
  7309                           	psect	text20
  7310  002F60                     __ptext20:
  7311                           	opt stack 0
  7312  002F60                     _I2C_Master_Write:
  7313                           	opt stack 23
  7314                           
  7315                           ;I2C.c: 49: I2C_Master_Wait();
  7316                           
  7317                           ;incstack = 0
  7318  002F60  EC89  F017         	call	_I2C_Master_Wait	;wreg free
  7319                           
  7320                           ;I2C.c: 50: SSPBUF = d;
  7321  002F64  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7322  002F68  0012               	return		;funcret
  7323  002F6A                     __end_of_I2C_Master_Write:
  7324                           	opt stack 0
  7325                           tosu	equ	0xFFF
  7326                           tosh	equ	0xFFE
  7327                           tosl	equ	0xFFD
  7328                           pclath	equ	0xFFA
  7329                           tblptru	equ	0xFF8
  7330                           tblptrh	equ	0xFF7
  7331                           tblptrl	equ	0xFF6
  7332                           tablat	equ	0xFF5
  7333                           prodh	equ	0xFF4
  7334                           prodl	equ	0xFF3
  7335                           intcon	equ	0xFF2
  7336                           intcon2	equ	0xFF1
  7337                           intcon3	equ	0xFF0
  7338                           indf0	equ	0xFEF
  7339                           postinc0	equ	0xFEE
  7340                           fsr0h	equ	0xFEA
  7341                           fsr0l	equ	0xFE9
  7342                           wreg	equ	0xFE8
  7343                           indf1	equ	0xFE7
  7344                           postinc1	equ	0xFE6
  7345                           postdec1	equ	0xFE5
  7346                           fsr1h	equ	0xFE2
  7347                           fsr1l	equ	0xFE1
  7348                           indf2	equ	0xFDF
  7349                           postinc2	equ	0xFDE
  7350                           postdec2	equ	0xFDD
  7351                           fsr2h	equ	0xFDA
  7352                           fsr2l	equ	0xFD9
  7353                           status	equ	0xFD8
  7354                           
  7355 ;; *************** function _I2C_Master_Stop *****************
  7356 ;; Defined at:
  7357 ;;		line 41 in file "I2C.c"
  7358 ;; Parameters:    Size  Location     Type
  7359 ;;		None
  7360 ;; Auto vars:     Size  Location     Type
  7361 ;;		None
  7362 ;; Return value:  Size  Location     Type
  7363 ;;                  1    wreg      void 
  7364 ;; Registers used:
  7365 ;;		wreg, status,2, status,0, cstack
  7366 ;; Tracked objects:
  7367 ;;		On entry : 0/0
  7368 ;;		On exit  : 0/0
  7369 ;;		Unchanged: 0/0
  7370 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7371 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7372 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7373 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7374 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7375 ;;Total ram usage:        0 bytes
  7376 ;; Hardware stack levels used:    1
  7377 ;; Hardware stack levels required when called:    6
  7378 ;; This function calls:
  7379 ;;		_I2C_Master_Wait
  7380 ;; This function is called by:
  7381 ;;		_update_RTC
  7382 ;;		_set_time
  7383 ;; This function uses a non-reentrant model
  7384 ;;
  7385                           
  7386                           	psect	text21
  7387  002F6A                     __ptext21:
  7388                           	opt stack 0
  7389  002F6A                     _I2C_Master_Stop:
  7390                           	opt stack 23
  7391                           
  7392                           ;I2C.c: 43: I2C_Master_Wait();
  7393                           
  7394                           ;incstack = 0
  7395  002F6A  EC89  F017         	call	_I2C_Master_Wait	;wreg free
  7396                           
  7397                           ;I2C.c: 44: PEN = 1;
  7398  002F6E  84C5               	bsf	4037,2,c	;volatile
  7399  002F70  0012               	return		;funcret
  7400  002F72                     __end_of_I2C_Master_Stop:
  7401                           	opt stack 0
  7402                           tosu	equ	0xFFF
  7403                           tosh	equ	0xFFE
  7404                           tosl	equ	0xFFD
  7405                           pclath	equ	0xFFA
  7406                           tblptru	equ	0xFF8
  7407                           tblptrh	equ	0xFF7
  7408                           tblptrl	equ	0xFF6
  7409                           tablat	equ	0xFF5
  7410                           prodh	equ	0xFF4
  7411                           prodl	equ	0xFF3
  7412                           intcon	equ	0xFF2
  7413                           intcon2	equ	0xFF1
  7414                           intcon3	equ	0xFF0
  7415                           indf0	equ	0xFEF
  7416                           postinc0	equ	0xFEE
  7417                           fsr0h	equ	0xFEA
  7418                           fsr0l	equ	0xFE9
  7419                           wreg	equ	0xFE8
  7420                           indf1	equ	0xFE7
  7421                           postinc1	equ	0xFE6
  7422                           postdec1	equ	0xFE5
  7423                           fsr1h	equ	0xFE2
  7424                           fsr1l	equ	0xFE1
  7425                           indf2	equ	0xFDF
  7426                           postinc2	equ	0xFDE
  7427                           postdec2	equ	0xFDD
  7428                           fsr2h	equ	0xFDA
  7429                           fsr2l	equ	0xFD9
  7430                           status	equ	0xFD8
  7431                           
  7432 ;; *************** function _I2C_Master_Start *****************
  7433 ;; Defined at:
  7434 ;;		line 29 in file "I2C.c"
  7435 ;; Parameters:    Size  Location     Type
  7436 ;;		None
  7437 ;; Auto vars:     Size  Location     Type
  7438 ;;		None
  7439 ;; Return value:  Size  Location     Type
  7440 ;;                  1    wreg      void 
  7441 ;; Registers used:
  7442 ;;		wreg, status,2, status,0, cstack
  7443 ;; Tracked objects:
  7444 ;;		On entry : 0/0
  7445 ;;		On exit  : 0/0
  7446 ;;		Unchanged: 0/0
  7447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7448 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7449 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;Total ram usage:        0 bytes
  7453 ;; Hardware stack levels used:    1
  7454 ;; Hardware stack levels required when called:    6
  7455 ;; This function calls:
  7456 ;;		_I2C_Master_Wait
  7457 ;; This function is called by:
  7458 ;;		_update_RTC
  7459 ;;		_set_time
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           	psect	text22
  7464  002F72                     __ptext22:
  7465                           	opt stack 0
  7466  002F72                     _I2C_Master_Start:
  7467                           	opt stack 23
  7468                           
  7469                           ;I2C.c: 31: I2C_Master_Wait();
  7470                           
  7471                           ;incstack = 0
  7472  002F72  EC89  F017         	call	_I2C_Master_Wait	;wreg free
  7473                           
  7474                           ;I2C.c: 32: SEN = 1;
  7475  002F76  80C5               	bsf	4037,0,c	;volatile
  7476  002F78  0012               	return		;funcret
  7477  002F7A                     __end_of_I2C_Master_Start:
  7478                           	opt stack 0
  7479                           tosu	equ	0xFFF
  7480                           tosh	equ	0xFFE
  7481                           tosl	equ	0xFFD
  7482                           pclath	equ	0xFFA
  7483                           tblptru	equ	0xFF8
  7484                           tblptrh	equ	0xFF7
  7485                           tblptrl	equ	0xFF6
  7486                           tablat	equ	0xFF5
  7487                           prodh	equ	0xFF4
  7488                           prodl	equ	0xFF3
  7489                           intcon	equ	0xFF2
  7490                           intcon2	equ	0xFF1
  7491                           intcon3	equ	0xFF0
  7492                           indf0	equ	0xFEF
  7493                           postinc0	equ	0xFEE
  7494                           fsr0h	equ	0xFEA
  7495                           fsr0l	equ	0xFE9
  7496                           wreg	equ	0xFE8
  7497                           indf1	equ	0xFE7
  7498                           postinc1	equ	0xFE6
  7499                           postdec1	equ	0xFE5
  7500                           fsr1h	equ	0xFE2
  7501                           fsr1l	equ	0xFE1
  7502                           indf2	equ	0xFDF
  7503                           postinc2	equ	0xFDE
  7504                           postdec2	equ	0xFDD
  7505                           fsr2h	equ	0xFDA
  7506                           fsr2l	equ	0xFD9
  7507                           status	equ	0xFD8
  7508                           
  7509 ;; *************** function _I2C_Master_Wait *****************
  7510 ;; Defined at:
  7511 ;;		line 24 in file "I2C.c"
  7512 ;; Parameters:    Size  Location     Type
  7513 ;;		None
  7514 ;; Auto vars:     Size  Location     Type
  7515 ;;		None
  7516 ;; Return value:  Size  Location     Type
  7517 ;;                  1    wreg      void 
  7518 ;; Registers used:
  7519 ;;		wreg, status,2, status,0
  7520 ;; Tracked objects:
  7521 ;;		On entry : 0/0
  7522 ;;		On exit  : 0/0
  7523 ;;		Unchanged: 0/0
  7524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7527 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7528 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7529 ;;Total ram usage:        1 bytes
  7530 ;; Hardware stack levels used:    1
  7531 ;; Hardware stack levels required when called:    5
  7532 ;; This function calls:
  7533 ;;		Nothing
  7534 ;; This function is called by:
  7535 ;;		_I2C_Master_Start
  7536 ;;		_I2C_Master_Stop
  7537 ;;		_I2C_Master_Write
  7538 ;;		_I2C_Master_Read
  7539 ;;		_I2C_Master_RepeatedStart
  7540 ;; This function uses a non-reentrant model
  7541 ;;
  7542                           
  7543                           	psect	text23
  7544  002F12                     __ptext23:
  7545                           	opt stack 0
  7546  002F12                     _I2C_Master_Wait:
  7547                           	opt stack 23
  7548  002F12                     l34:
  7549  002F12  B4C7               	btfsc	4039,2,c	;volatile
  7550  002F14  D7FE               	goto	l34
  7551  002F16  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  7552  002F1A  0E1F               	movlw	31
  7553  002F1C  0100               	movlb	0	; () banked
  7554  002F1E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7555  002F20  B4D8               	btfsc	status,2,c
  7556  002F22  0012               	return	
  7557  002F24  D7F6               	goto	l34
  7558  002F26                     __end_of_I2C_Master_Wait:
  7559                           	opt stack 0
  7560                           tosu	equ	0xFFF
  7561                           tosh	equ	0xFFE
  7562                           tosl	equ	0xFFD
  7563                           pclath	equ	0xFFA
  7564                           tblptru	equ	0xFF8
  7565                           tblptrh	equ	0xFF7
  7566                           tblptrl	equ	0xFF6
  7567                           tablat	equ	0xFF5
  7568                           prodh	equ	0xFF4
  7569                           prodl	equ	0xFF3
  7570                           intcon	equ	0xFF2
  7571                           intcon2	equ	0xFF1
  7572                           intcon3	equ	0xFF0
  7573                           indf0	equ	0xFEF
  7574                           postinc0	equ	0xFEE
  7575                           fsr0h	equ	0xFEA
  7576                           fsr0l	equ	0xFE9
  7577                           wreg	equ	0xFE8
  7578                           indf1	equ	0xFE7
  7579                           postinc1	equ	0xFE6
  7580                           postdec1	equ	0xFE5
  7581                           fsr1h	equ	0xFE2
  7582                           fsr1l	equ	0xFE1
  7583                           indf2	equ	0xFDF
  7584                           postinc2	equ	0xFDE
  7585                           postdec2	equ	0xFDD
  7586                           fsr2h	equ	0xFDA
  7587                           fsr2l	equ	0xFD9
  7588                           status	equ	0xFD8
  7589                           
  7590 ;; *************** function _read_sensors *****************
  7591 ;; Defined at:
  7592 ;;		line 406 in file "main.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;		None
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;  a               2    4[BANK0 ] int 
  7597 ;; Return value:  Size  Location     Type
  7598 ;;                  1    wreg      void 
  7599 ;; Registers used:
  7600 ;;		wreg, status,2, status,0, cstack
  7601 ;; Tracked objects:
  7602 ;;		On entry : 0/0
  7603 ;;		On exit  : 0/0
  7604 ;;		Unchanged: 0/0
  7605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7607 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7608 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7609 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7610 ;;Total ram usage:        4 bytes
  7611 ;; Hardware stack levels used:    1
  7612 ;; Hardware stack levels required when called:    6
  7613 ;; This function calls:
  7614 ;;		_readADC
  7615 ;; This function is called by:
  7616 ;;		_main
  7617 ;; This function uses a non-reentrant model
  7618 ;;
  7619                           
  7620                           	psect	text24
  7621  002E34                     __ptext24:
  7622                           	opt stack 0
  7623  002E34                     _read_sensors:
  7624                           	opt stack 24
  7625                           
  7626                           ;main.c: 407: if (state!='s'){
  7627                           
  7628                           ; BSR set to: 0
  7629                           ;incstack = 0
  7630  002E34  0E73               	movlw	115
  7631  002E36  0100               	movlb	0	; () banked
  7632  002E38  19E8               	xorwf	_state& (0+255),w,b
  7633  002E3A  A4D8               	btfss	status,2,c
  7634  002E3C  0012               	return	
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;main.c: 409: }
  7638                           ;main.c: 410: readADC(1);
  7639                           
  7640                           ; BSR set to: 0
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;main.c: 408: return;
  7644  002E3E  0E01               	movlw	1
  7645  002E40  EC31  F017         	call	_readADC
  7646                           
  7647                           ;main.c: 411: int a=16*16*ADRESH+ADRESL;
  7648  002E44  50C4               	movf	4036,w,c	;volatile
  7649  002E46  0100               	movlb	0	; () banked
  7650  002E48  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  7651  002E4A  6B82               	clrf	??_read_sensors& (0+255),b
  7652  002E4C  50C3               	movf	4035,w,c	;volatile
  7653  002E4E  0100               	movlb	0	; () banked
  7654  002E50  2582               	addwf	??_read_sensors& (0+255),w,b
  7655  002E52  0100               	movlb	0	; () banked
  7656  002E54  6F84               	movwf	read_sensors@a& (0+255),b
  7657  002E56  0E00               	movlw	0
  7658  002E58  0100               	movlb	0	; () banked
  7659  002E5A  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7660  002E5C  0100               	movlb	0	; () banked
  7661  002E5E  6F85               	movwf	(read_sensors@a+1)& (0+255),b
  7662                           
  7663                           ; BSR set to: 0
  7664  002E60  0012               	return		;funcret
  7665  002E62                     __end_of_read_sensors:
  7666                           	opt stack 0
  7667                           tosu	equ	0xFFF
  7668                           tosh	equ	0xFFE
  7669                           tosl	equ	0xFFD
  7670                           pclath	equ	0xFFA
  7671                           tblptru	equ	0xFF8
  7672                           tblptrh	equ	0xFF7
  7673                           tblptrl	equ	0xFF6
  7674                           tablat	equ	0xFF5
  7675                           prodh	equ	0xFF4
  7676                           prodl	equ	0xFF3
  7677                           intcon	equ	0xFF2
  7678                           intcon2	equ	0xFF1
  7679                           intcon3	equ	0xFF0
  7680                           indf0	equ	0xFEF
  7681                           postinc0	equ	0xFEE
  7682                           fsr0h	equ	0xFEA
  7683                           fsr0l	equ	0xFE9
  7684                           wreg	equ	0xFE8
  7685                           indf1	equ	0xFE7
  7686                           postinc1	equ	0xFE6
  7687                           postdec1	equ	0xFE5
  7688                           fsr1h	equ	0xFE2
  7689                           fsr1l	equ	0xFE1
  7690                           indf2	equ	0xFDF
  7691                           postinc2	equ	0xFDE
  7692                           postdec2	equ	0xFDD
  7693                           fsr2h	equ	0xFDA
  7694                           fsr2l	equ	0xFD9
  7695                           status	equ	0xFD8
  7696                           
  7697 ;; *************** function _readADC *****************
  7698 ;; Defined at:
  7699 ;;		line 522 in file "main.c"
  7700 ;; Parameters:    Size  Location     Type
  7701 ;;  channel         1    wreg     unsigned char 
  7702 ;; Auto vars:     Size  Location     Type
  7703 ;;  channel         1    1[BANK0 ] unsigned char 
  7704 ;; Return value:  Size  Location     Type
  7705 ;;                  1    wreg      void 
  7706 ;; Registers used:
  7707 ;;		wreg, status,2, status,0, cstack
  7708 ;; Tracked objects:
  7709 ;;		On entry : 0/0
  7710 ;;		On exit  : 0/0
  7711 ;;		Unchanged: 0/0
  7712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7714 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7715 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7717 ;;Total ram usage:        2 bytes
  7718 ;; Hardware stack levels used:    1
  7719 ;; Hardware stack levels required when called:    5
  7720 ;; This function calls:
  7721 ;;		Nothing
  7722 ;; This function is called by:
  7723 ;;		_read_sensors
  7724 ;; This function uses a non-reentrant model
  7725 ;;
  7726                           
  7727                           	psect	text25
  7728  002E62                     __ptext25:
  7729                           	opt stack 0
  7730  002E62                     _readADC:
  7731                           	opt stack 24
  7732                           
  7733                           ; BSR set to: 0
  7734                           ;incstack = 0
  7735                           ;readADC@channel stored from wreg
  7736  002E62  0100               	movlb	0	; () banked
  7737  002E64  6F81               	movwf	readADC@channel& (0+255),b
  7738                           
  7739                           ;main.c: 524: ADCON0 = ((channel <<2));
  7740  002E66  0100               	movlb	0	; () banked
  7741  002E68  4581               	rlncf	readADC@channel& (0+255),w,b
  7742  002E6A  46E8               	rlncf	wreg,f,c
  7743  002E6C  0BFC               	andlw	252
  7744  002E6E  6EC2               	movwf	4034,c	;volatile
  7745                           
  7746                           ; BSR set to: 0
  7747                           ;main.c: 525: ADON = 1;
  7748  002E70  80C2               	bsf	4034,0,c	;volatile
  7749                           
  7750                           ; BSR set to: 0
  7751                           ;main.c: 526: ADCON0bits.GO = 1;
  7752  002E72  82C2               	bsf	4034,1,c	;volatile
  7753                           
  7754                           ;main.c: 527: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(10000000/4000.0)
      +                          ));}
  7755  002E74  D009               	goto	l4317
  7756  002E76                     l4315:
  7757  002E76  0E11               	movlw	17
  7758  002E78  0100               	movlb	0	; () banked
  7759  002E7A  6F80               	movwf	??_readADC& (0+255),b
  7760  002E7C  0E3A               	movlw	58
  7761  002E7E                     u11697:
  7762  002E7E  2EE8               	decfsz	wreg,f,c
  7763  002E80  D7FE               	bra	u11697
  7764  002E82  2F80               	decfsz	??_readADC& (0+255),f,b
  7765  002E84  D7FC               	bra	u11697
  7766  002E86  F000               	nop	
  7767  002E88                     l4317:
  7768  002E88  A2C2               	btfss	4034,1,c	;volatile
  7769  002E8A  0012               	return	
  7770  002E8C  D7F4               	goto	l4315
  7771  002E8E                     __end_of_readADC:
  7772                           	opt stack 0
  7773                           tosu	equ	0xFFF
  7774                           tosh	equ	0xFFE
  7775                           tosl	equ	0xFFD
  7776                           pclath	equ	0xFFA
  7777                           tblptru	equ	0xFF8
  7778                           tblptrh	equ	0xFF7
  7779                           tblptrl	equ	0xFF6
  7780                           tablat	equ	0xFF5
  7781                           prodh	equ	0xFF4
  7782                           prodl	equ	0xFF3
  7783                           intcon	equ	0xFF2
  7784                           intcon2	equ	0xFF1
  7785                           intcon3	equ	0xFF0
  7786                           indf0	equ	0xFEF
  7787                           postinc0	equ	0xFEE
  7788                           fsr0h	equ	0xFEA
  7789                           fsr0l	equ	0xFE9
  7790                           wreg	equ	0xFE8
  7791                           indf1	equ	0xFE7
  7792                           postinc1	equ	0xFE6
  7793                           postdec1	equ	0xFE5
  7794                           fsr1h	equ	0xFE2
  7795                           fsr1l	equ	0xFE1
  7796                           indf2	equ	0xFDF
  7797                           postinc2	equ	0xFDE
  7798                           postdec2	equ	0xFDD
  7799                           fsr2h	equ	0xFDA
  7800                           fsr2l	equ	0xFD9
  7801                           status	equ	0xFD8
  7802                           
  7803 ;; *************** function _initLCD *****************
  7804 ;; Defined at:
  7805 ;;		line 14 in file "lcd.c"
  7806 ;; Parameters:    Size  Location     Type
  7807 ;;		None
  7808 ;; Auto vars:     Size  Location     Type
  7809 ;;		None
  7810 ;; Return value:  Size  Location     Type
  7811 ;;                  1    wreg      void 
  7812 ;; Registers used:
  7813 ;;		wreg, status,2, status,0, cstack
  7814 ;; Tracked objects:
  7815 ;;		On entry : 0/0
  7816 ;;		On exit  : 0/0
  7817 ;;		Unchanged: 0/0
  7818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7820 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7821 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7822 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7823 ;;Total ram usage:        1 bytes
  7824 ;; Hardware stack levels used:    1
  7825 ;; Hardware stack levels required when called:    7
  7826 ;; This function calls:
  7827 ;;		_lcdInst
  7828 ;; This function is called by:
  7829 ;;		_main
  7830 ;; This function uses a non-reentrant model
  7831 ;;
  7832                           
  7833                           	psect	text26
  7834  002CDC                     __ptext26:
  7835                           	opt stack 0
  7836  002CDC                     _initLCD:
  7837                           	opt stack 23
  7838                           
  7839                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  7840                           
  7841                           ;incstack = 0
  7842  002CDC  0E31               	movlw	49
  7843  002CDE  0100               	movlb	0	; () banked
  7844  002CE0  6F83               	movwf	??_initLCD& (0+255),b
  7845  002CE2  0EB2               	movlw	178
  7846  002CE4                     u11707:
  7847  002CE4  2EE8               	decfsz	wreg,f,c
  7848  002CE6  D7FE               	bra	u11707
  7849  002CE8  2F83               	decfsz	??_initLCD& (0+255),f,b
  7850  002CEA  D7FC               	bra	u11707
  7851  002CEC  F000               	nop	
  7852                           
  7853                           ;lcd.c: 16: lcdInst(0b00110011);
  7854  002CEE  0E33               	movlw	51
  7855  002CF0  EC9C  F017         	call	_lcdInst
  7856                           
  7857                           ;lcd.c: 17: lcdInst(0b00110010);
  7858  002CF4  0E32               	movlw	50
  7859  002CF6  EC9C  F017         	call	_lcdInst
  7860                           
  7861                           ;lcd.c: 18: lcdInst(0b00101000);
  7862  002CFA  0E28               	movlw	40
  7863  002CFC  EC9C  F017         	call	_lcdInst
  7864                           
  7865                           ;lcd.c: 19: lcdInst(0b00001111);
  7866  002D00  0E0F               	movlw	15
  7867  002D02  EC9C  F017         	call	_lcdInst
  7868                           
  7869                           ;lcd.c: 20: lcdInst(0b00000110);
  7870  002D06  0E06               	movlw	6
  7871  002D08  EC9C  F017         	call	_lcdInst
  7872                           
  7873                           ;lcd.c: 21: lcdInst(0b00000001);
  7874  002D0C  0E01               	movlw	1
  7875  002D0E  EC9C  F017         	call	_lcdInst
  7876                           
  7877                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  7878  002D12  0E31               	movlw	49
  7879  002D14  0100               	movlb	0	; () banked
  7880  002D16  6F83               	movwf	??_initLCD& (0+255),b
  7881  002D18  0EB2               	movlw	178
  7882  002D1A                     u11717:
  7883  002D1A  2EE8               	decfsz	wreg,f,c
  7884  002D1C  D7FE               	bra	u11717
  7885  002D1E  2F83               	decfsz	??_initLCD& (0+255),f,b
  7886  002D20  D7FC               	bra	u11717
  7887  002D22  F000               	nop	
  7888  002D24  0012               	return		;funcret
  7889  002D26                     __end_of_initLCD:
  7890                           	opt stack 0
  7891                           tosu	equ	0xFFF
  7892                           tosh	equ	0xFFE
  7893                           tosl	equ	0xFFD
  7894                           pclath	equ	0xFFA
  7895                           tblptru	equ	0xFF8
  7896                           tblptrh	equ	0xFF7
  7897                           tblptrl	equ	0xFF6
  7898                           tablat	equ	0xFF5
  7899                           prodh	equ	0xFF4
  7900                           prodl	equ	0xFF3
  7901                           intcon	equ	0xFF2
  7902                           intcon2	equ	0xFF1
  7903                           intcon3	equ	0xFF0
  7904                           indf0	equ	0xFEF
  7905                           postinc0	equ	0xFEE
  7906                           fsr0h	equ	0xFEA
  7907                           fsr0l	equ	0xFE9
  7908                           wreg	equ	0xFE8
  7909                           indf1	equ	0xFE7
  7910                           postinc1	equ	0xFE6
  7911                           postdec1	equ	0xFE5
  7912                           fsr1h	equ	0xFE2
  7913                           fsr1l	equ	0xFE1
  7914                           indf2	equ	0xFDF
  7915                           postinc2	equ	0xFDE
  7916                           postdec2	equ	0xFDD
  7917                           fsr2h	equ	0xFDA
  7918                           fsr2l	equ	0xFD9
  7919                           status	equ	0xFD8
  7920                           
  7921 ;; *************** function _lcdInst *****************
  7922 ;; Defined at:
  7923 ;;		line 25 in file "lcd.c"
  7924 ;; Parameters:    Size  Location     Type
  7925 ;;  data            1    wreg     unsigned char 
  7926 ;; Auto vars:     Size  Location     Type
  7927 ;;  data            1    2[BANK0 ] unsigned char 
  7928 ;; Return value:  Size  Location     Type
  7929 ;;                  1    wreg      void 
  7930 ;; Registers used:
  7931 ;;		wreg, status,2, status,0, cstack
  7932 ;; Tracked objects:
  7933 ;;		On entry : 0/0
  7934 ;;		On exit  : 0/0
  7935 ;;		Unchanged: 0/0
  7936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7938 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7940 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7941 ;;Total ram usage:        1 bytes
  7942 ;; Hardware stack levels used:    1
  7943 ;; Hardware stack levels required when called:    6
  7944 ;; This function calls:
  7945 ;;		_lcdNibble
  7946 ;; This function is called by:
  7947 ;;		_initLCD
  7948 ;;		_update_lcd
  7949 ;; This function uses a non-reentrant model
  7950 ;;
  7951                           
  7952                           	psect	text27
  7953  002F38                     __ptext27:
  7954                           	opt stack 0
  7955  002F38                     _lcdInst:
  7956                           	opt stack 23
  7957                           
  7958                           ;incstack = 0
  7959                           ;lcdInst@data stored from wreg
  7960  002F38  0100               	movlb	0	; () banked
  7961  002F3A  6F82               	movwf	lcdInst@data& (0+255),b
  7962                           
  7963                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  7964  002F3C  948C               	bcf	3980,2,c	;volatile
  7965                           
  7966                           ;lcd.c: 27: lcdNibble(data);
  7967  002F3E  0100               	movlb	0	; () banked
  7968  002F40  5182               	movf	lcdInst@data& (0+255),w,b
  7969  002F42  ECDB  F014         	call	_lcdNibble
  7970  002F46  0012               	return		;funcret
  7971  002F48                     __end_of_lcdInst:
  7972                           	opt stack 0
  7973                           tosu	equ	0xFFF
  7974                           tosh	equ	0xFFE
  7975                           tosl	equ	0xFFD
  7976                           pclath	equ	0xFFA
  7977                           tblptru	equ	0xFF8
  7978                           tblptrh	equ	0xFF7
  7979                           tblptrl	equ	0xFF6
  7980                           tablat	equ	0xFF5
  7981                           prodh	equ	0xFF4
  7982                           prodl	equ	0xFF3
  7983                           intcon	equ	0xFF2
  7984                           intcon2	equ	0xFF1
  7985                           intcon3	equ	0xFF0
  7986                           indf0	equ	0xFEF
  7987                           postinc0	equ	0xFEE
  7988                           fsr0h	equ	0xFEA
  7989                           fsr0l	equ	0xFE9
  7990                           wreg	equ	0xFE8
  7991                           indf1	equ	0xFE7
  7992                           postinc1	equ	0xFE6
  7993                           postdec1	equ	0xFE5
  7994                           fsr1h	equ	0xFE2
  7995                           fsr1l	equ	0xFE1
  7996                           indf2	equ	0xFDF
  7997                           postinc2	equ	0xFDE
  7998                           postdec2	equ	0xFDD
  7999                           fsr2h	equ	0xFDA
  8000                           fsr2l	equ	0xFD9
  8001                           status	equ	0xFD8
  8002                           
  8003 ;; *************** function _lcdNibble *****************
  8004 ;; Defined at:
  8005 ;;		line 35 in file "lcd.c"
  8006 ;; Parameters:    Size  Location     Type
  8007 ;;  data            1    wreg     unsigned char 
  8008 ;; Auto vars:     Size  Location     Type
  8009 ;;  data            1    1[BANK0 ] unsigned char 
  8010 ;;  temp            1    0[BANK0 ] unsigned char 
  8011 ;; Return value:  Size  Location     Type
  8012 ;;                  1    wreg      void 
  8013 ;; Registers used:
  8014 ;;		wreg, status,2, status,0
  8015 ;; Tracked objects:
  8016 ;;		On entry : 0/0
  8017 ;;		On exit  : 0/0
  8018 ;;		Unchanged: 0/0
  8019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8021 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8023 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;Total ram usage:        2 bytes
  8025 ;; Hardware stack levels used:    1
  8026 ;; Hardware stack levels required when called:    5
  8027 ;; This function calls:
  8028 ;;		Nothing
  8029 ;; This function is called by:
  8030 ;;		_lcdInst
  8031 ;;		_putch
  8032 ;; This function uses a non-reentrant model
  8033 ;;
  8034                           
  8035                           	psect	text28
  8036  0029B6                     __ptext28:
  8037                           	opt stack 0
  8038  0029B6                     _lcdNibble:
  8039                           	opt stack 21
  8040                           
  8041                           ;incstack = 0
  8042                           ;lcdNibble@data stored from wreg
  8043  0029B6  0100               	movlb	0	; () banked
  8044  0029B8  6F81               	movwf	lcdNibble@data& (0+255),b
  8045                           
  8046                           ;lcd.c: 37: char temp = data & 0xF0;
  8047  0029BA  0100               	movlb	0	; () banked
  8048  0029BC  5181               	movf	lcdNibble@data& (0+255),w,b
  8049  0029BE  0BF0               	andlw	240
  8050  0029C0  0100               	movlb	0	; () banked
  8051  0029C2  6F80               	movwf	lcdNibble@temp& (0+255),b
  8052                           
  8053                           ;lcd.c: 38: LATD = LATD & 0x0F;
  8054  0029C4  508C               	movf	3980,w,c	;volatile
  8055  0029C6  0B0F               	andlw	15
  8056  0029C8  6E8C               	movwf	3980,c	;volatile
  8057                           
  8058                           ;lcd.c: 39: LATD = temp | LATD;
  8059  0029CA  0100               	movlb	0	; () banked
  8060  0029CC  5180               	movf	lcdNibble@temp& (0+255),w,b
  8061  0029CE  108C               	iorwf	3980,w,c	;volatile
  8062  0029D0  6E8C               	movwf	3980,c	;volatile
  8063                           
  8064                           ; BSR set to: 0
  8065                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  8066  0029D2  968C               	bcf	3980,3,c	;volatile
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8070  0029D4  0E14               	movlw	20
  8071  0029D6                     u11727:
  8072  0029D6  2EE8               	decfsz	wreg,f,c
  8073  0029D8  D7FE               	bra	u11727
  8074  0029DA  D000               	nop2	
  8075                           
  8076                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  8077  0029DC  868C               	bsf	3980,3,c	;volatile
  8078                           
  8079                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8080  0029DE  0E14               	movlw	20
  8081  0029E0                     u11737:
  8082  0029E0  2EE8               	decfsz	wreg,f,c
  8083  0029E2  D7FE               	bra	u11737
  8084  0029E4  D000               	nop2	
  8085                           
  8086                           ;lcd.c: 46: data = data << 4;
  8087  0029E6  0100               	movlb	0	; () banked
  8088  0029E8  3981               	swapf	lcdNibble@data& (0+255),w,b
  8089  0029EA  0BF0               	andlw	240
  8090  0029EC  0100               	movlb	0	; () banked
  8091  0029EE  6F81               	movwf	lcdNibble@data& (0+255),b
  8092                           
  8093                           ;lcd.c: 48: temp = data & 0xF0;
  8094  0029F0  0100               	movlb	0	; () banked
  8095  0029F2  5181               	movf	lcdNibble@data& (0+255),w,b
  8096  0029F4  0BF0               	andlw	240
  8097  0029F6  0100               	movlb	0	; () banked
  8098  0029F8  6F80               	movwf	lcdNibble@temp& (0+255),b
  8099                           
  8100                           ;lcd.c: 49: LATD = LATD & 0x0F;
  8101  0029FA  508C               	movf	3980,w,c	;volatile
  8102  0029FC  0B0F               	andlw	15
  8103  0029FE  6E8C               	movwf	3980,c	;volatile
  8104                           
  8105                           ;lcd.c: 50: LATD = temp | LATD;
  8106  002A00  0100               	movlb	0	; () banked
  8107  002A02  5180               	movf	lcdNibble@temp& (0+255),w,b
  8108  002A04  108C               	iorwf	3980,w,c	;volatile
  8109  002A06  6E8C               	movwf	3980,c	;volatile
  8110                           
  8111                           ; BSR set to: 0
  8112                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  8113  002A08  968C               	bcf	3980,3,c	;volatile
  8114                           
  8115                           ; BSR set to: 0
  8116                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8117  002A0A  0E14               	movlw	20
  8118  002A0C                     u11747:
  8119  002A0C  2EE8               	decfsz	wreg,f,c
  8120  002A0E  D7FE               	bra	u11747
  8121  002A10  D000               	nop2	
  8122                           
  8123                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  8124  002A12  868C               	bsf	3980,3,c	;volatile
  8125                           
  8126                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8127  002A14  0E14               	movlw	20
  8128  002A16                     u11757:
  8129  002A16  2EE8               	decfsz	wreg,f,c
  8130  002A18  D7FE               	bra	u11757
  8131  002A1A  D000               	nop2	
  8132  002A1C  0012               	return		;funcret
  8133  002A1E                     __end_of_lcdNibble:
  8134                           	opt stack 0
  8135                           tosu	equ	0xFFF
  8136                           tosh	equ	0xFFE
  8137                           tosl	equ	0xFFD
  8138                           pclath	equ	0xFFA
  8139                           tblptru	equ	0xFF8
  8140                           tblptrh	equ	0xFF7
  8141                           tblptrl	equ	0xFF6
  8142                           tablat	equ	0xFF5
  8143                           prodh	equ	0xFF4
  8144                           prodl	equ	0xFF3
  8145                           intcon	equ	0xFF2
  8146                           intcon2	equ	0xFF1
  8147                           intcon3	equ	0xFF0
  8148                           indf0	equ	0xFEF
  8149                           postinc0	equ	0xFEE
  8150                           fsr0h	equ	0xFEA
  8151                           fsr0l	equ	0xFE9
  8152                           wreg	equ	0xFE8
  8153                           indf1	equ	0xFE7
  8154                           postinc1	equ	0xFE6
  8155                           postdec1	equ	0xFE5
  8156                           fsr1h	equ	0xFE2
  8157                           fsr1l	equ	0xFE1
  8158                           indf2	equ	0xFDF
  8159                           postinc2	equ	0xFDE
  8160                           postdec2	equ	0xFDD
  8161                           fsr2h	equ	0xFDA
  8162                           fsr2l	equ	0xFD9
  8163                           status	equ	0xFD8
  8164                           
  8165 ;; *************** function _I2C_Master_Init *****************
  8166 ;; Defined at:
  8167 ;;		line 13 in file "I2C.c"
  8168 ;; Parameters:    Size  Location     Type
  8169 ;;  c               4   13[BANK0 ] const unsigned long 
  8170 ;; Auto vars:     Size  Location     Type
  8171 ;;		None
  8172 ;; Return value:  Size  Location     Type
  8173 ;;                  1    wreg      void 
  8174 ;; Registers used:
  8175 ;;		wreg, status,2, status,0, cstack
  8176 ;; Tracked objects:
  8177 ;;		On entry : 0/0
  8178 ;;		On exit  : 0/0
  8179 ;;		Unchanged: 0/0
  8180 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8181 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8182 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8183 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8184 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8185 ;;Total ram usage:        8 bytes
  8186 ;; Hardware stack levels used:    1
  8187 ;; Hardware stack levels required when called:    6
  8188 ;; This function calls:
  8189 ;;		___lldiv
  8190 ;; This function is called by:
  8191 ;;		_main
  8192 ;; This function uses a non-reentrant model
  8193 ;;
  8194                           
  8195                           	psect	text29
  8196  002AE2                     __ptext29:
  8197                           	opt stack 0
  8198  002AE2                     _I2C_Master_Init:
  8199                           	opt stack 24
  8200                           
  8201                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  8202                           
  8203                           ;incstack = 0
  8204  002AE2  0E00               	movlw	0
  8205  002AE4  6EC7               	movwf	4039,c	;volatile
  8206                           
  8207                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  8208  002AE6  0E28               	movlw	40
  8209  002AE8  6EC6               	movwf	4038,c	;volatile
  8210                           
  8211                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  8212  002AEA  0E00               	movlw	0
  8213  002AEC  6EC5               	movwf	4037,c	;volatile
  8214                           
  8215                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  8216  002AEE  0E80               	movlw	128
  8217  002AF0  0100               	movlb	0	; () banked
  8218  002AF2  6F80               	movwf	___lldiv@dividend& (0+255),b
  8219  002AF4  0E96               	movlw	150
  8220  002AF6  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  8221  002AF8  0E98               	movlw	152
  8222  002AFA  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  8223  002AFC  0E00               	movlw	0
  8224  002AFE  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  8225  002B00  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  8226  002B04  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  8227  002B08  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  8228  002B0C  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  8229  002B10  0E02               	movlw	2
  8230  002B12                     u6015:
  8231  002B12  90D8               	bcf	status,0,c
  8232  002B14  0100               	movlb	0	; () banked
  8233  002B16  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  8234  002B18  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  8235  002B1A  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  8236  002B1C  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  8237  002B1E  2EE8               	decfsz	wreg,f,c
  8238  002B20  D7F8               	goto	u6015
  8239  002B22  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  8240  002B26  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8241  002B2A  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8242  002B2E  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8243  002B32  EC3B  F013         	call	___lldiv	;wreg free
  8244  002B36  0100               	movlb	0	; () banked
  8245  002B38  0580               	decf	?___lldiv& (0+255),w,b
  8246  002B3A  6EC8               	movwf	4040,c	;volatile
  8247                           
  8248                           ; BSR set to: 0
  8249                           ;I2C.c: 20: TRISC3 = 1;
  8250  002B3C  8694               	bsf	3988,3,c	;volatile
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;I2C.c: 21: TRISC4 = 1;
  8254  002B3E  8894               	bsf	3988,4,c	;volatile
  8255                           
  8256                           ; BSR set to: 0
  8257  002B40  0012               	return		;funcret
  8258  002B42                     __end_of_I2C_Master_Init:
  8259                           	opt stack 0
  8260                           tosu	equ	0xFFF
  8261                           tosh	equ	0xFFE
  8262                           tosl	equ	0xFFD
  8263                           pclath	equ	0xFFA
  8264                           tblptru	equ	0xFF8
  8265                           tblptrh	equ	0xFF7
  8266                           tblptrl	equ	0xFF6
  8267                           tablat	equ	0xFF5
  8268                           prodh	equ	0xFF4
  8269                           prodl	equ	0xFF3
  8270                           intcon	equ	0xFF2
  8271                           intcon2	equ	0xFF1
  8272                           intcon3	equ	0xFF0
  8273                           indf0	equ	0xFEF
  8274                           postinc0	equ	0xFEE
  8275                           fsr0h	equ	0xFEA
  8276                           fsr0l	equ	0xFE9
  8277                           wreg	equ	0xFE8
  8278                           indf1	equ	0xFE7
  8279                           postinc1	equ	0xFE6
  8280                           postdec1	equ	0xFE5
  8281                           fsr1h	equ	0xFE2
  8282                           fsr1l	equ	0xFE1
  8283                           indf2	equ	0xFDF
  8284                           postinc2	equ	0xFDE
  8285                           postdec2	equ	0xFDD
  8286                           fsr2h	equ	0xFDA
  8287                           fsr2l	equ	0xFD9
  8288                           status	equ	0xFD8
  8289                           
  8290 ;; *************** function ___lldiv *****************
  8291 ;; Defined at:
  8292 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8293 ;; Parameters:    Size  Location     Type
  8294 ;;  dividend        4    0[BANK0 ] unsigned long 
  8295 ;;  divisor         4    4[BANK0 ] unsigned long 
  8296 ;; Auto vars:     Size  Location     Type
  8297 ;;  quotient        4    8[BANK0 ] unsigned long 
  8298 ;;  counter         1   12[BANK0 ] unsigned char 
  8299 ;; Return value:  Size  Location     Type
  8300 ;;                  4    0[BANK0 ] unsigned long 
  8301 ;; Registers used:
  8302 ;;		wreg, status,2, status,0
  8303 ;; Tracked objects:
  8304 ;;		On entry : 0/0
  8305 ;;		On exit  : 0/0
  8306 ;;		Unchanged: 0/0
  8307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8308 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8309 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8311 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8312 ;;Total ram usage:       13 bytes
  8313 ;; Hardware stack levels used:    1
  8314 ;; Hardware stack levels required when called:    5
  8315 ;; This function calls:
  8316 ;;		Nothing
  8317 ;; This function is called by:
  8318 ;;		_I2C_Master_Init
  8319 ;; This function uses a non-reentrant model
  8320 ;;
  8321                           
  8322                           	psect	text30
  8323  002676                     __ptext30:
  8324                           	opt stack 0
  8325  002676                     ___lldiv:
  8326                           	opt stack 24
  8327                           
  8328                           ; BSR set to: 0
  8329                           ;incstack = 0
  8330  002676  0E00               	movlw	0
  8331  002678  0100               	movlb	0	; () banked
  8332  00267A  6F88               	movwf	___lldiv@quotient& (0+255),b
  8333  00267C  0E00               	movlw	0
  8334  00267E  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  8335  002680  0E00               	movlw	0
  8336  002682  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  8337  002684  0E00               	movlw	0
  8338  002686  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  8339                           
  8340                           ; BSR set to: 0
  8341  002688  0100               	movlb	0	; () banked
  8342  00268A  5184               	movf	___lldiv@divisor& (0+255),w,b
  8343  00268C  0100               	movlb	0	; () banked
  8344  00268E  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8345  002690  0100               	movlb	0	; () banked
  8346  002692  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8347  002694  0100               	movlb	0	; () banked
  8348  002696  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8349  002698  B4D8               	btfsc	status,2,c
  8350  00269A  D042               	goto	l865
  8351                           
  8352                           ; BSR set to: 0
  8353  00269C  0E01               	movlw	1
  8354  00269E  0100               	movlb	0	; () banked
  8355  0026A0  6F8C               	movwf	___lldiv@counter& (0+255),b
  8356  0026A2  D008               	goto	l4407
  8357  0026A4                     l4405:
  8358                           
  8359                           ; BSR set to: 0
  8360  0026A4  0100               	movlb	0	; () banked
  8361  0026A6  90D8               	bcf	status,0,c
  8362  0026A8  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  8363  0026AA  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8364  0026AC  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8365  0026AE  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8366  0026B0  0100               	movlb	0	; () banked
  8367  0026B2  2B8C               	incf	___lldiv@counter& (0+255),f,b
  8368  0026B4                     l4407:
  8369                           
  8370                           ; BSR set to: 0
  8371  0026B4  0100               	movlb	0	; () banked
  8372  0026B6  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8373  0026B8  D7F5               	goto	l4405
  8374  0026BA                     l4409:
  8375                           
  8376                           ; BSR set to: 0
  8377  0026BA  0100               	movlb	0	; () banked
  8378  0026BC  90D8               	bcf	status,0,c
  8379  0026BE  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  8380  0026C0  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8381  0026C2  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8382  0026C4  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8383                           
  8384                           ; BSR set to: 0
  8385  0026C6  0100               	movlb	0	; () banked
  8386  0026C8  5184               	movf	___lldiv@divisor& (0+255),w,b
  8387  0026CA  0100               	movlb	0	; () banked
  8388  0026CC  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  8389  0026CE  0100               	movlb	0	; () banked
  8390  0026D0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8391  0026D2  0100               	movlb	0	; () banked
  8392  0026D4  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8393  0026D6  0100               	movlb	0	; () banked
  8394  0026D8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8395  0026DA  0100               	movlb	0	; () banked
  8396  0026DC  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8397  0026DE  0100               	movlb	0	; () banked
  8398  0026E0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8399  0026E2  0100               	movlb	0	; () banked
  8400  0026E4  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8401  0026E6  A0D8               	btfss	status,0,c
  8402  0026E8  D012               	goto	l4417
  8403                           
  8404                           ; BSR set to: 0
  8405  0026EA  0100               	movlb	0	; () banked
  8406  0026EC  5184               	movf	___lldiv@divisor& (0+255),w,b
  8407  0026EE  0100               	movlb	0	; () banked
  8408  0026F0  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  8409  0026F2  0100               	movlb	0	; () banked
  8410  0026F4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8411  0026F6  0100               	movlb	0	; () banked
  8412  0026F8  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8413  0026FA  0100               	movlb	0	; () banked
  8414  0026FC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8415  0026FE  0100               	movlb	0	; () banked
  8416  002700  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8417  002702  0100               	movlb	0	; () banked
  8418  002704  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8419  002706  0100               	movlb	0	; () banked
  8420  002708  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8421                           
  8422                           ; BSR set to: 0
  8423  00270A  0100               	movlb	0	; () banked
  8424  00270C  8188               	bsf	___lldiv@quotient& (0+255),0,b
  8425  00270E                     l4417:
  8426                           
  8427                           ; BSR set to: 0
  8428  00270E  0100               	movlb	0	; () banked
  8429  002710  90D8               	bcf	status,0,c
  8430  002712  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8431  002714  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8432  002716  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8433  002718  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  8434                           
  8435                           ; BSR set to: 0
  8436  00271A  0100               	movlb	0	; () banked
  8437  00271C  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  8438  00271E  D7CD               	goto	l4409
  8439  002720                     l865:
  8440                           
  8441                           ; BSR set to: 0
  8442  002720  C088  F080         	movff	___lldiv@quotient,?___lldiv
  8443  002724  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  8444  002728  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  8445  00272C  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  8446                           
  8447                           ; BSR set to: 0
  8448  002730  0012               	return		;funcret
  8449  002732                     __end_of___lldiv:
  8450                           	opt stack 0
  8451                           tosu	equ	0xFFF
  8452                           tosh	equ	0xFFE
  8453                           tosl	equ	0xFFD
  8454                           pclath	equ	0xFFA
  8455                           tblptru	equ	0xFF8
  8456                           tblptrh	equ	0xFF7
  8457                           tblptrl	equ	0xFF6
  8458                           tablat	equ	0xFF5
  8459                           prodh	equ	0xFF4
  8460                           prodl	equ	0xFF3
  8461                           intcon	equ	0xFF2
  8462                           intcon2	equ	0xFF1
  8463                           intcon3	equ	0xFF0
  8464                           indf0	equ	0xFEF
  8465                           postinc0	equ	0xFEE
  8466                           fsr0h	equ	0xFEA
  8467                           fsr0l	equ	0xFE9
  8468                           wreg	equ	0xFE8
  8469                           indf1	equ	0xFE7
  8470                           postinc1	equ	0xFE6
  8471                           postdec1	equ	0xFE5
  8472                           fsr1h	equ	0xFE2
  8473                           fsr1l	equ	0xFE1
  8474                           indf2	equ	0xFDF
  8475                           postinc2	equ	0xFDE
  8476                           postdec2	equ	0xFDD
  8477                           fsr2h	equ	0xFDA
  8478                           fsr2l	equ	0xFD9
  8479                           status	equ	0xFD8
  8480                           
  8481 ;; *************** function _keypressed *****************
  8482 ;; Defined at:
  8483 ;;		line 292 in file "main.c"
  8484 ;; Parameters:    Size  Location     Type
  8485 ;;		None
  8486 ;; Auto vars:     Size  Location     Type
  8487 ;;  i               2   58[COMRAM] int 
  8488 ;;  keypress        1   60[COMRAM] unsigned char 
  8489 ;; Return value:  Size  Location     Type
  8490 ;;                  1    wreg      void 
  8491 ;; Registers used:
  8492 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  8493 ;; Tracked objects:
  8494 ;;		On entry : 0/0
  8495 ;;		On exit  : 0/0
  8496 ;;		Unchanged: 0/0
  8497 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8498 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8499 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8500 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8501 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8502 ;;Total ram usage:       19 bytes
  8503 ;; Hardware stack levels used:    1
  8504 ;; Hardware stack levels required when called:    4
  8505 ;; This function calls:
  8506 ;;		i2___awmod
  8507 ;;		i2_lcdInst
  8508 ;;		i2_printf
  8509 ;; This function is called by:
  8510 ;;		Interrupt level 2
  8511 ;; This function uses a non-reentrant model
  8512 ;;
  8513                           
  8514                           	psect	intcode
  8515  000008                     __pintcode:
  8516                           	opt stack 0
  8517  000008                     _keypressed:
  8518                           	opt stack 20
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;incstack = 0
  8522  000008  8277               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8523  00000A  EDF7  F008         	call	int_func,f	;refresh shadow registers
  8524                           tosu	equ	0xFFF
  8525                           tosh	equ	0xFFE
  8526                           tosl	equ	0xFFD
  8527                           pclath	equ	0xFFA
  8528                           tblptru	equ	0xFF8
  8529                           tblptrh	equ	0xFF7
  8530                           tblptrl	equ	0xFF6
  8531                           tablat	equ	0xFF5
  8532                           prodh	equ	0xFF4
  8533                           prodl	equ	0xFF3
  8534                           intcon	equ	0xFF2
  8535                           intcon2	equ	0xFF1
  8536                           intcon3	equ	0xFF0
  8537                           indf0	equ	0xFEF
  8538                           postinc0	equ	0xFEE
  8539                           fsr0h	equ	0xFEA
  8540                           fsr0l	equ	0xFE9
  8541                           wreg	equ	0xFE8
  8542                           indf1	equ	0xFE7
  8543                           postinc1	equ	0xFE6
  8544                           postdec1	equ	0xFE5
  8545                           fsr1h	equ	0xFE2
  8546                           fsr1l	equ	0xFE1
  8547                           indf2	equ	0xFDF
  8548                           postinc2	equ	0xFDE
  8549                           postdec2	equ	0xFDD
  8550                           fsr2h	equ	0xFDA
  8551                           fsr2l	equ	0xFD9
  8552                           status	equ	0xFD8
  8553                           
  8554                           	psect	intcode_body
  8555  0011EE                     __pintcode_body:
  8556                           	opt stack 20
  8557  0011EE                     int_func:
  8558                           	opt stack 20
  8559  0011EE  0006               	pop		; remove dummy address from shadow register refresh
  8560  0011F0  CFFA F02D          	movff	pclath,??_keypressed+2
  8561  0011F4  CFFB F02E          	movff	pclatu,??_keypressed+3
  8562  0011F8  CFE9 F02F          	movff	fsr0l,??_keypressed+4
  8563  0011FC  CFEA F030          	movff	fsr0h,??_keypressed+5
  8564  001200  CFE1 F031          	movff	fsr1l,??_keypressed+6
  8565  001204  CFE2 F032          	movff	fsr1h,??_keypressed+7
  8566  001208  CFD9 F033          	movff	fsr2l,??_keypressed+8
  8567  00120C  CFDA F034          	movff	fsr2h,??_keypressed+9
  8568  001210  CFF3 F035          	movff	prodl,??_keypressed+10
  8569  001214  CFF4 F036          	movff	prodh,??_keypressed+11
  8570  001218  CFF6 F037          	movff	tblptrl,??_keypressed+12
  8571  00121C  CFF7 F038          	movff	tblptrh,??_keypressed+13
  8572  001220  CFF8 F039          	movff	tblptru,??_keypressed+14
  8573  001224  CFF5 F03A          	movff	tablat,??_keypressed+15
  8574                           
  8575                           ;main.c: 294: if(INT1IF){
  8576  001228  A0F0               	btfss	intcon3,0,c	;volatile
  8577  00122A  D2A9               	goto	i2l361
  8578                           
  8579                           ;main.c: 295: int i;
  8580                           ;main.c: 296: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8581  00122C  3881               	swapf	3969,w,c	;volatile
  8582  00122E  0B0F               	andlw	15
  8583  001230  0B0F               	andlw	15
  8584  001232  6E3D               	movwf	keypressed@keypress,c
  8585                           
  8586                           ;main.c: 297: switch(state)
  8587  001234  D28E               	goto	i2l7635
  8588  001236                     i2l7481:
  8589                           
  8590                           ;main.c: 299: for (i=0;i<7;i++)
  8591  001236  0E00               	movlw	0
  8592  001238  6E3C               	movwf	keypressed@i+1,c
  8593  00123A  0E00               	movlw	0
  8594  00123C  6E3B               	movwf	keypressed@i,c
  8595  00123E                     i2l7483:
  8596  00123E  BE3C               	btfsc	keypressed@i+1,7,c
  8597  001240  D006               	goto	i2l7487
  8598  001242  503C               	movf	keypressed@i+1,w,c
  8599  001244  E11D               	bnz	i2l7493
  8600  001246  0E07               	movlw	7
  8601  001248  5C3B               	subwf	keypressed@i,w,c
  8602  00124A  B0D8               	btfsc	status,0,c
  8603  00124C  D019               	goto	i2l7493
  8604  00124E                     i2l7487:
  8605                           
  8606                           ;main.c: 300: startTime[i]=time_i[i];
  8607  00124E  90D8               	bcf	status,0,c
  8608  001250  343B               	rlcf	keypressed@i,w,c
  8609  001252  6ED9               	movwf	fsr2l,c
  8610  001254  343C               	rlcf	keypressed@i+1,w,c
  8611  001256  6EDA               	movwf	fsr2h,c
  8612  001258  0EBA               	movlw	low _time_i
  8613  00125A  26D9               	addwf	fsr2l,f,c
  8614  00125C  0E00               	movlw	high _time_i
  8615  00125E  22DA               	addwfc	fsr2h,f,c
  8616  001260  90D8               	bcf	status,0,c
  8617  001262  343B               	rlcf	keypressed@i,w,c
  8618  001264  6EE1               	movwf	fsr1l,c
  8619  001266  343C               	rlcf	keypressed@i+1,w,c
  8620  001268  6EE2               	movwf	fsr1h,c
  8621  00126A  0E4C               	movlw	low _startTime
  8622  00126C  26E1               	addwf	fsr1l,f,c
  8623  00126E  0E00               	movlw	high _startTime
  8624  001270  22E2               	addwfc	fsr1h,f,c
  8625  001272  CFDE FFE6          	movff	postinc2,postinc1
  8626  001276  CFDD FFE5          	movff	postdec2,postdec1
  8627  00127A  4A3B               	infsnz	keypressed@i,f,c
  8628  00127C  2A3C               	incf	keypressed@i+1,f,c
  8629  00127E  D7DF               	goto	i2l7483
  8630  001280                     i2l7493:
  8631                           
  8632                           ;main.c: 301: if (keys[keypress]=='B'&&menuIndex<menuSize)
  8633  001280  503D               	movf	keypressed@keypress,w,c
  8634  001282  0D01               	mullw	1
  8635  001284  0ED5               	movlw	low _keys
  8636  001286  24F3               	addwf	prodl,w,c
  8637  001288  6EF6               	movwf	tblptrl,c
  8638  00128A  0EFE               	movlw	high _keys
  8639  00128C  20F4               	addwfc	prodh,w,c
  8640  00128E  6EF7               	movwf	tblptrh,c
  8641  001290                     	if	1	;There are 3 active tblptr bytes
  8642  001290  6AF8               	clrf	tblptru,c
  8643  001292  0E00               	movlw	low (__mediumconst shr (0+16))
  8644  001294  22F8               	addwfc	tblptru,f,c
  8645  001296                     	endif
  8646  001296  0008               	tblrd		*
  8647  001298  50F5               	movf	tablat,w,c
  8648  00129A  0A42               	xorlw	66
  8649  00129C  A4D8               	btfss	status,2,c
  8650  00129E  D012               	goto	i2l7499
  8651  0012A0  0100               	movlb	0	; () banked
  8652  0012A2  51F7               	movf	_menuSize& (0+255),w,b
  8653  0012A4  0100               	movlb	0	; () banked
  8654  0012A6  5DF5               	subwf	_menuIndex& (0+255),w,b
  8655  0012A8  0100               	movlb	0	; () banked
  8656  0012AA  51F6               	movf	(_menuIndex+1)& (0+255),w,b
  8657  0012AC  0A80               	xorlw	128
  8658  0012AE  6E2B               	movwf	??_keypressed& (0+255),c
  8659  0012B0  0100               	movlb	0	; () banked
  8660  0012B2  51F8               	movf	(_menuSize+1)& (0+255),w,b
  8661  0012B4  0A80               	xorlw	128
  8662  0012B6  582B               	subwfb	??_keypressed& (0+255),w,c
  8663  0012B8  B0D8               	btfsc	status,0,c
  8664  0012BA  D004               	goto	i2l7499
  8665                           
  8666                           ; BSR set to: 0
  8667                           ;main.c: 302: menuIndex++;
  8668  0012BC  0100               	movlb	0	; () banked
  8669  0012BE  4BF5               	infsnz	_menuIndex& (0+255),f,b
  8670  0012C0  2BF6               	incf	(_menuIndex+1)& (0+255),f,b
  8671  0012C2  D25C               	goto	i2l324
  8672  0012C4                     i2l7499:
  8673                           
  8674                           ;main.c: 303: else if (keys[keypress]=='A'&&menuIndex>1)
  8675  0012C4  503D               	movf	keypressed@keypress,w,c
  8676  0012C6  0D01               	mullw	1
  8677  0012C8  0ED5               	movlw	low _keys
  8678  0012CA  24F3               	addwf	prodl,w,c
  8679  0012CC  6EF6               	movwf	tblptrl,c
  8680  0012CE  0EFE               	movlw	high _keys
  8681  0012D0  20F4               	addwfc	prodh,w,c
  8682  0012D2  6EF7               	movwf	tblptrh,c
  8683  0012D4                     	if	1	;There are 3 active tblptr bytes
  8684  0012D4  6AF8               	clrf	tblptru,c
  8685  0012D6  0E00               	movlw	low (__mediumconst shr (0+16))
  8686  0012D8  22F8               	addwfc	tblptru,f,c
  8687  0012DA                     	endif
  8688  0012DA  0008               	tblrd		*
  8689  0012DC  50F5               	movf	tablat,w,c
  8690  0012DE  0A41               	xorlw	65
  8691  0012E0  A4D8               	btfss	status,2,c
  8692  0012E2  D010               	goto	i2l7505
  8693  0012E4  0100               	movlb	0	; () banked
  8694  0012E6  BFF6               	btfsc	(_menuIndex+1)& (0+255),7,b
  8695  0012E8  D00D               	goto	i2l7505
  8696  0012EA  0100               	movlb	0	; () banked
  8697  0012EC  51F6               	movf	(_menuIndex+1)& (0+255),w,b
  8698  0012EE  E105               	bnz	i2u1140_40
  8699  0012F0  0E02               	movlw	2
  8700  0012F2  0100               	movlb	0	; () banked
  8701  0012F4  5DF5               	subwf	_menuIndex& (0+255),w,b
  8702  0012F6  A0D8               	btfss	status,0,c
  8703  0012F8  D005               	goto	i2l7505
  8704  0012FA                     i2u1140_40:
  8705                           
  8706                           ; BSR set to: 0
  8707                           ;main.c: 304: menuIndex--;
  8708  0012FA  0100               	movlb	0	; () banked
  8709  0012FC  07F5               	decf	_menuIndex& (0+255),f,b
  8710  0012FE  A0D8               	btfss	status,0,c
  8711  001300  07F6               	decf	(_menuIndex+1)& (0+255),f,b
  8712  001302  D23C               	goto	i2l324
  8713  001304                     i2l7505:
  8714                           
  8715                           ;main.c: 305: else if (keys[keypress]=='C'){
  8716  001304  503D               	movf	keypressed@keypress,w,c
  8717  001306  0D01               	mullw	1
  8718  001308  0ED5               	movlw	low _keys
  8719  00130A  24F3               	addwf	prodl,w,c
  8720  00130C  6EF6               	movwf	tblptrl,c
  8721  00130E  0EFE               	movlw	high _keys
  8722  001310  20F4               	addwfc	prodh,w,c
  8723  001312  6EF7               	movwf	tblptrh,c
  8724  001314                     	if	1	;There are 3 active tblptr bytes
  8725  001314  6AF8               	clrf	tblptru,c
  8726  001316  0E00               	movlw	low (__mediumconst shr (0+16))
  8727  001318  22F8               	addwfc	tblptru,f,c
  8728  00131A                     	endif
  8729  00131A  0008               	tblrd		*
  8730  00131C  50F5               	movf	tablat,w,c
  8731  00131E  0A43               	xorlw	67
  8732  001320  B4D8               	btfsc	status,2,c
  8733  001322  D01D               	goto	i2l7525
  8734  001324  D22B               	goto	i2l324
  8735  001326                     i2l7509:
  8736  001326  0E73               	movlw	115
  8737  001328  D20A               	goto	L7
  8738  00132A                     i2l7511:
  8739  00132A  0E6C               	movlw	108
  8740  00132C  D208               	goto	L7
  8741  00132E                     i2l7513:
  8742  00132E  0E63               	movlw	99
  8743  001330  D206               	goto	L7
  8744  001332                     i2l7515:
  8745                           
  8746                           ;main.c: 314: lcdInst(0b10000000);;
  8747  001332  0E80               	movlw	128
  8748  001334  ECAA  F017         	call	i2_lcdInst
  8749                           
  8750                           ;main.c: 315: printf("invalid");
  8751  001338  0EE4               	movlw	low STR_15
  8752  00133A  6E23               	movwf	i2printf@f,c
  8753  00133C  0EFF               	movlw	high STR_15
  8754  00133E  6E24               	movwf	i2printf@f+1,c
  8755  001340  ECCF  F016         	call	i2_printf	;wreg free
  8756                           
  8757                           ;main.c: 316: lcdInst(0b11000000);;
  8758  001344  0EC0               	movlw	192
  8759  001346  ECAA  F017         	call	i2_lcdInst
  8760                           
  8761                           ;main.c: 317: printf("menu selection");
  8762  00134A  0EC7               	movlw	low STR_16
  8763  00134C  6E23               	movwf	i2printf@f,c
  8764  00134E  0EFF               	movlw	high STR_16
  8765  001350  6E24               	movwf	i2printf@f+1,c
  8766  001352  ECCF  F016         	call	i2_printf	;wreg free
  8767                           
  8768                           ;main.c: 318: lcdInst(0b10010000);;
  8769  001356  0E90               	movlw	144
  8770  001358  ECAA  F017         	call	i2_lcdInst
  8771                           
  8772                           ;main.c: 320: }
  8773                           
  8774                           ;main.c: 319: break;
  8775  00135C  D20F               	goto	i2l324
  8776  00135E                     i2l7525:
  8777  00135E  C0F5  F02B         	movff	_menuIndex,??_keypressed
  8778  001362  C0F6  F02C         	movff	_menuIndex+1,??_keypressed+1
  8779                           
  8780                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8781                           ; Switch size 1, requested type "space"
  8782                           ; Number of cases is 1, Range of values is 0 to 0
  8783                           ; switch strategies available:
  8784                           ; Name         Instructions Cycles
  8785                           ; simple_byte            4     3 (average)
  8786                           ;	Chosen strategy is simple_byte
  8787  001366  502C               	movf	??_keypressed+1,w,c
  8788  001368  0A00               	xorlw	0	; case 0
  8789  00136A  A4D8               	btfss	status,2,c
  8790  00136C  D7E2               	goto	i2l7515
  8791                           
  8792                           ; Switch size 1, requested type "space"
  8793                           ; Number of cases is 3, Range of values is 1 to 3
  8794                           ; switch strategies available:
  8795                           ; Name         Instructions Cycles
  8796                           ; simple_byte           10     6 (average)
  8797                           ;	Chosen strategy is simple_byte
  8798  00136E  502B               	movf	??_keypressed,w,c
  8799  001370  0A01               	xorlw	1	; case 1
  8800  001372  B4D8               	btfsc	status,2,c
  8801  001374  D7D8               	goto	i2l7509
  8802  001376  0A03               	xorlw	3	; case 2
  8803  001378  B4D8               	btfsc	status,2,c
  8804  00137A  D7D7               	goto	i2l7511
  8805  00137C  0A01               	xorlw	1	; case 3
  8806  00137E  B4D8               	btfsc	status,2,c
  8807  001380  D7D6               	goto	i2l7513
  8808  001382  D7D7               	goto	i2l7515
  8809  001384                     i2l7529:
  8810                           
  8811                           ; BSR set to: 0
  8812                           ;main.c: 328: for (i=0;i<7;i++)
  8813  001384  0E00               	movlw	0
  8814  001386  6E3C               	movwf	keypressed@i+1,c
  8815  001388  0E00               	movlw	0
  8816  00138A  6E3B               	movwf	keypressed@i,c
  8817  00138C                     i2l7531:
  8818                           
  8819                           ; BSR set to: 0
  8820  00138C  BE3C               	btfsc	keypressed@i+1,7,c
  8821  00138E  D006               	goto	i2l7535
  8822  001390  503C               	movf	keypressed@i+1,w,c
  8823  001392  E11D               	bnz	i2l7541
  8824  001394  0E07               	movlw	7
  8825  001396  5C3B               	subwf	keypressed@i,w,c
  8826  001398  B0D8               	btfsc	status,0,c
  8827  00139A  D019               	goto	i2l7541
  8828  00139C                     i2l7535:
  8829                           
  8830                           ;main.c: 329: startTime[i]=time_i[i];
  8831  00139C  90D8               	bcf	status,0,c
  8832  00139E  343B               	rlcf	keypressed@i,w,c
  8833  0013A0  6ED9               	movwf	fsr2l,c
  8834  0013A2  343C               	rlcf	keypressed@i+1,w,c
  8835  0013A4  6EDA               	movwf	fsr2h,c
  8836  0013A6  0EBA               	movlw	low _time_i
  8837  0013A8  26D9               	addwf	fsr2l,f,c
  8838  0013AA  0E00               	movlw	high _time_i
  8839  0013AC  22DA               	addwfc	fsr2h,f,c
  8840  0013AE  90D8               	bcf	status,0,c
  8841  0013B0  343B               	rlcf	keypressed@i,w,c
  8842  0013B2  6EE1               	movwf	fsr1l,c
  8843  0013B4  343C               	rlcf	keypressed@i+1,w,c
  8844  0013B6  6EE2               	movwf	fsr1h,c
  8845  0013B8  0E4C               	movlw	low _startTime
  8846  0013BA  26E1               	addwf	fsr1l,f,c
  8847  0013BC  0E00               	movlw	high _startTime
  8848  0013BE  22E2               	addwfc	fsr1h,f,c
  8849  0013C0  CFDE FFE6          	movff	postinc2,postinc1
  8850  0013C4  CFDD FFE5          	movff	postdec2,postdec1
  8851  0013C8  4A3B               	infsnz	keypressed@i,f,c
  8852  0013CA  2A3C               	incf	keypressed@i+1,f,c
  8853  0013CC  D7DF               	goto	i2l7531
  8854  0013CE                     i2l7541:
  8855                           
  8856                           ;main.c: 331: if (keys[keypress]=='B'&&logIndex<events){
  8857  0013CE  503D               	movf	keypressed@keypress,w,c
  8858  0013D0  0D01               	mullw	1
  8859  0013D2  0ED5               	movlw	low _keys
  8860  0013D4  24F3               	addwf	prodl,w,c
  8861  0013D6  6EF6               	movwf	tblptrl,c
  8862  0013D8  0EFE               	movlw	high _keys
  8863  0013DA  20F4               	addwfc	prodh,w,c
  8864  0013DC  6EF7               	movwf	tblptrh,c
  8865  0013DE                     	if	1	;There are 3 active tblptr bytes
  8866  0013DE  6AF8               	clrf	tblptru,c
  8867  0013E0  0E00               	movlw	low (__mediumconst shr (0+16))
  8868  0013E2  22F8               	addwfc	tblptru,f,c
  8869  0013E4                     	endif
  8870  0013E4  0008               	tblrd		*
  8871  0013E6  50F5               	movf	tablat,w,c
  8872  0013E8  0A42               	xorlw	66
  8873  0013EA  A4D8               	btfss	status,2,c
  8874  0013EC  D012               	goto	i2l7547
  8875  0013EE  0100               	movlb	0	; () banked
  8876  0013F0  51F1               	movf	_events& (0+255),w,b
  8877  0013F2  0100               	movlb	0	; () banked
  8878  0013F4  5DF3               	subwf	_logIndex& (0+255),w,b
  8879  0013F6  0100               	movlb	0	; () banked
  8880  0013F8  51F4               	movf	(_logIndex+1)& (0+255),w,b
  8881  0013FA  0A80               	xorlw	128
  8882  0013FC  6E2B               	movwf	??_keypressed& (0+255),c
  8883  0013FE  0100               	movlb	0	; () banked
  8884  001400  51F2               	movf	(_events+1)& (0+255),w,b
  8885  001402  0A80               	xorlw	128
  8886  001404  582B               	subwfb	??_keypressed& (0+255),w,c
  8887  001406  B0D8               	btfsc	status,0,c
  8888  001408  D004               	goto	i2l7547
  8889                           
  8890                           ; BSR set to: 0
  8891                           ;main.c: 335: logIndex++;
  8892  00140A  0100               	movlb	0	; () banked
  8893  00140C  4BF3               	infsnz	_logIndex& (0+255),f,b
  8894  00140E  2BF4               	incf	(_logIndex+1)& (0+255),f,b
  8895                           
  8896                           ;main.c: 336: }
  8897  001410  D1B5               	goto	i2l324
  8898  001412                     i2l7547:
  8899                           
  8900                           ;main.c: 337: else if (keys[keypress]=='A'&&logIndex>1)
  8901  001412  503D               	movf	keypressed@keypress,w,c
  8902  001414  0D01               	mullw	1
  8903  001416  0ED5               	movlw	low _keys
  8904  001418  24F3               	addwf	prodl,w,c
  8905  00141A  6EF6               	movwf	tblptrl,c
  8906  00141C  0EFE               	movlw	high _keys
  8907  00141E  20F4               	addwfc	prodh,w,c
  8908  001420  6EF7               	movwf	tblptrh,c
  8909  001422                     	if	1	;There are 3 active tblptr bytes
  8910  001422  6AF8               	clrf	tblptru,c
  8911  001424  0E00               	movlw	low (__mediumconst shr (0+16))
  8912  001426  22F8               	addwfc	tblptru,f,c
  8913  001428                     	endif
  8914  001428  0008               	tblrd		*
  8915  00142A  50F5               	movf	tablat,w,c
  8916  00142C  0A41               	xorlw	65
  8917  00142E  A4D8               	btfss	status,2,c
  8918  001430  D077               	goto	i2l7581
  8919  001432  0100               	movlb	0	; () banked
  8920  001434  BFF4               	btfsc	(_logIndex+1)& (0+255),7,b
  8921  001436  D074               	goto	i2l7581
  8922  001438  0100               	movlb	0	; () banked
  8923  00143A  51F4               	movf	(_logIndex+1)& (0+255),w,b
  8924  00143C  E105               	bnz	i2u1147_40
  8925  00143E  0E02               	movlw	2
  8926  001440  0100               	movlb	0	; () banked
  8927  001442  5DF3               	subwf	_logIndex& (0+255),w,b
  8928  001444  A0D8               	btfss	status,0,c
  8929  001446  D06C               	goto	i2l7581
  8930  001448                     i2u1147_40:
  8931                           
  8932                           ; BSR set to: 0
  8933                           ;main.c: 338: logIndex--;
  8934  001448  0100               	movlb	0	; () banked
  8935  00144A  07F3               	decf	_logIndex& (0+255),f,b
  8936  00144C  A0D8               	btfss	status,0,c
  8937  00144E  07F4               	decf	(_logIndex+1)& (0+255),f,b
  8938  001450  D195               	goto	i2l324
  8939  001452                     i2l7557:
  8940                           
  8941                           ; BSR set to: 0
  8942                           ;main.c: 343: for (i=0;i<7;i++)
  8943  001452  0E00               	movlw	0
  8944  001454  6E3C               	movwf	keypressed@i+1,c
  8945  001456  0E00               	movlw	0
  8946  001458  6E3B               	movwf	keypressed@i,c
  8947  00145A                     i2l7559:
  8948                           
  8949                           ; BSR set to: 0
  8950  00145A  BE3C               	btfsc	keypressed@i+1,7,c
  8951  00145C  D006               	goto	i2l7563
  8952  00145E  503C               	movf	keypressed@i+1,w,c
  8953  001460  E11D               	bnz	i2l7569
  8954  001462  0E07               	movlw	7
  8955  001464  5C3B               	subwf	keypressed@i,w,c
  8956  001466  B0D8               	btfsc	status,0,c
  8957  001468  D019               	goto	i2l7569
  8958  00146A                     i2l7563:
  8959                           
  8960                           ;main.c: 344: startTime[i]=time_i[i];
  8961  00146A  90D8               	bcf	status,0,c
  8962  00146C  343B               	rlcf	keypressed@i,w,c
  8963  00146E  6ED9               	movwf	fsr2l,c
  8964  001470  343C               	rlcf	keypressed@i+1,w,c
  8965  001472  6EDA               	movwf	fsr2h,c
  8966  001474  0EBA               	movlw	low _time_i
  8967  001476  26D9               	addwf	fsr2l,f,c
  8968  001478  0E00               	movlw	high _time_i
  8969  00147A  22DA               	addwfc	fsr2h,f,c
  8970  00147C  90D8               	bcf	status,0,c
  8971  00147E  343B               	rlcf	keypressed@i,w,c
  8972  001480  6EE1               	movwf	fsr1l,c
  8973  001482  343C               	rlcf	keypressed@i+1,w,c
  8974  001484  6EE2               	movwf	fsr1h,c
  8975  001486  0E4C               	movlw	low _startTime
  8976  001488  26E1               	addwf	fsr1l,f,c
  8977  00148A  0E00               	movlw	high _startTime
  8978  00148C  22E2               	addwfc	fsr1h,f,c
  8979  00148E  CFDE FFE6          	movff	postinc2,postinc1
  8980  001492  CFDD FFE5          	movff	postdec2,postdec1
  8981  001496  4A3B               	infsnz	keypressed@i,f,c
  8982  001498  2A3C               	incf	keypressed@i+1,f,c
  8983  00149A  D7DF               	goto	i2l7559
  8984  00149C                     i2l7569:
  8985                           
  8986                           ;main.c: 346: if (keys[keypress]=='B'&&creditIndex<creditSize)
  8987  00149C  503D               	movf	keypressed@keypress,w,c
  8988  00149E  0D01               	mullw	1
  8989  0014A0  0ED5               	movlw	low _keys
  8990  0014A2  24F3               	addwf	prodl,w,c
  8991  0014A4  6EF6               	movwf	tblptrl,c
  8992  0014A6  0EFE               	movlw	high _keys
  8993  0014A8  20F4               	addwfc	prodh,w,c
  8994  0014AA  6EF7               	movwf	tblptrh,c
  8995  0014AC                     	if	1	;There are 3 active tblptr bytes
  8996  0014AC  6AF8               	clrf	tblptru,c
  8997  0014AE  0E00               	movlw	low (__mediumconst shr (0+16))
  8998  0014B0  22F8               	addwfc	tblptru,f,c
  8999  0014B2                     	endif
  9000  0014B2  0008               	tblrd		*
  9001  0014B4  50F5               	movf	tablat,w,c
  9002  0014B6  0A42               	xorlw	66
  9003  0014B8  A4D8               	btfss	status,2,c
  9004  0014BA  D012               	goto	i2l7575
  9005  0014BC  0100               	movlb	0	; () banked
  9006  0014BE  51EB               	movf	_creditSize& (0+255),w,b
  9007  0014C0  0100               	movlb	0	; () banked
  9008  0014C2  5DE9               	subwf	_creditIndex& (0+255),w,b
  9009  0014C4  0100               	movlb	0	; () banked
  9010  0014C6  51EA               	movf	(_creditIndex+1)& (0+255),w,b
  9011  0014C8  0A80               	xorlw	128
  9012  0014CA  6E2B               	movwf	??_keypressed& (0+255),c
  9013  0014CC  0100               	movlb	0	; () banked
  9014  0014CE  51EC               	movf	(_creditSize+1)& (0+255),w,b
  9015  0014D0  0A80               	xorlw	128
  9016  0014D2  582B               	subwfb	??_keypressed& (0+255),w,c
  9017  0014D4  B0D8               	btfsc	status,0,c
  9018  0014D6  D004               	goto	i2l7575
  9019                           
  9020                           ; BSR set to: 0
  9021                           ;main.c: 347: creditIndex++;
  9022  0014D8  0100               	movlb	0	; () banked
  9023  0014DA  4BE9               	infsnz	_creditIndex& (0+255),f,b
  9024  0014DC  2BEA               	incf	(_creditIndex+1)& (0+255),f,b
  9025  0014DE  D14E               	goto	i2l324
  9026  0014E0                     i2l7575:
  9027                           
  9028                           ;main.c: 348: else if (keys[keypress]=='A'&&creditIndex>1)
  9029  0014E0  503D               	movf	keypressed@keypress,w,c
  9030  0014E2  0D01               	mullw	1
  9031  0014E4  0ED5               	movlw	low _keys
  9032  0014E6  24F3               	addwf	prodl,w,c
  9033  0014E8  6EF6               	movwf	tblptrl,c
  9034  0014EA  0EFE               	movlw	high _keys
  9035  0014EC  20F4               	addwfc	prodh,w,c
  9036  0014EE  6EF7               	movwf	tblptrh,c
  9037  0014F0                     	if	1	;There are 3 active tblptr bytes
  9038  0014F0  6AF8               	clrf	tblptru,c
  9039  0014F2  0E00               	movlw	low (__mediumconst shr (0+16))
  9040  0014F4  22F8               	addwfc	tblptru,f,c
  9041  0014F6                     	endif
  9042  0014F6  0008               	tblrd		*
  9043  0014F8  50F5               	movf	tablat,w,c
  9044  0014FA  0A41               	xorlw	65
  9045  0014FC  A4D8               	btfss	status,2,c
  9046  0014FE  D010               	goto	i2l7581
  9047  001500  0100               	movlb	0	; () banked
  9048  001502  BFEA               	btfsc	(_creditIndex+1)& (0+255),7,b
  9049  001504  D00D               	goto	i2l7581
  9050  001506  0100               	movlb	0	; () banked
  9051  001508  51EA               	movf	(_creditIndex+1)& (0+255),w,b
  9052  00150A  E105               	bnz	i2u1154_40
  9053  00150C  0E02               	movlw	2
  9054  00150E  0100               	movlb	0	; () banked
  9055  001510  5DE9               	subwf	_creditIndex& (0+255),w,b
  9056  001512  A0D8               	btfss	status,0,c
  9057  001514  D005               	goto	i2l7581
  9058  001516                     i2u1154_40:
  9059                           
  9060                           ; BSR set to: 0
  9061                           ;main.c: 349: creditIndex--;
  9062  001516  0100               	movlb	0	; () banked
  9063  001518  07E9               	decf	_creditIndex& (0+255),f,b
  9064  00151A  A0D8               	btfss	status,0,c
  9065  00151C  07EA               	decf	(_creditIndex+1)& (0+255),f,b
  9066  00151E  D12E               	goto	i2l324
  9067  001520                     i2l7581:
  9068                           
  9069                           ;main.c: 350: else if(keys[keypress]=='D')
  9070  001520  503D               	movf	keypressed@keypress,w,c
  9071  001522  0D01               	mullw	1
  9072  001524  0ED5               	movlw	low _keys
  9073  001526  24F3               	addwf	prodl,w,c
  9074  001528  6EF6               	movwf	tblptrl,c
  9075  00152A  0EFE               	movlw	high _keys
  9076  00152C  20F4               	addwfc	prodh,w,c
  9077  00152E  6EF7               	movwf	tblptrh,c
  9078  001530                     	if	1	;There are 3 active tblptr bytes
  9079  001530  6AF8               	clrf	tblptru,c
  9080  001532  0E00               	movlw	low (__mediumconst shr (0+16))
  9081  001534  22F8               	addwfc	tblptru,f,c
  9082  001536                     	endif
  9083  001536  0008               	tblrd		*
  9084  001538  50F5               	movf	tablat,w,c
  9085  00153A  0A44               	xorlw	68
  9086  00153C  A4D8               	btfss	status,2,c
  9087  00153E  D11E               	goto	i2l324
  9088  001540                     i2l7583:
  9089                           
  9090                           ;main.c: 351: nstate='m';
  9091  001540  0E6D               	movlw	109
  9092  001542  D0FD               	goto	L7
  9093  001544                     i2l7585:
  9094                           
  9095                           ; BSR set to: 0
  9096                           ;main.c: 354: if (keys[keypress]=='1'){
  9097  001544  503D               	movf	keypressed@keypress,w,c
  9098  001546  0D01               	mullw	1
  9099  001548  0ED5               	movlw	low _keys
  9100  00154A  24F3               	addwf	prodl,w,c
  9101  00154C  6EF6               	movwf	tblptrl,c
  9102  00154E  0EFE               	movlw	high _keys
  9103  001550  20F4               	addwfc	prodh,w,c
  9104  001552  6EF7               	movwf	tblptrh,c
  9105  001554                     	if	1	;There are 3 active tblptr bytes
  9106  001554  6AF8               	clrf	tblptru,c
  9107  001556  0E00               	movlw	low (__mediumconst shr (0+16))
  9108  001558  22F8               	addwfc	tblptru,f,c
  9109  00155A                     	endif
  9110  00155A  0008               	tblrd		*
  9111  00155C  50F5               	movf	tablat,w,c
  9112  00155E  0A31               	xorlw	49
  9113  001560  A4D8               	btfss	status,2,c
  9114  001562  D012               	goto	i2l7591
  9115                           
  9116                           ; BSR set to: 0
  9117                           ;main.c: 355: eskaNoCap++;
  9118  001564  0100               	movlb	0	; () banked
  9119  001566  4BD9               	infsnz	_eskaNoCap& (0+255),f,b
  9120  001568  2BDA               	incf	(_eskaNoCap+1)& (0+255),f,b
  9121                           
  9122                           ; BSR set to: 0
  9123                           ;main.c: 356: eskaNoCap%=100;
  9124  00156A  C0D9  F001         	movff	_eskaNoCap,i2___awmod@dividend
  9125  00156E  C0DA  F002         	movff	_eskaNoCap+1,i2___awmod@dividend+1
  9126  001572  0E00               	movlw	0
  9127  001574  6E04               	movwf	i2___awmod@divisor+1,c
  9128  001576  0E64               	movlw	100
  9129  001578  6E03               	movwf	i2___awmod@divisor,c
  9130  00157A  EC6F  F014         	call	i2___awmod	;wreg free
  9131  00157E  C001  F0D9         	movff	?i2___awmod,_eskaNoCap
  9132  001582  C002  F0DA         	movff	?i2___awmod+1,_eskaNoCap+1
  9133                           
  9134                           ;main.c: 357: }
  9135  001586  D0FA               	goto	i2l324
  9136  001588                     i2l7591:
  9137                           
  9138                           ;main.c: 358: else if (keys[keypress]=='2'){
  9139  001588  503D               	movf	keypressed@keypress,w,c
  9140  00158A  0D01               	mullw	1
  9141  00158C  0ED5               	movlw	low _keys
  9142  00158E  24F3               	addwf	prodl,w,c
  9143  001590  6EF6               	movwf	tblptrl,c
  9144  001592  0EFE               	movlw	high _keys
  9145  001594  20F4               	addwfc	prodh,w,c
  9146  001596  6EF7               	movwf	tblptrh,c
  9147  001598                     	if	1	;There are 3 active tblptr bytes
  9148  001598  6AF8               	clrf	tblptru,c
  9149  00159A  0E00               	movlw	low (__mediumconst shr (0+16))
  9150  00159C  22F8               	addwfc	tblptru,f,c
  9151  00159E                     	endif
  9152  00159E  0008               	tblrd		*
  9153  0015A0  50F5               	movf	tablat,w,c
  9154  0015A2  0A32               	xorlw	50
  9155  0015A4  A4D8               	btfss	status,2,c
  9156  0015A6  D012               	goto	i2l7597
  9157                           
  9158                           ;main.c: 359: eskaWCap++;
  9159  0015A8  0100               	movlb	0	; () banked
  9160  0015AA  4BDB               	infsnz	_eskaWCap& (0+255),f,b
  9161  0015AC  2BDC               	incf	(_eskaWCap+1)& (0+255),f,b
  9162                           
  9163                           ; BSR set to: 0
  9164                           ;main.c: 360: eskaWCap%=100;
  9165  0015AE  C0DB  F001         	movff	_eskaWCap,i2___awmod@dividend
  9166  0015B2  C0DC  F002         	movff	_eskaWCap+1,i2___awmod@dividend+1
  9167  0015B6  0E00               	movlw	0
  9168  0015B8  6E04               	movwf	i2___awmod@divisor+1,c
  9169  0015BA  0E64               	movlw	100
  9170  0015BC  6E03               	movwf	i2___awmod@divisor,c
  9171  0015BE  EC6F  F014         	call	i2___awmod	;wreg free
  9172  0015C2  C001  F0DB         	movff	?i2___awmod,_eskaWCap
  9173  0015C6  C002  F0DC         	movff	?i2___awmod+1,_eskaWCap+1
  9174                           
  9175                           ;main.c: 361: }
  9176  0015CA  D0D8               	goto	i2l324
  9177  0015CC                     i2l7597:
  9178                           
  9179                           ;main.c: 362: else if (keys[keypress]=='4'){
  9180  0015CC  503D               	movf	keypressed@keypress,w,c
  9181  0015CE  0D01               	mullw	1
  9182  0015D0  0ED5               	movlw	low _keys
  9183  0015D2  24F3               	addwf	prodl,w,c
  9184  0015D4  6EF6               	movwf	tblptrl,c
  9185  0015D6  0EFE               	movlw	high _keys
  9186  0015D8  20F4               	addwfc	prodh,w,c
  9187  0015DA  6EF7               	movwf	tblptrh,c
  9188  0015DC                     	if	1	;There are 3 active tblptr bytes
  9189  0015DC  6AF8               	clrf	tblptru,c
  9190  0015DE  0E00               	movlw	low (__mediumconst shr (0+16))
  9191  0015E0  22F8               	addwfc	tblptru,f,c
  9192  0015E2                     	endif
  9193  0015E2  0008               	tblrd		*
  9194  0015E4  50F5               	movf	tablat,w,c
  9195  0015E6  0A34               	xorlw	52
  9196  0015E8  A4D8               	btfss	status,2,c
  9197  0015EA  D012               	goto	i2l7603
  9198                           
  9199                           ;main.c: 363: yopNoCap++;
  9200  0015EC  0100               	movlb	0	; () banked
  9201  0015EE  4BE3               	infsnz	_yopNoCap& (0+255),f,b
  9202  0015F0  2BE4               	incf	(_yopNoCap+1)& (0+255),f,b
  9203                           
  9204                           ; BSR set to: 0
  9205                           ;main.c: 364: yopNoCap%=100;
  9206  0015F2  C0E3  F001         	movff	_yopNoCap,i2___awmod@dividend
  9207  0015F6  C0E4  F002         	movff	_yopNoCap+1,i2___awmod@dividend+1
  9208  0015FA  0E00               	movlw	0
  9209  0015FC  6E04               	movwf	i2___awmod@divisor+1,c
  9210  0015FE  0E64               	movlw	100
  9211  001600  6E03               	movwf	i2___awmod@divisor,c
  9212  001602  EC6F  F014         	call	i2___awmod	;wreg free
  9213  001606  C001  F0E3         	movff	?i2___awmod,_yopNoCap
  9214  00160A  C002  F0E4         	movff	?i2___awmod+1,_yopNoCap+1
  9215                           
  9216                           ;main.c: 365: }
  9217  00160E  D0B6               	goto	i2l324
  9218  001610                     i2l7603:
  9219                           
  9220                           ;main.c: 366: else if (keys[keypress]=='5'){
  9221  001610  503D               	movf	keypressed@keypress,w,c
  9222  001612  0D01               	mullw	1
  9223  001614  0ED5               	movlw	low _keys
  9224  001616  24F3               	addwf	prodl,w,c
  9225  001618  6EF6               	movwf	tblptrl,c
  9226  00161A  0EFE               	movlw	high _keys
  9227  00161C  20F4               	addwfc	prodh,w,c
  9228  00161E  6EF7               	movwf	tblptrh,c
  9229  001620                     	if	1	;There are 3 active tblptr bytes
  9230  001620  6AF8               	clrf	tblptru,c
  9231  001622  0E00               	movlw	low (__mediumconst shr (0+16))
  9232  001624  22F8               	addwfc	tblptru,f,c
  9233  001626                     	endif
  9234  001626  0008               	tblrd		*
  9235  001628  50F5               	movf	tablat,w,c
  9236  00162A  0A35               	xorlw	53
  9237  00162C  A4D8               	btfss	status,2,c
  9238  00162E  D012               	goto	i2l7609
  9239                           
  9240                           ;main.c: 367: yopWCap++;
  9241  001630  0100               	movlb	0	; () banked
  9242  001632  4BE5               	infsnz	_yopWCap& (0+255),f,b
  9243  001634  2BE6               	incf	(_yopWCap+1)& (0+255),f,b
  9244                           
  9245                           ; BSR set to: 0
  9246                           ;main.c: 368: yopWCap%=100;
  9247  001636  C0E5  F001         	movff	_yopWCap,i2___awmod@dividend
  9248  00163A  C0E6  F002         	movff	_yopWCap+1,i2___awmod@dividend+1
  9249  00163E  0E00               	movlw	0
  9250  001640  6E04               	movwf	i2___awmod@divisor+1,c
  9251  001642  0E64               	movlw	100
  9252  001644  6E03               	movwf	i2___awmod@divisor,c
  9253  001646  EC6F  F014         	call	i2___awmod	;wreg free
  9254  00164A  C001  F0E5         	movff	?i2___awmod,_yopWCap
  9255  00164E  C002  F0E6         	movff	?i2___awmod+1,_yopWCap+1
  9256                           
  9257                           ;main.c: 369: }
  9258  001652  D094               	goto	i2l324
  9259  001654                     i2l7609:
  9260                           
  9261                           ;main.c: 370: else if (keys[keypress]=='7'||keys[keypress]=='8')
  9262  001654  503D               	movf	keypressed@keypress,w,c
  9263  001656  0D01               	mullw	1
  9264  001658  0ED5               	movlw	low _keys
  9265  00165A  24F3               	addwf	prodl,w,c
  9266  00165C  6EF6               	movwf	tblptrl,c
  9267  00165E  0EFE               	movlw	high _keys
  9268  001660  20F4               	addwfc	prodh,w,c
  9269  001662  6EF7               	movwf	tblptrh,c
  9270  001664                     	if	1	;There are 3 active tblptr bytes
  9271  001664  6AF8               	clrf	tblptru,c
  9272  001666  0E00               	movlw	low (__mediumconst shr (0+16))
  9273  001668  22F8               	addwfc	tblptru,f,c
  9274  00166A                     	endif
  9275  00166A  0008               	tblrd		*
  9276  00166C  50F5               	movf	tablat,w,c
  9277  00166E  0A37               	xorlw	55
  9278  001670  B4D8               	btfsc	status,2,c
  9279  001672  D010               	goto	i2l7613
  9280  001674  503D               	movf	keypressed@keypress,w,c
  9281  001676  0D01               	mullw	1
  9282  001678  0ED5               	movlw	low _keys
  9283  00167A  24F3               	addwf	prodl,w,c
  9284  00167C  6EF6               	movwf	tblptrl,c
  9285  00167E  0EFE               	movlw	high _keys
  9286  001680  20F4               	addwfc	prodh,w,c
  9287  001682  6EF7               	movwf	tblptrh,c
  9288  001684                     	if	1	;There are 3 active tblptr bytes
  9289  001684  6AF8               	clrf	tblptru,c
  9290  001686  0E00               	movlw	low (__mediumconst shr (0+16))
  9291  001688  22F8               	addwfc	tblptru,f,c
  9292  00168A                     	endif
  9293  00168A  0008               	tblrd		*
  9294  00168C  50F5               	movf	tablat,w,c
  9295  00168E  0A38               	xorlw	56
  9296  001690  A4D8               	btfss	status,2,c
  9297  001692  D074               	goto	i2l324
  9298  001694                     i2l7613:
  9299                           
  9300                           ;main.c: 371: nstate='e';
  9301  001694  0E65               	movlw	101
  9302  001696  D053               	goto	L7
  9303  001698                     i2l7615:
  9304                           
  9305                           ; BSR set to: 0
  9306                           ;main.c: 374: if (keys[keypress]=='B'&&endIndex<endSize)
  9307  001698  503D               	movf	keypressed@keypress,w,c
  9308  00169A  0D01               	mullw	1
  9309  00169C  0ED5               	movlw	low _keys
  9310  00169E  24F3               	addwf	prodl,w,c
  9311  0016A0  6EF6               	movwf	tblptrl,c
  9312  0016A2  0EFE               	movlw	high _keys
  9313  0016A4  20F4               	addwfc	prodh,w,c
  9314  0016A6  6EF7               	movwf	tblptrh,c
  9315  0016A8                     	if	1	;There are 3 active tblptr bytes
  9316  0016A8  6AF8               	clrf	tblptru,c
  9317  0016AA  0E00               	movlw	low (__mediumconst shr (0+16))
  9318  0016AC  22F8               	addwfc	tblptru,f,c
  9319  0016AE                     	endif
  9320  0016AE  0008               	tblrd		*
  9321  0016B0  50F5               	movf	tablat,w,c
  9322  0016B2  0A42               	xorlw	66
  9323  0016B4  A4D8               	btfss	status,2,c
  9324  0016B6  D012               	goto	i2l7621
  9325                           
  9326                           ; BSR set to: 0
  9327  0016B8  0100               	movlb	0	; () banked
  9328  0016BA  51EF               	movf	_endSize& (0+255),w,b
  9329  0016BC  0100               	movlb	0	; () banked
  9330  0016BE  5DED               	subwf	_endIndex& (0+255),w,b
  9331  0016C0  0100               	movlb	0	; () banked
  9332  0016C2  51EE               	movf	(_endIndex+1)& (0+255),w,b
  9333  0016C4  0A80               	xorlw	128
  9334  0016C6  6E2B               	movwf	??_keypressed& (0+255),c
  9335  0016C8  0100               	movlb	0	; () banked
  9336  0016CA  51F0               	movf	(_endSize+1)& (0+255),w,b
  9337  0016CC  0A80               	xorlw	128
  9338  0016CE  582B               	subwfb	??_keypressed& (0+255),w,c
  9339  0016D0  B0D8               	btfsc	status,0,c
  9340  0016D2  D004               	goto	i2l7621
  9341                           
  9342                           ; BSR set to: 0
  9343                           ;main.c: 375: endIndex++;
  9344  0016D4  0100               	movlb	0	; () banked
  9345  0016D6  4BED               	infsnz	_endIndex& (0+255),f,b
  9346  0016D8  2BEE               	incf	(_endIndex+1)& (0+255),f,b
  9347  0016DA  D050               	goto	i2l324
  9348  0016DC                     i2l7621:
  9349                           
  9350                           ; BSR set to: 0
  9351                           ;main.c: 376: else if (keys[keypress]=='A'&&endIndex>1)
  9352  0016DC  503D               	movf	keypressed@keypress,w,c
  9353  0016DE  0D01               	mullw	1
  9354  0016E0  0ED5               	movlw	low _keys
  9355  0016E2  24F3               	addwf	prodl,w,c
  9356  0016E4  6EF6               	movwf	tblptrl,c
  9357  0016E6  0EFE               	movlw	high _keys
  9358  0016E8  20F4               	addwfc	prodh,w,c
  9359  0016EA  6EF7               	movwf	tblptrh,c
  9360  0016EC                     	if	1	;There are 3 active tblptr bytes
  9361  0016EC  6AF8               	clrf	tblptru,c
  9362  0016EE  0E00               	movlw	low (__mediumconst shr (0+16))
  9363  0016F0  22F8               	addwfc	tblptru,f,c
  9364  0016F2                     	endif
  9365  0016F2  0008               	tblrd		*
  9366  0016F4  50F5               	movf	tablat,w,c
  9367  0016F6  0A41               	xorlw	65
  9368  0016F8  A4D8               	btfss	status,2,c
  9369  0016FA  D010               	goto	i2l7627
  9370                           
  9371                           ; BSR set to: 0
  9372  0016FC  0100               	movlb	0	; () banked
  9373  0016FE  BFEE               	btfsc	(_endIndex+1)& (0+255),7,b
  9374  001700  D00D               	goto	i2l7627
  9375  001702  0100               	movlb	0	; () banked
  9376  001704  51EE               	movf	(_endIndex+1)& (0+255),w,b
  9377  001706  E105               	bnz	i2u1165_40
  9378  001708  0E02               	movlw	2
  9379  00170A  0100               	movlb	0	; () banked
  9380  00170C  5DED               	subwf	_endIndex& (0+255),w,b
  9381  00170E  A0D8               	btfss	status,0,c
  9382  001710  D005               	goto	i2l7627
  9383  001712                     i2u1165_40:
  9384                           
  9385                           ; BSR set to: 0
  9386                           ;main.c: 377: endIndex--;
  9387  001712  0100               	movlb	0	; () banked
  9388  001714  07ED               	decf	_endIndex& (0+255),f,b
  9389  001716  A0D8               	btfss	status,0,c
  9390  001718  07EE               	decf	(_endIndex+1)& (0+255),f,b
  9391  00171A  D030               	goto	i2l324
  9392  00171C                     i2l7627:
  9393                           
  9394                           ; BSR set to: 0
  9395                           ;main.c: 378: else if (keys[keypress]=='C')
  9396  00171C  503D               	movf	keypressed@keypress,w,c
  9397  00171E  0D01               	mullw	1
  9398  001720  0ED5               	movlw	low _keys
  9399  001722  24F3               	addwf	prodl,w,c
  9400  001724  6EF6               	movwf	tblptrl,c
  9401  001726  0EFE               	movlw	high _keys
  9402  001728  20F4               	addwfc	prodh,w,c
  9403  00172A  6EF7               	movwf	tblptrh,c
  9404  00172C                     	if	1	;There are 3 active tblptr bytes
  9405  00172C  6AF8               	clrf	tblptru,c
  9406  00172E  0E00               	movlw	low (__mediumconst shr (0+16))
  9407  001730  22F8               	addwfc	tblptru,f,c
  9408  001732                     	endif
  9409  001732  0008               	tblrd		*
  9410  001734  50F5               	movf	tablat,w,c
  9411  001736  0A43               	xorlw	67
  9412  001738  A4D8               	btfss	status,2,c
  9413  00173A  D020               	goto	i2l324
  9414                           
  9415                           ; BSR set to: 0
  9416                           ;main.c: 379: nstate='r';
  9417  00173C  0E72               	movlw	114
  9418  00173E                     L7:
  9419  00173E  0100               	movlb	0	; () banked
  9420  001740  6FE7               	movwf	_nstate& (0+255),b
  9421                           
  9422                           ; BSR set to: 0
  9423                           ;main.c: 380: break;
  9424                           
  9425                           ; BSR set to: 0
  9426                           
  9427                           ; BSR set to: 0
  9428  001742  D01C               	goto	i2l324
  9429  001744                     i2l7631:
  9430                           
  9431                           ; BSR set to: 0
  9432                           ;main.c: 382: printf("no page found");
  9433  001744  0ED6               	movlw	low STR_17
  9434  001746  6E23               	movwf	i2printf@f,c
  9435  001748  0EFF               	movlw	high STR_17
  9436  00174A  6E24               	movwf	i2printf@f+1,c
  9437  00174C  ECCF  F016         	call	i2_printf	;wreg free
  9438                           
  9439                           ;main.c: 384: }
  9440                           
  9441                           ;main.c: 383: break;
  9442  001750  D015               	goto	i2l324
  9443  001752                     i2l7635:
  9444  001752  0100               	movlb	0	; () banked
  9445  001754  51E8               	movf	_state& (0+255),w,b
  9446                           
  9447                           ; Switch size 1, requested type "space"
  9448                           ; Number of cases is 6, Range of values is 99 to 115
  9449                           ; switch strategies available:
  9450                           ; Name         Instructions Cycles
  9451                           ; simple_byte           19    10 (average)
  9452                           ;	Chosen strategy is simple_byte
  9453  001756  0A63               	xorlw	99	; case 99
  9454  001758  B4D8               	btfsc	status,2,c
  9455  00175A  D67B               	goto	i2l7557
  9456  00175C  0A06               	xorlw	6	; case 101
  9457  00175E  B4D8               	btfsc	status,2,c
  9458  001760  D79B               	goto	i2l7615
  9459  001762  0A09               	xorlw	9	; case 108
  9460  001764  B4D8               	btfsc	status,2,c
  9461  001766  D60E               	goto	i2l7529
  9462  001768  0A01               	xorlw	1	; case 109
  9463  00176A  B4D8               	btfsc	status,2,c
  9464  00176C  D564               	goto	i2l7481
  9465  00176E  0A1F               	xorlw	31	; case 114
  9466  001770  B4D8               	btfsc	status,2,c
  9467  001772  D6E6               	goto	i2l7583
  9468  001774  0A01               	xorlw	1	; case 115
  9469  001776  B4D8               	btfsc	status,2,c
  9470  001778  D6E5               	goto	i2l7585
  9471  00177A  D7E4               	goto	i2l7631
  9472  00177C                     i2l324:
  9473                           
  9474                           ;main.c: 385: INT1IF = 0;
  9475  00177C  90F0               	bcf	intcon3,0,c	;volatile
  9476  00177E                     i2l361:
  9477  00177E  C03A  FFF5         	movff	??_keypressed+15,tablat
  9478  001782  C039  FFF8         	movff	??_keypressed+14,tblptru
  9479  001786  C038  FFF7         	movff	??_keypressed+13,tblptrh
  9480  00178A  C037  FFF6         	movff	??_keypressed+12,tblptrl
  9481  00178E  C036  FFF4         	movff	??_keypressed+11,prodh
  9482  001792  C035  FFF3         	movff	??_keypressed+10,prodl
  9483  001796  C034  FFDA         	movff	??_keypressed+9,fsr2h
  9484  00179A  C033  FFD9         	movff	??_keypressed+8,fsr2l
  9485  00179E  C032  FFE2         	movff	??_keypressed+7,fsr1h
  9486  0017A2  C031  FFE1         	movff	??_keypressed+6,fsr1l
  9487  0017A6  C030  FFEA         	movff	??_keypressed+5,fsr0h
  9488  0017AA  C02F  FFE9         	movff	??_keypressed+4,fsr0l
  9489  0017AE  C02E  FFFB         	movff	??_keypressed+3,pclatu
  9490  0017B2  C02D  FFFA         	movff	??_keypressed+2,pclath
  9491  0017B6  9277               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9492  0017B8  0011               	retfie		f
  9493  0017BA                     __end_of_keypressed:
  9494                           	opt stack 0
  9495                           tosu	equ	0xFFF
  9496                           tosh	equ	0xFFE
  9497                           tosl	equ	0xFFD
  9498                           pclatu	equ	0xFFB
  9499                           pclath	equ	0xFFA
  9500                           tblptru	equ	0xFF8
  9501                           tblptrh	equ	0xFF7
  9502                           tblptrl	equ	0xFF6
  9503                           tablat	equ	0xFF5
  9504                           prodh	equ	0xFF4
  9505                           prodl	equ	0xFF3
  9506                           intcon	equ	0xFF2
  9507                           intcon2	equ	0xFF1
  9508                           intcon3	equ	0xFF0
  9509                           indf0	equ	0xFEF
  9510                           postinc0	equ	0xFEE
  9511                           fsr0h	equ	0xFEA
  9512                           fsr0l	equ	0xFE9
  9513                           wreg	equ	0xFE8
  9514                           indf1	equ	0xFE7
  9515                           postinc1	equ	0xFE6
  9516                           postdec1	equ	0xFE5
  9517                           fsr1h	equ	0xFE2
  9518                           fsr1l	equ	0xFE1
  9519                           indf2	equ	0xFDF
  9520                           postinc2	equ	0xFDE
  9521                           postdec2	equ	0xFDD
  9522                           fsr2h	equ	0xFDA
  9523                           fsr2l	equ	0xFD9
  9524                           status	equ	0xFD8
  9525                           
  9526 ;; *************** function i2_printf *****************
  9527 ;; Defined at:
  9528 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  9529 ;; Parameters:    Size  Location     Type
  9530 ;;  f               2   34[COMRAM] PTR const unsigned char 
  9531 ;;		 -> STR_17(14), STR_16(15), STR_15(8), display1(18), 
  9532 ;;		 -> display0(18), 
  9533 ;; Auto vars:     Size  Location     Type
  9534 ;;  printf          4   38[COMRAM] struct __prbuf
  9535 ;;  printf          2   36[COMRAM] PTR void [1]
  9536 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
  9537 ;; Return value:  Size  Location     Type
  9538 ;;                  2   34[COMRAM] int 
  9539 ;; Registers used:
  9540 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9541 ;; Tracked objects:
  9542 ;;		On entry : 0/0
  9543 ;;		On exit  : 0/0
  9544 ;;		Unchanged: 0/0
  9545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9546 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9547 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9549 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9550 ;;Total ram usage:        8 bytes
  9551 ;; Hardware stack levels used:    1
  9552 ;; Hardware stack levels required when called:    3
  9553 ;; This function calls:
  9554 ;;		i2__doprnt
  9555 ;; This function is called by:
  9556 ;;		_keypressed
  9557 ;; This function uses a non-reentrant model
  9558 ;;
  9559                           
  9560                           	psect	text32
  9561  002D9E                     __ptext32:
  9562                           	opt stack 0
  9563  002D9E                     i2_printf:
  9564                           	opt stack 20
  9565                           
  9566                           ;incstack = 0
  9567  002D9E  0E00               	movlw	0
  9568  002DA0  6E27               	movwf	i2printf@pb,c
  9569  002DA2  0E00               	movlw	0
  9570  002DA4  6E28               	movwf	i2printf@pb+1,c
  9571  002DA6  0E48               	movlw	low i2_putch
  9572  002DA8  6E29               	movwf	i2printf@pb+2,c
  9573  002DAA  0E2F               	movlw	high i2_putch
  9574  002DAC  6E2A               	movwf	i2printf@pb+3,c
  9575  002DAE  0E25               	movlw	low (?i2_printf+2)
  9576  002DB0  6E25               	movwf	i2printf@ap,c
  9577  002DB2  0E00               	movlw	high (?i2_printf+2)
  9578  002DB4  6E26               	movwf	i2printf@ap+1,c
  9579                           
  9580                           ;	Return value of i2_printf is never used
  9581  002DB6  0E27               	movlw	low i2printf@pb
  9582  002DB8  6E0D               	movwf	i2__doprnt@pb,c
  9583  002DBA  0E00               	movlw	high i2printf@pb
  9584  002DBC  6E0E               	movwf	i2__doprnt@pb+1,c
  9585  002DBE  C023  F00F         	movff	i2printf@f,i2__doprnt@f
  9586  002DC2  C024  F010         	movff	i2printf@f+1,i2__doprnt@f+1
  9587  002DC6  0E25               	movlw	low i2printf@ap
  9588  002DC8  6E11               	movwf	i2__doprnt@ap,c
  9589  002DCA  0E00               	movlw	high i2printf@ap
  9590  002DCC  6E12               	movwf	i2__doprnt@ap+1,c
  9591  002DCE  ECCB  F004         	call	i2__doprnt	;wreg free
  9592  002DD2  0012               	return	
  9593  002DD4                     __end_ofi2_printf:
  9594                           	opt stack 0
  9595                           tosu	equ	0xFFF
  9596                           tosh	equ	0xFFE
  9597                           tosl	equ	0xFFD
  9598                           pclatu	equ	0xFFB
  9599                           pclath	equ	0xFFA
  9600                           tblptru	equ	0xFF8
  9601                           tblptrh	equ	0xFF7
  9602                           tblptrl	equ	0xFF6
  9603                           tablat	equ	0xFF5
  9604                           prodh	equ	0xFF4
  9605                           prodl	equ	0xFF3
  9606                           intcon	equ	0xFF2
  9607                           intcon2	equ	0xFF1
  9608                           intcon3	equ	0xFF0
  9609                           indf0	equ	0xFEF
  9610                           postinc0	equ	0xFEE
  9611                           fsr0h	equ	0xFEA
  9612                           fsr0l	equ	0xFE9
  9613                           wreg	equ	0xFE8
  9614                           indf1	equ	0xFE7
  9615                           postinc1	equ	0xFE6
  9616                           postdec1	equ	0xFE5
  9617                           fsr1h	equ	0xFE2
  9618                           fsr1l	equ	0xFE1
  9619                           indf2	equ	0xFDF
  9620                           postinc2	equ	0xFDE
  9621                           postdec2	equ	0xFDD
  9622                           fsr2h	equ	0xFDA
  9623                           fsr2l	equ	0xFD9
  9624                           status	equ	0xFD8
  9625                           
  9626 ;; *************** function i2__doprnt *****************
  9627 ;; Defined at:
  9628 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  9629 ;; Parameters:    Size  Location     Type
  9630 ;;  pb              2   12[COMRAM] PTR struct __prbuf
  9631 ;;		 -> sprintf@pb(4), printf@pb(4), 
  9632 ;;  f               2   14[COMRAM] PTR const unsigned char 
  9633 ;;		 -> STR_17(14), STR_16(15), STR_15(8), STR_14(5), 
  9634 ;;		 -> STR_13(5), STR_12(5), STR_11(5), STR_10(20), 
  9635 ;;		 -> STR_9(20), STR_8(22), STR_7(19), menu(720), 
  9636 ;;		 -> STR_6(15), STR_5(6), STR_4(16), STR_3(25), 
  9637 ;;		 -> STR_2(23), STR_1(23), display1(18), display0(18), 
  9638 ;;  ap              2   16[COMRAM] PTR PTR void 
  9639 ;;		 -> sprintf@ap(2), printf@ap(2), 
  9640 ;; Auto vars:     Size  Location     Type
  9641 ;;  _doprnt         4    0        struct .
  9642 ;;  _doprnt         2   31[COMRAM] int 
  9643 ;;  _doprnt         2   28[COMRAM] unsigned int 
  9644 ;;  _doprnt         2   26[COMRAM] PTR const unsigned char 
  9645 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_18(7), 
  9646 ;;		 -> _doprnt@c(1), menu(720), ndisplay1(18), ndisplay0(18), 
  9647 ;;  _doprnt         2   24[COMRAM] unsigned int 
  9648 ;;  _doprnt         1   33[COMRAM] char 
  9649 ;;  _doprnt         1   30[COMRAM] unsigned char 
  9650 ;;  _doprnt         1   23[COMRAM] char 
  9651 ;;  _doprnt         1   22[COMRAM] unsigned char 
  9652 ;; Return value:  Size  Location     Type
  9653 ;;                  2   12[COMRAM] int 
  9654 ;; Registers used:
  9655 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9656 ;; Tracked objects:
  9657 ;;		On entry : 0/0
  9658 ;;		On exit  : 0/0
  9659 ;;		Unchanged: 0/0
  9660 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9661 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9662 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9663 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;Total ram usage:       22 bytes
  9666 ;; Hardware stack levels used:    1
  9667 ;; Hardware stack levels required when called:    2
  9668 ;; This function calls:
  9669 ;;		Absolute function
  9670 ;;		i2___lwdiv
  9671 ;;		i2___lwmod
  9672 ;;		i2___wmul
  9673 ;;		i2_isdigit
  9674 ;;		i2_putch
  9675 ;; This function is called by:
  9676 ;;		i2_printf
  9677 ;; This function uses a non-reentrant model
  9678 ;;
  9679                           
  9680                           	psect	text33
  9681  000996                     __ptext33:
  9682                           	opt stack 0
  9683  000996                     i2__doprnt:
  9684                           	opt stack 20
  9685                           
  9686                           ;doprnt.c: 499: signed char c;
  9687                           ;doprnt.c: 501: int width;
  9688                           ;doprnt.c: 506: signed char prec;
  9689                           ;doprnt.c: 508: unsigned char flag;
  9690                           ;doprnt.c: 523: union {
  9691                           ;doprnt.c: 524: unsigned long vd;
  9692                           ;doprnt.c: 525: double integ;
  9693                           ;doprnt.c: 526: } tmpval;
  9694                           ;doprnt.c: 528: unsigned int val;
  9695                           ;doprnt.c: 529: unsigned len;
  9696                           ;doprnt.c: 530: const char * cp;
  9697                           ;doprnt.c: 536: while(c = *f++) {
  9698                           
  9699                           ;incstack = 0
  9700  000996  EFD6  F008         	goto	i2l7319
  9701  00099A                     i2l7113:
  9702                           
  9703                           ;doprnt.c: 538: if(c != '%')
  9704  00099A  0E25               	movlw	37
  9705  00099C  1822               	xorwf	i2__doprnt@c,w,c
  9706  00099E  B4D8               	btfsc	status,2,c
  9707  0009A0  D036               	goto	i2l7123
  9708                           
  9709                           ;doprnt.c: 540: {
  9710                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  9711  0009A2  EE20 F002          	lfsr	2,2
  9712  0009A6  500D               	movf	i2__doprnt@pb,w,c
  9713  0009A8  26D9               	addwf	fsr2l,f,c
  9714  0009AA  500E               	movf	i2__doprnt@pb+1,w,c
  9715  0009AC  22DA               	addwfc	fsr2h,f,c
  9716  0009AE  50DE               	movf	postinc2,w,c
  9717  0009B0  10DE               	iorwf	postinc2,w,c
  9718  0009B2  B4D8               	btfsc	status,2,c
  9719  0009B4  D016               	goto	i2l7119
  9720  0009B6  EE20 F002          	lfsr	2,2
  9721  0009BA  500D               	movf	i2__doprnt@pb,w,c
  9722  0009BC  26D9               	addwf	fsr2l,f,c
  9723  0009BE  500E               	movf	i2__doprnt@pb+1,w,c
  9724  0009C0  22DA               	addwfc	fsr2h,f,c
  9725  0009C2  CFDE F013          	movff	postinc2,??i2__doprnt
  9726  0009C6  CFDD F014          	movff	postdec2,??i2__doprnt+1
  9727  0009CA  D801               	call	i2u1061_48
  9728  0009CC  D3EF               	goto	i2l7319
  9729  0009CE                     i2u1061_48:
  9730  0009CE  0005               	push	
  9731  0009D0  6EFA               	movwf	pclath,c
  9732  0009D2  5013               	movf	??i2__doprnt,w,c
  9733  0009D4  6EFD               	movwf	tosl,c
  9734  0009D6  5014               	movf	??i2__doprnt+1,w,c
  9735  0009D8  6EFE               	movwf	tosh,c
  9736  0009DA  6AFF               	clrf	tosu,c
  9737  0009DC  50FA               	movf	pclath,w,c
  9738  0009DE  5022               	movf	i2__doprnt@c,w,c
  9739  0009E0  0012               	return		;indir
  9740  0009E2                     i2l7119:
  9741  0009E2  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
  9742  0009E6  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
  9743  0009EA  CFDE F013          	movff	postinc2,??i2__doprnt
  9744  0009EE  CFDD F014          	movff	postdec2,??i2__doprnt+1
  9745  0009F2  C013  FFD9         	movff	??i2__doprnt,fsr2l
  9746  0009F6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
  9747  0009FA  C022  FFDF         	movff	i2__doprnt@c,indf2
  9748  0009FE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
  9749  000A02  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
  9750  000A06  2ADE               	incf	postinc2,f,c
  9751  000A08  0E00               	movlw	0
  9752  000A0A  22DD               	addwfc	postdec2,f,c
  9753                           
  9754                           ;doprnt.c: 542: continue;
  9755  000A0C  D3CF               	goto	i2l7319
  9756  000A0E                     i2l7123:
  9757                           
  9758                           ;doprnt.c: 543: }
  9759                           ;doprnt.c: 546: width = 0;
  9760  000A0E  0E00               	movlw	0
  9761  000A10  6E21               	movwf	i2__doprnt@width+1,c
  9762  000A12  0E00               	movlw	0
  9763  000A14  6E20               	movwf	i2__doprnt@width,c
  9764                           
  9765                           ;doprnt.c: 548: flag = 0;
  9766  000A16  0E00               	movlw	0
  9767  000A18  6E1F               	movwf	i2__doprnt@flag,c
  9768                           
  9769                           ;doprnt.c: 551: switch(*f) {
  9770                           
  9771                           ;doprnt.c: 550: for(;;) {
  9772  000A1A  D003               	goto	i2l7129
  9773  000A1C                     i2l7125:
  9774                           
  9775                           ;doprnt.c: 580: flag |= 0x04;
  9776  000A1C  841F               	bsf	i2__doprnt@flag,2,c
  9777                           
  9778                           ;doprnt.c: 581: f++;
  9779  000A1E  4A0F               	infsnz	i2__doprnt@f,f,c
  9780  000A20  2A10               	incf	i2__doprnt@f+1,f,c
  9781  000A22                     i2l7129:
  9782  000A22  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
  9783  000A26  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
  9784  000A2A  0E00               	movlw	low (__mediumconst shr (0+16))
  9785  000A2C  6EF8               	movwf	tblptru,c
  9786  000A2E  0E0F               	movlw	(high __ramtop+-1)
  9787  000A30  64F7               	cpfsgt	tblptrh,c
  9788  000A32  D003               	bra	i2u1062_47
  9789  000A34  0008               	tblrd		*
  9790  000A36  50F5               	movf	tablat,w,c
  9791  000A38  D005               	bra	i2u1062_40
  9792  000A3A                     i2u1062_47:
  9793  000A3A  CFF6 FFE9          	movff	tblptrl,fsr0l
  9794  000A3E  CFF7 FFEA          	movff	tblptrh,fsr0h
  9795  000A42  50EF               	movf	indf0,w,c
  9796  000A44                     i2u1062_40:
  9797                           
  9798                           ; Switch size 1, requested type "space"
  9799                           ; Number of cases is 1, Range of values is 48 to 48
  9800                           ; switch strategies available:
  9801                           ; Name         Instructions Cycles
  9802                           ; simple_byte            4     3 (average)
  9803                           ;	Chosen strategy is simple_byte
  9804  000A44  0A30               	xorlw	48	; case 48
  9805  000A46  B4D8               	btfsc	status,2,c
  9806  000A48  D7E9               	goto	i2l7125
  9807                           
  9808                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  9809                           
  9810                           ;doprnt.c: 586: }
  9811                           
  9812                           ;doprnt.c: 585: break;
  9813  000A4A  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
  9814  000A4E  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
  9815  000A52  0E00               	movlw	low (__mediumconst shr (0+16))
  9816  000A54  6EF8               	movwf	tblptru,c
  9817  000A56  0E0F               	movlw	(high __ramtop+-1)
  9818  000A58  64F7               	cpfsgt	tblptrh,c
  9819  000A5A  D003               	bra	i2u1063_47
  9820  000A5C  0008               	tblrd		*
  9821  000A5E  50F5               	movf	tablat,w,c
  9822  000A60  D005               	bra	i2u1063_40
  9823  000A62                     i2u1063_47:
  9824  000A62  CFF6 FFE9          	movff	tblptrl,fsr0l
  9825  000A66  CFF7 FFEA          	movff	tblptrh,fsr0h
  9826  000A6A  50EF               	movf	indf0,w,c
  9827  000A6C                     i2u1063_40:
  9828  000A6C  EC6F  F017         	call	i2_isdigit
  9829  000A70  A0D8               	btfss	status,0,c
  9830  000A72  D154               	goto	i2l7195
  9831                           
  9832                           ;doprnt.c: 598: width = 0;
  9833  000A74  0E00               	movlw	0
  9834  000A76  6E21               	movwf	i2__doprnt@width+1,c
  9835  000A78  0E00               	movlw	0
  9836  000A7A  6E20               	movwf	i2__doprnt@width,c
  9837  000A7C                     i2l7135:
  9838                           
  9839                           ;doprnt.c: 600: width *= 10;
  9840  000A7C  C020  F001         	movff	i2__doprnt@width,i2___wmul@multiplier
  9841  000A80  C021  F002         	movff	i2__doprnt@width+1,i2___wmul@multiplier+1
  9842  000A84  0E00               	movlw	0
  9843  000A86  6E04               	movwf	i2___wmul@multiplicand+1,c
  9844  000A88  0E0A               	movlw	10
  9845  000A8A  6E03               	movwf	i2___wmul@multiplicand,c
  9846  000A8C  EC5C  F017         	call	i2___wmul	;wreg free
  9847  000A90  C001  F020         	movff	?i2___wmul,i2__doprnt@width
  9848  000A94  C002  F021         	movff	?i2___wmul+1,i2__doprnt@width+1
  9849                           
  9850                           ;doprnt.c: 601: width += *f++ - '0';
  9851  000A98  0ED0               	movlw	208
  9852  000A9A  6E13               	movwf	??i2__doprnt& (0+255),c
  9853  000A9C  0EFF               	movlw	255
  9854  000A9E  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
  9855  000AA0  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
  9856  000AA4  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
  9857  000AA8  0E00               	movlw	low (__mediumconst shr (0+16))
  9858  000AAA  6EF8               	movwf	tblptru,c
  9859  000AAC  0E0F               	movlw	(high __ramtop+-1)
  9860  000AAE  64F7               	cpfsgt	tblptrh,c
  9861  000AB0  D003               	bra	i2u1065_47
  9862  000AB2  0008               	tblrd		*
  9863  000AB4  50F5               	movf	tablat,w,c
  9864  000AB6  D005               	bra	i2u1065_40
  9865  000AB8                     i2u1065_47:
  9866  000AB8  CFF6 FFE9          	movff	tblptrl,fsr0l
  9867  000ABC  CFF7 FFEA          	movff	tblptrh,fsr0h
  9868  000AC0  50EF               	movf	indf0,w,c
  9869  000AC2                     i2u1065_40:
  9870  000AC2  6E15               	movwf	(??i2__doprnt+2)& (0+255),c
  9871  000AC4  6A16               	clrf	(??i2__doprnt+3)& (0+255),c
  9872  000AC6  5013               	movf	??i2__doprnt,w,c
  9873  000AC8  2615               	addwf	??i2__doprnt+2,f,c
  9874  000ACA  5014               	movf	??i2__doprnt+1,w,c
  9875  000ACC  2216               	addwfc	??i2__doprnt+3,f,c
  9876  000ACE  5015               	movf	??i2__doprnt+2,w,c
  9877  000AD0  2620               	addwf	i2__doprnt@width,f,c
  9878  000AD2  5016               	movf	??i2__doprnt+3,w,c
  9879  000AD4  2221               	addwfc	i2__doprnt@width+1,f,c
  9880  000AD6  4A0F               	infsnz	i2__doprnt@f,f,c
  9881  000AD8  2A10               	incf	i2__doprnt@f+1,f,c
  9882                           
  9883                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  9884  000ADA  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
  9885  000ADE  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
  9886  000AE2  0E00               	movlw	low (__mediumconst shr (0+16))
  9887  000AE4  6EF8               	movwf	tblptru,c
  9888  000AE6  0E0F               	movlw	(high __ramtop+-1)
  9889  000AE8  64F7               	cpfsgt	tblptrh,c
  9890  000AEA  D003               	bra	i2u1066_47
  9891  000AEC  0008               	tblrd		*
  9892  000AEE  50F5               	movf	tablat,w,c
  9893  000AF0  D005               	bra	i2u1066_40
  9894  000AF2                     i2u1066_47:
  9895  000AF2  CFF6 FFE9          	movff	tblptrl,fsr0l
  9896  000AF6  CFF7 FFEA          	movff	tblptrh,fsr0h
  9897  000AFA  50EF               	movf	indf0,w,c
  9898  000AFC                     i2u1066_40:
  9899  000AFC  EC6F  F017         	call	i2_isdigit
  9900  000B00  A0D8               	btfss	status,0,c
  9901  000B02  D10C               	goto	i2l7195
  9902  000B04  D7BB               	goto	i2l7135
  9903  000B06                     i2l7143:
  9904                           
  9905                           ;doprnt.c: 721: flag |= 0x80;
  9906  000B06  8E1F               	bsf	i2__doprnt@flag,7,c
  9907                           
  9908                           ;doprnt.c: 723: break;
  9909  000B08  D135               	goto	i2l444
  9910  000B0A                     i2l7145:
  9911                           
  9912                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  9913  000B0A  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
  9914  000B0E  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
  9915  000B12  CFDF F013          	movff	indf2,??i2__doprnt
  9916  000B16  0E02               	movlw	2
  9917  000B18  26DE               	addwf	postinc2,f,c
  9918  000B1A  CFDF F014          	movff	indf2,??i2__doprnt+1
  9919  000B1E  0E00               	movlw	0
  9920  000B20  22DD               	addwfc	postdec2,f,c
  9921  000B22  C013  FFD9         	movff	??i2__doprnt,fsr2l
  9922  000B26  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
  9923  000B2A  CFDE F01B          	movff	postinc2,i2__doprnt@cp
  9924  000B2E  CFDD F01C          	movff	postdec2,i2__doprnt@cp+1
  9925                           
  9926                           ;doprnt.c: 740: if(!cp)
  9927  000B32  501B               	movf	i2__doprnt@cp,w,c
  9928  000B34  101C               	iorwf	i2__doprnt@cp+1,w,c
  9929  000B36  A4D8               	btfss	status,2,c
  9930  000B38  D004               	goto	i2l7151
  9931                           
  9932                           ;doprnt.c: 741: cp = "(null)";
  9933  000B3A  0EEC               	movlw	low STR_18
  9934  000B3C  6E1B               	movwf	i2__doprnt@cp,c
  9935  000B3E  0EFF               	movlw	high STR_18
  9936  000B40  6E1C               	movwf	i2__doprnt@cp+1,c
  9937  000B42                     i2l7151:
  9938                           
  9939                           ;doprnt.c: 745: len = 0;
  9940  000B42  0E00               	movlw	0
  9941  000B44  6E1A               	movwf	i2__doprnt@len+1,c
  9942  000B46  0E00               	movlw	0
  9943  000B48  6E19               	movwf	i2__doprnt@len,c
  9944                           
  9945                           ;doprnt.c: 746: while(cp[len])
  9946  000B4A  D002               	goto	i2l7155
  9947  000B4C                     i2l7153:
  9948                           
  9949                           ;doprnt.c: 747: len++;
  9950  000B4C  4A19               	infsnz	i2__doprnt@len,f,c
  9951  000B4E  2A1A               	incf	i2__doprnt@len+1,f,c
  9952  000B50                     i2l7155:
  9953  000B50  5019               	movf	i2__doprnt@len,w,c
  9954  000B52  241B               	addwf	i2__doprnt@cp,w,c
  9955  000B54  6E13               	movwf	??i2__doprnt& (0+255),c
  9956  000B56  501A               	movf	i2__doprnt@len+1,w,c
  9957  000B58  201C               	addwfc	i2__doprnt@cp+1,w,c
  9958  000B5A  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
  9959  000B5C  C013  FFF6         	movff	??i2__doprnt,tblptrl
  9960  000B60  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
  9961  000B64  0E00               	movlw	low (__mediumconst shr (0+16))
  9962  000B66  6EF8               	movwf	tblptru,c
  9963  000B68  0E0F               	movlw	(high __ramtop+-1)
  9964  000B6A  64F7               	cpfsgt	tblptrh,c
  9965  000B6C  D003               	bra	i2u1069_47
  9966  000B6E  0008               	tblrd		*
  9967  000B70  50F5               	movf	tablat,w,c
  9968  000B72  D005               	bra	i2u1069_40
  9969  000B74                     i2u1069_47:
  9970  000B74  CFF6 FFE9          	movff	tblptrl,fsr0l
  9971  000B78  CFF7 FFEA          	movff	tblptrh,fsr0h
  9972  000B7C  50EF               	movf	indf0,w,c
  9973  000B7E                     i2u1069_40:
  9974  000B7E  0900               	iorlw	0
  9975  000B80  A4D8               	btfss	status,2,c
  9976  000B82  D7E4               	goto	i2l7153
  9977  000B84                     i2l7157:
  9978                           
  9979                           ;doprnt.c: 757: if(width > len)
  9980  000B84  5020               	movf	i2__doprnt@width,w,c
  9981  000B86  5C19               	subwf	i2__doprnt@len,w,c
  9982  000B88  5021               	movf	i2__doprnt@width+1,w,c
  9983  000B8A  581A               	subwfb	i2__doprnt@len+1,w,c
  9984  000B8C  B0D8               	btfsc	status,0,c
  9985  000B8E  D005               	goto	i2l7161
  9986                           
  9987                           ;doprnt.c: 758: width -= len;
  9988  000B90  5019               	movf	i2__doprnt@len,w,c
  9989  000B92  5E20               	subwf	i2__doprnt@width,f,c
  9990  000B94  501A               	movf	i2__doprnt@len+1,w,c
  9991  000B96  5A21               	subwfb	i2__doprnt@width+1,f,c
  9992  000B98  D03A               	goto	i2l7171
  9993  000B9A                     i2l7161:
  9994                           
  9995                           ;doprnt.c: 759: else
  9996                           ;doprnt.c: 760: width = 0;
  9997  000B9A  0E00               	movlw	0
  9998  000B9C  6E21               	movwf	i2__doprnt@width+1,c
  9999  000B9E  0E00               	movlw	0
 10000  000BA0  6E20               	movwf	i2__doprnt@width,c
 10001                           
 10002                           ;doprnt.c: 764: while(width--)
 10003  000BA2  D035               	goto	i2l7171
 10004  000BA4                     i2l7163:
 10005                           
 10006                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 10007  000BA4  EE20 F002          	lfsr	2,2
 10008  000BA8  500D               	movf	i2__doprnt@pb,w,c
 10009  000BAA  26D9               	addwf	fsr2l,f,c
 10010  000BAC  500E               	movf	i2__doprnt@pb+1,w,c
 10011  000BAE  22DA               	addwfc	fsr2h,f,c
 10012  000BB0  50DE               	movf	postinc2,w,c
 10013  000BB2  10DE               	iorwf	postinc2,w,c
 10014  000BB4  B4D8               	btfsc	status,2,c
 10015  000BB6  D016               	goto	i2l7167
 10016  000BB8  EE20 F002          	lfsr	2,2
 10017  000BBC  500D               	movf	i2__doprnt@pb,w,c
 10018  000BBE  26D9               	addwf	fsr2l,f,c
 10019  000BC0  500E               	movf	i2__doprnt@pb+1,w,c
 10020  000BC2  22DA               	addwfc	fsr2h,f,c
 10021  000BC4  CFDE F013          	movff	postinc2,??i2__doprnt
 10022  000BC8  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10023  000BCC  D801               	call	i2u1073_48
 10024  000BCE  D01F               	goto	i2l7171
 10025  000BD0                     i2u1073_48:
 10026  000BD0  0005               	push	
 10027  000BD2  6EFA               	movwf	pclath,c
 10028  000BD4  5013               	movf	??i2__doprnt,w,c
 10029  000BD6  6EFD               	movwf	tosl,c
 10030  000BD8  5014               	movf	??i2__doprnt+1,w,c
 10031  000BDA  6EFE               	movwf	tosh,c
 10032  000BDC  6AFF               	clrf	tosu,c
 10033  000BDE  50FA               	movf	pclath,w,c
 10034  000BE0  0E20               	movlw	32
 10035  000BE2  0012               	return		;indir
 10036  000BE4                     i2l7167:
 10037  000BE4  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10038  000BE8  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10039  000BEC  CFDE F013          	movff	postinc2,??i2__doprnt
 10040  000BF0  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10041  000BF4  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10042  000BF8  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10043  000BFC  0E20               	movlw	32
 10044  000BFE  6EDF               	movwf	indf2,c
 10045  000C00  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10046  000C04  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10047  000C08  2ADE               	incf	postinc2,f,c
 10048  000C0A  0E00               	movlw	0
 10049  000C0C  22DD               	addwfc	postdec2,f,c
 10050  000C0E                     i2l7171:
 10051  000C0E  0620               	decf	i2__doprnt@width,f,c
 10052  000C10  A0D8               	btfss	status,0,c
 10053  000C12  0621               	decf	i2__doprnt@width+1,f,c
 10054  000C14  2820               	incf	i2__doprnt@width,w,c
 10055  000C16  E1C6               	bnz	i2l7163
 10056  000C18  2821               	incf	i2__doprnt@width+1,w,c
 10057  000C1A  B4D8               	btfsc	status,2,c
 10058  000C1C  D05B               	goto	i2l7185
 10059  000C1E  D7C2               	goto	i2l7163
 10060  000C20                     i2l7173:
 10061                           
 10062                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 10063  000C20  EE20 F002          	lfsr	2,2
 10064  000C24  500D               	movf	i2__doprnt@pb,w,c
 10065  000C26  26D9               	addwf	fsr2l,f,c
 10066  000C28  500E               	movf	i2__doprnt@pb+1,w,c
 10067  000C2A  22DA               	addwfc	fsr2h,f,c
 10068  000C2C  50DE               	movf	postinc2,w,c
 10069  000C2E  10DE               	iorwf	postinc2,w,c
 10070  000C30  B4D8               	btfsc	status,2,c
 10071  000C32  D029               	goto	i2l7179
 10072  000C34  EE20 F002          	lfsr	2,2
 10073  000C38  500D               	movf	i2__doprnt@pb,w,c
 10074  000C3A  26D9               	addwf	fsr2l,f,c
 10075  000C3C  500E               	movf	i2__doprnt@pb+1,w,c
 10076  000C3E  22DA               	addwfc	fsr2h,f,c
 10077  000C40  CFDE F013          	movff	postinc2,??i2__doprnt
 10078  000C44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10079  000C48  D801               	call	i2u1076_48
 10080  000C4A  D01A               	goto	i2l7177
 10081  000C4C                     i2u1076_48:
 10082  000C4C  0005               	push	
 10083  000C4E  6EFA               	movwf	pclath,c
 10084  000C50  5013               	movf	??i2__doprnt,w,c
 10085  000C52  6EFD               	movwf	tosl,c
 10086  000C54  5014               	movf	??i2__doprnt+1,w,c
 10087  000C56  6EFE               	movwf	tosh,c
 10088  000C58  6AFF               	clrf	tosu,c
 10089  000C5A  50FA               	movf	pclath,w,c
 10090  000C5C  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 10091  000C60  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 10092  000C64  0E00               	movlw	low (__mediumconst shr (0+16))
 10093  000C66  6EF8               	movwf	tblptru,c
 10094  000C68  0E0F               	movlw	(high __ramtop+-1)
 10095  000C6A  64F7               	cpfsgt	tblptrh,c
 10096  000C6C  D003               	bra	i2u1077_47
 10097  000C6E  0008               	tblrd		*
 10098  000C70  50F5               	movf	tablat,w,c
 10099  000C72  D005               	bra	i2u1077_40
 10100  000C74                     i2u1077_47:
 10101  000C74  CFF6 FFE9          	movff	tblptrl,fsr0l
 10102  000C78  CFF7 FFEA          	movff	tblptrh,fsr0h
 10103  000C7C  50EF               	movf	indf0,w,c
 10104  000C7E                     i2u1077_40:
 10105  000C7E  0012               	return		;indir
 10106  000C80                     i2l7177:
 10107  000C80  4A1B               	infsnz	i2__doprnt@cp,f,c
 10108  000C82  2A1C               	incf	i2__doprnt@cp+1,f,c
 10109  000C84  D027               	goto	i2l7185
 10110  000C86                     i2l7179:
 10111  000C86  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 10112  000C8A  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 10113  000C8E  0E00               	movlw	low (__mediumconst shr (0+16))
 10114  000C90  6EF8               	movwf	tblptru,c
 10115  000C92  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10116  000C96  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10117  000C9A  CFDE F013          	movff	postinc2,??i2__doprnt
 10118  000C9E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10119  000CA2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10120  000CA6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10121  000CAA  0E0F               	movlw	(high __ramtop+-1)
 10122  000CAC  64F7               	cpfsgt	tblptrh,c
 10123  000CAE  D003               	bra	i2u1078_47
 10124  000CB0  0008               	tblrd		*
 10125  000CB2  50F5               	movf	tablat,w,c
 10126  000CB4  D005               	bra	i2u1078_40
 10127  000CB6                     i2u1078_47:
 10128  000CB6  CFF6 FFE9          	movff	tblptrl,fsr0l
 10129  000CBA  CFF7 FFEA          	movff	tblptrh,fsr0h
 10130  000CBE  50EF               	movf	indf0,w,c
 10131  000CC0                     i2u1078_40:
 10132  000CC0  6EDF               	movwf	indf2,c
 10133  000CC2  4A1B               	infsnz	i2__doprnt@cp,f,c
 10134  000CC4  2A1C               	incf	i2__doprnt@cp+1,f,c
 10135  000CC6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10136  000CCA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10137  000CCE  2ADE               	incf	postinc2,f,c
 10138  000CD0  0E00               	movlw	0
 10139  000CD2  22DD               	addwfc	postdec2,f,c
 10140  000CD4                     i2l7185:
 10141  000CD4  0619               	decf	i2__doprnt@len,f,c
 10142  000CD6  A0D8               	btfss	status,0,c
 10143  000CD8  061A               	decf	i2__doprnt@len+1,f,c
 10144  000CDA  2819               	incf	i2__doprnt@len,w,c
 10145  000CDC  E1A1               	bnz	i2l7173
 10146  000CDE  281A               	incf	i2__doprnt@len+1,w,c
 10147  000CE0  B4D8               	btfsc	status,2,c
 10148  000CE2  D264               	goto	i2l7319
 10149  000CE4  D79D               	goto	i2l7173
 10150  000CE6                     i2l7187:
 10151                           
 10152                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 10153  000CE6  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 10154  000CEA  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 10155  000CEE  CFDF F013          	movff	indf2,??i2__doprnt
 10156  000CF2  0E02               	movlw	2
 10157  000CF4  26DE               	addwf	postinc2,f,c
 10158  000CF6  CFDF F014          	movff	indf2,??i2__doprnt+1
 10159  000CFA  0E00               	movlw	0
 10160  000CFC  22DD               	addwfc	postdec2,f,c
 10161  000CFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10162  000D02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10163  000D06  50DF               	movf	indf2,w,c
 10164  000D08  6E22               	movwf	i2__doprnt@c,c
 10165  000D0A                     i2l7189:
 10166                           
 10167                           ;doprnt.c: 805: cp = (char *)&c;
 10168  000D0A  0E22               	movlw	low i2__doprnt@c
 10169  000D0C  6E1B               	movwf	i2__doprnt@cp,c
 10170  000D0E  0E00               	movlw	high i2__doprnt@c
 10171  000D10  6E1C               	movwf	i2__doprnt@cp+1,c
 10172                           
 10173                           ;doprnt.c: 806: len = 1;
 10174  000D12  0E00               	movlw	0
 10175  000D14  6E1A               	movwf	i2__doprnt@len+1,c
 10176  000D16  0E01               	movlw	1
 10177  000D18  6E19               	movwf	i2__doprnt@len,c
 10178                           
 10179                           ;doprnt.c: 807: goto dostring;
 10180  000D1A  D734               	goto	i2l7157
 10181  000D1C                     i2l7195:
 10182  000D1C  500F               	movf	i2__doprnt@f,w,c
 10183  000D1E  6E13               	movwf	??i2__doprnt& (0+255),c
 10184  000D20  5010               	movf	i2__doprnt@f+1,w,c
 10185  000D22  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 10186  000D24  4A0F               	infsnz	i2__doprnt@f,f,c
 10187  000D26  2A10               	incf	i2__doprnt@f+1,f,c
 10188  000D28  C013  FFF6         	movff	??i2__doprnt,tblptrl
 10189  000D2C  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 10190  000D30  0E00               	movlw	low (__mediumconst shr (0+16))
 10191  000D32  6EF8               	movwf	tblptru,c
 10192  000D34  0E0F               	movlw	(high __ramtop+-1)
 10193  000D36  64F7               	cpfsgt	tblptrh,c
 10194  000D38  D003               	bra	i2u1080_47
 10195  000D3A  0008               	tblrd		*
 10196  000D3C  50F5               	movf	tablat,w,c
 10197  000D3E  D005               	bra	i2u1080_40
 10198  000D40                     i2u1080_47:
 10199  000D40  CFF6 FFE9          	movff	tblptrl,fsr0l
 10200  000D44  CFF7 FFEA          	movff	tblptrh,fsr0h
 10201  000D48  50EF               	movf	indf0,w,c
 10202  000D4A                     i2u1080_40:
 10203  000D4A  6E22               	movwf	i2__doprnt@c,c
 10204  000D4C  5022               	movf	i2__doprnt@c,w,c
 10205                           
 10206                           ; Switch size 1, requested type "space"
 10207                           ; Number of cases is 6, Range of values is 0 to 120
 10208                           ; switch strategies available:
 10209                           ; Name         Instructions Cycles
 10210                           ; simple_byte           19    10 (average)
 10211                           ;	Chosen strategy is simple_byte
 10212  000D4E  0A00               	xorlw	0	; case 0
 10213  000D50  B4D8               	btfsc	status,2,c
 10214  000D52  D248               	goto	i2l7321
 10215  000D54  0A63               	xorlw	99	; case 99
 10216  000D56  B4D8               	btfsc	status,2,c
 10217  000D58  D7C6               	goto	i2l7187
 10218  000D5A  0A07               	xorlw	7	; case 100
 10219  000D5C  B4D8               	btfsc	status,2,c
 10220  000D5E  D00A               	goto	i2l444
 10221  000D60  0A0D               	xorlw	13	; case 105
 10222  000D62  B4D8               	btfsc	status,2,c
 10223  000D64  D007               	goto	i2l444
 10224  000D66  0A1A               	xorlw	26	; case 115
 10225  000D68  B4D8               	btfsc	status,2,c
 10226  000D6A  D6CF               	goto	i2l7145
 10227  000D6C  0A0B               	xorlw	11	; case 120
 10228  000D6E  B4D8               	btfsc	status,2,c
 10229  000D70  D6CA               	goto	i2l7143
 10230  000D72  D7CB               	goto	i2l7189
 10231  000D74                     i2l444:
 10232                           
 10233                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 10234  000D74  BE1F               	btfsc	i2__doprnt@flag,7,c
 10235  000D76  D01D               	goto	i2l7205
 10236                           
 10237                           ;doprnt.c: 1253: {
 10238                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10239  000D78  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 10240  000D7C  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 10241  000D80  CFDF F013          	movff	indf2,??i2__doprnt
 10242  000D84  0E02               	movlw	2
 10243  000D86  26DE               	addwf	postinc2,f,c
 10244  000D88  CFDF F014          	movff	indf2,??i2__doprnt+1
 10245  000D8C  0E00               	movlw	0
 10246  000D8E  22DD               	addwfc	postdec2,f,c
 10247  000D90  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10248  000D94  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10249  000D98  CFDE F01D          	movff	postinc2,i2__doprnt@val
 10250  000D9C  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 10251                           
 10252                           ;doprnt.c: 1261: if((int)val < 0) {
 10253  000DA0  AE1E               	btfss	i2__doprnt@val+1,7,c
 10254  000DA2  D052               	goto	i2l7237
 10255                           
 10256                           ;doprnt.c: 1262: flag |= 0x03;
 10257  000DA4  0E03               	movlw	3
 10258  000DA6  121F               	iorwf	i2__doprnt@flag,f,c
 10259                           
 10260                           ;doprnt.c: 1263: val = -val;
 10261  000DA8  6C1D               	negf	i2__doprnt@val,c
 10262  000DAA  1E1E               	comf	i2__doprnt@val+1,f,c
 10263  000DAC  B0D8               	btfsc	status,0,c
 10264  000DAE  2A1E               	incf	i2__doprnt@val+1,f,c
 10265                           
 10266                           ;doprnt.c: 1264: }
 10267                           ;doprnt.c: 1266: }
 10268  000DB0  D04B               	goto	i2l7237
 10269  000DB2                     i2l7205:
 10270                           
 10271                           ;doprnt.c: 1268: else
 10272                           ;doprnt.c: 1273: {
 10273                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10274  000DB2  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 10275  000DB6  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 10276  000DBA  CFDF F013          	movff	indf2,??i2__doprnt
 10277  000DBE  0E02               	movlw	2
 10278  000DC0  26DE               	addwf	postinc2,f,c
 10279  000DC2  CFDF F014          	movff	indf2,??i2__doprnt+1
 10280  000DC6  0E00               	movlw	0
 10281  000DC8  22DD               	addwfc	postdec2,f,c
 10282  000DCA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10283  000DCE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10284  000DD2  CFDE F01D          	movff	postinc2,i2__doprnt@val
 10285  000DD6  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 10286                           
 10287                           ;doprnt.c: 1287: }
 10288                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 10289  000DDA  D036               	goto	i2l7237
 10290  000DDC                     i2l7207:
 10291                           
 10292                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10293  000DDC  0E01               	movlw	1
 10294  000DDE  6E22               	movwf	i2__doprnt@c,c
 10295  000DE0                     i2l7209:
 10296  000DE0  0E05               	movlw	5
 10297  000DE2  1822               	xorwf	i2__doprnt@c,w,c
 10298  000DE4  B4D8               	btfsc	status,2,c
 10299  000DE6  D038               	goto	i2l7239
 10300                           
 10301                           ;doprnt.c: 1306: if(val < dpowers[c])
 10302  000DE8  5022               	movf	i2__doprnt@c,w,c
 10303  000DEA  0D02               	mullw	2
 10304  000DEC  0EE6               	movlw	low _dpowers
 10305  000DEE  24F3               	addwf	prodl,w,c
 10306  000DF0  6EF6               	movwf	tblptrl,c
 10307  000DF2  0EFE               	movlw	high _dpowers
 10308  000DF4  20F4               	addwfc	prodh,w,c
 10309  000DF6  6EF7               	movwf	tblptrh,c
 10310  000DF8                     	if	1	;There are 3 active tblptr bytes
 10311  000DF8  6AF8               	clrf	tblptru,c
 10312  000DFA  0E00               	movlw	low (__mediumconst shr (0+16))
 10313  000DFC  22F8               	addwfc	tblptru,f,c
 10314  000DFE                     	endif
 10315  000DFE  0009               	tblrd		*+
 10316  000E00  50F5               	movf	tablat,w,c
 10317  000E02  5C1D               	subwf	i2__doprnt@val,w,c
 10318  000E04  0009               	tblrd		*+
 10319  000E06  50F5               	movf	tablat,w,c
 10320  000E08  581E               	subwfb	i2__doprnt@val+1,w,c
 10321  000E0A  A0D8               	btfss	status,0,c
 10322  000E0C  D025               	goto	i2l7239
 10323                           
 10324                           ;doprnt.c: 1307: break;
 10325  000E0E  2A22               	incf	i2__doprnt@c,f,c
 10326  000E10  D7E7               	goto	i2l7209
 10327  000E12                     i2l7221:
 10328                           
 10329                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10330  000E12  0E01               	movlw	1
 10331  000E14  6E22               	movwf	i2__doprnt@c,c
 10332  000E16                     i2l7223:
 10333  000E16  0E04               	movlw	4
 10334  000E18  1822               	xorwf	i2__doprnt@c,w,c
 10335  000E1A  B4D8               	btfsc	status,2,c
 10336  000E1C  D01D               	goto	i2l7239
 10337                           
 10338                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10339  000E1E  5022               	movf	i2__doprnt@c,w,c
 10340  000E20  0D02               	mullw	2
 10341  000E22  0EF0               	movlw	low _hexpowers
 10342  000E24  24F3               	addwf	prodl,w,c
 10343  000E26  6EF6               	movwf	tblptrl,c
 10344  000E28  0EFE               	movlw	high _hexpowers
 10345  000E2A  20F4               	addwfc	prodh,w,c
 10346  000E2C  6EF7               	movwf	tblptrh,c
 10347  000E2E                     	if	1	;There are 3 active tblptr bytes
 10348  000E2E  6AF8               	clrf	tblptru,c
 10349  000E30  0E00               	movlw	low (__mediumconst shr (0+16))
 10350  000E32  22F8               	addwfc	tblptru,f,c
 10351  000E34                     	endif
 10352  000E34  0009               	tblrd		*+
 10353  000E36  50F5               	movf	tablat,w,c
 10354  000E38  5C1D               	subwf	i2__doprnt@val,w,c
 10355  000E3A  0009               	tblrd		*+
 10356  000E3C  50F5               	movf	tablat,w,c
 10357  000E3E  581E               	subwfb	i2__doprnt@val+1,w,c
 10358  000E40  A0D8               	btfss	status,0,c
 10359  000E42  D00A               	goto	i2l7239
 10360                           
 10361                           ;doprnt.c: 1318: break;
 10362  000E44  2A22               	incf	i2__doprnt@c,f,c
 10363  000E46  D7E7               	goto	i2l7223
 10364  000E48                     i2l7237:
 10365  000E48  501F               	movf	i2__doprnt@flag,w,c
 10366  000E4A  0B80               	andlw	128
 10367                           
 10368                           ; Switch size 1, requested type "space"
 10369                           ; Number of cases is 2, Range of values is 0 to 128
 10370                           ; switch strategies available:
 10371                           ; Name         Instructions Cycles
 10372                           ; simple_byte            7     4 (average)
 10373                           ;	Chosen strategy is simple_byte
 10374  000E4C  0A00               	xorlw	0	; case 0
 10375  000E4E  B4D8               	btfsc	status,2,c
 10376  000E50  D7C5               	goto	i2l7207
 10377  000E52  0A80               	xorlw	128	; case 128
 10378  000E54  B4D8               	btfsc	status,2,c
 10379  000E56  D7DD               	goto	i2l7221
 10380  000E58                     i2l7239:
 10381                           
 10382                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10383  000E58  5020               	movf	i2__doprnt@width,w,c
 10384  000E5A  1021               	iorwf	i2__doprnt@width+1,w,c
 10385  000E5C  B4D8               	btfsc	status,2,c
 10386  000E5E  D009               	goto	i2l7245
 10387  000E60  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 10388  000E64  0E03               	movlw	3
 10389  000E66  1613               	andwf	??i2__doprnt,f,c
 10390  000E68  B4D8               	btfsc	status,2,c
 10391  000E6A  D003               	goto	i2l7245
 10392                           
 10393                           ;doprnt.c: 1346: width--;
 10394  000E6C  0620               	decf	i2__doprnt@width,f,c
 10395  000E6E  A0D8               	btfss	status,0,c
 10396  000E70  0621               	decf	i2__doprnt@width+1,f,c
 10397  000E72                     i2l7245:
 10398                           
 10399                           ;doprnt.c: 1381: if(width > c)
 10400  000E72  0E80               	movlw	128
 10401  000E74  BE22               	btfsc	i2__doprnt@c,7,c
 10402  000E76  0E7F               	movlw	127
 10403  000E78  6E13               	movwf	??i2__doprnt& (0+255),c
 10404  000E7A  5020               	movf	i2__doprnt@width,w,c
 10405  000E7C  5C22               	subwf	i2__doprnt@c,w,c
 10406  000E7E  5021               	movf	i2__doprnt@width+1,w,c
 10407  000E80  0A80               	xorlw	128
 10408  000E82  5813               	subwfb	??i2__doprnt& (0+255),w,c
 10409  000E84  B0D8               	btfsc	status,0,c
 10410  000E86  D007               	goto	i2l7249
 10411                           
 10412                           ;doprnt.c: 1382: width -= c;
 10413  000E88  5022               	movf	i2__doprnt@c,w,c
 10414  000E8A  5E20               	subwf	i2__doprnt@width,f,c
 10415  000E8C  0E00               	movlw	0
 10416  000E8E  BE22               	btfsc	i2__doprnt@c,7,c
 10417  000E90  0EFF               	movlw	255
 10418  000E92  5A21               	subwfb	i2__doprnt@width+1,f,c
 10419  000E94  D004               	goto	i2l7251
 10420  000E96                     i2l7249:
 10421                           
 10422                           ;doprnt.c: 1383: else
 10423                           ;doprnt.c: 1384: width = 0;
 10424  000E96  0E00               	movlw	0
 10425  000E98  6E21               	movwf	i2__doprnt@width+1,c
 10426  000E9A  0E00               	movlw	0
 10427  000E9C  6E20               	movwf	i2__doprnt@width,c
 10428  000E9E                     i2l7251:
 10429                           
 10430                           ;doprnt.c: 1387: if(flag & 0x04) {
 10431  000E9E  A41F               	btfss	i2__doprnt@flag,2,c
 10432  000EA0  D078               	goto	i2l7275
 10433                           
 10434                           ;doprnt.c: 1392: if(flag & 0x03)
 10435  000EA2  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 10436  000EA6  0E03               	movlw	3
 10437  000EA8  1613               	andwf	??i2__doprnt,f,c
 10438  000EAA  B4D8               	btfsc	status,2,c
 10439  000EAC  D035               	goto	i2l7263
 10440                           
 10441                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 10442  000EAE  EE20 F002          	lfsr	2,2
 10443  000EB2  500D               	movf	i2__doprnt@pb,w,c
 10444  000EB4  26D9               	addwf	fsr2l,f,c
 10445  000EB6  500E               	movf	i2__doprnt@pb+1,w,c
 10446  000EB8  22DA               	addwfc	fsr2h,f,c
 10447  000EBA  50DE               	movf	postinc2,w,c
 10448  000EBC  10DE               	iorwf	postinc2,w,c
 10449  000EBE  B4D8               	btfsc	status,2,c
 10450  000EC0  D016               	goto	i2l7259
 10451  000EC2  EE20 F002          	lfsr	2,2
 10452  000EC6  500D               	movf	i2__doprnt@pb,w,c
 10453  000EC8  26D9               	addwf	fsr2l,f,c
 10454  000ECA  500E               	movf	i2__doprnt@pb+1,w,c
 10455  000ECC  22DA               	addwfc	fsr2h,f,c
 10456  000ECE  CFDE F013          	movff	postinc2,??i2__doprnt
 10457  000ED2  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10458  000ED6  D801               	call	i2u1095_48
 10459  000ED8  D01F               	goto	i2l7263
 10460  000EDA                     i2u1095_48:
 10461  000EDA  0005               	push	
 10462  000EDC  6EFA               	movwf	pclath,c
 10463  000EDE  5013               	movf	??i2__doprnt,w,c
 10464  000EE0  6EFD               	movwf	tosl,c
 10465  000EE2  5014               	movf	??i2__doprnt+1,w,c
 10466  000EE4  6EFE               	movwf	tosh,c
 10467  000EE6  6AFF               	clrf	tosu,c
 10468  000EE8  50FA               	movf	pclath,w,c
 10469  000EEA  0E2D               	movlw	45
 10470  000EEC  0012               	return		;indir
 10471  000EEE                     i2l7259:
 10472  000EEE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10473  000EF2  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10474  000EF6  CFDE F013          	movff	postinc2,??i2__doprnt
 10475  000EFA  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10476  000EFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10477  000F02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10478  000F06  0E2D               	movlw	45
 10479  000F08  6EDF               	movwf	indf2,c
 10480  000F0A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10481  000F0E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10482  000F12  2ADE               	incf	postinc2,f,c
 10483  000F14  0E00               	movlw	0
 10484  000F16  22DD               	addwfc	postdec2,f,c
 10485  000F18                     i2l7263:
 10486                           
 10487                           ;doprnt.c: 1415: if(width)
 10488  000F18  5020               	movf	i2__doprnt@width,w,c
 10489  000F1A  1021               	iorwf	i2__doprnt@width+1,w,c
 10490  000F1C  B4D8               	btfsc	status,2,c
 10491  000F1E  D0B4               	goto	i2l7297
 10492                           
 10493                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 10494                           
 10495                           ;doprnt.c: 1416: do
 10496  000F20  EE20 F002          	lfsr	2,2
 10497  000F24  500D               	movf	i2__doprnt@pb,w,c
 10498  000F26  26D9               	addwf	fsr2l,f,c
 10499  000F28  500E               	movf	i2__doprnt@pb+1,w,c
 10500  000F2A  22DA               	addwfc	fsr2h,f,c
 10501  000F2C  50DE               	movf	postinc2,w,c
 10502  000F2E  10DE               	iorwf	postinc2,w,c
 10503  000F30  B4D8               	btfsc	status,2,c
 10504  000F32  D016               	goto	i2l7269
 10505  000F34  EE20 F002          	lfsr	2,2
 10506  000F38  500D               	movf	i2__doprnt@pb,w,c
 10507  000F3A  26D9               	addwf	fsr2l,f,c
 10508  000F3C  500E               	movf	i2__doprnt@pb+1,w,c
 10509  000F3E  22DA               	addwfc	fsr2h,f,c
 10510  000F40  CFDE F013          	movff	postinc2,??i2__doprnt
 10511  000F44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10512  000F48  D801               	call	i2u1098_48
 10513  000F4A  D01F               	goto	i2l7273
 10514  000F4C                     i2u1098_48:
 10515  000F4C  0005               	push	
 10516  000F4E  6EFA               	movwf	pclath,c
 10517  000F50  5013               	movf	??i2__doprnt,w,c
 10518  000F52  6EFD               	movwf	tosl,c
 10519  000F54  5014               	movf	??i2__doprnt+1,w,c
 10520  000F56  6EFE               	movwf	tosh,c
 10521  000F58  6AFF               	clrf	tosu,c
 10522  000F5A  50FA               	movf	pclath,w,c
 10523  000F5C  0E30               	movlw	48
 10524  000F5E  0012               	return		;indir
 10525  000F60                     i2l7269:
 10526  000F60  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10527  000F64  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10528  000F68  CFDE F013          	movff	postinc2,??i2__doprnt
 10529  000F6C  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10530  000F70  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10531  000F74  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10532  000F78  0E30               	movlw	48
 10533  000F7A  6EDF               	movwf	indf2,c
 10534  000F7C  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10535  000F80  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10536  000F84  2ADE               	incf	postinc2,f,c
 10537  000F86  0E00               	movlw	0
 10538  000F88  22DD               	addwfc	postdec2,f,c
 10539  000F8A                     i2l7273:
 10540                           
 10541                           ;doprnt.c: 1418: while(--width);
 10542  000F8A  0620               	decf	i2__doprnt@width,f,c
 10543  000F8C  A0D8               	btfss	status,0,c
 10544  000F8E  0621               	decf	i2__doprnt@width+1,f,c
 10545  000F90  D7C3               	goto	i2l7263
 10546  000F92                     i2l7275:
 10547                           
 10548                           ;doprnt.c: 1422: {
 10549                           ;doprnt.c: 1424: if(width
 10550                           ;doprnt.c: 1428: )
 10551  000F92  5020               	movf	i2__doprnt@width,w,c
 10552  000F94  1021               	iorwf	i2__doprnt@width+1,w,c
 10553  000F96  B4D8               	btfsc	status,2,c
 10554  000F98  D03C               	goto	i2l7287
 10555  000F9A                     i2l7277:
 10556                           
 10557                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 10558  000F9A  EE20 F002          	lfsr	2,2
 10559  000F9E  500D               	movf	i2__doprnt@pb,w,c
 10560  000FA0  26D9               	addwf	fsr2l,f,c
 10561  000FA2  500E               	movf	i2__doprnt@pb+1,w,c
 10562  000FA4  22DA               	addwfc	fsr2h,f,c
 10563  000FA6  50DE               	movf	postinc2,w,c
 10564  000FA8  10DE               	iorwf	postinc2,w,c
 10565  000FAA  B4D8               	btfsc	status,2,c
 10566  000FAC  D016               	goto	i2l7281
 10567  000FAE  EE20 F002          	lfsr	2,2
 10568  000FB2  500D               	movf	i2__doprnt@pb,w,c
 10569  000FB4  26D9               	addwf	fsr2l,f,c
 10570  000FB6  500E               	movf	i2__doprnt@pb+1,w,c
 10571  000FB8  22DA               	addwfc	fsr2h,f,c
 10572  000FBA  CFDE F013          	movff	postinc2,??i2__doprnt
 10573  000FBE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10574  000FC2  D801               	call	i2u1102_48
 10575  000FC4  D01F               	goto	i2l7285
 10576  000FC6                     i2u1102_48:
 10577  000FC6  0005               	push	
 10578  000FC8  6EFA               	movwf	pclath,c
 10579  000FCA  5013               	movf	??i2__doprnt,w,c
 10580  000FCC  6EFD               	movwf	tosl,c
 10581  000FCE  5014               	movf	??i2__doprnt+1,w,c
 10582  000FD0  6EFE               	movwf	tosh,c
 10583  000FD2  6AFF               	clrf	tosu,c
 10584  000FD4  50FA               	movf	pclath,w,c
 10585  000FD6  0E20               	movlw	32
 10586  000FD8  0012               	return		;indir
 10587  000FDA                     i2l7281:
 10588  000FDA  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10589  000FDE  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10590  000FE2  CFDE F013          	movff	postinc2,??i2__doprnt
 10591  000FE6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10592  000FEA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10593  000FEE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10594  000FF2  0E20               	movlw	32
 10595  000FF4  6EDF               	movwf	indf2,c
 10596  000FF6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10597  000FFA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10598  000FFE  2ADE               	incf	postinc2,f,c
 10599  001000  0E00               	movlw	0
 10600  001002  22DD               	addwfc	postdec2,f,c
 10601  001004                     i2l7285:
 10602                           
 10603                           ;doprnt.c: 1431: while(--width);
 10604  001004  0620               	decf	i2__doprnt@width,f,c
 10605  001006  A0D8               	btfss	status,0,c
 10606  001008  0621               	decf	i2__doprnt@width+1,f,c
 10607  00100A  5020               	movf	i2__doprnt@width,w,c
 10608  00100C  1021               	iorwf	i2__doprnt@width+1,w,c
 10609  00100E  A4D8               	btfss	status,2,c
 10610  001010  D7C4               	goto	i2l7277
 10611  001012                     i2l7287:
 10612                           
 10613                           ;doprnt.c: 1438: if(flag & 0x03)
 10614  001012  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 10615  001016  0E03               	movlw	3
 10616  001018  1613               	andwf	??i2__doprnt,f,c
 10617  00101A  B4D8               	btfsc	status,2,c
 10618  00101C  D035               	goto	i2l7297
 10619                           
 10620                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 10621  00101E  EE20 F002          	lfsr	2,2
 10622  001022  500D               	movf	i2__doprnt@pb,w,c
 10623  001024  26D9               	addwf	fsr2l,f,c
 10624  001026  500E               	movf	i2__doprnt@pb+1,w,c
 10625  001028  22DA               	addwfc	fsr2h,f,c
 10626  00102A  50DE               	movf	postinc2,w,c
 10627  00102C  10DE               	iorwf	postinc2,w,c
 10628  00102E  B4D8               	btfsc	status,2,c
 10629  001030  D016               	goto	i2l7293
 10630  001032  EE20 F002          	lfsr	2,2
 10631  001036  500D               	movf	i2__doprnt@pb,w,c
 10632  001038  26D9               	addwf	fsr2l,f,c
 10633  00103A  500E               	movf	i2__doprnt@pb+1,w,c
 10634  00103C  22DA               	addwfc	fsr2h,f,c
 10635  00103E  CFDE F013          	movff	postinc2,??i2__doprnt
 10636  001042  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10637  001046  D801               	call	i2u1106_48
 10638  001048  D01F               	goto	i2l7297
 10639  00104A                     i2u1106_48:
 10640  00104A  0005               	push	
 10641  00104C  6EFA               	movwf	pclath,c
 10642  00104E  5013               	movf	??i2__doprnt,w,c
 10643  001050  6EFD               	movwf	tosl,c
 10644  001052  5014               	movf	??i2__doprnt+1,w,c
 10645  001054  6EFE               	movwf	tosh,c
 10646  001056  6AFF               	clrf	tosu,c
 10647  001058  50FA               	movf	pclath,w,c
 10648  00105A  0E2D               	movlw	45
 10649  00105C  0012               	return		;indir
 10650  00105E                     i2l7293:
 10651  00105E  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10652  001062  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10653  001066  CFDE F013          	movff	postinc2,??i2__doprnt
 10654  00106A  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10655  00106E  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10656  001072  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10657  001076  0E2D               	movlw	45
 10658  001078  6EDF               	movwf	indf2,c
 10659  00107A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10660  00107E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10661  001082  2ADE               	incf	postinc2,f,c
 10662  001084  0E00               	movlw	0
 10663  001086  22DD               	addwfc	postdec2,f,c
 10664  001088                     i2l7297:
 10665                           
 10666                           ;doprnt.c: 1469: }
 10667                           ;doprnt.c: 1472: prec = c;
 10668  001088  C022  F018         	movff	i2__doprnt@c,i2__doprnt@prec
 10669                           
 10670                           ;doprnt.c: 1474: while(prec--) {
 10671  00108C  D08B               	goto	i2l7317
 10672  00108E                     i2l7299:
 10673                           
 10674                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10675  00108E  5018               	movf	i2__doprnt@prec,w,c
 10676  001090  0D02               	mullw	2
 10677  001092  0EE6               	movlw	low _dpowers
 10678  001094  24F3               	addwf	prodl,w,c
 10679  001096  6EF6               	movwf	tblptrl,c
 10680  001098  0EFE               	movlw	high _dpowers
 10681  00109A  20F4               	addwfc	prodh,w,c
 10682  00109C  6EF7               	movwf	tblptrh,c
 10683  00109E                     	if	1	;There are 3 active tblptr bytes
 10684  00109E  6AF8               	clrf	tblptru,c
 10685  0010A0  0E00               	movlw	low (__mediumconst shr (0+16))
 10686  0010A2  22F8               	addwfc	tblptru,f,c
 10687  0010A4                     	endif
 10688  0010A4  0009               	tblrd		*+
 10689  0010A6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10690  0010AA  000A               	tblrd		*-
 10691  0010AC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10692  0010B0  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 10693  0010B4  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 10694  0010B8  EC20  F016         	call	i2___lwdiv
 10695  0010BC  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 10696  0010C0  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 10697  0010C4  0E00               	movlw	0
 10698  0010C6  6E0B               	movwf	i2___lwmod@divisor+1,c
 10699  0010C8  0E0A               	movlw	10
 10700  0010CA  6E0A               	movwf	i2___lwmod@divisor,c
 10701  0010CC  EC93  F016         	call	i2___lwmod	;wreg free
 10702  0010D0  5008               	movf	?i2___lwmod,w,c
 10703  0010D2  0F30               	addlw	48
 10704  0010D4  6E22               	movwf	i2__doprnt@c,c
 10705                           
 10706                           ;doprnt.c: 1491: break;
 10707  0010D6  D031               	goto	i2l7309
 10708  0010D8                     i2l7301:
 10709                           
 10710                           ;doprnt.c: 1499: {
 10711                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 10712  0010D8  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 10713  0010DC  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 10714  0010E0  5018               	movf	i2__doprnt@prec,w,c
 10715  0010E2  0D02               	mullw	2
 10716  0010E4  0EF0               	movlw	low _hexpowers
 10717  0010E6  24F3               	addwf	prodl,w,c
 10718  0010E8  6EF6               	movwf	tblptrl,c
 10719  0010EA  0EFE               	movlw	high _hexpowers
 10720  0010EC  20F4               	addwfc	prodh,w,c
 10721  0010EE  6EF7               	movwf	tblptrh,c
 10722  0010F0                     	if	1	;There are 3 active tblptr bytes
 10723  0010F0  6AF8               	clrf	tblptru,c
 10724  0010F2  0E00               	movlw	low (__mediumconst shr (0+16))
 10725  0010F4  22F8               	addwfc	tblptru,f,c
 10726  0010F6                     	endif
 10727  0010F6  0009               	tblrd		*+
 10728  0010F8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 10729  0010FC  000A               	tblrd		*-
 10730  0010FE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 10731  001102  EC20  F016         	call	i2___lwdiv	;wreg free
 10732  001106  5001               	movf	?i2___lwdiv,w,c
 10733  001108  0B0F               	andlw	15
 10734  00110A  6E17               	movwf	i2__doprnt@idx,c
 10735                           
 10736                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 10737  00110C  5017               	movf	i2__doprnt@idx,w,c
 10738  00110E  0D01               	mullw	1
 10739  001110  0E97               	movlw	low STR_19
 10740  001112  24F3               	addwf	prodl,w,c
 10741  001114  6EF6               	movwf	tblptrl,c
 10742  001116  0EFF               	movlw	high STR_19
 10743  001118  20F4               	addwfc	prodh,w,c
 10744  00111A  6EF7               	movwf	tblptrh,c
 10745  00111C                     	if	1	;There are 3 active tblptr bytes
 10746  00111C  6AF8               	clrf	tblptru,c
 10747  00111E  0E00               	movlw	low (__mediumconst shr (0+16))
 10748  001120  22F8               	addwfc	tblptru,f,c
 10749  001122                     	endif
 10750  001122  0008               	tblrd		*
 10751  001124  CFF5 F022          	movff	tablat,i2__doprnt@c
 10752                           
 10753                           ;doprnt.c: 1523: }
 10754                           
 10755                           ;doprnt.c: 1508: }
 10756                           ;doprnt.c: 1510: break;
 10757  001128  D008               	goto	i2l7309
 10758  00112A                     i2l7307:
 10759  00112A  501F               	movf	i2__doprnt@flag,w,c
 10760  00112C  0B80               	andlw	128
 10761                           
 10762                           ; Switch size 1, requested type "space"
 10763                           ; Number of cases is 2, Range of values is 0 to 128
 10764                           ; switch strategies available:
 10765                           ; Name         Instructions Cycles
 10766                           ; simple_byte            7     4 (average)
 10767                           ;	Chosen strategy is simple_byte
 10768  00112E  0A00               	xorlw	0	; case 0
 10769  001130  B4D8               	btfsc	status,2,c
 10770  001132  D7AD               	goto	i2l7299
 10771  001134  0A80               	xorlw	128	; case 128
 10772  001136  B4D8               	btfsc	status,2,c
 10773  001138  D7CF               	goto	i2l7301
 10774  00113A                     i2l7309:
 10775                           
 10776                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 10777  00113A  EE20 F002          	lfsr	2,2
 10778  00113E  500D               	movf	i2__doprnt@pb,w,c
 10779  001140  26D9               	addwf	fsr2l,f,c
 10780  001142  500E               	movf	i2__doprnt@pb+1,w,c
 10781  001144  22DA               	addwfc	fsr2h,f,c
 10782  001146  50DE               	movf	postinc2,w,c
 10783  001148  10DE               	iorwf	postinc2,w,c
 10784  00114A  B4D8               	btfsc	status,2,c
 10785  00114C  D016               	goto	i2l7313
 10786  00114E  EE20 F002          	lfsr	2,2
 10787  001152  500D               	movf	i2__doprnt@pb,w,c
 10788  001154  26D9               	addwf	fsr2l,f,c
 10789  001156  500E               	movf	i2__doprnt@pb+1,w,c
 10790  001158  22DA               	addwfc	fsr2h,f,c
 10791  00115A  CFDE F013          	movff	postinc2,??i2__doprnt
 10792  00115E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10793  001162  D801               	call	i2u1108_48
 10794  001164  D01F               	goto	i2l7317
 10795  001166                     i2u1108_48:
 10796  001166  0005               	push	
 10797  001168  6EFA               	movwf	pclath,c
 10798  00116A  5013               	movf	??i2__doprnt,w,c
 10799  00116C  6EFD               	movwf	tosl,c
 10800  00116E  5014               	movf	??i2__doprnt+1,w,c
 10801  001170  6EFE               	movwf	tosh,c
 10802  001172  6AFF               	clrf	tosu,c
 10803  001174  50FA               	movf	pclath,w,c
 10804  001176  5022               	movf	i2__doprnt@c,w,c
 10805  001178  0012               	return		;indir
 10806  00117A                     i2l7313:
 10807  00117A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10808  00117E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10809  001182  CFDE F013          	movff	postinc2,??i2__doprnt
 10810  001186  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10811  00118A  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10812  00118E  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10813  001192  C022  FFDF         	movff	i2__doprnt@c,indf2
 10814  001196  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10815  00119A  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10816  00119E  2ADE               	incf	postinc2,f,c
 10817  0011A0  0E00               	movlw	0
 10818  0011A2  22DD               	addwfc	postdec2,f,c
 10819  0011A4                     i2l7317:
 10820  0011A4  0618               	decf	i2__doprnt@prec,f,c
 10821  0011A6  2818               	incf	i2__doprnt@prec,w,c
 10822  0011A8  A4D8               	btfss	status,2,c
 10823  0011AA  D7BF               	goto	i2l7307
 10824  0011AC                     i2l7319:
 10825  0011AC  500F               	movf	i2__doprnt@f,w,c
 10826  0011AE  6E13               	movwf	??i2__doprnt& (0+255),c
 10827  0011B0  5010               	movf	i2__doprnt@f+1,w,c
 10828  0011B2  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 10829  0011B4  4A0F               	infsnz	i2__doprnt@f,f,c
 10830  0011B6  2A10               	incf	i2__doprnt@f+1,f,c
 10831  0011B8  C013  FFF6         	movff	??i2__doprnt,tblptrl
 10832  0011BC  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 10833  0011C0  0E00               	movlw	low (__mediumconst shr (0+16))
 10834  0011C2  6EF8               	movwf	tblptru,c
 10835  0011C4  0E0F               	movlw	(high __ramtop+-1)
 10836  0011C6  64F7               	cpfsgt	tblptrh,c
 10837  0011C8  D003               	bra	i2u1110_47
 10838  0011CA  0008               	tblrd		*
 10839  0011CC  50F5               	movf	tablat,w,c
 10840  0011CE  D005               	bra	i2u1110_40
 10841  0011D0                     i2u1110_47:
 10842  0011D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 10843  0011D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 10844  0011D8  50EF               	movf	indf0,w,c
 10845  0011DA                     i2u1110_40:
 10846  0011DA  6E22               	movwf	i2__doprnt@c,c
 10847  0011DC  5022               	movf	i2__doprnt@c,w,c
 10848  0011DE  A4D8               	btfss	status,2,c
 10849  0011E0  EFCD  F004         	goto	i2l7113
 10850  0011E4                     i2l7321:
 10851                           
 10852                           ;doprnt.c: 1540: return 0;
 10853  0011E4  0E00               	movlw	0
 10854  0011E6  6E0E               	movwf	?i2__doprnt+1,c
 10855  0011E8  0E00               	movlw	0
 10856  0011EA  6E0D               	movwf	?i2__doprnt,c
 10857  0011EC  0012               	return	
 10858  0011EE                     __end_ofi2__doprnt:
 10859                           	opt stack 0
 10860                           tosu	equ	0xFFF
 10861                           tosh	equ	0xFFE
 10862                           tosl	equ	0xFFD
 10863                           pclatu	equ	0xFFB
 10864                           pclath	equ	0xFFA
 10865                           tblptru	equ	0xFF8
 10866                           tblptrh	equ	0xFF7
 10867                           tblptrl	equ	0xFF6
 10868                           tablat	equ	0xFF5
 10869                           prodh	equ	0xFF4
 10870                           prodl	equ	0xFF3
 10871                           intcon	equ	0xFF2
 10872                           intcon2	equ	0xFF1
 10873                           intcon3	equ	0xFF0
 10874                           indf0	equ	0xFEF
 10875                           postinc0	equ	0xFEE
 10876                           fsr0h	equ	0xFEA
 10877                           fsr0l	equ	0xFE9
 10878                           wreg	equ	0xFE8
 10879                           indf1	equ	0xFE7
 10880                           postinc1	equ	0xFE6
 10881                           postdec1	equ	0xFE5
 10882                           fsr1h	equ	0xFE2
 10883                           fsr1l	equ	0xFE1
 10884                           indf2	equ	0xFDF
 10885                           postinc2	equ	0xFDE
 10886                           postdec2	equ	0xFDD
 10887                           fsr2h	equ	0xFDA
 10888                           fsr2l	equ	0xFD9
 10889                           status	equ	0xFD8
 10890                           
 10891 ;; *************** function i2_putch *****************
 10892 ;; Defined at:
 10893 ;;		line 30 in file "lcd.c"
 10894 ;; Parameters:    Size  Location     Type
 10895 ;;  data            1    wreg     unsigned char 
 10896 ;; Auto vars:     Size  Location     Type
 10897 ;;  data            1    2[COMRAM] unsigned char 
 10898 ;; Return value:  Size  Location     Type
 10899 ;;                  1    wreg      void 
 10900 ;; Registers used:
 10901 ;;		wreg, status,2, status,0, cstack
 10902 ;; Tracked objects:
 10903 ;;		On entry : 0/0
 10904 ;;		On exit  : 0/0
 10905 ;;		Unchanged: 0/0
 10906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10907 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10908 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10910 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10911 ;;Total ram usage:        1 bytes
 10912 ;; Hardware stack levels used:    1
 10913 ;; Hardware stack levels required when called:    1
 10914 ;; This function calls:
 10915 ;;		i2_lcdNibble
 10916 ;; This function is called by:
 10917 ;;		i2_printf
 10918 ;; This function uses a non-reentrant model
 10919 ;;
 10920                           
 10921                           	psect	text34
 10922  002F48                     __ptext34:
 10923                           	opt stack 0
 10924  002F48                     i2_putch:
 10925                           	opt stack 20
 10926                           
 10927                           ;incstack = 0
 10928                           ;i2putch@data stored from wreg
 10929  002F48  6E03               	movwf	i2putch@data,c
 10930                           
 10931                           ;lcd.c: 31: LATDbits.LATD2 = 1;
 10932  002F4A  848C               	bsf	3980,2,c	;volatile
 10933                           
 10934                           ;lcd.c: 32: lcdNibble(data);
 10935  002F4C  5003               	movf	i2putch@data,w,c
 10936  002F4E  ECCC  F015         	call	i2_lcdNibble
 10937  002F52  0012               	return		;funcret
 10938  002F54                     __end_ofi2_putch:
 10939                           	opt stack 0
 10940                           tosu	equ	0xFFF
 10941                           tosh	equ	0xFFE
 10942                           tosl	equ	0xFFD
 10943                           pclatu	equ	0xFFB
 10944                           pclath	equ	0xFFA
 10945                           tblptru	equ	0xFF8
 10946                           tblptrh	equ	0xFF7
 10947                           tblptrl	equ	0xFF6
 10948                           tablat	equ	0xFF5
 10949                           prodh	equ	0xFF4
 10950                           prodl	equ	0xFF3
 10951                           intcon	equ	0xFF2
 10952                           intcon2	equ	0xFF1
 10953                           intcon3	equ	0xFF0
 10954                           indf0	equ	0xFEF
 10955                           postinc0	equ	0xFEE
 10956                           fsr0h	equ	0xFEA
 10957                           fsr0l	equ	0xFE9
 10958                           wreg	equ	0xFE8
 10959                           indf1	equ	0xFE7
 10960                           postinc1	equ	0xFE6
 10961                           postdec1	equ	0xFE5
 10962                           fsr1h	equ	0xFE2
 10963                           fsr1l	equ	0xFE1
 10964                           indf2	equ	0xFDF
 10965                           postinc2	equ	0xFDE
 10966                           postdec2	equ	0xFDD
 10967                           fsr2h	equ	0xFDA
 10968                           fsr2l	equ	0xFD9
 10969                           status	equ	0xFD8
 10970                           
 10971 ;; *************** function i2_isdigit *****************
 10972 ;; Defined at:
 10973 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 10974 ;; Parameters:    Size  Location     Type
 10975 ;;  c               1    wreg     unsigned char 
 10976 ;; Auto vars:     Size  Location     Type
 10977 ;;  c               1    2[COMRAM] unsigned char 
 10978 ;; Return value:  Size  Location     Type
 10979 ;;		None               void
 10980 ;; Registers used:
 10981 ;;		wreg, status,2, status,0
 10982 ;; Tracked objects:
 10983 ;;		On entry : 0/0
 10984 ;;		On exit  : 0/0
 10985 ;;		Unchanged: 0/0
 10986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10987 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10988 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10989 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10990 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10991 ;;Total ram usage:        3 bytes
 10992 ;; Hardware stack levels used:    1
 10993 ;; This function calls:
 10994 ;;		Nothing
 10995 ;; This function is called by:
 10996 ;;		i2__doprnt
 10997 ;; This function uses a non-reentrant model
 10998 ;;
 10999                           
 11000                           	psect	text35
 11001  002EDE                     __ptext35:
 11002                           	opt stack 0
 11003  002EDE                     i2_isdigit:
 11004                           	opt stack 21
 11005                           
 11006                           ;incstack = 0
 11007                           ;i2isdigit@c stored from wreg
 11008  002EDE  6E03               	movwf	i2isdigit@c,c
 11009  002EE0  0E00               	movlw	0
 11010  002EE2  6E02               	movwf	i2_isdigit$698,c
 11011  002EE4  0E3A               	movlw	58
 11012  002EE6  6003               	cpfslt	i2isdigit@c,c
 11013  002EE8  D005               	goto	i2l2867
 11014  002EEA  0E2F               	movlw	47
 11015  002EEC  6403               	cpfsgt	i2isdigit@c,c
 11016  002EEE  D002               	goto	i2l2867
 11017  002EF0  0E01               	movlw	1
 11018  002EF2  6E02               	movwf	i2_isdigit$698,c
 11019  002EF4                     i2l2867:
 11020  002EF4  C002  F001         	movff	i2_isdigit$698,??i2_isdigit
 11021  002EF8  3001               	rrcf	??i2_isdigit,w,c
 11022  002EFA  0012               	return	
 11023  002EFC                     __end_ofi2_isdigit:
 11024                           	opt stack 0
 11025                           tosu	equ	0xFFF
 11026                           tosh	equ	0xFFE
 11027                           tosl	equ	0xFFD
 11028                           pclatu	equ	0xFFB
 11029                           pclath	equ	0xFFA
 11030                           tblptru	equ	0xFF8
 11031                           tblptrh	equ	0xFF7
 11032                           tblptrl	equ	0xFF6
 11033                           tablat	equ	0xFF5
 11034                           prodh	equ	0xFF4
 11035                           prodl	equ	0xFF3
 11036                           intcon	equ	0xFF2
 11037                           intcon2	equ	0xFF1
 11038                           intcon3	equ	0xFF0
 11039                           indf0	equ	0xFEF
 11040                           postinc0	equ	0xFEE
 11041                           fsr0h	equ	0xFEA
 11042                           fsr0l	equ	0xFE9
 11043                           wreg	equ	0xFE8
 11044                           indf1	equ	0xFE7
 11045                           postinc1	equ	0xFE6
 11046                           postdec1	equ	0xFE5
 11047                           fsr1h	equ	0xFE2
 11048                           fsr1l	equ	0xFE1
 11049                           indf2	equ	0xFDF
 11050                           postinc2	equ	0xFDE
 11051                           postdec2	equ	0xFDD
 11052                           fsr2h	equ	0xFDA
 11053                           fsr2l	equ	0xFD9
 11054                           status	equ	0xFD8
 11055                           
 11056 ;; *************** function i2___wmul *****************
 11057 ;; Defined at:
 11058 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11059 ;; Parameters:    Size  Location     Type
 11060 ;;  multiplier      2    0[COMRAM] unsigned int 
 11061 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11062 ;; Auto vars:     Size  Location     Type
 11063 ;;  __wmul          2    4[COMRAM] unsigned int 
 11064 ;; Return value:  Size  Location     Type
 11065 ;;                  2    0[COMRAM] unsigned int 
 11066 ;; Registers used:
 11067 ;;		wreg, status,2, status,0, prodl, prodh
 11068 ;; Tracked objects:
 11069 ;;		On entry : 0/0
 11070 ;;		On exit  : 0/0
 11071 ;;		Unchanged: 0/0
 11072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11073 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11074 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11076 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11077 ;;Total ram usage:        6 bytes
 11078 ;; Hardware stack levels used:    1
 11079 ;; This function calls:
 11080 ;;		Nothing
 11081 ;; This function is called by:
 11082 ;;		i2__doprnt
 11083 ;; This function uses a non-reentrant model
 11084 ;;
 11085                           
 11086                           	psect	text36
 11087  002EB8                     __ptext36:
 11088                           	opt stack 0
 11089  002EB8                     i2___wmul:
 11090                           	opt stack 21
 11091                           
 11092                           ;incstack = 0
 11093  002EB8  5001               	movf	i2___wmul@multiplier,w,c
 11094  002EBA  0203               	mulwf	i2___wmul@multiplicand,c
 11095  002EBC  CFF3 F005          	movff	prodl,i2___wmul@product
 11096  002EC0  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11097  002EC4  5001               	movf	i2___wmul@multiplier,w,c
 11098  002EC6  0204               	mulwf	i2___wmul@multiplicand+1,c
 11099  002EC8  50F3               	movf	prodl,w,c
 11100  002ECA  2606               	addwf	i2___wmul@product+1,f,c
 11101  002ECC  5002               	movf	i2___wmul@multiplier+1,w,c
 11102  002ECE  0203               	mulwf	i2___wmul@multiplicand,c
 11103  002ED0  50F3               	movf	prodl,w,c
 11104  002ED2  2606               	addwf	i2___wmul@product+1,f,c
 11105  002ED4  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11106  002ED8  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11107  002EDC  0012               	return	
 11108  002EDE                     __end_ofi2___wmul:
 11109                           	opt stack 0
 11110                           tosu	equ	0xFFF
 11111                           tosh	equ	0xFFE
 11112                           tosl	equ	0xFFD
 11113                           pclatu	equ	0xFFB
 11114                           pclath	equ	0xFFA
 11115                           tblptru	equ	0xFF8
 11116                           tblptrh	equ	0xFF7
 11117                           tblptrl	equ	0xFF6
 11118                           tablat	equ	0xFF5
 11119                           prodh	equ	0xFF4
 11120                           prodl	equ	0xFF3
 11121                           intcon	equ	0xFF2
 11122                           intcon2	equ	0xFF1
 11123                           intcon3	equ	0xFF0
 11124                           indf0	equ	0xFEF
 11125                           postinc0	equ	0xFEE
 11126                           fsr0h	equ	0xFEA
 11127                           fsr0l	equ	0xFE9
 11128                           wreg	equ	0xFE8
 11129                           indf1	equ	0xFE7
 11130                           postinc1	equ	0xFE6
 11131                           postdec1	equ	0xFE5
 11132                           fsr1h	equ	0xFE2
 11133                           fsr1l	equ	0xFE1
 11134                           indf2	equ	0xFDF
 11135                           postinc2	equ	0xFDE
 11136                           postdec2	equ	0xFDD
 11137                           fsr2h	equ	0xFDA
 11138                           fsr2l	equ	0xFD9
 11139                           status	equ	0xFD8
 11140                           
 11141 ;; *************** function i2___lwmod *****************
 11142 ;; Defined at:
 11143 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 11144 ;; Parameters:    Size  Location     Type
 11145 ;;  dividend        2    7[COMRAM] unsigned int 
 11146 ;;  divisor         2    9[COMRAM] unsigned int 
 11147 ;; Auto vars:     Size  Location     Type
 11148 ;;  __lwmod         1   11[COMRAM] unsigned char 
 11149 ;; Return value:  Size  Location     Type
 11150 ;;                  2    7[COMRAM] unsigned int 
 11151 ;; Registers used:
 11152 ;;		wreg, status,2, status,0
 11153 ;; Tracked objects:
 11154 ;;		On entry : 0/0
 11155 ;;		On exit  : 0/0
 11156 ;;		Unchanged: 0/0
 11157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11158 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11159 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11161 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11162 ;;Total ram usage:        5 bytes
 11163 ;; Hardware stack levels used:    1
 11164 ;; This function calls:
 11165 ;;		Nothing
 11166 ;; This function is called by:
 11167 ;;		i2__doprnt
 11168 ;; This function uses a non-reentrant model
 11169 ;;
 11170                           
 11171                           	psect	text37
 11172  002D26                     __ptext37:
 11173                           	opt stack 0
 11174  002D26                     i2___lwmod:
 11175                           	opt stack 21
 11176                           
 11177                           ;incstack = 0
 11178  002D26  500A               	movf	i2___lwmod@divisor,w,c
 11179  002D28  100B               	iorwf	i2___lwmod@divisor+1,w,c
 11180  002D2A  B4D8               	btfsc	status,2,c
 11181  002D2C  D018               	goto	i2l928
 11182  002D2E  0E01               	movlw	1
 11183  002D30  6E0C               	movwf	i2___lwmod@counter,c
 11184  002D32  D004               	goto	i2l2899
 11185  002D34                     i2l2897:
 11186  002D34  90D8               	bcf	status,0,c
 11187  002D36  360A               	rlcf	i2___lwmod@divisor,f,c
 11188  002D38  360B               	rlcf	i2___lwmod@divisor+1,f,c
 11189  002D3A  2A0C               	incf	i2___lwmod@counter,f,c
 11190  002D3C                     i2l2899:
 11191  002D3C  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 11192  002D3E  D7FA               	goto	i2l2897
 11193  002D40                     i2l2901:
 11194  002D40  500A               	movf	i2___lwmod@divisor,w,c
 11195  002D42  5C08               	subwf	i2___lwmod@dividend,w,c
 11196  002D44  500B               	movf	i2___lwmod@divisor+1,w,c
 11197  002D46  5809               	subwfb	i2___lwmod@dividend+1,w,c
 11198  002D48  A0D8               	btfss	status,0,c
 11199  002D4A  D004               	goto	i2l2905
 11200  002D4C  500A               	movf	i2___lwmod@divisor,w,c
 11201  002D4E  5E08               	subwf	i2___lwmod@dividend,f,c
 11202  002D50  500B               	movf	i2___lwmod@divisor+1,w,c
 11203  002D52  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 11204  002D54                     i2l2905:
 11205  002D54  90D8               	bcf	status,0,c
 11206  002D56  320B               	rrcf	i2___lwmod@divisor+1,f,c
 11207  002D58  320A               	rrcf	i2___lwmod@divisor,f,c
 11208  002D5A  2E0C               	decfsz	i2___lwmod@counter,f,c
 11209  002D5C  D7F1               	goto	i2l2901
 11210  002D5E                     i2l928:
 11211  002D5E  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 11212  002D62  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 11213  002D66  0012               	return		;funcret
 11214  002D68                     __end_ofi2___lwmod:
 11215                           	opt stack 0
 11216                           tosu	equ	0xFFF
 11217                           tosh	equ	0xFFE
 11218                           tosl	equ	0xFFD
 11219                           pclatu	equ	0xFFB
 11220                           pclath	equ	0xFFA
 11221                           tblptru	equ	0xFF8
 11222                           tblptrh	equ	0xFF7
 11223                           tblptrl	equ	0xFF6
 11224                           tablat	equ	0xFF5
 11225                           prodh	equ	0xFF4
 11226                           prodl	equ	0xFF3
 11227                           intcon	equ	0xFF2
 11228                           intcon2	equ	0xFF1
 11229                           intcon3	equ	0xFF0
 11230                           indf0	equ	0xFEF
 11231                           postinc0	equ	0xFEE
 11232                           fsr0h	equ	0xFEA
 11233                           fsr0l	equ	0xFE9
 11234                           wreg	equ	0xFE8
 11235                           indf1	equ	0xFE7
 11236                           postinc1	equ	0xFE6
 11237                           postdec1	equ	0xFE5
 11238                           fsr1h	equ	0xFE2
 11239                           fsr1l	equ	0xFE1
 11240                           indf2	equ	0xFDF
 11241                           postinc2	equ	0xFDE
 11242                           postdec2	equ	0xFDD
 11243                           fsr2h	equ	0xFDA
 11244                           fsr2l	equ	0xFD9
 11245                           status	equ	0xFD8
 11246                           
 11247 ;; *************** function i2___lwdiv *****************
 11248 ;; Defined at:
 11249 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 11250 ;; Parameters:    Size  Location     Type
 11251 ;;  dividend        2    0[COMRAM] unsigned int 
 11252 ;;  divisor         2    2[COMRAM] unsigned int 
 11253 ;; Auto vars:     Size  Location     Type
 11254 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 11255 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 11256 ;; Return value:  Size  Location     Type
 11257 ;;                  2    0[COMRAM] unsigned int 
 11258 ;; Registers used:
 11259 ;;		wreg, status,2, status,0
 11260 ;; Tracked objects:
 11261 ;;		On entry : 0/0
 11262 ;;		On exit  : 0/0
 11263 ;;		Unchanged: 0/0
 11264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11265 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11266 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11268 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11269 ;;Total ram usage:        7 bytes
 11270 ;; Hardware stack levels used:    1
 11271 ;; This function calls:
 11272 ;;		Nothing
 11273 ;; This function is called by:
 11274 ;;		i2__doprnt
 11275 ;; This function uses a non-reentrant model
 11276 ;;
 11277                           
 11278                           	psect	text38
 11279  002C40                     __ptext38:
 11280                           	opt stack 0
 11281  002C40                     i2___lwdiv:
 11282                           	opt stack 21
 11283                           
 11284                           ;incstack = 0
 11285  002C40  0E00               	movlw	0
 11286  002C42  6E06               	movwf	i2___lwdiv@quotient+1,c
 11287  002C44  0E00               	movlw	0
 11288  002C46  6E05               	movwf	i2___lwdiv@quotient,c
 11289  002C48  5003               	movf	i2___lwdiv@divisor,w,c
 11290  002C4A  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 11291  002C4C  B4D8               	btfsc	status,2,c
 11292  002C4E  D01C               	goto	i2l918
 11293  002C50  0E01               	movlw	1
 11294  002C52  6E07               	movwf	i2___lwdiv@counter,c
 11295  002C54  D004               	goto	i2l2879
 11296  002C56                     i2l2877:
 11297  002C56  90D8               	bcf	status,0,c
 11298  002C58  3603               	rlcf	i2___lwdiv@divisor,f,c
 11299  002C5A  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 11300  002C5C  2A07               	incf	i2___lwdiv@counter,f,c
 11301  002C5E                     i2l2879:
 11302  002C5E  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 11303  002C60  D7FA               	goto	i2l2877
 11304  002C62                     i2l2881:
 11305  002C62  90D8               	bcf	status,0,c
 11306  002C64  3605               	rlcf	i2___lwdiv@quotient,f,c
 11307  002C66  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 11308  002C68  5003               	movf	i2___lwdiv@divisor,w,c
 11309  002C6A  5C01               	subwf	i2___lwdiv@dividend,w,c
 11310  002C6C  5004               	movf	i2___lwdiv@divisor+1,w,c
 11311  002C6E  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 11312  002C70  A0D8               	btfss	status,0,c
 11313  002C72  D005               	goto	i2l2889
 11314  002C74  5003               	movf	i2___lwdiv@divisor,w,c
 11315  002C76  5E01               	subwf	i2___lwdiv@dividend,f,c
 11316  002C78  5004               	movf	i2___lwdiv@divisor+1,w,c
 11317  002C7A  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 11318  002C7C  8005               	bsf	i2___lwdiv@quotient,0,c
 11319  002C7E                     i2l2889:
 11320  002C7E  90D8               	bcf	status,0,c
 11321  002C80  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 11322  002C82  3203               	rrcf	i2___lwdiv@divisor,f,c
 11323  002C84  2E07               	decfsz	i2___lwdiv@counter,f,c
 11324  002C86  D7ED               	goto	i2l2881
 11325  002C88                     i2l918:
 11326  002C88  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 11327  002C8C  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 11328  002C90  0012               	return		;funcret
 11329  002C92                     __end_ofi2___lwdiv:
 11330                           	opt stack 0
 11331                           tosu	equ	0xFFF
 11332                           tosh	equ	0xFFE
 11333                           tosl	equ	0xFFD
 11334                           pclatu	equ	0xFFB
 11335                           pclath	equ	0xFFA
 11336                           tblptru	equ	0xFF8
 11337                           tblptrh	equ	0xFF7
 11338                           tblptrl	equ	0xFF6
 11339                           tablat	equ	0xFF5
 11340                           prodh	equ	0xFF4
 11341                           prodl	equ	0xFF3
 11342                           intcon	equ	0xFF2
 11343                           intcon2	equ	0xFF1
 11344                           intcon3	equ	0xFF0
 11345                           indf0	equ	0xFEF
 11346                           postinc0	equ	0xFEE
 11347                           fsr0h	equ	0xFEA
 11348                           fsr0l	equ	0xFE9
 11349                           wreg	equ	0xFE8
 11350                           indf1	equ	0xFE7
 11351                           postinc1	equ	0xFE6
 11352                           postdec1	equ	0xFE5
 11353                           fsr1h	equ	0xFE2
 11354                           fsr1l	equ	0xFE1
 11355                           indf2	equ	0xFDF
 11356                           postinc2	equ	0xFDE
 11357                           postdec2	equ	0xFDD
 11358                           fsr2h	equ	0xFDA
 11359                           fsr2l	equ	0xFD9
 11360                           status	equ	0xFD8
 11361                           
 11362 ;; *************** function i2_lcdInst *****************
 11363 ;; Defined at:
 11364 ;;		line 25 in file "lcd.c"
 11365 ;; Parameters:    Size  Location     Type
 11366 ;;  data            1    wreg     unsigned char 
 11367 ;; Auto vars:     Size  Location     Type
 11368 ;;  data            1    2[COMRAM] unsigned char 
 11369 ;; Return value:  Size  Location     Type
 11370 ;;                  1    wreg      void 
 11371 ;; Registers used:
 11372 ;;		wreg, status,2, status,0, cstack
 11373 ;; Tracked objects:
 11374 ;;		On entry : 0/0
 11375 ;;		On exit  : 0/0
 11376 ;;		Unchanged: 0/0
 11377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11379 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11380 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11381 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11382 ;;Total ram usage:        1 bytes
 11383 ;; Hardware stack levels used:    1
 11384 ;; Hardware stack levels required when called:    1
 11385 ;; This function calls:
 11386 ;;		i2_lcdNibble
 11387 ;; This function is called by:
 11388 ;;		_keypressed
 11389 ;; This function uses a non-reentrant model
 11390 ;;
 11391                           
 11392                           	psect	text39
 11393  002F54                     __ptext39:
 11394                           	opt stack 0
 11395  002F54                     i2_lcdInst:
 11396                           	opt stack 22
 11397                           
 11398                           ;incstack = 0
 11399                           ;i2lcdInst@data stored from wreg
 11400  002F54  6E03               	movwf	i2lcdInst@data,c
 11401                           
 11402                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 11403  002F56  948C               	bcf	3980,2,c	;volatile
 11404                           
 11405                           ;lcd.c: 27: lcdNibble(data);
 11406  002F58  5003               	movf	i2lcdInst@data,w,c
 11407  002F5A  ECCC  F015         	call	i2_lcdNibble
 11408  002F5E  0012               	return		;funcret
 11409  002F60                     __end_ofi2_lcdInst:
 11410                           	opt stack 0
 11411                           tosu	equ	0xFFF
 11412                           tosh	equ	0xFFE
 11413                           tosl	equ	0xFFD
 11414                           pclatu	equ	0xFFB
 11415                           pclath	equ	0xFFA
 11416                           tblptru	equ	0xFF8
 11417                           tblptrh	equ	0xFF7
 11418                           tblptrl	equ	0xFF6
 11419                           tablat	equ	0xFF5
 11420                           prodh	equ	0xFF4
 11421                           prodl	equ	0xFF3
 11422                           intcon	equ	0xFF2
 11423                           intcon2	equ	0xFF1
 11424                           intcon3	equ	0xFF0
 11425                           indf0	equ	0xFEF
 11426                           postinc0	equ	0xFEE
 11427                           fsr0h	equ	0xFEA
 11428                           fsr0l	equ	0xFE9
 11429                           wreg	equ	0xFE8
 11430                           indf1	equ	0xFE7
 11431                           postinc1	equ	0xFE6
 11432                           postdec1	equ	0xFE5
 11433                           fsr1h	equ	0xFE2
 11434                           fsr1l	equ	0xFE1
 11435                           indf2	equ	0xFDF
 11436                           postinc2	equ	0xFDE
 11437                           postdec2	equ	0xFDD
 11438                           fsr2h	equ	0xFDA
 11439                           fsr2l	equ	0xFD9
 11440                           status	equ	0xFD8
 11441                           
 11442 ;; *************** function i2_lcdNibble *****************
 11443 ;; Defined at:
 11444 ;;		line 35 in file "lcd.c"
 11445 ;; Parameters:    Size  Location     Type
 11446 ;;  data            1    wreg     unsigned char 
 11447 ;; Auto vars:     Size  Location     Type
 11448 ;;  data            1    1[COMRAM] unsigned char 
 11449 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 11450 ;; Return value:  Size  Location     Type
 11451 ;;                  1    wreg      void 
 11452 ;; Registers used:
 11453 ;;		wreg, status,2, status,0
 11454 ;; Tracked objects:
 11455 ;;		On entry : 0/0
 11456 ;;		On exit  : 0/0
 11457 ;;		Unchanged: 0/0
 11458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11459 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11460 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11462 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11463 ;;Total ram usage:        2 bytes
 11464 ;; Hardware stack levels used:    1
 11465 ;; This function calls:
 11466 ;;		Nothing
 11467 ;; This function is called by:
 11468 ;;		i2_lcdInst
 11469 ;;		i2_putch
 11470 ;; This function uses a non-reentrant model
 11471 ;;
 11472                           
 11473                           	psect	text40
 11474  002B98                     __ptext40:
 11475                           	opt stack 0
 11476  002B98                     i2_lcdNibble:
 11477                           	opt stack 20
 11478                           
 11479                           ;incstack = 0
 11480                           ;i2lcdNibble@data stored from wreg
 11481  002B98  6E02               	movwf	i2lcdNibble@data,c
 11482                           
 11483                           ;lcd.c: 37: char temp = data & 0xF0;
 11484  002B9A  5002               	movf	i2lcdNibble@data,w,c
 11485  002B9C  0BF0               	andlw	240
 11486  002B9E  6E01               	movwf	i2lcdNibble@temp,c
 11487                           
 11488                           ;lcd.c: 38: LATD = LATD & 0x0F;
 11489  002BA0  508C               	movf	3980,w,c	;volatile
 11490  002BA2  0B0F               	andlw	15
 11491  002BA4  6E8C               	movwf	3980,c	;volatile
 11492                           
 11493                           ;lcd.c: 39: LATD = temp | LATD;
 11494  002BA6  5001               	movf	i2lcdNibble@temp,w,c
 11495  002BA8  108C               	iorwf	3980,w,c	;volatile
 11496  002BAA  6E8C               	movwf	3980,c	;volatile
 11497                           
 11498                           ;lcd.c: 41: LATDbits.LATD3 = 0;
 11499  002BAC  968C               	bcf	3980,3,c	;volatile
 11500                           
 11501                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11502  002BAE  0E14               	movlw	20
 11503  002BB0                     i2u1176_47:
 11504  002BB0  2EE8               	decfsz	wreg,f,c
 11505  002BB2  D7FE               	bra	i2u1176_47
 11506  002BB4  D000               	nop2	
 11507                           
 11508                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 11509  002BB6  868C               	bsf	3980,3,c	;volatile
 11510                           
 11511                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11512  002BB8  0E14               	movlw	20
 11513  002BBA                     i2u1177_47:
 11514  002BBA  2EE8               	decfsz	wreg,f,c
 11515  002BBC  D7FE               	bra	i2u1177_47
 11516  002BBE  D000               	nop2	
 11517                           
 11518                           ;lcd.c: 46: data = data << 4;
 11519  002BC0  3802               	swapf	i2lcdNibble@data,w,c
 11520  002BC2  0BF0               	andlw	240
 11521  002BC4  6E02               	movwf	i2lcdNibble@data,c
 11522                           
 11523                           ;lcd.c: 48: temp = data & 0xF0;
 11524  002BC6  5002               	movf	i2lcdNibble@data,w,c
 11525  002BC8  0BF0               	andlw	240
 11526  002BCA  6E01               	movwf	i2lcdNibble@temp,c
 11527                           
 11528                           ;lcd.c: 49: LATD = LATD & 0x0F;
 11529  002BCC  508C               	movf	3980,w,c	;volatile
 11530  002BCE  0B0F               	andlw	15
 11531  002BD0  6E8C               	movwf	3980,c	;volatile
 11532                           
 11533                           ;lcd.c: 50: LATD = temp | LATD;
 11534  002BD2  5001               	movf	i2lcdNibble@temp,w,c
 11535  002BD4  108C               	iorwf	3980,w,c	;volatile
 11536  002BD6  6E8C               	movwf	3980,c	;volatile
 11537                           
 11538                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 11539  002BD8  968C               	bcf	3980,3,c	;volatile
 11540                           
 11541                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11542  002BDA  0E14               	movlw	20
 11543  002BDC                     i2u1178_47:
 11544  002BDC  2EE8               	decfsz	wreg,f,c
 11545  002BDE  D7FE               	bra	i2u1178_47
 11546  002BE0  D000               	nop2	
 11547                           
 11548                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 11549  002BE2  868C               	bsf	3980,3,c	;volatile
 11550                           
 11551                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11552  002BE4  0E14               	movlw	20
 11553  002BE6                     i2u1179_47:
 11554  002BE6  2EE8               	decfsz	wreg,f,c
 11555  002BE8  D7FE               	bra	i2u1179_47
 11556  002BEA  D000               	nop2	
 11557  002BEC  0012               	return		;funcret
 11558  002BEE                     __end_ofi2_lcdNibble:
 11559                           	opt stack 0
 11560                           tosu	equ	0xFFF
 11561                           tosh	equ	0xFFE
 11562                           tosl	equ	0xFFD
 11563                           pclatu	equ	0xFFB
 11564                           pclath	equ	0xFFA
 11565                           tblptru	equ	0xFF8
 11566                           tblptrh	equ	0xFF7
 11567                           tblptrl	equ	0xFF6
 11568                           tablat	equ	0xFF5
 11569                           prodh	equ	0xFF4
 11570                           prodl	equ	0xFF3
 11571                           intcon	equ	0xFF2
 11572                           intcon2	equ	0xFF1
 11573                           intcon3	equ	0xFF0
 11574                           indf0	equ	0xFEF
 11575                           postinc0	equ	0xFEE
 11576                           fsr0h	equ	0xFEA
 11577                           fsr0l	equ	0xFE9
 11578                           wreg	equ	0xFE8
 11579                           indf1	equ	0xFE7
 11580                           postinc1	equ	0xFE6
 11581                           postdec1	equ	0xFE5
 11582                           fsr1h	equ	0xFE2
 11583                           fsr1l	equ	0xFE1
 11584                           indf2	equ	0xFDF
 11585                           postinc2	equ	0xFDE
 11586                           postdec2	equ	0xFDD
 11587                           fsr2h	equ	0xFDA
 11588                           fsr2l	equ	0xFD9
 11589                           status	equ	0xFD8
 11590                           
 11591 ;; *************** function i2___awmod *****************
 11592 ;; Defined at:
 11593 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11594 ;; Parameters:    Size  Location     Type
 11595 ;;  dividend        2    0[COMRAM] int 
 11596 ;;  divisor         2    2[COMRAM] int 
 11597 ;; Auto vars:     Size  Location     Type
 11598 ;;  __awmod         1    5[COMRAM] unsigned char 
 11599 ;;  __awmod         1    4[COMRAM] unsigned char 
 11600 ;; Return value:  Size  Location     Type
 11601 ;;                  2    0[COMRAM] int 
 11602 ;; Registers used:
 11603 ;;		wreg, status,2, status,0
 11604 ;; Tracked objects:
 11605 ;;		On entry : 0/0
 11606 ;;		On exit  : 0/0
 11607 ;;		Unchanged: 0/0
 11608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11609 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11610 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11612 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11613 ;;Total ram usage:        6 bytes
 11614 ;; Hardware stack levels used:    1
 11615 ;; This function calls:
 11616 ;;		Nothing
 11617 ;; This function is called by:
 11618 ;;		_keypressed
 11619 ;; This function uses a non-reentrant model
 11620 ;;
 11621                           
 11622                           	psect	text41
 11623  0028DE                     __ptext41:
 11624                           	opt stack 0
 11625  0028DE                     i2___awmod:
 11626                           	opt stack 23
 11627                           
 11628                           ;incstack = 0
 11629  0028DE  0E00               	movlw	0
 11630  0028E0  6E06               	movwf	i2___awmod@sign,c
 11631  0028E2  AE02               	btfss	i2___awmod@dividend+1,7,c
 11632  0028E4  D006               	goto	i2l3529
 11633  0028E6  6C01               	negf	i2___awmod@dividend,c
 11634  0028E8  1E02               	comf	i2___awmod@dividend+1,f,c
 11635  0028EA  B0D8               	btfsc	status,0,c
 11636  0028EC  2A02               	incf	i2___awmod@dividend+1,f,c
 11637  0028EE  0E01               	movlw	1
 11638  0028F0  6E06               	movwf	i2___awmod@sign,c
 11639  0028F2                     i2l3529:
 11640  0028F2  AE04               	btfss	i2___awmod@divisor+1,7,c
 11641  0028F4  D004               	goto	i2l3533
 11642  0028F6  6C03               	negf	i2___awmod@divisor,c
 11643  0028F8  1E04               	comf	i2___awmod@divisor+1,f,c
 11644  0028FA  B0D8               	btfsc	status,0,c
 11645  0028FC  2A04               	incf	i2___awmod@divisor+1,f,c
 11646  0028FE                     i2l3533:
 11647  0028FE  5003               	movf	i2___awmod@divisor,w,c
 11648  002900  1004               	iorwf	i2___awmod@divisor+1,w,c
 11649  002902  B4D8               	btfsc	status,2,c
 11650  002904  D018               	goto	i2l3549
 11651  002906  0E01               	movlw	1
 11652  002908  6E05               	movwf	i2___awmod@counter,c
 11653  00290A  D004               	goto	i2l3539
 11654  00290C                     i2l3537:
 11655  00290C  90D8               	bcf	status,0,c
 11656  00290E  3603               	rlcf	i2___awmod@divisor,f,c
 11657  002910  3604               	rlcf	i2___awmod@divisor+1,f,c
 11658  002912  2A05               	incf	i2___awmod@counter,f,c
 11659  002914                     i2l3539:
 11660  002914  AE04               	btfss	i2___awmod@divisor+1,7,c
 11661  002916  D7FA               	goto	i2l3537
 11662  002918                     i2l3541:
 11663  002918  5003               	movf	i2___awmod@divisor,w,c
 11664  00291A  5C01               	subwf	i2___awmod@dividend,w,c
 11665  00291C  5004               	movf	i2___awmod@divisor+1,w,c
 11666  00291E  5802               	subwfb	i2___awmod@dividend+1,w,c
 11667  002920  A0D8               	btfss	status,0,c
 11668  002922  D004               	goto	i2l3545
 11669  002924  5003               	movf	i2___awmod@divisor,w,c
 11670  002926  5E01               	subwf	i2___awmod@dividend,f,c
 11671  002928  5004               	movf	i2___awmod@divisor+1,w,c
 11672  00292A  5A02               	subwfb	i2___awmod@dividend+1,f,c
 11673  00292C                     i2l3545:
 11674  00292C  90D8               	bcf	status,0,c
 11675  00292E  3204               	rrcf	i2___awmod@divisor+1,f,c
 11676  002930  3203               	rrcf	i2___awmod@divisor,f,c
 11677  002932  2E05               	decfsz	i2___awmod@counter,f,c
 11678  002934  D7F1               	goto	i2l3541
 11679  002936                     i2l3549:
 11680  002936  5006               	movf	i2___awmod@sign,w,c
 11681  002938  B4D8               	btfsc	status,2,c
 11682  00293A  D004               	goto	i2l3553
 11683  00293C  6C01               	negf	i2___awmod@dividend,c
 11684  00293E  1E02               	comf	i2___awmod@dividend+1,f,c
 11685  002940  B0D8               	btfsc	status,0,c
 11686  002942  2A02               	incf	i2___awmod@dividend+1,f,c
 11687  002944                     i2l3553:
 11688  002944  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 11689  002948  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 11690  00294C  0012               	return	
 11691  00294E                     __end_ofi2___awmod:
 11692                           	opt stack 0
 11693                           tosu	equ	0xFFF
 11694                           tosh	equ	0xFFE
 11695                           tosl	equ	0xFFD
 11696                           pclatu	equ	0xFFB
 11697                           pclath	equ	0xFFA
 11698                           tblptru	equ	0xFF8
 11699                           tblptrh	equ	0xFF7
 11700                           tblptrl	equ	0xFF6
 11701                           tablat	equ	0xFF5
 11702                           prodh	equ	0xFF4
 11703                           prodl	equ	0xFF3
 11704                           intcon	equ	0xFF2
 11705                           intcon2	equ	0xFF1
 11706                           intcon3	equ	0xFF0
 11707                           indf0	equ	0xFEF
 11708                           postinc0	equ	0xFEE
 11709                           fsr0h	equ	0xFEA
 11710                           fsr0l	equ	0xFE9
 11711                           wreg	equ	0xFE8
 11712                           indf1	equ	0xFE7
 11713                           postinc1	equ	0xFE6
 11714                           postdec1	equ	0xFE5
 11715                           fsr1h	equ	0xFE2
 11716                           fsr1l	equ	0xFE1
 11717                           indf2	equ	0xFDF
 11718                           postinc2	equ	0xFDE
 11719                           postdec2	equ	0xFDD
 11720                           fsr2h	equ	0xFDA
 11721                           fsr2l	equ	0xFD9
 11722                           status	equ	0xFD8
 11723                           tosu	equ	0xFFF
 11724                           tosh	equ	0xFFE
 11725                           tosl	equ	0xFFD
 11726                           pclatu	equ	0xFFB
 11727                           pclath	equ	0xFFA
 11728                           tblptru	equ	0xFF8
 11729                           tblptrh	equ	0xFF7
 11730                           tblptrl	equ	0xFF6
 11731                           tablat	equ	0xFF5
 11732                           prodh	equ	0xFF4
 11733                           prodl	equ	0xFF3
 11734                           intcon	equ	0xFF2
 11735                           intcon2	equ	0xFF1
 11736                           intcon3	equ	0xFF0
 11737                           indf0	equ	0xFEF
 11738                           postinc0	equ	0xFEE
 11739                           fsr0h	equ	0xFEA
 11740                           fsr0l	equ	0xFE9
 11741                           wreg	equ	0xFE8
 11742                           indf1	equ	0xFE7
 11743                           postinc1	equ	0xFE6
 11744                           postdec1	equ	0xFE5
 11745                           fsr1h	equ	0xFE2
 11746                           fsr1l	equ	0xFE1
 11747                           indf2	equ	0xFDF
 11748                           postinc2	equ	0xFDE
 11749                           postdec2	equ	0xFDD
 11750                           fsr2h	equ	0xFDA
 11751                           fsr2l	equ	0xFD9
 11752                           status	equ	0xFD8
 11753                           
 11754                           	psect	text42
 11755  000000                     __ptext42:
 11756                           	opt stack 0
 11757                           tosu	equ	0xFFF
 11758                           tosh	equ	0xFFE
 11759                           tosl	equ	0xFFD
 11760                           pclatu	equ	0xFFB
 11761                           pclath	equ	0xFFA
 11762                           tblptru	equ	0xFF8
 11763                           tblptrh	equ	0xFF7
 11764                           tblptrl	equ	0xFF6
 11765                           tablat	equ	0xFF5
 11766                           prodh	equ	0xFF4
 11767                           prodl	equ	0xFF3
 11768                           intcon	equ	0xFF2
 11769                           intcon2	equ	0xFF1
 11770                           intcon3	equ	0xFF0
 11771                           indf0	equ	0xFEF
 11772                           postinc0	equ	0xFEE
 11773                           fsr0h	equ	0xFEA
 11774                           fsr0l	equ	0xFE9
 11775                           wreg	equ	0xFE8
 11776                           indf1	equ	0xFE7
 11777                           postinc1	equ	0xFE6
 11778                           postdec1	equ	0xFE5
 11779                           fsr1h	equ	0xFE2
 11780                           fsr1l	equ	0xFE1
 11781                           indf2	equ	0xFDF
 11782                           postinc2	equ	0xFDE
 11783                           postdec2	equ	0xFDD
 11784                           fsr2h	equ	0xFDA
 11785                           fsr2l	equ	0xFD9
 11786                           status	equ	0xFD8
 11787                           
 11788                           	psect	rparam
 11789  0000                     tosu	equ	0xFFF
 11790                           tosh	equ	0xFFE
 11791                           tosl	equ	0xFFD
 11792                           pclatu	equ	0xFFB
 11793                           pclath	equ	0xFFA
 11794                           tblptru	equ	0xFF8
 11795                           tblptrh	equ	0xFF7
 11796                           tblptrl	equ	0xFF6
 11797                           tablat	equ	0xFF5
 11798                           prodh	equ	0xFF4
 11799                           prodl	equ	0xFF3
 11800                           intcon	equ	0xFF2
 11801                           intcon2	equ	0xFF1
 11802                           intcon3	equ	0xFF0
 11803                           indf0	equ	0xFEF
 11804                           postinc0	equ	0xFEE
 11805                           fsr0h	equ	0xFEA
 11806                           fsr0l	equ	0xFE9
 11807                           wreg	equ	0xFE8
 11808                           indf1	equ	0xFE7
 11809                           postinc1	equ	0xFE6
 11810                           postdec1	equ	0xFE5
 11811                           fsr1h	equ	0xFE2
 11812                           fsr1l	equ	0xFE1
 11813                           indf2	equ	0xFDF
 11814                           postinc2	equ	0xFDE
 11815                           postdec2	equ	0xFDD
 11816                           fsr2h	equ	0xFDA
 11817                           fsr2l	equ	0xFD9
 11818                           status	equ	0xFD8
 11819                           
 11820                           	psect	temp
 11821  000077                     btemp:
 11822                           	opt stack 0
 11823  000077                     	ds	1
 11824  0000                     int$flags	set	btemp
 11825                           tosu	equ	0xFFF
 11826                           tosh	equ	0xFFE
 11827                           tosl	equ	0xFFD
 11828                           pclatu	equ	0xFFB
 11829                           pclath	equ	0xFFA
 11830                           tblptru	equ	0xFF8
 11831                           tblptrh	equ	0xFF7
 11832                           tblptrl	equ	0xFF6
 11833                           tablat	equ	0xFF5
 11834                           prodh	equ	0xFF4
 11835                           prodl	equ	0xFF3
 11836                           intcon	equ	0xFF2
 11837                           intcon2	equ	0xFF1
 11838                           intcon3	equ	0xFF0
 11839                           indf0	equ	0xFEF
 11840                           postinc0	equ	0xFEE
 11841                           fsr0h	equ	0xFEA
 11842                           fsr0l	equ	0xFE9
 11843                           wreg	equ	0xFE8
 11844                           indf1	equ	0xFE7
 11845                           postinc1	equ	0xFE6
 11846                           postdec1	equ	0xFE5
 11847                           fsr1h	equ	0xFE2
 11848                           fsr1l	equ	0xFE1
 11849                           indf2	equ	0xFDF
 11850                           postinc2	equ	0xFDE
 11851                           postdec2	equ	0xFDD
 11852                           fsr2h	equ	0xFDA
 11853                           fsr2l	equ	0xFD9
 11854                           status	equ	0xFD8


Data Sizes:
    Strings     255
    Constant    42
    Data        745
    BSS         197
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     61     118
    BANK0           128     58     121
    BANK1           256     10     112
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    display_menu$1088	PTR const unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[20]), STR_9(CODE[20]), STR_8(CODE[22]), STR_7(CODE[19]), 
		 -> menu(BIGRAM[720]), STR_6(CODE[15]), STR_5(CODE[6]), STR_4(CODE[16]), 
		 -> STR_3(CODE[25]), STR_2(CODE[23]), STR_1(CODE[23]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_17(CODE[14]), STR_16(CODE[15]), STR_15(CODE[8]), display1(BANK1[18]), 
		 -> display0(BANK1[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> i2_putch(), Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), NULL(NULL[0]), STR_18(CODE[7]), 
		 -> _doprnt@c(BANK0[1]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_17(CODE[14]), STR_16(CODE[15]), STR_15(CODE[8]), STR_14(CODE[5]), 
		 -> STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), STR_10(CODE[20]), 
		 -> STR_9(CODE[20]), STR_8(CODE[22]), STR_7(CODE[19]), menu(BIGRAM[720]), 
		 -> STR_6(CODE[15]), STR_5(CODE[6]), STR_4(CODE[16]), STR_3(CODE[25]), 
		 -> STR_2(CODE[23]), STR_1(CODE[23]), display1(BANK1[18]), display0(BANK1[18]), 

    S438__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S438__prbuf$ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    display_menu@menuSizePtr	PTR int  size(2) Largest target is 2
		 -> endSize(BANK0[2]), menuSize(BANK0[2]), creditSize(BANK0[2]), events(BANK0[2]), 

    display_menu@menuIndexPtr	PTR int  size(2) Largest target is 2
		 -> endIndex(BANK0[2]), creditIndex(BANK0[2]), logIndex(BANK0[2]), menuIndex(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    i2_printf->i2__doprnt
    i2__doprnt->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _update_state->_sprintf
    _update_lcd->_printf
    _printf->__doprnt
    _update_display->_display_menu
    _display_menu->_sprintf
    _sprintf->__doprnt
    __doprnt->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _update_RTC->___wmul
    _I2C_Master_Read->_I2C_Master_Wait
    _set_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _read_sensors->_readADC
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    _update_display->_display_menu

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   85360
                                             57 BANK0      1     1      0
                    _I2C_Master_Init
                            _initLCD
                       _read_sensors
                           _set_time
                         _update_RTC
                     _update_display
                         _update_lcd
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         4     4      0   20198
                                             52 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _update_lcd                                           7     7      0   15264
                                             42 BANK0      3     3      0
                            _lcdInst
                             _printf
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     417
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4     441
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     6      2   14096
                                             34 BANK0      8     6      2
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _update_display                                       0     0      0   44968
                            ___awdiv
                            ___awmod
                       _display_menu
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _display_menu                                        25    25      0   25080
                                             52 BANK0      5     5      0
                                              0 BANK1     10    10      0
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             18     6     12   17904
                                             34 BANK0     18     6     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             26    20      6   11868
                                             12 BANK0     22    16      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1231
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     753
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _update_RTC                                           5     5      0    3606
                                              6 BANK0      5     5      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2856
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0     592
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     493
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_sensors                                         4     4      0      34
                                              2 BANK0      4     4      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _keypressed                                          19    19      0   11412
                                             42 COMRAM    19    19      0
                          i2___awmod
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_printf                                             8     6      2    8568
                                             34 COMRAM     8     6      2
                          i2__doprnt
 ---------------------------------------------------------------------------------
 (9) i2__doprnt                                           26    20      6    8036
                                             12 COMRAM    22    16      6
                   Absolute function *
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch *
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i2___awmod                                            6     2      4     504
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _read_sensors
     _readADC
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _update_RTC
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
   _update_display
     ___awdiv
     ___awmod
     _display_menu
       ___wmul
       _sprintf
         ___awdiv (ARG)
         ___awmod (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
   _update_lcd
     _lcdInst
       _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _strcmp
     _strcpy
   _update_state
     ___awdiv
     ___awmod
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble

 _keypressed (ROOT)
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2__doprnt
       Absolute function(Fake) *
       i2___lwdiv *
       i2___lwmod *
         i2___lwdiv (ARG)
       i2___wmul *
       i2_isdigit *
       i2_putch *
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0     2D0      37       18.1%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      A      70       7       43.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     3A      79       5       94.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3D      76       1       93.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15F      34        0.0%
DATA                 0      0     42F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Thu Feb 23 14:43:57 2017

             _update_state 1F24                         l34 2F12               ___awdiv@sign 0085  
      ___wmul@multiplicand 0082         i2___lwdiv@dividend 0001                __CFG_BORV$3 000000  
           _update_display 234E               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l444 0480                        l918 28D4                        l928 2A76  
                      l865 2720                        _IR1 010A                        _IR2 0114  
             __CFG_CPB$OFF 000000              ?_display_menu 0001                        _PEN 007E2A  
             __CFG_CPD$OFF 000000                        _SEN 007E28               ___awmod@sign 0085  
                      prod 000FF3                        tosl 000FFD                        wreg 000FE8  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       l4225 2E2C  
                     l4315 2E76                       l4243 2B88                       l4251 2DEA  
                     l4405 26A4                       l4317 2E88                       l4341 2614  
                     l4333 25EA                       l4237 2B44                       l4407 26B4  
                     l4351 264A                       l4343 261A                       l4327 25D4  
                     l4239 2B50                       l4417 270E                       l4409 26BA  
                     l4249 2DDE                       l4339 2608                       l4355 2658  
                     l4371 274E                       l7003 0746                       l4381 277E  
                     l7021 0808                       l4359 266C                       l4383 2784  
                     l4391 27B6                       l4375 275E                       l7023 085A  
                     l7031 08C6                       l7015 07D8                       l7007 0770  
                     l7009 0784                       l7041 0944                       l7105 1B12  
                     l4395 27CA                       l4387 27A8                       l4379 2772  
                     l3931 2EAE                       l7035 090E                       l7019 0802  
                     l7043 098A                       l4661 2AA6                       l7029 08B4  
                     l4671 2ADC                       l3951 2896                       l7039 0938  
                     l7063 17C6                       l4665 2AB0                       l4681 2224  
                     l7081 1834                       l3947 2884                       l3971 2A44  
                     l7075 1806                       l7403 2490                       l4677 221A  
                     l3949 2890                       l7069 17E6                       l7413 2512  
                     l7333 1F4C                       l3959 28C6                       l3975 2A68  
                     l3967 2A32                       l7087 1858                       l7335 1F56  
                     l4689 22B2                       l3969 2A3E                       l7089 1872  
                     l7345 1FA8                       l7329 1F38                       l7099 19D2  
                     l7419 2560                       l7363 211C                       l7355 202C  
                     l7339 1F6C                       l6901 0374                       l7373 2156  
                     l6911 0402                       l7383 2196                       l6841 006A  
                     l7393 2350                       l7369 213A                       l6931 04F6  
                     l6907 03C4                       l6851 00B4                       l6835 0016  
                     l7395 23BA                       l7387 21AA                       l7459 298A  
                     l6909 03DC                       l6917 041A                       l6845 0098  
                     l7397 23C0                       l6943 0532                       l6927 04C6  
                     l6847 00AA                       l7399 2456                       l6945 0538  
                     l6961 0586                       l6929 04F0                       l6873 01FA  
                     l6865 01B4                       l6857 0110                       l6971 05E0  
                     l6883 0272                       l6875 0206                       l6867 01BA  
                     _ADON 007E10                       l6981 0644                       l6973 05EA  
                     l6885 027E                       l6893 02EE                       l6877 020C  
                     l6991 06C0                       l6967 05A8                       l6959 0574  
                     l6895 0306                       l6879 024C                       l6985 066E  
                     l6889 02C4                       l6995 06EA                       l6899 036C  
                     l6997 06F4                       l6999 0700                       STR_1 FF18  
                     STR_2 FF2F                       STR_3 FEFF                       STR_4 FFA8  
                     STR_5 FFF3                       STR_6 FFB8                       STR_7 FF84  
                     STR_8 FF46                       STR_9 FF5C                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       u6015 2B12  
                     u5250 2E2A                       _RCEN 007E2B                       _RSEN 007E29  
                     _main 294E                i2__doprnt@c 0022                i2__doprnt@f 000F  
                     _menu 0170                       _keys FED5                       _time 00D2  
                     fsr0h 000FEA                       fsr1h 000FE2         i2___lwdiv@quotient 0005  
                     indf0 000FEF                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf1 000FE7                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       btemp 0077                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
          __end_ofi2_putch 2F54              __CFG_MCLRE$ON 000000               ___param_bank 000000  
              i2_lcdNibble 2B98     __end_of_update_display 24BA         _discretize_counter 0068  
         ?_I2C_Master_Init 008D           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001             ??_display_menu 00B4                      ?_main 0001  
                    _ACKEN 007E2C                      _ACKDT 007E2D            __end_of___awdiv 2676  
                    STR_10 FF70                      STR_11 FFF9                      STR_12 FFF9  
                    STR_13 FFF9                      STR_14 FFF9                      STR_15 FFE4  
                    STR_16 FFC7                      STR_17 FFD6                      STR_18 FFEC  
                    STR_19 FF97            __end_of___awmod 27D4            __end_of___lldiv 2732  
                    u10100 015C                      u10110 01AA                      u10107 0152  
                    u10220 036A                      u10140 0246                      u10117 01A0  
                    _DIST1 0100                      u10230 03AE                      u10070 00D6  
                    u10080 00FE                      u10250 0452                      u10218 0336  
                    u10227 0360                      u10147 023C                      u10068 0052  
                    u10237 03A4                      u10077 00CC                      u10087 00F4  
                    u10408 062E                      u10257 0448                      u11250 2150  
                    u10188 02AE            ___awdiv@divisor 0082                      u10550 097C  
                    u10518 07C2                      u10438 06AA                      u11190 2026  
                    u10538 08F6                      u10557 0972                      u10478 0730  
                    u11707 2CE4                      u11717 2D1A                      u11727 29D6  
                    u11737 29E0                      u11747 2A0C                      u11757 2A16  
                    u11677 29AA                      u11687 257A                      u11697 2E7E  
          __end_of___lwdiv 28DE            __end_of___lwmod 2A80                      i2l324 177C  
                    i2l361 177E                      i2l444 0D74                      i2l918 2C88  
                    i2l928 2D5E            ___awdiv@counter 0084                      _PORTB 000F81  
                    _PROX1 005A                      _PROX2 00C8            __end_of__doprnt 0996  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 2F48  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
          __end_of_readADC 2E8E            __end_of_initLCD 2D26             __CFG_EBTRB$OFF 000000  
               i2isdigit@c 0003            __end_of_dpowers FEF0               i2__doprnt@ap 0011  
             i2__doprnt@cp 001B               i2__doprnt@pb 000D            __end_of_isdigit 2EB8  
                    _state 00E8                      _putch 2EFC                      pclath 000FFA  
                    tablat 000FF5           __end_ofi2___wmul 2EDE                      status 000FD8  
          __end_of_sprintf 2C40         __size_ofi2___awmod 0070             __CFG_PBADEN$ON 000000  
         __end_ofi2_printf 2DD4         __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042  
       __size_ofi2__doprnt 0858            __initialization 27D4         __size_ofi2_lcdInst 000C  
             __end_of_main 29B6               __end_of_keys FEE6                 i2printf@ap 0025  
               i2printf@pb 0027            ?_update_display 0001         __size_ofi2_isdigit 001E  
                   ??_main 00B9              __activetblptr 000003          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 0081     _latestSortedBottleTime 003E         ??_I2C_Master_Start 0081  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0083  
                   _ADRESH 000FC4                     _ADRESL 000FC3           ___awdiv@dividend 0080  
          i2lcdNibble@data 0002                     ?_putch 0001            i2lcdNibble@temp 0001  
                   _INT1IE 007F83                     _INT1IF 007F80                     i2l3541 2918  
                   i2l3533 28FE                     i2l2901 2D40                     i2l3553 2944  
                   i2l3545 292C                     i2l3537 290C                     i2l3529 28F2  
                   i2l2905 2D54                     i2l3539 2914                     i2l3549 2936  
                   i2l2881 2C62                     i2l7113 099A                     i2l2867 2EF4  
                   i2l7123 0A0E                     i2l2877 2C56                     i2l7301 10D8  
                   i2l7221 0E12                     i2l7205 0DB2                     i2l7125 0A1C  
                   i2l2879 2C5E                     i2l7223 0E16                     i2l7207 0DDC  
                   i2l7151 0B42                     i2l7143 0B06                     i2l7135 0A7C  
                   i2l7119 09E2                     i2l2889 2C7E                     i2l2897 2D34  
                   i2l7313 117A                     i2l7209 0DE0                     i2l7161 0B9A  
                   i2l7153 0B4C                     i2l7145 0B0A                     i2l7321 11E4  
                   i2l7129 0A22                     i2l2899 2D3C                     i2l7307 112A  
                   i2l7251 0E9E                     i2l7163 0BA4                     i2l7171 0C0E  
                   i2l7155 0B50                     i2l7309 113A                     i2l7317 11A4  
                   i2l7245 0E72                     i2l7237 0E48                     i2l7173 0C20  
                   i2l7157 0B84                     i2l7263 0F18                     i2l7239 0E58  
                   i2l7167 0BE4                     i2l7319 11AC                     i2l7511 132A  
                   i2l7281 0FDA                     i2l7273 0F8A                     i2l7249 0E96  
                   i2l7177 0C80                     i2l7185 0CD4                     i2l7513 132E  
                   i2l7505 1304                     i2l7259 0EEE                     i2l7275 0F92  
                   i2l7187 0CE6                     i2l7179 0C86                     i2l7195 0D1C  
                   i2l7603 1610                     i2l7531 138C                     i2l7515 1332  
                   i2l7293 105E                     i2l7285 1004                     i2l7277 0F9A  
                   i2l7269 0F60                     i2l7189 0D0A                     i2l7621 16DC  
                   i2l7613 1694                     i2l7541 13CE                     i2l7509 1326  
                   i2l7525 135E                     i2l7287 1012                     i2l7631 1744  
                   i2l7615 1698                     i2l7535 139C                     i2l7297 1088  
                   i2l7609 1654                     i2l7529 1384                     i2l7481 1236  
                   i2l7299 108E                     i2l7627 171C                     i2l7563 146A  
                   i2l7547 1412                     i2l7483 123E                     i2l7635 1752  
                   i2l7581 1520                     i2l7557 1452                     i2l7493 1280  
                   i2l7591 1588                     i2l7583 1540                     i2l7575 14E0  
                   i2l7559 145A                     i2l7487 124E                     i2l7585 1544  
                   i2l7569 149C                     i2l7499 12C4                     i2l7597 15CC  
                ??i2_putch 0003                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9             __CFG_XINST$OFF 000000  
                   ___wmul 2D68                  ??___awdiv 0084             __CFG_STVREN$ON 000000  
                ??___awmod 0084                  ??___lldiv 0088                  ??___lwdiv 0084  
                ??___lwmod 008B              ?_read_sensors 0001            _release_counter 006C  
                ??__doprnt 0092                     _events 00F1              i2__doprnt@idx 0017  
            i2__doprnt@len 0019              i2__doprnt@val 001D                     clear_0 283E  
                   clear_1 284A                     clear_2 2856           ___awdiv@quotient 0086  
          ___awmod@divisor 0082                     _time_i 00BA               __doprnt@flag 009E  
                   _nstate 00E7            ___awmod@counter 0084                  ??_lcdInst 0082  
                   _printf 2C92               __doprnt@prec 0097                     _strcmp 2B42  
                   _strcpy 2DD4                  ??_readADC 0080                  ??_initLCD 0083  
             __pdataBIGRAM 0170               __pdataCOMRAM 0070                  ??_isdigit 0080  
         __end_of_set_time 2AE2          __end_ofi2___awmod 294E          __end_ofi2___lwdiv 2C92  
             __mediumconst FED4          __end_ofi2___lwmod 2D68                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8          __end_ofi2__doprnt 11EE  
           i2___awmod@sign 0006          __end_ofi2_lcdInst 2F60                  ??_sprintf 00AE  
        __end_ofi2_isdigit 2EFC                 __accesstop 0080    __end_of__initialization 285C  
     __end_of_display_menu 1C54              ___rparam_used 000001  display_menu@menuSelection 016A  
       i2___lwmod@dividend 0008             __pcstackCOMRAM 0001               __pidataBANK0 2F26  
           ??_read_sensors 0082              __end_of_putch 2F12                  ?i2___wmul 0001  
       __size_of_lcdNibble 0068                i2putch@data 0003                keypressed@i 003B  
                ?i2_printf 0023              update_state@i 00B6                 __doprnt@ap 0090  
               __doprnt@cp 009A                 __doprnt@pb 008C                    ??_putch 0082  
               __pbssBANK0 00BA                 __pbssBANK1 0100               ?i2_lcdNibble 0001  
                  ?___wmul 0080             _sorted_bottles 00DF                    ?_printf 00A2  
                  ?_strcmp 0080                    ?_strcpy 0080                 ??i2___wmul 0005  
                  _IR1_PIN 0074                    _IR2_PIN 0075                 _creditSize 00EB  
               _discretize 0066                 ??i2_printf 0025                    _SSPCON1 000FC6  
                  _SSPCON2 000FC5                    _SSPSTAT 000FC7                    i2_putch 2F48  
        __end_of_lcdNibble 2A1E           ??_update_display 00B9                    __Hparam 0000  
                  __Lparam 0000             _manualDateTime FEF8                  ?_set_time 0001  
                  ___awdiv 25B8                    ___awmod 2732                    ___lldiv 2676  
          __size_of___wmul 0036                    ___lwdiv 2866                    ___lwmod 2A1E  
                  __doprnt 0012                  _DIST1_PIN 006E                    __pcinit 27D4  
                  __ramtop 1000                    _endSize 00EF                    _lcdInst 2F38  
                  __ptext0 294E                    __ptext1 1F24                    __ptext2 24BA  
                  __ptext3 2DD4                    __ptext4 2B42                    __ptext5 2C92  
                  __ptext6 234E                    __ptext7 17BA                    __ptext8 2BEE  
                  __ptext9 0012            __size_of_printf 004A            __size_of_strcmp 0056  
                  _readADC 2E62            __size_of_strcpy 0032                    _initLCD 2CDC  
        __end_of_hexpowers FEF8              i2_isdigit$698 0002                    _dpowers FEE6  
                  _measure 0070                    _isdigit 2E8E             i2__doprnt@flag 001F  
         ___awmod@dividend 0080             i2__doprnt@prec 0018                    _release 0072  
               _keypressed 0008   __size_of_I2C_Master_Init 0060   __size_of_I2C_Master_Read 002E  
 __size_of_I2C_Master_Wait 0014   __size_of_I2C_Master_Stop 0008                    _runTime 00DD  
                  _yopWCap 00E5                    _sprintf 2BEE              __doprnt@width 009F  
    __size_of_display_menu 049A             __pintcode_body 11EE       end_of_initialization 285C  
     __end_of_read_sensors 2E62                    int_func 11EE        i2___wmul@multiplier 0001  
                i2u1110_40 11DA                  i2u1110_47 11D0                  i2u1102_48 0FC6  
                i2u1106_48 104A                  i2u1140_40 12FA                  i2u1108_48 1166  
                i2u1062_40 0A44                  i2u1061_48 09CE                  i2u1062_47 0A3A  
                i2u1063_40 0A6C                  i2u1063_47 0A62                  i2u1080_40 0D4A  
                i2u1080_47 0D40                  i2u1065_40 0AC2                  i2u1065_47 0AB8  
                i2u1073_48 0BD0                  i2u1066_40 0AFC                  i2u1154_40 1516  
                i2u1066_47 0AF2                  i2u1147_40 1448                  i2u1077_40 0C7E  
                i2u1076_48 0C4C                  i2u1069_40 0B7E                  i2u1165_40 1712  
                i2u1077_47 0C74                  i2u1069_47 0B74                  i2u1078_40 0CC0  
                i2u1078_47 0CB6                  i2u1095_48 0EDA                  i2u1176_47 2BB0  
                i2u1177_47 2BBA                  i2u1178_47 2BDC                  i2u1098_48 0F4C  
                i2u1179_47 2BE6     __end_of_manualDateTime FEFF  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0084            ___lldiv@counter 008C  
               ??_set_time 0083                    printf@f 00A2           I2C_Master_Init@c 008D  
         I2C_Master_Read@a 0081                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc1 000FE6                    postinc2 000FDE  
                  strcmp@r 0085                  _PROX1_PIN 006F                  _PROX2_PIN 0076  
             _display_menu 17BA                 _update_RTC 21DE                 _update_lcd 24BA  
                i2___awmod 28DE          i2___lwdiv@divisor 0003                  i2___lwdiv 2C40  
                i2___lwmod 2D26          i2___lwdiv@counter 0007                  i2__doprnt 0996  
                i2_lcdInst 2F54                  i2_isdigit 2EDE              ?_update_state 0001  
            __pidataBIGRAM 1C54             __end_of___wmul 2D9E       __size_ofi2_lcdNibble 0056  
            __pidataCOMRAM 2F7A              i2lcdInst@data 0003           i2___wmul@product 0005  
           __end_of_printf 2CDC                update_RTC@i 008A             __end_of_strcmp 2B98  
           __end_of_strcpy 2E06             update_lcd@flag 00AB        start_initialization 27D4  
              ?_keypressed 0001          __size_ofi2___wmul 0026                  i2printf@f 0023  
               ?i2___awmod 0001                 ?i2___lwdiv 0001                 ?i2___lwmod 0008  
        __size_ofi2_printf 0036                 ?i2__doprnt 000D          ??_I2C_Master_Init 0091  
        ??_I2C_Master_Read 0081          ??_I2C_Master_Wait 0080                 ?i2_lcdInst 0001  
        ??_I2C_Master_Stop 0081                 ?i2_isdigit 0001             ??_update_state 00B4  
                 ??___wmul 0084                __doprnt@idx 0096                __doprnt@len 0098  
              __doprnt@val 009C                __pdataBANK0 00E7           __CFG_LPT1OSC$OFF 000000  
                 ??_printf 00A4                   ??_strcmp 0084                   ??_strcpy 0084  
              __pbssCOMRAM 003E                ?_update_RTC 0001      __size_of_read_sensors 002E  
            __pcstackBANK0 0080              __pcstackBANK1 0166                ?_update_lcd 0001  
        i2___lwmod@divisor 000A          i2___lwmod@counter 000C                   ?i2_putch 0001  
                __doprnt@c 00A1                  __doprnt@f 008E           _I2C_Master_Start 2F72  
         _I2C_Master_Write 2F60           ___lwdiv@dividend 0080          __CFG_CCP2MX$PORTC 000000  
      __size_of_keypressed 17B2                  __pintcode 0008              __pmediumconst FED4  
                _lcdNibble 29B6                   ?___awdiv 0080                   ?___awmod 0080  
                 ?___lldiv 0080                   ?___lwdiv 0080                   ?___lwmod 0087  
        __size_of_set_time 0062                   ?__doprnt 008C               _read_sensors 2E34  
                 ?_lcdInst 0001                  _eskaNoCap 00D9                   ?_readADC 0001  
                 ?_initLCD 0001          _display_menu$1088 016C                   ?_isdigit 0001  
                _hexpowers FEF0                  _menuIndex 00F5           ___lwdiv@quotient 0085  
              ??i2___awmod 0005                   ?_sprintf 00A2                ??i2___lwdiv 0005  
                _ndisplay0 0142                ??i2___lwmod 000C                  _ndisplay1 0154  
           __size_of_putch 0016                ??i2__doprnt 0013                _creditIndex 00E9  
              ??i2_lcdInst 0003             ___wmul@product 0084                   _LATDbits 000F8C  
              ??i2_isdigit 0001        __size_of_update_RTC 0170           __CFG_WDTPS$32768 000000  
               ?_lcdNibble 0001        __size_of_update_lcd 00FE                 _ADCON0bits 000FC2  
        ___wmul@multiplier 0080                  _startTime 004C                   i2___wmul 2EB8  
            lcdNibble@data 0081              lcdNibble@temp 0080                   i2_printf 2D9E  
     __end_of_update_state 21DE        I2C_Master_Read@temp 0082                _bottle_type 0064  
                copy_data0 27E8                  copy_data1 280C                  copy_data2 282C  
       i2___awmod@dividend 0001           __size_ofi2_putch 000C         keypressed@keypress 003D  
                 __Hrparam 0000                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
         __size_of___awdiv 00BE           __size_of___awmod 00A2      i2___wmul@multiplicand 0003  
         __size_of___lldiv 00BC           __size_of___lwdiv 0078           __size_of___lwmod 0062  
           readADC@channel 0081           __size_of__doprnt 0984    __size_of_update_display 016C  
              _isdigit$698 0081            _putch$intlevel0 2F02   display_menu@menuIndexPtr 016E  
         __size_of_lcdInst 0010            _I2C_Master_Init 2AE2           __size_of_readADC 002C  
          _I2C_Master_Read 2E06           __size_of_initLCD 004A            _I2C_Master_Wait 2F12  
          _I2C_Master_Stop 2F6A               ??_keypressed 002B           __size_of_isdigit 002A  
                 _endIndex 00ED            ___lwdiv@divisor 0082            ___lwdiv@counter 0084  
                 __ptext10 2EFC                   __ptext11 2E8E                   __ptext20 2F60  
                 __ptext12 2A1E                   __ptext21 2F6A                   __ptext13 2866  
                 __ptext30 2676                   __ptext22 2F72                   __ptext14 2732  
                 __ptext23 2F12                   __ptext15 25B8                   __ptext40 2B98  
                 __ptext32 2D9E                   __ptext24 2E34                   __ptext16 21DE  
                 __ptext41 28DE                   __ptext33 0996                   __ptext25 2E62  
                 __ptext17 2D68                   __ptext42 0000                   __ptext34 2F48  
                 __ptext26 2CDC                   __ptext18 2E06                   __ptext35 2EDE  
                 __ptext27 2F38                   __ptext19 2A80                   __ptext36 2EB8  
                 __ptext28 29B6                   __ptext37 2D26                   __ptext29 2AE2  
                 __ptext38 2C40                   __ptext39 2F54                   _display0 011E  
                 _eskaWCap 00DB                   _display1 0130           __size_of_sprintf 0052  
               strcpy@from 0082                   _logIndex 00F3              __size_of_main 0068  
                 _menuSize 00F7            i2__doprnt@width 0020                  set_time@i 0083  
                 _timeDiff 00E1                   _set_time 2A80              ??i2_lcdNibble 0001  
              ??_lcdNibble 0080         __end_of_keypressed 17BA                   int$flags 0077  
                 _yopNoCap 00E3          i2___awmod@divisor 0003                  putch@data 0082  
        i2___awmod@counter 0005   __end_of_I2C_Master_Start 2F7A   __end_of_I2C_Master_Write 2F6A  
               _INTCONbits 000FF2               ??_update_RTC 0086               ??_update_lcd 00AA  
                 isdigit@c 0082                   intlevel2 0000                  sprintf@ap 00AE  
                sprintf@pb 00B0                  sprintf@wh 00A2            _measure_counter 006A  
         ___lwmod@dividend 0087           ___lldiv@dividend 0080    display_menu@menuSizePtr 0168  
       __end_of_update_RTC 234E                   printf@ap 00A4                   printf@pb 00A6  
       __end_of_update_lcd 25B8    __end_of_I2C_Master_Init 2B42    __end_of_I2C_Master_Read 2E34  
  __end_of_I2C_Master_Wait 2F26    __end_of_I2C_Master_Stop 2F72                lcdInst@data 0082  
      __end_ofi2_lcdNibble 2BEE                   sprintf@f 00A4      __size_of_update_state 02BA  
                 strcmp@s1 0080                   strcmp@s2 0082           ___lldiv@quotient 0088  
        I2C_Master_Write@d 0081            ___lwmod@divisor 0089                   strcpy@cp 0084  
                 strcpy@to 0080            ___lwmod@counter 008B              read_sensors@a 0084  
     display_menu@selector 0166  
