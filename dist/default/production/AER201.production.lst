

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Feb 25 18:03:32 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    17                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    18                           	psect	text0,global,reloc=2,class=CODE,delta=1
    19                           	psect	text1,global,reloc=2,class=CODE,delta=1
    20                           	psect	text2,global,reloc=2,class=CODE,delta=1
    21                           	psect	text3,global,reloc=2,class=CODE,delta=1
    22                           	psect	text4,global,reloc=2,class=CODE,delta=1
    23                           	psect	text5,global,reloc=2,class=CODE,delta=1
    24                           	psect	text6,global,reloc=2,class=CODE,delta=1
    25                           	psect	text7,global,reloc=2,class=CODE,delta=1
    26                           	psect	text8,global,reloc=2,class=CODE,delta=1
    27                           	psect	text9,global,reloc=2,class=CODE,delta=1
    28                           	psect	text10,global,reloc=2,class=CODE,delta=1
    29                           	psect	text11,global,reloc=2,class=CODE,delta=1
    30                           	psect	text12,global,reloc=2,class=CODE,delta=1
    31                           	psect	text13,global,reloc=2,class=CODE,delta=1
    32                           	psect	text14,global,reloc=2,class=CODE,delta=1
    33                           	psect	text15,global,reloc=2,class=CODE,delta=1
    34                           	psect	text16,global,reloc=2,class=CODE,delta=1
    35                           	psect	text17,global,reloc=2,class=CODE,delta=1
    36                           	psect	text18,global,reloc=2,class=CODE,delta=1
    37                           	psect	text19,global,reloc=2,class=CODE,delta=1
    38                           	psect	text20,global,reloc=2,class=CODE,delta=1
    39                           	psect	text21,global,reloc=2,class=CODE,delta=1
    40                           	psect	text22,global,reloc=2,class=CODE,delta=1
    41                           	psect	text23,global,reloc=2,class=CODE,delta=1
    42                           	psect	text24,global,reloc=2,class=CODE,delta=1
    43                           	psect	text25,global,reloc=2,class=CODE,delta=1
    44                           	psect	text26,global,reloc=2,class=CODE,delta=1
    45                           	psect	text27,global,reloc=2,class=CODE,delta=1
    46                           	psect	text28,global,reloc=2,class=CODE,delta=1
    47                           	psect	text29,global,reloc=2,class=CODE,delta=1
    48                           	psect	text30,global,reloc=2,class=CODE,delta=1
    49                           	psect	text31,global,reloc=2,class=CODE,delta=1
    50                           	psect	text32,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    64                           	psect	text44,global,reloc=2,class=CODE,delta=1
    65                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    66                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    67  0000                     
    68                           ; Version 1.40
    69                           ; Generated 01/12/2016 GMT
    70                           ; 
    71                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    72                           ; All rights reserved.
    73                           ; 
    74                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    75                           ; 
    76                           ; Redistribution and use in source and binary forms, with or without modification, are
    77                           ; permitted provided that the following conditions are met:
    78                           ; 
    79                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    80                           ;        conditions and the following disclaimer.
    81                           ; 
    82                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    83                           ;        of conditions and the following disclaimer in the documentation and/or other
    84                           ;        materials provided with the distribution.
    85                           ; 
    86                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    87                           ;        software without specific prior written permission.
    88                           ; 
    89                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    90                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    91                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    92                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    93                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    94                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    95                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    96                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    97                           ; 
    98                           ; 
    99                           ; Code-generator required, PIC18F4620 Definitions
   100                           ; 
   101                           ; SFR Addresses
   102  0000                     
   103                           	psect	idataCOMRAM
   104  003832                     __pidataCOMRAM:
   105                           	opt stack 0
   106                           
   107                           ;initializer for _DIST1_TRIG
   108  003832  05                 	db	5
   109                           
   110                           ;initializer for _IR1_PIN
   111  003833  01                 	db	1
   112                           
   113                           ;initializer for _IR2_PIN
   114  003834  02                 	db	2
   115                           
   116                           ;initializer for _PROX2_PIN
   117  003835  01                 	db	1
   118                           
   119                           	psect	idataBIGRAM
   120  002090                     __pidataBIGRAM:
   121                           	opt stack 0
   122                           
   123                           ;initializer for _menu
   124  002090  31                 	db	49
   125  002091  2E                 	db	46
   126  002092  20                 	db	32
   127  002093  53                 	db	83
   128  002094  6F                 	db	111
   129  002095  72                 	db	114
   130  002096  74                 	db	116
   131  002097  20                 	db	32
   132  002098  20                 	db	32
   133  002099  20                 	db	32
   134  00209A  20                 	db	32
   135  00209B  20                 	db	32
   136  00209C  20                 	db	32
   137  00209D  20                 	db	32
   138  00209E  20                 	db	32
   139  00209F  00                 	db	0
   140  0020A0  00                 	db	0
   141  0020A1  00                 	db	0
   142  0020A2  32                 	db	50
   143  0020A3  2E                 	db	46
   144  0020A4  20                 	db	32
   145  0020A5  50                 	db	80
   146  0020A6  20                 	db	32
   147  0020A7  4C                 	db	76
   148  0020A8  6F                 	db	111
   149  0020A9  67                 	db	103
   150  0020AA  73                 	db	115
   151  0020AB  20                 	db	32
   152  0020AC  20                 	db	32
   153  0020AD  20                 	db	32
   154  0020AE  20                 	db	32
   155  0020AF  20                 	db	32
   156  0020B0  20                 	db	32
   157  0020B1  00                 	db	0
   158  0020B2  00                 	db	0
   159  0020B3  00                 	db	0
   160  0020B4  33                 	db	51
   161  0020B5  2E                 	db	46
   162  0020B6  20                 	db	32
   163  0020B7  43                 	db	67
   164  0020B8  72                 	db	114
   165  0020B9  65                 	db	101
   166  0020BA  64                 	db	100
   167  0020BB  69                 	db	105
   168  0020BC  74                 	db	116
   169  0020BD  73                 	db	115
   170  0020BE  20                 	db	32
   171  0020BF  20                 	db	32
   172  0020C0  20                 	db	32
   173  0020C1  20                 	db	32
   174  0020C2  20                 	db	32
   175  0020C3  00                 	db	0
   176  0020C4  00                 	db	0
   177  0020C5  00                 	db	0
   178  0020C6  00                 	db	0
   179  0020C7  00                 	db	0
   180  0020C8  00                 	db	0
   181  0020C9  00                 	db	0
   182  0020CA  00                 	db	0
   183  0020CB  00                 	db	0
   184  0020CC  00                 	db	0
   185  0020CD  00                 	db	0
   186  0020CE  00                 	db	0
   187  0020CF  00                 	db	0
   188  0020D0  00                 	db	0
   189  0020D1  00                 	db	0
   190  0020D2  00                 	db	0
   191  0020D3  00                 	db	0
   192  0020D4  00                 	db	0
   193  0020D5  00                 	db	0
   194  0020D6  00                 	db	0
   195  0020D7  00                 	db	0
   196  0020D8  00                 	db	0
   197  0020D9  00                 	db	0
   198  0020DA  00                 	db	0
   199  0020DB  00                 	db	0
   200  0020DC  00                 	db	0
   201  0020DD  00                 	db	0
   202  0020DE  00                 	db	0
   203  0020DF  00                 	db	0
   204  0020E0  00                 	db	0
   205  0020E1  00                 	db	0
   206  0020E2  00                 	db	0
   207  0020E3  00                 	db	0
   208  0020E4  00                 	db	0
   209  0020E5  00                 	db	0
   210  0020E6  00                 	db	0
   211  0020E7  00                 	db	0
   212  0020E8  00                 	db	0
   213  0020E9  00                 	db	0
   214  0020EA  00                 	db	0
   215  0020EB  00                 	db	0
   216  0020EC  00                 	db	0
   217  0020ED  00                 	db	0
   218  0020EE  00                 	db	0
   219  0020EF  00                 	db	0
   220  0020F0  00                 	db	0
   221  0020F1  00                 	db	0
   222  0020F2  00                 	db	0
   223  0020F3  00                 	db	0
   224  0020F4  00                 	db	0
   225  0020F5  00                 	db	0
   226  0020F6  00                 	db	0
   227  0020F7  00                 	db	0
   228  0020F8  00                 	db	0
   229  0020F9  00                 	db	0
   230  0020FA  00                 	db	0
   231  0020FB  00                 	db	0
   232  0020FC  00                 	db	0
   233  0020FD  00                 	db	0
   234  0020FE  00                 	db	0
   235  0020FF  00                 	db	0
   236  002100  00                 	db	0
   237  002101  00                 	db	0
   238  002102  00                 	db	0
   239  002103  00                 	db	0
   240  002104  00                 	db	0
   241  002105  00                 	db	0
   242  002106  00                 	db	0
   243  002107  00                 	db	0
   244  002108  00                 	db	0
   245  002109  00                 	db	0
   246  00210A  00                 	db	0
   247  00210B  00                 	db	0
   248  00210C  00                 	db	0
   249  00210D  00                 	db	0
   250  00210E  00                 	db	0
   251  00210F  00                 	db	0
   252  002110  00                 	db	0
   253  002111  00                 	db	0
   254  002112  00                 	db	0
   255  002113  00                 	db	0
   256  002114  00                 	db	0
   257  002115  00                 	db	0
   258  002116  00                 	db	0
   259  002117  00                 	db	0
   260  002118  00                 	db	0
   261  002119  00                 	db	0
   262  00211A  00                 	db	0
   263  00211B  00                 	db	0
   264  00211C  00                 	db	0
   265  00211D  00                 	db	0
   266  00211E  00                 	db	0
   267  00211F  00                 	db	0
   268  002120  00                 	db	0
   269  002121  00                 	db	0
   270  002122  00                 	db	0
   271  002123  00                 	db	0
   272  002124  00                 	db	0
   273  002125  00                 	db	0
   274  002126  00                 	db	0
   275  002127  00                 	db	0
   276  002128  00                 	db	0
   277  002129  00                 	db	0
   278  00212A  00                 	db	0
   279  00212B  00                 	db	0
   280  00212C  00                 	db	0
   281  00212D  00                 	db	0
   282  00212E  00                 	db	0
   283  00212F  00                 	db	0
   284  002130  00                 	db	0
   285  002131  00                 	db	0
   286  002132  00                 	db	0
   287  002133  00                 	db	0
   288  002134  00                 	db	0
   289  002135  00                 	db	0
   290  002136  00                 	db	0
   291  002137  00                 	db	0
   292  002138  00                 	db	0
   293  002139  00                 	db	0
   294  00213A  00                 	db	0
   295  00213B  00                 	db	0
   296  00213C  00                 	db	0
   297  00213D  00                 	db	0
   298  00213E  00                 	db	0
   299  00213F  00                 	db	0
   300  002140  00                 	db	0
   301  002141  00                 	db	0
   302  002142  00                 	db	0
   303  002143  00                 	db	0
   304  002144  65                 	db	101
   305  002145  76                 	db	118
   306  002146  65                 	db	101
   307  002147  6E                 	db	110
   308  002148  74                 	db	116
   309  002149  31                 	db	49
   310  00214A  20                 	db	32
   311  00214B  20                 	db	32
   312  00214C  20                 	db	32
   313  00214D  20                 	db	32
   314  00214E  20                 	db	32
   315  00214F  20                 	db	32
   316  002150  20                 	db	32
   317  002151  20                 	db	32
   318  002152  20                 	db	32
   319  002153  00                 	db	0
   320  002154  00                 	db	0
   321  002155  00                 	db	0
   322  002156  65                 	db	101
   323  002157  76                 	db	118
   324  002158  65                 	db	101
   325  002159  6E                 	db	110
   326  00215A  74                 	db	116
   327  00215B  32                 	db	50
   328  00215C  20                 	db	32
   329  00215D  20                 	db	32
   330  00215E  20                 	db	32
   331  00215F  20                 	db	32
   332  002160  20                 	db	32
   333  002161  20                 	db	32
   334  002162  20                 	db	32
   335  002163  20                 	db	32
   336  002164  20                 	db	32
   337  002165  00                 	db	0
   338  002166  00                 	db	0
   339  002167  00                 	db	0
   340  002168  65                 	db	101
   341  002169  76                 	db	118
   342  00216A  65                 	db	101
   343  00216B  6E                 	db	110
   344  00216C  74                 	db	116
   345  00216D  33                 	db	51
   346  00216E  20                 	db	32
   347  00216F  20                 	db	32
   348  002170  20                 	db	32
   349  002171  20                 	db	32
   350  002172  20                 	db	32
   351  002173  20                 	db	32
   352  002174  20                 	db	32
   353  002175  20                 	db	32
   354  002176  20                 	db	32
   355  002177  00                 	db	0
   356  002178  00                 	db	0
   357  002179  00                 	db	0
   358  00217A  00                 	db	0
   359  00217B  00                 	db	0
   360  00217C  00                 	db	0
   361  00217D  00                 	db	0
   362  00217E  00                 	db	0
   363  00217F  00                 	db	0
   364  002180  00                 	db	0
   365  002181  00                 	db	0
   366  002182  00                 	db	0
   367  002183  00                 	db	0
   368  002184  00                 	db	0
   369  002185  00                 	db	0
   370  002186  00                 	db	0
   371  002187  00                 	db	0
   372  002188  00                 	db	0
   373  002189  00                 	db	0
   374  00218A  00                 	db	0
   375  00218B  00                 	db	0
   376  00218C  00                 	db	0
   377  00218D  00                 	db	0
   378  00218E  00                 	db	0
   379  00218F  00                 	db	0
   380  002190  00                 	db	0
   381  002191  00                 	db	0
   382  002192  00                 	db	0
   383  002193  00                 	db	0
   384  002194  00                 	db	0
   385  002195  00                 	db	0
   386  002196  00                 	db	0
   387  002197  00                 	db	0
   388  002198  00                 	db	0
   389  002199  00                 	db	0
   390  00219A  00                 	db	0
   391  00219B  00                 	db	0
   392  00219C  00                 	db	0
   393  00219D  00                 	db	0
   394  00219E  00                 	db	0
   395  00219F  00                 	db	0
   396  0021A0  00                 	db	0
   397  0021A1  00                 	db	0
   398  0021A2  00                 	db	0
   399  0021A3  00                 	db	0
   400  0021A4  00                 	db	0
   401  0021A5  00                 	db	0
   402  0021A6  00                 	db	0
   403  0021A7  00                 	db	0
   404  0021A8  00                 	db	0
   405  0021A9  00                 	db	0
   406  0021AA  00                 	db	0
   407  0021AB  00                 	db	0
   408  0021AC  00                 	db	0
   409  0021AD  00                 	db	0
   410  0021AE  00                 	db	0
   411  0021AF  00                 	db	0
   412  0021B0  00                 	db	0
   413  0021B1  00                 	db	0
   414  0021B2  00                 	db	0
   415  0021B3  00                 	db	0
   416  0021B4  00                 	db	0
   417  0021B5  00                 	db	0
   418  0021B6  00                 	db	0
   419  0021B7  00                 	db	0
   420  0021B8  00                 	db	0
   421  0021B9  00                 	db	0
   422  0021BA  00                 	db	0
   423  0021BB  00                 	db	0
   424  0021BC  00                 	db	0
   425  0021BD  00                 	db	0
   426  0021BE  00                 	db	0
   427  0021BF  00                 	db	0
   428  0021C0  00                 	db	0
   429  0021C1  00                 	db	0
   430  0021C2  00                 	db	0
   431  0021C3  00                 	db	0
   432  0021C4  00                 	db	0
   433  0021C5  00                 	db	0
   434  0021C6  00                 	db	0
   435  0021C7  00                 	db	0
   436  0021C8  00                 	db	0
   437  0021C9  00                 	db	0
   438  0021CA  00                 	db	0
   439  0021CB  00                 	db	0
   440  0021CC  00                 	db	0
   441  0021CD  00                 	db	0
   442  0021CE  00                 	db	0
   443  0021CF  00                 	db	0
   444  0021D0  00                 	db	0
   445  0021D1  00                 	db	0
   446  0021D2  00                 	db	0
   447  0021D3  00                 	db	0
   448  0021D4  00                 	db	0
   449  0021D5  00                 	db	0
   450  0021D6  00                 	db	0
   451  0021D7  00                 	db	0
   452  0021D8  00                 	db	0
   453  0021D9  00                 	db	0
   454  0021DA  00                 	db	0
   455  0021DB  00                 	db	0
   456  0021DC  00                 	db	0
   457  0021DD  00                 	db	0
   458  0021DE  00                 	db	0
   459  0021DF  00                 	db	0
   460  0021E0  00                 	db	0
   461  0021E1  00                 	db	0
   462  0021E2  00                 	db	0
   463  0021E3  00                 	db	0
   464  0021E4  00                 	db	0
   465  0021E5  00                 	db	0
   466  0021E6  00                 	db	0
   467  0021E7  00                 	db	0
   468  0021E8  00                 	db	0
   469  0021E9  00                 	db	0
   470  0021EA  00                 	db	0
   471  0021EB  00                 	db	0
   472  0021EC  00                 	db	0
   473  0021ED  00                 	db	0
   474  0021EE  00                 	db	0
   475  0021EF  00                 	db	0
   476  0021F0  00                 	db	0
   477  0021F1  00                 	db	0
   478  0021F2  00                 	db	0
   479  0021F3  00                 	db	0
   480  0021F4  00                 	db	0
   481  0021F5  00                 	db	0
   482  0021F6  00                 	db	0
   483  0021F7  00                 	db	0
   484  0021F8  4D                 	db	77
   485  0021F9  69                 	db	105
   486  0021FA  63                 	db	99
   487  0021FB  72                 	db	114
   488  0021FC  6F                 	db	111
   489  0021FD  63                 	db	99
   490  0021FE  6F                 	db	111
   491  0021FF  6E                 	db	110
   492  002200  74                 	db	116
   493  002201  72                 	db	114
   494  002202  6F                 	db	111
   495  002203  6C                 	db	108
   496  002204  3A                 	db	58
   497  002205  20                 	db	32
   498  002206  20                 	db	32
   499  002207  00                 	db	0
   500  002208  00                 	db	0
   501  002209  00                 	db	0
   502  00220A  43                 	db	67
   503  00220B  6C                 	db	108
   504  00220C  65                 	db	101
   505  00220D  6D                 	db	109
   506  00220E  65                 	db	101
   507  00220F  6E                 	db	110
   508  002210  74                 	db	116
   509  002211  20                 	db	32
   510  002212  57                 	db	87
   511  002213  61                 	db	97
   512  002214  6E                 	db	110
   513  002215  20                 	db	32
   514  002216  20                 	db	32
   515  002217  20                 	db	32
   516  002218  20                 	db	32
   517  002219  00                 	db	0
   518  00221A  00                 	db	0
   519  00221B  00                 	db	0
   520  00221C  43                 	db	67
   521  00221D  69                 	db	105
   522  00221E  72                 	db	114
   523  00221F  63                 	db	99
   524  002220  75                 	db	117
   525  002221  69                 	db	105
   526  002222  74                 	db	116
   527  002223  73                 	db	115
   528  002224  3A                 	db	58
   529  002225  20                 	db	32
   530  002226  20                 	db	32
   531  002227  20                 	db	32
   532  002228  20                 	db	32
   533  002229  20                 	db	32
   534  00222A  20                 	db	32
   535  00222B  00                 	db	0
   536  00222C  00                 	db	0
   537  00222D  00                 	db	0
   538  00222E  4A                 	db	74
   539  00222F  75                 	db	117
   540  002230  73                 	db	115
   541  002231  74                 	db	116
   542  002232  69                 	db	105
   543  002233  6E                 	db	110
   544  002234  20                 	db	32
   545  002235  51                 	db	81
   546  002236  75                 	db	117
   547  002237  20                 	db	32
   548  002238  20                 	db	32
   549  002239  20                 	db	32
   550  00223A  20                 	db	32
   551  00223B  20                 	db	32
   552  00223C  20                 	db	32
   553  00223D  00                 	db	0
   554  00223E  00                 	db	0
   555  00223F  00                 	db	0
   556  002240  45                 	db	69
   557  002241  6C                 	db	108
   558  002242  65                 	db	101
   559  002243  63                 	db	99
   560  002244  74                 	db	116
   561  002245  72                 	db	114
   562  002246  6F                 	db	111
   563  002247  6D                 	db	109
   564  002248  65                 	db	101
   565  002249  63                 	db	99
   566  00224A  68                 	db	104
   567  00224B  3A                 	db	58
   568  00224C  20                 	db	32
   569  00224D  20                 	db	32
   570  00224E  20                 	db	32
   571  00224F  00                 	db	0
   572  002250  00                 	db	0
   573  002251  00                 	db	0
   574  002252  50                 	db	80
   575  002253  65                 	db	101
   576  002254  74                 	db	116
   577  002255  65                 	db	101
   578  002256  72                 	db	114
   579  002257  20                 	db	32
   580  002258  46                 	db	70
   581  002259  65                 	db	101
   582  00225A  6E                 	db	110
   583  00225B  67                 	db	103
   584  00225C  20                 	db	32
   585  00225D  20                 	db	32
   586  00225E  20                 	db	32
   587  00225F  20                 	db	32
   588  002260  20                 	db	32
   589  002261  00                 	db	0
   590  002262  00                 	db	0
   591  002263  00                 	db	0
   592  002264  00                 	db	0
   593  002265  00                 	db	0
   594  002266  00                 	db	0
   595  002267  00                 	db	0
   596  002268  00                 	db	0
   597  002269  00                 	db	0
   598  00226A  00                 	db	0
   599  00226B  00                 	db	0
   600  00226C  00                 	db	0
   601  00226D  00                 	db	0
   602  00226E  00                 	db	0
   603  00226F  00                 	db	0
   604  002270  00                 	db	0
   605  002271  00                 	db	0
   606  002272  00                 	db	0
   607  002273  00                 	db	0
   608  002274  00                 	db	0
   609  002275  00                 	db	0
   610  002276  00                 	db	0
   611  002277  00                 	db	0
   612  002278  00                 	db	0
   613  002279  00                 	db	0
   614  00227A  00                 	db	0
   615  00227B  00                 	db	0
   616  00227C  00                 	db	0
   617  00227D  00                 	db	0
   618  00227E  00                 	db	0
   619  00227F  00                 	db	0
   620  002280  00                 	db	0
   621  002281  00                 	db	0
   622  002282  00                 	db	0
   623  002283  00                 	db	0
   624  002284  00                 	db	0
   625  002285  00                 	db	0
   626  002286  00                 	db	0
   627  002287  00                 	db	0
   628  002288  00                 	db	0
   629  002289  00                 	db	0
   630  00228A  00                 	db	0
   631  00228B  00                 	db	0
   632  00228C  00                 	db	0
   633  00228D  00                 	db	0
   634  00228E  00                 	db	0
   635  00228F  00                 	db	0
   636  002290  00                 	db	0
   637  002291  00                 	db	0
   638  002292  00                 	db	0
   639  002293  00                 	db	0
   640  002294  00                 	db	0
   641  002295  00                 	db	0
   642  002296  00                 	db	0
   643  002297  00                 	db	0
   644  002298  00                 	db	0
   645  002299  00                 	db	0
   646  00229A  00                 	db	0
   647  00229B  00                 	db	0
   648  00229C  00                 	db	0
   649  00229D  00                 	db	0
   650  00229E  00                 	db	0
   651  00229F  00                 	db	0
   652  0022A0  00                 	db	0
   653  0022A1  00                 	db	0
   654  0022A2  00                 	db	0
   655  0022A3  00                 	db	0
   656  0022A4  00                 	db	0
   657  0022A5  00                 	db	0
   658  0022A6  00                 	db	0
   659  0022A7  00                 	db	0
   660  0022A8  00                 	db	0
   661  0022A9  00                 	db	0
   662  0022AA  00                 	db	0
   663  0022AB  00                 	db	0
   664  0022AC  00                 	db	0
   665  0022AD  00                 	db	0
   666  0022AE  00                 	db	0
   667  0022AF  00                 	db	0
   668  0022B0  00                 	db	0
   669  0022B1  00                 	db	0
   670  0022B2  00                 	db	0
   671  0022B3  00                 	db	0
   672  0022B4  00                 	db	0
   673  0022B5  00                 	db	0
   674  0022B6  00                 	db	0
   675  0022B7  00                 	db	0
   676  0022B8  00                 	db	0
   677  0022B9  00                 	db	0
   678  0022BA  00                 	db	0
   679  0022BB  00                 	db	0
   680  0022BC  00                 	db	0
   681  0022BD  00                 	db	0
   682  0022BE  00                 	db	0
   683  0022BF  00                 	db	0
   684  0022C0  00                 	db	0
   685  0022C1  00                 	db	0
   686  0022C2  00                 	db	0
   687  0022C3  00                 	db	0
   688  0022C4  00                 	db	0
   689  0022C5  00                 	db	0
   690  0022C6  00                 	db	0
   691  0022C7  00                 	db	0
   692  0022C8  00                 	db	0
   693  0022C9  00                 	db	0
   694  0022CA  00                 	db	0
   695  0022CB  00                 	db	0
   696  0022CC  00                 	db	0
   697  0022CD  00                 	db	0
   698  0022CE  00                 	db	0
   699  0022CF  00                 	db	0
   700  0022D0  00                 	db	0
   701  0022D1  00                 	db	0
   702  0022D2  00                 	db	0
   703  0022D3  00                 	db	0
   704  0022D4  00                 	db	0
   705  0022D5  00                 	db	0
   706  0022D6  00                 	db	0
   707  0022D7  00                 	db	0
   708  0022D8  00                 	db	0
   709  0022D9  00                 	db	0
   710  0022DA  00                 	db	0
   711  0022DB  00                 	db	0
   712  0022DC  00                 	db	0
   713  0022DD  00                 	db	0
   714  0022DE  00                 	db	0
   715  0022DF  00                 	db	0
   716  0022E0  00                 	db	0
   717  0022E1  00                 	db	0
   718  0022E2  00                 	db	0
   719  0022E3  00                 	db	0
   720  0022E4  00                 	db	0
   721  0022E5  00                 	db	0
   722  0022E6  00                 	db	0
   723  0022E7  00                 	db	0
   724  0022E8  00                 	db	0
   725  0022E9  00                 	db	0
   726  0022EA  00                 	db	0
   727  0022EB  00                 	db	0
   728  0022EC  00                 	db	0
   729  0022ED  00                 	db	0
   730  0022EE  00                 	db	0
   731  0022EF  00                 	db	0
   732  0022F0  00                 	db	0
   733  0022F1  00                 	db	0
   734  0022F2  00                 	db	0
   735  0022F3  00                 	db	0
   736  0022F4  00                 	db	0
   737  0022F5  00                 	db	0
   738  0022F6  00                 	db	0
   739  0022F7  00                 	db	0
   740  0022F8  00                 	db	0
   741  0022F9  00                 	db	0
   742  0022FA  00                 	db	0
   743  0022FB  00                 	db	0
   744  0022FC  00                 	db	0
   745  0022FD  00                 	db	0
   746  0022FE  00                 	db	0
   747  0022FF  00                 	db	0
   748  002300  00                 	db	0
   749  002301  00                 	db	0
   750  002302  00                 	db	0
   751  002303  00                 	db	0
   752  002304  00                 	db	0
   753  002305  00                 	db	0
   754  002306  00                 	db	0
   755  002307  00                 	db	0
   756  002308  00                 	db	0
   757  002309  00                 	db	0
   758  00230A  00                 	db	0
   759  00230B  00                 	db	0
   760  00230C  00                 	db	0
   761  00230D  00                 	db	0
   762  00230E  00                 	db	0
   763  00230F  00                 	db	0
   764  002310  00                 	db	0
   765  002311  00                 	db	0
   766  002312  00                 	db	0
   767  002313  00                 	db	0
   768  002314  00                 	db	0
   769  002315  00                 	db	0
   770  002316  00                 	db	0
   771  002317  00                 	db	0
   772  002318  00                 	db	0
   773  002319  00                 	db	0
   774  00231A  00                 	db	0
   775  00231B  00                 	db	0
   776  00231C  00                 	db	0
   777  00231D  00                 	db	0
   778  00231E  00                 	db	0
   779  00231F  00                 	db	0
   780  002320  00                 	db	0
   781  002321  00                 	db	0
   782  002322  00                 	db	0
   783  002323  00                 	db	0
   784  002324  00                 	db	0
   785  002325  00                 	db	0
   786  002326  00                 	db	0
   787  002327  00                 	db	0
   788  002328  00                 	db	0
   789  002329  00                 	db	0
   790  00232A  00                 	db	0
   791  00232B  00                 	db	0
   792  00232C  00                 	db	0
   793  00232D  00                 	db	0
   794  00232E  00                 	db	0
   795  00232F  00                 	db	0
   796  002330  00                 	db	0
   797  002331  00                 	db	0
   798  002332  00                 	db	0
   799  002333  00                 	db	0
   800  002334  00                 	db	0
   801  002335  00                 	db	0
   802  002336  00                 	db	0
   803  002337  00                 	db	0
   804  002338  00                 	db	0
   805  002339  00                 	db	0
   806  00233A  00                 	db	0
   807  00233B  00                 	db	0
   808  00233C  00                 	db	0
   809  00233D  00                 	db	0
   810  00233E  00                 	db	0
   811  00233F  00                 	db	0
   812  002340  00                 	db	0
   813  002341  00                 	db	0
   814  002342  00                 	db	0
   815  002343  00                 	db	0
   816  002344  00                 	db	0
   817  002345  00                 	db	0
   818  002346  00                 	db	0
   819  002347  00                 	db	0
   820  002348  00                 	db	0
   821  002349  00                 	db	0
   822  00234A  00                 	db	0
   823  00234B  00                 	db	0
   824  00234C  00                 	db	0
   825  00234D  00                 	db	0
   826  00234E  00                 	db	0
   827  00234F  00                 	db	0
   828  002350  00                 	db	0
   829  002351  00                 	db	0
   830  002352  00                 	db	0
   831  002353  00                 	db	0
   832  002354  00                 	db	0
   833  002355  00                 	db	0
   834  002356  00                 	db	0
   835  002357  00                 	db	0
   836  002358  00                 	db	0
   837  002359  00                 	db	0
   838  00235A  00                 	db	0
   839  00235B  00                 	db	0
   840  00235C  00                 	db	0
   841  00235D  00                 	db	0
   842  00235E  00                 	db	0
   843  00235F  00                 	db	0
   844                           
   845                           	psect	idataBANK0
   846  00378A                     __pidataBANK0:
   847                           	opt stack 0
   848                           
   849                           ;initializer for _DIST_THRESHOLD_HI
   850  00378A  02FF               	dw	767
   851                           
   852                           ;initializer for _DIST_THRESHOLD_LOW
   853  00378C  00FF               	dw	255
   854                           
   855                           ;initializer for _IR_THRESHOLD_HI
   856  00378E  02FF               	dw	767
   857                           
   858                           ;initializer for _IR_THRESHOLD_LOW
   859  003790  00FF               	dw	255
   860                           
   861                           ;initializer for _measure
   862  003792  0005               	dw	5
   863                           
   864                           ;initializer for _release
   865  003794  0FA0               	dw	4000
   866                           
   867                           ;initializer for _nstate
   868  003796  72                 	db	114
   869                           
   870                           ;initializer for _state
   871  003797  72                 	db	114
   872                           
   873                           ;initializer for _creditIndex
   874  003798  0001               	dw	1
   875                           
   876                           ;initializer for _creditSize
   877  00379A  0005               	dw	5
   878                           
   879                           ;initializer for _endIndex
   880  00379C  0001               	dw	1
   881                           
   882                           ;initializer for _endSize
   883  00379E  0003               	dw	3
   884                           
   885                           ;initializer for _events
   886  0037A0  0002               	dw	2
   887                           
   888                           ;initializer for _logIndex
   889  0037A2  0001               	dw	1
   890                           
   891                           ;initializer for _menuIndex
   892  0037A4  0001               	dw	1
   893                           
   894                           ;initializer for _menuSize
   895  0037A6  0003               	dw	3
   896                           
   897                           	psect	mediumconst
   898  00FEE4                     __pmediumconst:
   899                           	opt stack 0
   900  00FEE4  00                 	db	0
   901  00FEE5                     _keys:
   902                           	opt stack 0
   903  00FEE5  31                 	db	49
   904  00FEE6  32                 	db	50
   905  00FEE7  33                 	db	51
   906  00FEE8  41                 	db	65
   907  00FEE9  34                 	db	52
   908  00FEEA  35                 	db	53
   909  00FEEB  36                 	db	54
   910  00FEEC  42                 	db	66
   911  00FEED  37                 	db	55
   912  00FEEE  38                 	db	56
   913  00FEEF  39                 	db	57
   914  00FEF0  43                 	db	67
   915  00FEF1  2A                 	db	42
   916  00FEF2  30                 	db	48
   917  00FEF3  23                 	db	35
   918  00FEF4  44                 	db	68
   919  00FEF5  00                 	db	0
   920  00FEF6                     __end_of_keys:
   921                           	opt stack 0
   922  00FEF6                     _dpowers:
   923                           	opt stack 0
   924  00FEF6  0001               	dw	1
   925  00FEF8  000A               	dw	10
   926  00FEFA  0064               	dw	100
   927  00FEFC  03E8               	dw	1000
   928  00FEFE  2710               	dw	10000
   929  00FF00                     __end_of_dpowers:
   930                           	opt stack 0
   931  00FF00                     _hexpowers:
   932                           	opt stack 0
   933  00FF00  0001               	dw	1
   934  00FF02  0010               	dw	16
   935  00FF04  0100               	dw	256
   936  00FF06  1000               	dw	4096
   937  00FF08                     __end_of_hexpowers:
   938                           	opt stack 0
   939  00FF08                     _manualDateTime:
   940                           	opt stack 0
   941  00FF08  00                 	db	0
   942  00FF09  00                 	db	0
   943  00FF0A  00                 	db	0
   944  00FF0B  00                 	db	0
   945  00FF0C  01                 	db	1
   946  00FF0D  00                 	db	0
   947  00FF0E  17                 	db	23
   948  00FF0F                     __end_of_manualDateTime:
   949                           	opt stack 0
   950  0000                     _ADCON0	set	4034
   951  0000                     _ADCON0bits	set	4034
   952  0000                     _ADCON1	set	4033
   953  0000                     _ADRESL	set	4035
   954  0000                     _CMCONbits	set	4020
   955  0000                     _CVRCON	set	4021
   956  0000                     _INTCONbits	set	4082
   957  0000                     _LATB	set	3978
   958  0000                     _LATC	set	3979
   959  0000                     _LATD	set	3980
   960  0000                     _LATDbits	set	3980
   961  0000                     _PORTB	set	3969
   962  0000                     _SSPADD	set	4040
   963  0000                     _SSPBUF	set	4041
   964  0000                     _SSPCON1	set	4038
   965  0000                     _SSPCON2	set	4037
   966  0000                     _SSPSTAT	set	4039
   967  0000                     _TRISB	set	3987
   968  0000                     _TRISC	set	3988
   969  0000                     _TRISD	set	3989
   970  0000                     _TRISE	set	3990
   971  0000                     _ADRESH	set	4036
   972  0000                     _ACKDT	set	32301
   973  0000                     _ACKEN	set	32300
   974  0000                     _ADFM	set	32263
   975  0000                     _ADON	set	32272
   976  0000                     _INT1IE	set	32643
   977  0000                     _INT1IF	set	32640
   978  0000                     _PEN	set	32298
   979  0000                     _RCEN	set	32299
   980  0000                     _RSEN	set	32297
   981  0000                     _SEN	set	32296
   982  0000                     _TRISC3	set	31907
   983  0000                     _TRISC4	set	31908
   984  0000                     _nRBPU	set	32655
   985  00FF0F                     STR_1:
   986  00FF0F  25                 	db	37
   987  00FF10  30                 	db	48	;'0'
   988  00FF11  32                 	db	50	;'2'
   989  00FF12  78                 	db	120	;'x'
   990  00FF13  2F                 	db	47
   991  00FF14  25                 	db	37
   992  00FF15  30                 	db	48	;'0'
   993  00FF16  32                 	db	50	;'2'
   994  00FF17  78                 	db	120	;'x'
   995  00FF18  2F                 	db	47
   996  00FF19  25                 	db	37
   997  00FF1A  30                 	db	48	;'0'
   998  00FF1B  32                 	db	50	;'2'
   999  00FF1C  78                 	db	120	;'x'
  1000  00FF1D  20                 	db	32
  1001  00FF1E  50                 	db	80	;'P'
  1002  00FF1F  55                 	db	85	;'U'
  1003  00FF20  53                 	db	83	;'S'
  1004  00FF21  48                 	db	72	;'H'
  1005  00FF22  20                 	db	32
  1006  00FF23  54                 	db	84	;'T'
  1007  00FF24  4F                 	db	79	;'O'
  1008  00FF25  00                 	db	0
  1009  00FF26                     STR_2:
  1010  00FF26  25                 	db	37
  1011  00FF27  30                 	db	48	;'0'
  1012  00FF28  32                 	db	50	;'2'
  1013  00FF29  78                 	db	120	;'x'
  1014  00FF2A  3A                 	db	58	;':'
  1015  00FF2B  25                 	db	37
  1016  00FF2C  30                 	db	48	;'0'
  1017  00FF2D  32                 	db	50	;'2'
  1018  00FF2E  78                 	db	120	;'x'
  1019  00FF2F  3A                 	db	58	;':'
  1020  00FF30  25                 	db	37
  1021  00FF31  30                 	db	48	;'0'
  1022  00FF32  32                 	db	50	;'2'
  1023  00FF33  78                 	db	120	;'x'
  1024  00FF34  20                 	db	32
  1025  00FF35  20                 	db	32
  1026  00FF36  20                 	db	32
  1027  00FF37  53                 	db	83	;'S'
  1028  00FF38  54                 	db	84	;'T'
  1029  00FF39  41                 	db	65	;'A'
  1030  00FF3A  52                 	db	82	;'R'
  1031  00FF3B  54                 	db	84	;'T'
  1032  00FF3C  00                 	db	0
  1033  00FF3D                     STR_8:
  1034  00FF3D  72                 	db	114	;'r'
  1035  00FF3E  75                 	db	117	;'u'
  1036  00FF3F  6E                 	db	110	;'n'
  1037  00FF40  20                 	db	32
  1038  00FF41  74                 	db	116	;'t'
  1039  00FF42  69                 	db	105	;'i'
  1040  00FF43  6D                 	db	109	;'m'
  1041  00FF44  65                 	db	101	;'e'
  1042  00FF45  3A                 	db	58	;':'
  1043  00FF46  20                 	db	32
  1044  00FF47  25                 	db	37
  1045  00FF48  30                 	db	48	;'0'
  1046  00FF49  31                 	db	49	;'1'
  1047  00FF4A  64                 	db	100	;'d'
  1048  00FF4B  3A                 	db	58	;':'
  1049  00FF4C  25                 	db	37
  1050  00FF4D  30                 	db	48	;'0'
  1051  00FF4E  32                 	db	50	;'2'
  1052  00FF4F  64                 	db	100	;'d'
  1053  00FF50  20                 	db	32
  1054  00FF51  00                 	db	0
  1055  00FF52  00                 	db	0
  1056  00FF53                     STR_9:
  1057  00FF53  65                 	db	101	;'e'
  1058  00FF54  6E                 	db	110	;'n'
  1059  00FF55  3A                 	db	58	;':'
  1060  00FF56  25                 	db	37
  1061  00FF57  30                 	db	48	;'0'
  1062  00FF58  32                 	db	50	;'2'
  1063  00FF59  64                 	db	100	;'d'
  1064  00FF5A  20                 	db	32
  1065  00FF5B  65                 	db	101	;'e'
  1066  00FF5C  63                 	db	99	;'c'
  1067  00FF5D  3A                 	db	58	;':'
  1068  00FF5E  25                 	db	37
  1069  00FF5F  30                 	db	48	;'0'
  1070  00FF60  32                 	db	50	;'2'
  1071  00FF61  64                 	db	100	;'d'
  1072  00FF62  20                 	db	32
  1073  00FF63  20                 	db	32
  1074  00FF64  20                 	db	32
  1075  00FF65  20                 	db	32
  1076  00FF66  00                 	db	0
  1077  00FF67                     STR_10:
  1078  00FF67  79                 	db	121	;'y'
  1079  00FF68  6E                 	db	110	;'n'
  1080  00FF69  3A                 	db	58	;':'
  1081  00FF6A  25                 	db	37
  1082  00FF6B  30                 	db	48	;'0'
  1083  00FF6C  32                 	db	50	;'2'
  1084  00FF6D  64                 	db	100	;'d'
  1085  00FF6E  20                 	db	32
  1086  00FF6F  79                 	db	121	;'y'
  1087  00FF70  63                 	db	99	;'c'
  1088  00FF71  3A                 	db	58	;':'
  1089  00FF72  25                 	db	37
  1090  00FF73  30                 	db	48	;'0'
  1091  00FF74  32                 	db	50	;'2'
  1092  00FF75  64                 	db	100	;'d'
  1093  00FF76  20                 	db	32
  1094  00FF77  20                 	db	32
  1095  00FF78  20                 	db	32
  1096  00FF79  20                 	db	32
  1097  00FF7A  00                 	db	0
  1098  00FF7B                     STR_7:
  1099  00FF7B  62                 	db	98	;'b'
  1100  00FF7C  6F                 	db	111	;'o'
  1101  00FF7D  74                 	db	116	;'t'
  1102  00FF7E  74                 	db	116	;'t'
  1103  00FF7F  6C                 	db	108	;'l'
  1104  00FF80  65                 	db	101	;'e'
  1105  00FF81  73                 	db	115	;'s'
  1106  00FF82  3A                 	db	58	;':'
  1107  00FF83  20                 	db	32
  1108  00FF84  25                 	db	37
  1109  00FF85  30                 	db	48	;'0'
  1110  00FF86  32                 	db	50	;'2'
  1111  00FF87  64                 	db	100	;'d'
  1112  00FF88  20                 	db	32
  1113  00FF89  20                 	db	32
  1114  00FF8A  20                 	db	32
  1115  00FF8B  20                 	db	32
  1116  00FF8C  00                 	db	0
  1117  00FF8D  00                 	db	0
  1118  00FF8E                     STR_19:
  1119  00FF8E  30                 	db	48	;'0'
  1120  00FF8F  31                 	db	49	;'1'
  1121  00FF90  32                 	db	50	;'2'
  1122  00FF91  33                 	db	51	;'3'
  1123  00FF92  34                 	db	52	;'4'
  1124  00FF93  35                 	db	53	;'5'
  1125  00FF94  36                 	db	54	;'6'
  1126  00FF95  37                 	db	55	;'7'
  1127  00FF96  38                 	db	56	;'8'
  1128  00FF97  39                 	db	57	;'9'
  1129  00FF98  61                 	db	97	;'a'
  1130  00FF99  62                 	db	98	;'b'
  1131  00FF9A  63                 	db	99	;'c'
  1132  00FF9B  64                 	db	100	;'d'
  1133  00FF9C  65                 	db	101	;'e'
  1134  00FF9D  66                 	db	102	;'f'
  1135  00FF9E  00                 	db	0
  1136  00FF9F                     STR_6:
  1137  00FF9F  45                 	db	69	;'E'
  1138  00FFA0  4D                 	db	77	;'M'
  1139  00FFA1  45                 	db	69	;'E'
  1140  00FFA2  52                 	db	82	;'R'
  1141  00FFA3  47                 	db	71	;'G'
  1142  00FFA4  45                 	db	69	;'E'
  1143  00FFA5  4E                 	db	78	;'N'
  1144  00FFA6  43                 	db	67	;'C'
  1145  00FFA7  59                 	db	89	;'Y'
  1146  00FFA8  20                 	db	32
  1147  00FFA9  53                 	db	83	;'S'
  1148  00FFAA  54                 	db	84	;'T'
  1149  00FFAB  4F                 	db	79	;'O'
  1150  00FFAC  50                 	db	80	;'P'
  1151  00FFAD  00                 	db	0
  1152  00FFAE                     STR_16:
  1153  00FFAE  6D                 	db	109	;'m'
  1154  00FFAF  65                 	db	101	;'e'
  1155  00FFB0  6E                 	db	110	;'n'
  1156  00FFB1  75                 	db	117	;'u'
  1157  00FFB2  20                 	db	32
  1158  00FFB3  73                 	db	115	;'s'
  1159  00FFB4  65                 	db	101	;'e'
  1160  00FFB5  6C                 	db	108	;'l'
  1161  00FFB6  65                 	db	101	;'e'
  1162  00FFB7  63                 	db	99	;'c'
  1163  00FFB8  74                 	db	116	;'t'
  1164  00FFB9  69                 	db	105	;'i'
  1165  00FFBA  6F                 	db	111	;'o'
  1166  00FFBB  6E                 	db	110	;'n'
  1167  00FFBC  00                 	db	0
  1168  00FFBD                     STR_4:
  1169  00FFBD  44                 	db	68	;'D'
  1170  00FFBE  43                 	db	67	;'C'
  1171  00FFBF  3A                 	db	58	;':'
  1172  00FFC0  25                 	db	37
  1173  00FFC1  64                 	db	100	;'d'
  1174  00FFC2  20                 	db	32
  1175  00FFC3  4D                 	db	77	;'M'
  1176  00FFC4  45                 	db	69	;'E'
  1177  00FFC5  41                 	db	65	;'A'
  1178  00FFC6  53                 	db	83	;'S'
  1179  00FFC7  3A                 	db	58	;':'
  1180  00FFC8  25                 	db	37
  1181  00FFC9  64                 	db	100	;'d'
  1182  00FFCA  00                 	db	0
  1183  00FFCB                     STR_17:
  1184  00FFCB  6E                 	db	110	;'n'
  1185  00FFCC  6F                 	db	111	;'o'
  1186  00FFCD  20                 	db	32
  1187  00FFCE  70                 	db	112	;'p'
  1188  00FFCF  61                 	db	97	;'a'
  1189  00FFD0  67                 	db	103	;'g'
  1190  00FFD1  65                 	db	101	;'e'
  1191  00FFD2  20                 	db	32
  1192  00FFD3  66                 	db	102	;'f'
  1193  00FFD4  6F                 	db	111	;'o'
  1194  00FFD5  75                 	db	117	;'u'
  1195  00FFD6  6E                 	db	110	;'n'
  1196  00FFD7  64                 	db	100	;'d'
  1197  00FFD8  00                 	db	0
  1198  00FFD9                     STR_3:
  1199  00FFD9  52                 	db	82	;'R'
  1200  00FFDA  43                 	db	67	;'C'
  1201  00FFDB  3A                 	db	58	;':'
  1202  00FFDC  25                 	db	37
  1203  00FFDD  64                 	db	100	;'d'
  1204  00FFDE  20                 	db	32
  1205  00FFDF  4D                 	db	77	;'M'
  1206  00FFE0  43                 	db	67	;'C'
  1207  00FFE1  3A                 	db	58	;':'
  1208  00FFE2  25                 	db	37
  1209  00FFE3  64                 	db	100	;'d'
  1210  00FFE4  00                 	db	0
  1211  00FFE5                     STR_15:
  1212  00FFE5  69                 	db	105	;'i'
  1213  00FFE6  6E                 	db	110	;'n'
  1214  00FFE7  76                 	db	118	;'v'
  1215  00FFE8  61                 	db	97	;'a'
  1216  00FFE9  6C                 	db	108	;'l'
  1217  00FFEA  69                 	db	105	;'i'
  1218  00FFEB  64                 	db	100	;'d'
  1219  00FFEC  00                 	db	0
  1220  00FFED                     STR_18:
  1221  00FFED  28                 	db	40
  1222  00FFEE  6E                 	db	110	;'n'
  1223  00FFEF  75                 	db	117	;'u'
  1224  00FFF0  6C                 	db	108	;'l'
  1225  00FFF1  6C                 	db	108	;'l'
  1226  00FFF2  29                 	db	41
  1227  00FFF3  00                 	db	0
  1228  00FFF4                     STR_5:
  1229  00FFF4  45                 	db	69	;'E'
  1230  00FFF5  52                 	db	82	;'R'
  1231  00FFF6  52                 	db	82	;'R'
  1232  00FFF7  4F                 	db	79	;'O'
  1233  00FFF8  52                 	db	82	;'R'
  1234  00FFF9  00                 	db	0
  1235  00FFFA                     STR_11:
  1236  00FFFA  25                 	db	37
  1237  00FFFB  73                 	db	115	;'s'
  1238  00FFFC  25                 	db	37
  1239  00FFFD  63                 	db	99	;'c'
  1240  00FFFE  00                 	db	0
  1241  0000                     
  1242                           ; #config settings
  1243  00FFFF  00                 	db	0	; dummy byte at the end
  1244  0000                     
  1245                           	psect	cinit
  1246  003088                     __pcinit:
  1247                           	opt stack 0
  1248  003088                     start_initialization:
  1249                           	opt stack 0
  1250  003088                     __initialization:
  1251                           	opt stack 0
  1252                           
  1253                           ; Initialize objects allocated to BIGRAM (720 bytes)
  1254                           ; load TBLPTR registers with __pidataBIGRAM
  1255  003088  0E90               	movlw	low __pidataBIGRAM
  1256  00308A  6EF6               	movwf	tblptrl,c
  1257  00308C  0E20               	movlw	high __pidataBIGRAM
  1258  00308E  6EF7               	movwf	tblptrh,c
  1259  003090  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
  1260  003092  6EF8               	movwf	tblptru,c
  1261  003094  EE01  F06E         	lfsr	0,__pdataBIGRAM
  1262  003098  EE12 F0D0          	lfsr	1,720
  1263  00309C                     copy_data0:
  1264  00309C  0009               	tblrd		*+
  1265  00309E  CFF5 FFEE          	movff	tablat,postinc0
  1266  0030A2  50E5               	movf	postdec1,w,c
  1267  0030A4  50E1               	movf	fsr1l,w,c
  1268  0030A6  E1FA               	bnz	copy_data0
  1269  0030A8  50E2               	movf	fsr1h,w,c
  1270  0030AA  E1F8               	bnz	copy_data0
  1271                           
  1272                           ; Initialize objects allocated to BANK0 (30 bytes)
  1273                           ; load TBLPTR registers with __pidataBANK0
  1274  0030AC  0E8A               	movlw	low __pidataBANK0
  1275  0030AE  6EF6               	movwf	tblptrl,c
  1276  0030B0  0E37               	movlw	high __pidataBANK0
  1277  0030B2  6EF7               	movwf	tblptrh,c
  1278  0030B4  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1279  0030B6  6EF8               	movwf	tblptru,c
  1280  0030B8  EE00  F0E1         	lfsr	0,__pdataBANK0
  1281  0030BC  EE10 F01E          	lfsr	1,30
  1282  0030C0                     copy_data1:
  1283  0030C0  0009               	tblrd		*+
  1284  0030C2  CFF5 FFEE          	movff	tablat,postinc0
  1285  0030C6  50E5               	movf	postdec1,w,c
  1286  0030C8  50E1               	movf	fsr1l,w,c
  1287  0030CA  E1FA               	bnz	copy_data1
  1288                           
  1289                           ; Initialize objects allocated to COMRAM (4 bytes)
  1290                           ; load TBLPTR registers with __pidataCOMRAM
  1291  0030CC  0E32               	movlw	low __pidataCOMRAM
  1292  0030CE  6EF6               	movwf	tblptrl,c
  1293  0030D0  0E38               	movlw	high __pidataCOMRAM
  1294  0030D2  6EF7               	movwf	tblptrh,c
  1295  0030D4  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1296  0030D6  6EF8               	movwf	tblptru,c
  1297  0030D8  EE00  F076         	lfsr	0,__pdataCOMRAM
  1298  0030DC  EE10 F004          	lfsr	1,4
  1299  0030E0                     copy_data2:
  1300  0030E0  0009               	tblrd		*+
  1301  0030E2  CFF5 FFEE          	movff	tablat,postinc0
  1302  0030E6  50E5               	movf	postdec1,w,c
  1303  0030E8  50E1               	movf	fsr1l,w,c
  1304  0030EA  E1FA               	bnz	copy_data2
  1305                           
  1306                           ; Clear objects allocated to BANK1 (110 bytes)
  1307  0030EC  EE01  F000         	lfsr	0,__pbssBANK1
  1308  0030F0  0E6E               	movlw	110
  1309  0030F2                     clear_0:
  1310  0030F2  6AEE               	clrf	postinc0,c
  1311  0030F4  06E8               	decf	wreg,f,c
  1312  0030F6  E1FD               	bnz	clear_0
  1313                           
  1314                           ; Clear objects allocated to BANK0 (31 bytes)
  1315  0030F8  EE00  F0C2         	lfsr	0,__pbssBANK0
  1316  0030FC  0E1F               	movlw	31
  1317  0030FE                     clear_1:
  1318  0030FE  6AEE               	clrf	postinc0,c
  1319  003100  06E8               	decf	wreg,f,c
  1320  003102  E1FD               	bnz	clear_1
  1321                           
  1322                           ; Clear objects allocated to COMRAM (56 bytes)
  1323  003104  EE00  F03E         	lfsr	0,__pbssCOMRAM
  1324  003108  0E38               	movlw	56
  1325  00310A                     clear_2:
  1326  00310A  6AEE               	clrf	postinc0,c
  1327  00310C  06E8               	decf	wreg,f,c
  1328  00310E  E1FD               	bnz	clear_2
  1329  003110                     end_of_initialization:
  1330                           	opt stack 0
  1331  003110                     __end_of__initialization:
  1332                           	opt stack 0
  1333  003110  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1334  003112  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1335  003114  0100               	movlb	0
  1336  003116  EF8D  F018         	goto	_main	;jump to C main() function
  1337                           tblptru	equ	0xFF8
  1338                           tblptrh	equ	0xFF7
  1339                           tblptrl	equ	0xFF6
  1340                           tablat	equ	0xFF5
  1341                           postinc0	equ	0xFEE
  1342                           wreg	equ	0xFE8
  1343                           postdec1	equ	0xFE5
  1344                           fsr1h	equ	0xFE2
  1345                           fsr1l	equ	0xFE1
  1346                           
  1347                           	psect	bssCOMRAM
  1348  00003E                     __pbssCOMRAM:
  1349                           	opt stack 0
  1350  00003E                     _time_i:
  1351                           	opt stack 0
  1352  00003E                     	ds	14
  1353  00004C                     _DIST1:
  1354                           	opt stack 0
  1355  00004C                     	ds	10
  1356  000056                     _IR1:
  1357                           	opt stack 0
  1358  000056                     	ds	10
  1359  000060                     _PROX1:
  1360                           	opt stack 0
  1361  000060                     	ds	10
  1362  00006A                     _PROX2:
  1363                           	opt stack 0
  1364  00006A                     	ds	10
  1365  000074                     _DIST1_PIN:
  1366                           	opt stack 0
  1367  000074                     	ds	1
  1368  000075                     _PROX1_PIN:
  1369                           	opt stack 0
  1370  000075                     	ds	1
  1371                           tblptru	equ	0xFF8
  1372                           tblptrh	equ	0xFF7
  1373                           tblptrl	equ	0xFF6
  1374                           tablat	equ	0xFF5
  1375                           postinc0	equ	0xFEE
  1376                           wreg	equ	0xFE8
  1377                           postdec1	equ	0xFE5
  1378                           fsr1h	equ	0xFE2
  1379                           fsr1l	equ	0xFE1
  1380                           
  1381                           	psect	dataCOMRAM
  1382  000076                     __pdataCOMRAM:
  1383                           	opt stack 0
  1384  000076                     _DIST1_TRIG:
  1385                           	opt stack 0
  1386  000076                     	ds	1
  1387  000077                     _IR1_PIN:
  1388                           	opt stack 0
  1389  000077                     	ds	1
  1390  000078                     _IR2_PIN:
  1391                           	opt stack 0
  1392  000078                     	ds	1
  1393  000079                     _PROX2_PIN:
  1394                           	opt stack 0
  1395  000079                     	ds	1
  1396                           tblptru	equ	0xFF8
  1397                           tblptrh	equ	0xFF7
  1398                           tblptrl	equ	0xFF6
  1399                           tablat	equ	0xFF5
  1400                           postinc0	equ	0xFEE
  1401                           wreg	equ	0xFE8
  1402                           postdec1	equ	0xFE5
  1403                           fsr1h	equ	0xFE2
  1404                           fsr1l	equ	0xFE1
  1405                           
  1406                           	psect	bssBANK0
  1407  0000C2                     __pbssBANK0:
  1408                           	opt stack 0
  1409  0000C2                     _time:
  1410                           	opt stack 0
  1411  0000C2                     	ds	7
  1412  0000C9                     _bottle_type:
  1413                           	opt stack 0
  1414  0000C9                     	ds	2
  1415  0000CB                     _discretize:
  1416                           	opt stack 0
  1417  0000CB                     	ds	2
  1418  0000CD                     _discretize_counter:
  1419                           	opt stack 0
  1420  0000CD                     	ds	2
  1421  0000CF                     _eskaNoCap:
  1422                           	opt stack 0
  1423  0000CF                     	ds	2
  1424  0000D1                     _eskaWCap:
  1425                           	opt stack 0
  1426  0000D1                     	ds	2
  1427  0000D3                     _measure_counter:
  1428                           	opt stack 0
  1429  0000D3                     	ds	2
  1430  0000D5                     _release_counter:
  1431                           	opt stack 0
  1432  0000D5                     	ds	2
  1433  0000D7                     _runTime:
  1434                           	opt stack 0
  1435  0000D7                     	ds	2
  1436  0000D9                     _sorted_bottles:
  1437                           	opt stack 0
  1438  0000D9                     	ds	2
  1439  0000DB                     _timeDiff:
  1440                           	opt stack 0
  1441  0000DB                     	ds	2
  1442  0000DD                     _yopNoCap:
  1443                           	opt stack 0
  1444  0000DD                     	ds	2
  1445  0000DF                     _yopWCap:
  1446                           	opt stack 0
  1447  0000DF                     	ds	2
  1448                           tblptru	equ	0xFF8
  1449                           tblptrh	equ	0xFF7
  1450                           tblptrl	equ	0xFF6
  1451                           tablat	equ	0xFF5
  1452                           postinc0	equ	0xFEE
  1453                           wreg	equ	0xFE8
  1454                           postdec1	equ	0xFE5
  1455                           fsr1h	equ	0xFE2
  1456                           fsr1l	equ	0xFE1
  1457                           
  1458                           	psect	dataBANK0
  1459  0000E1                     __pdataBANK0:
  1460                           	opt stack 0
  1461  0000E1                     _DIST_THRESHOLD_HI:
  1462                           	opt stack 0
  1463  0000E1                     	ds	2
  1464  0000E3                     _DIST_THRESHOLD_LOW:
  1465                           	opt stack 0
  1466  0000E3                     	ds	2
  1467  0000E5                     _IR_THRESHOLD_HI:
  1468                           	opt stack 0
  1469  0000E5                     	ds	2
  1470  0000E7                     _IR_THRESHOLD_LOW:
  1471                           	opt stack 0
  1472  0000E7                     	ds	2
  1473  0000E9                     _measure:
  1474                           	opt stack 0
  1475  0000E9                     	ds	2
  1476  0000EB                     _release:
  1477                           	opt stack 0
  1478  0000EB                     	ds	2
  1479  0000ED                     _nstate:
  1480                           	opt stack 0
  1481  0000ED                     	ds	1
  1482  0000EE                     _state:
  1483                           	opt stack 0
  1484  0000EE                     	ds	1
  1485  0000EF                     _creditIndex:
  1486                           	opt stack 0
  1487  0000EF                     	ds	2
  1488  0000F1                     _creditSize:
  1489                           	opt stack 0
  1490  0000F1                     	ds	2
  1491  0000F3                     _endIndex:
  1492                           	opt stack 0
  1493  0000F3                     	ds	2
  1494  0000F5                     _endSize:
  1495                           	opt stack 0
  1496  0000F5                     	ds	2
  1497  0000F7                     _events:
  1498                           	opt stack 0
  1499  0000F7                     	ds	2
  1500  0000F9                     _logIndex:
  1501                           	opt stack 0
  1502  0000F9                     	ds	2
  1503  0000FB                     _menuIndex:
  1504                           	opt stack 0
  1505  0000FB                     	ds	2
  1506  0000FD                     _menuSize:
  1507                           	opt stack 0
  1508  0000FD                     	ds	2
  1509                           tblptru	equ	0xFF8
  1510                           tblptrh	equ	0xFF7
  1511                           tblptrl	equ	0xFF6
  1512                           tablat	equ	0xFF5
  1513                           postinc0	equ	0xFEE
  1514                           wreg	equ	0xFE8
  1515                           postdec1	equ	0xFE5
  1516                           fsr1h	equ	0xFE2
  1517                           fsr1l	equ	0xFE1
  1518                           
  1519                           	psect	bssBANK1
  1520  000100                     __pbssBANK1:
  1521                           	opt stack 0
  1522  000100                     _latestSortedBottleTime:
  1523                           	opt stack 0
  1524  000100                     	ds	14
  1525  00010E                     _startTime:
  1526                           	opt stack 0
  1527  00010E                     	ds	14
  1528  00011C                     _IR2:
  1529                           	opt stack 0
  1530  00011C                     	ds	10
  1531  000126                     _display0:
  1532                           	opt stack 0
  1533  000126                     	ds	18
  1534  000138                     _display1:
  1535                           	opt stack 0
  1536  000138                     	ds	18
  1537  00014A                     _ndisplay0:
  1538                           	opt stack 0
  1539  00014A                     	ds	18
  1540  00015C                     _ndisplay1:
  1541                           	opt stack 0
  1542  00015C                     	ds	18
  1543                           tblptru	equ	0xFF8
  1544                           tblptrh	equ	0xFF7
  1545                           tblptrl	equ	0xFF6
  1546                           tablat	equ	0xFF5
  1547                           postinc0	equ	0xFEE
  1548                           wreg	equ	0xFE8
  1549                           postdec1	equ	0xFE5
  1550                           fsr1h	equ	0xFE2
  1551                           fsr1l	equ	0xFE1
  1552                           
  1553                           	psect	dataBIGRAM
  1554  00016E                     __pdataBIGRAM:
  1555                           	opt stack 0
  1556  00016E                     _menu:
  1557                           	opt stack 0
  1558  00016E                     	ds	720
  1559                           tblptru	equ	0xFF8
  1560                           tblptrh	equ	0xFF7
  1561                           tblptrl	equ	0xFF6
  1562                           tablat	equ	0xFF5
  1563                           postinc0	equ	0xFEE
  1564                           wreg	equ	0xFE8
  1565                           postdec1	equ	0xFE5
  1566                           fsr1h	equ	0xFE2
  1567                           fsr1l	equ	0xFE1
  1568                           
  1569                           	psect	cstackBANK0
  1570  000080                     __pcstackBANK0:
  1571                           	opt stack 0
  1572  000080                     ??_readADC:
  1573  000080                     ??_isdigit:
  1574  000080                     ??_I2C_Master_Wait:
  1575  000080                     ?_strcmp:
  1576                           	opt stack 0
  1577  000080                     ?___wmul:
  1578                           	opt stack 0
  1579  000080                     ?___awdiv:
  1580                           	opt stack 0
  1581  000080                     ?___awmod:
  1582                           	opt stack 0
  1583  000080                     ?___lwdiv:
  1584                           	opt stack 0
  1585  000080                     ?___lldiv:
  1586                           	opt stack 0
  1587  000080                     lcdNibble@temp:
  1588                           	opt stack 0
  1589  000080                     ___wmul@multiplier:
  1590                           	opt stack 0
  1591  000080                     ___awdiv@dividend:
  1592                           	opt stack 0
  1593  000080                     ___awmod@dividend:
  1594                           	opt stack 0
  1595  000080                     ___lwdiv@dividend:
  1596                           	opt stack 0
  1597  000080                     strcmp@s1:
  1598                           	opt stack 0
  1599  000080                     strcpy@to:
  1600                           	opt stack 0
  1601  000080                     ___lldiv@dividend:
  1602                           	opt stack 0
  1603                           
  1604                           ; 4 bytes @ 0x0
  1605  000080                     	ds	1
  1606  000081                     I2C_Master_Read@a:
  1607                           	opt stack 0
  1608  000081                     lcdNibble@data:
  1609                           	opt stack 0
  1610  000081                     readADC@channel:
  1611                           	opt stack 0
  1612  000081                     _isdigit$761:
  1613                           	opt stack 0
  1614  000081                     I2C_Master_Write@d:
  1615                           	opt stack 0
  1616                           
  1617                           ; 2 bytes @ 0x1
  1618  000081                     	ds	1
  1619  000082                     ??_read_sensors:
  1620  000082                     I2C_Master_Read@temp:
  1621                           	opt stack 0
  1622  000082                     lcdInst@data:
  1623                           	opt stack 0
  1624  000082                     putch@data:
  1625                           	opt stack 0
  1626  000082                     isdigit@c:
  1627                           	opt stack 0
  1628  000082                     ___wmul@multiplicand:
  1629                           	opt stack 0
  1630  000082                     ___awdiv@divisor:
  1631                           	opt stack 0
  1632  000082                     ___awmod@divisor:
  1633                           	opt stack 0
  1634  000082                     ___lwdiv@divisor:
  1635                           	opt stack 0
  1636  000082                     strcmp@s2:
  1637                           	opt stack 0
  1638  000082                     strcpy@from:
  1639                           	opt stack 0
  1640                           
  1641                           ; 2 bytes @ 0x2
  1642  000082                     	ds	1
  1643  000083                     ??_initLCD:
  1644  000083                     set_time@i:
  1645                           	opt stack 0
  1646                           
  1647                           ; 1 bytes @ 0x3
  1648  000083                     	ds	1
  1649  000084                     ??_strcmp:
  1650  000084                     ___awdiv@counter:
  1651                           	opt stack 0
  1652  000084                     ___awmod@counter:
  1653                           	opt stack 0
  1654  000084                     ___lwdiv@counter:
  1655                           	opt stack 0
  1656  000084                     ___wmul@product:
  1657                           	opt stack 0
  1658  000084                     strcpy@cp:
  1659                           	opt stack 0
  1660  000084                     ___lldiv@divisor:
  1661                           	opt stack 0
  1662                           
  1663                           ; 4 bytes @ 0x4
  1664  000084                     	ds	1
  1665  000085                     ___awdiv@sign:
  1666                           	opt stack 0
  1667  000085                     ___awmod@sign:
  1668                           	opt stack 0
  1669  000085                     strcmp@r:
  1670                           	opt stack 0
  1671  000085                     ___lwdiv@quotient:
  1672                           	opt stack 0
  1673                           
  1674                           ; 2 bytes @ 0x5
  1675  000085                     	ds	1
  1676  000086                     ??_update_RTC:
  1677  000086                     ?__measure:
  1678                           	opt stack 0
  1679  000086                     read_sensors@i:
  1680                           	opt stack 0
  1681  000086                     ___awdiv@quotient:
  1682                           	opt stack 0
  1683                           
  1684                           ; 2 bytes @ 0x6
  1685  000086                     	ds	1
  1686  000087                     ?___lwmod:
  1687                           	opt stack 0
  1688  000087                     ___lwmod@dividend:
  1689                           	opt stack 0
  1690                           
  1691                           ; 2 bytes @ 0x7
  1692  000087                     	ds	1
  1693  000088                     ___lldiv@quotient:
  1694                           	opt stack 0
  1695                           
  1696                           ; 4 bytes @ 0x8
  1697  000088                     	ds	1
  1698  000089                     ___lwmod@divisor:
  1699                           	opt stack 0
  1700                           
  1701                           ; 2 bytes @ 0x9
  1702  000089                     	ds	1
  1703  00008A                     update_RTC@i:
  1704                           	opt stack 0
  1705  00008A                     __measure@i:
  1706                           	opt stack 0
  1707                           
  1708                           ; 1 bytes @ 0xA
  1709  00008A                     	ds	1
  1710  00008B                     __measure@i_483:
  1711                           	opt stack 0
  1712  00008B                     ___lwmod@counter:
  1713                           	opt stack 0
  1714                           
  1715                           ; 1 bytes @ 0xB
  1716  00008B                     	ds	1
  1717  00008C                     ?__doprnt:
  1718                           	opt stack 0
  1719  00008C                     __measure@i_484:
  1720                           	opt stack 0
  1721  00008C                     ___lldiv@counter:
  1722                           	opt stack 0
  1723  00008C                     __doprnt@pb:
  1724                           	opt stack 0
  1725                           
  1726                           ; 2 bytes @ 0xC
  1727  00008C                     	ds	1
  1728  00008D                     __measure@i_485:
  1729                           	opt stack 0
  1730  00008D                     I2C_Master_Init@c:
  1731                           	opt stack 0
  1732                           
  1733                           ; 4 bytes @ 0xD
  1734  00008D                     	ds	1
  1735  00008E                     __measure@i_486:
  1736                           	opt stack 0
  1737  00008E                     __doprnt@f:
  1738                           	opt stack 0
  1739                           
  1740                           ; 2 bytes @ 0xE
  1741  00008E                     	ds	1
  1742  00008F                     __measure@i_487:
  1743                           	opt stack 0
  1744                           
  1745                           ; 1 bytes @ 0xF
  1746  00008F                     	ds	1
  1747  000090                     __measure@i_488:
  1748                           	opt stack 0
  1749  000090                     __doprnt@ap:
  1750                           	opt stack 0
  1751                           
  1752                           ; 2 bytes @ 0x10
  1753  000090                     	ds	1
  1754  000091                     ??_I2C_Master_Init:
  1755  000091                     __measure@i_489:
  1756                           	opt stack 0
  1757                           
  1758                           ; 1 bytes @ 0x11
  1759  000091                     	ds	1
  1760  000092                     ??__doprnt:
  1761  000092                     __measure@measurement:
  1762                           	opt stack 0
  1763                           
  1764                           ; 2 bytes @ 0x12
  1765  000092                     	ds	2
  1766  000094                     ??_sort:
  1767                           
  1768                           ; 1 bytes @ 0x14
  1769  000094                     	ds	2
  1770  000096                     __doprnt@idx:
  1771                           	opt stack 0
  1772                           
  1773                           ; 1 bytes @ 0x16
  1774  000096                     	ds	1
  1775  000097                     __doprnt@prec:
  1776                           	opt stack 0
  1777                           
  1778                           ; 1 bytes @ 0x17
  1779  000097                     	ds	1
  1780  000098                     sort@i:
  1781                           	opt stack 0
  1782  000098                     __doprnt@len:
  1783                           	opt stack 0
  1784                           
  1785                           ; 2 bytes @ 0x18
  1786  000098                     	ds	2
  1787  00009A                     __doprnt@cp:
  1788                           	opt stack 0
  1789                           
  1790                           ; 2 bytes @ 0x1A
  1791  00009A                     	ds	2
  1792  00009C                     __doprnt@val:
  1793                           	opt stack 0
  1794                           
  1795                           ; 2 bytes @ 0x1C
  1796  00009C                     	ds	2
  1797  00009E                     __doprnt@flag:
  1798                           	opt stack 0
  1799                           
  1800                           ; 1 bytes @ 0x1E
  1801  00009E                     	ds	1
  1802  00009F                     __doprnt@width:
  1803                           	opt stack 0
  1804                           
  1805                           ; 2 bytes @ 0x1F
  1806  00009F                     	ds	2
  1807  0000A1                     __doprnt@c:
  1808                           	opt stack 0
  1809                           
  1810                           ; 1 bytes @ 0x21
  1811  0000A1                     	ds	1
  1812  0000A2                     ?_printf:
  1813                           	opt stack 0
  1814  0000A2                     ?_sprintf:
  1815                           	opt stack 0
  1816  0000A2                     printf@f:
  1817                           	opt stack 0
  1818  0000A2                     sprintf@wh:
  1819                           	opt stack 0
  1820                           
  1821                           ; 2 bytes @ 0x22
  1822  0000A2                     	ds	2
  1823  0000A4                     printf@ap:
  1824                           	opt stack 0
  1825  0000A4                     sprintf@f:
  1826                           	opt stack 0
  1827                           
  1828                           ; 2 bytes @ 0x24
  1829  0000A4                     	ds	2
  1830  0000A6                     printf@pb:
  1831                           	opt stack 0
  1832                           
  1833                           ; 4 bytes @ 0x26
  1834  0000A6                     	ds	4
  1835  0000AA                     ??_update_lcd:
  1836                           
  1837                           ; 1 bytes @ 0x2A
  1838  0000AA                     	ds	1
  1839  0000AB                     update_lcd@flag:
  1840                           	opt stack 0
  1841                           
  1842                           ; 2 bytes @ 0x2B
  1843  0000AB                     	ds	1
  1844  0000AC                     sprintf@ap:
  1845                           	opt stack 0
  1846                           
  1847                           ; 2 bytes @ 0x2C
  1848  0000AC                     	ds	2
  1849  0000AE                     sprintf@pb:
  1850                           	opt stack 0
  1851                           
  1852                           ; 4 bytes @ 0x2E
  1853  0000AE                     	ds	4
  1854  0000B2                     ??_update_state:
  1855  0000B2                     ??_display_menu:
  1856                           
  1857                           ; 1 bytes @ 0x32
  1858  0000B2                     	ds	2
  1859  0000B4                     update_state@i:
  1860                           	opt stack 0
  1861                           
  1862                           ; 2 bytes @ 0x34
  1863  0000B4                     	ds	3
  1864  0000B7                     display_menu@selector:
  1865                           	opt stack 0
  1866                           
  1867                           ; 2 bytes @ 0x37
  1868  0000B7                     	ds	2
  1869  0000B9                     display_menu@menuSizePtr:
  1870                           	opt stack 0
  1871                           
  1872                           ; 2 bytes @ 0x39
  1873  0000B9                     	ds	2
  1874  0000BB                     display_menu@menuSelection:
  1875                           	opt stack 0
  1876                           
  1877                           ; 2 bytes @ 0x3B
  1878  0000BB                     	ds	2
  1879  0000BD                     _display_menu$1148:
  1880                           	opt stack 0
  1881                           
  1882                           ; 2 bytes @ 0x3D
  1883  0000BD                     	ds	2
  1884  0000BF                     display_menu@menuIndexPtr:
  1885                           	opt stack 0
  1886                           
  1887                           ; 2 bytes @ 0x3F
  1888  0000BF                     	ds	2
  1889  0000C1                     ??_main:
  1890                           
  1891                           ; 1 bytes @ 0x41
  1892  0000C1                     	ds	1
  1893                           tblptru	equ	0xFF8
  1894                           tblptrh	equ	0xFF7
  1895                           tblptrl	equ	0xFF6
  1896                           tablat	equ	0xFF5
  1897                           postinc0	equ	0xFEE
  1898                           wreg	equ	0xFE8
  1899                           postdec1	equ	0xFE5
  1900                           fsr1h	equ	0xFE2
  1901                           fsr1l	equ	0xFE1
  1902                           
  1903                           	psect	cstackCOMRAM
  1904  000001                     __pcstackCOMRAM:
  1905                           	opt stack 0
  1906  000001                     ??i2_isdigit:
  1907  000001                     ?i2___wmul:
  1908                           	opt stack 0
  1909  000001                     ?i2___awmod:
  1910                           	opt stack 0
  1911  000001                     ?i2___lwdiv:
  1912                           	opt stack 0
  1913  000001                     i2lcdNibble@temp:
  1914                           	opt stack 0
  1915  000001                     i2___wmul@multiplier:
  1916                           	opt stack 0
  1917  000001                     i2___awmod@dividend:
  1918                           	opt stack 0
  1919  000001                     i2___lwdiv@dividend:
  1920                           	opt stack 0
  1921                           
  1922                           ; 2 bytes @ 0x0
  1923  000001                     	ds	1
  1924  000002                     i2lcdNibble@data:
  1925                           	opt stack 0
  1926  000002                     i2_isdigit$761:
  1927                           	opt stack 0
  1928                           
  1929                           ; 1 bytes @ 0x1
  1930  000002                     	ds	1
  1931  000003                     i2lcdInst@data:
  1932                           	opt stack 0
  1933  000003                     i2putch@data:
  1934                           	opt stack 0
  1935  000003                     i2isdigit@c:
  1936                           	opt stack 0
  1937  000003                     i2___wmul@multiplicand:
  1938                           	opt stack 0
  1939  000003                     i2___awmod@divisor:
  1940                           	opt stack 0
  1941  000003                     i2___lwdiv@divisor:
  1942                           	opt stack 0
  1943                           
  1944                           ; 2 bytes @ 0x2
  1945  000003                     	ds	2
  1946  000005                     i2___awmod@counter:
  1947                           	opt stack 0
  1948  000005                     i2___wmul@product:
  1949                           	opt stack 0
  1950  000005                     i2___lwdiv@quotient:
  1951                           	opt stack 0
  1952                           
  1953                           ; 2 bytes @ 0x4
  1954  000005                     	ds	1
  1955  000006                     i2___awmod@sign:
  1956                           	opt stack 0
  1957                           
  1958                           ; 1 bytes @ 0x5
  1959  000006                     	ds	1
  1960  000007                     i2___lwdiv@counter:
  1961                           	opt stack 0
  1962                           
  1963                           ; 1 bytes @ 0x6
  1964  000007                     	ds	1
  1965  000008                     ?i2___lwmod:
  1966                           	opt stack 0
  1967  000008                     i2___lwmod@dividend:
  1968                           	opt stack 0
  1969                           
  1970                           ; 2 bytes @ 0x7
  1971  000008                     	ds	2
  1972  00000A                     i2___lwmod@divisor:
  1973                           	opt stack 0
  1974                           
  1975                           ; 2 bytes @ 0x9
  1976  00000A                     	ds	2
  1977  00000C                     i2___lwmod@counter:
  1978                           	opt stack 0
  1979                           
  1980                           ; 1 bytes @ 0xB
  1981  00000C                     	ds	1
  1982  00000D                     ?i2__doprnt:
  1983                           	opt stack 0
  1984  00000D                     i2__doprnt@pb:
  1985                           	opt stack 0
  1986                           
  1987                           ; 2 bytes @ 0xC
  1988  00000D                     	ds	2
  1989  00000F                     i2__doprnt@f:
  1990                           	opt stack 0
  1991                           
  1992                           ; 2 bytes @ 0xE
  1993  00000F                     	ds	2
  1994  000011                     i2__doprnt@ap:
  1995                           	opt stack 0
  1996                           
  1997                           ; 2 bytes @ 0x10
  1998  000011                     	ds	2
  1999  000013                     ??i2__doprnt:
  2000                           
  2001                           ; 1 bytes @ 0x12
  2002  000013                     	ds	4
  2003  000017                     i2__doprnt@idx:
  2004                           	opt stack 0
  2005                           
  2006                           ; 1 bytes @ 0x16
  2007  000017                     	ds	1
  2008  000018                     i2__doprnt@prec:
  2009                           	opt stack 0
  2010                           
  2011                           ; 1 bytes @ 0x17
  2012  000018                     	ds	1
  2013  000019                     i2__doprnt@len:
  2014                           	opt stack 0
  2015                           
  2016                           ; 2 bytes @ 0x18
  2017  000019                     	ds	2
  2018  00001B                     i2__doprnt@cp:
  2019                           	opt stack 0
  2020                           
  2021                           ; 2 bytes @ 0x1A
  2022  00001B                     	ds	2
  2023  00001D                     i2__doprnt@val:
  2024                           	opt stack 0
  2025                           
  2026                           ; 2 bytes @ 0x1C
  2027  00001D                     	ds	2
  2028  00001F                     i2__doprnt@flag:
  2029                           	opt stack 0
  2030                           
  2031                           ; 1 bytes @ 0x1E
  2032  00001F                     	ds	1
  2033  000020                     i2__doprnt@width:
  2034                           	opt stack 0
  2035                           
  2036                           ; 2 bytes @ 0x1F
  2037  000020                     	ds	2
  2038  000022                     i2__doprnt@c:
  2039                           	opt stack 0
  2040                           
  2041                           ; 1 bytes @ 0x21
  2042  000022                     	ds	1
  2043  000023                     ?i2_printf:
  2044                           	opt stack 0
  2045  000023                     i2printf@f:
  2046                           	opt stack 0
  2047                           
  2048                           ; 2 bytes @ 0x22
  2049  000023                     	ds	2
  2050  000025                     i2printf@ap:
  2051                           	opt stack 0
  2052                           
  2053                           ; 2 bytes @ 0x24
  2054  000025                     	ds	2
  2055  000027                     i2printf@pb:
  2056                           	opt stack 0
  2057                           
  2058                           ; 4 bytes @ 0x26
  2059  000027                     	ds	4
  2060  00002B                     ??_keypressed:
  2061                           
  2062                           ; 1 bytes @ 0x2A
  2063  00002B                     	ds	16
  2064  00003B                     keypressed@i:
  2065                           	opt stack 0
  2066                           
  2067                           ; 2 bytes @ 0x3A
  2068  00003B                     	ds	2
  2069  00003D                     keypressed@keypress:
  2070                           	opt stack 0
  2071                           
  2072                           ; 1 bytes @ 0x3C
  2073  00003D                     	ds	1
  2074                           tblptru	equ	0xFF8
  2075                           tblptrh	equ	0xFF7
  2076                           tblptrl	equ	0xFF6
  2077                           tablat	equ	0xFF5
  2078                           postinc0	equ	0xFEE
  2079                           wreg	equ	0xFE8
  2080                           postdec1	equ	0xFE5
  2081                           fsr1h	equ	0xFE2
  2082                           fsr1l	equ	0xFE1
  2083                           
  2084 ;;
  2085 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2086 ;;
  2087 ;; *************** function _main *****************
  2088 ;; Defined at:
  2089 ;;		line 101 in file "main.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;		None
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;		None
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  1    wreg      void 
  2096 ;; Registers used:
  2097 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;Total ram usage:        1 bytes
  2108 ;; Hardware stack levels required when called:   11
  2109 ;; This function calls:
  2110 ;;		_I2C_Master_Init
  2111 ;;		_initLCD
  2112 ;;		_read_sensors
  2113 ;;		_set_time
  2114 ;;		_sort
  2115 ;;		_update_RTC
  2116 ;;		_update_display
  2117 ;;		_update_lcd
  2118 ;;		_update_state
  2119 ;; This function is called by:
  2120 ;;		Startup code after reset
  2121 ;; This function uses a non-reentrant model
  2122 ;;
  2123                           
  2124                           	psect	text0
  2125  00311A                     __ptext0:
  2126                           	opt stack 0
  2127  00311A                     _main:
  2128                           	opt stack 20
  2129                           
  2130                           ;main.c: 108: TRISC = 0x00;
  2131                           
  2132                           ;incstack = 0
  2133  00311A  0E00               	movlw	0
  2134  00311C  6E94               	movwf	3988,c	;volatile
  2135                           
  2136                           ;main.c: 109: TRISD = 0x00;
  2137  00311E  0E00               	movlw	0
  2138  003120  6E95               	movwf	3989,c	;volatile
  2139                           
  2140                           ;main.c: 110: TRISB = 0xFF;
  2141  003122  6893               	setf	3987,c	;volatile
  2142                           
  2143                           ;main.c: 111: TRISE = 0x03;
  2144  003124  0E03               	movlw	3
  2145  003126  6E96               	movwf	3990,c	;volatile
  2146                           
  2147                           ;main.c: 112: LATB = 0x00;
  2148  003128  0E00               	movlw	0
  2149  00312A  6E8A               	movwf	3978,c	;volatile
  2150                           
  2151                           ;main.c: 113: LATC = 0x00;
  2152  00312C  0E00               	movlw	0
  2153  00312E  6E8B               	movwf	3979,c	;volatile
  2154                           
  2155                           ;main.c: 115: ADCON0 = 0x00;
  2156  003130  0E00               	movlw	0
  2157  003132  6EC2               	movwf	4034,c	;volatile
  2158                           
  2159                           ;main.c: 116: ADCON1 = 0x0B;
  2160  003134  0E0B               	movlw	11
  2161  003136  6EC1               	movwf	4033,c	;volatile
  2162                           
  2163                           ;main.c: 117: CVRCON = 0x00;
  2164  003138  0E00               	movlw	0
  2165  00313A  6EB5               	movwf	4021,c	;volatile
  2166                           
  2167                           ;main.c: 118: CMCONbits.CIS = 0;
  2168  00313C  96B4               	bcf	4020,3,c	;volatile
  2169                           
  2170                           ;main.c: 119: ADFM = 1;
  2171  00313E  8EC0               	bsf	4032,7,c	;volatile
  2172                           
  2173                           ;main.c: 121: initLCD();
  2174  003140  ECDB  F01A         	call	_initLCD	;wreg free
  2175                           
  2176                           ;main.c: 122: INT1IE = 1;
  2177  003144  86F0               	bsf	intcon3,3,c	;volatile
  2178                           
  2179                           ;main.c: 123: nRBPU = 0;
  2180  003146  9EF1               	bcf	intcon2,7,c	;volatile
  2181                           
  2182                           ;main.c: 124: I2C_Master_Init(10000);
  2183  003148  0E10               	movlw	16
  2184  00314A  0100               	movlb	0	; () banked
  2185  00314C  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2186  00314E  0E27               	movlw	39
  2187  003150  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2188  003152  0E00               	movlw	0
  2189  003154  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2190  003156  0E00               	movlw	0
  2191  003158  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2192  00315A  ECDE  F019         	call	_I2C_Master_Init	;wreg free
  2193                           
  2194                           ;main.c: 126: (INTCONbits.GIE = 0);
  2195  00315E  9EF2               	bcf	intcon,7,c	;volatile
  2196                           
  2197                           ;main.c: 127: set_time();
  2198  003160  ECAD  F019         	call	_set_time	;wreg free
  2199  003164                     l8102:
  2200                           
  2201                           ;main.c: 129: (INTCONbits.GIE = 0);
  2202  003164  9EF2               	bcf	intcon,7,c	;volatile
  2203                           
  2204                           ;main.c: 130: update_RTC();
  2205  003166  EC67  F015         	call	_update_RTC	;wreg free
  2206                           
  2207                           ;main.c: 131: if (state=='x'){
  2208  00316A  0E78               	movlw	120
  2209  00316C  0100               	movlb	0	; () banked
  2210  00316E  19EE               	xorwf	_state& (0+255),w,b
  2211  003170  A4D8               	btfss	status,2,c
  2212  003172  D004               	goto	l8110
  2213                           
  2214                           ; BSR set to: 0
  2215                           ;main.c: 132: read_sensors();
  2216  003174  EC0D  F013         	call	_read_sensors	;wreg free
  2217                           
  2218                           ;main.c: 133: sort();
  2219  003178  EC51  F014         	call	_sort	;wreg free
  2220  00317C                     l8110:
  2221                           
  2222                           ;main.c: 134: }
  2223                           ;main.c: 135: update_state();
  2224  00317C  ECB0  F011         	call	_update_state	;wreg free
  2225                           
  2226                           ;main.c: 136: update_display();
  2227  003180  EC1D  F016         	call	_update_display	;wreg free
  2228                           
  2229                           ;main.c: 137: update_lcd();
  2230  003184  ECB7  F016         	call	_update_lcd	;wreg free
  2231  003188                     l8116:
  2232  003188  0E78               	movlw	120
  2233  00318A  0100               	movlb	0	; () banked
  2234  00318C  19EE               	xorwf	_state& (0+255),w,b
  2235  00318E  B4D8               	btfsc	status,2,c
  2236  003190  D7FB               	goto	l8116
  2237                           
  2238                           ; BSR set to: 0
  2239                           ;main.c: 139: (INTCONbits.GIE = 1);
  2240  003192  8EF2               	bsf	intcon,7,c	;volatile
  2241                           
  2242                           ; BSR set to: 0
  2243                           ;main.c: 140: _delay((unsigned long)((50)*(10000000/4000.0)));
  2244  003194  0EA3               	movlw	163
  2245  003196  0100               	movlb	0	; () banked
  2246  003198  6FC1               	movwf	??_main& (0+255),b
  2247  00319A  0E55               	movlw	85
  2248  00319C                     u13177:
  2249  00319C  2EE8               	decfsz	wreg,f,c
  2250  00319E  D7FE               	bra	u13177
  2251  0031A0  2FC1               	decfsz	??_main& (0+255),f,b
  2252  0031A2  D7FC               	bra	u13177
  2253                           
  2254                           ;main.c: 141: (INTCONbits.GIE = 0);
  2255  0031A4  9EF2               	bcf	intcon,7,c	;volatile
  2256  0031A6  D7DE               	goto	l8102
  2257  0031A8                     __end_of_main:
  2258                           	opt stack 0
  2259                           tblptru	equ	0xFF8
  2260                           tblptrh	equ	0xFF7
  2261                           tblptrl	equ	0xFF6
  2262                           tablat	equ	0xFF5
  2263                           intcon	equ	0xFF2
  2264                           intcon2	equ	0xFF1
  2265                           intcon3	equ	0xFF0
  2266                           postinc0	equ	0xFEE
  2267                           wreg	equ	0xFE8
  2268                           postdec1	equ	0xFE5
  2269                           fsr1h	equ	0xFE2
  2270                           fsr1l	equ	0xFE1
  2271                           status	equ	0xFD8
  2272                           
  2273 ;; *************** function _update_state *****************
  2274 ;; Defined at:
  2275 ;;		line 223 in file "main.c"
  2276 ;; Parameters:    Size  Location     Type
  2277 ;;		None
  2278 ;; Auto vars:     Size  Location     Type
  2279 ;;  i               2   52[BANK0 ] int 
  2280 ;; Return value:  Size  Location     Type
  2281 ;;                  1    wreg      void 
  2282 ;; Registers used:
  2283 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2284 ;; Tracked objects:
  2285 ;;		On entry : 0/0
  2286 ;;		On exit  : 0/0
  2287 ;;		Unchanged: 0/0
  2288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2291 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2292 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2293 ;;Total ram usage:        4 bytes
  2294 ;; Hardware stack levels used:    1
  2295 ;; Hardware stack levels required when called:    9
  2296 ;; This function calls:
  2297 ;;		___awdiv
  2298 ;;		___awmod
  2299 ;;		_sprintf
  2300 ;; This function is called by:
  2301 ;;		_main
  2302 ;; This function uses a non-reentrant model
  2303 ;;
  2304                           
  2305                           	psect	text1
  2306  002360                     __ptext1:
  2307                           	opt stack 0
  2308  002360                     _update_state:
  2309                           	opt stack 21
  2310                           
  2311                           ;main.c: 224: if ((nstate=='s'&&state!='s')||(nstate=='m'&&state!='m')){
  2312                           
  2313                           ;incstack = 0
  2314  002360  0E73               	movlw	115
  2315  002362  0100               	movlb	0	; () banked
  2316  002364  19ED               	xorwf	_nstate& (0+255),w,b
  2317  002366  A4D8               	btfss	status,2,c
  2318  002368  D005               	goto	l7970
  2319                           
  2320                           ; BSR set to: 0
  2321  00236A  0E73               	movlw	115
  2322  00236C  0100               	movlb	0	; () banked
  2323  00236E  19EE               	xorwf	_state& (0+255),w,b
  2324  002370  A4D8               	btfss	status,2,c
  2325  002372  D00A               	goto	l7974
  2326  002374                     l7970:
  2327                           
  2328                           ; BSR set to: 0
  2329  002374  0E6D               	movlw	109
  2330  002376  0100               	movlb	0	; () banked
  2331  002378  19ED               	xorwf	_nstate& (0+255),w,b
  2332  00237A  A4D8               	btfss	status,2,c
  2333  00237C  D033               	goto	l7986
  2334                           
  2335                           ; BSR set to: 0
  2336  00237E  0E6D               	movlw	109
  2337  002380  0100               	movlb	0	; () banked
  2338  002382  19EE               	xorwf	_state& (0+255),w,b
  2339  002384  B4D8               	btfsc	status,2,c
  2340  002386  D02E               	goto	l7986
  2341  002388                     l7974:
  2342                           
  2343                           ; BSR set to: 0
  2344                           ;main.c: 225: int i;
  2345                           ;main.c: 226: for (i=0;i<7;i++)
  2346  002388  0E00               	movlw	0
  2347  00238A  0100               	movlb	0	; () banked
  2348  00238C  6FB5               	movwf	(update_state@i+1)& (0+255),b
  2349  00238E  0E00               	movlw	0
  2350  002390  6FB4               	movwf	update_state@i& (0+255),b
  2351  002392                     l7976:
  2352                           
  2353                           ; BSR set to: 0
  2354  002392  0100               	movlb	0	; () banked
  2355  002394  BFB5               	btfsc	(update_state@i+1)& (0+255),7,b
  2356  002396  D008               	goto	l7980
  2357  002398  0100               	movlb	0	; () banked
  2358  00239A  51B5               	movf	(update_state@i+1)& (0+255),w,b
  2359  00239C  E123               	bnz	l7986
  2360  00239E  0E07               	movlw	7
  2361  0023A0  0100               	movlb	0	; () banked
  2362  0023A2  5DB4               	subwf	update_state@i& (0+255),w,b
  2363  0023A4  B0D8               	btfsc	status,0,c
  2364  0023A6  D01E               	goto	l7986
  2365  0023A8                     l7980:
  2366                           
  2367                           ; BSR set to: 0
  2368                           ;main.c: 227: startTime[i]=time_i[i];
  2369  0023A8  90D8               	bcf	status,0,c
  2370  0023AA  0100               	movlb	0	; () banked
  2371  0023AC  35B4               	rlcf	update_state@i& (0+255),w,b
  2372  0023AE  6ED9               	movwf	fsr2l,c
  2373  0023B0  0100               	movlb	0	; () banked
  2374  0023B2  35B5               	rlcf	(update_state@i+1)& (0+255),w,b
  2375  0023B4  6EDA               	movwf	fsr2h,c
  2376  0023B6  0E3E               	movlw	low _time_i
  2377  0023B8  26D9               	addwf	fsr2l,f,c
  2378  0023BA  0E00               	movlw	high _time_i
  2379  0023BC  22DA               	addwfc	fsr2h,f,c
  2380  0023BE  90D8               	bcf	status,0,c
  2381  0023C0  0100               	movlb	0	; () banked
  2382  0023C2  35B4               	rlcf	update_state@i& (0+255),w,b
  2383  0023C4  6EE1               	movwf	fsr1l,c
  2384  0023C6  0100               	movlb	0	; () banked
  2385  0023C8  35B5               	rlcf	(update_state@i+1)& (0+255),w,b
  2386  0023CA  6EE2               	movwf	fsr1h,c
  2387  0023CC  0E0E               	movlw	low _startTime
  2388  0023CE  26E1               	addwf	fsr1l,f,c
  2389  0023D0  0E01               	movlw	high _startTime
  2390  0023D2  22E2               	addwfc	fsr1h,f,c
  2391  0023D4  CFDE FFE6          	movff	postinc2,postinc1
  2392  0023D8  CFDD FFE5          	movff	postdec2,postdec1
  2393                           
  2394                           ; BSR set to: 0
  2395  0023DC  0100               	movlb	0	; () banked
  2396  0023DE  4BB4               	infsnz	update_state@i& (0+255),f,b
  2397  0023E0  2BB5               	incf	(update_state@i+1)& (0+255),f,b
  2398  0023E2  D7D7               	goto	l7976
  2399  0023E4                     l7986:
  2400                           
  2401                           ; BSR set to: 0
  2402                           ;main.c: 228: }
  2403                           ;main.c: 229: sorted_bottles=eskaNoCap+eskaWCap+yopNoCap+yopWCap;
  2404  0023E4  0100               	movlb	0	; () banked
  2405  0023E6  51D1               	movf	_eskaWCap& (0+255),w,b
  2406  0023E8  0100               	movlb	0	; () banked
  2407  0023EA  25CF               	addwf	_eskaNoCap& (0+255),w,b
  2408  0023EC  0100               	movlb	0	; () banked
  2409  0023EE  6FB2               	movwf	??_update_state& (0+255),b
  2410  0023F0  0100               	movlb	0	; () banked
  2411  0023F2  51D2               	movf	(_eskaWCap+1)& (0+255),w,b
  2412  0023F4  0100               	movlb	0	; () banked
  2413  0023F6  21D0               	addwfc	(_eskaNoCap+1)& (0+255),w,b
  2414  0023F8  0100               	movlb	0	; () banked
  2415  0023FA  6FB3               	movwf	(??_update_state+1)& (0+255),b
  2416  0023FC  0100               	movlb	0	; () banked
  2417  0023FE  51DD               	movf	_yopNoCap& (0+255),w,b
  2418  002400  0100               	movlb	0	; () banked
  2419  002402  27B2               	addwf	??_update_state& (0+255),f,b
  2420  002404  0100               	movlb	0	; () banked
  2421  002406  51DE               	movf	(_yopNoCap+1)& (0+255),w,b
  2422  002408  0100               	movlb	0	; () banked
  2423  00240A  23B3               	addwfc	(??_update_state+1)& (0+255),f,b
  2424  00240C  0100               	movlb	0	; () banked
  2425  00240E  51DF               	movf	_yopWCap& (0+255),w,b
  2426  002410  0100               	movlb	0	; () banked
  2427  002412  25B2               	addwf	??_update_state& (0+255),w,b
  2428  002414  0100               	movlb	0	; () banked
  2429  002416  6FD9               	movwf	_sorted_bottles& (0+255),b
  2430  002418  0100               	movlb	0	; () banked
  2431  00241A  51E0               	movf	(_yopWCap+1)& (0+255),w,b
  2432  00241C  0100               	movlb	0	; () banked
  2433  00241E  21B3               	addwfc	(??_update_state+1)& (0+255),w,b
  2434  002420  0100               	movlb	0	; () banked
  2435  002422  6FDA               	movwf	(_sorted_bottles+1)& (0+255),b
  2436                           
  2437                           ; BSR set to: 0
  2438                           ;main.c: 230: sorted_bottles%=100;
  2439  002424  C0D9  F080         	movff	_sorted_bottles,___awmod@dividend
  2440  002428  C0DA  F081         	movff	_sorted_bottles+1,___awmod@dividend+1
  2441  00242C  0E00               	movlw	0
  2442  00242E  0100               	movlb	0	; () banked
  2443  002430  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2444  002432  0E64               	movlw	100
  2445  002434  6F82               	movwf	___awmod@divisor& (0+255),b
  2446  002436  ECF3  F017         	call	___awmod	;wreg free
  2447  00243A  C080  F0D9         	movff	?___awmod,_sorted_bottles
  2448  00243E  C081  F0DA         	movff	?___awmod+1,_sorted_bottles+1
  2449                           
  2450                           ;main.c: 231: if (state=='s'&&timeDiff>=180){
  2451  002442  0E73               	movlw	115
  2452  002444  0100               	movlb	0	; () banked
  2453  002446  19EE               	xorwf	_state& (0+255),w,b
  2454  002448  A4D8               	btfss	status,2,c
  2455  00244A  D00E               	goto	l7996
  2456                           
  2457                           ; BSR set to: 0
  2458  00244C  0100               	movlb	0	; () banked
  2459  00244E  BFDC               	btfsc	(_timeDiff+1)& (0+255),7,b
  2460  002450  D00B               	goto	l7996
  2461  002452  0100               	movlb	0	; () banked
  2462  002454  51DC               	movf	(_timeDiff+1)& (0+255),w,b
  2463  002456  E105               	bnz	u12670
  2464  002458  0EB4               	movlw	180
  2465  00245A  0100               	movlb	0	; () banked
  2466  00245C  5DDB               	subwf	_timeDiff& (0+255),w,b
  2467  00245E  A0D8               	btfss	status,0,c
  2468  002460  D003               	goto	l7996
  2469  002462                     u12670:
  2470                           
  2471                           ; BSR set to: 0
  2472                           ;main.c: 232: nstate='e';
  2473  002462  0E65               	movlw	101
  2474  002464  0100               	movlb	0	; () banked
  2475  002466  6FED               	movwf	_nstate& (0+255),b
  2476  002468                     l7996:
  2477                           
  2478                           ; BSR set to: 0
  2479                           ;main.c: 233: }
  2480                           ;main.c: 234: if (nstate=='e'&&state!='e'){
  2481  002468  0E65               	movlw	101
  2482  00246A  0100               	movlb	0	; () banked
  2483  00246C  19ED               	xorwf	_nstate& (0+255),w,b
  2484  00246E  A4D8               	btfss	status,2,c
  2485  002470  D073               	goto	l8004
  2486                           
  2487                           ; BSR set to: 0
  2488  002472  0E65               	movlw	101
  2489  002474  0100               	movlb	0	; () banked
  2490  002476  19EE               	xorwf	_state& (0+255),w,b
  2491  002478  B4D8               	btfsc	status,2,c
  2492  00247A  D06E               	goto	l8004
  2493                           
  2494                           ; BSR set to: 0
  2495                           ;main.c: 235: runTime=timeDiff;
  2496  00247C  C0DB  F0D7         	movff	_timeDiff,_runTime
  2497  002480  C0DC  F0D8         	movff	_timeDiff+1,_runTime+1
  2498                           
  2499                           ; BSR set to: 0
  2500                           ;main.c: 236: sprintf(menu[3][0],"bottles: %02d    \0", sorted_bottles);
  2501  002484  0E8A               	movlw	low (_menu+540)
  2502  002486  0100               	movlb	0	; () banked
  2503  002488  6FA2               	movwf	sprintf@wh& (0+255),b
  2504  00248A  0E03               	movlw	high (_menu+540)
  2505  00248C  0100               	movlb	0	; () banked
  2506  00248E  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2507  002490  0E7B               	movlw	low STR_7
  2508  002492  0100               	movlb	0	; () banked
  2509  002494  6FA4               	movwf	sprintf@f& (0+255),b
  2510  002496  0EFF               	movlw	high STR_7
  2511  002498  0100               	movlb	0	; () banked
  2512  00249A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2513  00249C  C0D9  F0A6         	movff	_sorted_bottles,?_sprintf+4
  2514  0024A0  C0DA  F0A7         	movff	_sorted_bottles+1,?_sprintf+5
  2515  0024A4  EC64  F01A         	call	_sprintf	;wreg free
  2516                           
  2517                           ;main.c: 237: sprintf(menu[3][1],"run time: %01d:%02d \0",(runTime/60),timeDiff%60);
  2518  0024A8  0E9C               	movlw	low (_menu+558)
  2519  0024AA  0100               	movlb	0	; () banked
  2520  0024AC  6FA2               	movwf	sprintf@wh& (0+255),b
  2521  0024AE  0E03               	movlw	high (_menu+558)
  2522  0024B0  0100               	movlb	0	; () banked
  2523  0024B2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2524  0024B4  0E3D               	movlw	low STR_8
  2525  0024B6  0100               	movlb	0	; () banked
  2526  0024B8  6FA4               	movwf	sprintf@f& (0+255),b
  2527  0024BA  0EFF               	movlw	high STR_8
  2528  0024BC  0100               	movlb	0	; () banked
  2529  0024BE  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2530  0024C0  C0D7  F080         	movff	_runTime,___awdiv@dividend
  2531  0024C4  C0D8  F081         	movff	_runTime+1,___awdiv@dividend+1
  2532  0024C8  0E00               	movlw	0
  2533  0024CA  0100               	movlb	0	; () banked
  2534  0024CC  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2535  0024CE  0E3C               	movlw	60
  2536  0024D0  6F82               	movwf	___awdiv@divisor& (0+255),b
  2537  0024D2  EC36  F017         	call	___awdiv	;wreg free
  2538  0024D6  C080  F0A6         	movff	?___awdiv,?_sprintf+4
  2539  0024DA  C081  F0A7         	movff	?___awdiv+1,?_sprintf+5
  2540  0024DE  C0DB  F080         	movff	_timeDiff,___awmod@dividend
  2541  0024E2  C0DC  F081         	movff	_timeDiff+1,___awmod@dividend+1
  2542  0024E6  0E00               	movlw	0
  2543  0024E8  0100               	movlb	0	; () banked
  2544  0024EA  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2545  0024EC  0E3C               	movlw	60
  2546  0024EE  6F82               	movwf	___awmod@divisor& (0+255),b
  2547  0024F0  ECF3  F017         	call	___awmod	;wreg free
  2548  0024F4  C080  F0A8         	movff	?___awmod,?_sprintf+6
  2549  0024F8  C081  F0A9         	movff	?___awmod+1,?_sprintf+7
  2550  0024FC  EC64  F01A         	call	_sprintf	;wreg free
  2551                           
  2552                           ;main.c: 238: sprintf(menu[3][2],"en:%02d ec:%02d    ", eskaNoCap,eskaWCap);
  2553  002500  0EAE               	movlw	low (_menu+576)
  2554  002502  0100               	movlb	0	; () banked
  2555  002504  6FA2               	movwf	sprintf@wh& (0+255),b
  2556  002506  0E03               	movlw	high (_menu+576)
  2557  002508  0100               	movlb	0	; () banked
  2558  00250A  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2559  00250C  0E53               	movlw	low STR_9
  2560  00250E  0100               	movlb	0	; () banked
  2561  002510  6FA4               	movwf	sprintf@f& (0+255),b
  2562  002512  0EFF               	movlw	high STR_9
  2563  002514  0100               	movlb	0	; () banked
  2564  002516  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2565  002518  C0CF  F0A6         	movff	_eskaNoCap,?_sprintf+4
  2566  00251C  C0D0  F0A7         	movff	_eskaNoCap+1,?_sprintf+5
  2567  002520  C0D1  F0A8         	movff	_eskaWCap,?_sprintf+6
  2568  002524  C0D2  F0A9         	movff	_eskaWCap+1,?_sprintf+7
  2569  002528  EC64  F01A         	call	_sprintf	;wreg free
  2570                           
  2571                           ;main.c: 239: sprintf(menu[3][3],"yn:%02d yc:%02d    ", yopNoCap, yopWCap);
  2572  00252C  0EC0               	movlw	low (_menu+594)
  2573  00252E  0100               	movlb	0	; () banked
  2574  002530  6FA2               	movwf	sprintf@wh& (0+255),b
  2575  002532  0E03               	movlw	high (_menu+594)
  2576  002534  0100               	movlb	0	; () banked
  2577  002536  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2578  002538  0E67               	movlw	low STR_10
  2579  00253A  0100               	movlb	0	; () banked
  2580  00253C  6FA4               	movwf	sprintf@f& (0+255),b
  2581  00253E  0EFF               	movlw	high STR_10
  2582  002540  0100               	movlb	0	; () banked
  2583  002542  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2584  002544  C0DD  F0A6         	movff	_yopNoCap,?_sprintf+4
  2585  002548  C0DE  F0A7         	movff	_yopNoCap+1,?_sprintf+5
  2586  00254C  C0DF  F0A8         	movff	_yopWCap,?_sprintf+6
  2587  002550  C0E0  F0A9         	movff	_yopWCap+1,?_sprintf+7
  2588  002554  EC64  F01A         	call	_sprintf	;wreg free
  2589  002558                     l8004:
  2590                           
  2591                           ;main.c: 240: }
  2592                           ;main.c: 241: if ((state=='m'||state=='l'||state=='c')&&timeDiff>=10){
  2593  002558  0E6D               	movlw	109
  2594  00255A  0100               	movlb	0	; () banked
  2595  00255C  19EE               	xorwf	_state& (0+255),w,b
  2596  00255E  B4D8               	btfsc	status,2,c
  2597  002560  D00A               	goto	l8010
  2598                           
  2599                           ; BSR set to: 0
  2600  002562  0E6C               	movlw	108
  2601  002564  0100               	movlb	0	; () banked
  2602  002566  19EE               	xorwf	_state& (0+255),w,b
  2603  002568  B4D8               	btfsc	status,2,c
  2604  00256A  D005               	goto	l8010
  2605                           
  2606                           ; BSR set to: 0
  2607  00256C  0E63               	movlw	99
  2608  00256E  0100               	movlb	0	; () banked
  2609  002570  19EE               	xorwf	_state& (0+255),w,b
  2610  002572  A4D8               	btfss	status,2,c
  2611  002574  D00E               	goto	l8014
  2612  002576                     l8010:
  2613                           
  2614                           ; BSR set to: 0
  2615  002576  0100               	movlb	0	; () banked
  2616  002578  BFDC               	btfsc	(_timeDiff+1)& (0+255),7,b
  2617  00257A  D00B               	goto	l8014
  2618  00257C  0100               	movlb	0	; () banked
  2619  00257E  51DC               	movf	(_timeDiff+1)& (0+255),w,b
  2620  002580  E105               	bnz	u12730
  2621  002582  0E0A               	movlw	10
  2622  002584  0100               	movlb	0	; () banked
  2623  002586  5DDB               	subwf	_timeDiff& (0+255),w,b
  2624  002588  A0D8               	btfss	status,0,c
  2625  00258A  D003               	goto	l8014
  2626  00258C                     u12730:
  2627                           
  2628                           ; BSR set to: 0
  2629                           ;main.c: 242: nstate='r';
  2630  00258C  0E72               	movlw	114
  2631  00258E  0100               	movlb	0	; () banked
  2632  002590  6FED               	movwf	_nstate& (0+255),b
  2633  002592                     l8014:
  2634                           
  2635                           ; BSR set to: 0
  2636                           ;main.c: 243: }
  2637                           ;main.c: 244: state=nstate;
  2638  002592  C0ED  F0EE         	movff	_nstate,_state
  2639                           
  2640                           ; BSR set to: 0
  2641                           ;main.c: 252: if (state!='m'&&state!='l'&&state!='c')
  2642  002596  0E6D               	movlw	109
  2643  002598  0100               	movlb	0	; () banked
  2644  00259A  19EE               	xorwf	_state& (0+255),w,b
  2645  00259C  B4D8               	btfsc	status,2,c
  2646  00259E  D019               	goto	l8024
  2647                           
  2648                           ; BSR set to: 0
  2649  0025A0  0E6C               	movlw	108
  2650  0025A2  0100               	movlb	0	; () banked
  2651  0025A4  19EE               	xorwf	_state& (0+255),w,b
  2652  0025A6  B4D8               	btfsc	status,2,c
  2653  0025A8  D014               	goto	l8024
  2654                           
  2655                           ; BSR set to: 0
  2656  0025AA  0E63               	movlw	99
  2657  0025AC  0100               	movlb	0	; () banked
  2658  0025AE  19EE               	xorwf	_state& (0+255),w,b
  2659  0025B0  B4D8               	btfsc	status,2,c
  2660  0025B2  D00F               	goto	l8024
  2661                           
  2662                           ; BSR set to: 0
  2663                           ;main.c: 253: {
  2664                           ;main.c: 254: menuIndex=1;
  2665  0025B4  0E00               	movlw	0
  2666  0025B6  0100               	movlb	0	; () banked
  2667  0025B8  6FFC               	movwf	(_menuIndex+1)& (0+255),b
  2668  0025BA  0E01               	movlw	1
  2669  0025BC  6FFB               	movwf	_menuIndex& (0+255),b
  2670                           
  2671                           ;main.c: 255: logIndex=1;
  2672  0025BE  0E00               	movlw	0
  2673  0025C0  0100               	movlb	0	; () banked
  2674  0025C2  6FFA               	movwf	(_logIndex+1)& (0+255),b
  2675  0025C4  0E01               	movlw	1
  2676  0025C6  6FF9               	movwf	_logIndex& (0+255),b
  2677                           
  2678                           ;main.c: 256: creditIndex=1;
  2679  0025C8  0E00               	movlw	0
  2680  0025CA  0100               	movlb	0	; () banked
  2681  0025CC  6FF0               	movwf	(_creditIndex+1)& (0+255),b
  2682  0025CE  0E01               	movlw	1
  2683  0025D0  6FEF               	movwf	_creditIndex& (0+255),b
  2684  0025D2                     l8024:
  2685                           
  2686                           ; BSR set to: 0
  2687                           ;main.c: 257: }
  2688                           ;main.c: 258: if (state!='e')
  2689  0025D2  0E65               	movlw	101
  2690  0025D4  0100               	movlb	0	; () banked
  2691  0025D6  19EE               	xorwf	_state& (0+255),w,b
  2692  0025D8  B4D8               	btfsc	status,2,c
  2693  0025DA  D005               	goto	l8028
  2694                           
  2695                           ; BSR set to: 0
  2696                           ;main.c: 259: endIndex=1;
  2697  0025DC  0E00               	movlw	0
  2698  0025DE  0100               	movlb	0	; () banked
  2699  0025E0  6FF4               	movwf	(_endIndex+1)& (0+255),b
  2700  0025E2  0E01               	movlw	1
  2701  0025E4  6FF3               	movwf	_endIndex& (0+255),b
  2702  0025E6                     l8028:
  2703                           
  2704                           ; BSR set to: 0
  2705                           ;main.c: 260: if (state=='r'){
  2706  0025E6  0E72               	movlw	114
  2707  0025E8  0100               	movlb	0	; () banked
  2708  0025EA  19EE               	xorwf	_state& (0+255),w,b
  2709  0025EC  A4D8               	btfss	status,2,c
  2710  0025EE  0012               	return	
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;main.c: 261: eskaNoCap=0;
  2714  0025F0  0E00               	movlw	0
  2715  0025F2  0100               	movlb	0	; () banked
  2716  0025F4  6FD0               	movwf	(_eskaNoCap+1)& (0+255),b
  2717  0025F6  0E00               	movlw	0
  2718  0025F8  6FCF               	movwf	_eskaNoCap& (0+255),b
  2719                           
  2720                           ;main.c: 262: eskaWCap=0;
  2721  0025FA  0E00               	movlw	0
  2722  0025FC  0100               	movlb	0	; () banked
  2723  0025FE  6FD2               	movwf	(_eskaWCap+1)& (0+255),b
  2724  002600  0E00               	movlw	0
  2725  002602  6FD1               	movwf	_eskaWCap& (0+255),b
  2726                           
  2727                           ;main.c: 263: yopNoCap=0;
  2728  002604  0E00               	movlw	0
  2729  002606  0100               	movlb	0	; () banked
  2730  002608  6FDE               	movwf	(_yopNoCap+1)& (0+255),b
  2731  00260A  0E00               	movlw	0
  2732  00260C  6FDD               	movwf	_yopNoCap& (0+255),b
  2733                           
  2734                           ;main.c: 264: yopWCap=0;
  2735  00260E  0E00               	movlw	0
  2736  002610  0100               	movlb	0	; () banked
  2737  002612  6FE0               	movwf	(_yopWCap+1)& (0+255),b
  2738  002614  0E00               	movlw	0
  2739  002616  6FDF               	movwf	_yopWCap& (0+255),b
  2740  002618  0012               	return	
  2741  00261A                     __end_of_update_state:
  2742                           	opt stack 0
  2743                           tblptru	equ	0xFF8
  2744                           tblptrh	equ	0xFF7
  2745                           tblptrl	equ	0xFF6
  2746                           tablat	equ	0xFF5
  2747                           intcon	equ	0xFF2
  2748                           intcon2	equ	0xFF1
  2749                           intcon3	equ	0xFF0
  2750                           postinc0	equ	0xFEE
  2751                           wreg	equ	0xFE8
  2752                           postinc1	equ	0xFE6
  2753                           postdec1	equ	0xFE5
  2754                           fsr1h	equ	0xFE2
  2755                           fsr1l	equ	0xFE1
  2756                           postinc2	equ	0xFDE
  2757                           postdec2	equ	0xFDD
  2758                           fsr2h	equ	0xFDA
  2759                           fsr2l	equ	0xFD9
  2760                           status	equ	0xFD8
  2761                           
  2762 ;; *************** function ___awdiv *****************
  2763 ;; Defined at:
  2764 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  2765 ;; Parameters:    Size  Location     Type
  2766 ;;  dividend        2    0[BANK0 ] int 
  2767 ;;  divisor         2    2[BANK0 ] int 
  2768 ;; Auto vars:     Size  Location     Type
  2769 ;;  quotient        2    6[BANK0 ] int 
  2770 ;;  sign            1    5[BANK0 ] unsigned char 
  2771 ;;  counter         1    4[BANK0 ] unsigned char 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;                  2    0[BANK0 ] int 
  2774 ;; Registers used:
  2775 ;;		wreg, status,2, status,0
  2776 ;; Tracked objects:
  2777 ;;		On entry : 0/0
  2778 ;;		On exit  : 0/0
  2779 ;;		Unchanged: 0/0
  2780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2781 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2782 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;Total ram usage:        8 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; Hardware stack levels required when called:    5
  2788 ;; This function calls:
  2789 ;;		Nothing
  2790 ;; This function is called by:
  2791 ;;		_update_state
  2792 ;; This function uses a non-reentrant model
  2793 ;;
  2794                           
  2795                           	psect	text2
  2796  002E6C                     __ptext2:
  2797                           	opt stack 0
  2798  002E6C                     ___awdiv:
  2799                           	opt stack 24
  2800                           
  2801                           ; BSR set to: 0
  2802                           ;incstack = 0
  2803  002E6C  0E00               	movlw	0
  2804  002E6E  0100               	movlb	0	; () banked
  2805  002E70  6F85               	movwf	___awdiv@sign& (0+255),b
  2806                           
  2807                           ; BSR set to: 0
  2808  002E72  0100               	movlb	0	; () banked
  2809  002E74  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2810  002E76  D008               	goto	l4972
  2811                           
  2812                           ; BSR set to: 0
  2813  002E78  0100               	movlb	0	; () banked
  2814  002E7A  6D82               	negf	___awdiv@divisor& (0+255),b
  2815  002E7C  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  2816  002E7E  B0D8               	btfsc	status,0,c
  2817  002E80  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  2818                           
  2819                           ; BSR set to: 0
  2820  002E82  0E01               	movlw	1
  2821  002E84  0100               	movlb	0	; () banked
  2822  002E86  6F85               	movwf	___awdiv@sign& (0+255),b
  2823  002E88                     l4972:
  2824                           
  2825                           ; BSR set to: 0
  2826  002E88  0100               	movlb	0	; () banked
  2827  002E8A  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  2828  002E8C  D008               	goto	l4978
  2829                           
  2830                           ; BSR set to: 0
  2831  002E8E  0100               	movlb	0	; () banked
  2832  002E90  6D80               	negf	___awdiv@dividend& (0+255),b
  2833  002E92  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  2834  002E94  B0D8               	btfsc	status,0,c
  2835  002E96  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  2836                           
  2837                           ; BSR set to: 0
  2838  002E98  0E01               	movlw	1
  2839  002E9A  0100               	movlb	0	; () banked
  2840  002E9C  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  2841  002E9E                     l4978:
  2842                           
  2843                           ; BSR set to: 0
  2844  002E9E  0E00               	movlw	0
  2845  002EA0  0100               	movlb	0	; () banked
  2846  002EA2  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  2847  002EA4  0E00               	movlw	0
  2848  002EA6  6F86               	movwf	___awdiv@quotient& (0+255),b
  2849                           
  2850                           ; BSR set to: 0
  2851  002EA8  0100               	movlb	0	; () banked
  2852  002EAA  5182               	movf	___awdiv@divisor& (0+255),w,b
  2853  002EAC  0100               	movlb	0	; () banked
  2854  002EAE  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  2855  002EB0  B4D8               	btfsc	status,2,c
  2856  002EB2  D02C               	goto	l5000
  2857                           
  2858                           ; BSR set to: 0
  2859  002EB4  0E01               	movlw	1
  2860  002EB6  0100               	movlb	0	; () banked
  2861  002EB8  6F84               	movwf	___awdiv@counter& (0+255),b
  2862  002EBA  D006               	goto	l4986
  2863  002EBC                     l4984:
  2864                           
  2865                           ; BSR set to: 0
  2866  002EBC  0100               	movlb	0	; () banked
  2867  002EBE  90D8               	bcf	status,0,c
  2868  002EC0  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  2869  002EC2  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  2870  002EC4  0100               	movlb	0	; () banked
  2871  002EC6  2B84               	incf	___awdiv@counter& (0+255),f,b
  2872  002EC8                     l4986:
  2873                           
  2874                           ; BSR set to: 0
  2875  002EC8  0100               	movlb	0	; () banked
  2876  002ECA  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2877  002ECC  D7F7               	goto	l4984
  2878  002ECE                     l4988:
  2879                           
  2880                           ; BSR set to: 0
  2881  002ECE  0100               	movlb	0	; () banked
  2882  002ED0  90D8               	bcf	status,0,c
  2883  002ED2  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  2884  002ED4  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  2885                           
  2886                           ; BSR set to: 0
  2887  002ED6  0100               	movlb	0	; () banked
  2888  002ED8  5182               	movf	___awdiv@divisor& (0+255),w,b
  2889  002EDA  0100               	movlb	0	; () banked
  2890  002EDC  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  2891  002EDE  0100               	movlb	0	; () banked
  2892  002EE0  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2893  002EE2  0100               	movlb	0	; () banked
  2894  002EE4  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  2895  002EE6  A0D8               	btfss	status,0,c
  2896  002EE8  D00A               	goto	l4996
  2897                           
  2898                           ; BSR set to: 0
  2899  002EEA  0100               	movlb	0	; () banked
  2900  002EEC  5182               	movf	___awdiv@divisor& (0+255),w,b
  2901  002EEE  0100               	movlb	0	; () banked
  2902  002EF0  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  2903  002EF2  0100               	movlb	0	; () banked
  2904  002EF4  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2905  002EF6  0100               	movlb	0	; () banked
  2906  002EF8  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  2907                           
  2908                           ; BSR set to: 0
  2909  002EFA  0100               	movlb	0	; () banked
  2910  002EFC  8186               	bsf	___awdiv@quotient& (0+255),0,b
  2911  002EFE                     l4996:
  2912                           
  2913                           ; BSR set to: 0
  2914  002EFE  0100               	movlb	0	; () banked
  2915  002F00  90D8               	bcf	status,0,c
  2916  002F02  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  2917  002F04  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  2918                           
  2919                           ; BSR set to: 0
  2920  002F06  0100               	movlb	0	; () banked
  2921  002F08  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  2922  002F0A  D7E1               	goto	l4988
  2923  002F0C                     l5000:
  2924                           
  2925                           ; BSR set to: 0
  2926  002F0C  0100               	movlb	0	; () banked
  2927  002F0E  5185               	movf	___awdiv@sign& (0+255),w,b
  2928  002F10  0100               	movlb	0	; () banked
  2929  002F12  B4D8               	btfsc	status,2,c
  2930  002F14  D005               	goto	l5004
  2931                           
  2932                           ; BSR set to: 0
  2933  002F16  0100               	movlb	0	; () banked
  2934  002F18  6D86               	negf	___awdiv@quotient& (0+255),b
  2935  002F1A  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  2936  002F1C  B0D8               	btfsc	status,0,c
  2937  002F1E  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  2938  002F20                     l5004:
  2939                           
  2940                           ; BSR set to: 0
  2941  002F20  C086  F080         	movff	___awdiv@quotient,?___awdiv
  2942  002F24  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  2943  002F28  0012               	return	
  2944  002F2A                     __end_of___awdiv:
  2945                           	opt stack 0
  2946                           tblptru	equ	0xFF8
  2947                           tblptrh	equ	0xFF7
  2948                           tblptrl	equ	0xFF6
  2949                           tablat	equ	0xFF5
  2950                           intcon	equ	0xFF2
  2951                           intcon2	equ	0xFF1
  2952                           intcon3	equ	0xFF0
  2953                           postinc0	equ	0xFEE
  2954                           wreg	equ	0xFE8
  2955                           postinc1	equ	0xFE6
  2956                           postdec1	equ	0xFE5
  2957                           fsr1h	equ	0xFE2
  2958                           fsr1l	equ	0xFE1
  2959                           postinc2	equ	0xFDE
  2960                           postdec2	equ	0xFDD
  2961                           fsr2h	equ	0xFDA
  2962                           fsr2l	equ	0xFD9
  2963                           status	equ	0xFD8
  2964                           
  2965 ;; *************** function _update_lcd *****************
  2966 ;; Defined at:
  2967 ;;		line 153 in file "main.c"
  2968 ;; Parameters:    Size  Location     Type
  2969 ;;		None
  2970 ;; Auto vars:     Size  Location     Type
  2971 ;;  flag            2   43[BANK0 ] int 
  2972 ;;  j               2    0        int 
  2973 ;;  i               2    0        int 
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  1    wreg      void 
  2976 ;; Registers used:
  2977 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2978 ;; Tracked objects:
  2979 ;;		On entry : 0/0
  2980 ;;		On exit  : 0/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2984 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2985 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2986 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2987 ;;Total ram usage:        3 bytes
  2988 ;; Hardware stack levels used:    1
  2989 ;; Hardware stack levels required when called:    9
  2990 ;; This function calls:
  2991 ;;		_lcdInst
  2992 ;;		_printf
  2993 ;;		_strcmp
  2994 ;;		_strcpy
  2995 ;; This function is called by:
  2996 ;;		_main
  2997 ;; This function uses a non-reentrant model
  2998 ;;
  2999                           
  3000                           	psect	text3
  3001  002D6E                     __ptext3:
  3002                           	opt stack 0
  3003  002D6E                     _update_lcd:
  3004                           	opt stack 21
  3005                           
  3006                           ;main.c: 154: int flag=0;
  3007                           
  3008                           ; BSR set to: 0
  3009                           ;incstack = 0
  3010  002D6E  0E00               	movlw	0
  3011  002D70  0100               	movlb	0	; () banked
  3012  002D72  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  3013  002D74  0E00               	movlw	0
  3014  002D76  6FAB               	movwf	update_lcd@flag& (0+255),b
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;main.c: 155: int i,j;
  3018                           ;main.c: 157: if (strcmp(display0, ndisplay0)!=0){
  3019  002D78  0E26               	movlw	low _display0
  3020  002D7A  0100               	movlb	0	; () banked
  3021  002D7C  6F80               	movwf	strcmp@s1& (0+255),b
  3022  002D7E  0E01               	movlw	high _display0
  3023  002D80  0100               	movlb	0	; () banked
  3024  002D82  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  3025  002D84  0E4A               	movlw	low _ndisplay0
  3026  002D86  0100               	movlb	0	; () banked
  3027  002D88  6F82               	movwf	strcmp@s2& (0+255),b
  3028  002D8A  0E01               	movlw	high _ndisplay0
  3029  002D8C  0100               	movlb	0	; () banked
  3030  002D8E  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  3031  002D90  EC0E  F01A         	call	_strcmp	;wreg free
  3032  002D94  0100               	movlb	0	; () banked
  3033  002D96  5180               	movf	?_strcmp& (0+255),w,b
  3034  002D98  0100               	movlb	0	; () banked
  3035  002D9A  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  3036  002D9C  B4D8               	btfsc	status,2,c
  3037  002D9E  D013               	goto	l8054
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;main.c: 158: strcpy(display0,ndisplay0);
  3041  002DA0  0E26               	movlw	low _display0
  3042  002DA2  0100               	movlb	0	; () banked
  3043  002DA4  6F80               	movwf	strcpy@to& (0+255),b
  3044  002DA6  0E01               	movlw	high _display0
  3045  002DA8  0100               	movlb	0	; () banked
  3046  002DAA  6F81               	movwf	(strcpy@to+1)& (0+255),b
  3047  002DAC  0E4A               	movlw	low _ndisplay0
  3048  002DAE  0100               	movlb	0	; () banked
  3049  002DB0  6F82               	movwf	strcpy@from& (0+255),b
  3050  002DB2  0E01               	movlw	high _ndisplay0
  3051  002DB4  0100               	movlb	0	; () banked
  3052  002DB6  6F83               	movwf	(strcpy@from+1)& (0+255),b
  3053  002DB8  EC57  F01B         	call	_strcpy	;wreg free
  3054                           
  3055                           ;main.c: 159: flag=1;
  3056  002DBC  0E00               	movlw	0
  3057  002DBE  0100               	movlb	0	; () banked
  3058  002DC0  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  3059  002DC2  0E01               	movlw	1
  3060  002DC4  6FAB               	movwf	update_lcd@flag& (0+255),b
  3061  002DC6                     l8054:
  3062                           
  3063                           ; BSR set to: 0
  3064                           ;main.c: 160: }
  3065                           ;main.c: 161: if (strcmp(display1, ndisplay1)!=0){
  3066  002DC6  0E38               	movlw	low _display1
  3067  002DC8  0100               	movlb	0	; () banked
  3068  002DCA  6F80               	movwf	strcmp@s1& (0+255),b
  3069  002DCC  0E01               	movlw	high _display1
  3070  002DCE  0100               	movlb	0	; () banked
  3071  002DD0  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  3072  002DD2  0E5C               	movlw	low _ndisplay1
  3073  002DD4  0100               	movlb	0	; () banked
  3074  002DD6  6F82               	movwf	strcmp@s2& (0+255),b
  3075  002DD8  0E01               	movlw	high _ndisplay1
  3076  002DDA  0100               	movlb	0	; () banked
  3077  002DDC  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  3078  002DDE  EC0E  F01A         	call	_strcmp	;wreg free
  3079  002DE2  0100               	movlb	0	; () banked
  3080  002DE4  5180               	movf	?_strcmp& (0+255),w,b
  3081  002DE6  0100               	movlb	0	; () banked
  3082  002DE8  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  3083  002DEA  B4D8               	btfsc	status,2,c
  3084  002DEC  D013               	goto	l8060
  3085                           
  3086                           ; BSR set to: 0
  3087                           ;main.c: 162: strcpy(display1,ndisplay1);
  3088  002DEE  0E38               	movlw	low _display1
  3089  002DF0  0100               	movlb	0	; () banked
  3090  002DF2  6F80               	movwf	strcpy@to& (0+255),b
  3091  002DF4  0E01               	movlw	high _display1
  3092  002DF6  0100               	movlb	0	; () banked
  3093  002DF8  6F81               	movwf	(strcpy@to+1)& (0+255),b
  3094  002DFA  0E5C               	movlw	low _ndisplay1
  3095  002DFC  0100               	movlb	0	; () banked
  3096  002DFE  6F82               	movwf	strcpy@from& (0+255),b
  3097  002E00  0E01               	movlw	high _ndisplay1
  3098  002E02  0100               	movlb	0	; () banked
  3099  002E04  6F83               	movwf	(strcpy@from+1)& (0+255),b
  3100  002E06  EC57  F01B         	call	_strcpy	;wreg free
  3101                           
  3102                           ;main.c: 163: flag=1;
  3103  002E0A  0E00               	movlw	0
  3104  002E0C  0100               	movlb	0	; () banked
  3105  002E0E  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  3106  002E10  0E01               	movlw	1
  3107  002E12  6FAB               	movwf	update_lcd@flag& (0+255),b
  3108  002E14                     l8060:
  3109                           
  3110                           ; BSR set to: 0
  3111                           ;main.c: 164: }
  3112                           ;main.c: 165: if (flag){
  3113  002E14  0100               	movlb	0	; () banked
  3114  002E16  51AB               	movf	update_lcd@flag& (0+255),w,b
  3115  002E18  0100               	movlb	0	; () banked
  3116  002E1A  11AC               	iorwf	(update_lcd@flag+1)& (0+255),w,b
  3117  002E1C  B4D8               	btfsc	status,2,c
  3118  002E1E  0012               	return	
  3119                           
  3120                           ; BSR set to: 0
  3121                           ;main.c: 166: lcdInst(0x01);_delay((unsigned long)((10)*(10000000/4000.0)));;
  3122  002E20  0E01               	movlw	1
  3123  002E22  ECF8  F01B         	call	_lcdInst
  3124  002E26  0E21               	movlw	33
  3125  002E28  0100               	movlb	0	; () banked
  3126  002E2A  6FAA               	movwf	??_update_lcd& (0+255),b
  3127  002E2C  0E76               	movlw	118
  3128  002E2E                     u13187:
  3129  002E2E  2EE8               	decfsz	wreg,f,c
  3130  002E30  D7FE               	bra	u13187
  3131  002E32  2FAA               	decfsz	??_update_lcd& (0+255),f,b
  3132  002E34  D7FC               	bra	u13187
  3133  002E36  F000               	nop	
  3134                           
  3135                           ;main.c: 167: lcdInst(0b10000000);;
  3136  002E38  0E80               	movlw	128
  3137  002E3A  ECF8  F01B         	call	_lcdInst
  3138                           
  3139                           ;main.c: 168: printf(display0);
  3140  002E3E  0E26               	movlw	low _display0
  3141  002E40  0100               	movlb	0	; () banked
  3142  002E42  6FA2               	movwf	printf@f& (0+255),b
  3143  002E44  0E01               	movlw	high _display0
  3144  002E46  0100               	movlb	0	; () banked
  3145  002E48  6FA3               	movwf	(printf@f+1)& (0+255),b
  3146  002E4A  ECB6  F01A         	call	_printf	;wreg free
  3147                           
  3148                           ;main.c: 169: lcdInst(0b11000000);;
  3149  002E4E  0EC0               	movlw	192
  3150  002E50  ECF8  F01B         	call	_lcdInst
  3151                           
  3152                           ;main.c: 170: printf(display1);
  3153  002E54  0E38               	movlw	low _display1
  3154  002E56  0100               	movlb	0	; () banked
  3155  002E58  6FA2               	movwf	printf@f& (0+255),b
  3156  002E5A  0E01               	movlw	high _display1
  3157  002E5C  0100               	movlb	0	; () banked
  3158  002E5E  6FA3               	movwf	(printf@f+1)& (0+255),b
  3159  002E60  ECB6  F01A         	call	_printf	;wreg free
  3160                           
  3161                           ;main.c: 171: lcdInst(0b10010000);;
  3162  002E64  0E90               	movlw	144
  3163  002E66  ECF8  F01B         	call	_lcdInst
  3164  002E6A  0012               	return	
  3165  002E6C                     __end_of_update_lcd:
  3166                           	opt stack 0
  3167                           tblptru	equ	0xFF8
  3168                           tblptrh	equ	0xFF7
  3169                           tblptrl	equ	0xFF6
  3170                           tablat	equ	0xFF5
  3171                           intcon	equ	0xFF2
  3172                           intcon2	equ	0xFF1
  3173                           intcon3	equ	0xFF0
  3174                           postinc0	equ	0xFEE
  3175                           wreg	equ	0xFE8
  3176                           postinc1	equ	0xFE6
  3177                           postdec1	equ	0xFE5
  3178                           fsr1h	equ	0xFE2
  3179                           fsr1l	equ	0xFE1
  3180                           postinc2	equ	0xFDE
  3181                           postdec2	equ	0xFDD
  3182                           fsr2h	equ	0xFDA
  3183                           fsr2l	equ	0xFD9
  3184                           status	equ	0xFD8
  3185                           
  3186 ;; *************** function _strcpy *****************
  3187 ;; Defined at:
  3188 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  3189 ;; Parameters:    Size  Location     Type
  3190 ;;  to              2    0[BANK0 ] PTR unsigned char 
  3191 ;;		 -> display1(18), display0(18), 
  3192 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  3193 ;;		 -> ndisplay1(18), ndisplay0(18), 
  3194 ;; Auto vars:     Size  Location     Type
  3195 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  3196 ;;		 -> display1(18), display0(18), 
  3197 ;; Return value:  Size  Location     Type
  3198 ;;                  2    0[BANK0 ] PTR unsigned char 
  3199 ;; Registers used:
  3200 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3201 ;; Tracked objects:
  3202 ;;		On entry : 0/0
  3203 ;;		On exit  : 0/0
  3204 ;;		Unchanged: 0/0
  3205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3206 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3207 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3209 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3210 ;;Total ram usage:        6 bytes
  3211 ;; Hardware stack levels used:    1
  3212 ;; Hardware stack levels required when called:    5
  3213 ;; This function calls:
  3214 ;;		Nothing
  3215 ;; This function is called by:
  3216 ;;		_update_lcd
  3217 ;; This function uses a non-reentrant model
  3218 ;;
  3219                           
  3220                           	psect	text4
  3221  0036AE                     __ptext4:
  3222                           	opt stack 0
  3223  0036AE                     _strcpy:
  3224                           	opt stack 24
  3225                           
  3226                           ;incstack = 0
  3227  0036AE  C080  F084         	movff	strcpy@to,strcpy@cp
  3228  0036B2  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  3229  0036B6  D006               	goto	l4726
  3230  0036B8                     l4724:
  3231  0036B8  0100               	movlb	0	; () banked
  3232  0036BA  4B84               	infsnz	strcpy@cp& (0+255),f,b
  3233  0036BC  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  3234  0036BE  0100               	movlb	0	; () banked
  3235  0036C0  4B82               	infsnz	strcpy@from& (0+255),f,b
  3236  0036C2  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  3237  0036C4                     l4726:
  3238  0036C4  C082  FFD9         	movff	strcpy@from,fsr2l
  3239  0036C8  C083  FFDA         	movff	strcpy@from+1,fsr2h
  3240  0036CC  C084  FFE1         	movff	strcpy@cp,fsr1l
  3241  0036D0  C085  FFE2         	movff	strcpy@cp+1,fsr1h
  3242  0036D4  CFDF FFE7          	movff	indf2,indf1
  3243  0036D8  50E7               	movf	indf1,w,c
  3244  0036DA  B4D8               	btfsc	status,2,c
  3245  0036DC  0012               	return	
  3246  0036DE  D7EC               	goto	l4724
  3247  0036E0                     __end_of_strcpy:
  3248                           	opt stack 0
  3249                           tblptru	equ	0xFF8
  3250                           tblptrh	equ	0xFF7
  3251                           tblptrl	equ	0xFF6
  3252                           tablat	equ	0xFF5
  3253                           intcon	equ	0xFF2
  3254                           intcon2	equ	0xFF1
  3255                           intcon3	equ	0xFF0
  3256                           postinc0	equ	0xFEE
  3257                           wreg	equ	0xFE8
  3258                           indf1	equ	0xFE7
  3259                           postinc1	equ	0xFE6
  3260                           postdec1	equ	0xFE5
  3261                           fsr1h	equ	0xFE2
  3262                           fsr1l	equ	0xFE1
  3263                           indf2	equ	0xFDF
  3264                           postinc2	equ	0xFDE
  3265                           postdec2	equ	0xFDD
  3266                           fsr2h	equ	0xFDA
  3267                           fsr2l	equ	0xFD9
  3268                           status	equ	0xFD8
  3269                           
  3270 ;; *************** function _strcmp *****************
  3271 ;; Defined at:
  3272 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3275 ;;		 -> display1(18), display0(18), 
  3276 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  3277 ;;		 -> ndisplay1(18), ndisplay0(18), 
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;  r               1    5[BANK0 ] char 
  3280 ;; Return value:  Size  Location     Type
  3281 ;;                  2    0[BANK0 ] int 
  3282 ;; Registers used:
  3283 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3284 ;; Tracked objects:
  3285 ;;		On entry : 0/0
  3286 ;;		On exit  : 0/0
  3287 ;;		Unchanged: 0/0
  3288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3289 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3291 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3292 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;Total ram usage:        6 bytes
  3294 ;; Hardware stack levels used:    1
  3295 ;; Hardware stack levels required when called:    5
  3296 ;; This function calls:
  3297 ;;		Nothing
  3298 ;; This function is called by:
  3299 ;;		_update_lcd
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           	psect	text5
  3304  00341C                     __ptext5:
  3305                           	opt stack 0
  3306  00341C                     _strcmp:
  3307                           	opt stack 24
  3308                           
  3309                           ;incstack = 0
  3310  00341C  D006               	goto	l4714
  3311  00341E                     l4712:
  3312  00341E  0100               	movlb	0	; () banked
  3313  003420  4B80               	infsnz	strcmp@s1& (0+255),f,b
  3314  003422  2B81               	incf	(strcmp@s1+1)& (0+255),f,b
  3315  003424  0100               	movlb	0	; () banked
  3316  003426  4B82               	infsnz	strcmp@s2& (0+255),f,b
  3317  003428  2B83               	incf	(strcmp@s2+1)& (0+255),f,b
  3318  00342A                     l4714:
  3319  00342A  C080  FFD9         	movff	strcmp@s1,fsr2l
  3320  00342E  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3321  003432  50DF               	movf	indf2,w,c
  3322  003434  0100               	movlb	0	; () banked
  3323  003436  6F84               	movwf	??_strcmp& (0+255),b
  3324  003438  C082  FFD9         	movff	strcmp@s2,fsr2l
  3325  00343C  C083  FFDA         	movff	strcmp@s2+1,fsr2h
  3326  003440  50DF               	movf	indf2,w,c
  3327  003442  0800               	sublw	0
  3328  003444  0100               	movlb	0	; () banked
  3329  003446  2584               	addwf	??_strcmp& (0+255),w,b
  3330  003448  0100               	movlb	0	; () banked
  3331  00344A  6F85               	movwf	strcmp@r& (0+255),b
  3332  00344C  0100               	movlb	0	; () banked
  3333  00344E  5185               	movf	strcmp@r& (0+255),w,b
  3334  003450  A4D8               	btfss	status,2,c
  3335  003452  D007               	goto	l4718
  3336                           
  3337                           ; BSR set to: 0
  3338  003454  C080  FFD9         	movff	strcmp@s1,fsr2l
  3339  003458  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3340  00345C  50DF               	movf	indf2,w,c
  3341  00345E  A4D8               	btfss	status,2,c
  3342  003460  D7DE               	goto	l4712
  3343  003462                     l4718:
  3344                           
  3345                           ; BSR set to: 0
  3346  003462  0100               	movlb	0	; () banked
  3347  003464  5185               	movf	strcmp@r& (0+255),w,b
  3348  003466  0100               	movlb	0	; () banked
  3349  003468  6F80               	movwf	?_strcmp& (0+255),b
  3350  00346A  6B81               	clrf	(?_strcmp+1)& (0+255),b
  3351  00346C  BF80               	btfsc	?_strcmp& (0+255),7,b
  3352  00346E  0781               	decf	(?_strcmp+1)& (0+255),f,b
  3353  003470  0012               	return	
  3354  003472                     __end_of_strcmp:
  3355                           	opt stack 0
  3356                           tblptru	equ	0xFF8
  3357                           tblptrh	equ	0xFF7
  3358                           tblptrl	equ	0xFF6
  3359                           tablat	equ	0xFF5
  3360                           intcon	equ	0xFF2
  3361                           intcon2	equ	0xFF1
  3362                           intcon3	equ	0xFF0
  3363                           postinc0	equ	0xFEE
  3364                           wreg	equ	0xFE8
  3365                           indf1	equ	0xFE7
  3366                           postinc1	equ	0xFE6
  3367                           postdec1	equ	0xFE5
  3368                           fsr1h	equ	0xFE2
  3369                           fsr1l	equ	0xFE1
  3370                           indf2	equ	0xFDF
  3371                           postinc2	equ	0xFDE
  3372                           postdec2	equ	0xFDD
  3373                           fsr2h	equ	0xFDA
  3374                           fsr2l	equ	0xFD9
  3375                           status	equ	0xFD8
  3376                           
  3377 ;; *************** function _printf *****************
  3378 ;; Defined at:
  3379 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;  f               2   34[BANK0 ] PTR const unsigned char 
  3382 ;;		 -> STR_17(14), STR_16(15), STR_15(8), display1(18), 
  3383 ;;		 -> display0(18), 
  3384 ;; Auto vars:     Size  Location     Type
  3385 ;;  pb              4   38[BANK0 ] struct __prbuf
  3386 ;;  ap              2   36[BANK0 ] PTR void [1]
  3387 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
  3388 ;; Return value:  Size  Location     Type
  3389 ;;                  2   34[BANK0 ] int 
  3390 ;; Registers used:
  3391 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3392 ;; Tracked objects:
  3393 ;;		On entry : 0/0
  3394 ;;		On exit  : 0/0
  3395 ;;		Unchanged: 0/0
  3396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3397 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3398 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3400 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3401 ;;Total ram usage:        8 bytes
  3402 ;; Hardware stack levels used:    1
  3403 ;; Hardware stack levels required when called:    8
  3404 ;; This function calls:
  3405 ;;		__doprnt
  3406 ;; This function is called by:
  3407 ;;		_update_lcd
  3408 ;; This function uses a non-reentrant model
  3409 ;;
  3410                           
  3411                           	psect	text6
  3412  00356C                     __ptext6:
  3413                           	opt stack 0
  3414  00356C                     _printf:
  3415                           	opt stack 21
  3416                           
  3417                           ; BSR set to: 0
  3418                           ;incstack = 0
  3419  00356C  0E00               	movlw	0
  3420  00356E  0100               	movlb	0	; () banked
  3421  003570  6FA6               	movwf	printf@pb& (0+255),b
  3422  003572  0E00               	movlw	0
  3423  003574  0100               	movlb	0	; () banked
  3424  003576  6FA7               	movwf	(printf@pb+1)& (0+255),b
  3425  003578  0EC6               	movlw	low _putch
  3426  00357A  0100               	movlb	0	; () banked
  3427  00357C  6FA8               	movwf	(printf@pb+2)& (0+255),b
  3428  00357E  0E37               	movlw	high _putch
  3429  003580  0100               	movlb	0	; () banked
  3430  003582  6FA9               	movwf	(printf@pb+3)& (0+255),b
  3431  003584  0EA4               	movlw	low (?_printf+2)
  3432  003586  0100               	movlb	0	; () banked
  3433  003588  6FA4               	movwf	printf@ap& (0+255),b
  3434  00358A  0E00               	movlw	high (?_printf+2)
  3435  00358C  0100               	movlb	0	; () banked
  3436  00358E  6FA5               	movwf	(printf@ap+1)& (0+255),b
  3437                           
  3438                           ; BSR set to: 0
  3439                           ;	Return value of _printf is never used
  3440  003590  0EA6               	movlw	low printf@pb
  3441  003592  0100               	movlb	0	; () banked
  3442  003594  6F8C               	movwf	__doprnt@pb& (0+255),b
  3443  003596  0E00               	movlw	high printf@pb
  3444  003598  0100               	movlb	0	; () banked
  3445  00359A  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  3446  00359C  C0A2  F08E         	movff	printf@f,__doprnt@f
  3447  0035A0  C0A3  F08F         	movff	printf@f+1,__doprnt@f+1
  3448  0035A4  0EA4               	movlw	low printf@ap
  3449  0035A6  0100               	movlb	0	; () banked
  3450  0035A8  6F90               	movwf	__doprnt@ap& (0+255),b
  3451  0035AA  0E00               	movlw	high printf@ap
  3452  0035AC  0100               	movlb	0	; () banked
  3453  0035AE  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  3454  0035B0  EC09  F000         	call	__doprnt	;wreg free
  3455  0035B4  0012               	return	
  3456  0035B6                     __end_of_printf:
  3457                           	opt stack 0
  3458                           tblptru	equ	0xFF8
  3459                           tblptrh	equ	0xFF7
  3460                           tblptrl	equ	0xFF6
  3461                           tablat	equ	0xFF5
  3462                           intcon	equ	0xFF2
  3463                           intcon2	equ	0xFF1
  3464                           intcon3	equ	0xFF0
  3465                           postinc0	equ	0xFEE
  3466                           wreg	equ	0xFE8
  3467                           indf1	equ	0xFE7
  3468                           postinc1	equ	0xFE6
  3469                           postdec1	equ	0xFE5
  3470                           fsr1h	equ	0xFE2
  3471                           fsr1l	equ	0xFE1
  3472                           indf2	equ	0xFDF
  3473                           postinc2	equ	0xFDE
  3474                           postdec2	equ	0xFDD
  3475                           fsr2h	equ	0xFDA
  3476                           fsr2l	equ	0xFD9
  3477                           status	equ	0xFD8
  3478                           
  3479 ;; *************** function _update_display *****************
  3480 ;; Defined at:
  3481 ;;		line 193 in file "main.c"
  3482 ;; Parameters:    Size  Location     Type
  3483 ;;		None
  3484 ;; Auto vars:     Size  Location     Type
  3485 ;;  discretize_c    2    0        int 
  3486 ;; Return value:  Size  Location     Type
  3487 ;;                  1    wreg      void 
  3488 ;; Registers used:
  3489 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3490 ;; Tracked objects:
  3491 ;;		On entry : 0/0
  3492 ;;		On exit  : 0/0
  3493 ;;		Unchanged: 0/0
  3494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3495 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3498 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3499 ;;Total ram usage:        0 bytes
  3500 ;; Hardware stack levels used:    1
  3501 ;; Hardware stack levels required when called:   10
  3502 ;; This function calls:
  3503 ;;		__measure
  3504 ;;		_display_menu
  3505 ;;		_sprintf
  3506 ;; This function is called by:
  3507 ;;		_main
  3508 ;; This function uses a non-reentrant model
  3509 ;;
  3510                           
  3511                           	psect	text7
  3512  002C3A                     __ptext7:
  3513                           	opt stack 0
  3514  002C3A                     _update_display:
  3515                           	opt stack 20
  3516                           
  3517                           ;main.c: 194: switch(state)
  3518                           
  3519                           ;incstack = 0
  3520  002C3A  D084               	goto	l8044
  3521  002C3C                     l8034:
  3522                           
  3523                           ;main.c: 197: sprintf(ndisplay0,"%02x/%02x/%02x PUSH TO", time[6],time[5],time[4]);
  3524  002C3C  0E4A               	movlw	low _ndisplay0
  3525  002C3E  0100               	movlb	0	; () banked
  3526  002C40  6FA2               	movwf	sprintf@wh& (0+255),b
  3527  002C42  0E01               	movlw	high _ndisplay0
  3528  002C44  0100               	movlb	0	; () banked
  3529  002C46  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3530  002C48  0E0F               	movlw	low STR_1
  3531  002C4A  0100               	movlb	0	; () banked
  3532  002C4C  6FA4               	movwf	sprintf@f& (0+255),b
  3533  002C4E  0EFF               	movlw	high STR_1
  3534  002C50  0100               	movlb	0	; () banked
  3535  002C52  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3536  002C54  C0C8  F0A6         	movff	_time+6,?_sprintf+4
  3537  002C58  0100               	movlb	0	; () banked
  3538  002C5A  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3539  002C5C  C0C7  F0A8         	movff	_time+5,?_sprintf+6
  3540  002C60  0100               	movlb	0	; () banked
  3541  002C62  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3542  002C64  C0C6  F0AA         	movff	_time+4,?_sprintf+8
  3543  002C68  0100               	movlb	0	; () banked
  3544  002C6A  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3545  002C6C  EC64  F01A         	call	_sprintf	;wreg free
  3546                           
  3547                           ;main.c: 198: sprintf(ndisplay1,"%02x:%02x:%02x   START", time[2],time[1],time[0]);
  3548  002C70  0E5C               	movlw	low _ndisplay1
  3549  002C72  0100               	movlb	0	; () banked
  3550  002C74  6FA2               	movwf	sprintf@wh& (0+255),b
  3551  002C76  0E01               	movlw	high _ndisplay1
  3552  002C78  0100               	movlb	0	; () banked
  3553  002C7A  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3554  002C7C  0E26               	movlw	low STR_2
  3555  002C7E  0100               	movlb	0	; () banked
  3556  002C80  6FA4               	movwf	sprintf@f& (0+255),b
  3557  002C82  0EFF               	movlw	high STR_2
  3558  002C84  0100               	movlb	0	; () banked
  3559  002C86  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3560  002C88  C0C4  F0A6         	movff	_time+2,?_sprintf+4
  3561  002C8C  0100               	movlb	0	; () banked
  3562  002C8E  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3563  002C90  C0C3  F0A8         	movff	_time+1,?_sprintf+6
  3564  002C94  0100               	movlb	0	; () banked
  3565  002C96  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3566  002C98  C0C2  F0AA         	movff	_time,?_sprintf+8
  3567  002C9C  0100               	movlb	0	; () banked
  3568  002C9E  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3569  002CA0  EC64  F01A         	call	_sprintf	;wreg free
  3570                           
  3571                           ;main.c: 199: break;
  3572  002CA4  0012               	return	
  3573  002CA6                     l8036:
  3574                           
  3575                           ;main.c: 201: case 'l':
  3576                           ;main.c: 202: case 'c':
  3577                           ;main.c: 203: case 'e':
  3578                           ;main.c: 204: display_menu();
  3579  002CA6  ECDD  F00B         	call	_display_menu	;wreg free
  3580                           
  3581                           ;main.c: 205: break;
  3582  002CAA  0012               	return	
  3583  002CAC                     l8038:
  3584                           
  3585                           ;main.c: 211: sprintf(ndisplay0, "RC:%d MC:%d", release_counter, measure_counter);
  3586  002CAC  0E4A               	movlw	low _ndisplay0
  3587  002CAE  0100               	movlb	0	; () banked
  3588  002CB0  6FA2               	movwf	sprintf@wh& (0+255),b
  3589  002CB2  0E01               	movlw	high _ndisplay0
  3590  002CB4  0100               	movlb	0	; () banked
  3591  002CB6  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3592  002CB8  0ED9               	movlw	low STR_3
  3593  002CBA  0100               	movlb	0	; () banked
  3594  002CBC  6FA4               	movwf	sprintf@f& (0+255),b
  3595  002CBE  0EFF               	movlw	high STR_3
  3596  002CC0  0100               	movlb	0	; () banked
  3597  002CC2  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3598  002CC4  C0D5  F0A6         	movff	_release_counter,?_sprintf+4
  3599  002CC8  C0D6  F0A7         	movff	_release_counter+1,?_sprintf+5
  3600  002CCC  C0D3  F0A8         	movff	_measure_counter,?_sprintf+6
  3601  002CD0  C0D4  F0A9         	movff	_measure_counter+1,?_sprintf+7
  3602  002CD4  EC64  F01A         	call	_sprintf	;wreg free
  3603                           
  3604                           ;main.c: 212: sprintf(ndisplay1, "DC:%d MEAS:%d", discretize_counter, _measure());
  3605  002CD8  0E5C               	movlw	low _ndisplay1
  3606  002CDA  0100               	movlb	0	; () banked
  3607  002CDC  6FA2               	movwf	sprintf@wh& (0+255),b
  3608  002CDE  0E01               	movlw	high _ndisplay1
  3609  002CE0  0100               	movlb	0	; () banked
  3610  002CE2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3611  002CE4  0EBD               	movlw	low STR_4
  3612  002CE6  0100               	movlb	0	; () banked
  3613  002CE8  6FA4               	movwf	sprintf@f& (0+255),b
  3614  002CEA  0EFF               	movlw	high STR_4
  3615  002CEC  0100               	movlb	0	; () banked
  3616  002CEE  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3617  002CF0  C0CD  F0A6         	movff	_discretize_counter,?_sprintf+4
  3618  002CF4  C0CE  F0A7         	movff	_discretize_counter+1,?_sprintf+5
  3619  002CF8  EC2A  F00E         	call	__measure	;wreg free
  3620  002CFC  C086  F0A8         	movff	?__measure,?_sprintf+6
  3621  002D00  C087  F0A9         	movff	?__measure+1,?_sprintf+7
  3622  002D04  EC64  F01A         	call	_sprintf	;wreg free
  3623                           
  3624                           ;main.c: 213: int discretize_counter;
  3625                           ;main.c: 215: break;
  3626  002D08  0012               	return	
  3627  002D0A                     l8040:
  3628                           
  3629                           ;main.c: 217: sprintf(ndisplay0, "ERROR");
  3630  002D0A  0E4A               	movlw	low _ndisplay0
  3631  002D0C  0100               	movlb	0	; () banked
  3632  002D0E  6FA2               	movwf	sprintf@wh& (0+255),b
  3633  002D10  0E01               	movlw	high _ndisplay0
  3634  002D12  0100               	movlb	0	; () banked
  3635  002D14  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3636  002D16  0EF4               	movlw	low STR_5
  3637  002D18  0100               	movlb	0	; () banked
  3638  002D1A  6FA4               	movwf	sprintf@f& (0+255),b
  3639  002D1C  0EFF               	movlw	high STR_5
  3640  002D1E  0100               	movlb	0	; () banked
  3641  002D20  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3642  002D22  EC64  F01A         	call	_sprintf	;wreg free
  3643                           
  3644                           ;main.c: 218: sprintf(ndisplay1, "EMERGENCY STOP");
  3645  002D26  0E5C               	movlw	low _ndisplay1
  3646  002D28  0100               	movlb	0	; () banked
  3647  002D2A  6FA2               	movwf	sprintf@wh& (0+255),b
  3648  002D2C  0E01               	movlw	high _ndisplay1
  3649  002D2E  0100               	movlb	0	; () banked
  3650  002D30  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3651  002D32  0E9F               	movlw	low STR_6
  3652  002D34  0100               	movlb	0	; () banked
  3653  002D36  6FA4               	movwf	sprintf@f& (0+255),b
  3654  002D38  0EFF               	movlw	high STR_6
  3655  002D3A  0100               	movlb	0	; () banked
  3656  002D3C  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3657  002D3E  EC64  F01A         	call	_sprintf	;wreg free
  3658                           
  3659                           ;main.c: 221: }
  3660                           
  3661                           ;main.c: 219: break;
  3662  002D42  0012               	return	
  3663  002D44                     l8044:
  3664  002D44  0100               	movlb	0	; () banked
  3665  002D46  51EE               	movf	_state& (0+255),w,b
  3666                           
  3667                           ; Switch size 1, requested type "space"
  3668                           ; Number of cases is 6, Range of values is 99 to 115
  3669                           ; switch strategies available:
  3670                           ; Name         Instructions Cycles
  3671                           ; simple_byte           19    10 (average)
  3672                           ;	Chosen strategy is simple_byte
  3673  002D48  0A63               	xorlw	99	; case 99
  3674  002D4A  B4D8               	btfsc	status,2,c
  3675  002D4C  D7AC               	goto	l8036
  3676  002D4E  0A06               	xorlw	6	; case 101
  3677  002D50  B4D8               	btfsc	status,2,c
  3678  002D52  D7A9               	goto	l8036
  3679  002D54  0A09               	xorlw	9	; case 108
  3680  002D56  B4D8               	btfsc	status,2,c
  3681  002D58  D7A6               	goto	l8036
  3682  002D5A  0A01               	xorlw	1	; case 109
  3683  002D5C  B4D8               	btfsc	status,2,c
  3684  002D5E  D7A3               	goto	l8036
  3685  002D60  0A1F               	xorlw	31	; case 114
  3686  002D62  B4D8               	btfsc	status,2,c
  3687  002D64  D76B               	goto	l8034
  3688  002D66  0A01               	xorlw	1	; case 115
  3689  002D68  B4D8               	btfsc	status,2,c
  3690  002D6A  D7A0               	goto	l8038
  3691  002D6C  D7CE               	goto	l8040
  3692  002D6E                     __end_of_update_display:
  3693                           	opt stack 0
  3694                           tblptru	equ	0xFF8
  3695                           tblptrh	equ	0xFF7
  3696                           tblptrl	equ	0xFF6
  3697                           tablat	equ	0xFF5
  3698                           intcon	equ	0xFF2
  3699                           intcon2	equ	0xFF1
  3700                           intcon3	equ	0xFF0
  3701                           postinc0	equ	0xFEE
  3702                           wreg	equ	0xFE8
  3703                           indf1	equ	0xFE7
  3704                           postinc1	equ	0xFE6
  3705                           postdec1	equ	0xFE5
  3706                           fsr1h	equ	0xFE2
  3707                           fsr1l	equ	0xFE1
  3708                           indf2	equ	0xFDF
  3709                           postinc2	equ	0xFDE
  3710                           postdec2	equ	0xFDD
  3711                           fsr2h	equ	0xFDA
  3712                           fsr2l	equ	0xFD9
  3713                           status	equ	0xFD8
  3714                           
  3715 ;; *************** function _display_menu *****************
  3716 ;; Defined at:
  3717 ;;		line 267 in file "main.c"
  3718 ;; Parameters:    Size  Location     Type
  3719 ;;		None
  3720 ;; Auto vars:     Size  Location     Type
  3721 ;;  menuIndexPtr    2   63[BANK0 ] PTR int 
  3722 ;;		 -> endIndex(2), creditIndex(2), logIndex(2), menuIndex(2), 
  3723 ;;  menuSelectio    2   59[BANK0 ] int 
  3724 ;;  menuSizePtr     2   57[BANK0 ] PTR int 
  3725 ;;		 -> endSize(2), menuSize(2), creditSize(2), events(2), 
  3726 ;;  selector        2   55[BANK0 ] int 
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      void 
  3729 ;; Registers used:
  3730 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3737 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3738 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3739 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3740 ;;Total ram usage:       15 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    9
  3743 ;; This function calls:
  3744 ;;		___wmul
  3745 ;;		_sprintf
  3746 ;; This function is called by:
  3747 ;;		_update_display
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           	psect	text8
  3752  0017BA                     __ptext8:
  3753                           	opt stack 0
  3754  0017BA                     _display_menu:
  3755                           	opt stack 20
  3756                           
  3757                           ;main.c: 268: int menuSelection;
  3758                           ;main.c: 269: int* menuIndexPtr;
  3759                           ;main.c: 270: int* menuSizePtr;
  3760                           ;main.c: 271: int selector=0;
  3761                           
  3762                           ;incstack = 0
  3763  0017BA  0E00               	movlw	0
  3764  0017BC  0100               	movlb	0	; () banked
  3765  0017BE  6FB8               	movwf	(display_menu@selector+1)& (0+255),b
  3766  0017C0  0E00               	movlw	0
  3767  0017C2  6FB7               	movwf	display_menu@selector& (0+255),b
  3768                           
  3769                           ;main.c: 272: switch(state)
  3770  0017C4  D049               	goto	l7728
  3771  0017C6                     l7704:
  3772                           
  3773                           ; BSR set to: 0
  3774                           ;main.c: 275: menuSelection=1;
  3775  0017C6  0E00               	movlw	0
  3776  0017C8  0100               	movlb	0	; () banked
  3777  0017CA  6FBC               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3778  0017CC  0E01               	movlw	1
  3779  0017CE  6FBB               	movwf	display_menu@menuSelection& (0+255),b
  3780                           
  3781                           ; BSR set to: 0
  3782                           ;main.c: 276: menuIndexPtr=&logIndex;
  3783  0017D0  0EF9               	movlw	low _logIndex
  3784  0017D2  0100               	movlb	0	; () banked
  3785  0017D4  6FBF               	movwf	display_menu@menuIndexPtr& (0+255),b
  3786  0017D6  0E00               	movlw	high _logIndex
  3787  0017D8  0100               	movlb	0	; () banked
  3788  0017DA  6FC0               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3789                           
  3790                           ; BSR set to: 0
  3791                           ;main.c: 277: menuSizePtr=&events;
  3792  0017DC  0EF7               	movlw	low _events
  3793  0017DE  0100               	movlb	0	; () banked
  3794  0017E0  6FB9               	movwf	display_menu@menuSizePtr& (0+255),b
  3795  0017E2  0E00               	movlw	high _events
  3796  0017E4  D036               	goto	L2
  3797  0017E6                     l7710:
  3798                           
  3799                           ; BSR set to: 0
  3800                           ;main.c: 280: menuSelection=2;
  3801  0017E6  0E00               	movlw	0
  3802  0017E8  0100               	movlb	0	; () banked
  3803  0017EA  6FBC               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3804  0017EC  0E02               	movlw	2
  3805  0017EE  6FBB               	movwf	display_menu@menuSelection& (0+255),b
  3806                           
  3807                           ; BSR set to: 0
  3808                           ;main.c: 281: menuIndexPtr=&creditIndex;
  3809  0017F0  0EEF               	movlw	low _creditIndex
  3810  0017F2  0100               	movlb	0	; () banked
  3811  0017F4  6FBF               	movwf	display_menu@menuIndexPtr& (0+255),b
  3812  0017F6  0E00               	movlw	high _creditIndex
  3813  0017F8  0100               	movlb	0	; () banked
  3814  0017FA  6FC0               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3815                           
  3816                           ; BSR set to: 0
  3817                           ;main.c: 282: menuSizePtr=&creditSize;
  3818  0017FC  0EF1               	movlw	low _creditSize
  3819  0017FE  0100               	movlb	0	; () banked
  3820  001800  6FB9               	movwf	display_menu@menuSizePtr& (0+255),b
  3821  001802  0E00               	movlw	high _creditSize
  3822  001804  D026               	goto	L2
  3823  001806                     l7716:
  3824                           
  3825                           ; BSR set to: 0
  3826                           ;main.c: 286: menuSelection=0;
  3827  001806  0E00               	movlw	0
  3828  001808  0100               	movlb	0	; () banked
  3829  00180A  6FBC               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3830  00180C  0E00               	movlw	0
  3831  00180E  6FBB               	movwf	display_menu@menuSelection& (0+255),b
  3832                           
  3833                           ; BSR set to: 0
  3834                           ;main.c: 287: menuIndexPtr=&menuIndex;
  3835  001810  0EFB               	movlw	low _menuIndex
  3836  001812  0100               	movlb	0	; () banked
  3837  001814  6FBF               	movwf	display_menu@menuIndexPtr& (0+255),b
  3838  001816  0E00               	movlw	high _menuIndex
  3839  001818  0100               	movlb	0	; () banked
  3840  00181A  6FC0               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3841                           
  3842                           ; BSR set to: 0
  3843                           ;main.c: 288: menuSizePtr=&menuSize;
  3844  00181C  0EFD               	movlw	low _menuSize
  3845  00181E  0100               	movlb	0	; () banked
  3846  001820  6FB9               	movwf	display_menu@menuSizePtr& (0+255),b
  3847  001822  0E00               	movlw	high _menuSize
  3848  001824  0100               	movlb	0	; () banked
  3849  001826  6FBA               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  3850                           
  3851                           ;main.c: 289: selector=1;
  3852  001828  0E00               	movlw	0
  3853  00182A  0100               	movlb	0	; () banked
  3854  00182C  6FB8               	movwf	(display_menu@selector+1)& (0+255),b
  3855  00182E  0E01               	movlw	1
  3856  001830  6FB7               	movwf	display_menu@selector& (0+255),b
  3857                           
  3858                           ;main.c: 290: break;
  3859  001832  D01F               	goto	l7730
  3860  001834                     l7722:
  3861                           
  3862                           ; BSR set to: 0
  3863                           ;main.c: 292: menuSelection=3;
  3864  001834  0E00               	movlw	0
  3865  001836  0100               	movlb	0	; () banked
  3866  001838  6FBC               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3867  00183A  0E03               	movlw	3
  3868  00183C  6FBB               	movwf	display_menu@menuSelection& (0+255),b
  3869                           
  3870                           ; BSR set to: 0
  3871                           ;main.c: 293: menuIndexPtr=&endIndex;
  3872  00183E  0EF3               	movlw	low _endIndex
  3873  001840  0100               	movlb	0	; () banked
  3874  001842  6FBF               	movwf	display_menu@menuIndexPtr& (0+255),b
  3875  001844  0E00               	movlw	high _endIndex
  3876  001846  0100               	movlb	0	; () banked
  3877  001848  6FC0               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3878                           
  3879                           ; BSR set to: 0
  3880                           ;main.c: 294: menuSizePtr=&endSize;
  3881  00184A  0EF5               	movlw	low _endSize
  3882  00184C  0100               	movlb	0	; () banked
  3883  00184E  6FB9               	movwf	display_menu@menuSizePtr& (0+255),b
  3884  001850  0E00               	movlw	high _endSize
  3885  001852                     L2:
  3886  001852  0100               	movlb	0	; () banked
  3887  001854  6FBA               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  3888                           
  3889                           ;main.c: 295: }
  3890  001856  D00D               	goto	l7730
  3891  001858                     l7728:
  3892                           
  3893                           ; BSR set to: 0
  3894  001858  0100               	movlb	0	; () banked
  3895  00185A  51EE               	movf	_state& (0+255),w,b
  3896                           
  3897                           ; Switch size 1, requested type "space"
  3898                           ; Number of cases is 4, Range of values is 99 to 109
  3899                           ; switch strategies available:
  3900                           ; Name         Instructions Cycles
  3901                           ; simple_byte           13     7 (average)
  3902                           ;	Chosen strategy is simple_byte
  3903  00185C  0A63               	xorlw	99	; case 99
  3904  00185E  B4D8               	btfsc	status,2,c
  3905  001860  D7C2               	goto	l7710
  3906  001862  0A06               	xorlw	6	; case 101
  3907  001864  B4D8               	btfsc	status,2,c
  3908  001866  D7E6               	goto	l7722
  3909  001868  0A09               	xorlw	9	; case 108
  3910  00186A  B4D8               	btfsc	status,2,c
  3911  00186C  D7AC               	goto	l7704
  3912  00186E  0A01               	xorlw	1	; case 109
  3913  001870  D7CA               	goto	l7716
  3914  001872                     l7730:
  3915                           
  3916                           ; BSR set to: 0
  3917                           ;main.c: 296: if (selector){
  3918  001872  0100               	movlb	0	; () banked
  3919  001874  51B7               	movf	display_menu@selector& (0+255),w,b
  3920  001876  0100               	movlb	0	; () banked
  3921  001878  11B8               	iorwf	(display_menu@selector+1)& (0+255),w,b
  3922  00187A  B4D8               	btfsc	status,2,c
  3923  00187C  D14A               	goto	l7746
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;main.c: 297: if (*menuIndexPtr<*menuSizePtr){
  3927  00187E  C0B9  FFD9         	movff	display_menu@menuSizePtr,fsr2l
  3928  001882  C0BA  FFDA         	movff	display_menu@menuSizePtr+1,fsr2h
  3929  001886  C0BF  FFE1         	movff	display_menu@menuIndexPtr,fsr1l
  3930  00188A  C0C0  FFE2         	movff	display_menu@menuIndexPtr+1,fsr1h
  3931  00188E  50DE               	movf	postinc2,w,c
  3932  001890  5CE6               	subwf	postinc1,w,c
  3933  001892  50E6               	movf	postinc1,w,c
  3934  001894  0A80               	xorlw	128
  3935  001896  0100               	movlb	0	; () banked
  3936  001898  6FB6               	movwf	(??_display_menu+4)& (0+255),b
  3937  00189A  50DE               	movf	postinc2,w,c
  3938  00189C  0A80               	xorlw	128
  3939  00189E  0100               	movlb	0	; () banked
  3940  0018A0  59B6               	subwfb	(??_display_menu+4)& (0+255),w,b
  3941  0018A2  B0D8               	btfsc	status,0,c
  3942  0018A4  D096               	goto	l7740
  3943                           
  3944                           ; BSR set to: 0
  3945                           ;main.c: 298: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  3946  0018A6  C0BB  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  3947  0018AA  C0BC  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  3948  0018AE  0E00               	movlw	0
  3949  0018B0  0100               	movlb	0	; () banked
  3950  0018B2  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3951  0018B4  0EB4               	movlw	180
  3952  0018B6  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3953  0018B8  EC21  F01B         	call	___wmul	;wreg free
  3954  0018BC  0E6E               	movlw	low _menu
  3955  0018BE  0100               	movlb	0	; () banked
  3956  0018C0  6FB2               	movwf	??_display_menu& (0+255),b
  3957  0018C2  0E01               	movlw	high _menu
  3958  0018C4  0100               	movlb	0	; () banked
  3959  0018C6  6FB3               	movwf	(??_display_menu+1)& (0+255),b
  3960  0018C8  0100               	movlb	0	; () banked
  3961  0018CA  5180               	movf	?___wmul& (0+255),w,b
  3962  0018CC  0100               	movlb	0	; () banked
  3963  0018CE  27B2               	addwf	??_display_menu& (0+255),f,b
  3964  0018D0  0100               	movlb	0	; () banked
  3965  0018D2  5181               	movf	(?___wmul+1)& (0+255),w,b
  3966  0018D4  0100               	movlb	0	; () banked
  3967  0018D6  23B3               	addwfc	(??_display_menu+1)& (0+255),f,b
  3968  0018D8  C0BF  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  3969  0018DC  C0C0  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  3970  0018E0  CFDE F0B4          	movff	postinc2,??_display_menu+2
  3971  0018E4  CFDD F0B5          	movff	postdec2,??_display_menu+3
  3972  0018E8  0EFF               	movlw	255
  3973  0018EA  0100               	movlb	0	; () banked
  3974  0018EC  25B4               	addwf	(??_display_menu+2)& (0+255),w,b
  3975  0018EE  0100               	movlb	0	; () banked
  3976  0018F0  6F80               	movwf	___wmul@multiplier& (0+255),b
  3977  0018F2  0EFF               	movlw	255
  3978  0018F4  0100               	movlb	0	; () banked
  3979  0018F6  21B5               	addwfc	(??_display_menu+3)& (0+255),w,b
  3980  0018F8  0100               	movlb	0	; () banked
  3981  0018FA  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  3982  0018FC  0E00               	movlw	0
  3983  0018FE  0100               	movlb	0	; () banked
  3984  001900  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3985  001902  0E12               	movlw	18
  3986  001904  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3987  001906  EC21  F01B         	call	___wmul	;wreg free
  3988  00190A  0100               	movlb	0	; () banked
  3989  00190C  5180               	movf	?___wmul& (0+255),w,b
  3990  00190E  0100               	movlb	0	; () banked
  3991  001910  25B2               	addwf	??_display_menu& (0+255),w,b
  3992  001912  0100               	movlb	0	; () banked
  3993  001914  6FBD               	movwf	_display_menu$1148& (0+255),b
  3994  001916  0100               	movlb	0	; () banked
  3995  001918  5181               	movf	(?___wmul+1)& (0+255),w,b
  3996  00191A  0100               	movlb	0	; () banked
  3997  00191C  21B3               	addwfc	(??_display_menu+1)& (0+255),w,b
  3998  00191E  0100               	movlb	0	; () banked
  3999  001920  6FBE               	movwf	(_display_menu$1148+1)& (0+255),b
  4000                           
  4001                           ; BSR set to: 0
  4002                           ;main.c: 298: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4003  001922  0E4A               	movlw	low _ndisplay0
  4004  001924  0100               	movlb	0	; () banked
  4005  001926  6FA2               	movwf	sprintf@wh& (0+255),b
  4006  001928  0E01               	movlw	high _ndisplay0
  4007  00192A  0100               	movlb	0	; () banked
  4008  00192C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4009  00192E  0EFA               	movlw	low STR_11
  4010  001930  0100               	movlb	0	; () banked
  4011  001932  6FA4               	movwf	sprintf@f& (0+255),b
  4012  001934  0EFF               	movlw	high STR_11
  4013  001936  0100               	movlb	0	; () banked
  4014  001938  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4015  00193A  C0BD  F0A6         	movff	_display_menu$1148,?_sprintf+4
  4016  00193E  C0BE  F0A7         	movff	_display_menu$1148+1,?_sprintf+5
  4017  001942  0E00               	movlw	0
  4018  001944  0100               	movlb	0	; () banked
  4019  001946  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4020  001948  0E3C               	movlw	60
  4021  00194A  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4022  00194C  EC64  F01A         	call	_sprintf	;wreg free
  4023                           
  4024                           ;main.c: 299: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  4025  001950  C0BB  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4026  001954  C0BC  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4027  001958  0E00               	movlw	0
  4028  00195A  0100               	movlb	0	; () banked
  4029  00195C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4030  00195E  0EB4               	movlw	180
  4031  001960  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4032  001962  EC21  F01B         	call	___wmul	;wreg free
  4033  001966  0E6E               	movlw	low _menu
  4034  001968  0100               	movlb	0	; () banked
  4035  00196A  6FB2               	movwf	??_display_menu& (0+255),b
  4036  00196C  0E01               	movlw	high _menu
  4037  00196E  0100               	movlb	0	; () banked
  4038  001970  6FB3               	movwf	(??_display_menu+1)& (0+255),b
  4039  001972  0100               	movlb	0	; () banked
  4040  001974  5180               	movf	?___wmul& (0+255),w,b
  4041  001976  0100               	movlb	0	; () banked
  4042  001978  27B2               	addwf	??_display_menu& (0+255),f,b
  4043  00197A  0100               	movlb	0	; () banked
  4044  00197C  5181               	movf	(?___wmul+1)& (0+255),w,b
  4045  00197E  0100               	movlb	0	; () banked
  4046  001980  23B3               	addwfc	(??_display_menu+1)& (0+255),f,b
  4047  001982  C0BF  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4048  001986  C0C0  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4049  00198A  CFDE F080          	movff	postinc2,___wmul@multiplier
  4050  00198E  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  4051  001992  0E00               	movlw	0
  4052  001994  0100               	movlb	0	; () banked
  4053  001996  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4054  001998  0E12               	movlw	18
  4055  00199A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4056  00199C  EC21  F01B         	call	___wmul	;wreg free
  4057  0019A0  0100               	movlb	0	; () banked
  4058  0019A2  5180               	movf	?___wmul& (0+255),w,b
  4059  0019A4  0100               	movlb	0	; () banked
  4060  0019A6  25B2               	addwf	??_display_menu& (0+255),w,b
  4061  0019A8  0100               	movlb	0	; () banked
  4062  0019AA  6FBD               	movwf	_display_menu$1148& (0+255),b
  4063  0019AC  0100               	movlb	0	; () banked
  4064  0019AE  5181               	movf	(?___wmul+1)& (0+255),w,b
  4065  0019B0  0100               	movlb	0	; () banked
  4066  0019B2  21B3               	addwfc	(??_display_menu+1)& (0+255),w,b
  4067  0019B4  0100               	movlb	0	; () banked
  4068  0019B6  6FBE               	movwf	(_display_menu$1148+1)& (0+255),b
  4069                           
  4070                           ;main.c: 299: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  4071  0019B8  0E5C               	movlw	low _ndisplay1
  4072  0019BA  0100               	movlb	0	; () banked
  4073  0019BC  6FA2               	movwf	sprintf@wh& (0+255),b
  4074  0019BE  0E01               	movlw	high _ndisplay1
  4075  0019C0  0100               	movlb	0	; () banked
  4076  0019C2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4077  0019C4  C0BD  F0A4         	movff	_display_menu$1148,sprintf@f
  4078  0019C8  C0BE  F0A5         	movff	_display_menu$1148+1,sprintf@f+1
  4079  0019CC  EC64  F01A         	call	_sprintf	;wreg free
  4080                           
  4081                           ;main.c: 300: }
  4082  0019D0  0012               	return	
  4083  0019D2                     l7740:
  4084                           
  4085                           ;main.c: 301: else{
  4086                           ;main.c: 302: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  4087  0019D2  C0BB  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4088  0019D6  C0BC  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4089  0019DA  0E00               	movlw	0
  4090  0019DC  0100               	movlb	0	; () banked
  4091  0019DE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4092  0019E0  0EB4               	movlw	180
  4093  0019E2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4094  0019E4  EC21  F01B         	call	___wmul	;wreg free
  4095  0019E8  0E6E               	movlw	low _menu
  4096  0019EA  0100               	movlb	0	; () banked
  4097  0019EC  6FB2               	movwf	??_display_menu& (0+255),b
  4098  0019EE  0E01               	movlw	high _menu
  4099  0019F0  0100               	movlb	0	; () banked
  4100  0019F2  6FB3               	movwf	(??_display_menu+1)& (0+255),b
  4101  0019F4  0100               	movlb	0	; () banked
  4102  0019F6  5180               	movf	?___wmul& (0+255),w,b
  4103  0019F8  0100               	movlb	0	; () banked
  4104  0019FA  27B2               	addwf	??_display_menu& (0+255),f,b
  4105  0019FC  0100               	movlb	0	; () banked
  4106  0019FE  5181               	movf	(?___wmul+1)& (0+255),w,b
  4107  001A00  0100               	movlb	0	; () banked
  4108  001A02  23B3               	addwfc	(??_display_menu+1)& (0+255),f,b
  4109  001A04  C0BF  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4110  001A08  C0C0  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4111  001A0C  CFDE F0B4          	movff	postinc2,??_display_menu+2
  4112  001A10  CFDD F0B5          	movff	postdec2,??_display_menu+3
  4113  001A14  0EFE               	movlw	254
  4114  001A16  0100               	movlb	0	; () banked
  4115  001A18  25B4               	addwf	(??_display_menu+2)& (0+255),w,b
  4116  001A1A  0100               	movlb	0	; () banked
  4117  001A1C  6F80               	movwf	___wmul@multiplier& (0+255),b
  4118  001A1E  0EFF               	movlw	255
  4119  001A20  0100               	movlb	0	; () banked
  4120  001A22  21B5               	addwfc	(??_display_menu+3)& (0+255),w,b
  4121  001A24  0100               	movlb	0	; () banked
  4122  001A26  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4123  001A28  0E00               	movlw	0
  4124  001A2A  0100               	movlb	0	; () banked
  4125  001A2C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4126  001A2E  0E12               	movlw	18
  4127  001A30  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4128  001A32  EC21  F01B         	call	___wmul	;wreg free
  4129  001A36  0100               	movlb	0	; () banked
  4130  001A38  5180               	movf	?___wmul& (0+255),w,b
  4131  001A3A  0100               	movlb	0	; () banked
  4132  001A3C  25B2               	addwf	??_display_menu& (0+255),w,b
  4133  001A3E  0100               	movlb	0	; () banked
  4134  001A40  6FBD               	movwf	_display_menu$1148& (0+255),b
  4135  001A42  0100               	movlb	0	; () banked
  4136  001A44  5181               	movf	(?___wmul+1)& (0+255),w,b
  4137  001A46  0100               	movlb	0	; () banked
  4138  001A48  21B3               	addwfc	(??_display_menu+1)& (0+255),w,b
  4139  001A4A  0100               	movlb	0	; () banked
  4140  001A4C  6FBE               	movwf	(_display_menu$1148+1)& (0+255),b
  4141                           
  4142                           ; BSR set to: 0
  4143                           ;main.c: 301: else{
  4144                           ;main.c: 302: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  4145  001A4E  0E4A               	movlw	low _ndisplay0
  4146  001A50  0100               	movlb	0	; () banked
  4147  001A52  6FA2               	movwf	sprintf@wh& (0+255),b
  4148  001A54  0E01               	movlw	high _ndisplay0
  4149  001A56  0100               	movlb	0	; () banked
  4150  001A58  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4151  001A5A  C0BD  F0A4         	movff	_display_menu$1148,sprintf@f
  4152  001A5E  C0BE  F0A5         	movff	_display_menu$1148+1,sprintf@f+1
  4153  001A62  EC64  F01A         	call	_sprintf	;wreg free
  4154                           
  4155                           ;main.c: 303: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4156  001A66  C0BB  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4157  001A6A  C0BC  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4158  001A6E  0E00               	movlw	0
  4159  001A70  0100               	movlb	0	; () banked
  4160  001A72  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4161  001A74  0EB4               	movlw	180
  4162  001A76  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4163  001A78  EC21  F01B         	call	___wmul	;wreg free
  4164  001A7C  0E6E               	movlw	low _menu
  4165  001A7E  0100               	movlb	0	; () banked
  4166  001A80  6FB2               	movwf	??_display_menu& (0+255),b
  4167  001A82  0E01               	movlw	high _menu
  4168  001A84  0100               	movlb	0	; () banked
  4169  001A86  6FB3               	movwf	(??_display_menu+1)& (0+255),b
  4170  001A88  0100               	movlb	0	; () banked
  4171  001A8A  5180               	movf	?___wmul& (0+255),w,b
  4172  001A8C  0100               	movlb	0	; () banked
  4173  001A8E  27B2               	addwf	??_display_menu& (0+255),f,b
  4174  001A90  0100               	movlb	0	; () banked
  4175  001A92  5181               	movf	(?___wmul+1)& (0+255),w,b
  4176  001A94  0100               	movlb	0	; () banked
  4177  001A96  23B3               	addwfc	(??_display_menu+1)& (0+255),f,b
  4178  001A98  C0BF  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4179  001A9C  C0C0  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4180  001AA0  CFDE F0B4          	movff	postinc2,??_display_menu+2
  4181  001AA4  CFDD F0B5          	movff	postdec2,??_display_menu+3
  4182  001AA8  0EFF               	movlw	255
  4183  001AAA  0100               	movlb	0	; () banked
  4184  001AAC  25B4               	addwf	(??_display_menu+2)& (0+255),w,b
  4185  001AAE  0100               	movlb	0	; () banked
  4186  001AB0  6F80               	movwf	___wmul@multiplier& (0+255),b
  4187  001AB2  0EFF               	movlw	255
  4188  001AB4  0100               	movlb	0	; () banked
  4189  001AB6  21B5               	addwfc	(??_display_menu+3)& (0+255),w,b
  4190  001AB8  0100               	movlb	0	; () banked
  4191  001ABA  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4192  001ABC  0E00               	movlw	0
  4193  001ABE  0100               	movlb	0	; () banked
  4194  001AC0  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4195  001AC2  0E12               	movlw	18
  4196  001AC4  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4197  001AC6  EC21  F01B         	call	___wmul	;wreg free
  4198  001ACA  0100               	movlb	0	; () banked
  4199  001ACC  5180               	movf	?___wmul& (0+255),w,b
  4200  001ACE  0100               	movlb	0	; () banked
  4201  001AD0  25B2               	addwf	??_display_menu& (0+255),w,b
  4202  001AD2  0100               	movlb	0	; () banked
  4203  001AD4  6FBD               	movwf	_display_menu$1148& (0+255),b
  4204  001AD6  0100               	movlb	0	; () banked
  4205  001AD8  5181               	movf	(?___wmul+1)& (0+255),w,b
  4206  001ADA  0100               	movlb	0	; () banked
  4207  001ADC  21B3               	addwfc	(??_display_menu+1)& (0+255),w,b
  4208  001ADE  0100               	movlb	0	; () banked
  4209  001AE0  6FBE               	movwf	(_display_menu$1148+1)& (0+255),b
  4210                           
  4211                           ;main.c: 303: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4212  001AE2  0E5C               	movlw	low _ndisplay1
  4213  001AE4  0100               	movlb	0	; () banked
  4214  001AE6  6FA2               	movwf	sprintf@wh& (0+255),b
  4215  001AE8  0E01               	movlw	high _ndisplay1
  4216  001AEA  0100               	movlb	0	; () banked
  4217  001AEC  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4218  001AEE  0EFA               	movlw	low STR_11
  4219  001AF0  0100               	movlb	0	; () banked
  4220  001AF2  6FA4               	movwf	sprintf@f& (0+255),b
  4221  001AF4  0EFF               	movlw	high STR_11
  4222  001AF6  0100               	movlb	0	; () banked
  4223  001AF8  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4224  001AFA  C0BD  F0A6         	movff	_display_menu$1148,?_sprintf+4
  4225  001AFE  C0BE  F0A7         	movff	_display_menu$1148+1,?_sprintf+5
  4226  001B02  0E00               	movlw	0
  4227  001B04  0100               	movlb	0	; () banked
  4228  001B06  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4229  001B08  0E3C               	movlw	60
  4230  001B0A  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4231  001B0C  EC64  F01A         	call	_sprintf	;wreg free
  4232                           
  4233                           ;main.c: 304: }
  4234                           ;main.c: 305: }
  4235  001B10  0012               	return	
  4236  001B12                     l7746:
  4237                           
  4238                           ;main.c: 306: else{
  4239                           ;main.c: 307: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  4240  001B12  C0BB  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4241  001B16  C0BC  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4242  001B1A  0E00               	movlw	0
  4243  001B1C  0100               	movlb	0	; () banked
  4244  001B1E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4245  001B20  0EB4               	movlw	180
  4246  001B22  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4247  001B24  EC21  F01B         	call	___wmul	;wreg free
  4248  001B28  0E6E               	movlw	low _menu
  4249  001B2A  0100               	movlb	0	; () banked
  4250  001B2C  6FB2               	movwf	??_display_menu& (0+255),b
  4251  001B2E  0E01               	movlw	high _menu
  4252  001B30  0100               	movlb	0	; () banked
  4253  001B32  6FB3               	movwf	(??_display_menu+1)& (0+255),b
  4254  001B34  0100               	movlb	0	; () banked
  4255  001B36  5180               	movf	?___wmul& (0+255),w,b
  4256  001B38  0100               	movlb	0	; () banked
  4257  001B3A  27B2               	addwf	??_display_menu& (0+255),f,b
  4258  001B3C  0100               	movlb	0	; () banked
  4259  001B3E  5181               	movf	(?___wmul+1)& (0+255),w,b
  4260  001B40  0100               	movlb	0	; () banked
  4261  001B42  23B3               	addwfc	(??_display_menu+1)& (0+255),f,b
  4262  001B44  C0BF  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4263  001B48  C0C0  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4264  001B4C  CFDE F0B4          	movff	postinc2,??_display_menu+2
  4265  001B50  CFDD F0B5          	movff	postdec2,??_display_menu+3
  4266  001B54  0EFF               	movlw	255
  4267  001B56  0100               	movlb	0	; () banked
  4268  001B58  25B4               	addwf	(??_display_menu+2)& (0+255),w,b
  4269  001B5A  0100               	movlb	0	; () banked
  4270  001B5C  6F80               	movwf	___wmul@multiplier& (0+255),b
  4271  001B5E  0EFF               	movlw	255
  4272  001B60  0100               	movlb	0	; () banked
  4273  001B62  21B5               	addwfc	(??_display_menu+3)& (0+255),w,b
  4274  001B64  0100               	movlb	0	; () banked
  4275  001B66  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4276  001B68  0E00               	movlw	0
  4277  001B6A  0100               	movlb	0	; () banked
  4278  001B6C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4279  001B6E  0E12               	movlw	18
  4280  001B70  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4281  001B72  EC21  F01B         	call	___wmul	;wreg free
  4282  001B76  0100               	movlb	0	; () banked
  4283  001B78  5180               	movf	?___wmul& (0+255),w,b
  4284  001B7A  0100               	movlb	0	; () banked
  4285  001B7C  25B2               	addwf	??_display_menu& (0+255),w,b
  4286  001B7E  0100               	movlb	0	; () banked
  4287  001B80  6FBD               	movwf	_display_menu$1148& (0+255),b
  4288  001B82  0100               	movlb	0	; () banked
  4289  001B84  5181               	movf	(?___wmul+1)& (0+255),w,b
  4290  001B86  0100               	movlb	0	; () banked
  4291  001B88  21B3               	addwfc	(??_display_menu+1)& (0+255),w,b
  4292  001B8A  0100               	movlb	0	; () banked
  4293  001B8C  6FBE               	movwf	(_display_menu$1148+1)& (0+255),b
  4294                           
  4295                           ; BSR set to: 0
  4296                           ;main.c: 306: else{
  4297                           ;main.c: 307: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  4298  001B8E  0E4A               	movlw	low _ndisplay0
  4299  001B90  0100               	movlb	0	; () banked
  4300  001B92  6FA2               	movwf	sprintf@wh& (0+255),b
  4301  001B94  0E01               	movlw	high _ndisplay0
  4302  001B96  0100               	movlb	0	; () banked
  4303  001B98  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4304  001B9A  0EFA               	movlw	low STR_11
  4305  001B9C  0100               	movlb	0	; () banked
  4306  001B9E  6FA4               	movwf	sprintf@f& (0+255),b
  4307  001BA0  0EFF               	movlw	high STR_11
  4308  001BA2  0100               	movlb	0	; () banked
  4309  001BA4  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4310  001BA6  C0BD  F0A6         	movff	_display_menu$1148,?_sprintf+4
  4311  001BAA  C0BE  F0A7         	movff	_display_menu$1148+1,?_sprintf+5
  4312  001BAE  0E00               	movlw	0
  4313  001BB0  0100               	movlb	0	; () banked
  4314  001BB2  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4315  001BB4  0E5E               	movlw	94
  4316  001BB6  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4317  001BB8  EC64  F01A         	call	_sprintf	;wreg free
  4318                           
  4319                           ;main.c: 308: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4320  001BBC  C0BB  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4321  001BC0  C0BC  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4322  001BC4  0E00               	movlw	0
  4323  001BC6  0100               	movlb	0	; () banked
  4324  001BC8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4325  001BCA  0EB4               	movlw	180
  4326  001BCC  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4327  001BCE  EC21  F01B         	call	___wmul	;wreg free
  4328  001BD2  0E6E               	movlw	low _menu
  4329  001BD4  0100               	movlb	0	; () banked
  4330  001BD6  6FB2               	movwf	??_display_menu& (0+255),b
  4331  001BD8  0E01               	movlw	high _menu
  4332  001BDA  0100               	movlb	0	; () banked
  4333  001BDC  6FB3               	movwf	(??_display_menu+1)& (0+255),b
  4334  001BDE  0100               	movlb	0	; () banked
  4335  001BE0  5180               	movf	?___wmul& (0+255),w,b
  4336  001BE2  0100               	movlb	0	; () banked
  4337  001BE4  27B2               	addwf	??_display_menu& (0+255),f,b
  4338  001BE6  0100               	movlb	0	; () banked
  4339  001BE8  5181               	movf	(?___wmul+1)& (0+255),w,b
  4340  001BEA  0100               	movlb	0	; () banked
  4341  001BEC  23B3               	addwfc	(??_display_menu+1)& (0+255),f,b
  4342  001BEE  C0BF  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4343  001BF2  C0C0  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4344  001BF6  CFDE F080          	movff	postinc2,___wmul@multiplier
  4345  001BFA  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  4346  001BFE  0E00               	movlw	0
  4347  001C00  0100               	movlb	0	; () banked
  4348  001C02  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4349  001C04  0E12               	movlw	18
  4350  001C06  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4351  001C08  EC21  F01B         	call	___wmul	;wreg free
  4352  001C0C  0100               	movlb	0	; () banked
  4353  001C0E  5180               	movf	?___wmul& (0+255),w,b
  4354  001C10  0100               	movlb	0	; () banked
  4355  001C12  25B2               	addwf	??_display_menu& (0+255),w,b
  4356  001C14  0100               	movlb	0	; () banked
  4357  001C16  6FBD               	movwf	_display_menu$1148& (0+255),b
  4358  001C18  0100               	movlb	0	; () banked
  4359  001C1A  5181               	movf	(?___wmul+1)& (0+255),w,b
  4360  001C1C  0100               	movlb	0	; () banked
  4361  001C1E  21B3               	addwfc	(??_display_menu+1)& (0+255),w,b
  4362  001C20  0100               	movlb	0	; () banked
  4363  001C22  6FBE               	movwf	(_display_menu$1148+1)& (0+255),b
  4364                           
  4365                           ;main.c: 308: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4366  001C24  0E5C               	movlw	low _ndisplay1
  4367  001C26  0100               	movlb	0	; () banked
  4368  001C28  6FA2               	movwf	sprintf@wh& (0+255),b
  4369  001C2A  0E01               	movlw	high _ndisplay1
  4370  001C2C  0100               	movlb	0	; () banked
  4371  001C2E  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4372  001C30  0EFA               	movlw	low STR_11
  4373  001C32  0100               	movlb	0	; () banked
  4374  001C34  6FA4               	movwf	sprintf@f& (0+255),b
  4375  001C36  0EFF               	movlw	high STR_11
  4376  001C38  0100               	movlb	0	; () banked
  4377  001C3A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4378  001C3C  C0BD  F0A6         	movff	_display_menu$1148,?_sprintf+4
  4379  001C40  C0BE  F0A7         	movff	_display_menu$1148+1,?_sprintf+5
  4380  001C44  0E00               	movlw	0
  4381  001C46  0100               	movlb	0	; () banked
  4382  001C48  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4383  001C4A  0E5E               	movlw	94
  4384  001C4C  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4385  001C4E  EC64  F01A         	call	_sprintf	;wreg free
  4386  001C52  0012               	return	
  4387  001C54                     __end_of_display_menu:
  4388                           	opt stack 0
  4389                           tblptru	equ	0xFF8
  4390                           tblptrh	equ	0xFF7
  4391                           tblptrl	equ	0xFF6
  4392                           tablat	equ	0xFF5
  4393                           intcon	equ	0xFF2
  4394                           intcon2	equ	0xFF1
  4395                           intcon3	equ	0xFF0
  4396                           postinc0	equ	0xFEE
  4397                           wreg	equ	0xFE8
  4398                           indf1	equ	0xFE7
  4399                           postinc1	equ	0xFE6
  4400                           postdec1	equ	0xFE5
  4401                           fsr1h	equ	0xFE2
  4402                           fsr1l	equ	0xFE1
  4403                           indf2	equ	0xFDF
  4404                           postinc2	equ	0xFDE
  4405                           postdec2	equ	0xFDD
  4406                           fsr2h	equ	0xFDA
  4407                           fsr2l	equ	0xFD9
  4408                           status	equ	0xFD8
  4409                           
  4410 ;; *************** function _sprintf *****************
  4411 ;; Defined at:
  4412 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  4413 ;; Parameters:    Size  Location     Type
  4414 ;;  wh              2   34[BANK0 ] PTR unsigned char 
  4415 ;;		 -> menu(720), ndisplay1(18), ndisplay0(18), 
  4416 ;;  f               2   36[BANK0 ] PTR const unsigned char 
  4417 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
  4418 ;;		 -> STR_10(20), STR_9(20), STR_8(22), STR_7(19), 
  4419 ;;		 -> menu(720), STR_6(15), STR_5(6), STR_4(14), 
  4420 ;;		 -> STR_3(12), STR_2(23), STR_1(23), 
  4421 ;; Auto vars:     Size  Location     Type
  4422 ;;  pb              4   46[BANK0 ] struct __prbuf
  4423 ;;  ap              2   44[BANK0 ] PTR void [1]
  4424 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4425 ;; Return value:  Size  Location     Type
  4426 ;;                  2   34[BANK0 ] int 
  4427 ;; Registers used:
  4428 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4429 ;; Tracked objects:
  4430 ;;		On entry : 0/0
  4431 ;;		On exit  : 0/0
  4432 ;;		Unchanged: 0/0
  4433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4434 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4435 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4437 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4438 ;;Total ram usage:       16 bytes
  4439 ;; Hardware stack levels used:    1
  4440 ;; Hardware stack levels required when called:    8
  4441 ;; This function calls:
  4442 ;;		__doprnt
  4443 ;; This function is called by:
  4444 ;;		_update_display
  4445 ;;		_update_state
  4446 ;;		_display_menu
  4447 ;; This function uses a non-reentrant model
  4448 ;;
  4449                           
  4450                           	psect	text9
  4451  0034C8                     __ptext9:
  4452                           	opt stack 0
  4453  0034C8                     _sprintf:
  4454                           	opt stack 21
  4455                           
  4456                           ;incstack = 0
  4457  0034C8  C0A2  F0AE         	movff	sprintf@wh,sprintf@pb
  4458  0034CC  C0A3  F0AF         	movff	sprintf@wh+1,sprintf@pb+1
  4459  0034D0  0E00               	movlw	0
  4460  0034D2  0100               	movlb	0	; () banked
  4461  0034D4  6FB0               	movwf	(sprintf@pb+2)& (0+255),b
  4462  0034D6  0E00               	movlw	0
  4463  0034D8  0100               	movlb	0	; () banked
  4464  0034DA  6FB1               	movwf	(sprintf@pb+3)& (0+255),b
  4465  0034DC  0EA6               	movlw	low (?_sprintf+4)
  4466  0034DE  0100               	movlb	0	; () banked
  4467  0034E0  6FAC               	movwf	sprintf@ap& (0+255),b
  4468  0034E2  0E00               	movlw	high (?_sprintf+4)
  4469  0034E4  0100               	movlb	0	; () banked
  4470  0034E6  6FAD               	movwf	(sprintf@ap+1)& (0+255),b
  4471                           
  4472                           ; BSR set to: 0
  4473  0034E8  0EAE               	movlw	low sprintf@pb
  4474  0034EA  0100               	movlb	0	; () banked
  4475  0034EC  6F8C               	movwf	__doprnt@pb& (0+255),b
  4476  0034EE  0E00               	movlw	high sprintf@pb
  4477  0034F0  0100               	movlb	0	; () banked
  4478  0034F2  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  4479  0034F4  C0A4  F08E         	movff	sprintf@f,__doprnt@f
  4480  0034F8  C0A5  F08F         	movff	sprintf@f+1,__doprnt@f+1
  4481  0034FC  0EAC               	movlw	low sprintf@ap
  4482  0034FE  0100               	movlb	0	; () banked
  4483  003500  6F90               	movwf	__doprnt@ap& (0+255),b
  4484  003502  0E00               	movlw	high sprintf@ap
  4485  003504  0100               	movlb	0	; () banked
  4486  003506  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  4487  003508  EC09  F000         	call	__doprnt	;wreg free
  4488  00350C  C0AE  FFD9         	movff	sprintf@pb,fsr2l
  4489  003510  C0AF  FFDA         	movff	sprintf@pb+1,fsr2h
  4490  003514  0E00               	movlw	0
  4491  003516  6EDF               	movwf	indf2,c
  4492  003518  0012               	return	
  4493  00351A                     __end_of_sprintf:
  4494                           	opt stack 0
  4495                           tblptru	equ	0xFF8
  4496                           tblptrh	equ	0xFF7
  4497                           tblptrl	equ	0xFF6
  4498                           tablat	equ	0xFF5
  4499                           intcon	equ	0xFF2
  4500                           intcon2	equ	0xFF1
  4501                           intcon3	equ	0xFF0
  4502                           postinc0	equ	0xFEE
  4503                           wreg	equ	0xFE8
  4504                           indf1	equ	0xFE7
  4505                           postinc1	equ	0xFE6
  4506                           postdec1	equ	0xFE5
  4507                           fsr1h	equ	0xFE2
  4508                           fsr1l	equ	0xFE1
  4509                           indf2	equ	0xFDF
  4510                           postinc2	equ	0xFDE
  4511                           postdec2	equ	0xFDD
  4512                           fsr2h	equ	0xFDA
  4513                           fsr2l	equ	0xFD9
  4514                           status	equ	0xFD8
  4515                           
  4516 ;; *************** function __doprnt *****************
  4517 ;; Defined at:
  4518 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4519 ;; Parameters:    Size  Location     Type
  4520 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
  4521 ;;		 -> sprintf@pb(4), printf@pb(4), 
  4522 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4523 ;;		 -> STR_17(14), STR_16(15), STR_15(8), STR_14(5), 
  4524 ;;		 -> STR_13(5), STR_12(5), STR_11(5), STR_10(20), 
  4525 ;;		 -> STR_9(20), STR_8(22), STR_7(19), menu(720), 
  4526 ;;		 -> STR_6(15), STR_5(6), STR_4(14), STR_3(12), 
  4527 ;;		 -> STR_2(23), STR_1(23), display1(18), display0(18), 
  4528 ;;  ap              2   16[BANK0 ] PTR PTR void 
  4529 ;;		 -> sprintf@ap(2), printf@ap(2), 
  4530 ;; Auto vars:     Size  Location     Type
  4531 ;;  idx             1   22[BANK0 ] unsigned char 
  4532 ;;  tmpval          4    0        struct .
  4533 ;;  width           2   31[BANK0 ] int 
  4534 ;;  val             2   28[BANK0 ] unsigned int 
  4535 ;;  cp              2   26[BANK0 ] PTR const unsigned char 
  4536 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_18(7), 
  4537 ;;		 -> _doprnt@c(1), menu(720), ndisplay1(18), ndisplay0(18), 
  4538 ;;  len             2   24[BANK0 ] unsigned int 
  4539 ;;  c               1   33[BANK0 ] char 
  4540 ;;  flag            1   30[BANK0 ] unsigned char 
  4541 ;;  prec            1   23[BANK0 ] char 
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  2   12[BANK0 ] int 
  4544 ;; Registers used:
  4545 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4551 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;Total ram usage:       22 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:    7
  4558 ;; This function calls:
  4559 ;;		Absolute function
  4560 ;;		___lwdiv
  4561 ;;		___lwmod
  4562 ;;		___wmul
  4563 ;;		_isdigit
  4564 ;;		_putch
  4565 ;; This function is called by:
  4566 ;;		_printf
  4567 ;;		_sprintf
  4568 ;; This function uses a non-reentrant model
  4569 ;;
  4570                           
  4571                           	psect	text10
  4572  000012                     __ptext10:
  4573                           	opt stack 0
  4574  000012                     __doprnt:
  4575                           	opt stack 21
  4576                           
  4577                           ;doprnt.c: 499: signed char c;
  4578                           ;doprnt.c: 501: int width;
  4579                           ;doprnt.c: 506: signed char prec;
  4580                           ;doprnt.c: 508: unsigned char flag;
  4581                           ;doprnt.c: 523: union {
  4582                           ;doprnt.c: 524: unsigned long vd;
  4583                           ;doprnt.c: 525: double integ;
  4584                           ;doprnt.c: 526: } tmpval;
  4585                           ;doprnt.c: 528: unsigned int val;
  4586                           ;doprnt.c: 529: unsigned len;
  4587                           ;doprnt.c: 530: const char * cp;
  4588                           ;doprnt.c: 536: while(c = *f++) {
  4589                           
  4590                           ;incstack = 0
  4591  000012  EFA2  F004         	goto	l7682
  4592  000016                     l7476:
  4593                           
  4594                           ;doprnt.c: 538: if(c != '%')
  4595  000016  0E25               	movlw	37
  4596  000018  0100               	movlb	0	; () banked
  4597  00001A  19A1               	xorwf	__doprnt@c& (0+255),w,b
  4598  00001C  B4D8               	btfsc	status,2,c
  4599  00001E  D03C               	goto	l7486
  4600                           
  4601                           ; BSR set to: 0
  4602                           ;doprnt.c: 540: {
  4603                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4604  000020  0100               	movlb	0	; () banked
  4605  000022  EE20 F002          	lfsr	2,2
  4606  000026  518C               	movf	__doprnt@pb& (0+255),w,b
  4607  000028  26D9               	addwf	fsr2l,f,c
  4608  00002A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4609  00002C  22DA               	addwfc	fsr2h,f,c
  4610  00002E  50DE               	movf	postinc2,w,c
  4611  000030  10DE               	iorwf	postinc2,w,c
  4612  000032  B4D8               	btfsc	status,2,c
  4613  000034  D01A               	goto	l7482
  4614                           
  4615                           ; BSR set to: 0
  4616  000036  0100               	movlb	0	; () banked
  4617  000038  EE20 F002          	lfsr	2,2
  4618  00003C  518C               	movf	__doprnt@pb& (0+255),w,b
  4619  00003E  26D9               	addwf	fsr2l,f,c
  4620  000040  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4621  000042  22DA               	addwfc	fsr2h,f,c
  4622  000044  CFDE F092          	movff	postinc2,??__doprnt
  4623  000048  CFDD F093          	movff	postdec2,??__doprnt+1
  4624  00004C  D802               	call	u11548
  4625  00004E  EFA2  F004         	goto	l7682
  4626  000052                     u11548:
  4627  000052  0005               	push	
  4628  000054  6EFA               	movwf	pclath,c
  4629  000056  0100               	movlb	0	; () banked
  4630  000058  5192               	movf	??__doprnt& (0+255),w,b
  4631  00005A  6EFD               	movwf	tosl,c
  4632  00005C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4633  00005E  6EFE               	movwf	tosh,c
  4634  000060  6AFF               	clrf	tosu,c
  4635  000062  50FA               	movf	pclath,w,c
  4636  000064  0100               	movlb	0	; () banked
  4637  000066  51A1               	movf	__doprnt@c& (0+255),w,b
  4638  000068  0012               	return		;indir
  4639  00006A                     l7482:
  4640  00006A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4641  00006E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4642  000072  CFDE F092          	movff	postinc2,??__doprnt
  4643  000076  CFDD F093          	movff	postdec2,??__doprnt+1
  4644  00007A  C092  FFD9         	movff	??__doprnt,fsr2l
  4645  00007E  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4646  000082  C0A1  FFDF         	movff	__doprnt@c,indf2
  4647  000086  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4648  00008A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4649  00008E  2ADE               	incf	postinc2,f,c
  4650  000090  0E00               	movlw	0
  4651  000092  22DD               	addwfc	postdec2,f,c
  4652                           
  4653                           ;doprnt.c: 542: continue;
  4654  000094  EFA2  F004         	goto	l7682
  4655  000098                     l7486:
  4656                           
  4657                           ;doprnt.c: 543: }
  4658                           ;doprnt.c: 546: width = 0;
  4659  000098  0E00               	movlw	0
  4660  00009A  0100               	movlb	0	; () banked
  4661  00009C  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  4662  00009E  0E00               	movlw	0
  4663  0000A0  6F9F               	movwf	__doprnt@width& (0+255),b
  4664                           
  4665                           ;doprnt.c: 548: flag = 0;
  4666  0000A2  0E00               	movlw	0
  4667  0000A4  0100               	movlb	0	; () banked
  4668  0000A6  6F9E               	movwf	__doprnt@flag& (0+255),b
  4669                           
  4670                           ; BSR set to: 0
  4671                           ;doprnt.c: 551: switch(*f) {
  4672                           
  4673                           ;doprnt.c: 550: for(;;) {
  4674  0000A8  D005               	goto	l7492
  4675  0000AA                     l7488:
  4676                           
  4677                           ;doprnt.c: 580: flag |= 0x04;
  4678  0000AA  0100               	movlb	0	; () banked
  4679  0000AC  859E               	bsf	__doprnt@flag& (0+255),2,b
  4680                           
  4681                           ;doprnt.c: 581: f++;
  4682  0000AE  0100               	movlb	0	; () banked
  4683  0000B0  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  4684  0000B2  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  4685  0000B4                     l7492:
  4686  0000B4  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4687  0000B8  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4688  0000BC  0E00               	movlw	low (__mediumconst shr (0+16))
  4689  0000BE  6EF8               	movwf	tblptru,c
  4690  0000C0  0E0F               	movlw	(high __ramtop+-1)
  4691  0000C2  64F7               	cpfsgt	tblptrh,c
  4692  0000C4  D003               	bra	u11557
  4693  0000C6  0008               	tblrd		*
  4694  0000C8  50F5               	movf	tablat,w,c
  4695  0000CA  D005               	bra	u11550
  4696  0000CC                     u11557:
  4697  0000CC  CFF6 FFE9          	movff	tblptrl,fsr0l
  4698  0000D0  CFF7 FFEA          	movff	tblptrh,fsr0h
  4699  0000D4  50EF               	movf	indf0,w,c
  4700  0000D6                     u11550:
  4701                           
  4702                           ; Switch size 1, requested type "space"
  4703                           ; Number of cases is 1, Range of values is 48 to 48
  4704                           ; switch strategies available:
  4705                           ; Name         Instructions Cycles
  4706                           ; simple_byte            4     3 (average)
  4707                           ;	Chosen strategy is simple_byte
  4708  0000D6  0A30               	xorlw	48	; case 48
  4709  0000D8  B4D8               	btfsc	status,2,c
  4710  0000DA  D7E7               	goto	l7488
  4711                           
  4712                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4713                           
  4714                           ;doprnt.c: 586: }
  4715                           
  4716                           ;doprnt.c: 585: break;
  4717  0000DC  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4718  0000E0  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4719  0000E4  0E00               	movlw	low (__mediumconst shr (0+16))
  4720  0000E6  6EF8               	movwf	tblptru,c
  4721  0000E8  0E0F               	movlw	(high __ramtop+-1)
  4722  0000EA  64F7               	cpfsgt	tblptrh,c
  4723  0000EC  D003               	bra	u11567
  4724  0000EE  0008               	tblrd		*
  4725  0000F0  50F5               	movf	tablat,w,c
  4726  0000F2  D005               	bra	u11560
  4727  0000F4                     u11567:
  4728  0000F4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4729  0000F8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4730  0000FC  50EF               	movf	indf0,w,c
  4731  0000FE                     u11560:
  4732  0000FE  EC9D  F01B         	call	_isdigit
  4733  000102  A0D8               	btfss	status,0,c
  4734  000104  D18A               	goto	l7558
  4735                           
  4736                           ;doprnt.c: 598: width = 0;
  4737  000106  0E00               	movlw	0
  4738  000108  0100               	movlb	0	; () banked
  4739  00010A  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  4740  00010C  0E00               	movlw	0
  4741  00010E  6F9F               	movwf	__doprnt@width& (0+255),b
  4742  000110                     l7498:
  4743                           
  4744                           ;doprnt.c: 600: width *= 10;
  4745  000110  C09F  F080         	movff	__doprnt@width,___wmul@multiplier
  4746  000114  C0A0  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
  4747  000118  0E00               	movlw	0
  4748  00011A  0100               	movlb	0	; () banked
  4749  00011C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4750  00011E  0E0A               	movlw	10
  4751  000120  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4752  000122  EC21  F01B         	call	___wmul	;wreg free
  4753  000126  C080  F09F         	movff	?___wmul,__doprnt@width
  4754  00012A  C081  F0A0         	movff	?___wmul+1,__doprnt@width+1
  4755                           
  4756                           ;doprnt.c: 601: width += *f++ - '0';
  4757  00012E  0ED0               	movlw	208
  4758  000130  0100               	movlb	0	; () banked
  4759  000132  6F92               	movwf	??__doprnt& (0+255),b
  4760  000134  0EFF               	movlw	255
  4761  000136  0100               	movlb	0	; () banked
  4762  000138  6F93               	movwf	(??__doprnt+1)& (0+255),b
  4763  00013A  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4764  00013E  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4765  000142  0E00               	movlw	low (__mediumconst shr (0+16))
  4766  000144  6EF8               	movwf	tblptru,c
  4767  000146  0E0F               	movlw	(high __ramtop+-1)
  4768  000148  64F7               	cpfsgt	tblptrh,c
  4769  00014A  D003               	bra	u11587
  4770  00014C  0008               	tblrd		*
  4771  00014E  50F5               	movf	tablat,w,c
  4772  000150  D005               	bra	u11580
  4773  000152                     u11587:
  4774  000152  CFF6 FFE9          	movff	tblptrl,fsr0l
  4775  000156  CFF7 FFEA          	movff	tblptrh,fsr0h
  4776  00015A  50EF               	movf	indf0,w,c
  4777  00015C                     u11580:
  4778  00015C  0100               	movlb	0	; () banked
  4779  00015E  6F94               	movwf	(??__doprnt+2)& (0+255),b
  4780  000160  6B95               	clrf	(??__doprnt+3)& (0+255),b
  4781  000162  0100               	movlb	0	; () banked
  4782  000164  5192               	movf	??__doprnt& (0+255),w,b
  4783  000166  0100               	movlb	0	; () banked
  4784  000168  2794               	addwf	(??__doprnt+2)& (0+255),f,b
  4785  00016A  0100               	movlb	0	; () banked
  4786  00016C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4787  00016E  0100               	movlb	0	; () banked
  4788  000170  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
  4789  000172  0100               	movlb	0	; () banked
  4790  000174  5194               	movf	(??__doprnt+2)& (0+255),w,b
  4791  000176  0100               	movlb	0	; () banked
  4792  000178  279F               	addwf	__doprnt@width& (0+255),f,b
  4793  00017A  0100               	movlb	0	; () banked
  4794  00017C  5195               	movf	(??__doprnt+3)& (0+255),w,b
  4795  00017E  0100               	movlb	0	; () banked
  4796  000180  23A0               	addwfc	(__doprnt@width+1)& (0+255),f,b
  4797                           
  4798                           ; BSR set to: 0
  4799  000182  0100               	movlb	0	; () banked
  4800  000184  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  4801  000186  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  4802                           
  4803                           ; BSR set to: 0
  4804                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4805  000188  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4806  00018C  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4807  000190  0E00               	movlw	low (__mediumconst shr (0+16))
  4808  000192  6EF8               	movwf	tblptru,c
  4809  000194  0E0F               	movlw	(high __ramtop+-1)
  4810  000196  64F7               	cpfsgt	tblptrh,c
  4811  000198  D003               	bra	u11597
  4812  00019A  0008               	tblrd		*
  4813  00019C  50F5               	movf	tablat,w,c
  4814  00019E  D005               	bra	u11590
  4815  0001A0                     u11597:
  4816  0001A0  CFF6 FFE9          	movff	tblptrl,fsr0l
  4817  0001A4  CFF7 FFEA          	movff	tblptrh,fsr0h
  4818  0001A8  50EF               	movf	indf0,w,c
  4819  0001AA                     u11590:
  4820  0001AA  EC9D  F01B         	call	_isdigit
  4821  0001AE  A0D8               	btfss	status,0,c
  4822  0001B0  D134               	goto	l7558
  4823  0001B2  D7AE               	goto	l7498
  4824  0001B4                     l7506:
  4825                           
  4826                           ;doprnt.c: 721: flag |= 0x80;
  4827  0001B4  0100               	movlb	0	; () banked
  4828  0001B6  8F9E               	bsf	__doprnt@flag& (0+255),7,b
  4829                           
  4830                           ;doprnt.c: 723: break;
  4831  0001B8  D163               	goto	l503
  4832  0001BA                     l7508:
  4833                           
  4834                           ; BSR set to: 0
  4835                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4836  0001BA  C090  FFD9         	movff	__doprnt@ap,fsr2l
  4837  0001BE  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  4838  0001C2  CFDF F092          	movff	indf2,??__doprnt
  4839  0001C6  0E02               	movlw	2
  4840  0001C8  26DE               	addwf	postinc2,f,c
  4841  0001CA  CFDF F093          	movff	indf2,??__doprnt+1
  4842  0001CE  0E00               	movlw	0
  4843  0001D0  22DD               	addwfc	postdec2,f,c
  4844  0001D2  C092  FFD9         	movff	??__doprnt,fsr2l
  4845  0001D6  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4846  0001DA  CFDE F09A          	movff	postinc2,__doprnt@cp
  4847  0001DE  CFDD F09B          	movff	postdec2,__doprnt@cp+1
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;doprnt.c: 740: if(!cp)
  4851  0001E2  0100               	movlb	0	; () banked
  4852  0001E4  519A               	movf	__doprnt@cp& (0+255),w,b
  4853  0001E6  0100               	movlb	0	; () banked
  4854  0001E8  119B               	iorwf	(__doprnt@cp+1)& (0+255),w,b
  4855  0001EA  A4D8               	btfss	status,2,c
  4856  0001EC  D006               	goto	l7514
  4857                           
  4858                           ; BSR set to: 0
  4859                           ;doprnt.c: 741: cp = "(null)";
  4860  0001EE  0EED               	movlw	low STR_18
  4861  0001F0  0100               	movlb	0	; () banked
  4862  0001F2  6F9A               	movwf	__doprnt@cp& (0+255),b
  4863  0001F4  0EFF               	movlw	high STR_18
  4864  0001F6  0100               	movlb	0	; () banked
  4865  0001F8  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  4866  0001FA                     l7514:
  4867                           
  4868                           ; BSR set to: 0
  4869                           ;doprnt.c: 745: len = 0;
  4870  0001FA  0E00               	movlw	0
  4871  0001FC  0100               	movlb	0	; () banked
  4872  0001FE  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  4873  000200  0E00               	movlw	0
  4874  000202  6F98               	movwf	__doprnt@len& (0+255),b
  4875                           
  4876                           ;doprnt.c: 746: while(cp[len])
  4877  000204  D003               	goto	l7518
  4878  000206                     l7516:
  4879                           
  4880                           ;doprnt.c: 747: len++;
  4881  000206  0100               	movlb	0	; () banked
  4882  000208  4B98               	infsnz	__doprnt@len& (0+255),f,b
  4883  00020A  2B99               	incf	(__doprnt@len+1)& (0+255),f,b
  4884  00020C                     l7518:
  4885                           
  4886                           ; BSR set to: 0
  4887  00020C  0100               	movlb	0	; () banked
  4888  00020E  5198               	movf	__doprnt@len& (0+255),w,b
  4889  000210  0100               	movlb	0	; () banked
  4890  000212  259A               	addwf	__doprnt@cp& (0+255),w,b
  4891  000214  0100               	movlb	0	; () banked
  4892  000216  6F92               	movwf	??__doprnt& (0+255),b
  4893  000218  0100               	movlb	0	; () banked
  4894  00021A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  4895  00021C  0100               	movlb	0	; () banked
  4896  00021E  219B               	addwfc	(__doprnt@cp+1)& (0+255),w,b
  4897  000220  0100               	movlb	0	; () banked
  4898  000222  6F93               	movwf	(??__doprnt+1)& (0+255),b
  4899  000224  C092  FFF6         	movff	??__doprnt,tblptrl
  4900  000228  C093  FFF7         	movff	??__doprnt+1,tblptrh
  4901  00022C  0E00               	movlw	low (__mediumconst shr (0+16))
  4902  00022E  6EF8               	movwf	tblptru,c
  4903  000230  0E0F               	movlw	(high __ramtop+-1)
  4904  000232  64F7               	cpfsgt	tblptrh,c
  4905  000234  D003               	bra	u11627
  4906  000236  0008               	tblrd		*
  4907  000238  50F5               	movf	tablat,w,c
  4908  00023A  D005               	bra	u11620
  4909  00023C                     u11627:
  4910  00023C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4911  000240  CFF7 FFEA          	movff	tblptrh,fsr0h
  4912  000244  50EF               	movf	indf0,w,c
  4913  000246                     u11620:
  4914  000246  0900               	iorlw	0
  4915  000248  A4D8               	btfss	status,2,c
  4916  00024A  D7DD               	goto	l7516
  4917  00024C                     l7520:
  4918                           
  4919                           ;doprnt.c: 757: if(width > len)
  4920  00024C  0100               	movlb	0	; () banked
  4921  00024E  519F               	movf	__doprnt@width& (0+255),w,b
  4922  000250  0100               	movlb	0	; () banked
  4923  000252  5D98               	subwf	__doprnt@len& (0+255),w,b
  4924  000254  0100               	movlb	0	; () banked
  4925  000256  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  4926  000258  0100               	movlb	0	; () banked
  4927  00025A  5999               	subwfb	(__doprnt@len+1)& (0+255),w,b
  4928  00025C  B0D8               	btfsc	status,0,c
  4929  00025E  D009               	goto	l7524
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;doprnt.c: 758: width -= len;
  4933  000260  0100               	movlb	0	; () banked
  4934  000262  5198               	movf	__doprnt@len& (0+255),w,b
  4935  000264  0100               	movlb	0	; () banked
  4936  000266  5F9F               	subwf	__doprnt@width& (0+255),f,b
  4937  000268  0100               	movlb	0	; () banked
  4938  00026A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  4939  00026C  0100               	movlb	0	; () banked
  4940  00026E  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  4941  000270  D03E               	goto	l7534
  4942  000272                     l7524:
  4943                           
  4944                           ; BSR set to: 0
  4945                           ;doprnt.c: 759: else
  4946                           ;doprnt.c: 760: width = 0;
  4947  000272  0E00               	movlw	0
  4948  000274  0100               	movlb	0	; () banked
  4949  000276  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  4950  000278  0E00               	movlw	0
  4951  00027A  6F9F               	movwf	__doprnt@width& (0+255),b
  4952                           
  4953                           ; BSR set to: 0
  4954                           ;doprnt.c: 764: while(width--)
  4955  00027C  D038               	goto	l7534
  4956  00027E                     l7526:
  4957                           
  4958                           ; BSR set to: 0
  4959                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  4960  00027E  0100               	movlb	0	; () banked
  4961  000280  EE20 F002          	lfsr	2,2
  4962  000284  518C               	movf	__doprnt@pb& (0+255),w,b
  4963  000286  26D9               	addwf	fsr2l,f,c
  4964  000288  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4965  00028A  22DA               	addwfc	fsr2h,f,c
  4966  00028C  50DE               	movf	postinc2,w,c
  4967  00028E  10DE               	iorwf	postinc2,w,c
  4968  000290  B4D8               	btfsc	status,2,c
  4969  000292  D018               	goto	l7530
  4970                           
  4971                           ; BSR set to: 0
  4972  000294  0100               	movlb	0	; () banked
  4973  000296  EE20 F002          	lfsr	2,2
  4974  00029A  518C               	movf	__doprnt@pb& (0+255),w,b
  4975  00029C  26D9               	addwf	fsr2l,f,c
  4976  00029E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4977  0002A0  22DA               	addwfc	fsr2h,f,c
  4978  0002A2  CFDE F092          	movff	postinc2,??__doprnt
  4979  0002A6  CFDD F093          	movff	postdec2,??__doprnt+1
  4980  0002AA  D801               	call	u11668
  4981  0002AC  D020               	goto	l7534
  4982  0002AE                     u11668:
  4983  0002AE  0005               	push	
  4984  0002B0  6EFA               	movwf	pclath,c
  4985  0002B2  0100               	movlb	0	; () banked
  4986  0002B4  5192               	movf	??__doprnt& (0+255),w,b
  4987  0002B6  6EFD               	movwf	tosl,c
  4988  0002B8  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4989  0002BA  6EFE               	movwf	tosh,c
  4990  0002BC  6AFF               	clrf	tosu,c
  4991  0002BE  50FA               	movf	pclath,w,c
  4992  0002C0  0E20               	movlw	32
  4993  0002C2  0012               	return		;indir
  4994  0002C4                     l7530:
  4995  0002C4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4996  0002C8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4997  0002CC  CFDE F092          	movff	postinc2,??__doprnt
  4998  0002D0  CFDD F093          	movff	postdec2,??__doprnt+1
  4999  0002D4  C092  FFD9         	movff	??__doprnt,fsr2l
  5000  0002D8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5001  0002DC  0E20               	movlw	32
  5002  0002DE  6EDF               	movwf	indf2,c
  5003  0002E0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5004  0002E4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5005  0002E8  2ADE               	incf	postinc2,f,c
  5006  0002EA  0E00               	movlw	0
  5007  0002EC  22DD               	addwfc	postdec2,f,c
  5008  0002EE                     l7534:
  5009  0002EE  0100               	movlb	0	; () banked
  5010  0002F0  079F               	decf	__doprnt@width& (0+255),f,b
  5011  0002F2  A0D8               	btfss	status,0,c
  5012  0002F4  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5013  0002F6  0100               	movlb	0	; () banked
  5014  0002F8  299F               	incf	__doprnt@width& (0+255),w,b
  5015  0002FA  E1C1               	bnz	l7526
  5016  0002FC  0100               	movlb	0	; () banked
  5017  0002FE  29A0               	incf	(__doprnt@width+1)& (0+255),w,b
  5018  000300  B4D8               	btfsc	status,2,c
  5019  000302  D060               	goto	l7548
  5020  000304  D7BC               	goto	l7526
  5021  000306                     l7536:
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  5025  000306  0100               	movlb	0	; () banked
  5026  000308  EE20 F002          	lfsr	2,2
  5027  00030C  518C               	movf	__doprnt@pb& (0+255),w,b
  5028  00030E  26D9               	addwf	fsr2l,f,c
  5029  000310  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5030  000312  22DA               	addwfc	fsr2h,f,c
  5031  000314  50DE               	movf	postinc2,w,c
  5032  000316  10DE               	iorwf	postinc2,w,c
  5033  000318  B4D8               	btfsc	status,2,c
  5034  00031A  D02C               	goto	l7542
  5035                           
  5036                           ; BSR set to: 0
  5037  00031C  0100               	movlb	0	; () banked
  5038  00031E  EE20 F002          	lfsr	2,2
  5039  000322  518C               	movf	__doprnt@pb& (0+255),w,b
  5040  000324  26D9               	addwf	fsr2l,f,c
  5041  000326  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5042  000328  22DA               	addwfc	fsr2h,f,c
  5043  00032A  CFDE F092          	movff	postinc2,??__doprnt
  5044  00032E  CFDD F093          	movff	postdec2,??__doprnt+1
  5045  000332  D801               	call	u11698
  5046  000334  D01B               	goto	l7540
  5047  000336                     u11698:
  5048  000336  0005               	push	
  5049  000338  6EFA               	movwf	pclath,c
  5050  00033A  0100               	movlb	0	; () banked
  5051  00033C  5192               	movf	??__doprnt& (0+255),w,b
  5052  00033E  6EFD               	movwf	tosl,c
  5053  000340  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5054  000342  6EFE               	movwf	tosh,c
  5055  000344  6AFF               	clrf	tosu,c
  5056  000346  50FA               	movf	pclath,w,c
  5057  000348  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  5058  00034C  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  5059  000350  0E00               	movlw	low (__mediumconst shr (0+16))
  5060  000352  6EF8               	movwf	tblptru,c
  5061  000354  0E0F               	movlw	(high __ramtop+-1)
  5062  000356  64F7               	cpfsgt	tblptrh,c
  5063  000358  D003               	bra	u11707
  5064  00035A  0008               	tblrd		*
  5065  00035C  50F5               	movf	tablat,w,c
  5066  00035E  D005               	bra	u11700
  5067  000360                     u11707:
  5068  000360  CFF6 FFE9          	movff	tblptrl,fsr0l
  5069  000364  CFF7 FFEA          	movff	tblptrh,fsr0h
  5070  000368  50EF               	movf	indf0,w,c
  5071  00036A                     u11700:
  5072  00036A  0012               	return		;indir
  5073  00036C                     l7540:
  5074  00036C  0100               	movlb	0	; () banked
  5075  00036E  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  5076  000370  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  5077  000372  D028               	goto	l7548
  5078  000374                     l7542:
  5079                           
  5080                           ; BSR set to: 0
  5081  000374  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  5082  000378  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  5083  00037C  0E00               	movlw	low (__mediumconst shr (0+16))
  5084  00037E  6EF8               	movwf	tblptru,c
  5085  000380  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5086  000384  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5087  000388  CFDE F092          	movff	postinc2,??__doprnt
  5088  00038C  CFDD F093          	movff	postdec2,??__doprnt+1
  5089  000390  C092  FFD9         	movff	??__doprnt,fsr2l
  5090  000394  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5091  000398  0E0F               	movlw	(high __ramtop+-1)
  5092  00039A  64F7               	cpfsgt	tblptrh,c
  5093  00039C  D003               	bra	u11717
  5094  00039E  0008               	tblrd		*
  5095  0003A0  50F5               	movf	tablat,w,c
  5096  0003A2  D005               	bra	u11710
  5097  0003A4                     u11717:
  5098  0003A4  CFF6 FFE9          	movff	tblptrl,fsr0l
  5099  0003A8  CFF7 FFEA          	movff	tblptrh,fsr0h
  5100  0003AC  50EF               	movf	indf0,w,c
  5101  0003AE                     u11710:
  5102  0003AE  6EDF               	movwf	indf2,c
  5103  0003B0  0100               	movlb	0	; () banked
  5104  0003B2  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  5105  0003B4  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  5106                           
  5107                           ; BSR set to: 0
  5108  0003B6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5109  0003BA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5110  0003BE  2ADE               	incf	postinc2,f,c
  5111  0003C0  0E00               	movlw	0
  5112  0003C2  22DD               	addwfc	postdec2,f,c
  5113  0003C4                     l7548:
  5114                           
  5115                           ; BSR set to: 0
  5116  0003C4  0100               	movlb	0	; () banked
  5117  0003C6  0798               	decf	__doprnt@len& (0+255),f,b
  5118  0003C8  A0D8               	btfss	status,0,c
  5119  0003CA  0799               	decf	(__doprnt@len+1)& (0+255),f,b
  5120  0003CC  0100               	movlb	0	; () banked
  5121  0003CE  2998               	incf	__doprnt@len& (0+255),w,b
  5122  0003D0  E19A               	bnz	l7536
  5123  0003D2  0100               	movlb	0	; () banked
  5124  0003D4  2999               	incf	(__doprnt@len+1)& (0+255),w,b
  5125  0003D6  B4D8               	btfsc	status,2,c
  5126  0003D8  D2B5               	goto	l7682
  5127  0003DA  D795               	goto	l7536
  5128  0003DC                     l7550:
  5129                           
  5130                           ; BSR set to: 0
  5131                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5132  0003DC  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5133  0003E0  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5134  0003E4  CFDF F092          	movff	indf2,??__doprnt
  5135  0003E8  0E02               	movlw	2
  5136  0003EA  26DE               	addwf	postinc2,f,c
  5137  0003EC  CFDF F093          	movff	indf2,??__doprnt+1
  5138  0003F0  0E00               	movlw	0
  5139  0003F2  22DD               	addwfc	postdec2,f,c
  5140  0003F4  C092  FFD9         	movff	??__doprnt,fsr2l
  5141  0003F8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5142  0003FC  50DF               	movf	indf2,w,c
  5143  0003FE  0100               	movlb	0	; () banked
  5144  000400  6FA1               	movwf	__doprnt@c& (0+255),b
  5145  000402                     l7552:
  5146                           
  5147                           ; BSR set to: 0
  5148                           ;doprnt.c: 805: cp = (char *)&c;
  5149  000402  0EA1               	movlw	low __doprnt@c
  5150  000404  0100               	movlb	0	; () banked
  5151  000406  6F9A               	movwf	__doprnt@cp& (0+255),b
  5152  000408  0E00               	movlw	high __doprnt@c
  5153  00040A  0100               	movlb	0	; () banked
  5154  00040C  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  5155                           
  5156                           ; BSR set to: 0
  5157                           ;doprnt.c: 806: len = 1;
  5158  00040E  0E00               	movlw	0
  5159  000410  0100               	movlb	0	; () banked
  5160  000412  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  5161  000414  0E01               	movlw	1
  5162  000416  6F98               	movwf	__doprnt@len& (0+255),b
  5163                           
  5164                           ;doprnt.c: 807: goto dostring;
  5165  000418  D719               	goto	l7520
  5166  00041A                     l7558:
  5167  00041A  0100               	movlb	0	; () banked
  5168  00041C  518E               	movf	__doprnt@f& (0+255),w,b
  5169  00041E  0100               	movlb	0	; () banked
  5170  000420  6F92               	movwf	??__doprnt& (0+255),b
  5171  000422  0100               	movlb	0	; () banked
  5172  000424  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  5173  000426  0100               	movlb	0	; () banked
  5174  000428  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5175  00042A  0100               	movlb	0	; () banked
  5176  00042C  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5177  00042E  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5178  000430  C092  FFF6         	movff	??__doprnt,tblptrl
  5179  000434  C093  FFF7         	movff	??__doprnt+1,tblptrh
  5180  000438  0E00               	movlw	low (__mediumconst shr (0+16))
  5181  00043A  6EF8               	movwf	tblptru,c
  5182  00043C  0E0F               	movlw	(high __ramtop+-1)
  5183  00043E  64F7               	cpfsgt	tblptrh,c
  5184  000440  D003               	bra	u11737
  5185  000442  0008               	tblrd		*
  5186  000444  50F5               	movf	tablat,w,c
  5187  000446  D005               	bra	u11730
  5188  000448                     u11737:
  5189  000448  CFF6 FFE9          	movff	tblptrl,fsr0l
  5190  00044C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5191  000450  50EF               	movf	indf0,w,c
  5192  000452                     u11730:
  5193  000452  0100               	movlb	0	; () banked
  5194  000454  6FA1               	movwf	__doprnt@c& (0+255),b
  5195  000456  0100               	movlb	0	; () banked
  5196  000458  51A1               	movf	__doprnt@c& (0+255),w,b
  5197                           
  5198                           ; Switch size 1, requested type "space"
  5199                           ; Number of cases is 6, Range of values is 0 to 120
  5200                           ; switch strategies available:
  5201                           ; Name         Instructions Cycles
  5202                           ; simple_byte           19    10 (average)
  5203                           ;	Chosen strategy is simple_byte
  5204  00045A  0A00               	xorlw	0	; case 0
  5205  00045C  B4D8               	btfsc	status,2,c
  5206  00045E  D295               	goto	l7684
  5207  000460  0A63               	xorlw	99	; case 99
  5208  000462  B4D8               	btfsc	status,2,c
  5209  000464  D7BB               	goto	l7550
  5210  000466  0A07               	xorlw	7	; case 100
  5211  000468  B4D8               	btfsc	status,2,c
  5212  00046A  D00A               	goto	l503
  5213  00046C  0A0D               	xorlw	13	; case 105
  5214  00046E  B4D8               	btfsc	status,2,c
  5215  000470  D007               	goto	l503
  5216  000472  0A1A               	xorlw	26	; case 115
  5217  000474  B4D8               	btfsc	status,2,c
  5218  000476  D6A1               	goto	l7508
  5219  000478  0A0B               	xorlw	11	; case 120
  5220  00047A  B4D8               	btfsc	status,2,c
  5221  00047C  D69B               	goto	l7506
  5222  00047E  D7C1               	goto	l7552
  5223  000480                     l503:
  5224                           
  5225                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5226  000480  0100               	movlb	0	; () banked
  5227  000482  BF9E               	btfsc	__doprnt@flag& (0+255),7,b
  5228  000484  D020               	goto	l7568
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;doprnt.c: 1253: {
  5232                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5233  000486  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5234  00048A  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5235  00048E  CFDF F092          	movff	indf2,??__doprnt
  5236  000492  0E02               	movlw	2
  5237  000494  26DE               	addwf	postinc2,f,c
  5238  000496  CFDF F093          	movff	indf2,??__doprnt+1
  5239  00049A  0E00               	movlw	0
  5240  00049C  22DD               	addwfc	postdec2,f,c
  5241  00049E  C092  FFD9         	movff	??__doprnt,fsr2l
  5242  0004A2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5243  0004A6  CFDE F09C          	movff	postinc2,__doprnt@val
  5244  0004AA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  5245                           
  5246                           ; BSR set to: 0
  5247                           ;doprnt.c: 1261: if((int)val < 0) {
  5248  0004AE  0100               	movlb	0	; () banked
  5249  0004B0  AF9D               	btfss	(__doprnt@val+1)& (0+255),7,b
  5250  0004B2  D060               	goto	l7600
  5251                           
  5252                           ; BSR set to: 0
  5253                           ;doprnt.c: 1262: flag |= 0x03;
  5254  0004B4  0E03               	movlw	3
  5255  0004B6  0100               	movlb	0	; () banked
  5256  0004B8  139E               	iorwf	__doprnt@flag& (0+255),f,b
  5257                           
  5258                           ; BSR set to: 0
  5259                           ;doprnt.c: 1263: val = -val;
  5260  0004BA  0100               	movlb	0	; () banked
  5261  0004BC  6D9C               	negf	__doprnt@val& (0+255),b
  5262  0004BE  1F9D               	comf	(__doprnt@val+1)& (0+255),f,b
  5263  0004C0  B0D8               	btfsc	status,0,c
  5264  0004C2  2B9D               	incf	(__doprnt@val+1)& (0+255),f,b
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;doprnt.c: 1264: }
  5268                           ;doprnt.c: 1266: }
  5269  0004C4  D057               	goto	l7600
  5270  0004C6                     l7568:
  5271                           
  5272                           ; BSR set to: 0
  5273                           ;doprnt.c: 1268: else
  5274                           ;doprnt.c: 1273: {
  5275                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5276  0004C6  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5277  0004CA  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5278  0004CE  CFDF F092          	movff	indf2,??__doprnt
  5279  0004D2  0E02               	movlw	2
  5280  0004D4  26DE               	addwf	postinc2,f,c
  5281  0004D6  CFDF F093          	movff	indf2,??__doprnt+1
  5282  0004DA  0E00               	movlw	0
  5283  0004DC  22DD               	addwfc	postdec2,f,c
  5284  0004DE  C092  FFD9         	movff	??__doprnt,fsr2l
  5285  0004E2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5286  0004E6  CFDE F09C          	movff	postinc2,__doprnt@val
  5287  0004EA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  5288                           
  5289                           ; BSR set to: 0
  5290                           ;doprnt.c: 1287: }
  5291                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5292  0004EE  D042               	goto	l7600
  5293  0004F0                     l7570:
  5294                           
  5295                           ; BSR set to: 0
  5296                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5297  0004F0  0E01               	movlw	1
  5298  0004F2  0100               	movlb	0	; () banked
  5299  0004F4  6FA1               	movwf	__doprnt@c& (0+255),b
  5300  0004F6                     l7572:
  5301                           
  5302                           ; BSR set to: 0
  5303  0004F6  0E05               	movlw	5
  5304  0004F8  0100               	movlb	0	; () banked
  5305  0004FA  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5306  0004FC  B4D8               	btfsc	status,2,c
  5307  0004FE  D043               	goto	l7602
  5308                           
  5309                           ; BSR set to: 0
  5310                           ;doprnt.c: 1306: if(val < dpowers[c])
  5311                           
  5312                           ; BSR set to: 0
  5313                           
  5314                           ; BSR set to: 0
  5315  000500  0100               	movlb	0	; () banked
  5316  000502  51A1               	movf	__doprnt@c& (0+255),w,b
  5317  000504  0D02               	mullw	2
  5318  000506  0EF6               	movlw	low _dpowers
  5319  000508  24F3               	addwf	prodl,w,c
  5320  00050A  6EF6               	movwf	tblptrl,c
  5321  00050C  0EFE               	movlw	high _dpowers
  5322  00050E  20F4               	addwfc	prodh,w,c
  5323  000510  6EF7               	movwf	tblptrh,c
  5324  000512                     	if	1	;There are 3 active tblptr bytes
  5325  000512  6AF8               	clrf	tblptru,c
  5326  000514  0E00               	movlw	low (__mediumconst shr (0+16))
  5327  000516  22F8               	addwfc	tblptru,f,c
  5328  000518                     	endif
  5329  000518  0009               	tblrd		*+
  5330  00051A  50F5               	movf	tablat,w,c
  5331  00051C  0100               	movlb	0	; () banked
  5332  00051E  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5333  000520  0009               	tblrd		*+
  5334  000522  50F5               	movf	tablat,w,c
  5335  000524  0100               	movlb	0	; () banked
  5336  000526  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5337  000528  A0D8               	btfss	status,0,c
  5338  00052A  D02D               	goto	l7602
  5339                           
  5340                           ; BSR set to: 0
  5341                           
  5342                           ; BSR set to: 0
  5343                           
  5344                           ; BSR set to: 0
  5345                           ;doprnt.c: 1307: break;
  5346  00052C  0100               	movlb	0	; () banked
  5347  00052E  2BA1               	incf	__doprnt@c& (0+255),f,b
  5348  000530  D7E2               	goto	l7572
  5349  000532                     l7584:
  5350                           
  5351                           ; BSR set to: 0
  5352                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5353  000532  0E01               	movlw	1
  5354  000534  0100               	movlb	0	; () banked
  5355  000536  6FA1               	movwf	__doprnt@c& (0+255),b
  5356  000538                     l7586:
  5357                           
  5358                           ; BSR set to: 0
  5359  000538  0E04               	movlw	4
  5360  00053A  0100               	movlb	0	; () banked
  5361  00053C  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5362  00053E  B4D8               	btfsc	status,2,c
  5363  000540  D022               	goto	l7602
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5367                           
  5368                           ; BSR set to: 0
  5369                           
  5370                           ; BSR set to: 0
  5371  000542  0100               	movlb	0	; () banked
  5372  000544  51A1               	movf	__doprnt@c& (0+255),w,b
  5373  000546  0D02               	mullw	2
  5374  000548  0E00               	movlw	low _hexpowers
  5375  00054A  24F3               	addwf	prodl,w,c
  5376  00054C  6EF6               	movwf	tblptrl,c
  5377  00054E  0EFF               	movlw	high _hexpowers
  5378  000550  20F4               	addwfc	prodh,w,c
  5379  000552  6EF7               	movwf	tblptrh,c
  5380  000554                     	if	1	;There are 3 active tblptr bytes
  5381  000554  6AF8               	clrf	tblptru,c
  5382  000556  0E00               	movlw	low (__mediumconst shr (0+16))
  5383  000558  22F8               	addwfc	tblptru,f,c
  5384  00055A                     	endif
  5385  00055A  0009               	tblrd		*+
  5386  00055C  50F5               	movf	tablat,w,c
  5387  00055E  0100               	movlb	0	; () banked
  5388  000560  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5389  000562  0009               	tblrd		*+
  5390  000564  50F5               	movf	tablat,w,c
  5391  000566  0100               	movlb	0	; () banked
  5392  000568  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5393  00056A  A0D8               	btfss	status,0,c
  5394  00056C  D00C               	goto	l7602
  5395                           
  5396                           ; BSR set to: 0
  5397                           
  5398                           ; BSR set to: 0
  5399                           
  5400                           ; BSR set to: 0
  5401                           ;doprnt.c: 1318: break;
  5402  00056E  0100               	movlb	0	; () banked
  5403  000570  2BA1               	incf	__doprnt@c& (0+255),f,b
  5404  000572  D7E2               	goto	l7586
  5405  000574                     l7600:
  5406                           
  5407                           ; BSR set to: 0
  5408  000574  0100               	movlb	0	; () banked
  5409  000576  519E               	movf	__doprnt@flag& (0+255),w,b
  5410  000578  0B80               	andlw	128
  5411                           
  5412                           ; Switch size 1, requested type "space"
  5413                           ; Number of cases is 2, Range of values is 0 to 128
  5414                           ; switch strategies available:
  5415                           ; Name         Instructions Cycles
  5416                           ; simple_byte            7     4 (average)
  5417                           ;	Chosen strategy is simple_byte
  5418  00057A  0A00               	xorlw	0	; case 0
  5419  00057C  B4D8               	btfsc	status,2,c
  5420  00057E  D7B8               	goto	l7570
  5421  000580  0A80               	xorlw	128	; case 128
  5422  000582  B4D8               	btfsc	status,2,c
  5423  000584  D7D6               	goto	l7584
  5424  000586                     l7602:
  5425                           
  5426                           ; BSR set to: 0
  5427                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5428  000586  0100               	movlb	0	; () banked
  5429  000588  519F               	movf	__doprnt@width& (0+255),w,b
  5430  00058A  0100               	movlb	0	; () banked
  5431  00058C  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5432  00058E  B4D8               	btfsc	status,2,c
  5433  000590  D00B               	goto	l7608
  5434                           
  5435                           ; BSR set to: 0
  5436  000592  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5437  000596  0E03               	movlw	3
  5438  000598  0100               	movlb	0	; () banked
  5439  00059A  1792               	andwf	??__doprnt& (0+255),f,b
  5440  00059C  B4D8               	btfsc	status,2,c
  5441  00059E  D004               	goto	l7608
  5442                           
  5443                           ; BSR set to: 0
  5444                           ;doprnt.c: 1346: width--;
  5445  0005A0  0100               	movlb	0	; () banked
  5446  0005A2  079F               	decf	__doprnt@width& (0+255),f,b
  5447  0005A4  A0D8               	btfss	status,0,c
  5448  0005A6  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5449  0005A8                     l7608:
  5450                           
  5451                           ; BSR set to: 0
  5452                           ;doprnt.c: 1381: if(width > c)
  5453  0005A8  0E80               	movlw	128
  5454  0005AA  0100               	movlb	0	; () banked
  5455  0005AC  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  5456  0005AE  0E7F               	movlw	127
  5457  0005B0  0100               	movlb	0	; () banked
  5458  0005B2  6F92               	movwf	??__doprnt& (0+255),b
  5459  0005B4  0100               	movlb	0	; () banked
  5460  0005B6  519F               	movf	__doprnt@width& (0+255),w,b
  5461  0005B8  0100               	movlb	0	; () banked
  5462  0005BA  5DA1               	subwf	__doprnt@c& (0+255),w,b
  5463  0005BC  0100               	movlb	0	; () banked
  5464  0005BE  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  5465  0005C0  0A80               	xorlw	128
  5466  0005C2  0100               	movlb	0	; () banked
  5467  0005C4  5992               	subwfb	??__doprnt& (0+255),w,b
  5468  0005C6  B0D8               	btfsc	status,0,c
  5469  0005C8  D00B               	goto	l7612
  5470                           
  5471                           ; BSR set to: 0
  5472                           ;doprnt.c: 1382: width -= c;
  5473  0005CA  0100               	movlb	0	; () banked
  5474  0005CC  51A1               	movf	__doprnt@c& (0+255),w,b
  5475  0005CE  0100               	movlb	0	; () banked
  5476  0005D0  5F9F               	subwf	__doprnt@width& (0+255),f,b
  5477  0005D2  0E00               	movlw	0
  5478  0005D4  0100               	movlb	0	; () banked
  5479  0005D6  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  5480  0005D8  0EFF               	movlw	255
  5481  0005DA  0100               	movlb	0	; () banked
  5482  0005DC  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5483  0005DE  D005               	goto	l7614
  5484  0005E0                     l7612:
  5485                           
  5486                           ; BSR set to: 0
  5487                           ;doprnt.c: 1383: else
  5488                           ;doprnt.c: 1384: width = 0;
  5489  0005E0  0E00               	movlw	0
  5490  0005E2  0100               	movlb	0	; () banked
  5491  0005E4  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5492  0005E6  0E00               	movlw	0
  5493  0005E8  6F9F               	movwf	__doprnt@width& (0+255),b
  5494  0005EA                     l7614:
  5495                           
  5496                           ; BSR set to: 0
  5497                           ;doprnt.c: 1387: if(flag & 0x04) {
  5498  0005EA  0100               	movlb	0	; () banked
  5499  0005EC  A59E               	btfss	__doprnt@flag& (0+255),2,b
  5500  0005EE  D082               	goto	l7638
  5501                           
  5502                           ; BSR set to: 0
  5503                           ;doprnt.c: 1392: if(flag & 0x03)
  5504  0005F0  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5505  0005F4  0E03               	movlw	3
  5506  0005F6  0100               	movlb	0	; () banked
  5507  0005F8  1792               	andwf	??__doprnt& (0+255),f,b
  5508  0005FA  B4D8               	btfsc	status,2,c
  5509  0005FC  D038               	goto	l7626
  5510                           
  5511                           ; BSR set to: 0
  5512                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5513  0005FE  0100               	movlb	0	; () banked
  5514  000600  EE20 F002          	lfsr	2,2
  5515  000604  518C               	movf	__doprnt@pb& (0+255),w,b
  5516  000606  26D9               	addwf	fsr2l,f,c
  5517  000608  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5518  00060A  22DA               	addwfc	fsr2h,f,c
  5519  00060C  50DE               	movf	postinc2,w,c
  5520  00060E  10DE               	iorwf	postinc2,w,c
  5521  000610  B4D8               	btfsc	status,2,c
  5522  000612  D018               	goto	l7622
  5523                           
  5524                           ; BSR set to: 0
  5525  000614  0100               	movlb	0	; () banked
  5526  000616  EE20 F002          	lfsr	2,2
  5527  00061A  518C               	movf	__doprnt@pb& (0+255),w,b
  5528  00061C  26D9               	addwf	fsr2l,f,c
  5529  00061E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5530  000620  22DA               	addwfc	fsr2h,f,c
  5531  000622  CFDE F092          	movff	postinc2,??__doprnt
  5532  000626  CFDD F093          	movff	postdec2,??__doprnt+1
  5533  00062A  D801               	call	u11888
  5534  00062C  D020               	goto	l7626
  5535  00062E                     u11888:
  5536  00062E  0005               	push	
  5537  000630  6EFA               	movwf	pclath,c
  5538  000632  0100               	movlb	0	; () banked
  5539  000634  5192               	movf	??__doprnt& (0+255),w,b
  5540  000636  6EFD               	movwf	tosl,c
  5541  000638  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5542  00063A  6EFE               	movwf	tosh,c
  5543  00063C  6AFF               	clrf	tosu,c
  5544  00063E  50FA               	movf	pclath,w,c
  5545  000640  0E2D               	movlw	45
  5546  000642  0012               	return		;indir
  5547  000644                     l7622:
  5548  000644  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5549  000648  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5550  00064C  CFDE F092          	movff	postinc2,??__doprnt
  5551  000650  CFDD F093          	movff	postdec2,??__doprnt+1
  5552  000654  C092  FFD9         	movff	??__doprnt,fsr2l
  5553  000658  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5554  00065C  0E2D               	movlw	45
  5555  00065E  6EDF               	movwf	indf2,c
  5556  000660  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5557  000664  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5558  000668  2ADE               	incf	postinc2,f,c
  5559  00066A  0E00               	movlw	0
  5560  00066C  22DD               	addwfc	postdec2,f,c
  5561  00066E                     l7626:
  5562                           
  5563                           ;doprnt.c: 1415: if(width)
  5564  00066E  0100               	movlb	0	; () banked
  5565  000670  519F               	movf	__doprnt@width& (0+255),w,b
  5566  000672  0100               	movlb	0	; () banked
  5567  000674  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5568  000676  B4D8               	btfsc	status,2,c
  5569  000678  D0C4               	goto	l7660
  5570                           
  5571                           ; BSR set to: 0
  5572                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  5573                           
  5574                           ; BSR set to: 0
  5575                           
  5576                           ;doprnt.c: 1416: do
  5577  00067A  0100               	movlb	0	; () banked
  5578  00067C  EE20 F002          	lfsr	2,2
  5579  000680  518C               	movf	__doprnt@pb& (0+255),w,b
  5580  000682  26D9               	addwf	fsr2l,f,c
  5581  000684  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5582  000686  22DA               	addwfc	fsr2h,f,c
  5583  000688  50DE               	movf	postinc2,w,c
  5584  00068A  10DE               	iorwf	postinc2,w,c
  5585  00068C  B4D8               	btfsc	status,2,c
  5586  00068E  D018               	goto	l7632
  5587                           
  5588                           ; BSR set to: 0
  5589  000690  0100               	movlb	0	; () banked
  5590  000692  EE20 F002          	lfsr	2,2
  5591  000696  518C               	movf	__doprnt@pb& (0+255),w,b
  5592  000698  26D9               	addwf	fsr2l,f,c
  5593  00069A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5594  00069C  22DA               	addwfc	fsr2h,f,c
  5595  00069E  CFDE F092          	movff	postinc2,??__doprnt
  5596  0006A2  CFDD F093          	movff	postdec2,??__doprnt+1
  5597  0006A6  D801               	call	u11918
  5598  0006A8  D020               	goto	l7636
  5599  0006AA                     u11918:
  5600  0006AA  0005               	push	
  5601  0006AC  6EFA               	movwf	pclath,c
  5602  0006AE  0100               	movlb	0	; () banked
  5603  0006B0  5192               	movf	??__doprnt& (0+255),w,b
  5604  0006B2  6EFD               	movwf	tosl,c
  5605  0006B4  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5606  0006B6  6EFE               	movwf	tosh,c
  5607  0006B8  6AFF               	clrf	tosu,c
  5608  0006BA  50FA               	movf	pclath,w,c
  5609  0006BC  0E30               	movlw	48
  5610  0006BE  0012               	return		;indir
  5611  0006C0                     l7632:
  5612  0006C0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5613  0006C4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5614  0006C8  CFDE F092          	movff	postinc2,??__doprnt
  5615  0006CC  CFDD F093          	movff	postdec2,??__doprnt+1
  5616  0006D0  C092  FFD9         	movff	??__doprnt,fsr2l
  5617  0006D4  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5618  0006D8  0E30               	movlw	48
  5619  0006DA  6EDF               	movwf	indf2,c
  5620  0006DC  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5621  0006E0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5622  0006E4  2ADE               	incf	postinc2,f,c
  5623  0006E6  0E00               	movlw	0
  5624  0006E8  22DD               	addwfc	postdec2,f,c
  5625  0006EA                     l7636:
  5626                           
  5627                           ;doprnt.c: 1418: while(--width);
  5628  0006EA  0100               	movlb	0	; () banked
  5629  0006EC  079F               	decf	__doprnt@width& (0+255),f,b
  5630  0006EE  A0D8               	btfss	status,0,c
  5631  0006F0  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5632  0006F2  D7BD               	goto	l7626
  5633  0006F4                     l7638:
  5634                           
  5635                           ; BSR set to: 0
  5636                           ;doprnt.c: 1422: {
  5637                           ;doprnt.c: 1424: if(width
  5638                           ;doprnt.c: 1428: )
  5639  0006F4  0100               	movlb	0	; () banked
  5640  0006F6  519F               	movf	__doprnt@width& (0+255),w,b
  5641  0006F8  0100               	movlb	0	; () banked
  5642  0006FA  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5643  0006FC  B4D8               	btfsc	status,2,c
  5644  0006FE  D042               	goto	l7650
  5645  000700                     l7640:
  5646                           
  5647                           ; BSR set to: 0
  5648                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5649  000700  0100               	movlb	0	; () banked
  5650  000702  EE20 F002          	lfsr	2,2
  5651  000706  518C               	movf	__doprnt@pb& (0+255),w,b
  5652  000708  26D9               	addwf	fsr2l,f,c
  5653  00070A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5654  00070C  22DA               	addwfc	fsr2h,f,c
  5655  00070E  50DE               	movf	postinc2,w,c
  5656  000710  10DE               	iorwf	postinc2,w,c
  5657  000712  B4D8               	btfsc	status,2,c
  5658  000714  D018               	goto	l7644
  5659                           
  5660                           ; BSR set to: 0
  5661  000716  0100               	movlb	0	; () banked
  5662  000718  EE20 F002          	lfsr	2,2
  5663  00071C  518C               	movf	__doprnt@pb& (0+255),w,b
  5664  00071E  26D9               	addwf	fsr2l,f,c
  5665  000720  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5666  000722  22DA               	addwfc	fsr2h,f,c
  5667  000724  CFDE F092          	movff	postinc2,??__doprnt
  5668  000728  CFDD F093          	movff	postdec2,??__doprnt+1
  5669  00072C  D801               	call	u11958
  5670  00072E  D020               	goto	l7648
  5671  000730                     u11958:
  5672  000730  0005               	push	
  5673  000732  6EFA               	movwf	pclath,c
  5674  000734  0100               	movlb	0	; () banked
  5675  000736  5192               	movf	??__doprnt& (0+255),w,b
  5676  000738  6EFD               	movwf	tosl,c
  5677  00073A  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5678  00073C  6EFE               	movwf	tosh,c
  5679  00073E  6AFF               	clrf	tosu,c
  5680  000740  50FA               	movf	pclath,w,c
  5681  000742  0E20               	movlw	32
  5682  000744  0012               	return		;indir
  5683  000746                     l7644:
  5684  000746  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5685  00074A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5686  00074E  CFDE F092          	movff	postinc2,??__doprnt
  5687  000752  CFDD F093          	movff	postdec2,??__doprnt+1
  5688  000756  C092  FFD9         	movff	??__doprnt,fsr2l
  5689  00075A  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5690  00075E  0E20               	movlw	32
  5691  000760  6EDF               	movwf	indf2,c
  5692  000762  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5693  000766  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5694  00076A  2ADE               	incf	postinc2,f,c
  5695  00076C  0E00               	movlw	0
  5696  00076E  22DD               	addwfc	postdec2,f,c
  5697  000770                     l7648:
  5698                           
  5699                           ;doprnt.c: 1431: while(--width);
  5700  000770  0100               	movlb	0	; () banked
  5701  000772  079F               	decf	__doprnt@width& (0+255),f,b
  5702  000774  A0D8               	btfss	status,0,c
  5703  000776  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5704  000778  0100               	movlb	0	; () banked
  5705  00077A  519F               	movf	__doprnt@width& (0+255),w,b
  5706  00077C  0100               	movlb	0	; () banked
  5707  00077E  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5708  000780  A4D8               	btfss	status,2,c
  5709  000782  D7BE               	goto	l7640
  5710  000784                     l7650:
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;doprnt.c: 1438: if(flag & 0x03)
  5714  000784  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5715  000788  0E03               	movlw	3
  5716  00078A  0100               	movlb	0	; () banked
  5717  00078C  1792               	andwf	??__doprnt& (0+255),f,b
  5718  00078E  B4D8               	btfsc	status,2,c
  5719  000790  D038               	goto	l7660
  5720                           
  5721                           ; BSR set to: 0
  5722                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5723  000792  0100               	movlb	0	; () banked
  5724  000794  EE20 F002          	lfsr	2,2
  5725  000798  518C               	movf	__doprnt@pb& (0+255),w,b
  5726  00079A  26D9               	addwf	fsr2l,f,c
  5727  00079C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5728  00079E  22DA               	addwfc	fsr2h,f,c
  5729  0007A0  50DE               	movf	postinc2,w,c
  5730  0007A2  10DE               	iorwf	postinc2,w,c
  5731  0007A4  B4D8               	btfsc	status,2,c
  5732  0007A6  D018               	goto	l7656
  5733                           
  5734                           ; BSR set to: 0
  5735  0007A8  0100               	movlb	0	; () banked
  5736  0007AA  EE20 F002          	lfsr	2,2
  5737  0007AE  518C               	movf	__doprnt@pb& (0+255),w,b
  5738  0007B0  26D9               	addwf	fsr2l,f,c
  5739  0007B2  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5740  0007B4  22DA               	addwfc	fsr2h,f,c
  5741  0007B6  CFDE F092          	movff	postinc2,??__doprnt
  5742  0007BA  CFDD F093          	movff	postdec2,??__doprnt+1
  5743  0007BE  D801               	call	u11998
  5744  0007C0  D020               	goto	l7660
  5745  0007C2                     u11998:
  5746  0007C2  0005               	push	
  5747  0007C4  6EFA               	movwf	pclath,c
  5748  0007C6  0100               	movlb	0	; () banked
  5749  0007C8  5192               	movf	??__doprnt& (0+255),w,b
  5750  0007CA  6EFD               	movwf	tosl,c
  5751  0007CC  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5752  0007CE  6EFE               	movwf	tosh,c
  5753  0007D0  6AFF               	clrf	tosu,c
  5754  0007D2  50FA               	movf	pclath,w,c
  5755  0007D4  0E2D               	movlw	45
  5756  0007D6  0012               	return		;indir
  5757  0007D8                     l7656:
  5758  0007D8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5759  0007DC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5760  0007E0  CFDE F092          	movff	postinc2,??__doprnt
  5761  0007E4  CFDD F093          	movff	postdec2,??__doprnt+1
  5762  0007E8  C092  FFD9         	movff	??__doprnt,fsr2l
  5763  0007EC  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5764  0007F0  0E2D               	movlw	45
  5765  0007F2  6EDF               	movwf	indf2,c
  5766  0007F4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5767  0007F8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5768  0007FC  2ADE               	incf	postinc2,f,c
  5769  0007FE  0E00               	movlw	0
  5770  000800  22DD               	addwfc	postdec2,f,c
  5771  000802                     l7660:
  5772                           
  5773                           ;doprnt.c: 1469: }
  5774                           ;doprnt.c: 1472: prec = c;
  5775  000802  C0A1  F097         	movff	__doprnt@c,__doprnt@prec
  5776                           
  5777                           ;doprnt.c: 1474: while(prec--) {
  5778  000806  D098               	goto	l7680
  5779  000808                     l7662:
  5780                           
  5781                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5782  000808  0100               	movlb	0	; () banked
  5783  00080A  5197               	movf	__doprnt@prec& (0+255),w,b
  5784  00080C  0D02               	mullw	2
  5785  00080E  0EF6               	movlw	low _dpowers
  5786  000810  24F3               	addwf	prodl,w,c
  5787  000812  6EF6               	movwf	tblptrl,c
  5788  000814  0EFE               	movlw	high _dpowers
  5789  000816  20F4               	addwfc	prodh,w,c
  5790  000818  6EF7               	movwf	tblptrh,c
  5791  00081A                     	if	1	;There are 3 active tblptr bytes
  5792  00081A  6AF8               	clrf	tblptru,c
  5793  00081C  0E00               	movlw	low (__mediumconst shr (0+16))
  5794  00081E  22F8               	addwfc	tblptru,f,c
  5795  000820                     	endif
  5796  000820  0009               	tblrd		*+
  5797  000822  CFF5 F082          	movff	tablat,___lwdiv@divisor
  5798  000826  000A               	tblrd		*-
  5799  000828  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  5800  00082C  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  5801  000830  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  5802  000834  ECD4  F018         	call	___lwdiv
  5803  000838  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  5804  00083C  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  5805  000840  0E00               	movlw	0
  5806  000842  0100               	movlb	0	; () banked
  5807  000844  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  5808  000846  0E0A               	movlw	10
  5809  000848  6F89               	movwf	___lwmod@divisor& (0+255),b
  5810  00084A  EC7C  F019         	call	___lwmod	;wreg free
  5811  00084E  0100               	movlb	0	; () banked
  5812  000850  5187               	movf	?___lwmod& (0+255),w,b
  5813  000852  0F30               	addlw	48
  5814  000854  0100               	movlb	0	; () banked
  5815  000856  6FA1               	movwf	__doprnt@c& (0+255),b
  5816                           
  5817                           ;doprnt.c: 1491: break;
  5818  000858  D036               	goto	l7672
  5819  00085A                     l7664:
  5820                           
  5821                           ; BSR set to: 0
  5822                           ;doprnt.c: 1499: {
  5823                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5824  00085A  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  5825  00085E  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  5826  000862  0100               	movlb	0	; () banked
  5827  000864  5197               	movf	__doprnt@prec& (0+255),w,b
  5828  000866  0D02               	mullw	2
  5829  000868  0E00               	movlw	low _hexpowers
  5830  00086A  24F3               	addwf	prodl,w,c
  5831  00086C  6EF6               	movwf	tblptrl,c
  5832  00086E  0EFF               	movlw	high _hexpowers
  5833  000870  20F4               	addwfc	prodh,w,c
  5834  000872  6EF7               	movwf	tblptrh,c
  5835  000874                     	if	1	;There are 3 active tblptr bytes
  5836  000874  6AF8               	clrf	tblptru,c
  5837  000876  0E00               	movlw	low (__mediumconst shr (0+16))
  5838  000878  22F8               	addwfc	tblptru,f,c
  5839  00087A                     	endif
  5840  00087A  0009               	tblrd		*+
  5841  00087C  CFF5 F082          	movff	tablat,___lwdiv@divisor
  5842  000880  000A               	tblrd		*-
  5843  000882  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  5844  000886  ECD4  F018         	call	___lwdiv	;wreg free
  5845  00088A  0100               	movlb	0	; () banked
  5846  00088C  5180               	movf	?___lwdiv& (0+255),w,b
  5847  00088E  0B0F               	andlw	15
  5848  000890  0100               	movlb	0	; () banked
  5849  000892  6F96               	movwf	__doprnt@idx& (0+255),b
  5850                           
  5851                           ; BSR set to: 0
  5852                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5853  000894  0100               	movlb	0	; () banked
  5854  000896  5196               	movf	__doprnt@idx& (0+255),w,b
  5855  000898  0D01               	mullw	1
  5856  00089A  0E8E               	movlw	low STR_19
  5857  00089C  24F3               	addwf	prodl,w,c
  5858  00089E  6EF6               	movwf	tblptrl,c
  5859  0008A0  0EFF               	movlw	high STR_19
  5860  0008A2  20F4               	addwfc	prodh,w,c
  5861  0008A4  6EF7               	movwf	tblptrh,c
  5862  0008A6                     	if	1	;There are 3 active tblptr bytes
  5863  0008A6  6AF8               	clrf	tblptru,c
  5864  0008A8  0E00               	movlw	low (__mediumconst shr (0+16))
  5865  0008AA  22F8               	addwfc	tblptru,f,c
  5866  0008AC                     	endif
  5867  0008AC  0008               	tblrd		*
  5868  0008AE  CFF5 F0A1          	movff	tablat,__doprnt@c
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;doprnt.c: 1523: }
  5872                           
  5873                           ;doprnt.c: 1508: }
  5874                           ;doprnt.c: 1510: break;
  5875  0008B2  D009               	goto	l7672
  5876  0008B4                     l7670:
  5877  0008B4  0100               	movlb	0	; () banked
  5878  0008B6  519E               	movf	__doprnt@flag& (0+255),w,b
  5879  0008B8  0B80               	andlw	128
  5880                           
  5881                           ; Switch size 1, requested type "space"
  5882                           ; Number of cases is 2, Range of values is 0 to 128
  5883                           ; switch strategies available:
  5884                           ; Name         Instructions Cycles
  5885                           ; simple_byte            7     4 (average)
  5886                           ;	Chosen strategy is simple_byte
  5887  0008BA  0A00               	xorlw	0	; case 0
  5888  0008BC  B4D8               	btfsc	status,2,c
  5889  0008BE  D7A4               	goto	l7662
  5890  0008C0  0A80               	xorlw	128	; case 128
  5891  0008C2  B4D8               	btfsc	status,2,c
  5892  0008C4  D7CA               	goto	l7664
  5893  0008C6                     l7672:
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  5897  0008C6  0100               	movlb	0	; () banked
  5898  0008C8  EE20 F002          	lfsr	2,2
  5899  0008CC  518C               	movf	__doprnt@pb& (0+255),w,b
  5900  0008CE  26D9               	addwf	fsr2l,f,c
  5901  0008D0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5902  0008D2  22DA               	addwfc	fsr2h,f,c
  5903  0008D4  50DE               	movf	postinc2,w,c
  5904  0008D6  10DE               	iorwf	postinc2,w,c
  5905  0008D8  B4D8               	btfsc	status,2,c
  5906  0008DA  D019               	goto	l7676
  5907                           
  5908                           ; BSR set to: 0
  5909  0008DC  0100               	movlb	0	; () banked
  5910  0008DE  EE20 F002          	lfsr	2,2
  5911  0008E2  518C               	movf	__doprnt@pb& (0+255),w,b
  5912  0008E4  26D9               	addwf	fsr2l,f,c
  5913  0008E6  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5914  0008E8  22DA               	addwfc	fsr2h,f,c
  5915  0008EA  CFDE F092          	movff	postinc2,??__doprnt
  5916  0008EE  CFDD F093          	movff	postdec2,??__doprnt+1
  5917  0008F2  D801               	call	u12018
  5918  0008F4  D021               	goto	l7680
  5919  0008F6                     u12018:
  5920  0008F6  0005               	push	
  5921  0008F8  6EFA               	movwf	pclath,c
  5922  0008FA  0100               	movlb	0	; () banked
  5923  0008FC  5192               	movf	??__doprnt& (0+255),w,b
  5924  0008FE  6EFD               	movwf	tosl,c
  5925  000900  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5926  000902  6EFE               	movwf	tosh,c
  5927  000904  6AFF               	clrf	tosu,c
  5928  000906  50FA               	movf	pclath,w,c
  5929  000908  0100               	movlb	0	; () banked
  5930  00090A  51A1               	movf	__doprnt@c& (0+255),w,b
  5931  00090C  0012               	return		;indir
  5932  00090E                     l7676:
  5933  00090E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5934  000912  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5935  000916  CFDE F092          	movff	postinc2,??__doprnt
  5936  00091A  CFDD F093          	movff	postdec2,??__doprnt+1
  5937  00091E  C092  FFD9         	movff	??__doprnt,fsr2l
  5938  000922  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5939  000926  C0A1  FFDF         	movff	__doprnt@c,indf2
  5940  00092A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5941  00092E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5942  000932  2ADE               	incf	postinc2,f,c
  5943  000934  0E00               	movlw	0
  5944  000936  22DD               	addwfc	postdec2,f,c
  5945  000938                     l7680:
  5946  000938  0100               	movlb	0	; () banked
  5947  00093A  0797               	decf	__doprnt@prec& (0+255),f,b
  5948  00093C  0100               	movlb	0	; () banked
  5949  00093E  2997               	incf	__doprnt@prec& (0+255),w,b
  5950  000940  A4D8               	btfss	status,2,c
  5951  000942  D7B8               	goto	l7670
  5952  000944                     l7682:
  5953  000944  0100               	movlb	0	; () banked
  5954  000946  518E               	movf	__doprnt@f& (0+255),w,b
  5955  000948  0100               	movlb	0	; () banked
  5956  00094A  6F92               	movwf	??__doprnt& (0+255),b
  5957  00094C  0100               	movlb	0	; () banked
  5958  00094E  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  5959  000950  0100               	movlb	0	; () banked
  5960  000952  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5961  000954  0100               	movlb	0	; () banked
  5962  000956  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5963  000958  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5964  00095A  C092  FFF6         	movff	??__doprnt,tblptrl
  5965  00095E  C093  FFF7         	movff	??__doprnt+1,tblptrh
  5966  000962  0E00               	movlw	low (__mediumconst shr (0+16))
  5967  000964  6EF8               	movwf	tblptru,c
  5968  000966  0E0F               	movlw	(high __ramtop+-1)
  5969  000968  64F7               	cpfsgt	tblptrh,c
  5970  00096A  D003               	bra	u12037
  5971  00096C  0008               	tblrd		*
  5972  00096E  50F5               	movf	tablat,w,c
  5973  000970  D005               	bra	u12030
  5974  000972                     u12037:
  5975  000972  CFF6 FFE9          	movff	tblptrl,fsr0l
  5976  000976  CFF7 FFEA          	movff	tblptrh,fsr0h
  5977  00097A  50EF               	movf	indf0,w,c
  5978  00097C                     u12030:
  5979  00097C  0100               	movlb	0	; () banked
  5980  00097E  6FA1               	movwf	__doprnt@c& (0+255),b
  5981  000980  0100               	movlb	0	; () banked
  5982  000982  51A1               	movf	__doprnt@c& (0+255),w,b
  5983  000984  A4D8               	btfss	status,2,c
  5984  000986  EF0B  F000         	goto	l7476
  5985  00098A                     l7684:
  5986                           
  5987                           ;doprnt.c: 1540: return 0;
  5988  00098A  0E00               	movlw	0
  5989  00098C  0100               	movlb	0	; () banked
  5990  00098E  6F8D               	movwf	(?__doprnt+1)& (0+255),b
  5991  000990  0E00               	movlw	0
  5992  000992  6F8C               	movwf	?__doprnt& (0+255),b
  5993  000994  0012               	return	
  5994  000996                     __end_of__doprnt:
  5995                           	opt stack 0
  5996                           tosu	equ	0xFFF
  5997                           tosh	equ	0xFFE
  5998                           tosl	equ	0xFFD
  5999                           pclath	equ	0xFFA
  6000                           tblptru	equ	0xFF8
  6001                           tblptrh	equ	0xFF7
  6002                           tblptrl	equ	0xFF6
  6003                           tablat	equ	0xFF5
  6004                           prodh	equ	0xFF4
  6005                           prodl	equ	0xFF3
  6006                           intcon	equ	0xFF2
  6007                           intcon2	equ	0xFF1
  6008                           intcon3	equ	0xFF0
  6009                           indf0	equ	0xFEF
  6010                           postinc0	equ	0xFEE
  6011                           fsr0h	equ	0xFEA
  6012                           fsr0l	equ	0xFE9
  6013                           wreg	equ	0xFE8
  6014                           indf1	equ	0xFE7
  6015                           postinc1	equ	0xFE6
  6016                           postdec1	equ	0xFE5
  6017                           fsr1h	equ	0xFE2
  6018                           fsr1l	equ	0xFE1
  6019                           indf2	equ	0xFDF
  6020                           postinc2	equ	0xFDE
  6021                           postdec2	equ	0xFDD
  6022                           fsr2h	equ	0xFDA
  6023                           fsr2l	equ	0xFD9
  6024                           status	equ	0xFD8
  6025                           
  6026 ;; *************** function _putch *****************
  6027 ;; Defined at:
  6028 ;;		line 30 in file "lcd.c"
  6029 ;; Parameters:    Size  Location     Type
  6030 ;;  data            1    wreg     unsigned char 
  6031 ;; Auto vars:     Size  Location     Type
  6032 ;;  data            1    2[BANK0 ] unsigned char 
  6033 ;; Return value:  Size  Location     Type
  6034 ;;                  1    wreg      void 
  6035 ;; Registers used:
  6036 ;;		wreg, status,2, status,0, cstack
  6037 ;; Tracked objects:
  6038 ;;		On entry : 0/0
  6039 ;;		On exit  : 0/0
  6040 ;;		Unchanged: 0/0
  6041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6043 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6044 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6045 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6046 ;;Total ram usage:        1 bytes
  6047 ;; Hardware stack levels used:    1
  6048 ;; Hardware stack levels required when called:    6
  6049 ;; This function calls:
  6050 ;;		_lcdNibble
  6051 ;; This function is called by:
  6052 ;;		_printf
  6053 ;;		__doprnt
  6054 ;;		i2__doprnt
  6055 ;; This function uses a non-reentrant model
  6056 ;;
  6057                           
  6058                           	psect	text11
  6059  0037C6                     __ptext11:
  6060                           	opt stack 0
  6061  0037C6                     _putch:
  6062                           	opt stack 0
  6063                           
  6064                           ; BSR set to: 0
  6065                           ;Skip over the trampoline to the duplicate function for level 2
  6066  0037C6  B27A               	btfsc	btemp,1,c
  6067  0037C8  EF00  F01C         	goto	i2_putch
  6068  0037CC                     _putch$intlevel0:
  6069                           	opt stack 21
  6070                           
  6071                           ;incstack = 0
  6072                           ;putch@data stored from wreg
  6073  0037CC  0100               	movlb	0	; () banked
  6074  0037CE  6F82               	movwf	putch@data& (0+255),b
  6075                           
  6076                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  6077  0037D0  848C               	bsf	3980,2,c	;volatile
  6078                           
  6079                           ;lcd.c: 32: lcdNibble(data);
  6080  0037D2  0100               	movlb	0	; () banked
  6081  0037D4  5182               	movf	putch@data& (0+255),w,b
  6082  0037D6  EC48  F019         	call	_lcdNibble
  6083  0037DA  0012               	return		;funcret
  6084  0037DC                     __end_of_putch:
  6085                           	opt stack 0
  6086                           tosu	equ	0xFFF
  6087                           tosh	equ	0xFFE
  6088                           tosl	equ	0xFFD
  6089                           pclath	equ	0xFFA
  6090                           tblptru	equ	0xFF8
  6091                           tblptrh	equ	0xFF7
  6092                           tblptrl	equ	0xFF6
  6093                           tablat	equ	0xFF5
  6094                           prodh	equ	0xFF4
  6095                           prodl	equ	0xFF3
  6096                           intcon	equ	0xFF2
  6097                           intcon2	equ	0xFF1
  6098                           intcon3	equ	0xFF0
  6099                           indf0	equ	0xFEF
  6100                           postinc0	equ	0xFEE
  6101                           fsr0h	equ	0xFEA
  6102                           fsr0l	equ	0xFE9
  6103                           wreg	equ	0xFE8
  6104                           indf1	equ	0xFE7
  6105                           postinc1	equ	0xFE6
  6106                           postdec1	equ	0xFE5
  6107                           fsr1h	equ	0xFE2
  6108                           fsr1l	equ	0xFE1
  6109                           indf2	equ	0xFDF
  6110                           postinc2	equ	0xFDE
  6111                           postdec2	equ	0xFDD
  6112                           fsr2h	equ	0xFDA
  6113                           fsr2l	equ	0xFD9
  6114                           status	equ	0xFD8
  6115                           
  6116 ;; *************** function _isdigit *****************
  6117 ;; Defined at:
  6118 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6119 ;; Parameters:    Size  Location     Type
  6120 ;;  c               1    wreg     unsigned char 
  6121 ;; Auto vars:     Size  Location     Type
  6122 ;;  c               1    2[BANK0 ] unsigned char 
  6123 ;; Return value:  Size  Location     Type
  6124 ;;		None               void
  6125 ;; Registers used:
  6126 ;;		wreg, status,2, status,0
  6127 ;; Tracked objects:
  6128 ;;		On entry : 0/0
  6129 ;;		On exit  : 0/0
  6130 ;;		Unchanged: 0/0
  6131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6133 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6134 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6135 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;Total ram usage:        3 bytes
  6137 ;; Hardware stack levels used:    1
  6138 ;; Hardware stack levels required when called:    5
  6139 ;; This function calls:
  6140 ;;		Nothing
  6141 ;; This function is called by:
  6142 ;;		__doprnt
  6143 ;; This function uses a non-reentrant model
  6144 ;;
  6145                           
  6146                           	psect	text12
  6147  00373A                     __ptext12:
  6148                           	opt stack 0
  6149  00373A                     _isdigit:
  6150                           	opt stack 22
  6151                           
  6152                           ;incstack = 0
  6153                           ;isdigit@c stored from wreg
  6154  00373A  0100               	movlb	0	; () banked
  6155  00373C  6F82               	movwf	isdigit@c& (0+255),b
  6156  00373E  0E00               	movlw	0
  6157  003740  0100               	movlb	0	; () banked
  6158  003742  6F81               	movwf	_isdigit$761& (0+255),b
  6159                           
  6160                           ; BSR set to: 0
  6161  003744  0E3A               	movlw	58
  6162  003746  0100               	movlb	0	; () banked
  6163  003748  6182               	cpfslt	isdigit@c& (0+255),b
  6164  00374A  D007               	goto	l4370
  6165                           
  6166                           ; BSR set to: 0
  6167  00374C  0E2F               	movlw	47
  6168  00374E  0100               	movlb	0	; () banked
  6169  003750  6582               	cpfsgt	isdigit@c& (0+255),b
  6170  003752  D003               	goto	l4370
  6171                           
  6172                           ; BSR set to: 0
  6173  003754  0E01               	movlw	1
  6174  003756  0100               	movlb	0	; () banked
  6175  003758  6F81               	movwf	_isdigit$761& (0+255),b
  6176  00375A                     l4370:
  6177                           
  6178                           ; BSR set to: 0
  6179  00375A  C081  F080         	movff	_isdigit$761,??_isdigit
  6180  00375E  0100               	movlb	0	; () banked
  6181  003760  3180               	rrcf	??_isdigit& (0+255),w,b
  6182  003762  0012               	return	
  6183  003764                     __end_of_isdigit:
  6184                           	opt stack 0
  6185                           tosu	equ	0xFFF
  6186                           tosh	equ	0xFFE
  6187                           tosl	equ	0xFFD
  6188                           pclath	equ	0xFFA
  6189                           tblptru	equ	0xFF8
  6190                           tblptrh	equ	0xFF7
  6191                           tblptrl	equ	0xFF6
  6192                           tablat	equ	0xFF5
  6193                           prodh	equ	0xFF4
  6194                           prodl	equ	0xFF3
  6195                           intcon	equ	0xFF2
  6196                           intcon2	equ	0xFF1
  6197                           intcon3	equ	0xFF0
  6198                           indf0	equ	0xFEF
  6199                           postinc0	equ	0xFEE
  6200                           fsr0h	equ	0xFEA
  6201                           fsr0l	equ	0xFE9
  6202                           wreg	equ	0xFE8
  6203                           indf1	equ	0xFE7
  6204                           postinc1	equ	0xFE6
  6205                           postdec1	equ	0xFE5
  6206                           fsr1h	equ	0xFE2
  6207                           fsr1l	equ	0xFE1
  6208                           indf2	equ	0xFDF
  6209                           postinc2	equ	0xFDE
  6210                           postdec2	equ	0xFDD
  6211                           fsr2h	equ	0xFDA
  6212                           fsr2l	equ	0xFD9
  6213                           status	equ	0xFD8
  6214                           
  6215 ;; *************** function ___lwmod *****************
  6216 ;; Defined at:
  6217 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6218 ;; Parameters:    Size  Location     Type
  6219 ;;  dividend        2    7[BANK0 ] unsigned int 
  6220 ;;  divisor         2    9[BANK0 ] unsigned int 
  6221 ;; Auto vars:     Size  Location     Type
  6222 ;;  counter         1   11[BANK0 ] unsigned char 
  6223 ;; Return value:  Size  Location     Type
  6224 ;;                  2    7[BANK0 ] unsigned int 
  6225 ;; Registers used:
  6226 ;;		wreg, status,2, status,0
  6227 ;; Tracked objects:
  6228 ;;		On entry : 0/0
  6229 ;;		On exit  : 0/0
  6230 ;;		Unchanged: 0/0
  6231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6232 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6233 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6235 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6236 ;;Total ram usage:        5 bytes
  6237 ;; Hardware stack levels used:    1
  6238 ;; Hardware stack levels required when called:    5
  6239 ;; This function calls:
  6240 ;;		Nothing
  6241 ;; This function is called by:
  6242 ;;		__doprnt
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           	psect	text13
  6247  0032F8                     __ptext13:
  6248                           	opt stack 0
  6249  0032F8                     ___lwmod:
  6250                           	opt stack 22
  6251                           
  6252                           ; BSR set to: 0
  6253                           ;incstack = 0
  6254  0032F8  0100               	movlb	0	; () banked
  6255  0032FA  5189               	movf	___lwmod@divisor& (0+255),w,b
  6256  0032FC  0100               	movlb	0	; () banked
  6257  0032FE  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6258  003300  B4D8               	btfsc	status,2,c
  6259  003302  D026               	goto	l987
  6260                           
  6261                           ; BSR set to: 0
  6262  003304  0E01               	movlw	1
  6263  003306  0100               	movlb	0	; () banked
  6264  003308  6F8B               	movwf	___lwmod@counter& (0+255),b
  6265  00330A  D006               	goto	l4408
  6266  00330C                     l4406:
  6267                           
  6268                           ; BSR set to: 0
  6269  00330C  0100               	movlb	0	; () banked
  6270  00330E  90D8               	bcf	status,0,c
  6271  003310  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  6272  003312  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6273  003314  0100               	movlb	0	; () banked
  6274  003316  2B8B               	incf	___lwmod@counter& (0+255),f,b
  6275  003318                     l4408:
  6276                           
  6277                           ; BSR set to: 0
  6278  003318  0100               	movlb	0	; () banked
  6279  00331A  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6280  00331C  D7F7               	goto	l4406
  6281  00331E                     l4410:
  6282                           
  6283                           ; BSR set to: 0
  6284  00331E  0100               	movlb	0	; () banked
  6285  003320  5189               	movf	___lwmod@divisor& (0+255),w,b
  6286  003322  0100               	movlb	0	; () banked
  6287  003324  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  6288  003326  0100               	movlb	0	; () banked
  6289  003328  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6290  00332A  0100               	movlb	0	; () banked
  6291  00332C  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6292  00332E  A0D8               	btfss	status,0,c
  6293  003330  D008               	goto	l4414
  6294                           
  6295                           ; BSR set to: 0
  6296  003332  0100               	movlb	0	; () banked
  6297  003334  5189               	movf	___lwmod@divisor& (0+255),w,b
  6298  003336  0100               	movlb	0	; () banked
  6299  003338  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  6300  00333A  0100               	movlb	0	; () banked
  6301  00333C  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6302  00333E  0100               	movlb	0	; () banked
  6303  003340  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6304  003342                     l4414:
  6305                           
  6306                           ; BSR set to: 0
  6307  003342  0100               	movlb	0	; () banked
  6308  003344  90D8               	bcf	status,0,c
  6309  003346  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6310  003348  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  6311                           
  6312                           ; BSR set to: 0
  6313  00334A  0100               	movlb	0	; () banked
  6314  00334C  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  6315  00334E  D7E7               	goto	l4410
  6316  003350                     l987:
  6317                           
  6318                           ; BSR set to: 0
  6319  003350  C087  F087         	movff	___lwmod@dividend,?___lwmod
  6320  003354  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  6321                           
  6322                           ; BSR set to: 0
  6323  003358  0012               	return		;funcret
  6324  00335A                     __end_of___lwmod:
  6325                           	opt stack 0
  6326                           tosu	equ	0xFFF
  6327                           tosh	equ	0xFFE
  6328                           tosl	equ	0xFFD
  6329                           pclath	equ	0xFFA
  6330                           tblptru	equ	0xFF8
  6331                           tblptrh	equ	0xFF7
  6332                           tblptrl	equ	0xFF6
  6333                           tablat	equ	0xFF5
  6334                           prodh	equ	0xFF4
  6335                           prodl	equ	0xFF3
  6336                           intcon	equ	0xFF2
  6337                           intcon2	equ	0xFF1
  6338                           intcon3	equ	0xFF0
  6339                           indf0	equ	0xFEF
  6340                           postinc0	equ	0xFEE
  6341                           fsr0h	equ	0xFEA
  6342                           fsr0l	equ	0xFE9
  6343                           wreg	equ	0xFE8
  6344                           indf1	equ	0xFE7
  6345                           postinc1	equ	0xFE6
  6346                           postdec1	equ	0xFE5
  6347                           fsr1h	equ	0xFE2
  6348                           fsr1l	equ	0xFE1
  6349                           indf2	equ	0xFDF
  6350                           postinc2	equ	0xFDE
  6351                           postdec2	equ	0xFDD
  6352                           fsr2h	equ	0xFDA
  6353                           fsr2l	equ	0xFD9
  6354                           status	equ	0xFD8
  6355                           
  6356 ;; *************** function ___lwdiv *****************
  6357 ;; Defined at:
  6358 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;  dividend        2    0[BANK0 ] unsigned int 
  6361 ;;  divisor         2    2[BANK0 ] unsigned int 
  6362 ;; Auto vars:     Size  Location     Type
  6363 ;;  quotient        2    5[BANK0 ] unsigned int 
  6364 ;;  counter         1    4[BANK0 ] unsigned char 
  6365 ;; Return value:  Size  Location     Type
  6366 ;;                  2    0[BANK0 ] unsigned int 
  6367 ;; Registers used:
  6368 ;;		wreg, status,2, status,0
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6374 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6375 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6377 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6378 ;;Total ram usage:        7 bytes
  6379 ;; Hardware stack levels used:    1
  6380 ;; Hardware stack levels required when called:    5
  6381 ;; This function calls:
  6382 ;;		Nothing
  6383 ;; This function is called by:
  6384 ;;		__doprnt
  6385 ;; This function uses a non-reentrant model
  6386 ;;
  6387                           
  6388                           	psect	text14
  6389  0031A8                     __ptext14:
  6390                           	opt stack 0
  6391  0031A8                     ___lwdiv:
  6392                           	opt stack 22
  6393                           
  6394                           ; BSR set to: 0
  6395                           ;incstack = 0
  6396  0031A8  0E00               	movlw	0
  6397  0031AA  0100               	movlb	0	; () banked
  6398  0031AC  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6399  0031AE  0E00               	movlw	0
  6400  0031B0  6F85               	movwf	___lwdiv@quotient& (0+255),b
  6401                           
  6402                           ; BSR set to: 0
  6403  0031B2  0100               	movlb	0	; () banked
  6404  0031B4  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6405  0031B6  0100               	movlb	0	; () banked
  6406  0031B8  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6407  0031BA  B4D8               	btfsc	status,2,c
  6408  0031BC  D02C               	goto	l977
  6409                           
  6410                           ; BSR set to: 0
  6411  0031BE  0E01               	movlw	1
  6412  0031C0  0100               	movlb	0	; () banked
  6413  0031C2  6F84               	movwf	___lwdiv@counter& (0+255),b
  6414  0031C4  D006               	goto	l4388
  6415  0031C6                     l4386:
  6416                           
  6417                           ; BSR set to: 0
  6418  0031C6  0100               	movlb	0	; () banked
  6419  0031C8  90D8               	bcf	status,0,c
  6420  0031CA  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  6421  0031CC  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6422  0031CE  0100               	movlb	0	; () banked
  6423  0031D0  2B84               	incf	___lwdiv@counter& (0+255),f,b
  6424  0031D2                     l4388:
  6425                           
  6426                           ; BSR set to: 0
  6427  0031D2  0100               	movlb	0	; () banked
  6428  0031D4  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6429  0031D6  D7F7               	goto	l4386
  6430  0031D8                     l4390:
  6431                           
  6432                           ; BSR set to: 0
  6433  0031D8  0100               	movlb	0	; () banked
  6434  0031DA  90D8               	bcf	status,0,c
  6435  0031DC  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  6436  0031DE  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6437                           
  6438                           ; BSR set to: 0
  6439  0031E0  0100               	movlb	0	; () banked
  6440  0031E2  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6441  0031E4  0100               	movlb	0	; () banked
  6442  0031E6  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  6443  0031E8  0100               	movlb	0	; () banked
  6444  0031EA  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6445  0031EC  0100               	movlb	0	; () banked
  6446  0031EE  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6447  0031F0  A0D8               	btfss	status,0,c
  6448  0031F2  D00A               	goto	l4398
  6449                           
  6450                           ; BSR set to: 0
  6451  0031F4  0100               	movlb	0	; () banked
  6452  0031F6  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6453  0031F8  0100               	movlb	0	; () banked
  6454  0031FA  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  6455  0031FC  0100               	movlb	0	; () banked
  6456  0031FE  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6457  003200  0100               	movlb	0	; () banked
  6458  003202  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6459                           
  6460                           ; BSR set to: 0
  6461  003204  0100               	movlb	0	; () banked
  6462  003206  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  6463  003208                     l4398:
  6464                           
  6465                           ; BSR set to: 0
  6466  003208  0100               	movlb	0	; () banked
  6467  00320A  90D8               	bcf	status,0,c
  6468  00320C  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6469  00320E  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  6470                           
  6471                           ; BSR set to: 0
  6472  003210  0100               	movlb	0	; () banked
  6473  003212  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  6474  003214  D7E1               	goto	l4390
  6475  003216                     l977:
  6476                           
  6477                           ; BSR set to: 0
  6478  003216  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  6479  00321A  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6480                           
  6481                           ; BSR set to: 0
  6482  00321E  0012               	return		;funcret
  6483  003220                     __end_of___lwdiv:
  6484                           	opt stack 0
  6485                           tosu	equ	0xFFF
  6486                           tosh	equ	0xFFE
  6487                           tosl	equ	0xFFD
  6488                           pclath	equ	0xFFA
  6489                           tblptru	equ	0xFF8
  6490                           tblptrh	equ	0xFF7
  6491                           tblptrl	equ	0xFF6
  6492                           tablat	equ	0xFF5
  6493                           prodh	equ	0xFF4
  6494                           prodl	equ	0xFF3
  6495                           intcon	equ	0xFF2
  6496                           intcon2	equ	0xFF1
  6497                           intcon3	equ	0xFF0
  6498                           indf0	equ	0xFEF
  6499                           postinc0	equ	0xFEE
  6500                           fsr0h	equ	0xFEA
  6501                           fsr0l	equ	0xFE9
  6502                           wreg	equ	0xFE8
  6503                           indf1	equ	0xFE7
  6504                           postinc1	equ	0xFE6
  6505                           postdec1	equ	0xFE5
  6506                           fsr1h	equ	0xFE2
  6507                           fsr1l	equ	0xFE1
  6508                           indf2	equ	0xFDF
  6509                           postinc2	equ	0xFDE
  6510                           postdec2	equ	0xFDD
  6511                           fsr2h	equ	0xFDA
  6512                           fsr2l	equ	0xFD9
  6513                           status	equ	0xFD8
  6514                           
  6515 ;; *************** function _update_RTC *****************
  6516 ;; Defined at:
  6517 ;;		line 174 in file "main.c"
  6518 ;; Parameters:    Size  Location     Type
  6519 ;;		None
  6520 ;; Auto vars:     Size  Location     Type
  6521 ;;  i               1   10[BANK0 ] unsigned char 
  6522 ;; Return value:  Size  Location     Type
  6523 ;;                  1    wreg      void 
  6524 ;; Registers used:
  6525 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6526 ;; Tracked objects:
  6527 ;;		On entry : 0/0
  6528 ;;		On exit  : 0/0
  6529 ;;		Unchanged: 0/0
  6530 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6531 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6532 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6533 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6534 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6535 ;;Total ram usage:        5 bytes
  6536 ;; Hardware stack levels used:    1
  6537 ;; Hardware stack levels required when called:    7
  6538 ;; This function calls:
  6539 ;;		_I2C_Master_Read
  6540 ;;		_I2C_Master_Start
  6541 ;;		_I2C_Master_Stop
  6542 ;;		_I2C_Master_Write
  6543 ;;		___wmul
  6544 ;; This function is called by:
  6545 ;;		_main
  6546 ;; This function uses a non-reentrant model
  6547 ;;
  6548                           
  6549                           	psect	text15
  6550  002ACE                     __ptext15:
  6551                           	opt stack 0
  6552  002ACE                     _update_RTC:
  6553                           	opt stack 23
  6554                           
  6555                           ;main.c: 177: I2C_Master_Start();
  6556                           
  6557                           ; BSR set to: 0
  6558                           ;incstack = 0
  6559  002ACE  EC15  F01C         	call	_I2C_Master_Start	;wreg free
  6560                           
  6561                           ;main.c: 178: I2C_Master_Write(0b11010000);
  6562  002AD2  0E00               	movlw	0
  6563  002AD4  0100               	movlb	0	; () banked
  6564  002AD6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6565  002AD8  0ED0               	movlw	208
  6566  002ADA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6567  002ADC  EC0C  F01C         	call	_I2C_Master_Write	;wreg free
  6568                           
  6569                           ;main.c: 179: I2C_Master_Write(0x00);
  6570  002AE0  0E00               	movlw	0
  6571  002AE2  0100               	movlb	0	; () banked
  6572  002AE4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6573  002AE6  0E00               	movlw	0
  6574  002AE8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6575  002AEA  EC0C  F01C         	call	_I2C_Master_Write	;wreg free
  6576                           
  6577                           ;main.c: 180: I2C_Master_Stop();
  6578  002AEE  EC11  F01C         	call	_I2C_Master_Stop	;wreg free
  6579                           
  6580                           ;main.c: 183: I2C_Master_Start();
  6581  002AF2  EC15  F01C         	call	_I2C_Master_Start	;wreg free
  6582                           
  6583                           ;main.c: 184: I2C_Master_Write(0b11010001);
  6584  002AF6  0E00               	movlw	0
  6585  002AF8  0100               	movlb	0	; () banked
  6586  002AFA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6587  002AFC  0ED1               	movlw	209
  6588  002AFE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6589  002B00  EC0C  F01C         	call	_I2C_Master_Write	;wreg free
  6590                           
  6591                           ;main.c: 185: for(unsigned char i=0;i<0x06;i++){
  6592  002B04  0E00               	movlw	0
  6593  002B06  0100               	movlb	0	; () banked
  6594  002B08  6F8A               	movwf	update_RTC@i& (0+255),b
  6595  002B0A                     l5286:
  6596                           
  6597                           ; BSR set to: 0
  6598  002B0A  0E05               	movlw	5
  6599  002B0C  0100               	movlb	0	; () banked
  6600  002B0E  658A               	cpfsgt	update_RTC@i& (0+255),b
  6601  002B10  D001               	goto	l5290
  6602  002B12  D047               	goto	l5298
  6603  002B14                     l5290:
  6604                           
  6605                           ; BSR set to: 0
  6606                           ;main.c: 186: time[i] = I2C_Master_Read(1);
  6607  002B14  0100               	movlb	0	; () banked
  6608  002B16  518A               	movf	update_RTC@i& (0+255),w,b
  6609  002B18  0D01               	mullw	1
  6610  002B1A  0EC2               	movlw	low _time
  6611  002B1C  24F3               	addwf	prodl,w,c
  6612  002B1E  6ED9               	movwf	fsr2l,c
  6613  002B20  0E00               	movlw	high _time
  6614  002B22  20F4               	addwfc	prodh,w,c
  6615  002B24  6EDA               	movwf	fsr2h,c
  6616  002B26  0E01               	movlw	1
  6617  002B28  EC70  F01B         	call	_I2C_Master_Read
  6618  002B2C  6EDF               	movwf	indf2,c
  6619                           
  6620                           ;main.c: 187: time_i[i]=(time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  6621  002B2E  0100               	movlb	0	; () banked
  6622  002B30  518A               	movf	update_RTC@i& (0+255),w,b
  6623  002B32  0D01               	mullw	1
  6624  002B34  0EC2               	movlw	low _time
  6625  002B36  24F3               	addwf	prodl,w,c
  6626  002B38  6ED9               	movwf	fsr2l,c
  6627  002B3A  0E00               	movlw	high _time
  6628  002B3C  20F4               	addwfc	prodh,w,c
  6629  002B3E  6EDA               	movwf	fsr2h,c
  6630  002B40  50DF               	movf	indf2,w,c
  6631  002B42  0B0F               	andlw	15
  6632  002B44  0100               	movlb	0	; () banked
  6633  002B46  6F86               	movwf	??_update_RTC& (0+255),b
  6634  002B48  6B87               	clrf	(??_update_RTC+1)& (0+255),b
  6635  002B4A  0100               	movlb	0	; () banked
  6636  002B4C  518A               	movf	update_RTC@i& (0+255),w,b
  6637  002B4E  0D01               	mullw	1
  6638  002B50  0EC2               	movlw	low _time
  6639  002B52  24F3               	addwf	prodl,w,c
  6640  002B54  6ED9               	movwf	fsr2l,c
  6641  002B56  0E00               	movlw	high _time
  6642  002B58  20F4               	addwfc	prodh,w,c
  6643  002B5A  6EDA               	movwf	fsr2h,c
  6644  002B5C  50DF               	movf	indf2,w,c
  6645  002B5E  0100               	movlb	0	; () banked
  6646  002B60  6F88               	movwf	(??_update_RTC+2)& (0+255),b
  6647  002B62  0100               	movlb	0	; () banked
  6648  002B64  3B88               	swapf	(??_update_RTC+2)& (0+255),f,b
  6649  002B66  0E0F               	movlw	15
  6650  002B68  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  6651  002B6A  0E0F               	movlw	15
  6652  002B6C  0100               	movlb	0	; () banked
  6653  002B6E  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  6654  002B70  0100               	movlb	0	; () banked
  6655  002B72  5188               	movf	(??_update_RTC+2)& (0+255),w,b
  6656  002B74  0D0A               	mullw	10
  6657  002B76  50F3               	movf	prodl,w,c
  6658  002B78  0100               	movlb	0	; () banked
  6659  002B7A  2786               	addwf	??_update_RTC& (0+255),f,b
  6660  002B7C  50F4               	movf	prodh,w,c
  6661  002B7E  0100               	movlb	0	; () banked
  6662  002B80  2387               	addwfc	(??_update_RTC+1)& (0+255),f,b
  6663  002B82  0100               	movlb	0	; () banked
  6664  002B84  518A               	movf	update_RTC@i& (0+255),w,b
  6665  002B86  0D02               	mullw	2
  6666  002B88  0E3E               	movlw	low _time_i
  6667  002B8A  24F3               	addwf	prodl,w,c
  6668  002B8C  6ED9               	movwf	fsr2l,c
  6669  002B8E  0E00               	movlw	high _time_i
  6670  002B90  20F4               	addwfc	prodh,w,c
  6671  002B92  6EDA               	movwf	fsr2h,c
  6672  002B94  C086  FFDE         	movff	??_update_RTC,postinc2
  6673  002B98  C087  FFDD         	movff	??_update_RTC+1,postdec2
  6674                           
  6675                           ; BSR set to: 0
  6676  002B9C  0100               	movlb	0	; () banked
  6677  002B9E  2B8A               	incf	update_RTC@i& (0+255),f,b
  6678  002BA0  D7B4               	goto	l5286
  6679  002BA2                     l5298:
  6680                           
  6681                           ; BSR set to: 0
  6682                           ;main.c: 188: }
  6683                           ;main.c: 189: timeDiff=time_i[1]*60-startTime[1]*60+time_i[0]-startTime[0];
  6684  002BA2  C10E  F086         	movff	_startTime,??_update_RTC
  6685  002BA6  C10F  F087         	movff	_startTime+1,??_update_RTC+1
  6686  002BAA  0100               	movlb	0	; () banked
  6687  002BAC  1F86               	comf	??_update_RTC& (0+255),f,b
  6688  002BAE  1F87               	comf	(??_update_RTC+1)& (0+255),f,b
  6689  002BB0  4B86               	infsnz	??_update_RTC& (0+255),f,b
  6690  002BB2  2B87               	incf	(??_update_RTC+1)& (0+255),f,b
  6691  002BB4  C040  F080         	movff	_time_i+2,___wmul@multiplier
  6692  002BB8  C041  F081         	movff	_time_i+3,___wmul@multiplier+1
  6693  002BBC  0E00               	movlw	0
  6694  002BBE  0100               	movlb	0	; () banked
  6695  002BC0  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6696  002BC2  0E3C               	movlw	60
  6697  002BC4  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6698  002BC6  EC21  F01B         	call	___wmul	;wreg free
  6699  002BCA  C080  F088         	movff	?___wmul,??_update_RTC+2
  6700  002BCE  C081  F089         	movff	?___wmul+1,??_update_RTC+3
  6701  002BD2  C110  F080         	movff	_startTime+2,___wmul@multiplier
  6702  002BD6  C111  F081         	movff	_startTime+3,___wmul@multiplier+1
  6703  002BDA  0E00               	movlw	0
  6704  002BDC  0100               	movlb	0	; () banked
  6705  002BDE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6706  002BE0  0E3C               	movlw	60
  6707  002BE2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6708  002BE4  EC21  F01B         	call	___wmul	;wreg free
  6709  002BE8  0100               	movlb	0	; () banked
  6710  002BEA  1F80               	comf	?___wmul& (0+255),f,b
  6711  002BEC  0100               	movlb	0	; () banked
  6712  002BEE  1F81               	comf	(?___wmul+1)& (0+255),f,b
  6713  002BF0  0100               	movlb	0	; () banked
  6714  002BF2  4B80               	infsnz	?___wmul& (0+255),f,b
  6715  002BF4  2B81               	incf	(?___wmul+1)& (0+255),f,b
  6716  002BF6  0100               	movlb	0	; () banked
  6717  002BF8  5180               	movf	?___wmul& (0+255),w,b
  6718  002BFA  0100               	movlb	0	; () banked
  6719  002BFC  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  6720  002BFE  0100               	movlb	0	; () banked
  6721  002C00  5181               	movf	(?___wmul+1)& (0+255),w,b
  6722  002C02  0100               	movlb	0	; () banked
  6723  002C04  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  6724  002C06  0100               	movlb	0	; () banked
  6725  002C08  5186               	movf	??_update_RTC& (0+255),w,b
  6726  002C0A  0100               	movlb	0	; () banked
  6727  002C0C  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  6728  002C0E  0100               	movlb	0	; () banked
  6729  002C10  5187               	movf	(??_update_RTC+1)& (0+255),w,b
  6730  002C12  0100               	movlb	0	; () banked
  6731  002C14  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  6732  002C16  503E               	movf	_time_i,w,c
  6733  002C18  0100               	movlb	0	; () banked
  6734  002C1A  2588               	addwf	(??_update_RTC+2)& (0+255),w,b
  6735  002C1C  0100               	movlb	0	; () banked
  6736  002C1E  6FDB               	movwf	_timeDiff& (0+255),b
  6737  002C20  503F               	movf	_time_i+1,w,c
  6738  002C22  0100               	movlb	0	; () banked
  6739  002C24  2189               	addwfc	(??_update_RTC+3)& (0+255),w,b
  6740  002C26  0100               	movlb	0	; () banked
  6741  002C28  6FDC               	movwf	(_timeDiff+1)& (0+255),b
  6742                           
  6743                           ; BSR set to: 0
  6744                           ;main.c: 190: time[6] = I2C_Master_Read(0);
  6745  002C2A  0E00               	movlw	0
  6746  002C2C  EC70  F01B         	call	_I2C_Master_Read
  6747  002C30  0100               	movlb	0	; () banked
  6748  002C32  6FC8               	movwf	(_time+6)& (0+255),b
  6749                           
  6750                           ; BSR set to: 0
  6751                           ;main.c: 191: I2C_Master_Stop();
  6752  002C34  EC11  F01C         	call	_I2C_Master_Stop	;wreg free
  6753  002C38  0012               	return		;funcret
  6754  002C3A                     __end_of_update_RTC:
  6755                           	opt stack 0
  6756                           tosu	equ	0xFFF
  6757                           tosh	equ	0xFFE
  6758                           tosl	equ	0xFFD
  6759                           pclath	equ	0xFFA
  6760                           tblptru	equ	0xFF8
  6761                           tblptrh	equ	0xFF7
  6762                           tblptrl	equ	0xFF6
  6763                           tablat	equ	0xFF5
  6764                           prodh	equ	0xFF4
  6765                           prodl	equ	0xFF3
  6766                           intcon	equ	0xFF2
  6767                           intcon2	equ	0xFF1
  6768                           intcon3	equ	0xFF0
  6769                           indf0	equ	0xFEF
  6770                           postinc0	equ	0xFEE
  6771                           fsr0h	equ	0xFEA
  6772                           fsr0l	equ	0xFE9
  6773                           wreg	equ	0xFE8
  6774                           indf1	equ	0xFE7
  6775                           postinc1	equ	0xFE6
  6776                           postdec1	equ	0xFE5
  6777                           fsr1h	equ	0xFE2
  6778                           fsr1l	equ	0xFE1
  6779                           indf2	equ	0xFDF
  6780                           postinc2	equ	0xFDE
  6781                           postdec2	equ	0xFDD
  6782                           fsr2h	equ	0xFDA
  6783                           fsr2l	equ	0xFD9
  6784                           status	equ	0xFD8
  6785                           
  6786 ;; *************** function _I2C_Master_Read *****************
  6787 ;; Defined at:
  6788 ;;		line 53 in file "I2C.c"
  6789 ;; Parameters:    Size  Location     Type
  6790 ;;  a               1    wreg     unsigned char 
  6791 ;; Auto vars:     Size  Location     Type
  6792 ;;  a               1    1[BANK0 ] unsigned char 
  6793 ;;  temp            1    2[BANK0 ] unsigned char 
  6794 ;; Return value:  Size  Location     Type
  6795 ;;                  1    wreg      unsigned char 
  6796 ;; Registers used:
  6797 ;;		wreg, status,2, status,0, cstack
  6798 ;; Tracked objects:
  6799 ;;		On entry : 0/0
  6800 ;;		On exit  : 0/0
  6801 ;;		Unchanged: 0/0
  6802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6804 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6806 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6807 ;;Total ram usage:        2 bytes
  6808 ;; Hardware stack levels used:    1
  6809 ;; Hardware stack levels required when called:    6
  6810 ;; This function calls:
  6811 ;;		_I2C_Master_Wait
  6812 ;; This function is called by:
  6813 ;;		_update_RTC
  6814 ;; This function uses a non-reentrant model
  6815 ;;
  6816                           
  6817                           	psect	text16
  6818  0036E0                     __ptext16:
  6819                           	opt stack 0
  6820  0036E0                     _I2C_Master_Read:
  6821                           	opt stack 23
  6822                           
  6823                           ;incstack = 0
  6824                           ;I2C_Master_Read@a stored from wreg
  6825  0036E0  0100               	movlb	0	; () banked
  6826  0036E2  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  6827                           
  6828                           ;I2C.c: 55: unsigned char temp;
  6829                           ;I2C.c: 56: I2C_Master_Wait();
  6830  0036E4  ECEE  F01B         	call	_I2C_Master_Wait	;wreg free
  6831                           
  6832                           ;I2C.c: 57: RCEN = 1;
  6833  0036E8  86C5               	bsf	4037,3,c	;volatile
  6834                           
  6835                           ;I2C.c: 58: I2C_Master_Wait();
  6836  0036EA  ECEE  F01B         	call	_I2C_Master_Wait	;wreg free
  6837                           
  6838                           ;I2C.c: 59: temp = SSPBUF;
  6839  0036EE  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  6840                           
  6841                           ;I2C.c: 60: I2C_Master_Wait();
  6842  0036F2  ECEE  F01B         	call	_I2C_Master_Wait	;wreg free
  6843                           
  6844                           ;I2C.c: 61: ACKDT = (a)?0:1;
  6845  0036F6  0100               	movlb	0	; () banked
  6846  0036F8  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  6847  0036FA  0100               	movlb	0	; () banked
  6848  0036FC  A4D8               	btfss	status,2,c
  6849  0036FE  D002               	goto	u6270
  6850  003700  8AC5               	bsf	4037,5,c	;volatile
  6851  003702  D001               	goto	l4700
  6852  003704                     u6270:
  6853  003704  9AC5               	bcf	4037,5,c	;volatile
  6854  003706                     l4700:
  6855                           
  6856                           ;I2C.c: 62: ACKEN = 1;
  6857  003706  88C5               	bsf	4037,4,c	;volatile
  6858                           
  6859                           ;I2C.c: 63: return temp;
  6860  003708  0100               	movlb	0	; () banked
  6861  00370A  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  6862  00370C  0012               	return	
  6863  00370E                     __end_of_I2C_Master_Read:
  6864                           	opt stack 0
  6865                           tosu	equ	0xFFF
  6866                           tosh	equ	0xFFE
  6867                           tosl	equ	0xFFD
  6868                           pclath	equ	0xFFA
  6869                           tblptru	equ	0xFF8
  6870                           tblptrh	equ	0xFF7
  6871                           tblptrl	equ	0xFF6
  6872                           tablat	equ	0xFF5
  6873                           prodh	equ	0xFF4
  6874                           prodl	equ	0xFF3
  6875                           intcon	equ	0xFF2
  6876                           intcon2	equ	0xFF1
  6877                           intcon3	equ	0xFF0
  6878                           indf0	equ	0xFEF
  6879                           postinc0	equ	0xFEE
  6880                           fsr0h	equ	0xFEA
  6881                           fsr0l	equ	0xFE9
  6882                           wreg	equ	0xFE8
  6883                           indf1	equ	0xFE7
  6884                           postinc1	equ	0xFE6
  6885                           postdec1	equ	0xFE5
  6886                           fsr1h	equ	0xFE2
  6887                           fsr1l	equ	0xFE1
  6888                           indf2	equ	0xFDF
  6889                           postinc2	equ	0xFDE
  6890                           postdec2	equ	0xFDD
  6891                           fsr2h	equ	0xFDA
  6892                           fsr2l	equ	0xFD9
  6893                           status	equ	0xFD8
  6894                           
  6895 ;; *************** function _sort *****************
  6896 ;; Defined at:
  6897 ;;		line 467 in file "main.c"
  6898 ;; Parameters:    Size  Location     Type
  6899 ;;		None
  6900 ;; Auto vars:     Size  Location     Type
  6901 ;;  i               2   24[BANK0 ] int 
  6902 ;; Return value:  Size  Location     Type
  6903 ;;                  1    wreg      void 
  6904 ;; Registers used:
  6905 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6906 ;; Tracked objects:
  6907 ;;		On entry : 0/0
  6908 ;;		On exit  : 0/0
  6909 ;;		Unchanged: 0/0
  6910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6912 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6913 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6914 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6915 ;;Total ram usage:        6 bytes
  6916 ;; Hardware stack levels used:    1
  6917 ;; Hardware stack levels required when called:    7
  6918 ;; This function calls:
  6919 ;;		___wmul
  6920 ;;		__measure
  6921 ;; This function is called by:
  6922 ;;		_main
  6923 ;; This function uses a non-reentrant model
  6924 ;;
  6925                           
  6926                           	psect	text17
  6927  0028A2                     __ptext17:
  6928                           	opt stack 0
  6929  0028A2                     _sort:
  6930                           	opt stack 23
  6931                           
  6932                           ;main.c: 478: if ((PROX1[0]+PROX2[0])&&measure_counter==0&&release_counter<=1000/50){
  6933                           
  6934                           ;main.c: 474: ;
  6935                           
  6936                           ;main.c: 472: ;
  6937                           
  6938                           ;main.c: 470: ;
  6939                           
  6940                           ; BSR set to: 0
  6941                           ;incstack = 0
  6942  0028A2  506A               	movf	_PROX2,w,c
  6943  0028A4  2460               	addwf	_PROX1,w,c
  6944  0028A6  0100               	movlb	0	; () banked
  6945  0028A8  6F94               	movwf	??_sort& (0+255),b
  6946  0028AA  506B               	movf	_PROX2+1,w,c
  6947  0028AC  2061               	addwfc	_PROX1+1,w,c
  6948  0028AE  0100               	movlb	0	; () banked
  6949  0028B0  6F95               	movwf	(??_sort+1)& (0+255),b
  6950  0028B2  0100               	movlb	0	; () banked
  6951  0028B4  5194               	movf	??_sort& (0+255),w,b
  6952  0028B6  0100               	movlb	0	; () banked
  6953  0028B8  1195               	iorwf	(??_sort+1)& (0+255),w,b
  6954  0028BA  B4D8               	btfsc	status,2,c
  6955  0028BC  D043               	goto	l5362
  6956                           
  6957                           ; BSR set to: 0
  6958  0028BE  0100               	movlb	0	; () banked
  6959  0028C0  51D3               	movf	_measure_counter& (0+255),w,b
  6960  0028C2  0100               	movlb	0	; () banked
  6961  0028C4  11D4               	iorwf	(_measure_counter+1)& (0+255),w,b
  6962  0028C6  A4D8               	btfss	status,2,c
  6963  0028C8  D03D               	goto	l5362
  6964                           
  6965                           ; BSR set to: 0
  6966  0028CA  0100               	movlb	0	; () banked
  6967  0028CC  BFD6               	btfsc	(_release_counter+1)& (0+255),7,b
  6968  0028CE  D008               	goto	l5348
  6969  0028D0  0100               	movlb	0	; () banked
  6970  0028D2  51D6               	movf	(_release_counter+1)& (0+255),w,b
  6971  0028D4  E137               	bnz	l5362
  6972  0028D6  0E15               	movlw	21
  6973  0028D8  0100               	movlb	0	; () banked
  6974  0028DA  5DD5               	subwf	_release_counter& (0+255),w,b
  6975  0028DC  B0D8               	btfsc	status,0,c
  6976  0028DE  D032               	goto	l5362
  6977  0028E0                     l5348:
  6978                           
  6979                           ; BSR set to: 0
  6980                           ;main.c: 479: measure_counter=measure;
  6981  0028E0  C0E9  F0D3         	movff	_measure,_measure_counter
  6982  0028E4  C0EA  F0D4         	movff	_measure+1,_measure_counter+1
  6983                           
  6984                           ; BSR set to: 0
  6985                           ;main.c: 480: int i;
  6986                           ;main.c: 481: for (i=0;i<7;i++)
  6987  0028E8  0E00               	movlw	0
  6988  0028EA  0100               	movlb	0	; () banked
  6989  0028EC  6F99               	movwf	(sort@i+1)& (0+255),b
  6990  0028EE  0E00               	movlw	0
  6991  0028F0  6F98               	movwf	sort@i& (0+255),b
  6992  0028F2                     l5352:
  6993                           
  6994                           ; BSR set to: 0
  6995  0028F2  0100               	movlb	0	; () banked
  6996  0028F4  BF99               	btfsc	(sort@i+1)& (0+255),7,b
  6997  0028F6  D008               	goto	l5356
  6998  0028F8  0100               	movlb	0	; () banked
  6999  0028FA  5199               	movf	(sort@i+1)& (0+255),w,b
  7000  0028FC  E123               	bnz	l5362
  7001  0028FE  0E07               	movlw	7
  7002  002900  0100               	movlb	0	; () banked
  7003  002902  5D98               	subwf	sort@i& (0+255),w,b
  7004  002904  B0D8               	btfsc	status,0,c
  7005  002906  D01E               	goto	l5362
  7006  002908                     l5356:
  7007                           
  7008                           ; BSR set to: 0
  7009                           ;main.c: 482: latestSortedBottleTime[i]=time_i[i];
  7010  002908  90D8               	bcf	status,0,c
  7011  00290A  0100               	movlb	0	; () banked
  7012  00290C  3598               	rlcf	sort@i& (0+255),w,b
  7013  00290E  6ED9               	movwf	fsr2l,c
  7014  002910  0100               	movlb	0	; () banked
  7015  002912  3599               	rlcf	(sort@i+1)& (0+255),w,b
  7016  002914  6EDA               	movwf	fsr2h,c
  7017  002916  0E3E               	movlw	low _time_i
  7018  002918  26D9               	addwf	fsr2l,f,c
  7019  00291A  0E00               	movlw	high _time_i
  7020  00291C  22DA               	addwfc	fsr2h,f,c
  7021  00291E  90D8               	bcf	status,0,c
  7022  002920  0100               	movlb	0	; () banked
  7023  002922  3598               	rlcf	sort@i& (0+255),w,b
  7024  002924  6EE1               	movwf	fsr1l,c
  7025  002926  0100               	movlb	0	; () banked
  7026  002928  3599               	rlcf	(sort@i+1)& (0+255),w,b
  7027  00292A  6EE2               	movwf	fsr1h,c
  7028  00292C  0E00               	movlw	low _latestSortedBottleTime
  7029  00292E  26E1               	addwf	fsr1l,f,c
  7030  002930  0E01               	movlw	high _latestSortedBottleTime
  7031  002932  22E2               	addwfc	fsr1h,f,c
  7032  002934  CFDE FFE6          	movff	postinc2,postinc1
  7033  002938  CFDD FFE5          	movff	postdec2,postdec1
  7034                           
  7035                           ; BSR set to: 0
  7036  00293C  0100               	movlb	0	; () banked
  7037  00293E  4B98               	infsnz	sort@i& (0+255),f,b
  7038  002940  2B99               	incf	(sort@i+1)& (0+255),f,b
  7039  002942  D7D7               	goto	l5352
  7040  002944                     l5362:
  7041                           
  7042                           ; BSR set to: 0
  7043                           ;main.c: 483: }
  7044                           ;main.c: 484: if (measure_counter==1){
  7045  002944  0100               	movlb	0	; () banked
  7046  002946  05D3               	decf	_measure_counter& (0+255),w,b
  7047  002948  0100               	movlb	0	; () banked
  7048  00294A  11D4               	iorwf	(_measure_counter+1)& (0+255),w,b
  7049  00294C  A4D8               	btfss	status,2,c
  7050  00294E  D03B               	goto	l5388
  7051                           
  7052                           ; BSR set to: 0
  7053                           ;main.c: 485: bottle_type=_measure();
  7054  002950  EC2A  F00E         	call	__measure	;wreg free
  7055  002954  C086  F0C9         	movff	?__measure,_bottle_type
  7056  002958  C087  F0CA         	movff	?__measure+1,_bottle_type+1
  7057                           
  7058                           ;main.c: 486: if (bottle_type!=0){
  7059  00295C  0100               	movlb	0	; () banked
  7060  00295E  51C9               	movf	_bottle_type& (0+255),w,b
  7061  002960  0100               	movlb	0	; () banked
  7062  002962  11CA               	iorwf	(_bottle_type+1)& (0+255),w,b
  7063  002964  B4D8               	btfsc	status,2,c
  7064  002966  D02C               	goto	l5386
  7065                           
  7066                           ; BSR set to: 0
  7067                           ;main.c: 487: release_counter=release;
  7068  002968  C0EB  F0D5         	movff	_release,_release_counter
  7069  00296C  C0EC  F0D6         	movff	_release+1,_release_counter+1
  7070                           
  7071                           ; BSR set to: 0
  7072                           ;main.c: 488: if (bottle_type==1)
  7073  002970  0100               	movlb	0	; () banked
  7074  002972  05C9               	decf	_bottle_type& (0+255),w,b
  7075  002974  0100               	movlb	0	; () banked
  7076  002976  11CA               	iorwf	(_bottle_type+1)& (0+255),w,b
  7077  002978  A4D8               	btfss	status,2,c
  7078  00297A  D003               	goto	l5374
  7079                           
  7080                           ; BSR set to: 0
  7081                           ;main.c: 489: eskaNoCap++;
  7082  00297C  0100               	movlb	0	; () banked
  7083  00297E  4BCF               	infsnz	_eskaNoCap& (0+255),f,b
  7084  002980  2BD0               	incf	(_eskaNoCap+1)& (0+255),f,b
  7085  002982                     l5374:
  7086                           
  7087                           ; BSR set to: 0
  7088                           ;main.c: 490: if (bottle_type==2)
  7089  002982  0E02               	movlw	2
  7090  002984  0100               	movlb	0	; () banked
  7091  002986  19C9               	xorwf	_bottle_type& (0+255),w,b
  7092  002988  0100               	movlb	0	; () banked
  7093  00298A  11CA               	iorwf	(_bottle_type+1)& (0+255),w,b
  7094  00298C  A4D8               	btfss	status,2,c
  7095  00298E  D003               	goto	l5378
  7096                           
  7097                           ; BSR set to: 0
  7098                           ;main.c: 491: eskaWCap++;
  7099  002990  0100               	movlb	0	; () banked
  7100  002992  4BD1               	infsnz	_eskaWCap& (0+255),f,b
  7101  002994  2BD2               	incf	(_eskaWCap+1)& (0+255),f,b
  7102  002996                     l5378:
  7103                           
  7104                           ; BSR set to: 0
  7105                           ;main.c: 492: if (bottle_type==3)
  7106  002996  0E03               	movlw	3
  7107  002998  0100               	movlb	0	; () banked
  7108  00299A  19C9               	xorwf	_bottle_type& (0+255),w,b
  7109  00299C  0100               	movlb	0	; () banked
  7110  00299E  11CA               	iorwf	(_bottle_type+1)& (0+255),w,b
  7111  0029A0  A4D8               	btfss	status,2,c
  7112  0029A2  D003               	goto	l5382
  7113                           
  7114                           ; BSR set to: 0
  7115                           ;main.c: 493: yopNoCap++;
  7116  0029A4  0100               	movlb	0	; () banked
  7117  0029A6  4BDD               	infsnz	_yopNoCap& (0+255),f,b
  7118  0029A8  2BDE               	incf	(_yopNoCap+1)& (0+255),f,b
  7119  0029AA                     l5382:
  7120                           
  7121                           ; BSR set to: 0
  7122                           ;main.c: 494: if (bottle_type==4)
  7123  0029AA  0E04               	movlw	4
  7124  0029AC  0100               	movlb	0	; () banked
  7125  0029AE  19C9               	xorwf	_bottle_type& (0+255),w,b
  7126  0029B0  0100               	movlb	0	; () banked
  7127  0029B2  11CA               	iorwf	(_bottle_type+1)& (0+255),w,b
  7128  0029B4  A4D8               	btfss	status,2,c
  7129  0029B6  D007               	goto	l5388
  7130                           
  7131                           ; BSR set to: 0
  7132                           ;main.c: 495: yopWCap++;
  7133  0029B8  0100               	movlb	0	; () banked
  7134  0029BA  4BDF               	infsnz	_yopWCap& (0+255),f,b
  7135  0029BC  2BE0               	incf	(_yopWCap+1)& (0+255),f,b
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;main.c: 496: }
  7139  0029BE  D003               	goto	l5388
  7140  0029C0                     l5386:
  7141                           
  7142                           ; BSR set to: 0
  7143                           ;main.c: 497: else
  7144                           ;main.c: 498: measure_counter+=1;
  7145  0029C0  0100               	movlb	0	; () banked
  7146  0029C2  4BD3               	infsnz	_measure_counter& (0+255),f,b
  7147  0029C4  2BD4               	incf	(_measure_counter+1)& (0+255),f,b
  7148  0029C6                     l5388:
  7149                           
  7150                           ; BSR set to: 0
  7151                           ;main.c: 499: }
  7152                           ;main.c: 504: if (release_counter==1000/50)
  7153  0029C6  0E14               	movlw	20
  7154  0029C8  0100               	movlb	0	; () banked
  7155  0029CA  19D5               	xorwf	_release_counter& (0+255),w,b
  7156  0029CC  0100               	movlb	0	; () banked
  7157  0029CE  11D6               	iorwf	(_release_counter+1)& (0+255),w,b
  7158  0029D0  A4D8               	btfss	status,2,c
  7159  0029D2  D004               	goto	l5414
  7160                           
  7161                           ; BSR set to: 0
  7162                           ;main.c: 505: discretize_counter=discretize;
  7163  0029D4  C0CB  F0CD         	movff	_discretize,_discretize_counter
  7164  0029D8  C0CC  F0CE         	movff	_discretize+1,_discretize_counter+1
  7165  0029DC                     l5414:
  7166                           
  7167                           ; BSR set to: 0
  7168                           ;main.c: 518: }
  7169                           ;main.c: 521: if (discretize_counter>0)
  7170  0029DC  0100               	movlb	0	; () banked
  7171  0029DE  BFCE               	btfsc	(_discretize_counter+1)& (0+255),7,b
  7172  0029E0  D00B               	goto	l5418
  7173  0029E2  0100               	movlb	0	; () banked
  7174  0029E4  51CE               	movf	(_discretize_counter+1)& (0+255),w,b
  7175  0029E6  E104               	bnz	u7610
  7176  0029E8  0100               	movlb	0	; () banked
  7177  0029EA  05CD               	decf	_discretize_counter& (0+255),w,b
  7178  0029EC  A0D8               	btfss	status,0,c
  7179  0029EE  D004               	goto	l5418
  7180  0029F0                     u7610:
  7181                           
  7182                           ; BSR set to: 0
  7183                           ;main.c: 522: discretize_counter--;
  7184  0029F0  0100               	movlb	0	; () banked
  7185  0029F2  07CD               	decf	_discretize_counter& (0+255),f,b
  7186  0029F4  A0D8               	btfss	status,0,c
  7187  0029F6  07CE               	decf	(_discretize_counter+1)& (0+255),f,b
  7188  0029F8                     l5418:
  7189                           
  7190                           ; BSR set to: 0
  7191                           ;main.c: 523: if (measure_counter>0)
  7192  0029F8  0100               	movlb	0	; () banked
  7193  0029FA  BFD4               	btfsc	(_measure_counter+1)& (0+255),7,b
  7194  0029FC  D00B               	goto	l5422
  7195  0029FE  0100               	movlb	0	; () banked
  7196  002A00  51D4               	movf	(_measure_counter+1)& (0+255),w,b
  7197  002A02  E104               	bnz	u7620
  7198  002A04  0100               	movlb	0	; () banked
  7199  002A06  05D3               	decf	_measure_counter& (0+255),w,b
  7200  002A08  A0D8               	btfss	status,0,c
  7201  002A0A  D004               	goto	l5422
  7202  002A0C                     u7620:
  7203                           
  7204                           ; BSR set to: 0
  7205                           ;main.c: 524: measure_counter--;
  7206  002A0C  0100               	movlb	0	; () banked
  7207  002A0E  07D3               	decf	_measure_counter& (0+255),f,b
  7208  002A10  A0D8               	btfss	status,0,c
  7209  002A12  07D4               	decf	(_measure_counter+1)& (0+255),f,b
  7210  002A14                     l5422:
  7211                           
  7212                           ; BSR set to: 0
  7213                           ;main.c: 525: if (release_counter>0)
  7214  002A14  0100               	movlb	0	; () banked
  7215  002A16  BFD6               	btfsc	(_release_counter+1)& (0+255),7,b
  7216  002A18  D00B               	goto	l5426
  7217  002A1A  0100               	movlb	0	; () banked
  7218  002A1C  51D6               	movf	(_release_counter+1)& (0+255),w,b
  7219  002A1E  E104               	bnz	u7630
  7220  002A20  0100               	movlb	0	; () banked
  7221  002A22  05D5               	decf	_release_counter& (0+255),w,b
  7222  002A24  A0D8               	btfss	status,0,c
  7223  002A26  D004               	goto	l5426
  7224  002A28                     u7630:
  7225                           
  7226                           ; BSR set to: 0
  7227                           ;main.c: 526: release_counter--;
  7228  002A28  0100               	movlb	0	; () banked
  7229  002A2A  07D5               	decf	_release_counter& (0+255),f,b
  7230  002A2C  A0D8               	btfss	status,0,c
  7231  002A2E  07D6               	decf	(_release_counter+1)& (0+255),f,b
  7232  002A30                     l5426:
  7233                           
  7234                           ; BSR set to: 0
  7235                           ;main.c: 529: if (time_i[1]*60-latestSortedBottleTime[1]*60+time_i[0]-latestSortedBottle
      +                          Time[0]>=15)
  7236  002A30  C100  F094         	movff	_latestSortedBottleTime,??_sort
  7237  002A34  C101  F095         	movff	_latestSortedBottleTime+1,??_sort+1
  7238  002A38  0100               	movlb	0	; () banked
  7239  002A3A  1F94               	comf	??_sort& (0+255),f,b
  7240  002A3C  1F95               	comf	(??_sort+1)& (0+255),f,b
  7241  002A3E  4B94               	infsnz	??_sort& (0+255),f,b
  7242  002A40  2B95               	incf	(??_sort+1)& (0+255),f,b
  7243  002A42  C040  F080         	movff	_time_i+2,___wmul@multiplier
  7244  002A46  C041  F081         	movff	_time_i+3,___wmul@multiplier+1
  7245  002A4A  0E00               	movlw	0
  7246  002A4C  0100               	movlb	0	; () banked
  7247  002A4E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7248  002A50  0E3C               	movlw	60
  7249  002A52  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7250  002A54  EC21  F01B         	call	___wmul	;wreg free
  7251  002A58  C080  F096         	movff	?___wmul,??_sort+2
  7252  002A5C  C081  F097         	movff	?___wmul+1,??_sort+3
  7253  002A60  C102  F080         	movff	_latestSortedBottleTime+2,___wmul@multiplier
  7254  002A64  C103  F081         	movff	_latestSortedBottleTime+3,___wmul@multiplier+1
  7255  002A68  0E00               	movlw	0
  7256  002A6A  0100               	movlb	0	; () banked
  7257  002A6C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7258  002A6E  0E3C               	movlw	60
  7259  002A70  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7260  002A72  EC21  F01B         	call	___wmul	;wreg free
  7261  002A76  0100               	movlb	0	; () banked
  7262  002A78  1F80               	comf	?___wmul& (0+255),f,b
  7263  002A7A  0100               	movlb	0	; () banked
  7264  002A7C  1F81               	comf	(?___wmul+1)& (0+255),f,b
  7265  002A7E  0100               	movlb	0	; () banked
  7266  002A80  4B80               	infsnz	?___wmul& (0+255),f,b
  7267  002A82  2B81               	incf	(?___wmul+1)& (0+255),f,b
  7268  002A84  0100               	movlb	0	; () banked
  7269  002A86  5180               	movf	?___wmul& (0+255),w,b
  7270  002A88  0100               	movlb	0	; () banked
  7271  002A8A  2796               	addwf	(??_sort+2)& (0+255),f,b
  7272  002A8C  0100               	movlb	0	; () banked
  7273  002A8E  5181               	movf	(?___wmul+1)& (0+255),w,b
  7274  002A90  0100               	movlb	0	; () banked
  7275  002A92  2397               	addwfc	(??_sort+3)& (0+255),f,b
  7276  002A94  0100               	movlb	0	; () banked
  7277  002A96  5194               	movf	??_sort& (0+255),w,b
  7278  002A98  0100               	movlb	0	; () banked
  7279  002A9A  2796               	addwf	(??_sort+2)& (0+255),f,b
  7280  002A9C  0100               	movlb	0	; () banked
  7281  002A9E  5195               	movf	(??_sort+1)& (0+255),w,b
  7282  002AA0  0100               	movlb	0	; () banked
  7283  002AA2  2397               	addwfc	(??_sort+3)& (0+255),f,b
  7284  002AA4  503E               	movf	_time_i,w,c
  7285  002AA6  0100               	movlb	0	; () banked
  7286  002AA8  2796               	addwf	(??_sort+2)& (0+255),f,b
  7287  002AAA  503F               	movf	_time_i+1,w,c
  7288  002AAC  0100               	movlb	0	; () banked
  7289  002AAE  2397               	addwfc	(??_sort+3)& (0+255),f,b
  7290  002AB0  0100               	movlb	0	; () banked
  7291  002AB2  BF97               	btfsc	(??_sort+3)& (0+255),7,b
  7292  002AB4  0012               	return	
  7293  002AB6  0100               	movlb	0	; () banked
  7294  002AB8  5197               	movf	(??_sort+3)& (0+255),w,b
  7295  002ABA  E105               	bnz	u7640
  7296  002ABC  0E0F               	movlw	15
  7297  002ABE  0100               	movlb	0	; () banked
  7298  002AC0  5D96               	subwf	(??_sort+2)& (0+255),w,b
  7299  002AC2  A0D8               	btfss	status,0,c
  7300  002AC4  0012               	return	
  7301  002AC6                     u7640:
  7302                           
  7303                           ; BSR set to: 0
  7304                           ;main.c: 530: nstate='e';
  7305  002AC6  0E65               	movlw	101
  7306  002AC8  0100               	movlb	0	; () banked
  7307  002ACA  6FED               	movwf	_nstate& (0+255),b
  7308  002ACC  0012               	return	
  7309  002ACE                     __end_of_sort:
  7310                           	opt stack 0
  7311                           tosu	equ	0xFFF
  7312                           tosh	equ	0xFFE
  7313                           tosl	equ	0xFFD
  7314                           pclath	equ	0xFFA
  7315                           tblptru	equ	0xFF8
  7316                           tblptrh	equ	0xFF7
  7317                           tblptrl	equ	0xFF6
  7318                           tablat	equ	0xFF5
  7319                           prodh	equ	0xFF4
  7320                           prodl	equ	0xFF3
  7321                           intcon	equ	0xFF2
  7322                           intcon2	equ	0xFF1
  7323                           intcon3	equ	0xFF0
  7324                           indf0	equ	0xFEF
  7325                           postinc0	equ	0xFEE
  7326                           fsr0h	equ	0xFEA
  7327                           fsr0l	equ	0xFE9
  7328                           wreg	equ	0xFE8
  7329                           indf1	equ	0xFE7
  7330                           postinc1	equ	0xFE6
  7331                           postdec1	equ	0xFE5
  7332                           fsr1h	equ	0xFE2
  7333                           fsr1l	equ	0xFE1
  7334                           indf2	equ	0xFDF
  7335                           postinc2	equ	0xFDE
  7336                           postdec2	equ	0xFDD
  7337                           fsr2h	equ	0xFDA
  7338                           fsr2l	equ	0xFD9
  7339                           status	equ	0xFD8
  7340                           
  7341 ;; *************** function __measure *****************
  7342 ;; Defined at:
  7343 ;;		line 561 in file "main.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;		None
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;  i               1   17[BANK0 ] unsigned char 
  7348 ;;  i               1   16[BANK0 ] unsigned char 
  7349 ;;  i               1   15[BANK0 ] unsigned char 
  7350 ;;  i               1   14[BANK0 ] unsigned char 
  7351 ;;  i               1   13[BANK0 ] unsigned char 
  7352 ;;  i               1   12[BANK0 ] unsigned char 
  7353 ;;  i               1   11[BANK0 ] unsigned char 
  7354 ;;  i               1   10[BANK0 ] unsigned char 
  7355 ;;  measurement     2   18[BANK0 ] int 
  7356 ;; Return value:  Size  Location     Type
  7357 ;;                  2    6[BANK0 ] int 
  7358 ;; Registers used:
  7359 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7360 ;; Tracked objects:
  7361 ;;		On entry : 0/0
  7362 ;;		On exit  : 0/0
  7363 ;;		Unchanged: 0/0
  7364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7365 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7368 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7369 ;;Total ram usage:       14 bytes
  7370 ;; Hardware stack levels used:    1
  7371 ;; Hardware stack levels required when called:    6
  7372 ;; This function calls:
  7373 ;;		___awmod
  7374 ;; This function is called by:
  7375 ;;		_update_display
  7376 ;;		_sort
  7377 ;; This function uses a non-reentrant model
  7378 ;;
  7379                           
  7380                           	psect	text18
  7381  001C54                     __ptext18:
  7382                           	opt stack 0
  7383  001C54                     __measure:
  7384                           	opt stack 23
  7385                           
  7386                           ;main.c: 573: int measurement=0;
  7387                           
  7388                           ; BSR set to: 0
  7389                           ;incstack = 0
  7390  001C54  0E00               	movlw	0
  7391  001C56  0100               	movlb	0	; () banked
  7392  001C58  6F93               	movwf	(__measure@measurement+1)& (0+255),b
  7393  001C5A  0E00               	movlw	0
  7394  001C5C  6F92               	movwf	__measure@measurement& (0+255),b
  7395                           
  7396                           ;main.c: 576: for (char i=0;i<5;i++)
  7397  001C5E  0E00               	movlw	0
  7398  001C60  0100               	movlb	0	; () banked
  7399  001C62  6F8A               	movwf	__measure@i& (0+255),b
  7400  001C64                     l4786:
  7401                           
  7402                           ; BSR set to: 0
  7403  001C64  0E04               	movlw	4
  7404  001C66  0100               	movlb	0	; () banked
  7405  001C68  658A               	cpfsgt	__measure@i& (0+255),b
  7406  001C6A  D001               	goto	l4790
  7407  001C6C  D012               	goto	l4796
  7408  001C6E                     l4790:
  7409                           
  7410                           ; BSR set to: 0
  7411                           ;main.c: 577: measurement+=PROX1[i];
  7412  001C6E  0100               	movlb	0	; () banked
  7413  001C70  518A               	movf	__measure@i& (0+255),w,b
  7414  001C72  0D02               	mullw	2
  7415  001C74  0E60               	movlw	low _PROX1
  7416  001C76  24F3               	addwf	prodl,w,c
  7417  001C78  6ED9               	movwf	fsr2l,c
  7418  001C7A  0E00               	movlw	high _PROX1
  7419  001C7C  20F4               	addwfc	prodh,w,c
  7420  001C7E  6EDA               	movwf	fsr2h,c
  7421  001C80  50DE               	movf	postinc2,w,c
  7422  001C82  0100               	movlb	0	; () banked
  7423  001C84  2792               	addwf	__measure@measurement& (0+255),f,b
  7424  001C86  50DD               	movf	postdec2,w,c
  7425  001C88  0100               	movlb	0	; () banked
  7426  001C8A  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  7427                           
  7428                           ; BSR set to: 0
  7429  001C8C  0100               	movlb	0	; () banked
  7430  001C8E  2B8A               	incf	__measure@i& (0+255),f,b
  7431  001C90  D7E9               	goto	l4786
  7432  001C92                     l4796:
  7433                           
  7434                           ; BSR set to: 0
  7435                           ;main.c: 578: if (measurement%5!=0)
  7436  001C92  C092  F080         	movff	__measure@measurement,___awmod@dividend
  7437  001C96  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  7438  001C9A  0E00               	movlw	0
  7439  001C9C  0100               	movlb	0	; () banked
  7440  001C9E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7441  001CA0  0E05               	movlw	5
  7442  001CA2  6F82               	movwf	___awmod@divisor& (0+255),b
  7443  001CA4  ECF3  F017         	call	___awmod	;wreg free
  7444  001CA8  0100               	movlb	0	; () banked
  7445  001CAA  5180               	movf	?___awmod& (0+255),w,b
  7446  001CAC  0100               	movlb	0	; () banked
  7447  001CAE  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  7448  001CB0  B4D8               	btfsc	status,2,c
  7449  001CB2  D006               	goto	l4802
  7450                           
  7451                           ; BSR set to: 0
  7452                           ;main.c: 579: return 0;
  7453  001CB4  0E00               	movlw	0
  7454  001CB6  0100               	movlb	0	; () banked
  7455  001CB8  6F87               	movwf	(?__measure+1)& (0+255),b
  7456  001CBA  0E00               	movlw	0
  7457  001CBC  6F86               	movwf	?__measure& (0+255),b
  7458                           
  7459                           ; BSR set to: 0
  7460  001CBE  0012               	return	
  7461  001CC0                     l4802:
  7462                           
  7463                           ; BSR set to: 0
  7464                           ;main.c: 580: for (char i=0;i<5;i++)
  7465  001CC0  0E00               	movlw	0
  7466  001CC2  0100               	movlb	0	; () banked
  7467  001CC4  6F8B               	movwf	__measure@i_483& (0+255),b
  7468  001CC6                     l4804:
  7469                           
  7470                           ; BSR set to: 0
  7471  001CC6  0E04               	movlw	4
  7472  001CC8  0100               	movlb	0	; () banked
  7473  001CCA  658B               	cpfsgt	__measure@i_483& (0+255),b
  7474  001CCC  D001               	goto	l4808
  7475  001CCE  D012               	goto	l4814
  7476  001CD0                     l4808:
  7477                           
  7478                           ; BSR set to: 0
  7479                           ;main.c: 581: measurement+=PROX2[i];
  7480  001CD0  0100               	movlb	0	; () banked
  7481  001CD2  518B               	movf	__measure@i_483& (0+255),w,b
  7482  001CD4  0D02               	mullw	2
  7483  001CD6  0E6A               	movlw	low _PROX2
  7484  001CD8  24F3               	addwf	prodl,w,c
  7485  001CDA  6ED9               	movwf	fsr2l,c
  7486  001CDC  0E00               	movlw	high _PROX2
  7487  001CDE  20F4               	addwfc	prodh,w,c
  7488  001CE0  6EDA               	movwf	fsr2h,c
  7489  001CE2  50DE               	movf	postinc2,w,c
  7490  001CE4  0100               	movlb	0	; () banked
  7491  001CE6  2792               	addwf	__measure@measurement& (0+255),f,b
  7492  001CE8  50DD               	movf	postdec2,w,c
  7493  001CEA  0100               	movlb	0	; () banked
  7494  001CEC  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  7495                           
  7496                           ; BSR set to: 0
  7497  001CEE  0100               	movlb	0	; () banked
  7498  001CF0  2B8B               	incf	__measure@i_483& (0+255),f,b
  7499  001CF2  D7E9               	goto	l4804
  7500  001CF4                     l4814:
  7501                           
  7502                           ; BSR set to: 0
  7503                           ;main.c: 582: if (measurement%5!=0)
  7504  001CF4  C092  F080         	movff	__measure@measurement,___awmod@dividend
  7505  001CF8  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  7506  001CFC  0E00               	movlw	0
  7507  001CFE  0100               	movlb	0	; () banked
  7508  001D00  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7509  001D02  0E05               	movlw	5
  7510  001D04  6F82               	movwf	___awmod@divisor& (0+255),b
  7511  001D06  ECF3  F017         	call	___awmod	;wreg free
  7512  001D0A  0100               	movlb	0	; () banked
  7513  001D0C  5180               	movf	?___awmod& (0+255),w,b
  7514  001D0E  0100               	movlb	0	; () banked
  7515  001D10  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  7516  001D12  B4D8               	btfsc	status,2,c
  7517  001D14  D006               	goto	l4820
  7518                           
  7519                           ; BSR set to: 0
  7520                           ;main.c: 583: return 0;
  7521  001D16  0E00               	movlw	0
  7522  001D18  0100               	movlb	0	; () banked
  7523  001D1A  6F87               	movwf	(?__measure+1)& (0+255),b
  7524  001D1C  0E00               	movlw	0
  7525  001D1E  6F86               	movwf	?__measure& (0+255),b
  7526                           
  7527                           ; BSR set to: 0
  7528  001D20  0012               	return	
  7529  001D22                     l4820:
  7530                           
  7531                           ; BSR set to: 0
  7532                           ;main.c: 586: for (char i=0;i<5;i++)
  7533  001D22  0E00               	movlw	0
  7534  001D24  0100               	movlb	0	; () banked
  7535  001D26  6F8C               	movwf	__measure@i_484& (0+255),b
  7536  001D28                     l4822:
  7537                           
  7538                           ; BSR set to: 0
  7539  001D28  0E04               	movlw	4
  7540  001D2A  0100               	movlb	0	; () banked
  7541  001D2C  658C               	cpfsgt	__measure@i_484& (0+255),b
  7542  001D2E  D001               	goto	l4826
  7543  001D30  D01B               	goto	l4832
  7544  001D32                     l4826:
  7545                           
  7546                           ; BSR set to: 0
  7547                           ;main.c: 587: measurement+=(DIST1[i]<DIST_THRESHOLD_LOW);
  7548  001D32  0100               	movlb	0	; () banked
  7549  001D34  518C               	movf	__measure@i_484& (0+255),w,b
  7550  001D36  0D02               	mullw	2
  7551  001D38  0E4C               	movlw	low _DIST1
  7552  001D3A  24F3               	addwf	prodl,w,c
  7553  001D3C  6ED9               	movwf	fsr2l,c
  7554  001D3E  0E00               	movlw	high _DIST1
  7555  001D40  20F4               	addwfc	prodh,w,c
  7556  001D42  6EDA               	movwf	fsr2h,c
  7557  001D44  0100               	movlb	0	; () banked
  7558  001D46  51E3               	movf	_DIST_THRESHOLD_LOW& (0+255),w,b
  7559  001D48  5CDE               	subwf	postinc2,w,c
  7560  001D4A  0100               	movlb	0	; () banked
  7561  001D4C  51E4               	movf	(_DIST_THRESHOLD_LOW+1)& (0+255),w,b
  7562  001D4E  58DE               	subwfb	postinc2,w,c
  7563  001D50  B0D8               	btfsc	status,0,c
  7564  001D52  D002               	goto	u6410
  7565  001D54  0E01               	movlw	1
  7566  001D56  D001               	goto	u6420
  7567  001D58                     u6410:
  7568  001D58  0E00               	movlw	0
  7569  001D5A                     u6420:
  7570  001D5A  0100               	movlb	0	; () banked
  7571  001D5C  2792               	addwf	__measure@measurement& (0+255),f,b
  7572  001D5E  0E00               	movlw	0
  7573  001D60  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  7574                           
  7575                           ; BSR set to: 0
  7576  001D62  0100               	movlb	0	; () banked
  7577  001D64  2B8C               	incf	__measure@i_484& (0+255),f,b
  7578  001D66  D7E0               	goto	l4822
  7579  001D68                     l4832:
  7580                           
  7581                           ; BSR set to: 0
  7582                           ;main.c: 588: if (measurement%5!=0)
  7583  001D68  C092  F080         	movff	__measure@measurement,___awmod@dividend
  7584  001D6C  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  7585  001D70  0E00               	movlw	0
  7586  001D72  0100               	movlb	0	; () banked
  7587  001D74  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7588  001D76  0E05               	movlw	5
  7589  001D78  6F82               	movwf	___awmod@divisor& (0+255),b
  7590  001D7A  ECF3  F017         	call	___awmod	;wreg free
  7591  001D7E  0100               	movlb	0	; () banked
  7592  001D80  5180               	movf	?___awmod& (0+255),w,b
  7593  001D82  0100               	movlb	0	; () banked
  7594  001D84  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  7595  001D86  B4D8               	btfsc	status,2,c
  7596  001D88  D006               	goto	l4838
  7597                           
  7598                           ; BSR set to: 0
  7599                           ;main.c: 589: return 0;
  7600  001D8A  0E00               	movlw	0
  7601  001D8C  0100               	movlb	0	; () banked
  7602  001D8E  6F87               	movwf	(?__measure+1)& (0+255),b
  7603  001D90  0E00               	movlw	0
  7604  001D92  6F86               	movwf	?__measure& (0+255),b
  7605                           
  7606                           ; BSR set to: 0
  7607  001D94  0012               	return	
  7608  001D96                     l4838:
  7609                           
  7610                           ; BSR set to: 0
  7611                           ;main.c: 590: for (char i=0;i<5;i++)
  7612  001D96  0E00               	movlw	0
  7613  001D98  0100               	movlb	0	; () banked
  7614  001D9A  6F8D               	movwf	__measure@i_485& (0+255),b
  7615  001D9C                     l4840:
  7616                           
  7617                           ; BSR set to: 0
  7618  001D9C  0E04               	movlw	4
  7619  001D9E  0100               	movlb	0	; () banked
  7620  001DA0  658D               	cpfsgt	__measure@i_485& (0+255),b
  7621  001DA2  D001               	goto	l4844
  7622  001DA4  D01B               	goto	l4850
  7623  001DA6                     l4844:
  7624                           
  7625                           ; BSR set to: 0
  7626                           ;main.c: 591: measurement+=(DIST1[i]<DIST_THRESHOLD_HI);
  7627  001DA6  0100               	movlb	0	; () banked
  7628  001DA8  518D               	movf	__measure@i_485& (0+255),w,b
  7629  001DAA  0D02               	mullw	2
  7630  001DAC  0E4C               	movlw	low _DIST1
  7631  001DAE  24F3               	addwf	prodl,w,c
  7632  001DB0  6ED9               	movwf	fsr2l,c
  7633  001DB2  0E00               	movlw	high _DIST1
  7634  001DB4  20F4               	addwfc	prodh,w,c
  7635  001DB6  6EDA               	movwf	fsr2h,c
  7636  001DB8  0100               	movlb	0	; () banked
  7637  001DBA  51E1               	movf	_DIST_THRESHOLD_HI& (0+255),w,b
  7638  001DBC  5CDE               	subwf	postinc2,w,c
  7639  001DBE  0100               	movlb	0	; () banked
  7640  001DC0  51E2               	movf	(_DIST_THRESHOLD_HI+1)& (0+255),w,b
  7641  001DC2  58DE               	subwfb	postinc2,w,c
  7642  001DC4  B0D8               	btfsc	status,0,c
  7643  001DC6  D002               	goto	u6460
  7644  001DC8  0E01               	movlw	1
  7645  001DCA  D001               	goto	u6470
  7646  001DCC                     u6460:
  7647  001DCC  0E00               	movlw	0
  7648  001DCE                     u6470:
  7649  001DCE  0100               	movlb	0	; () banked
  7650  001DD0  2792               	addwf	__measure@measurement& (0+255),f,b
  7651  001DD2  0E00               	movlw	0
  7652  001DD4  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  7653                           
  7654                           ; BSR set to: 0
  7655  001DD6  0100               	movlb	0	; () banked
  7656  001DD8  2B8D               	incf	__measure@i_485& (0+255),f,b
  7657  001DDA  D7E0               	goto	l4840
  7658  001DDC                     l4850:
  7659                           
  7660                           ; BSR set to: 0
  7661                           ;main.c: 592: if (measurement%5!=0)
  7662  001DDC  C092  F080         	movff	__measure@measurement,___awmod@dividend
  7663  001DE0  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  7664  001DE4  0E00               	movlw	0
  7665  001DE6  0100               	movlb	0	; () banked
  7666  001DE8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7667  001DEA  0E05               	movlw	5
  7668  001DEC  6F82               	movwf	___awmod@divisor& (0+255),b
  7669  001DEE  ECF3  F017         	call	___awmod	;wreg free
  7670  001DF2  0100               	movlb	0	; () banked
  7671  001DF4  5180               	movf	?___awmod& (0+255),w,b
  7672  001DF6  0100               	movlb	0	; () banked
  7673  001DF8  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  7674  001DFA  B4D8               	btfsc	status,2,c
  7675  001DFC  D006               	goto	l4856
  7676                           
  7677                           ; BSR set to: 0
  7678                           ;main.c: 593: return 0;
  7679  001DFE  0E00               	movlw	0
  7680  001E00  0100               	movlb	0	; () banked
  7681  001E02  6F87               	movwf	(?__measure+1)& (0+255),b
  7682  001E04  0E00               	movlw	0
  7683  001E06  6F86               	movwf	?__measure& (0+255),b
  7684                           
  7685                           ; BSR set to: 0
  7686  001E08  0012               	return	
  7687  001E0A                     l4856:
  7688                           
  7689                           ; BSR set to: 0
  7690                           ;main.c: 596: for (char i=0;i<5;i++)
  7691  001E0A  0E00               	movlw	0
  7692  001E0C  0100               	movlb	0	; () banked
  7693  001E0E  6F8E               	movwf	__measure@i_486& (0+255),b
  7694  001E10                     l4858:
  7695                           
  7696                           ; BSR set to: 0
  7697  001E10  0E04               	movlw	4
  7698  001E12  0100               	movlb	0	; () banked
  7699  001E14  658E               	cpfsgt	__measure@i_486& (0+255),b
  7700  001E16  D001               	goto	l4862
  7701  001E18  D01B               	goto	l4868
  7702  001E1A                     l4862:
  7703                           
  7704                           ; BSR set to: 0
  7705                           ;main.c: 597: measurement+=(IR1[i]<IR_THRESHOLD_LOW);
  7706  001E1A  0100               	movlb	0	; () banked
  7707  001E1C  518E               	movf	__measure@i_486& (0+255),w,b
  7708  001E1E  0D02               	mullw	2
  7709  001E20  0E56               	movlw	low _IR1
  7710  001E22  24F3               	addwf	prodl,w,c
  7711  001E24  6ED9               	movwf	fsr2l,c
  7712  001E26  0E00               	movlw	high _IR1
  7713  001E28  20F4               	addwfc	prodh,w,c
  7714  001E2A  6EDA               	movwf	fsr2h,c
  7715  001E2C  0100               	movlb	0	; () banked
  7716  001E2E  51E7               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  7717  001E30  5CDE               	subwf	postinc2,w,c
  7718  001E32  0100               	movlb	0	; () banked
  7719  001E34  51E8               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  7720  001E36  58DE               	subwfb	postinc2,w,c
  7721  001E38  B0D8               	btfsc	status,0,c
  7722  001E3A  D002               	goto	u6510
  7723  001E3C  0E01               	movlw	1
  7724  001E3E  D001               	goto	u6520
  7725  001E40                     u6510:
  7726  001E40  0E00               	movlw	0
  7727  001E42                     u6520:
  7728  001E42  0100               	movlb	0	; () banked
  7729  001E44  2792               	addwf	__measure@measurement& (0+255),f,b
  7730  001E46  0E00               	movlw	0
  7731  001E48  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  7732                           
  7733                           ; BSR set to: 0
  7734  001E4A  0100               	movlb	0	; () banked
  7735  001E4C  2B8E               	incf	__measure@i_486& (0+255),f,b
  7736  001E4E  D7E0               	goto	l4858
  7737  001E50                     l4868:
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;main.c: 598: if (measurement%5!=0)
  7741  001E50  C092  F080         	movff	__measure@measurement,___awmod@dividend
  7742  001E54  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  7743  001E58  0E00               	movlw	0
  7744  001E5A  0100               	movlb	0	; () banked
  7745  001E5C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7746  001E5E  0E05               	movlw	5
  7747  001E60  6F82               	movwf	___awmod@divisor& (0+255),b
  7748  001E62  ECF3  F017         	call	___awmod	;wreg free
  7749  001E66  0100               	movlb	0	; () banked
  7750  001E68  5180               	movf	?___awmod& (0+255),w,b
  7751  001E6A  0100               	movlb	0	; () banked
  7752  001E6C  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  7753  001E6E  B4D8               	btfsc	status,2,c
  7754  001E70  D006               	goto	l4874
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;main.c: 599: return 0;
  7758  001E72  0E00               	movlw	0
  7759  001E74  0100               	movlb	0	; () banked
  7760  001E76  6F87               	movwf	(?__measure+1)& (0+255),b
  7761  001E78  0E00               	movlw	0
  7762  001E7A  6F86               	movwf	?__measure& (0+255),b
  7763                           
  7764                           ; BSR set to: 0
  7765  001E7C  0012               	return	
  7766  001E7E                     l4874:
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;main.c: 601: for (char i=0;i<5;i++)
  7770  001E7E  0E00               	movlw	0
  7771  001E80  0100               	movlb	0	; () banked
  7772  001E82  6F8F               	movwf	__measure@i_487& (0+255),b
  7773  001E84                     l4876:
  7774                           
  7775                           ; BSR set to: 0
  7776  001E84  0E04               	movlw	4
  7777  001E86  0100               	movlb	0	; () banked
  7778  001E88  658F               	cpfsgt	__measure@i_487& (0+255),b
  7779  001E8A  D001               	goto	l4880
  7780  001E8C  D01B               	goto	l4886
  7781  001E8E                     l4880:
  7782                           
  7783                           ; BSR set to: 0
  7784                           ;main.c: 602: measurement+=(IR1[i]<IR_THRESHOLD_HI);
  7785  001E8E  0100               	movlb	0	; () banked
  7786  001E90  518F               	movf	__measure@i_487& (0+255),w,b
  7787  001E92  0D02               	mullw	2
  7788  001E94  0E56               	movlw	low _IR1
  7789  001E96  24F3               	addwf	prodl,w,c
  7790  001E98  6ED9               	movwf	fsr2l,c
  7791  001E9A  0E00               	movlw	high _IR1
  7792  001E9C  20F4               	addwfc	prodh,w,c
  7793  001E9E  6EDA               	movwf	fsr2h,c
  7794  001EA0  0100               	movlb	0	; () banked
  7795  001EA2  51E5               	movf	_IR_THRESHOLD_HI& (0+255),w,b
  7796  001EA4  5CDE               	subwf	postinc2,w,c
  7797  001EA6  0100               	movlb	0	; () banked
  7798  001EA8  51E6               	movf	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  7799  001EAA  58DE               	subwfb	postinc2,w,c
  7800  001EAC  B0D8               	btfsc	status,0,c
  7801  001EAE  D002               	goto	u6560
  7802  001EB0  0E01               	movlw	1
  7803  001EB2  D001               	goto	u6570
  7804  001EB4                     u6560:
  7805  001EB4  0E00               	movlw	0
  7806  001EB6                     u6570:
  7807  001EB6  0100               	movlb	0	; () banked
  7808  001EB8  2792               	addwf	__measure@measurement& (0+255),f,b
  7809  001EBA  0E00               	movlw	0
  7810  001EBC  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  7811                           
  7812                           ; BSR set to: 0
  7813  001EBE  0100               	movlb	0	; () banked
  7814  001EC0  2B8F               	incf	__measure@i_487& (0+255),f,b
  7815  001EC2  D7E0               	goto	l4876
  7816  001EC4                     l4886:
  7817                           
  7818                           ; BSR set to: 0
  7819                           ;main.c: 603: if (measurement%5!=0)
  7820  001EC4  C092  F080         	movff	__measure@measurement,___awmod@dividend
  7821  001EC8  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  7822  001ECC  0E00               	movlw	0
  7823  001ECE  0100               	movlb	0	; () banked
  7824  001ED0  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7825  001ED2  0E05               	movlw	5
  7826  001ED4  6F82               	movwf	___awmod@divisor& (0+255),b
  7827  001ED6  ECF3  F017         	call	___awmod	;wreg free
  7828  001EDA  0100               	movlb	0	; () banked
  7829  001EDC  5180               	movf	?___awmod& (0+255),w,b
  7830  001EDE  0100               	movlb	0	; () banked
  7831  001EE0  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  7832  001EE2  B4D8               	btfsc	status,2,c
  7833  001EE4  D006               	goto	l4892
  7834                           
  7835                           ; BSR set to: 0
  7836                           ;main.c: 604: return 0;
  7837  001EE6  0E00               	movlw	0
  7838  001EE8  0100               	movlb	0	; () banked
  7839  001EEA  6F87               	movwf	(?__measure+1)& (0+255),b
  7840  001EEC  0E00               	movlw	0
  7841  001EEE  6F86               	movwf	?__measure& (0+255),b
  7842                           
  7843                           ; BSR set to: 0
  7844  001EF0  0012               	return	
  7845  001EF2                     l4892:
  7846                           
  7847                           ; BSR set to: 0
  7848                           ;main.c: 606: for (char i=0;i<5;i++)
  7849  001EF2  0E00               	movlw	0
  7850  001EF4  0100               	movlb	0	; () banked
  7851  001EF6  6F90               	movwf	__measure@i_488& (0+255),b
  7852  001EF8                     l4894:
  7853                           
  7854                           ; BSR set to: 0
  7855  001EF8  0E04               	movlw	4
  7856  001EFA  0100               	movlb	0	; () banked
  7857  001EFC  6590               	cpfsgt	__measure@i_488& (0+255),b
  7858  001EFE  D001               	goto	l4898
  7859  001F00  D01B               	goto	l4904
  7860  001F02                     l4898:
  7861                           
  7862                           ; BSR set to: 0
  7863                           ;main.c: 607: measurement+=(IR2[i]<IR_THRESHOLD_LOW);
  7864  001F02  0100               	movlb	0	; () banked
  7865  001F04  5190               	movf	__measure@i_488& (0+255),w,b
  7866  001F06  0D02               	mullw	2
  7867  001F08  0E1C               	movlw	low _IR2
  7868  001F0A  24F3               	addwf	prodl,w,c
  7869  001F0C  6ED9               	movwf	fsr2l,c
  7870  001F0E  0E01               	movlw	high _IR2
  7871  001F10  20F4               	addwfc	prodh,w,c
  7872  001F12  6EDA               	movwf	fsr2h,c
  7873  001F14  0100               	movlb	0	; () banked
  7874  001F16  51E7               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  7875  001F18  5CDE               	subwf	postinc2,w,c
  7876  001F1A  0100               	movlb	0	; () banked
  7877  001F1C  51E8               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  7878  001F1E  58DE               	subwfb	postinc2,w,c
  7879  001F20  B0D8               	btfsc	status,0,c
  7880  001F22  D002               	goto	u6610
  7881  001F24  0E01               	movlw	1
  7882  001F26  D001               	goto	u6620
  7883  001F28                     u6610:
  7884  001F28  0E00               	movlw	0
  7885  001F2A                     u6620:
  7886  001F2A  0100               	movlb	0	; () banked
  7887  001F2C  2792               	addwf	__measure@measurement& (0+255),f,b
  7888  001F2E  0E00               	movlw	0
  7889  001F30  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  7890                           
  7891                           ; BSR set to: 0
  7892  001F32  0100               	movlb	0	; () banked
  7893  001F34  2B90               	incf	__measure@i_488& (0+255),f,b
  7894  001F36  D7E0               	goto	l4894
  7895  001F38                     l4904:
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;main.c: 608: if (measurement%5!=0)
  7899  001F38  C092  F080         	movff	__measure@measurement,___awmod@dividend
  7900  001F3C  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  7901  001F40  0E00               	movlw	0
  7902  001F42  0100               	movlb	0	; () banked
  7903  001F44  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7904  001F46  0E05               	movlw	5
  7905  001F48  6F82               	movwf	___awmod@divisor& (0+255),b
  7906  001F4A  ECF3  F017         	call	___awmod	;wreg free
  7907  001F4E  0100               	movlb	0	; () banked
  7908  001F50  5180               	movf	?___awmod& (0+255),w,b
  7909  001F52  0100               	movlb	0	; () banked
  7910  001F54  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  7911  001F56  B4D8               	btfsc	status,2,c
  7912  001F58  D006               	goto	l4910
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;main.c: 609: return 0;
  7916  001F5A  0E00               	movlw	0
  7917  001F5C  0100               	movlb	0	; () banked
  7918  001F5E  6F87               	movwf	(?__measure+1)& (0+255),b
  7919  001F60  0E00               	movlw	0
  7920  001F62  6F86               	movwf	?__measure& (0+255),b
  7921                           
  7922                           ; BSR set to: 0
  7923  001F64  0012               	return	
  7924  001F66                     l4910:
  7925                           
  7926                           ; BSR set to: 0
  7927                           ;main.c: 611: for (char i=0;i<5;i++)
  7928  001F66  0E00               	movlw	0
  7929  001F68  0100               	movlb	0	; () banked
  7930  001F6A  6F91               	movwf	__measure@i_489& (0+255),b
  7931  001F6C                     l4912:
  7932                           
  7933                           ; BSR set to: 0
  7934  001F6C  0E04               	movlw	4
  7935  001F6E  0100               	movlb	0	; () banked
  7936  001F70  6591               	cpfsgt	__measure@i_489& (0+255),b
  7937  001F72  D001               	goto	l4916
  7938  001F74  D01B               	goto	l4922
  7939  001F76                     l4916:
  7940                           
  7941                           ; BSR set to: 0
  7942                           ;main.c: 612: measurement+=(IR1[i]<IR_THRESHOLD_HI);
  7943  001F76  0100               	movlb	0	; () banked
  7944  001F78  5191               	movf	__measure@i_489& (0+255),w,b
  7945  001F7A  0D02               	mullw	2
  7946  001F7C  0E56               	movlw	low _IR1
  7947  001F7E  24F3               	addwf	prodl,w,c
  7948  001F80  6ED9               	movwf	fsr2l,c
  7949  001F82  0E00               	movlw	high _IR1
  7950  001F84  20F4               	addwfc	prodh,w,c
  7951  001F86  6EDA               	movwf	fsr2h,c
  7952  001F88  0100               	movlb	0	; () banked
  7953  001F8A  51E5               	movf	_IR_THRESHOLD_HI& (0+255),w,b
  7954  001F8C  5CDE               	subwf	postinc2,w,c
  7955  001F8E  0100               	movlb	0	; () banked
  7956  001F90  51E6               	movf	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  7957  001F92  58DE               	subwfb	postinc2,w,c
  7958  001F94  B0D8               	btfsc	status,0,c
  7959  001F96  D002               	goto	u6660
  7960  001F98  0E01               	movlw	1
  7961  001F9A  D001               	goto	u6670
  7962  001F9C                     u6660:
  7963  001F9C  0E00               	movlw	0
  7964  001F9E                     u6670:
  7965  001F9E  0100               	movlb	0	; () banked
  7966  001FA0  2792               	addwf	__measure@measurement& (0+255),f,b
  7967  001FA2  0E00               	movlw	0
  7968  001FA4  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  7969                           
  7970                           ; BSR set to: 0
  7971  001FA6  0100               	movlb	0	; () banked
  7972  001FA8  2B91               	incf	__measure@i_489& (0+255),f,b
  7973  001FAA  D7E0               	goto	l4912
  7974  001FAC                     l4922:
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;main.c: 613: if (measurement%5!=0)
  7978  001FAC  C092  F080         	movff	__measure@measurement,___awmod@dividend
  7979  001FB0  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  7980  001FB4  0E00               	movlw	0
  7981  001FB6  0100               	movlb	0	; () banked
  7982  001FB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7983  001FBA  0E05               	movlw	5
  7984  001FBC  6F82               	movwf	___awmod@divisor& (0+255),b
  7985  001FBE  ECF3  F017         	call	___awmod	;wreg free
  7986  001FC2  0100               	movlb	0	; () banked
  7987  001FC4  5180               	movf	?___awmod& (0+255),w,b
  7988  001FC6  0100               	movlb	0	; () banked
  7989  001FC8  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  7990  001FCA  B4D8               	btfsc	status,2,c
  7991  001FCC  D006               	goto	l4928
  7992                           
  7993                           ; BSR set to: 0
  7994                           ;main.c: 614: return 0;
  7995  001FCE  0E00               	movlw	0
  7996  001FD0  0100               	movlb	0	; () banked
  7997  001FD2  6F87               	movwf	(?__measure+1)& (0+255),b
  7998  001FD4  0E00               	movlw	0
  7999  001FD6  6F86               	movwf	?__measure& (0+255),b
  8000                           
  8001                           ; BSR set to: 0
  8002  001FD8  0012               	return	
  8003  001FDA                     l4928:
  8004                           
  8005                           ; BSR set to: 0
  8006                           ;main.c: 617: measurement=0;
  8007  001FDA  0E00               	movlw	0
  8008  001FDC  0100               	movlb	0	; () banked
  8009  001FDE  6F93               	movwf	(__measure@measurement+1)& (0+255),b
  8010  001FE0  0E00               	movlw	0
  8011  001FE2  6F92               	movwf	__measure@measurement& (0+255),b
  8012                           
  8013                           ; BSR set to: 0
  8014                           ;main.c: 619: if (DIST1[0]>DIST_THRESHOLD_HI)
  8015  001FE4  504C               	movf	_DIST1,w,c
  8016  001FE6  0100               	movlb	0	; () banked
  8017  001FE8  5DE1               	subwf	_DIST_THRESHOLD_HI& (0+255),w,b
  8018  001FEA  504D               	movf	_DIST1+1,w,c
  8019  001FEC  0100               	movlb	0	; () banked
  8020  001FEE  59E2               	subwfb	(_DIST_THRESHOLD_HI+1)& (0+255),w,b
  8021  001FF0  B0D8               	btfsc	status,0,c
  8022  001FF2  D006               	goto	l4936
  8023                           
  8024                           ; BSR set to: 0
  8025                           ;main.c: 620: return 0;
  8026  001FF4  0E00               	movlw	0
  8027  001FF6  0100               	movlb	0	; () banked
  8028  001FF8  6F87               	movwf	(?__measure+1)& (0+255),b
  8029  001FFA  0E00               	movlw	0
  8030  001FFC  6F86               	movwf	?__measure& (0+255),b
  8031                           
  8032                           ; BSR set to: 0
  8033  001FFE  0012               	return	
  8034  002000                     l4936:
  8035                           
  8036                           ; BSR set to: 0
  8037                           ;main.c: 621: if (DIST1[0]>DIST_THRESHOLD_LOW){
  8038  002000  504C               	movf	_DIST1,w,c
  8039  002002  0100               	movlb	0	; () banked
  8040  002004  5DE3               	subwf	_DIST_THRESHOLD_LOW& (0+255),w,b
  8041  002006  504D               	movf	_DIST1+1,w,c
  8042  002008  0100               	movlb	0	; () banked
  8043  00200A  59E4               	subwfb	(_DIST_THRESHOLD_LOW+1)& (0+255),w,b
  8044  00200C  B0D8               	btfsc	status,0,c
  8045  00200E  D005               	goto	l4940
  8046                           
  8047                           ; BSR set to: 0
  8048                           ;main.c: 622: measurement+=PROX2[0];
  8049  002010  506A               	movf	_PROX2,w,c
  8050  002012  0100               	movlb	0	; () banked
  8051  002014  2792               	addwf	__measure@measurement& (0+255),f,b
  8052  002016  506B               	movf	_PROX2+1,w,c
  8053  002018  D004               	goto	L3
  8054  00201A                     l4940:
  8055                           
  8056                           ; BSR set to: 0
  8057                           ;main.c: 624: else
  8058                           ;main.c: 625: measurement+=PROX1[0];
  8059  00201A  5060               	movf	_PROX1,w,c
  8060  00201C  0100               	movlb	0	; () banked
  8061  00201E  2792               	addwf	__measure@measurement& (0+255),f,b
  8062  002020  5061               	movf	_PROX1+1,w,c
  8063  002022                     L3:
  8064  002022  0100               	movlb	0	; () banked
  8065  002024  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8066                           
  8067                           ; BSR set to: 0
  8068                           ;main.c: 628: if (IR1[0]>IR_THRESHOLD_HI||IR2[0]>IR_THRESHOLD_HI);
  8069  002026  5056               	movf	_IR1,w,c
  8070  002028  0100               	movlb	0	; () banked
  8071  00202A  5DE5               	subwf	_IR_THRESHOLD_HI& (0+255),w,b
  8072  00202C  5057               	movf	_IR1+1,w,c
  8073  00202E  0100               	movlb	0	; () banked
  8074  002030  59E6               	subwfb	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  8075  002032  A0D8               	btfss	status,0,c
  8076  002034  D028               	goto	l465
  8077                           
  8078                           ; BSR set to: 0
  8079  002036  0101               	movlb	1	; () banked
  8080  002038  511C               	movf	_IR2& (0+255),w,b
  8081  00203A  0100               	movlb	0	; () banked
  8082  00203C  5DE5               	subwf	_IR_THRESHOLD_HI& (0+255),w,b
  8083  00203E  0101               	movlb	1	; () banked
  8084  002040  511D               	movf	(_IR2+1)& (0+255),w,b
  8085  002042  0100               	movlb	0	; () banked
  8086  002044  59E6               	subwfb	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  8087  002046  A0D8               	btfss	status,0,c
  8088  002048  D01E               	goto	l465
  8089                           
  8090                           ; BSR set to: 0
  8091                           ;main.c: 629: else if (IR1[0]<IR_THRESHOLD_LOW&&IR2[0]<IR_THRESHOLD_LOW)
  8092                           
  8093                           ; BSR set to: 0
  8094                           
  8095                           ; BSR set to: 0
  8096  00204A  0100               	movlb	0	; () banked
  8097  00204C  51E7               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  8098  00204E  5C56               	subwf	_IR1,w,c
  8099  002050  0100               	movlb	0	; () banked
  8100  002052  51E8               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  8101  002054  5857               	subwfb	_IR1+1,w,c
  8102  002056  B0D8               	btfsc	status,0,c
  8103  002058  D010               	goto	l4950
  8104                           
  8105                           ; BSR set to: 0
  8106  00205A  0100               	movlb	0	; () banked
  8107  00205C  51E7               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  8108  00205E  0101               	movlb	1	; () banked
  8109  002060  5D1C               	subwf	_IR2& (0+255),w,b
  8110  002062  0100               	movlb	0	; () banked
  8111  002064  51E8               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  8112  002066  0101               	movlb	1	; () banked
  8113  002068  591D               	subwfb	(_IR2+1)& (0+255),w,b
  8114  00206A  B0D8               	btfsc	status,0,c
  8115  00206C  D006               	goto	l4950
  8116                           
  8117                           ; BSR set to: 1
  8118                           ;main.c: 630: measurement+=2;
  8119  00206E  0E02               	movlw	2
  8120  002070  0100               	movlb	0	; () banked
  8121  002072  2792               	addwf	__measure@measurement& (0+255),f,b
  8122  002074  0E00               	movlw	0
  8123  002076  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8124  002078  D006               	goto	l465
  8125  00207A                     l4950:
  8126                           
  8127                           ;main.c: 631: else
  8128                           ;main.c: 632: return 0;
  8129  00207A  0E00               	movlw	0
  8130  00207C  0100               	movlb	0	; () banked
  8131  00207E  6F87               	movwf	(?__measure+1)& (0+255),b
  8132  002080  0E00               	movlw	0
  8133  002082  6F86               	movwf	?__measure& (0+255),b
  8134                           
  8135                           ; BSR set to: 0
  8136  002084  0012               	return	
  8137  002086                     l465:
  8138                           
  8139                           ; BSR set to: 0
  8140                           ;main.c: 634: return measurement;
  8141  002086  C092  F086         	movff	__measure@measurement,?__measure
  8142  00208A  C093  F087         	movff	__measure@measurement+1,?__measure+1
  8143                           
  8144                           ; BSR set to: 0
  8145  00208E  0012               	return		;funcret
  8146  002090                     __end_of__measure:
  8147                           	opt stack 0
  8148                           tosu	equ	0xFFF
  8149                           tosh	equ	0xFFE
  8150                           tosl	equ	0xFFD
  8151                           pclath	equ	0xFFA
  8152                           tblptru	equ	0xFF8
  8153                           tblptrh	equ	0xFF7
  8154                           tblptrl	equ	0xFF6
  8155                           tablat	equ	0xFF5
  8156                           prodh	equ	0xFF4
  8157                           prodl	equ	0xFF3
  8158                           intcon	equ	0xFF2
  8159                           intcon2	equ	0xFF1
  8160                           intcon3	equ	0xFF0
  8161                           indf0	equ	0xFEF
  8162                           postinc0	equ	0xFEE
  8163                           fsr0h	equ	0xFEA
  8164                           fsr0l	equ	0xFE9
  8165                           wreg	equ	0xFE8
  8166                           indf1	equ	0xFE7
  8167                           postinc1	equ	0xFE6
  8168                           postdec1	equ	0xFE5
  8169                           fsr1h	equ	0xFE2
  8170                           fsr1l	equ	0xFE1
  8171                           indf2	equ	0xFDF
  8172                           postinc2	equ	0xFDE
  8173                           postdec2	equ	0xFDD
  8174                           fsr2h	equ	0xFDA
  8175                           fsr2l	equ	0xFD9
  8176                           status	equ	0xFD8
  8177                           
  8178 ;; *************** function ___awmod *****************
  8179 ;; Defined at:
  8180 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8181 ;; Parameters:    Size  Location     Type
  8182 ;;  dividend        2    0[BANK0 ] int 
  8183 ;;  divisor         2    2[BANK0 ] int 
  8184 ;; Auto vars:     Size  Location     Type
  8185 ;;  sign            1    5[BANK0 ] unsigned char 
  8186 ;;  counter         1    4[BANK0 ] unsigned char 
  8187 ;; Return value:  Size  Location     Type
  8188 ;;                  2    0[BANK0 ] int 
  8189 ;; Registers used:
  8190 ;;		wreg, status,2, status,0
  8191 ;; Tracked objects:
  8192 ;;		On entry : 0/0
  8193 ;;		On exit  : 0/0
  8194 ;;		Unchanged: 0/0
  8195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8196 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8197 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8199 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8200 ;;Total ram usage:        6 bytes
  8201 ;; Hardware stack levels used:    1
  8202 ;; Hardware stack levels required when called:    5
  8203 ;; This function calls:
  8204 ;;		Nothing
  8205 ;; This function is called by:
  8206 ;;		_update_state
  8207 ;;		__measure
  8208 ;; This function uses a non-reentrant model
  8209 ;;
  8210                           
  8211                           	psect	text19
  8212  002FE6                     __ptext19:
  8213                           	opt stack 0
  8214  002FE6                     ___awmod:
  8215                           	opt stack 24
  8216                           
  8217                           ; BSR set to: 0
  8218                           ;incstack = 0
  8219  002FE6  0E00               	movlw	0
  8220  002FE8  0100               	movlb	0	; () banked
  8221  002FEA  6F85               	movwf	___awmod@sign& (0+255),b
  8222                           
  8223                           ; BSR set to: 0
  8224  002FEC  0100               	movlb	0	; () banked
  8225  002FEE  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8226  002FF0  D008               	goto	l4652
  8227                           
  8228                           ; BSR set to: 0
  8229  002FF2  0100               	movlb	0	; () banked
  8230  002FF4  6D80               	negf	___awmod@dividend& (0+255),b
  8231  002FF6  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8232  002FF8  B0D8               	btfsc	status,0,c
  8233  002FFA  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8234                           
  8235                           ; BSR set to: 0
  8236  002FFC  0E01               	movlw	1
  8237  002FFE  0100               	movlb	0	; () banked
  8238  003000  6F85               	movwf	___awmod@sign& (0+255),b
  8239  003002                     l4652:
  8240                           
  8241                           ; BSR set to: 0
  8242  003002  0100               	movlb	0	; () banked
  8243  003004  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8244  003006  D005               	goto	l4656
  8245                           
  8246                           ; BSR set to: 0
  8247  003008  0100               	movlb	0	; () banked
  8248  00300A  6D82               	negf	___awmod@divisor& (0+255),b
  8249  00300C  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8250  00300E  B0D8               	btfsc	status,0,c
  8251  003010  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8252  003012                     l4656:
  8253                           
  8254                           ; BSR set to: 0
  8255  003012  0100               	movlb	0	; () banked
  8256  003014  5182               	movf	___awmod@divisor& (0+255),w,b
  8257  003016  0100               	movlb	0	; () banked
  8258  003018  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8259  00301A  B4D8               	btfsc	status,2,c
  8260  00301C  D026               	goto	l4672
  8261                           
  8262                           ; BSR set to: 0
  8263  00301E  0E01               	movlw	1
  8264  003020  0100               	movlb	0	; () banked
  8265  003022  6F84               	movwf	___awmod@counter& (0+255),b
  8266  003024  D006               	goto	l4662
  8267  003026                     l4660:
  8268                           
  8269                           ; BSR set to: 0
  8270  003026  0100               	movlb	0	; () banked
  8271  003028  90D8               	bcf	status,0,c
  8272  00302A  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8273  00302C  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8274  00302E  0100               	movlb	0	; () banked
  8275  003030  2B84               	incf	___awmod@counter& (0+255),f,b
  8276  003032                     l4662:
  8277                           
  8278                           ; BSR set to: 0
  8279  003032  0100               	movlb	0	; () banked
  8280  003034  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8281  003036  D7F7               	goto	l4660
  8282  003038                     l4664:
  8283                           
  8284                           ; BSR set to: 0
  8285  003038  0100               	movlb	0	; () banked
  8286  00303A  5182               	movf	___awmod@divisor& (0+255),w,b
  8287  00303C  0100               	movlb	0	; () banked
  8288  00303E  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8289  003040  0100               	movlb	0	; () banked
  8290  003042  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8291  003044  0100               	movlb	0	; () banked
  8292  003046  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8293  003048  A0D8               	btfss	status,0,c
  8294  00304A  D008               	goto	l4668
  8295                           
  8296                           ; BSR set to: 0
  8297  00304C  0100               	movlb	0	; () banked
  8298  00304E  5182               	movf	___awmod@divisor& (0+255),w,b
  8299  003050  0100               	movlb	0	; () banked
  8300  003052  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8301  003054  0100               	movlb	0	; () banked
  8302  003056  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8303  003058  0100               	movlb	0	; () banked
  8304  00305A  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8305  00305C                     l4668:
  8306                           
  8307                           ; BSR set to: 0
  8308  00305C  0100               	movlb	0	; () banked
  8309  00305E  90D8               	bcf	status,0,c
  8310  003060  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8311  003062  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8312                           
  8313                           ; BSR set to: 0
  8314  003064  0100               	movlb	0	; () banked
  8315  003066  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8316  003068  D7E7               	goto	l4664
  8317  00306A                     l4672:
  8318                           
  8319                           ; BSR set to: 0
  8320  00306A  0100               	movlb	0	; () banked
  8321  00306C  5185               	movf	___awmod@sign& (0+255),w,b
  8322  00306E  0100               	movlb	0	; () banked
  8323  003070  B4D8               	btfsc	status,2,c
  8324  003072  D005               	goto	l4676
  8325                           
  8326                           ; BSR set to: 0
  8327  003074  0100               	movlb	0	; () banked
  8328  003076  6D80               	negf	___awmod@dividend& (0+255),b
  8329  003078  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8330  00307A  B0D8               	btfsc	status,0,c
  8331  00307C  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8332  00307E                     l4676:
  8333                           
  8334                           ; BSR set to: 0
  8335  00307E  C080  F080         	movff	___awmod@dividend,?___awmod
  8336  003082  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8337  003086  0012               	return	
  8338  003088                     __end_of___awmod:
  8339                           	opt stack 0
  8340                           tosu	equ	0xFFF
  8341                           tosh	equ	0xFFE
  8342                           tosl	equ	0xFFD
  8343                           pclath	equ	0xFFA
  8344                           tblptru	equ	0xFF8
  8345                           tblptrh	equ	0xFF7
  8346                           tblptrl	equ	0xFF6
  8347                           tablat	equ	0xFF5
  8348                           prodh	equ	0xFF4
  8349                           prodl	equ	0xFF3
  8350                           intcon	equ	0xFF2
  8351                           intcon2	equ	0xFF1
  8352                           intcon3	equ	0xFF0
  8353                           indf0	equ	0xFEF
  8354                           postinc0	equ	0xFEE
  8355                           fsr0h	equ	0xFEA
  8356                           fsr0l	equ	0xFE9
  8357                           wreg	equ	0xFE8
  8358                           indf1	equ	0xFE7
  8359                           postinc1	equ	0xFE6
  8360                           postdec1	equ	0xFE5
  8361                           fsr1h	equ	0xFE2
  8362                           fsr1l	equ	0xFE1
  8363                           indf2	equ	0xFDF
  8364                           postinc2	equ	0xFDE
  8365                           postdec2	equ	0xFDD
  8366                           fsr2h	equ	0xFDA
  8367                           fsr2l	equ	0xFD9
  8368                           status	equ	0xFD8
  8369                           
  8370 ;; *************** function ___wmul *****************
  8371 ;; Defined at:
  8372 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  8373 ;; Parameters:    Size  Location     Type
  8374 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8375 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8376 ;; Auto vars:     Size  Location     Type
  8377 ;;  product         2    4[BANK0 ] unsigned int 
  8378 ;; Return value:  Size  Location     Type
  8379 ;;                  2    0[BANK0 ] unsigned int 
  8380 ;; Registers used:
  8381 ;;		wreg, status,2, status,0, prodl, prodh
  8382 ;; Tracked objects:
  8383 ;;		On entry : 0/0
  8384 ;;		On exit  : 0/0
  8385 ;;		Unchanged: 0/0
  8386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8387 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8388 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8389 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8390 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8391 ;;Total ram usage:        6 bytes
  8392 ;; Hardware stack levels used:    1
  8393 ;; Hardware stack levels required when called:    5
  8394 ;; This function calls:
  8395 ;;		Nothing
  8396 ;; This function is called by:
  8397 ;;		_update_RTC
  8398 ;;		_display_menu
  8399 ;;		_sort
  8400 ;;		__doprnt
  8401 ;; This function uses a non-reentrant model
  8402 ;;
  8403                           
  8404                           	psect	text20
  8405  003642                     __ptext20:
  8406                           	opt stack 0
  8407  003642                     ___wmul:
  8408                           	opt stack 22
  8409                           
  8410                           ; BSR set to: 0
  8411                           ;incstack = 0
  8412  003642  0100               	movlb	0	; () banked
  8413  003644  5180               	movf	___wmul@multiplier& (0+255),w,b
  8414  003646  0100               	movlb	0	; () banked
  8415  003648  0382               	mulwf	___wmul@multiplicand& (0+255),b
  8416  00364A  CFF3 F084          	movff	prodl,___wmul@product
  8417  00364E  CFF4 F085          	movff	prodh,___wmul@product+1
  8418  003652  0100               	movlb	0	; () banked
  8419  003654  5180               	movf	___wmul@multiplier& (0+255),w,b
  8420  003656  0100               	movlb	0	; () banked
  8421  003658  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  8422  00365A  50F3               	movf	prodl,w,c
  8423  00365C  0100               	movlb	0	; () banked
  8424  00365E  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  8425  003660  0100               	movlb	0	; () banked
  8426  003662  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  8427  003664  0100               	movlb	0	; () banked
  8428  003666  0382               	mulwf	___wmul@multiplicand& (0+255),b
  8429  003668  50F3               	movf	prodl,w,c
  8430  00366A  0100               	movlb	0	; () banked
  8431  00366C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  8432                           
  8433                           ; BSR set to: 0
  8434  00366E  C084  F080         	movff	___wmul@product,?___wmul
  8435  003672  C085  F081         	movff	___wmul@product+1,?___wmul+1
  8436  003676  0012               	return	
  8437  003678                     __end_of___wmul:
  8438                           	opt stack 0
  8439                           tosu	equ	0xFFF
  8440                           tosh	equ	0xFFE
  8441                           tosl	equ	0xFFD
  8442                           pclath	equ	0xFFA
  8443                           tblptru	equ	0xFF8
  8444                           tblptrh	equ	0xFF7
  8445                           tblptrl	equ	0xFF6
  8446                           tablat	equ	0xFF5
  8447                           prodh	equ	0xFF4
  8448                           prodl	equ	0xFF3
  8449                           intcon	equ	0xFF2
  8450                           intcon2	equ	0xFF1
  8451                           intcon3	equ	0xFF0
  8452                           indf0	equ	0xFEF
  8453                           postinc0	equ	0xFEE
  8454                           fsr0h	equ	0xFEA
  8455                           fsr0l	equ	0xFE9
  8456                           wreg	equ	0xFE8
  8457                           indf1	equ	0xFE7
  8458                           postinc1	equ	0xFE6
  8459                           postdec1	equ	0xFE5
  8460                           fsr1h	equ	0xFE2
  8461                           fsr1l	equ	0xFE1
  8462                           indf2	equ	0xFDF
  8463                           postinc2	equ	0xFDE
  8464                           postdec2	equ	0xFDD
  8465                           fsr2h	equ	0xFDA
  8466                           fsr2l	equ	0xFD9
  8467                           status	equ	0xFD8
  8468                           
  8469 ;; *************** function _set_time *****************
  8470 ;; Defined at:
  8471 ;;		line 416 in file "main.c"
  8472 ;; Parameters:    Size  Location     Type
  8473 ;;		None
  8474 ;; Auto vars:     Size  Location     Type
  8475 ;;  i               1    3[BANK0 ] unsigned char 
  8476 ;; Return value:  Size  Location     Type
  8477 ;;                  1    wreg      void 
  8478 ;; Registers used:
  8479 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8480 ;; Tracked objects:
  8481 ;;		On entry : 0/0
  8482 ;;		On exit  : 0/0
  8483 ;;		Unchanged: 0/0
  8484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8485 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8486 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8488 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8489 ;;Total ram usage:        1 bytes
  8490 ;; Hardware stack levels used:    1
  8491 ;; Hardware stack levels required when called:    7
  8492 ;; This function calls:
  8493 ;;		_I2C_Master_Start
  8494 ;;		_I2C_Master_Stop
  8495 ;;		_I2C_Master_Write
  8496 ;; This function is called by:
  8497 ;;		_main
  8498 ;; This function uses a non-reentrant model
  8499 ;;
  8500                           
  8501                           	psect	text21
  8502  00335A                     __ptext21:
  8503                           	opt stack 0
  8504  00335A                     _set_time:
  8505                           	opt stack 23
  8506                           
  8507                           ;main.c: 417: I2C_Master_Start();
  8508                           
  8509                           ; BSR set to: 0
  8510                           ;incstack = 0
  8511  00335A  EC15  F01C         	call	_I2C_Master_Start	;wreg free
  8512                           
  8513                           ;main.c: 418: I2C_Master_Write(0b11010000);
  8514  00335E  0E00               	movlw	0
  8515  003360  0100               	movlb	0	; () banked
  8516  003362  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8517  003364  0ED0               	movlw	208
  8518  003366  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8519  003368  EC0C  F01C         	call	_I2C_Master_Write	;wreg free
  8520                           
  8521                           ;main.c: 419: I2C_Master_Write(0x00);
  8522  00336C  0E00               	movlw	0
  8523  00336E  0100               	movlb	0	; () banked
  8524  003370  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8525  003372  0E00               	movlw	0
  8526  003374  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8527  003376  EC0C  F01C         	call	_I2C_Master_Write	;wreg free
  8528                           
  8529                           ;main.c: 420: for(char i=0; i<7; i++){
  8530  00337A  0E00               	movlw	0
  8531  00337C  0100               	movlb	0	; () banked
  8532  00337E  6F83               	movwf	set_time@i& (0+255),b
  8533  003380                     l5270:
  8534                           
  8535                           ; BSR set to: 0
  8536  003380  0E06               	movlw	6
  8537  003382  0100               	movlb	0	; () banked
  8538  003384  6583               	cpfsgt	set_time@i& (0+255),b
  8539  003386  D001               	goto	l5274
  8540  003388  D016               	goto	l5280
  8541  00338A                     l5274:
  8542                           
  8543                           ; BSR set to: 0
  8544                           ;main.c: 421: I2C_Master_Write(manualDateTime[i]);
  8545  00338A  0100               	movlb	0	; () banked
  8546  00338C  5183               	movf	set_time@i& (0+255),w,b
  8547  00338E  0D01               	mullw	1
  8548  003390  0E08               	movlw	low _manualDateTime
  8549  003392  24F3               	addwf	prodl,w,c
  8550  003394  6EF6               	movwf	tblptrl,c
  8551  003396  0EFF               	movlw	high _manualDateTime
  8552  003398  20F4               	addwfc	prodh,w,c
  8553  00339A  6EF7               	movwf	tblptrh,c
  8554  00339C                     	if	1	;There are 3 active tblptr bytes
  8555  00339C  6AF8               	clrf	tblptru,c
  8556  00339E  0E00               	movlw	low (__mediumconst shr (0+16))
  8557  0033A0  22F8               	addwfc	tblptru,f,c
  8558  0033A2                     	endif
  8559  0033A2  0008               	tblrd		*
  8560  0033A4  50F5               	movf	tablat,w,c
  8561  0033A6  0100               	movlb	0	; () banked
  8562  0033A8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8563  0033AA  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8564  0033AC  EC0C  F01C         	call	_I2C_Master_Write	;wreg free
  8565  0033B0  0100               	movlb	0	; () banked
  8566  0033B2  2B83               	incf	set_time@i& (0+255),f,b
  8567  0033B4  D7E5               	goto	l5270
  8568  0033B6                     l5280:
  8569                           
  8570                           ; BSR set to: 0
  8571                           ;main.c: 422: }
  8572                           ;main.c: 423: I2C_Master_Stop();
  8573  0033B6  EC11  F01C         	call	_I2C_Master_Stop	;wreg free
  8574  0033BA  0012               	return		;funcret
  8575  0033BC                     __end_of_set_time:
  8576                           	opt stack 0
  8577                           tosu	equ	0xFFF
  8578                           tosh	equ	0xFFE
  8579                           tosl	equ	0xFFD
  8580                           pclath	equ	0xFFA
  8581                           tblptru	equ	0xFF8
  8582                           tblptrh	equ	0xFF7
  8583                           tblptrl	equ	0xFF6
  8584                           tablat	equ	0xFF5
  8585                           prodh	equ	0xFF4
  8586                           prodl	equ	0xFF3
  8587                           intcon	equ	0xFF2
  8588                           intcon2	equ	0xFF1
  8589                           intcon3	equ	0xFF0
  8590                           indf0	equ	0xFEF
  8591                           postinc0	equ	0xFEE
  8592                           fsr0h	equ	0xFEA
  8593                           fsr0l	equ	0xFE9
  8594                           wreg	equ	0xFE8
  8595                           indf1	equ	0xFE7
  8596                           postinc1	equ	0xFE6
  8597                           postdec1	equ	0xFE5
  8598                           fsr1h	equ	0xFE2
  8599                           fsr1l	equ	0xFE1
  8600                           indf2	equ	0xFDF
  8601                           postinc2	equ	0xFDE
  8602                           postdec2	equ	0xFDD
  8603                           fsr2h	equ	0xFDA
  8604                           fsr2l	equ	0xFD9
  8605                           status	equ	0xFD8
  8606                           
  8607 ;; *************** function _I2C_Master_Write *****************
  8608 ;; Defined at:
  8609 ;;		line 47 in file "I2C.c"
  8610 ;; Parameters:    Size  Location     Type
  8611 ;;  d               2    1[BANK0 ] unsigned int 
  8612 ;; Auto vars:     Size  Location     Type
  8613 ;;		None
  8614 ;; Return value:  Size  Location     Type
  8615 ;;                  1    wreg      void 
  8616 ;; Registers used:
  8617 ;;		wreg, status,2, status,0, cstack
  8618 ;; Tracked objects:
  8619 ;;		On entry : 0/0
  8620 ;;		On exit  : 0/0
  8621 ;;		Unchanged: 0/0
  8622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8623 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8624 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8625 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8626 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8627 ;;Total ram usage:        2 bytes
  8628 ;; Hardware stack levels used:    1
  8629 ;; Hardware stack levels required when called:    6
  8630 ;; This function calls:
  8631 ;;		_I2C_Master_Wait
  8632 ;; This function is called by:
  8633 ;;		_update_RTC
  8634 ;;		_set_time
  8635 ;; This function uses a non-reentrant model
  8636 ;;
  8637                           
  8638                           	psect	text22
  8639  003818                     __ptext22:
  8640                           	opt stack 0
  8641  003818                     _I2C_Master_Write:
  8642                           	opt stack 23
  8643                           
  8644                           ;I2C.c: 49: I2C_Master_Wait();
  8645                           
  8646                           ;incstack = 0
  8647  003818  ECEE  F01B         	call	_I2C_Master_Wait	;wreg free
  8648                           
  8649                           ;I2C.c: 50: SSPBUF = d;
  8650  00381C  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8651  003820  0012               	return		;funcret
  8652  003822                     __end_of_I2C_Master_Write:
  8653                           	opt stack 0
  8654                           tosu	equ	0xFFF
  8655                           tosh	equ	0xFFE
  8656                           tosl	equ	0xFFD
  8657                           pclath	equ	0xFFA
  8658                           tblptru	equ	0xFF8
  8659                           tblptrh	equ	0xFF7
  8660                           tblptrl	equ	0xFF6
  8661                           tablat	equ	0xFF5
  8662                           prodh	equ	0xFF4
  8663                           prodl	equ	0xFF3
  8664                           intcon	equ	0xFF2
  8665                           intcon2	equ	0xFF1
  8666                           intcon3	equ	0xFF0
  8667                           indf0	equ	0xFEF
  8668                           postinc0	equ	0xFEE
  8669                           fsr0h	equ	0xFEA
  8670                           fsr0l	equ	0xFE9
  8671                           wreg	equ	0xFE8
  8672                           indf1	equ	0xFE7
  8673                           postinc1	equ	0xFE6
  8674                           postdec1	equ	0xFE5
  8675                           fsr1h	equ	0xFE2
  8676                           fsr1l	equ	0xFE1
  8677                           indf2	equ	0xFDF
  8678                           postinc2	equ	0xFDE
  8679                           postdec2	equ	0xFDD
  8680                           fsr2h	equ	0xFDA
  8681                           fsr2l	equ	0xFD9
  8682                           status	equ	0xFD8
  8683                           
  8684 ;; *************** function _I2C_Master_Stop *****************
  8685 ;; Defined at:
  8686 ;;		line 41 in file "I2C.c"
  8687 ;; Parameters:    Size  Location     Type
  8688 ;;		None
  8689 ;; Auto vars:     Size  Location     Type
  8690 ;;		None
  8691 ;; Return value:  Size  Location     Type
  8692 ;;                  1    wreg      void 
  8693 ;; Registers used:
  8694 ;;		wreg, status,2, status,0, cstack
  8695 ;; Tracked objects:
  8696 ;;		On entry : 0/0
  8697 ;;		On exit  : 0/0
  8698 ;;		Unchanged: 0/0
  8699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8704 ;;Total ram usage:        0 bytes
  8705 ;; Hardware stack levels used:    1
  8706 ;; Hardware stack levels required when called:    6
  8707 ;; This function calls:
  8708 ;;		_I2C_Master_Wait
  8709 ;; This function is called by:
  8710 ;;		_update_RTC
  8711 ;;		_set_time
  8712 ;; This function uses a non-reentrant model
  8713 ;;
  8714                           
  8715                           	psect	text23
  8716  003822                     __ptext23:
  8717                           	opt stack 0
  8718  003822                     _I2C_Master_Stop:
  8719                           	opt stack 23
  8720                           
  8721                           ;I2C.c: 43: I2C_Master_Wait();
  8722                           
  8723                           ;incstack = 0
  8724  003822  ECEE  F01B         	call	_I2C_Master_Wait	;wreg free
  8725                           
  8726                           ;I2C.c: 44: PEN = 1;
  8727  003826  84C5               	bsf	4037,2,c	;volatile
  8728  003828  0012               	return		;funcret
  8729  00382A                     __end_of_I2C_Master_Stop:
  8730                           	opt stack 0
  8731                           tosu	equ	0xFFF
  8732                           tosh	equ	0xFFE
  8733                           tosl	equ	0xFFD
  8734                           pclath	equ	0xFFA
  8735                           tblptru	equ	0xFF8
  8736                           tblptrh	equ	0xFF7
  8737                           tblptrl	equ	0xFF6
  8738                           tablat	equ	0xFF5
  8739                           prodh	equ	0xFF4
  8740                           prodl	equ	0xFF3
  8741                           intcon	equ	0xFF2
  8742                           intcon2	equ	0xFF1
  8743                           intcon3	equ	0xFF0
  8744                           indf0	equ	0xFEF
  8745                           postinc0	equ	0xFEE
  8746                           fsr0h	equ	0xFEA
  8747                           fsr0l	equ	0xFE9
  8748                           wreg	equ	0xFE8
  8749                           indf1	equ	0xFE7
  8750                           postinc1	equ	0xFE6
  8751                           postdec1	equ	0xFE5
  8752                           fsr1h	equ	0xFE2
  8753                           fsr1l	equ	0xFE1
  8754                           indf2	equ	0xFDF
  8755                           postinc2	equ	0xFDE
  8756                           postdec2	equ	0xFDD
  8757                           fsr2h	equ	0xFDA
  8758                           fsr2l	equ	0xFD9
  8759                           status	equ	0xFD8
  8760                           
  8761 ;; *************** function _I2C_Master_Start *****************
  8762 ;; Defined at:
  8763 ;;		line 29 in file "I2C.c"
  8764 ;; Parameters:    Size  Location     Type
  8765 ;;		None
  8766 ;; Auto vars:     Size  Location     Type
  8767 ;;		None
  8768 ;; Return value:  Size  Location     Type
  8769 ;;                  1    wreg      void 
  8770 ;; Registers used:
  8771 ;;		wreg, status,2, status,0, cstack
  8772 ;; Tracked objects:
  8773 ;;		On entry : 0/0
  8774 ;;		On exit  : 0/0
  8775 ;;		Unchanged: 0/0
  8776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8781 ;;Total ram usage:        0 bytes
  8782 ;; Hardware stack levels used:    1
  8783 ;; Hardware stack levels required when called:    6
  8784 ;; This function calls:
  8785 ;;		_I2C_Master_Wait
  8786 ;; This function is called by:
  8787 ;;		_update_RTC
  8788 ;;		_set_time
  8789 ;; This function uses a non-reentrant model
  8790 ;;
  8791                           
  8792                           	psect	text24
  8793  00382A                     __ptext24:
  8794                           	opt stack 0
  8795  00382A                     _I2C_Master_Start:
  8796                           	opt stack 23
  8797                           
  8798                           ;I2C.c: 31: I2C_Master_Wait();
  8799                           
  8800                           ;incstack = 0
  8801  00382A  ECEE  F01B         	call	_I2C_Master_Wait	;wreg free
  8802                           
  8803                           ;I2C.c: 32: SEN = 1;
  8804  00382E  80C5               	bsf	4037,0,c	;volatile
  8805  003830  0012               	return		;funcret
  8806  003832                     __end_of_I2C_Master_Start:
  8807                           	opt stack 0
  8808                           tosu	equ	0xFFF
  8809                           tosh	equ	0xFFE
  8810                           tosl	equ	0xFFD
  8811                           pclath	equ	0xFFA
  8812                           tblptru	equ	0xFF8
  8813                           tblptrh	equ	0xFF7
  8814                           tblptrl	equ	0xFF6
  8815                           tablat	equ	0xFF5
  8816                           prodh	equ	0xFF4
  8817                           prodl	equ	0xFF3
  8818                           intcon	equ	0xFF2
  8819                           intcon2	equ	0xFF1
  8820                           intcon3	equ	0xFF0
  8821                           indf0	equ	0xFEF
  8822                           postinc0	equ	0xFEE
  8823                           fsr0h	equ	0xFEA
  8824                           fsr0l	equ	0xFE9
  8825                           wreg	equ	0xFE8
  8826                           indf1	equ	0xFE7
  8827                           postinc1	equ	0xFE6
  8828                           postdec1	equ	0xFE5
  8829                           fsr1h	equ	0xFE2
  8830                           fsr1l	equ	0xFE1
  8831                           indf2	equ	0xFDF
  8832                           postinc2	equ	0xFDE
  8833                           postdec2	equ	0xFDD
  8834                           fsr2h	equ	0xFDA
  8835                           fsr2l	equ	0xFD9
  8836                           status	equ	0xFD8
  8837                           
  8838 ;; *************** function _I2C_Master_Wait *****************
  8839 ;; Defined at:
  8840 ;;		line 24 in file "I2C.c"
  8841 ;; Parameters:    Size  Location     Type
  8842 ;;		None
  8843 ;; Auto vars:     Size  Location     Type
  8844 ;;		None
  8845 ;; Return value:  Size  Location     Type
  8846 ;;                  1    wreg      void 
  8847 ;; Registers used:
  8848 ;;		wreg, status,2, status,0
  8849 ;; Tracked objects:
  8850 ;;		On entry : 0/0
  8851 ;;		On exit  : 0/0
  8852 ;;		Unchanged: 0/0
  8853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8854 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8856 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8857 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8858 ;;Total ram usage:        1 bytes
  8859 ;; Hardware stack levels used:    1
  8860 ;; Hardware stack levels required when called:    5
  8861 ;; This function calls:
  8862 ;;		Nothing
  8863 ;; This function is called by:
  8864 ;;		_I2C_Master_Start
  8865 ;;		_I2C_Master_Stop
  8866 ;;		_I2C_Master_Write
  8867 ;;		_I2C_Master_Read
  8868 ;;		_I2C_Master_RepeatedStart
  8869 ;; This function uses a non-reentrant model
  8870 ;;
  8871                           
  8872                           	psect	text25
  8873  0037DC                     __ptext25:
  8874                           	opt stack 0
  8875  0037DC                     _I2C_Master_Wait:
  8876                           	opt stack 23
  8877  0037DC                     l34:
  8878  0037DC  B4C7               	btfsc	4039,2,c	;volatile
  8879  0037DE  D7FE               	goto	l34
  8880  0037E0  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8881  0037E4  0E1F               	movlw	31
  8882  0037E6  0100               	movlb	0	; () banked
  8883  0037E8  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8884  0037EA  B4D8               	btfsc	status,2,c
  8885  0037EC  0012               	return	
  8886  0037EE  D7F6               	goto	l34
  8887  0037F0                     __end_of_I2C_Master_Wait:
  8888                           	opt stack 0
  8889                           tosu	equ	0xFFF
  8890                           tosh	equ	0xFFE
  8891                           tosl	equ	0xFFD
  8892                           pclath	equ	0xFFA
  8893                           tblptru	equ	0xFF8
  8894                           tblptrh	equ	0xFF7
  8895                           tblptrl	equ	0xFF6
  8896                           tablat	equ	0xFF5
  8897                           prodh	equ	0xFF4
  8898                           prodl	equ	0xFF3
  8899                           intcon	equ	0xFF2
  8900                           intcon2	equ	0xFF1
  8901                           intcon3	equ	0xFF0
  8902                           indf0	equ	0xFEF
  8903                           postinc0	equ	0xFEE
  8904                           fsr0h	equ	0xFEA
  8905                           fsr0l	equ	0xFE9
  8906                           wreg	equ	0xFE8
  8907                           indf1	equ	0xFE7
  8908                           postinc1	equ	0xFE6
  8909                           postdec1	equ	0xFE5
  8910                           fsr1h	equ	0xFE2
  8911                           fsr1l	equ	0xFE1
  8912                           indf2	equ	0xFDF
  8913                           postinc2	equ	0xFDE
  8914                           postdec2	equ	0xFDD
  8915                           fsr2h	equ	0xFDA
  8916                           fsr2l	equ	0xFD9
  8917                           status	equ	0xFD8
  8918                           
  8919 ;; *************** function _read_sensors *****************
  8920 ;; Defined at:
  8921 ;;		line 427 in file "main.c"
  8922 ;; Parameters:    Size  Location     Type
  8923 ;;		None
  8924 ;; Auto vars:     Size  Location     Type
  8925 ;;  i               1    6[BANK0 ] unsigned char 
  8926 ;; Return value:  Size  Location     Type
  8927 ;;                  1    wreg      void 
  8928 ;; Registers used:
  8929 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8930 ;; Tracked objects:
  8931 ;;		On entry : 0/0
  8932 ;;		On exit  : 0/0
  8933 ;;		Unchanged: 0/0
  8934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8935 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8936 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8937 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8938 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8939 ;;Total ram usage:        5 bytes
  8940 ;; Hardware stack levels used:    1
  8941 ;; Hardware stack levels required when called:    6
  8942 ;; This function calls:
  8943 ;;		_readADC
  8944 ;; This function is called by:
  8945 ;;		_main
  8946 ;; This function uses a non-reentrant model
  8947 ;;
  8948                           
  8949                           	psect	text26
  8950  00261A                     __ptext26:
  8951                           	opt stack 0
  8952  00261A                     _read_sensors:
  8953                           	opt stack 24
  8954                           
  8955                           ;main.c: 428: if (state!='s'){
  8956                           
  8957                           ; BSR set to: 0
  8958                           ;incstack = 0
  8959  00261A  0E73               	movlw	115
  8960  00261C  0100               	movlb	0	; () banked
  8961  00261E  19EE               	xorwf	_state& (0+255),w,b
  8962  002620  A4D8               	btfss	status,2,c
  8963  002622  0012               	return	
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;main.c: 430: }
  8967                           ;main.c: 432: for(char i=5-1;i>0;i--){
  8968                           
  8969                           ; BSR set to: 0
  8970                           
  8971                           ; BSR set to: 0
  8972                           ;main.c: 429: return;
  8973  002624  0E04               	movlw	4
  8974  002626  0100               	movlb	0	; () banked
  8975  002628  6F86               	movwf	read_sensors@i& (0+255),b
  8976  00262A  0100               	movlb	0	; () banked
  8977  00262C  5186               	movf	read_sensors@i& (0+255),w,b
  8978  00262E  0100               	movlb	0	; () banked
  8979  002630  B4D8               	btfsc	status,2,c
  8980  002632  D0DF               	goto	l5318
  8981                           
  8982                           ; BSR set to: 0
  8983                           ;main.c: 433: PROX1[i]=PROX1[i-1];
  8984                           
  8985                           ; BSR set to: 0
  8986                           
  8987                           ; BSR set to: 0
  8988  002634  0EFE               	movlw	254
  8989  002636  0100               	movlb	0	; () banked
  8990  002638  6F82               	movwf	??_read_sensors& (0+255),b
  8991  00263A  0EFF               	movlw	255
  8992  00263C  0100               	movlb	0	; () banked
  8993  00263E  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  8994  002640  0100               	movlb	0	; () banked
  8995  002642  5186               	movf	read_sensors@i& (0+255),w,b
  8996  002644  0100               	movlb	0	; () banked
  8997  002646  6F84               	movwf	(??_read_sensors+2)& (0+255),b
  8998  002648  6B85               	clrf	(??_read_sensors+3)& (0+255),b
  8999  00264A  90D8               	bcf	status,0,c
  9000  00264C  0100               	movlb	0	; () banked
  9001  00264E  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
  9002  002650  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
  9003  002652  0100               	movlb	0	; () banked
  9004  002654  5182               	movf	??_read_sensors& (0+255),w,b
  9005  002656  0100               	movlb	0	; () banked
  9006  002658  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
  9007  00265A  0100               	movlb	0	; () banked
  9008  00265C  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9009  00265E  0100               	movlb	0	; () banked
  9010  002660  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
  9011  002662  0E60               	movlw	low _PROX1
  9012  002664  0100               	movlb	0	; () banked
  9013  002666  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
  9014  002668  6ED9               	movwf	fsr2l,c
  9015  00266A  0E00               	movlw	high _PROX1
  9016  00266C  0100               	movlb	0	; () banked
  9017  00266E  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
  9018  002670  6EDA               	movwf	fsr2h,c
  9019  002672  0100               	movlb	0	; () banked
  9020  002674  5186               	movf	read_sensors@i& (0+255),w,b
  9021  002676  0D02               	mullw	2
  9022  002678  0E60               	movlw	low _PROX1
  9023  00267A  24F3               	addwf	prodl,w,c
  9024  00267C  6EE1               	movwf	fsr1l,c
  9025  00267E  0E00               	movlw	high _PROX1
  9026  002680  20F4               	addwfc	prodh,w,c
  9027  002682  6EE2               	movwf	fsr1h,c
  9028  002684  CFDE FFE6          	movff	postinc2,postinc1
  9029  002688  CFDD FFE5          	movff	postdec2,postdec1
  9030                           
  9031                           ;main.c: 434: PROX2[i]=PROX2[i-1];
  9032  00268C  0EFE               	movlw	254
  9033  00268E  0100               	movlb	0	; () banked
  9034  002690  6F82               	movwf	??_read_sensors& (0+255),b
  9035  002692  0EFF               	movlw	255
  9036  002694  0100               	movlb	0	; () banked
  9037  002696  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9038  002698  0100               	movlb	0	; () banked
  9039  00269A  5186               	movf	read_sensors@i& (0+255),w,b
  9040  00269C  0100               	movlb	0	; () banked
  9041  00269E  6F84               	movwf	(??_read_sensors+2)& (0+255),b
  9042  0026A0  6B85               	clrf	(??_read_sensors+3)& (0+255),b
  9043  0026A2  90D8               	bcf	status,0,c
  9044  0026A4  0100               	movlb	0	; () banked
  9045  0026A6  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
  9046  0026A8  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
  9047  0026AA  0100               	movlb	0	; () banked
  9048  0026AC  5182               	movf	??_read_sensors& (0+255),w,b
  9049  0026AE  0100               	movlb	0	; () banked
  9050  0026B0  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
  9051  0026B2  0100               	movlb	0	; () banked
  9052  0026B4  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9053  0026B6  0100               	movlb	0	; () banked
  9054  0026B8  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
  9055  0026BA  0E6A               	movlw	low _PROX2
  9056  0026BC  0100               	movlb	0	; () banked
  9057  0026BE  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
  9058  0026C0  6ED9               	movwf	fsr2l,c
  9059  0026C2  0E00               	movlw	high _PROX2
  9060  0026C4  0100               	movlb	0	; () banked
  9061  0026C6  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
  9062  0026C8  6EDA               	movwf	fsr2h,c
  9063  0026CA  0100               	movlb	0	; () banked
  9064  0026CC  5186               	movf	read_sensors@i& (0+255),w,b
  9065  0026CE  0D02               	mullw	2
  9066  0026D0  0E6A               	movlw	low _PROX2
  9067  0026D2  24F3               	addwf	prodl,w,c
  9068  0026D4  6EE1               	movwf	fsr1l,c
  9069  0026D6  0E00               	movlw	high _PROX2
  9070  0026D8  20F4               	addwfc	prodh,w,c
  9071  0026DA  6EE2               	movwf	fsr1h,c
  9072  0026DC  CFDE FFE6          	movff	postinc2,postinc1
  9073  0026E0  CFDD FFE5          	movff	postdec2,postdec1
  9074                           
  9075                           ;main.c: 435: DIST1[i]=DIST1[i-1];
  9076  0026E4  0EFE               	movlw	254
  9077  0026E6  0100               	movlb	0	; () banked
  9078  0026E8  6F82               	movwf	??_read_sensors& (0+255),b
  9079  0026EA  0EFF               	movlw	255
  9080  0026EC  0100               	movlb	0	; () banked
  9081  0026EE  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9082  0026F0  0100               	movlb	0	; () banked
  9083  0026F2  5186               	movf	read_sensors@i& (0+255),w,b
  9084  0026F4  0100               	movlb	0	; () banked
  9085  0026F6  6F84               	movwf	(??_read_sensors+2)& (0+255),b
  9086  0026F8  6B85               	clrf	(??_read_sensors+3)& (0+255),b
  9087  0026FA  90D8               	bcf	status,0,c
  9088  0026FC  0100               	movlb	0	; () banked
  9089  0026FE  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
  9090  002700  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
  9091  002702  0100               	movlb	0	; () banked
  9092  002704  5182               	movf	??_read_sensors& (0+255),w,b
  9093  002706  0100               	movlb	0	; () banked
  9094  002708  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
  9095  00270A  0100               	movlb	0	; () banked
  9096  00270C  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9097  00270E  0100               	movlb	0	; () banked
  9098  002710  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
  9099  002712  0E4C               	movlw	low _DIST1
  9100  002714  0100               	movlb	0	; () banked
  9101  002716  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
  9102  002718  6ED9               	movwf	fsr2l,c
  9103  00271A  0E00               	movlw	high _DIST1
  9104  00271C  0100               	movlb	0	; () banked
  9105  00271E  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
  9106  002720  6EDA               	movwf	fsr2h,c
  9107  002722  0100               	movlb	0	; () banked
  9108  002724  5186               	movf	read_sensors@i& (0+255),w,b
  9109  002726  0D02               	mullw	2
  9110  002728  0E4C               	movlw	low _DIST1
  9111  00272A  24F3               	addwf	prodl,w,c
  9112  00272C  6EE1               	movwf	fsr1l,c
  9113  00272E  0E00               	movlw	high _DIST1
  9114  002730  20F4               	addwfc	prodh,w,c
  9115  002732  6EE2               	movwf	fsr1h,c
  9116  002734  CFDE FFE6          	movff	postinc2,postinc1
  9117  002738  CFDD FFE5          	movff	postdec2,postdec1
  9118                           
  9119                           ;main.c: 436: IR1[i]=IR1[i-1];
  9120  00273C  0EFE               	movlw	254
  9121  00273E  0100               	movlb	0	; () banked
  9122  002740  6F82               	movwf	??_read_sensors& (0+255),b
  9123  002742  0EFF               	movlw	255
  9124  002744  0100               	movlb	0	; () banked
  9125  002746  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9126  002748  0100               	movlb	0	; () banked
  9127  00274A  5186               	movf	read_sensors@i& (0+255),w,b
  9128  00274C  0100               	movlb	0	; () banked
  9129  00274E  6F84               	movwf	(??_read_sensors+2)& (0+255),b
  9130  002750  6B85               	clrf	(??_read_sensors+3)& (0+255),b
  9131  002752  90D8               	bcf	status,0,c
  9132  002754  0100               	movlb	0	; () banked
  9133  002756  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
  9134  002758  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
  9135  00275A  0100               	movlb	0	; () banked
  9136  00275C  5182               	movf	??_read_sensors& (0+255),w,b
  9137  00275E  0100               	movlb	0	; () banked
  9138  002760  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
  9139  002762  0100               	movlb	0	; () banked
  9140  002764  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9141  002766  0100               	movlb	0	; () banked
  9142  002768  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
  9143  00276A  0E56               	movlw	low _IR1
  9144  00276C  0100               	movlb	0	; () banked
  9145  00276E  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
  9146  002770  6ED9               	movwf	fsr2l,c
  9147  002772  0E00               	movlw	high _IR1
  9148  002774  0100               	movlb	0	; () banked
  9149  002776  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
  9150  002778  6EDA               	movwf	fsr2h,c
  9151  00277A  0100               	movlb	0	; () banked
  9152  00277C  5186               	movf	read_sensors@i& (0+255),w,b
  9153  00277E  0D02               	mullw	2
  9154  002780  0E56               	movlw	low _IR1
  9155  002782  24F3               	addwf	prodl,w,c
  9156  002784  6EE1               	movwf	fsr1l,c
  9157  002786  0E00               	movlw	high _IR1
  9158  002788  20F4               	addwfc	prodh,w,c
  9159  00278A  6EE2               	movwf	fsr1h,c
  9160  00278C  CFDE FFE6          	movff	postinc2,postinc1
  9161  002790  CFDD FFE5          	movff	postdec2,postdec1
  9162                           
  9163                           ;main.c: 437: IR2[i]=IR2[i-1];
  9164  002794  0EFE               	movlw	254
  9165  002796  0100               	movlb	0	; () banked
  9166  002798  6F82               	movwf	??_read_sensors& (0+255),b
  9167  00279A  0EFF               	movlw	255
  9168  00279C  0100               	movlb	0	; () banked
  9169  00279E  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9170  0027A0  0100               	movlb	0	; () banked
  9171  0027A2  5186               	movf	read_sensors@i& (0+255),w,b
  9172  0027A4  0100               	movlb	0	; () banked
  9173  0027A6  6F84               	movwf	(??_read_sensors+2)& (0+255),b
  9174  0027A8  6B85               	clrf	(??_read_sensors+3)& (0+255),b
  9175  0027AA  90D8               	bcf	status,0,c
  9176  0027AC  0100               	movlb	0	; () banked
  9177  0027AE  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
  9178  0027B0  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
  9179  0027B2  0100               	movlb	0	; () banked
  9180  0027B4  5182               	movf	??_read_sensors& (0+255),w,b
  9181  0027B6  0100               	movlb	0	; () banked
  9182  0027B8  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
  9183  0027BA  0100               	movlb	0	; () banked
  9184  0027BC  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9185  0027BE  0100               	movlb	0	; () banked
  9186  0027C0  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
  9187  0027C2  0E1C               	movlw	low _IR2
  9188  0027C4  0100               	movlb	0	; () banked
  9189  0027C6  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
  9190  0027C8  6ED9               	movwf	fsr2l,c
  9191  0027CA  0E01               	movlw	high _IR2
  9192  0027CC  0100               	movlb	0	; () banked
  9193  0027CE  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
  9194  0027D0  6EDA               	movwf	fsr2h,c
  9195  0027D2  0100               	movlb	0	; () banked
  9196  0027D4  5186               	movf	read_sensors@i& (0+255),w,b
  9197  0027D6  0D02               	mullw	2
  9198  0027D8  0E1C               	movlw	low _IR2
  9199  0027DA  24F3               	addwf	prodl,w,c
  9200  0027DC  6EE1               	movwf	fsr1l,c
  9201  0027DE  0E01               	movlw	high _IR2
  9202  0027E0  20F4               	addwfc	prodh,w,c
  9203  0027E2  6EE2               	movwf	fsr1h,c
  9204  0027E4  CFDE FFE6          	movff	postinc2,postinc1
  9205  0027E8  CFDD FFE5          	movff	postdec2,postdec1
  9206                           
  9207                           ; BSR set to: 0
  9208  0027EC  0100               	movlb	0	; () banked
  9209  0027EE  0786               	decf	read_sensors@i& (0+255),f,b
  9210  0027F0  D71C               	goto	L4
  9211  0027F2                     l5318:
  9212                           
  9213                           ; BSR set to: 0
  9214                           ;main.c: 438: }
  9215                           ;main.c: 443: readADC(DIST1_PIN);
  9216  0027F2  5074               	movf	_DIST1_PIN,w,c
  9217  0027F4  EC87  F01B         	call	_readADC
  9218                           
  9219                           ;main.c: 444: DIST1[0]=16*16*ADRESH+ADRESL;
  9220  0027F8  50C4               	movf	4036,w,c	;volatile
  9221  0027FA  0100               	movlb	0	; () banked
  9222  0027FC  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9223  0027FE  6B82               	clrf	??_read_sensors& (0+255),b
  9224  002800  50C3               	movf	4035,w,c	;volatile
  9225  002802  0100               	movlb	0	; () banked
  9226  002804  2582               	addwf	??_read_sensors& (0+255),w,b
  9227  002806  6E4C               	movwf	_DIST1,c
  9228  002808  0E00               	movlw	0
  9229  00280A  0100               	movlb	0	; () banked
  9230  00280C  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  9231  00280E  6E4D               	movwf	_DIST1+1,c
  9232                           
  9233                           ; BSR set to: 0
  9234                           ;main.c: 445: readADC(IR1_PIN);
  9235  002810  5077               	movf	_IR1_PIN,w,c
  9236  002812  EC87  F01B         	call	_readADC
  9237                           
  9238                           ;main.c: 446: IR1[0]=16*16*ADRESH+ADRESL;
  9239  002816  50C4               	movf	4036,w,c	;volatile
  9240  002818  0100               	movlb	0	; () banked
  9241  00281A  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9242  00281C  6B82               	clrf	??_read_sensors& (0+255),b
  9243  00281E  50C3               	movf	4035,w,c	;volatile
  9244  002820  0100               	movlb	0	; () banked
  9245  002822  2582               	addwf	??_read_sensors& (0+255),w,b
  9246  002824  6E56               	movwf	_IR1,c
  9247  002826  0E00               	movlw	0
  9248  002828  0100               	movlb	0	; () banked
  9249  00282A  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  9250  00282C  6E57               	movwf	_IR1+1,c
  9251                           
  9252                           ; BSR set to: 0
  9253                           ;main.c: 447: readADC(IR2_PIN);
  9254  00282E  5078               	movf	_IR2_PIN,w,c
  9255  002830  EC87  F01B         	call	_readADC
  9256                           
  9257                           ;main.c: 448: IR2[0]=16*16*ADRESH+ADRESL;
  9258  002834  50C4               	movf	4036,w,c	;volatile
  9259  002836  0100               	movlb	0	; () banked
  9260  002838  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9261  00283A  6B82               	clrf	??_read_sensors& (0+255),b
  9262  00283C  50C3               	movf	4035,w,c	;volatile
  9263  00283E  0100               	movlb	0	; () banked
  9264  002840  2582               	addwf	??_read_sensors& (0+255),w,b
  9265  002842  0101               	movlb	1	; () banked
  9266  002844  6F1C               	movwf	_IR2& (0+255),b
  9267  002846  0E00               	movlw	0
  9268  002848  0100               	movlb	0	; () banked
  9269  00284A  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  9270  00284C  0101               	movlb	1	; () banked
  9271  00284E  6F1D               	movwf	(_IR2+1)& (0+255),b
  9272                           
  9273                           ; BSR set to: 1
  9274                           ;main.c: 450: PROX1[0]=(PORTB>>PROX1_PIN)&1;
  9275  002850  C075  F082         	movff	_PROX1_PIN,??_read_sensors
  9276  002854  CF81 F083          	movff	3969,??_read_sensors+1	;volatile
  9277  002858  0100               	movlb	0	; () banked
  9278  00285A  2B82               	incf	??_read_sensors& (0+255),f,b
  9279  00285C  D003               	goto	u7474
  9280  00285E                     u7475:
  9281  00285E  0100               	movlb	0	; () banked
  9282  002860  90D8               	bcf	status,0,c
  9283  002862  3383               	rrcf	(??_read_sensors+1)& (0+255),f,b
  9284  002864                     u7474:
  9285  002864  0100               	movlb	0	; () banked
  9286  002866  2F82               	decfsz	??_read_sensors& (0+255),f,b
  9287  002868  D7FA               	goto	u7475
  9288  00286A  0E01               	movlw	1
  9289  00286C  0100               	movlb	0	; () banked
  9290  00286E  1783               	andwf	(??_read_sensors+1)& (0+255),f,b
  9291  002870  0100               	movlb	0	; () banked
  9292  002872  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9293  002874  6E60               	movwf	_PROX1,c
  9294  002876  6A61               	clrf	_PROX1+1,c
  9295                           
  9296                           ; BSR set to: 0
  9297                           ;main.c: 451: PROX2[0]=(PORTB>>PROX2_PIN)&1;
  9298  002878  C079  F082         	movff	_PROX2_PIN,??_read_sensors
  9299  00287C  CF81 F083          	movff	3969,??_read_sensors+1	;volatile
  9300  002880  0100               	movlb	0	; () banked
  9301  002882  2B82               	incf	??_read_sensors& (0+255),f,b
  9302  002884  D003               	goto	u7484
  9303  002886                     u7485:
  9304  002886  0100               	movlb	0	; () banked
  9305  002888  90D8               	bcf	status,0,c
  9306  00288A  3383               	rrcf	(??_read_sensors+1)& (0+255),f,b
  9307  00288C                     u7484:
  9308  00288C  0100               	movlb	0	; () banked
  9309  00288E  2F82               	decfsz	??_read_sensors& (0+255),f,b
  9310  002890  D7FA               	goto	u7485
  9311  002892  0E01               	movlw	1
  9312  002894  0100               	movlb	0	; () banked
  9313  002896  1783               	andwf	(??_read_sensors+1)& (0+255),f,b
  9314  002898  0100               	movlb	0	; () banked
  9315  00289A  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9316  00289C  6E6A               	movwf	_PROX2,c
  9317  00289E  6A6B               	clrf	_PROX2+1,c
  9318                           
  9319                           ; BSR set to: 0
  9320  0028A0  0012               	return		;funcret
  9321  0028A2                     __end_of_read_sensors:
  9322                           	opt stack 0
  9323                           tosu	equ	0xFFF
  9324                           tosh	equ	0xFFE
  9325                           tosl	equ	0xFFD
  9326                           pclath	equ	0xFFA
  9327                           tblptru	equ	0xFF8
  9328                           tblptrh	equ	0xFF7
  9329                           tblptrl	equ	0xFF6
  9330                           tablat	equ	0xFF5
  9331                           prodh	equ	0xFF4
  9332                           prodl	equ	0xFF3
  9333                           intcon	equ	0xFF2
  9334                           intcon2	equ	0xFF1
  9335                           intcon3	equ	0xFF0
  9336                           indf0	equ	0xFEF
  9337                           postinc0	equ	0xFEE
  9338                           fsr0h	equ	0xFEA
  9339                           fsr0l	equ	0xFE9
  9340                           wreg	equ	0xFE8
  9341                           indf1	equ	0xFE7
  9342                           postinc1	equ	0xFE6
  9343                           postdec1	equ	0xFE5
  9344                           fsr1h	equ	0xFE2
  9345                           fsr1l	equ	0xFE1
  9346                           indf2	equ	0xFDF
  9347                           postinc2	equ	0xFDE
  9348                           postdec2	equ	0xFDD
  9349                           fsr2h	equ	0xFDA
  9350                           fsr2l	equ	0xFD9
  9351                           status	equ	0xFD8
  9352                           
  9353 ;; *************** function _readADC *****************
  9354 ;; Defined at:
  9355 ;;		line 636 in file "main.c"
  9356 ;; Parameters:    Size  Location     Type
  9357 ;;  channel         1    wreg     unsigned char 
  9358 ;; Auto vars:     Size  Location     Type
  9359 ;;  channel         1    1[BANK0 ] unsigned char 
  9360 ;; Return value:  Size  Location     Type
  9361 ;;                  1    wreg      void 
  9362 ;; Registers used:
  9363 ;;		wreg, status,2, status,0, cstack
  9364 ;; Tracked objects:
  9365 ;;		On entry : 0/0
  9366 ;;		On exit  : 0/0
  9367 ;;		Unchanged: 0/0
  9368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9372 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9373 ;;Total ram usage:        2 bytes
  9374 ;; Hardware stack levels used:    1
  9375 ;; Hardware stack levels required when called:    5
  9376 ;; This function calls:
  9377 ;;		Nothing
  9378 ;; This function is called by:
  9379 ;;		_read_sensors
  9380 ;; This function uses a non-reentrant model
  9381 ;;
  9382                           
  9383                           	psect	text27
  9384  00370E                     __ptext27:
  9385                           	opt stack 0
  9386  00370E                     _readADC:
  9387                           	opt stack 24
  9388                           
  9389                           ; BSR set to: 0
  9390                           ;incstack = 0
  9391                           ;readADC@channel stored from wreg
  9392  00370E  0100               	movlb	0	; () banked
  9393  003710  6F81               	movwf	readADC@channel& (0+255),b
  9394                           
  9395                           ;main.c: 638: ADCON0 = ((channel <<2));
  9396  003712  0100               	movlb	0	; () banked
  9397  003714  4581               	rlncf	readADC@channel& (0+255),w,b
  9398  003716  46E8               	rlncf	wreg,f,c
  9399  003718  0BFC               	andlw	252
  9400  00371A  6EC2               	movwf	4034,c	;volatile
  9401                           
  9402                           ; BSR set to: 0
  9403                           ;main.c: 639: ADON = 1;
  9404  00371C  80C2               	bsf	4034,0,c	;volatile
  9405                           
  9406                           ; BSR set to: 0
  9407                           ;main.c: 640: ADCON0bits.GO = 1;
  9408  00371E  82C2               	bsf	4034,1,c	;volatile
  9409                           
  9410                           ;main.c: 641: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(10000000/4000.0)
      +                          ));}
  9411  003720  D009               	goto	l4962
  9412  003722                     l4960:
  9413  003722  0E11               	movlw	17
  9414  003724  0100               	movlb	0	; () banked
  9415  003726  6F80               	movwf	??_readADC& (0+255),b
  9416  003728  0E3A               	movlw	58
  9417  00372A                     u13197:
  9418  00372A  2EE8               	decfsz	wreg,f,c
  9419  00372C  D7FE               	bra	u13197
  9420  00372E  2F80               	decfsz	??_readADC& (0+255),f,b
  9421  003730  D7FC               	bra	u13197
  9422  003732  F000               	nop	
  9423  003734                     l4962:
  9424  003734  A2C2               	btfss	4034,1,c	;volatile
  9425  003736  0012               	return	
  9426  003738  D7F4               	goto	l4960
  9427  00373A                     __end_of_readADC:
  9428                           	opt stack 0
  9429                           tosu	equ	0xFFF
  9430                           tosh	equ	0xFFE
  9431                           tosl	equ	0xFFD
  9432                           pclath	equ	0xFFA
  9433                           tblptru	equ	0xFF8
  9434                           tblptrh	equ	0xFF7
  9435                           tblptrl	equ	0xFF6
  9436                           tablat	equ	0xFF5
  9437                           prodh	equ	0xFF4
  9438                           prodl	equ	0xFF3
  9439                           intcon	equ	0xFF2
  9440                           intcon2	equ	0xFF1
  9441                           intcon3	equ	0xFF0
  9442                           indf0	equ	0xFEF
  9443                           postinc0	equ	0xFEE
  9444                           fsr0h	equ	0xFEA
  9445                           fsr0l	equ	0xFE9
  9446                           wreg	equ	0xFE8
  9447                           indf1	equ	0xFE7
  9448                           postinc1	equ	0xFE6
  9449                           postdec1	equ	0xFE5
  9450                           fsr1h	equ	0xFE2
  9451                           fsr1l	equ	0xFE1
  9452                           indf2	equ	0xFDF
  9453                           postinc2	equ	0xFDE
  9454                           postdec2	equ	0xFDD
  9455                           fsr2h	equ	0xFDA
  9456                           fsr2l	equ	0xFD9
  9457                           status	equ	0xFD8
  9458                           
  9459 ;; *************** function _initLCD *****************
  9460 ;; Defined at:
  9461 ;;		line 14 in file "lcd.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;		None
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;		None
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  1    wreg      void 
  9468 ;; Registers used:
  9469 ;;		wreg, status,2, status,0, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9476 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9477 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9478 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9479 ;;Total ram usage:        1 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:    7
  9482 ;; This function calls:
  9483 ;;		_lcdInst
  9484 ;; This function is called by:
  9485 ;;		_main
  9486 ;; This function uses a non-reentrant model
  9487 ;;
  9488                           
  9489                           	psect	text28
  9490  0035B6                     __ptext28:
  9491                           	opt stack 0
  9492  0035B6                     _initLCD:
  9493                           	opt stack 23
  9494                           
  9495                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  9496                           
  9497                           ;incstack = 0
  9498  0035B6  0E31               	movlw	49
  9499  0035B8  0100               	movlb	0	; () banked
  9500  0035BA  6F83               	movwf	??_initLCD& (0+255),b
  9501  0035BC  0EB2               	movlw	178
  9502  0035BE                     u13207:
  9503  0035BE  2EE8               	decfsz	wreg,f,c
  9504  0035C0  D7FE               	bra	u13207
  9505  0035C2  2F83               	decfsz	??_initLCD& (0+255),f,b
  9506  0035C4  D7FC               	bra	u13207
  9507  0035C6  F000               	nop	
  9508                           
  9509                           ;lcd.c: 16: lcdInst(0b00110011);
  9510  0035C8  0E33               	movlw	51
  9511  0035CA  ECF8  F01B         	call	_lcdInst
  9512                           
  9513                           ;lcd.c: 17: lcdInst(0b00110010);
  9514  0035CE  0E32               	movlw	50
  9515  0035D0  ECF8  F01B         	call	_lcdInst
  9516                           
  9517                           ;lcd.c: 18: lcdInst(0b00101000);
  9518  0035D4  0E28               	movlw	40
  9519  0035D6  ECF8  F01B         	call	_lcdInst
  9520                           
  9521                           ;lcd.c: 19: lcdInst(0b00001111);
  9522  0035DA  0E0F               	movlw	15
  9523  0035DC  ECF8  F01B         	call	_lcdInst
  9524                           
  9525                           ;lcd.c: 20: lcdInst(0b00000110);
  9526  0035E0  0E06               	movlw	6
  9527  0035E2  ECF8  F01B         	call	_lcdInst
  9528                           
  9529                           ;lcd.c: 21: lcdInst(0b00000001);
  9530  0035E6  0E01               	movlw	1
  9531  0035E8  ECF8  F01B         	call	_lcdInst
  9532                           
  9533                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  9534  0035EC  0E31               	movlw	49
  9535  0035EE  0100               	movlb	0	; () banked
  9536  0035F0  6F83               	movwf	??_initLCD& (0+255),b
  9537  0035F2  0EB2               	movlw	178
  9538  0035F4                     u13217:
  9539  0035F4  2EE8               	decfsz	wreg,f,c
  9540  0035F6  D7FE               	bra	u13217
  9541  0035F8  2F83               	decfsz	??_initLCD& (0+255),f,b
  9542  0035FA  D7FC               	bra	u13217
  9543  0035FC  F000               	nop	
  9544  0035FE  0012               	return		;funcret
  9545  003600                     __end_of_initLCD:
  9546                           	opt stack 0
  9547                           tosu	equ	0xFFF
  9548                           tosh	equ	0xFFE
  9549                           tosl	equ	0xFFD
  9550                           pclath	equ	0xFFA
  9551                           tblptru	equ	0xFF8
  9552                           tblptrh	equ	0xFF7
  9553                           tblptrl	equ	0xFF6
  9554                           tablat	equ	0xFF5
  9555                           prodh	equ	0xFF4
  9556                           prodl	equ	0xFF3
  9557                           intcon	equ	0xFF2
  9558                           intcon2	equ	0xFF1
  9559                           intcon3	equ	0xFF0
  9560                           indf0	equ	0xFEF
  9561                           postinc0	equ	0xFEE
  9562                           fsr0h	equ	0xFEA
  9563                           fsr0l	equ	0xFE9
  9564                           wreg	equ	0xFE8
  9565                           indf1	equ	0xFE7
  9566                           postinc1	equ	0xFE6
  9567                           postdec1	equ	0xFE5
  9568                           fsr1h	equ	0xFE2
  9569                           fsr1l	equ	0xFE1
  9570                           indf2	equ	0xFDF
  9571                           postinc2	equ	0xFDE
  9572                           postdec2	equ	0xFDD
  9573                           fsr2h	equ	0xFDA
  9574                           fsr2l	equ	0xFD9
  9575                           status	equ	0xFD8
  9576                           
  9577 ;; *************** function _lcdInst *****************
  9578 ;; Defined at:
  9579 ;;		line 25 in file "lcd.c"
  9580 ;; Parameters:    Size  Location     Type
  9581 ;;  data            1    wreg     unsigned char 
  9582 ;; Auto vars:     Size  Location     Type
  9583 ;;  data            1    2[BANK0 ] unsigned char 
  9584 ;; Return value:  Size  Location     Type
  9585 ;;                  1    wreg      void 
  9586 ;; Registers used:
  9587 ;;		wreg, status,2, status,0, cstack
  9588 ;; Tracked objects:
  9589 ;;		On entry : 0/0
  9590 ;;		On exit  : 0/0
  9591 ;;		Unchanged: 0/0
  9592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9594 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9596 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9597 ;;Total ram usage:        1 bytes
  9598 ;; Hardware stack levels used:    1
  9599 ;; Hardware stack levels required when called:    6
  9600 ;; This function calls:
  9601 ;;		_lcdNibble
  9602 ;; This function is called by:
  9603 ;;		_initLCD
  9604 ;;		_update_lcd
  9605 ;; This function uses a non-reentrant model
  9606 ;;
  9607                           
  9608                           	psect	text29
  9609  0037F0                     __ptext29:
  9610                           	opt stack 0
  9611  0037F0                     _lcdInst:
  9612                           	opt stack 23
  9613                           
  9614                           ;incstack = 0
  9615                           ;lcdInst@data stored from wreg
  9616  0037F0  0100               	movlb	0	; () banked
  9617  0037F2  6F82               	movwf	lcdInst@data& (0+255),b
  9618                           
  9619                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  9620  0037F4  948C               	bcf	3980,2,c	;volatile
  9621                           
  9622                           ;lcd.c: 27: lcdNibble(data);
  9623  0037F6  0100               	movlb	0	; () banked
  9624  0037F8  5182               	movf	lcdInst@data& (0+255),w,b
  9625  0037FA  EC48  F019         	call	_lcdNibble
  9626  0037FE  0012               	return		;funcret
  9627  003800                     __end_of_lcdInst:
  9628                           	opt stack 0
  9629                           tosu	equ	0xFFF
  9630                           tosh	equ	0xFFE
  9631                           tosl	equ	0xFFD
  9632                           pclath	equ	0xFFA
  9633                           tblptru	equ	0xFF8
  9634                           tblptrh	equ	0xFF7
  9635                           tblptrl	equ	0xFF6
  9636                           tablat	equ	0xFF5
  9637                           prodh	equ	0xFF4
  9638                           prodl	equ	0xFF3
  9639                           intcon	equ	0xFF2
  9640                           intcon2	equ	0xFF1
  9641                           intcon3	equ	0xFF0
  9642                           indf0	equ	0xFEF
  9643                           postinc0	equ	0xFEE
  9644                           fsr0h	equ	0xFEA
  9645                           fsr0l	equ	0xFE9
  9646                           wreg	equ	0xFE8
  9647                           indf1	equ	0xFE7
  9648                           postinc1	equ	0xFE6
  9649                           postdec1	equ	0xFE5
  9650                           fsr1h	equ	0xFE2
  9651                           fsr1l	equ	0xFE1
  9652                           indf2	equ	0xFDF
  9653                           postinc2	equ	0xFDE
  9654                           postdec2	equ	0xFDD
  9655                           fsr2h	equ	0xFDA
  9656                           fsr2l	equ	0xFD9
  9657                           status	equ	0xFD8
  9658                           
  9659 ;; *************** function _lcdNibble *****************
  9660 ;; Defined at:
  9661 ;;		line 35 in file "lcd.c"
  9662 ;; Parameters:    Size  Location     Type
  9663 ;;  data            1    wreg     unsigned char 
  9664 ;; Auto vars:     Size  Location     Type
  9665 ;;  data            1    1[BANK0 ] unsigned char 
  9666 ;;  temp            1    0[BANK0 ] unsigned char 
  9667 ;; Return value:  Size  Location     Type
  9668 ;;                  1    wreg      void 
  9669 ;; Registers used:
  9670 ;;		wreg, status,2, status,0
  9671 ;; Tracked objects:
  9672 ;;		On entry : 0/0
  9673 ;;		On exit  : 0/0
  9674 ;;		Unchanged: 0/0
  9675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9679 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9680 ;;Total ram usage:        2 bytes
  9681 ;; Hardware stack levels used:    1
  9682 ;; Hardware stack levels required when called:    5
  9683 ;; This function calls:
  9684 ;;		Nothing
  9685 ;; This function is called by:
  9686 ;;		_lcdInst
  9687 ;;		_putch
  9688 ;; This function uses a non-reentrant model
  9689 ;;
  9690                           
  9691                           	psect	text30
  9692  003290                     __ptext30:
  9693                           	opt stack 0
  9694  003290                     _lcdNibble:
  9695                           	opt stack 21
  9696                           
  9697                           ;incstack = 0
  9698                           ;lcdNibble@data stored from wreg
  9699  003290  0100               	movlb	0	; () banked
  9700  003292  6F81               	movwf	lcdNibble@data& (0+255),b
  9701                           
  9702                           ;lcd.c: 37: char temp = data & 0xF0;
  9703  003294  0100               	movlb	0	; () banked
  9704  003296  5181               	movf	lcdNibble@data& (0+255),w,b
  9705  003298  0BF0               	andlw	240
  9706  00329A  0100               	movlb	0	; () banked
  9707  00329C  6F80               	movwf	lcdNibble@temp& (0+255),b
  9708                           
  9709                           ;lcd.c: 38: LATD = LATD & 0x0F;
  9710  00329E  508C               	movf	3980,w,c	;volatile
  9711  0032A0  0B0F               	andlw	15
  9712  0032A2  6E8C               	movwf	3980,c	;volatile
  9713                           
  9714                           ;lcd.c: 39: LATD = temp | LATD;
  9715  0032A4  0100               	movlb	0	; () banked
  9716  0032A6  5180               	movf	lcdNibble@temp& (0+255),w,b
  9717  0032A8  108C               	iorwf	3980,w,c	;volatile
  9718  0032AA  6E8C               	movwf	3980,c	;volatile
  9719                           
  9720                           ; BSR set to: 0
  9721                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  9722  0032AC  968C               	bcf	3980,3,c	;volatile
  9723                           
  9724                           ; BSR set to: 0
  9725                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9726  0032AE  0E14               	movlw	20
  9727  0032B0                     u13227:
  9728  0032B0  2EE8               	decfsz	wreg,f,c
  9729  0032B2  D7FE               	bra	u13227
  9730  0032B4  D000               	nop2	
  9731                           
  9732                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  9733  0032B6  868C               	bsf	3980,3,c	;volatile
  9734                           
  9735                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9736  0032B8  0E14               	movlw	20
  9737  0032BA                     u13237:
  9738  0032BA  2EE8               	decfsz	wreg,f,c
  9739  0032BC  D7FE               	bra	u13237
  9740  0032BE  D000               	nop2	
  9741                           
  9742                           ;lcd.c: 46: data = data << 4;
  9743  0032C0  0100               	movlb	0	; () banked
  9744  0032C2  3981               	swapf	lcdNibble@data& (0+255),w,b
  9745  0032C4  0BF0               	andlw	240
  9746  0032C6  0100               	movlb	0	; () banked
  9747  0032C8  6F81               	movwf	lcdNibble@data& (0+255),b
  9748                           
  9749                           ;lcd.c: 48: temp = data & 0xF0;
  9750  0032CA  0100               	movlb	0	; () banked
  9751  0032CC  5181               	movf	lcdNibble@data& (0+255),w,b
  9752  0032CE  0BF0               	andlw	240
  9753  0032D0  0100               	movlb	0	; () banked
  9754  0032D2  6F80               	movwf	lcdNibble@temp& (0+255),b
  9755                           
  9756                           ;lcd.c: 49: LATD = LATD & 0x0F;
  9757  0032D4  508C               	movf	3980,w,c	;volatile
  9758  0032D6  0B0F               	andlw	15
  9759  0032D8  6E8C               	movwf	3980,c	;volatile
  9760                           
  9761                           ;lcd.c: 50: LATD = temp | LATD;
  9762  0032DA  0100               	movlb	0	; () banked
  9763  0032DC  5180               	movf	lcdNibble@temp& (0+255),w,b
  9764  0032DE  108C               	iorwf	3980,w,c	;volatile
  9765  0032E0  6E8C               	movwf	3980,c	;volatile
  9766                           
  9767                           ; BSR set to: 0
  9768                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  9769  0032E2  968C               	bcf	3980,3,c	;volatile
  9770                           
  9771                           ; BSR set to: 0
  9772                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9773  0032E4  0E14               	movlw	20
  9774  0032E6                     u13247:
  9775  0032E6  2EE8               	decfsz	wreg,f,c
  9776  0032E8  D7FE               	bra	u13247
  9777  0032EA  D000               	nop2	
  9778                           
  9779                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  9780  0032EC  868C               	bsf	3980,3,c	;volatile
  9781                           
  9782                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9783  0032EE  0E14               	movlw	20
  9784  0032F0                     u13257:
  9785  0032F0  2EE8               	decfsz	wreg,f,c
  9786  0032F2  D7FE               	bra	u13257
  9787  0032F4  D000               	nop2	
  9788  0032F6  0012               	return		;funcret
  9789  0032F8                     __end_of_lcdNibble:
  9790                           	opt stack 0
  9791                           tosu	equ	0xFFF
  9792                           tosh	equ	0xFFE
  9793                           tosl	equ	0xFFD
  9794                           pclath	equ	0xFFA
  9795                           tblptru	equ	0xFF8
  9796                           tblptrh	equ	0xFF7
  9797                           tblptrl	equ	0xFF6
  9798                           tablat	equ	0xFF5
  9799                           prodh	equ	0xFF4
  9800                           prodl	equ	0xFF3
  9801                           intcon	equ	0xFF2
  9802                           intcon2	equ	0xFF1
  9803                           intcon3	equ	0xFF0
  9804                           indf0	equ	0xFEF
  9805                           postinc0	equ	0xFEE
  9806                           fsr0h	equ	0xFEA
  9807                           fsr0l	equ	0xFE9
  9808                           wreg	equ	0xFE8
  9809                           indf1	equ	0xFE7
  9810                           postinc1	equ	0xFE6
  9811                           postdec1	equ	0xFE5
  9812                           fsr1h	equ	0xFE2
  9813                           fsr1l	equ	0xFE1
  9814                           indf2	equ	0xFDF
  9815                           postinc2	equ	0xFDE
  9816                           postdec2	equ	0xFDD
  9817                           fsr2h	equ	0xFDA
  9818                           fsr2l	equ	0xFD9
  9819                           status	equ	0xFD8
  9820                           
  9821 ;; *************** function _I2C_Master_Init *****************
  9822 ;; Defined at:
  9823 ;;		line 13 in file "I2C.c"
  9824 ;; Parameters:    Size  Location     Type
  9825 ;;  c               4   13[BANK0 ] const unsigned long 
  9826 ;; Auto vars:     Size  Location     Type
  9827 ;;		None
  9828 ;; Return value:  Size  Location     Type
  9829 ;;                  1    wreg      void 
  9830 ;; Registers used:
  9831 ;;		wreg, status,2, status,0, cstack
  9832 ;; Tracked objects:
  9833 ;;		On entry : 0/0
  9834 ;;		On exit  : 0/0
  9835 ;;		Unchanged: 0/0
  9836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9837 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9839 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9840 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9841 ;;Total ram usage:        8 bytes
  9842 ;; Hardware stack levels used:    1
  9843 ;; Hardware stack levels required when called:    6
  9844 ;; This function calls:
  9845 ;;		___lldiv
  9846 ;; This function is called by:
  9847 ;;		_main
  9848 ;; This function uses a non-reentrant model
  9849 ;;
  9850                           
  9851                           	psect	text31
  9852  0033BC                     __ptext31:
  9853                           	opt stack 0
  9854  0033BC                     _I2C_Master_Init:
  9855                           	opt stack 24
  9856                           
  9857                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  9858                           
  9859                           ;incstack = 0
  9860  0033BC  0E00               	movlw	0
  9861  0033BE  6EC7               	movwf	4039,c	;volatile
  9862                           
  9863                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  9864  0033C0  0E28               	movlw	40
  9865  0033C2  6EC6               	movwf	4038,c	;volatile
  9866                           
  9867                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  9868  0033C4  0E00               	movlw	0
  9869  0033C6  6EC5               	movwf	4037,c	;volatile
  9870                           
  9871                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  9872  0033C8  0E80               	movlw	128
  9873  0033CA  0100               	movlb	0	; () banked
  9874  0033CC  6F80               	movwf	___lldiv@dividend& (0+255),b
  9875  0033CE  0E96               	movlw	150
  9876  0033D0  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  9877  0033D2  0E98               	movlw	152
  9878  0033D4  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  9879  0033D6  0E00               	movlw	0
  9880  0033D8  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  9881  0033DA  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  9882  0033DE  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  9883  0033E2  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  9884  0033E6  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  9885  0033EA  0E02               	movlw	2
  9886  0033EC                     u7395:
  9887  0033EC  90D8               	bcf	status,0,c
  9888  0033EE  0100               	movlb	0	; () banked
  9889  0033F0  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  9890  0033F2  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  9891  0033F4  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  9892  0033F6  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  9893  0033F8  2EE8               	decfsz	wreg,f,c
  9894  0033FA  D7F8               	goto	u7395
  9895  0033FC  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  9896  003400  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  9897  003404  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  9898  003408  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  9899  00340C  EC95  F017         	call	___lldiv	;wreg free
  9900  003410  0100               	movlb	0	; () banked
  9901  003412  0580               	decf	?___lldiv& (0+255),w,b
  9902  003414  6EC8               	movwf	4040,c	;volatile
  9903                           
  9904                           ; BSR set to: 0
  9905                           ;I2C.c: 20: TRISC3 = 1;
  9906  003416  8694               	bsf	3988,3,c	;volatile
  9907                           
  9908                           ; BSR set to: 0
  9909                           ;I2C.c: 21: TRISC4 = 1;
  9910  003418  8894               	bsf	3988,4,c	;volatile
  9911                           
  9912                           ; BSR set to: 0
  9913  00341A  0012               	return		;funcret
  9914  00341C                     __end_of_I2C_Master_Init:
  9915                           	opt stack 0
  9916                           tosu	equ	0xFFF
  9917                           tosh	equ	0xFFE
  9918                           tosl	equ	0xFFD
  9919                           pclath	equ	0xFFA
  9920                           tblptru	equ	0xFF8
  9921                           tblptrh	equ	0xFF7
  9922                           tblptrl	equ	0xFF6
  9923                           tablat	equ	0xFF5
  9924                           prodh	equ	0xFF4
  9925                           prodl	equ	0xFF3
  9926                           intcon	equ	0xFF2
  9927                           intcon2	equ	0xFF1
  9928                           intcon3	equ	0xFF0
  9929                           indf0	equ	0xFEF
  9930                           postinc0	equ	0xFEE
  9931                           fsr0h	equ	0xFEA
  9932                           fsr0l	equ	0xFE9
  9933                           wreg	equ	0xFE8
  9934                           indf1	equ	0xFE7
  9935                           postinc1	equ	0xFE6
  9936                           postdec1	equ	0xFE5
  9937                           fsr1h	equ	0xFE2
  9938                           fsr1l	equ	0xFE1
  9939                           indf2	equ	0xFDF
  9940                           postinc2	equ	0xFDE
  9941                           postdec2	equ	0xFDD
  9942                           fsr2h	equ	0xFDA
  9943                           fsr2l	equ	0xFD9
  9944                           status	equ	0xFD8
  9945                           
  9946 ;; *************** function ___lldiv *****************
  9947 ;; Defined at:
  9948 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  9949 ;; Parameters:    Size  Location     Type
  9950 ;;  dividend        4    0[BANK0 ] unsigned long 
  9951 ;;  divisor         4    4[BANK0 ] unsigned long 
  9952 ;; Auto vars:     Size  Location     Type
  9953 ;;  quotient        4    8[BANK0 ] unsigned long 
  9954 ;;  counter         1   12[BANK0 ] unsigned char 
  9955 ;; Return value:  Size  Location     Type
  9956 ;;                  4    0[BANK0 ] unsigned long 
  9957 ;; Registers used:
  9958 ;;		wreg, status,2, status,0
  9959 ;; Tracked objects:
  9960 ;;		On entry : 0/0
  9961 ;;		On exit  : 0/0
  9962 ;;		Unchanged: 0/0
  9963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9964 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9965 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9966 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9967 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9968 ;;Total ram usage:       13 bytes
  9969 ;; Hardware stack levels used:    1
  9970 ;; Hardware stack levels required when called:    5
  9971 ;; This function calls:
  9972 ;;		Nothing
  9973 ;; This function is called by:
  9974 ;;		_I2C_Master_Init
  9975 ;; This function uses a non-reentrant model
  9976 ;;
  9977                           
  9978                           	psect	text32
  9979  002F2A                     __ptext32:
  9980                           	opt stack 0
  9981  002F2A                     ___lldiv:
  9982                           	opt stack 24
  9983                           
  9984                           ; BSR set to: 0
  9985                           ;incstack = 0
  9986  002F2A  0E00               	movlw	0
  9987  002F2C  0100               	movlb	0	; () banked
  9988  002F2E  6F88               	movwf	___lldiv@quotient& (0+255),b
  9989  002F30  0E00               	movlw	0
  9990  002F32  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  9991  002F34  0E00               	movlw	0
  9992  002F36  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  9993  002F38  0E00               	movlw	0
  9994  002F3A  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  9995                           
  9996                           ; BSR set to: 0
  9997  002F3C  0100               	movlb	0	; () banked
  9998  002F3E  5184               	movf	___lldiv@divisor& (0+255),w,b
  9999  002F40  0100               	movlb	0	; () banked
 10000  002F42  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 10001  002F44  0100               	movlb	0	; () banked
 10002  002F46  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 10003  002F48  0100               	movlb	0	; () banked
 10004  002F4A  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 10005  002F4C  B4D8               	btfsc	status,2,c
 10006  002F4E  D042               	goto	l924
 10007                           
 10008                           ; BSR set to: 0
 10009  002F50  0E01               	movlw	1
 10010  002F52  0100               	movlb	0	; () banked
 10011  002F54  6F8C               	movwf	___lldiv@counter& (0+255),b
 10012  002F56  D008               	goto	l5016
 10013  002F58                     l5014:
 10014                           
 10015                           ; BSR set to: 0
 10016  002F58  0100               	movlb	0	; () banked
 10017  002F5A  90D8               	bcf	status,0,c
 10018  002F5C  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 10019  002F5E  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 10020  002F60  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 10021  002F62  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 10022  002F64  0100               	movlb	0	; () banked
 10023  002F66  2B8C               	incf	___lldiv@counter& (0+255),f,b
 10024  002F68                     l5016:
 10025                           
 10026                           ; BSR set to: 0
 10027  002F68  0100               	movlb	0	; () banked
 10028  002F6A  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 10029  002F6C  D7F5               	goto	l5014
 10030  002F6E                     l5018:
 10031                           
 10032                           ; BSR set to: 0
 10033  002F6E  0100               	movlb	0	; () banked
 10034  002F70  90D8               	bcf	status,0,c
 10035  002F72  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 10036  002F74  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 10037  002F76  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 10038  002F78  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 10039                           
 10040                           ; BSR set to: 0
 10041  002F7A  0100               	movlb	0	; () banked
 10042  002F7C  5184               	movf	___lldiv@divisor& (0+255),w,b
 10043  002F7E  0100               	movlb	0	; () banked
 10044  002F80  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 10045  002F82  0100               	movlb	0	; () banked
 10046  002F84  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10047  002F86  0100               	movlb	0	; () banked
 10048  002F88  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 10049  002F8A  0100               	movlb	0	; () banked
 10050  002F8C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10051  002F8E  0100               	movlb	0	; () banked
 10052  002F90  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 10053  002F92  0100               	movlb	0	; () banked
 10054  002F94  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10055  002F96  0100               	movlb	0	; () banked
 10056  002F98  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 10057  002F9A  A0D8               	btfss	status,0,c
 10058  002F9C  D012               	goto	l5026
 10059                           
 10060                           ; BSR set to: 0
 10061  002F9E  0100               	movlb	0	; () banked
 10062  002FA0  5184               	movf	___lldiv@divisor& (0+255),w,b
 10063  002FA2  0100               	movlb	0	; () banked
 10064  002FA4  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 10065  002FA6  0100               	movlb	0	; () banked
 10066  002FA8  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10067  002FAA  0100               	movlb	0	; () banked
 10068  002FAC  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 10069  002FAE  0100               	movlb	0	; () banked
 10070  002FB0  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10071  002FB2  0100               	movlb	0	; () banked
 10072  002FB4  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 10073  002FB6  0100               	movlb	0	; () banked
 10074  002FB8  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10075  002FBA  0100               	movlb	0	; () banked
 10076  002FBC  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 10077                           
 10078                           ; BSR set to: 0
 10079  002FBE  0100               	movlb	0	; () banked
 10080  002FC0  8188               	bsf	___lldiv@quotient& (0+255),0,b
 10081  002FC2                     l5026:
 10082                           
 10083                           ; BSR set to: 0
 10084  002FC2  0100               	movlb	0	; () banked
 10085  002FC4  90D8               	bcf	status,0,c
 10086  002FC6  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 10087  002FC8  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 10088  002FCA  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 10089  002FCC  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 10090                           
 10091                           ; BSR set to: 0
 10092  002FCE  0100               	movlb	0	; () banked
 10093  002FD0  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 10094  002FD2  D7CD               	goto	l5018
 10095  002FD4                     l924:
 10096                           
 10097                           ; BSR set to: 0
 10098  002FD4  C088  F080         	movff	___lldiv@quotient,?___lldiv
 10099  002FD8  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 10100  002FDC  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 10101  002FE0  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 10102                           
 10103                           ; BSR set to: 0
 10104  002FE4  0012               	return		;funcret
 10105  002FE6                     __end_of___lldiv:
 10106                           	opt stack 0
 10107                           tosu	equ	0xFFF
 10108                           tosh	equ	0xFFE
 10109                           tosl	equ	0xFFD
 10110                           pclath	equ	0xFFA
 10111                           tblptru	equ	0xFF8
 10112                           tblptrh	equ	0xFF7
 10113                           tblptrl	equ	0xFF6
 10114                           tablat	equ	0xFF5
 10115                           prodh	equ	0xFF4
 10116                           prodl	equ	0xFF3
 10117                           intcon	equ	0xFF2
 10118                           intcon2	equ	0xFF1
 10119                           intcon3	equ	0xFF0
 10120                           indf0	equ	0xFEF
 10121                           postinc0	equ	0xFEE
 10122                           fsr0h	equ	0xFEA
 10123                           fsr0l	equ	0xFE9
 10124                           wreg	equ	0xFE8
 10125                           indf1	equ	0xFE7
 10126                           postinc1	equ	0xFE6
 10127                           postdec1	equ	0xFE5
 10128                           fsr1h	equ	0xFE2
 10129                           fsr1l	equ	0xFE1
 10130                           indf2	equ	0xFDF
 10131                           postinc2	equ	0xFDE
 10132                           postdec2	equ	0xFDD
 10133                           fsr2h	equ	0xFDA
 10134                           fsr2l	equ	0xFD9
 10135                           status	equ	0xFD8
 10136                           
 10137 ;; *************** function _keypressed *****************
 10138 ;; Defined at:
 10139 ;;		line 313 in file "main.c"
 10140 ;; Parameters:    Size  Location     Type
 10141 ;;		None
 10142 ;; Auto vars:     Size  Location     Type
 10143 ;;  i               2   58[COMRAM] int 
 10144 ;;  keypress        1   60[COMRAM] unsigned char 
 10145 ;; Return value:  Size  Location     Type
 10146 ;;                  1    wreg      void 
 10147 ;; Registers used:
 10148 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10149 ;; Tracked objects:
 10150 ;;		On entry : 0/0
 10151 ;;		On exit  : 0/0
 10152 ;;		Unchanged: 0/0
 10153 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10154 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10155 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10156 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10157 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10158 ;;Total ram usage:       19 bytes
 10159 ;; Hardware stack levels used:    1
 10160 ;; Hardware stack levels required when called:    4
 10161 ;; This function calls:
 10162 ;;		i2___awmod
 10163 ;;		i2_lcdInst
 10164 ;;		i2_printf
 10165 ;; This function is called by:
 10166 ;;		Interrupt level 2
 10167 ;; This function uses a non-reentrant model
 10168 ;;
 10169                           
 10170                           	psect	intcode
 10171  000008                     __pintcode:
 10172                           	opt stack 0
 10173  000008                     _keypressed:
 10174                           	opt stack 20
 10175                           
 10176                           ; BSR set to: 0
 10177                           ;incstack = 0
 10178  000008  827A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10179  00000A  EDF7  F008         	call	int_func,f	;refresh shadow registers
 10180                           tosu	equ	0xFFF
 10181                           tosh	equ	0xFFE
 10182                           tosl	equ	0xFFD
 10183                           pclath	equ	0xFFA
 10184                           tblptru	equ	0xFF8
 10185                           tblptrh	equ	0xFF7
 10186                           tblptrl	equ	0xFF6
 10187                           tablat	equ	0xFF5
 10188                           prodh	equ	0xFF4
 10189                           prodl	equ	0xFF3
 10190                           intcon	equ	0xFF2
 10191                           intcon2	equ	0xFF1
 10192                           intcon3	equ	0xFF0
 10193                           indf0	equ	0xFEF
 10194                           postinc0	equ	0xFEE
 10195                           fsr0h	equ	0xFEA
 10196                           fsr0l	equ	0xFE9
 10197                           wreg	equ	0xFE8
 10198                           indf1	equ	0xFE7
 10199                           postinc1	equ	0xFE6
 10200                           postdec1	equ	0xFE5
 10201                           fsr1h	equ	0xFE2
 10202                           fsr1l	equ	0xFE1
 10203                           indf2	equ	0xFDF
 10204                           postinc2	equ	0xFDE
 10205                           postdec2	equ	0xFDD
 10206                           fsr2h	equ	0xFDA
 10207                           fsr2l	equ	0xFD9
 10208                           status	equ	0xFD8
 10209                           
 10210                           	psect	intcode_body
 10211  0011EE                     __pintcode_body:
 10212                           	opt stack 20
 10213  0011EE                     int_func:
 10214                           	opt stack 20
 10215  0011EE  0006               	pop		; remove dummy address from shadow register refresh
 10216  0011F0  CFFA F02D          	movff	pclath,??_keypressed+2
 10217  0011F4  CFFB F02E          	movff	pclatu,??_keypressed+3
 10218  0011F8  CFE9 F02F          	movff	fsr0l,??_keypressed+4
 10219  0011FC  CFEA F030          	movff	fsr0h,??_keypressed+5
 10220  001200  CFE1 F031          	movff	fsr1l,??_keypressed+6
 10221  001204  CFE2 F032          	movff	fsr1h,??_keypressed+7
 10222  001208  CFD9 F033          	movff	fsr2l,??_keypressed+8
 10223  00120C  CFDA F034          	movff	fsr2h,??_keypressed+9
 10224  001210  CFF3 F035          	movff	prodl,??_keypressed+10
 10225  001214  CFF4 F036          	movff	prodh,??_keypressed+11
 10226  001218  CFF6 F037          	movff	tblptrl,??_keypressed+12
 10227  00121C  CFF7 F038          	movff	tblptrh,??_keypressed+13
 10228  001220  CFF8 F039          	movff	tblptru,??_keypressed+14
 10229  001224  CFF5 F03A          	movff	tablat,??_keypressed+15
 10230                           
 10231                           ;main.c: 315: if(INT1IF){
 10232  001228  A0F0               	btfss	intcon3,0,c	;volatile
 10233  00122A  D2A9               	goto	i2l385
 10234                           
 10235                           ;main.c: 316: int i;
 10236                           ;main.c: 317: unsigned char keypress = (PORTB & 0xF0) >> 4;
 10237  00122C  3881               	swapf	3969,w,c	;volatile
 10238  00122E  0B0F               	andlw	15
 10239  001230  0B0F               	andlw	15
 10240  001232  6E3D               	movwf	keypressed@keypress,c
 10241                           
 10242                           ;main.c: 318: switch(state)
 10243  001234  D28E               	goto	i2l8280
 10244  001236                     i2l8126:
 10245                           
 10246                           ;main.c: 320: for (i=0;i<7;i++)
 10247  001236  0E00               	movlw	0
 10248  001238  6E3C               	movwf	keypressed@i+1,c
 10249  00123A  0E00               	movlw	0
 10250  00123C  6E3B               	movwf	keypressed@i,c
 10251  00123E                     i2l8128:
 10252  00123E  BE3C               	btfsc	keypressed@i+1,7,c
 10253  001240  D006               	goto	i2l8132
 10254  001242  503C               	movf	keypressed@i+1,w,c
 10255  001244  E11D               	bnz	i2l8138
 10256  001246  0E07               	movlw	7
 10257  001248  5C3B               	subwf	keypressed@i,w,c
 10258  00124A  B0D8               	btfsc	status,0,c
 10259  00124C  D019               	goto	i2l8138
 10260  00124E                     i2l8132:
 10261                           
 10262                           ;main.c: 321: startTime[i]=time_i[i];
 10263  00124E  90D8               	bcf	status,0,c
 10264  001250  343B               	rlcf	keypressed@i,w,c
 10265  001252  6ED9               	movwf	fsr2l,c
 10266  001254  343C               	rlcf	keypressed@i+1,w,c
 10267  001256  6EDA               	movwf	fsr2h,c
 10268  001258  0E3E               	movlw	low _time_i
 10269  00125A  26D9               	addwf	fsr2l,f,c
 10270  00125C  0E00               	movlw	high _time_i
 10271  00125E  22DA               	addwfc	fsr2h,f,c
 10272  001260  90D8               	bcf	status,0,c
 10273  001262  343B               	rlcf	keypressed@i,w,c
 10274  001264  6EE1               	movwf	fsr1l,c
 10275  001266  343C               	rlcf	keypressed@i+1,w,c
 10276  001268  6EE2               	movwf	fsr1h,c
 10277  00126A  0E0E               	movlw	low _startTime
 10278  00126C  26E1               	addwf	fsr1l,f,c
 10279  00126E  0E01               	movlw	high _startTime
 10280  001270  22E2               	addwfc	fsr1h,f,c
 10281  001272  CFDE FFE6          	movff	postinc2,postinc1
 10282  001276  CFDD FFE5          	movff	postdec2,postdec1
 10283  00127A  4A3B               	infsnz	keypressed@i,f,c
 10284  00127C  2A3C               	incf	keypressed@i+1,f,c
 10285  00127E  D7DF               	goto	i2l8128
 10286  001280                     i2l8138:
 10287                           
 10288                           ;main.c: 322: if (keys[keypress]=='B'&&menuIndex<menuSize)
 10289  001280  503D               	movf	keypressed@keypress,w,c
 10290  001282  0D01               	mullw	1
 10291  001284  0EE5               	movlw	low _keys
 10292  001286  24F3               	addwf	prodl,w,c
 10293  001288  6EF6               	movwf	tblptrl,c
 10294  00128A  0EFE               	movlw	high _keys
 10295  00128C  20F4               	addwfc	prodh,w,c
 10296  00128E  6EF7               	movwf	tblptrh,c
 10297  001290                     	if	1	;There are 3 active tblptr bytes
 10298  001290  6AF8               	clrf	tblptru,c
 10299  001292  0E00               	movlw	low (__mediumconst shr (0+16))
 10300  001294  22F8               	addwfc	tblptru,f,c
 10301  001296                     	endif
 10302  001296  0008               	tblrd		*
 10303  001298  50F5               	movf	tablat,w,c
 10304  00129A  0A42               	xorlw	66
 10305  00129C  A4D8               	btfss	status,2,c
 10306  00129E  D012               	goto	i2l8144
 10307  0012A0  0100               	movlb	0	; () banked
 10308  0012A2  51FD               	movf	_menuSize& (0+255),w,b
 10309  0012A4  0100               	movlb	0	; () banked
 10310  0012A6  5DFB               	subwf	_menuIndex& (0+255),w,b
 10311  0012A8  0100               	movlb	0	; () banked
 10312  0012AA  51FC               	movf	(_menuIndex+1)& (0+255),w,b
 10313  0012AC  0A80               	xorlw	128
 10314  0012AE  6E2B               	movwf	??_keypressed& (0+255),c
 10315  0012B0  0100               	movlb	0	; () banked
 10316  0012B2  51FE               	movf	(_menuSize+1)& (0+255),w,b
 10317  0012B4  0A80               	xorlw	128
 10318  0012B6  582B               	subwfb	??_keypressed& (0+255),w,c
 10319  0012B8  B0D8               	btfsc	status,0,c
 10320  0012BA  D004               	goto	i2l8144
 10321                           
 10322                           ; BSR set to: 0
 10323                           ;main.c: 323: menuIndex++;
 10324  0012BC  0100               	movlb	0	; () banked
 10325  0012BE  4BFB               	infsnz	_menuIndex& (0+255),f,b
 10326  0012C0  2BFC               	incf	(_menuIndex+1)& (0+255),f,b
 10327  0012C2  D25C               	goto	i2l348
 10328  0012C4                     i2l8144:
 10329                           
 10330                           ;main.c: 324: else if (keys[keypress]=='A'&&menuIndex>1)
 10331  0012C4  503D               	movf	keypressed@keypress,w,c
 10332  0012C6  0D01               	mullw	1
 10333  0012C8  0EE5               	movlw	low _keys
 10334  0012CA  24F3               	addwf	prodl,w,c
 10335  0012CC  6EF6               	movwf	tblptrl,c
 10336  0012CE  0EFE               	movlw	high _keys
 10337  0012D0  20F4               	addwfc	prodh,w,c
 10338  0012D2  6EF7               	movwf	tblptrh,c
 10339  0012D4                     	if	1	;There are 3 active tblptr bytes
 10340  0012D4  6AF8               	clrf	tblptru,c
 10341  0012D6  0E00               	movlw	low (__mediumconst shr (0+16))
 10342  0012D8  22F8               	addwfc	tblptru,f,c
 10343  0012DA                     	endif
 10344  0012DA  0008               	tblrd		*
 10345  0012DC  50F5               	movf	tablat,w,c
 10346  0012DE  0A41               	xorlw	65
 10347  0012E0  A4D8               	btfss	status,2,c
 10348  0012E2  D010               	goto	i2l8150
 10349  0012E4  0100               	movlb	0	; () banked
 10350  0012E6  BFFC               	btfsc	(_menuIndex+1)& (0+255),7,b
 10351  0012E8  D00D               	goto	i2l8150
 10352  0012EA  0100               	movlb	0	; () banked
 10353  0012EC  51FC               	movf	(_menuIndex+1)& (0+255),w,b
 10354  0012EE  E105               	bnz	i2u1290_40
 10355  0012F0  0E02               	movlw	2
 10356  0012F2  0100               	movlb	0	; () banked
 10357  0012F4  5DFB               	subwf	_menuIndex& (0+255),w,b
 10358  0012F6  A0D8               	btfss	status,0,c
 10359  0012F8  D005               	goto	i2l8150
 10360  0012FA                     i2u1290_40:
 10361                           
 10362                           ; BSR set to: 0
 10363                           ;main.c: 325: menuIndex--;
 10364  0012FA  0100               	movlb	0	; () banked
 10365  0012FC  07FB               	decf	_menuIndex& (0+255),f,b
 10366  0012FE  A0D8               	btfss	status,0,c
 10367  001300  07FC               	decf	(_menuIndex+1)& (0+255),f,b
 10368  001302  D23C               	goto	i2l348
 10369  001304                     i2l8150:
 10370                           
 10371                           ;main.c: 326: else if (keys[keypress]=='C'){
 10372  001304  503D               	movf	keypressed@keypress,w,c
 10373  001306  0D01               	mullw	1
 10374  001308  0EE5               	movlw	low _keys
 10375  00130A  24F3               	addwf	prodl,w,c
 10376  00130C  6EF6               	movwf	tblptrl,c
 10377  00130E  0EFE               	movlw	high _keys
 10378  001310  20F4               	addwfc	prodh,w,c
 10379  001312  6EF7               	movwf	tblptrh,c
 10380  001314                     	if	1	;There are 3 active tblptr bytes
 10381  001314  6AF8               	clrf	tblptru,c
 10382  001316  0E00               	movlw	low (__mediumconst shr (0+16))
 10383  001318  22F8               	addwfc	tblptru,f,c
 10384  00131A                     	endif
 10385  00131A  0008               	tblrd		*
 10386  00131C  50F5               	movf	tablat,w,c
 10387  00131E  0A43               	xorlw	67
 10388  001320  B4D8               	btfsc	status,2,c
 10389  001322  D01D               	goto	i2l8170
 10390  001324  D22B               	goto	i2l348
 10391  001326                     i2l8154:
 10392  001326  0E73               	movlw	115
 10393  001328  D20A               	goto	L9
 10394  00132A                     i2l8156:
 10395  00132A  0E6C               	movlw	108
 10396  00132C  D208               	goto	L9
 10397  00132E                     i2l8158:
 10398  00132E  0E63               	movlw	99
 10399  001330  D206               	goto	L9
 10400  001332                     i2l8160:
 10401                           
 10402                           ;main.c: 335: lcdInst(0b10000000);;
 10403  001332  0E80               	movlw	128
 10404  001334  EC06  F01C         	call	i2_lcdInst
 10405                           
 10406                           ;main.c: 336: printf("invalid");
 10407  001338  0EE5               	movlw	low STR_15
 10408  00133A  6E23               	movwf	i2printf@f,c
 10409  00133C  0EFF               	movlw	high STR_15
 10410  00133E  6E24               	movwf	i2printf@f+1,c
 10411  001340  EC3C  F01B         	call	i2_printf	;wreg free
 10412                           
 10413                           ;main.c: 337: lcdInst(0b11000000);;
 10414  001344  0EC0               	movlw	192
 10415  001346  EC06  F01C         	call	i2_lcdInst
 10416                           
 10417                           ;main.c: 338: printf("menu selection");
 10418  00134A  0EAE               	movlw	low STR_16
 10419  00134C  6E23               	movwf	i2printf@f,c
 10420  00134E  0EFF               	movlw	high STR_16
 10421  001350  6E24               	movwf	i2printf@f+1,c
 10422  001352  EC3C  F01B         	call	i2_printf	;wreg free
 10423                           
 10424                           ;main.c: 339: lcdInst(0b10010000);;
 10425  001356  0E90               	movlw	144
 10426  001358  EC06  F01C         	call	i2_lcdInst
 10427                           
 10428                           ;main.c: 341: }
 10429                           
 10430                           ;main.c: 340: break;
 10431  00135C  D20F               	goto	i2l348
 10432  00135E                     i2l8170:
 10433  00135E  C0FB  F02B         	movff	_menuIndex,??_keypressed
 10434  001362  C0FC  F02C         	movff	_menuIndex+1,??_keypressed+1
 10435                           
 10436                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10437                           ; Switch size 1, requested type "space"
 10438                           ; Number of cases is 1, Range of values is 0 to 0
 10439                           ; switch strategies available:
 10440                           ; Name         Instructions Cycles
 10441                           ; simple_byte            4     3 (average)
 10442                           ;	Chosen strategy is simple_byte
 10443  001366  502C               	movf	??_keypressed+1,w,c
 10444  001368  0A00               	xorlw	0	; case 0
 10445  00136A  A4D8               	btfss	status,2,c
 10446  00136C  D7E2               	goto	i2l8160
 10447                           
 10448                           ; Switch size 1, requested type "space"
 10449                           ; Number of cases is 3, Range of values is 1 to 3
 10450                           ; switch strategies available:
 10451                           ; Name         Instructions Cycles
 10452                           ; simple_byte           10     6 (average)
 10453                           ;	Chosen strategy is simple_byte
 10454  00136E  502B               	movf	??_keypressed,w,c
 10455  001370  0A01               	xorlw	1	; case 1
 10456  001372  B4D8               	btfsc	status,2,c
 10457  001374  D7D8               	goto	i2l8154
 10458  001376  0A03               	xorlw	3	; case 2
 10459  001378  B4D8               	btfsc	status,2,c
 10460  00137A  D7D7               	goto	i2l8156
 10461  00137C  0A01               	xorlw	1	; case 3
 10462  00137E  B4D8               	btfsc	status,2,c
 10463  001380  D7D6               	goto	i2l8158
 10464  001382  D7D7               	goto	i2l8160
 10465  001384                     i2l8174:
 10466                           
 10467                           ; BSR set to: 0
 10468                           ;main.c: 349: for (i=0;i<7;i++)
 10469  001384  0E00               	movlw	0
 10470  001386  6E3C               	movwf	keypressed@i+1,c
 10471  001388  0E00               	movlw	0
 10472  00138A  6E3B               	movwf	keypressed@i,c
 10473  00138C                     i2l8176:
 10474                           
 10475                           ; BSR set to: 0
 10476  00138C  BE3C               	btfsc	keypressed@i+1,7,c
 10477  00138E  D006               	goto	i2l8180
 10478  001390  503C               	movf	keypressed@i+1,w,c
 10479  001392  E11D               	bnz	i2l8186
 10480  001394  0E07               	movlw	7
 10481  001396  5C3B               	subwf	keypressed@i,w,c
 10482  001398  B0D8               	btfsc	status,0,c
 10483  00139A  D019               	goto	i2l8186
 10484  00139C                     i2l8180:
 10485                           
 10486                           ;main.c: 350: startTime[i]=time_i[i];
 10487  00139C  90D8               	bcf	status,0,c
 10488  00139E  343B               	rlcf	keypressed@i,w,c
 10489  0013A0  6ED9               	movwf	fsr2l,c
 10490  0013A2  343C               	rlcf	keypressed@i+1,w,c
 10491  0013A4  6EDA               	movwf	fsr2h,c
 10492  0013A6  0E3E               	movlw	low _time_i
 10493  0013A8  26D9               	addwf	fsr2l,f,c
 10494  0013AA  0E00               	movlw	high _time_i
 10495  0013AC  22DA               	addwfc	fsr2h,f,c
 10496  0013AE  90D8               	bcf	status,0,c
 10497  0013B0  343B               	rlcf	keypressed@i,w,c
 10498  0013B2  6EE1               	movwf	fsr1l,c
 10499  0013B4  343C               	rlcf	keypressed@i+1,w,c
 10500  0013B6  6EE2               	movwf	fsr1h,c
 10501  0013B8  0E0E               	movlw	low _startTime
 10502  0013BA  26E1               	addwf	fsr1l,f,c
 10503  0013BC  0E01               	movlw	high _startTime
 10504  0013BE  22E2               	addwfc	fsr1h,f,c
 10505  0013C0  CFDE FFE6          	movff	postinc2,postinc1
 10506  0013C4  CFDD FFE5          	movff	postdec2,postdec1
 10507  0013C8  4A3B               	infsnz	keypressed@i,f,c
 10508  0013CA  2A3C               	incf	keypressed@i+1,f,c
 10509  0013CC  D7DF               	goto	i2l8176
 10510  0013CE                     i2l8186:
 10511                           
 10512                           ;main.c: 352: if (keys[keypress]=='B'&&logIndex<events){
 10513  0013CE  503D               	movf	keypressed@keypress,w,c
 10514  0013D0  0D01               	mullw	1
 10515  0013D2  0EE5               	movlw	low _keys
 10516  0013D4  24F3               	addwf	prodl,w,c
 10517  0013D6  6EF6               	movwf	tblptrl,c
 10518  0013D8  0EFE               	movlw	high _keys
 10519  0013DA  20F4               	addwfc	prodh,w,c
 10520  0013DC  6EF7               	movwf	tblptrh,c
 10521  0013DE                     	if	1	;There are 3 active tblptr bytes
 10522  0013DE  6AF8               	clrf	tblptru,c
 10523  0013E0  0E00               	movlw	low (__mediumconst shr (0+16))
 10524  0013E2  22F8               	addwfc	tblptru,f,c
 10525  0013E4                     	endif
 10526  0013E4  0008               	tblrd		*
 10527  0013E6  50F5               	movf	tablat,w,c
 10528  0013E8  0A42               	xorlw	66
 10529  0013EA  A4D8               	btfss	status,2,c
 10530  0013EC  D012               	goto	i2l8192
 10531  0013EE  0100               	movlb	0	; () banked
 10532  0013F0  51F7               	movf	_events& (0+255),w,b
 10533  0013F2  0100               	movlb	0	; () banked
 10534  0013F4  5DF9               	subwf	_logIndex& (0+255),w,b
 10535  0013F6  0100               	movlb	0	; () banked
 10536  0013F8  51FA               	movf	(_logIndex+1)& (0+255),w,b
 10537  0013FA  0A80               	xorlw	128
 10538  0013FC  6E2B               	movwf	??_keypressed& (0+255),c
 10539  0013FE  0100               	movlb	0	; () banked
 10540  001400  51F8               	movf	(_events+1)& (0+255),w,b
 10541  001402  0A80               	xorlw	128
 10542  001404  582B               	subwfb	??_keypressed& (0+255),w,c
 10543  001406  B0D8               	btfsc	status,0,c
 10544  001408  D004               	goto	i2l8192
 10545                           
 10546                           ; BSR set to: 0
 10547                           ;main.c: 356: logIndex++;
 10548  00140A  0100               	movlb	0	; () banked
 10549  00140C  4BF9               	infsnz	_logIndex& (0+255),f,b
 10550  00140E  2BFA               	incf	(_logIndex+1)& (0+255),f,b
 10551                           
 10552                           ;main.c: 357: }
 10553  001410  D1B5               	goto	i2l348
 10554  001412                     i2l8192:
 10555                           
 10556                           ;main.c: 358: else if (keys[keypress]=='A'&&logIndex>1)
 10557  001412  503D               	movf	keypressed@keypress,w,c
 10558  001414  0D01               	mullw	1
 10559  001416  0EE5               	movlw	low _keys
 10560  001418  24F3               	addwf	prodl,w,c
 10561  00141A  6EF6               	movwf	tblptrl,c
 10562  00141C  0EFE               	movlw	high _keys
 10563  00141E  20F4               	addwfc	prodh,w,c
 10564  001420  6EF7               	movwf	tblptrh,c
 10565  001422                     	if	1	;There are 3 active tblptr bytes
 10566  001422  6AF8               	clrf	tblptru,c
 10567  001424  0E00               	movlw	low (__mediumconst shr (0+16))
 10568  001426  22F8               	addwfc	tblptru,f,c
 10569  001428                     	endif
 10570  001428  0008               	tblrd		*
 10571  00142A  50F5               	movf	tablat,w,c
 10572  00142C  0A41               	xorlw	65
 10573  00142E  A4D8               	btfss	status,2,c
 10574  001430  D077               	goto	i2l8226
 10575  001432  0100               	movlb	0	; () banked
 10576  001434  BFFA               	btfsc	(_logIndex+1)& (0+255),7,b
 10577  001436  D074               	goto	i2l8226
 10578  001438  0100               	movlb	0	; () banked
 10579  00143A  51FA               	movf	(_logIndex+1)& (0+255),w,b
 10580  00143C  E105               	bnz	i2u1297_40
 10581  00143E  0E02               	movlw	2
 10582  001440  0100               	movlb	0	; () banked
 10583  001442  5DF9               	subwf	_logIndex& (0+255),w,b
 10584  001444  A0D8               	btfss	status,0,c
 10585  001446  D06C               	goto	i2l8226
 10586  001448                     i2u1297_40:
 10587                           
 10588                           ; BSR set to: 0
 10589                           ;main.c: 359: logIndex--;
 10590  001448  0100               	movlb	0	; () banked
 10591  00144A  07F9               	decf	_logIndex& (0+255),f,b
 10592  00144C  A0D8               	btfss	status,0,c
 10593  00144E  07FA               	decf	(_logIndex+1)& (0+255),f,b
 10594  001450  D195               	goto	i2l348
 10595  001452                     i2l8202:
 10596                           
 10597                           ; BSR set to: 0
 10598                           ;main.c: 364: for (i=0;i<7;i++)
 10599  001452  0E00               	movlw	0
 10600  001454  6E3C               	movwf	keypressed@i+1,c
 10601  001456  0E00               	movlw	0
 10602  001458  6E3B               	movwf	keypressed@i,c
 10603  00145A                     i2l8204:
 10604                           
 10605                           ; BSR set to: 0
 10606  00145A  BE3C               	btfsc	keypressed@i+1,7,c
 10607  00145C  D006               	goto	i2l8208
 10608  00145E  503C               	movf	keypressed@i+1,w,c
 10609  001460  E11D               	bnz	i2l8214
 10610  001462  0E07               	movlw	7
 10611  001464  5C3B               	subwf	keypressed@i,w,c
 10612  001466  B0D8               	btfsc	status,0,c
 10613  001468  D019               	goto	i2l8214
 10614  00146A                     i2l8208:
 10615                           
 10616                           ;main.c: 365: startTime[i]=time_i[i];
 10617  00146A  90D8               	bcf	status,0,c
 10618  00146C  343B               	rlcf	keypressed@i,w,c
 10619  00146E  6ED9               	movwf	fsr2l,c
 10620  001470  343C               	rlcf	keypressed@i+1,w,c
 10621  001472  6EDA               	movwf	fsr2h,c
 10622  001474  0E3E               	movlw	low _time_i
 10623  001476  26D9               	addwf	fsr2l,f,c
 10624  001478  0E00               	movlw	high _time_i
 10625  00147A  22DA               	addwfc	fsr2h,f,c
 10626  00147C  90D8               	bcf	status,0,c
 10627  00147E  343B               	rlcf	keypressed@i,w,c
 10628  001480  6EE1               	movwf	fsr1l,c
 10629  001482  343C               	rlcf	keypressed@i+1,w,c
 10630  001484  6EE2               	movwf	fsr1h,c
 10631  001486  0E0E               	movlw	low _startTime
 10632  001488  26E1               	addwf	fsr1l,f,c
 10633  00148A  0E01               	movlw	high _startTime
 10634  00148C  22E2               	addwfc	fsr1h,f,c
 10635  00148E  CFDE FFE6          	movff	postinc2,postinc1
 10636  001492  CFDD FFE5          	movff	postdec2,postdec1
 10637  001496  4A3B               	infsnz	keypressed@i,f,c
 10638  001498  2A3C               	incf	keypressed@i+1,f,c
 10639  00149A  D7DF               	goto	i2l8204
 10640  00149C                     i2l8214:
 10641                           
 10642                           ;main.c: 367: if (keys[keypress]=='B'&&creditIndex<creditSize)
 10643  00149C  503D               	movf	keypressed@keypress,w,c
 10644  00149E  0D01               	mullw	1
 10645  0014A0  0EE5               	movlw	low _keys
 10646  0014A2  24F3               	addwf	prodl,w,c
 10647  0014A4  6EF6               	movwf	tblptrl,c
 10648  0014A6  0EFE               	movlw	high _keys
 10649  0014A8  20F4               	addwfc	prodh,w,c
 10650  0014AA  6EF7               	movwf	tblptrh,c
 10651  0014AC                     	if	1	;There are 3 active tblptr bytes
 10652  0014AC  6AF8               	clrf	tblptru,c
 10653  0014AE  0E00               	movlw	low (__mediumconst shr (0+16))
 10654  0014B0  22F8               	addwfc	tblptru,f,c
 10655  0014B2                     	endif
 10656  0014B2  0008               	tblrd		*
 10657  0014B4  50F5               	movf	tablat,w,c
 10658  0014B6  0A42               	xorlw	66
 10659  0014B8  A4D8               	btfss	status,2,c
 10660  0014BA  D012               	goto	i2l8220
 10661  0014BC  0100               	movlb	0	; () banked
 10662  0014BE  51F1               	movf	_creditSize& (0+255),w,b
 10663  0014C0  0100               	movlb	0	; () banked
 10664  0014C2  5DEF               	subwf	_creditIndex& (0+255),w,b
 10665  0014C4  0100               	movlb	0	; () banked
 10666  0014C6  51F0               	movf	(_creditIndex+1)& (0+255),w,b
 10667  0014C8  0A80               	xorlw	128
 10668  0014CA  6E2B               	movwf	??_keypressed& (0+255),c
 10669  0014CC  0100               	movlb	0	; () banked
 10670  0014CE  51F2               	movf	(_creditSize+1)& (0+255),w,b
 10671  0014D0  0A80               	xorlw	128
 10672  0014D2  582B               	subwfb	??_keypressed& (0+255),w,c
 10673  0014D4  B0D8               	btfsc	status,0,c
 10674  0014D6  D004               	goto	i2l8220
 10675                           
 10676                           ; BSR set to: 0
 10677                           ;main.c: 368: creditIndex++;
 10678  0014D8  0100               	movlb	0	; () banked
 10679  0014DA  4BEF               	infsnz	_creditIndex& (0+255),f,b
 10680  0014DC  2BF0               	incf	(_creditIndex+1)& (0+255),f,b
 10681  0014DE  D14E               	goto	i2l348
 10682  0014E0                     i2l8220:
 10683                           
 10684                           ;main.c: 369: else if (keys[keypress]=='A'&&creditIndex>1)
 10685  0014E0  503D               	movf	keypressed@keypress,w,c
 10686  0014E2  0D01               	mullw	1
 10687  0014E4  0EE5               	movlw	low _keys
 10688  0014E6  24F3               	addwf	prodl,w,c
 10689  0014E8  6EF6               	movwf	tblptrl,c
 10690  0014EA  0EFE               	movlw	high _keys
 10691  0014EC  20F4               	addwfc	prodh,w,c
 10692  0014EE  6EF7               	movwf	tblptrh,c
 10693  0014F0                     	if	1	;There are 3 active tblptr bytes
 10694  0014F0  6AF8               	clrf	tblptru,c
 10695  0014F2  0E00               	movlw	low (__mediumconst shr (0+16))
 10696  0014F4  22F8               	addwfc	tblptru,f,c
 10697  0014F6                     	endif
 10698  0014F6  0008               	tblrd		*
 10699  0014F8  50F5               	movf	tablat,w,c
 10700  0014FA  0A41               	xorlw	65
 10701  0014FC  A4D8               	btfss	status,2,c
 10702  0014FE  D010               	goto	i2l8226
 10703  001500  0100               	movlb	0	; () banked
 10704  001502  BFF0               	btfsc	(_creditIndex+1)& (0+255),7,b
 10705  001504  D00D               	goto	i2l8226
 10706  001506  0100               	movlb	0	; () banked
 10707  001508  51F0               	movf	(_creditIndex+1)& (0+255),w,b
 10708  00150A  E105               	bnz	i2u1304_40
 10709  00150C  0E02               	movlw	2
 10710  00150E  0100               	movlb	0	; () banked
 10711  001510  5DEF               	subwf	_creditIndex& (0+255),w,b
 10712  001512  A0D8               	btfss	status,0,c
 10713  001514  D005               	goto	i2l8226
 10714  001516                     i2u1304_40:
 10715                           
 10716                           ; BSR set to: 0
 10717                           ;main.c: 370: creditIndex--;
 10718  001516  0100               	movlb	0	; () banked
 10719  001518  07EF               	decf	_creditIndex& (0+255),f,b
 10720  00151A  A0D8               	btfss	status,0,c
 10721  00151C  07F0               	decf	(_creditIndex+1)& (0+255),f,b
 10722  00151E  D12E               	goto	i2l348
 10723  001520                     i2l8226:
 10724                           
 10725                           ;main.c: 371: else if(keys[keypress]=='D')
 10726  001520  503D               	movf	keypressed@keypress,w,c
 10727  001522  0D01               	mullw	1
 10728  001524  0EE5               	movlw	low _keys
 10729  001526  24F3               	addwf	prodl,w,c
 10730  001528  6EF6               	movwf	tblptrl,c
 10731  00152A  0EFE               	movlw	high _keys
 10732  00152C  20F4               	addwfc	prodh,w,c
 10733  00152E  6EF7               	movwf	tblptrh,c
 10734  001530                     	if	1	;There are 3 active tblptr bytes
 10735  001530  6AF8               	clrf	tblptru,c
 10736  001532  0E00               	movlw	low (__mediumconst shr (0+16))
 10737  001534  22F8               	addwfc	tblptru,f,c
 10738  001536                     	endif
 10739  001536  0008               	tblrd		*
 10740  001538  50F5               	movf	tablat,w,c
 10741  00153A  0A44               	xorlw	68
 10742  00153C  A4D8               	btfss	status,2,c
 10743  00153E  D11E               	goto	i2l348
 10744  001540                     i2l8228:
 10745                           
 10746                           ;main.c: 372: nstate='m';
 10747  001540  0E6D               	movlw	109
 10748  001542  D0FD               	goto	L9
 10749  001544                     i2l8230:
 10750                           
 10751                           ; BSR set to: 0
 10752                           ;main.c: 375: if (keys[keypress]=='1'){
 10753  001544  503D               	movf	keypressed@keypress,w,c
 10754  001546  0D01               	mullw	1
 10755  001548  0EE5               	movlw	low _keys
 10756  00154A  24F3               	addwf	prodl,w,c
 10757  00154C  6EF6               	movwf	tblptrl,c
 10758  00154E  0EFE               	movlw	high _keys
 10759  001550  20F4               	addwfc	prodh,w,c
 10760  001552  6EF7               	movwf	tblptrh,c
 10761  001554                     	if	1	;There are 3 active tblptr bytes
 10762  001554  6AF8               	clrf	tblptru,c
 10763  001556  0E00               	movlw	low (__mediumconst shr (0+16))
 10764  001558  22F8               	addwfc	tblptru,f,c
 10765  00155A                     	endif
 10766  00155A  0008               	tblrd		*
 10767  00155C  50F5               	movf	tablat,w,c
 10768  00155E  0A31               	xorlw	49
 10769  001560  A4D8               	btfss	status,2,c
 10770  001562  D012               	goto	i2l8236
 10771                           
 10772                           ; BSR set to: 0
 10773                           ;main.c: 376: eskaNoCap++;
 10774  001564  0100               	movlb	0	; () banked
 10775  001566  4BCF               	infsnz	_eskaNoCap& (0+255),f,b
 10776  001568  2BD0               	incf	(_eskaNoCap+1)& (0+255),f,b
 10777                           
 10778                           ; BSR set to: 0
 10779                           ;main.c: 377: eskaNoCap%=100;
 10780  00156A  C0CF  F001         	movff	_eskaNoCap,i2___awmod@dividend
 10781  00156E  C0D0  F002         	movff	_eskaNoCap+1,i2___awmod@dividend+1
 10782  001572  0E00               	movlw	0
 10783  001574  6E04               	movwf	i2___awmod@divisor+1,c
 10784  001576  0E64               	movlw	100
 10785  001578  6E03               	movwf	i2___awmod@divisor,c
 10786  00157A  EC10  F019         	call	i2___awmod	;wreg free
 10787  00157E  C001  F0CF         	movff	?i2___awmod,_eskaNoCap
 10788  001582  C002  F0D0         	movff	?i2___awmod+1,_eskaNoCap+1
 10789                           
 10790                           ;main.c: 378: }
 10791  001586  D0FA               	goto	i2l348
 10792  001588                     i2l8236:
 10793                           
 10794                           ;main.c: 379: else if (keys[keypress]=='2'){
 10795  001588  503D               	movf	keypressed@keypress,w,c
 10796  00158A  0D01               	mullw	1
 10797  00158C  0EE5               	movlw	low _keys
 10798  00158E  24F3               	addwf	prodl,w,c
 10799  001590  6EF6               	movwf	tblptrl,c
 10800  001592  0EFE               	movlw	high _keys
 10801  001594  20F4               	addwfc	prodh,w,c
 10802  001596  6EF7               	movwf	tblptrh,c
 10803  001598                     	if	1	;There are 3 active tblptr bytes
 10804  001598  6AF8               	clrf	tblptru,c
 10805  00159A  0E00               	movlw	low (__mediumconst shr (0+16))
 10806  00159C  22F8               	addwfc	tblptru,f,c
 10807  00159E                     	endif
 10808  00159E  0008               	tblrd		*
 10809  0015A0  50F5               	movf	tablat,w,c
 10810  0015A2  0A32               	xorlw	50
 10811  0015A4  A4D8               	btfss	status,2,c
 10812  0015A6  D012               	goto	i2l8242
 10813                           
 10814                           ;main.c: 380: eskaWCap++;
 10815  0015A8  0100               	movlb	0	; () banked
 10816  0015AA  4BD1               	infsnz	_eskaWCap& (0+255),f,b
 10817  0015AC  2BD2               	incf	(_eskaWCap+1)& (0+255),f,b
 10818                           
 10819                           ; BSR set to: 0
 10820                           ;main.c: 381: eskaWCap%=100;
 10821  0015AE  C0D1  F001         	movff	_eskaWCap,i2___awmod@dividend
 10822  0015B2  C0D2  F002         	movff	_eskaWCap+1,i2___awmod@dividend+1
 10823  0015B6  0E00               	movlw	0
 10824  0015B8  6E04               	movwf	i2___awmod@divisor+1,c
 10825  0015BA  0E64               	movlw	100
 10826  0015BC  6E03               	movwf	i2___awmod@divisor,c
 10827  0015BE  EC10  F019         	call	i2___awmod	;wreg free
 10828  0015C2  C001  F0D1         	movff	?i2___awmod,_eskaWCap
 10829  0015C6  C002  F0D2         	movff	?i2___awmod+1,_eskaWCap+1
 10830                           
 10831                           ;main.c: 382: }
 10832  0015CA  D0D8               	goto	i2l348
 10833  0015CC                     i2l8242:
 10834                           
 10835                           ;main.c: 383: else if (keys[keypress]=='4'){
 10836  0015CC  503D               	movf	keypressed@keypress,w,c
 10837  0015CE  0D01               	mullw	1
 10838  0015D0  0EE5               	movlw	low _keys
 10839  0015D2  24F3               	addwf	prodl,w,c
 10840  0015D4  6EF6               	movwf	tblptrl,c
 10841  0015D6  0EFE               	movlw	high _keys
 10842  0015D8  20F4               	addwfc	prodh,w,c
 10843  0015DA  6EF7               	movwf	tblptrh,c
 10844  0015DC                     	if	1	;There are 3 active tblptr bytes
 10845  0015DC  6AF8               	clrf	tblptru,c
 10846  0015DE  0E00               	movlw	low (__mediumconst shr (0+16))
 10847  0015E0  22F8               	addwfc	tblptru,f,c
 10848  0015E2                     	endif
 10849  0015E2  0008               	tblrd		*
 10850  0015E4  50F5               	movf	tablat,w,c
 10851  0015E6  0A34               	xorlw	52
 10852  0015E8  A4D8               	btfss	status,2,c
 10853  0015EA  D012               	goto	i2l8248
 10854                           
 10855                           ;main.c: 384: yopNoCap++;
 10856  0015EC  0100               	movlb	0	; () banked
 10857  0015EE  4BDD               	infsnz	_yopNoCap& (0+255),f,b
 10858  0015F0  2BDE               	incf	(_yopNoCap+1)& (0+255),f,b
 10859                           
 10860                           ; BSR set to: 0
 10861                           ;main.c: 385: yopNoCap%=100;
 10862  0015F2  C0DD  F001         	movff	_yopNoCap,i2___awmod@dividend
 10863  0015F6  C0DE  F002         	movff	_yopNoCap+1,i2___awmod@dividend+1
 10864  0015FA  0E00               	movlw	0
 10865  0015FC  6E04               	movwf	i2___awmod@divisor+1,c
 10866  0015FE  0E64               	movlw	100
 10867  001600  6E03               	movwf	i2___awmod@divisor,c
 10868  001602  EC10  F019         	call	i2___awmod	;wreg free
 10869  001606  C001  F0DD         	movff	?i2___awmod,_yopNoCap
 10870  00160A  C002  F0DE         	movff	?i2___awmod+1,_yopNoCap+1
 10871                           
 10872                           ;main.c: 386: }
 10873  00160E  D0B6               	goto	i2l348
 10874  001610                     i2l8248:
 10875                           
 10876                           ;main.c: 387: else if (keys[keypress]=='5'){
 10877  001610  503D               	movf	keypressed@keypress,w,c
 10878  001612  0D01               	mullw	1
 10879  001614  0EE5               	movlw	low _keys
 10880  001616  24F3               	addwf	prodl,w,c
 10881  001618  6EF6               	movwf	tblptrl,c
 10882  00161A  0EFE               	movlw	high _keys
 10883  00161C  20F4               	addwfc	prodh,w,c
 10884  00161E  6EF7               	movwf	tblptrh,c
 10885  001620                     	if	1	;There are 3 active tblptr bytes
 10886  001620  6AF8               	clrf	tblptru,c
 10887  001622  0E00               	movlw	low (__mediumconst shr (0+16))
 10888  001624  22F8               	addwfc	tblptru,f,c
 10889  001626                     	endif
 10890  001626  0008               	tblrd		*
 10891  001628  50F5               	movf	tablat,w,c
 10892  00162A  0A35               	xorlw	53
 10893  00162C  A4D8               	btfss	status,2,c
 10894  00162E  D012               	goto	i2l8254
 10895                           
 10896                           ;main.c: 388: yopWCap++;
 10897  001630  0100               	movlb	0	; () banked
 10898  001632  4BDF               	infsnz	_yopWCap& (0+255),f,b
 10899  001634  2BE0               	incf	(_yopWCap+1)& (0+255),f,b
 10900                           
 10901                           ; BSR set to: 0
 10902                           ;main.c: 389: yopWCap%=100;
 10903  001636  C0DF  F001         	movff	_yopWCap,i2___awmod@dividend
 10904  00163A  C0E0  F002         	movff	_yopWCap+1,i2___awmod@dividend+1
 10905  00163E  0E00               	movlw	0
 10906  001640  6E04               	movwf	i2___awmod@divisor+1,c
 10907  001642  0E64               	movlw	100
 10908  001644  6E03               	movwf	i2___awmod@divisor,c
 10909  001646  EC10  F019         	call	i2___awmod	;wreg free
 10910  00164A  C001  F0DF         	movff	?i2___awmod,_yopWCap
 10911  00164E  C002  F0E0         	movff	?i2___awmod+1,_yopWCap+1
 10912                           
 10913                           ;main.c: 390: }
 10914  001652  D094               	goto	i2l348
 10915  001654                     i2l8254:
 10916                           
 10917                           ;main.c: 391: else if (keys[keypress]=='7'||keys[keypress]=='8')
 10918  001654  503D               	movf	keypressed@keypress,w,c
 10919  001656  0D01               	mullw	1
 10920  001658  0EE5               	movlw	low _keys
 10921  00165A  24F3               	addwf	prodl,w,c
 10922  00165C  6EF6               	movwf	tblptrl,c
 10923  00165E  0EFE               	movlw	high _keys
 10924  001660  20F4               	addwfc	prodh,w,c
 10925  001662  6EF7               	movwf	tblptrh,c
 10926  001664                     	if	1	;There are 3 active tblptr bytes
 10927  001664  6AF8               	clrf	tblptru,c
 10928  001666  0E00               	movlw	low (__mediumconst shr (0+16))
 10929  001668  22F8               	addwfc	tblptru,f,c
 10930  00166A                     	endif
 10931  00166A  0008               	tblrd		*
 10932  00166C  50F5               	movf	tablat,w,c
 10933  00166E  0A37               	xorlw	55
 10934  001670  B4D8               	btfsc	status,2,c
 10935  001672  D010               	goto	i2l8258
 10936  001674  503D               	movf	keypressed@keypress,w,c
 10937  001676  0D01               	mullw	1
 10938  001678  0EE5               	movlw	low _keys
 10939  00167A  24F3               	addwf	prodl,w,c
 10940  00167C  6EF6               	movwf	tblptrl,c
 10941  00167E  0EFE               	movlw	high _keys
 10942  001680  20F4               	addwfc	prodh,w,c
 10943  001682  6EF7               	movwf	tblptrh,c
 10944  001684                     	if	1	;There are 3 active tblptr bytes
 10945  001684  6AF8               	clrf	tblptru,c
 10946  001686  0E00               	movlw	low (__mediumconst shr (0+16))
 10947  001688  22F8               	addwfc	tblptru,f,c
 10948  00168A                     	endif
 10949  00168A  0008               	tblrd		*
 10950  00168C  50F5               	movf	tablat,w,c
 10951  00168E  0A38               	xorlw	56
 10952  001690  A4D8               	btfss	status,2,c
 10953  001692  D074               	goto	i2l348
 10954  001694                     i2l8258:
 10955                           
 10956                           ;main.c: 392: nstate='e';
 10957  001694  0E65               	movlw	101
 10958  001696  D053               	goto	L9
 10959  001698                     i2l8260:
 10960                           
 10961                           ; BSR set to: 0
 10962                           ;main.c: 395: if (keys[keypress]=='B'&&endIndex<endSize)
 10963  001698  503D               	movf	keypressed@keypress,w,c
 10964  00169A  0D01               	mullw	1
 10965  00169C  0EE5               	movlw	low _keys
 10966  00169E  24F3               	addwf	prodl,w,c
 10967  0016A0  6EF6               	movwf	tblptrl,c
 10968  0016A2  0EFE               	movlw	high _keys
 10969  0016A4  20F4               	addwfc	prodh,w,c
 10970  0016A6  6EF7               	movwf	tblptrh,c
 10971  0016A8                     	if	1	;There are 3 active tblptr bytes
 10972  0016A8  6AF8               	clrf	tblptru,c
 10973  0016AA  0E00               	movlw	low (__mediumconst shr (0+16))
 10974  0016AC  22F8               	addwfc	tblptru,f,c
 10975  0016AE                     	endif
 10976  0016AE  0008               	tblrd		*
 10977  0016B0  50F5               	movf	tablat,w,c
 10978  0016B2  0A42               	xorlw	66
 10979  0016B4  A4D8               	btfss	status,2,c
 10980  0016B6  D012               	goto	i2l8266
 10981                           
 10982                           ; BSR set to: 0
 10983  0016B8  0100               	movlb	0	; () banked
 10984  0016BA  51F5               	movf	_endSize& (0+255),w,b
 10985  0016BC  0100               	movlb	0	; () banked
 10986  0016BE  5DF3               	subwf	_endIndex& (0+255),w,b
 10987  0016C0  0100               	movlb	0	; () banked
 10988  0016C2  51F4               	movf	(_endIndex+1)& (0+255),w,b
 10989  0016C4  0A80               	xorlw	128
 10990  0016C6  6E2B               	movwf	??_keypressed& (0+255),c
 10991  0016C8  0100               	movlb	0	; () banked
 10992  0016CA  51F6               	movf	(_endSize+1)& (0+255),w,b
 10993  0016CC  0A80               	xorlw	128
 10994  0016CE  582B               	subwfb	??_keypressed& (0+255),w,c
 10995  0016D0  B0D8               	btfsc	status,0,c
 10996  0016D2  D004               	goto	i2l8266
 10997                           
 10998                           ; BSR set to: 0
 10999                           ;main.c: 396: endIndex++;
 11000  0016D4  0100               	movlb	0	; () banked
 11001  0016D6  4BF3               	infsnz	_endIndex& (0+255),f,b
 11002  0016D8  2BF4               	incf	(_endIndex+1)& (0+255),f,b
 11003  0016DA  D050               	goto	i2l348
 11004  0016DC                     i2l8266:
 11005                           
 11006                           ; BSR set to: 0
 11007                           ;main.c: 397: else if (keys[keypress]=='A'&&endIndex>1)
 11008  0016DC  503D               	movf	keypressed@keypress,w,c
 11009  0016DE  0D01               	mullw	1
 11010  0016E0  0EE5               	movlw	low _keys
 11011  0016E2  24F3               	addwf	prodl,w,c
 11012  0016E4  6EF6               	movwf	tblptrl,c
 11013  0016E6  0EFE               	movlw	high _keys
 11014  0016E8  20F4               	addwfc	prodh,w,c
 11015  0016EA  6EF7               	movwf	tblptrh,c
 11016  0016EC                     	if	1	;There are 3 active tblptr bytes
 11017  0016EC  6AF8               	clrf	tblptru,c
 11018  0016EE  0E00               	movlw	low (__mediumconst shr (0+16))
 11019  0016F0  22F8               	addwfc	tblptru,f,c
 11020  0016F2                     	endif
 11021  0016F2  0008               	tblrd		*
 11022  0016F4  50F5               	movf	tablat,w,c
 11023  0016F6  0A41               	xorlw	65
 11024  0016F8  A4D8               	btfss	status,2,c
 11025  0016FA  D010               	goto	i2l8272
 11026                           
 11027                           ; BSR set to: 0
 11028  0016FC  0100               	movlb	0	; () banked
 11029  0016FE  BFF4               	btfsc	(_endIndex+1)& (0+255),7,b
 11030  001700  D00D               	goto	i2l8272
 11031  001702  0100               	movlb	0	; () banked
 11032  001704  51F4               	movf	(_endIndex+1)& (0+255),w,b
 11033  001706  E105               	bnz	i2u1315_40
 11034  001708  0E02               	movlw	2
 11035  00170A  0100               	movlb	0	; () banked
 11036  00170C  5DF3               	subwf	_endIndex& (0+255),w,b
 11037  00170E  A0D8               	btfss	status,0,c
 11038  001710  D005               	goto	i2l8272
 11039  001712                     i2u1315_40:
 11040                           
 11041                           ; BSR set to: 0
 11042                           ;main.c: 398: endIndex--;
 11043  001712  0100               	movlb	0	; () banked
 11044  001714  07F3               	decf	_endIndex& (0+255),f,b
 11045  001716  A0D8               	btfss	status,0,c
 11046  001718  07F4               	decf	(_endIndex+1)& (0+255),f,b
 11047  00171A  D030               	goto	i2l348
 11048  00171C                     i2l8272:
 11049                           
 11050                           ; BSR set to: 0
 11051                           ;main.c: 399: else if (keys[keypress]=='C')
 11052  00171C  503D               	movf	keypressed@keypress,w,c
 11053  00171E  0D01               	mullw	1
 11054  001720  0EE5               	movlw	low _keys
 11055  001722  24F3               	addwf	prodl,w,c
 11056  001724  6EF6               	movwf	tblptrl,c
 11057  001726  0EFE               	movlw	high _keys
 11058  001728  20F4               	addwfc	prodh,w,c
 11059  00172A  6EF7               	movwf	tblptrh,c
 11060  00172C                     	if	1	;There are 3 active tblptr bytes
 11061  00172C  6AF8               	clrf	tblptru,c
 11062  00172E  0E00               	movlw	low (__mediumconst shr (0+16))
 11063  001730  22F8               	addwfc	tblptru,f,c
 11064  001732                     	endif
 11065  001732  0008               	tblrd		*
 11066  001734  50F5               	movf	tablat,w,c
 11067  001736  0A43               	xorlw	67
 11068  001738  A4D8               	btfss	status,2,c
 11069  00173A  D020               	goto	i2l348
 11070                           
 11071                           ; BSR set to: 0
 11072                           ;main.c: 400: nstate='r';
 11073  00173C  0E72               	movlw	114
 11074  00173E                     L9:
 11075  00173E  0100               	movlb	0	; () banked
 11076  001740  6FED               	movwf	_nstate& (0+255),b
 11077                           
 11078                           ; BSR set to: 0
 11079                           ;main.c: 401: break;
 11080                           
 11081                           ; BSR set to: 0
 11082                           
 11083                           ; BSR set to: 0
 11084  001742  D01C               	goto	i2l348
 11085  001744                     i2l8276:
 11086                           
 11087                           ; BSR set to: 0
 11088                           ;main.c: 403: printf("no page found");
 11089  001744  0ECB               	movlw	low STR_17
 11090  001746  6E23               	movwf	i2printf@f,c
 11091  001748  0EFF               	movlw	high STR_17
 11092  00174A  6E24               	movwf	i2printf@f+1,c
 11093  00174C  EC3C  F01B         	call	i2_printf	;wreg free
 11094                           
 11095                           ;main.c: 405: }
 11096                           
 11097                           ;main.c: 404: break;
 11098  001750  D015               	goto	i2l348
 11099  001752                     i2l8280:
 11100  001752  0100               	movlb	0	; () banked
 11101  001754  51EE               	movf	_state& (0+255),w,b
 11102                           
 11103                           ; Switch size 1, requested type "space"
 11104                           ; Number of cases is 6, Range of values is 99 to 115
 11105                           ; switch strategies available:
 11106                           ; Name         Instructions Cycles
 11107                           ; simple_byte           19    10 (average)
 11108                           ;	Chosen strategy is simple_byte
 11109  001756  0A63               	xorlw	99	; case 99
 11110  001758  B4D8               	btfsc	status,2,c
 11111  00175A  D67B               	goto	i2l8202
 11112  00175C  0A06               	xorlw	6	; case 101
 11113  00175E  B4D8               	btfsc	status,2,c
 11114  001760  D79B               	goto	i2l8260
 11115  001762  0A09               	xorlw	9	; case 108
 11116  001764  B4D8               	btfsc	status,2,c
 11117  001766  D60E               	goto	i2l8174
 11118  001768  0A01               	xorlw	1	; case 109
 11119  00176A  B4D8               	btfsc	status,2,c
 11120  00176C  D564               	goto	i2l8126
 11121  00176E  0A1F               	xorlw	31	; case 114
 11122  001770  B4D8               	btfsc	status,2,c
 11123  001772  D6E6               	goto	i2l8228
 11124  001774  0A01               	xorlw	1	; case 115
 11125  001776  B4D8               	btfsc	status,2,c
 11126  001778  D6E5               	goto	i2l8230
 11127  00177A  D7E4               	goto	i2l8276
 11128  00177C                     i2l348:
 11129                           
 11130                           ;main.c: 406: INT1IF = 0;
 11131  00177C  90F0               	bcf	intcon3,0,c	;volatile
 11132  00177E                     i2l385:
 11133  00177E  C03A  FFF5         	movff	??_keypressed+15,tablat
 11134  001782  C039  FFF8         	movff	??_keypressed+14,tblptru
 11135  001786  C038  FFF7         	movff	??_keypressed+13,tblptrh
 11136  00178A  C037  FFF6         	movff	??_keypressed+12,tblptrl
 11137  00178E  C036  FFF4         	movff	??_keypressed+11,prodh
 11138  001792  C035  FFF3         	movff	??_keypressed+10,prodl
 11139  001796  C034  FFDA         	movff	??_keypressed+9,fsr2h
 11140  00179A  C033  FFD9         	movff	??_keypressed+8,fsr2l
 11141  00179E  C032  FFE2         	movff	??_keypressed+7,fsr1h
 11142  0017A2  C031  FFE1         	movff	??_keypressed+6,fsr1l
 11143  0017A6  C030  FFEA         	movff	??_keypressed+5,fsr0h
 11144  0017AA  C02F  FFE9         	movff	??_keypressed+4,fsr0l
 11145  0017AE  C02E  FFFB         	movff	??_keypressed+3,pclatu
 11146  0017B2  C02D  FFFA         	movff	??_keypressed+2,pclath
 11147  0017B6  927A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11148  0017B8  0011               	retfie		f
 11149  0017BA                     __end_of_keypressed:
 11150                           	opt stack 0
 11151                           tosu	equ	0xFFF
 11152                           tosh	equ	0xFFE
 11153                           tosl	equ	0xFFD
 11154                           pclatu	equ	0xFFB
 11155                           pclath	equ	0xFFA
 11156                           tblptru	equ	0xFF8
 11157                           tblptrh	equ	0xFF7
 11158                           tblptrl	equ	0xFF6
 11159                           tablat	equ	0xFF5
 11160                           prodh	equ	0xFF4
 11161                           prodl	equ	0xFF3
 11162                           intcon	equ	0xFF2
 11163                           intcon2	equ	0xFF1
 11164                           intcon3	equ	0xFF0
 11165                           indf0	equ	0xFEF
 11166                           postinc0	equ	0xFEE
 11167                           fsr0h	equ	0xFEA
 11168                           fsr0l	equ	0xFE9
 11169                           wreg	equ	0xFE8
 11170                           indf1	equ	0xFE7
 11171                           postinc1	equ	0xFE6
 11172                           postdec1	equ	0xFE5
 11173                           fsr1h	equ	0xFE2
 11174                           fsr1l	equ	0xFE1
 11175                           indf2	equ	0xFDF
 11176                           postinc2	equ	0xFDE
 11177                           postdec2	equ	0xFDD
 11178                           fsr2h	equ	0xFDA
 11179                           fsr2l	equ	0xFD9
 11180                           status	equ	0xFD8
 11181                           
 11182 ;; *************** function i2_printf *****************
 11183 ;; Defined at:
 11184 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
 11185 ;; Parameters:    Size  Location     Type
 11186 ;;  f               2   34[COMRAM] PTR const unsigned char 
 11187 ;;		 -> STR_17(14), STR_16(15), STR_15(8), display1(18), 
 11188 ;;		 -> display0(18), 
 11189 ;; Auto vars:     Size  Location     Type
 11190 ;;  printf          4   38[COMRAM] struct __prbuf
 11191 ;;  printf          2   36[COMRAM] PTR void [1]
 11192 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
 11193 ;; Return value:  Size  Location     Type
 11194 ;;                  2   34[COMRAM] int 
 11195 ;; Registers used:
 11196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11197 ;; Tracked objects:
 11198 ;;		On entry : 0/0
 11199 ;;		On exit  : 0/0
 11200 ;;		Unchanged: 0/0
 11201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11202 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11203 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11205 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11206 ;;Total ram usage:        8 bytes
 11207 ;; Hardware stack levels used:    1
 11208 ;; Hardware stack levels required when called:    3
 11209 ;; This function calls:
 11210 ;;		i2__doprnt
 11211 ;; This function is called by:
 11212 ;;		_keypressed
 11213 ;; This function uses a non-reentrant model
 11214 ;;
 11215                           
 11216                           	psect	text34
 11217  003678                     __ptext34:
 11218                           	opt stack 0
 11219  003678                     i2_printf:
 11220                           	opt stack 20
 11221                           
 11222                           ;incstack = 0
 11223  003678  0E00               	movlw	0
 11224  00367A  6E27               	movwf	i2printf@pb,c
 11225  00367C  0E00               	movlw	0
 11226  00367E  6E28               	movwf	i2printf@pb+1,c
 11227  003680  0E00               	movlw	low i2_putch
 11228  003682  6E29               	movwf	i2printf@pb+2,c
 11229  003684  0E38               	movlw	high i2_putch
 11230  003686  6E2A               	movwf	i2printf@pb+3,c
 11231  003688  0E25               	movlw	low (?i2_printf+2)
 11232  00368A  6E25               	movwf	i2printf@ap,c
 11233  00368C  0E00               	movlw	high (?i2_printf+2)
 11234  00368E  6E26               	movwf	i2printf@ap+1,c
 11235                           
 11236                           ;	Return value of i2_printf is never used
 11237  003690  0E27               	movlw	low i2printf@pb
 11238  003692  6E0D               	movwf	i2__doprnt@pb,c
 11239  003694  0E00               	movlw	high i2printf@pb
 11240  003696  6E0E               	movwf	i2__doprnt@pb+1,c
 11241  003698  C023  F00F         	movff	i2printf@f,i2__doprnt@f
 11242  00369C  C024  F010         	movff	i2printf@f+1,i2__doprnt@f+1
 11243  0036A0  0E25               	movlw	low i2printf@ap
 11244  0036A2  6E11               	movwf	i2__doprnt@ap,c
 11245  0036A4  0E00               	movlw	high i2printf@ap
 11246  0036A6  6E12               	movwf	i2__doprnt@ap+1,c
 11247  0036A8  ECCB  F004         	call	i2__doprnt	;wreg free
 11248  0036AC  0012               	return	
 11249  0036AE                     __end_ofi2_printf:
 11250                           	opt stack 0
 11251                           tosu	equ	0xFFF
 11252                           tosh	equ	0xFFE
 11253                           tosl	equ	0xFFD
 11254                           pclatu	equ	0xFFB
 11255                           pclath	equ	0xFFA
 11256                           tblptru	equ	0xFF8
 11257                           tblptrh	equ	0xFF7
 11258                           tblptrl	equ	0xFF6
 11259                           tablat	equ	0xFF5
 11260                           prodh	equ	0xFF4
 11261                           prodl	equ	0xFF3
 11262                           intcon	equ	0xFF2
 11263                           intcon2	equ	0xFF1
 11264                           intcon3	equ	0xFF0
 11265                           indf0	equ	0xFEF
 11266                           postinc0	equ	0xFEE
 11267                           fsr0h	equ	0xFEA
 11268                           fsr0l	equ	0xFE9
 11269                           wreg	equ	0xFE8
 11270                           indf1	equ	0xFE7
 11271                           postinc1	equ	0xFE6
 11272                           postdec1	equ	0xFE5
 11273                           fsr1h	equ	0xFE2
 11274                           fsr1l	equ	0xFE1
 11275                           indf2	equ	0xFDF
 11276                           postinc2	equ	0xFDE
 11277                           postdec2	equ	0xFDD
 11278                           fsr2h	equ	0xFDA
 11279                           fsr2l	equ	0xFD9
 11280                           status	equ	0xFD8
 11281                           
 11282 ;; *************** function i2__doprnt *****************
 11283 ;; Defined at:
 11284 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 11285 ;; Parameters:    Size  Location     Type
 11286 ;;  pb              2   12[COMRAM] PTR struct __prbuf
 11287 ;;		 -> sprintf@pb(4), printf@pb(4), 
 11288 ;;  f               2   14[COMRAM] PTR const unsigned char 
 11289 ;;		 -> STR_17(14), STR_16(15), STR_15(8), STR_14(5), 
 11290 ;;		 -> STR_13(5), STR_12(5), STR_11(5), STR_10(20), 
 11291 ;;		 -> STR_9(20), STR_8(22), STR_7(19), menu(720), 
 11292 ;;		 -> STR_6(15), STR_5(6), STR_4(14), STR_3(12), 
 11293 ;;		 -> STR_2(23), STR_1(23), display1(18), display0(18), 
 11294 ;;  ap              2   16[COMRAM] PTR PTR void 
 11295 ;;		 -> sprintf@ap(2), printf@ap(2), 
 11296 ;; Auto vars:     Size  Location     Type
 11297 ;;  _doprnt         4    0        struct .
 11298 ;;  _doprnt         2   31[COMRAM] int 
 11299 ;;  _doprnt         2   28[COMRAM] unsigned int 
 11300 ;;  _doprnt         2   26[COMRAM] PTR const unsigned char 
 11301 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_18(7), 
 11302 ;;		 -> _doprnt@c(1), menu(720), ndisplay1(18), ndisplay0(18), 
 11303 ;;  _doprnt         2   24[COMRAM] unsigned int 
 11304 ;;  _doprnt         1   33[COMRAM] char 
 11305 ;;  _doprnt         1   30[COMRAM] unsigned char 
 11306 ;;  _doprnt         1   23[COMRAM] char 
 11307 ;;  _doprnt         1   22[COMRAM] unsigned char 
 11308 ;; Return value:  Size  Location     Type
 11309 ;;                  2   12[COMRAM] int 
 11310 ;; Registers used:
 11311 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11312 ;; Tracked objects:
 11313 ;;		On entry : 0/0
 11314 ;;		On exit  : 0/0
 11315 ;;		Unchanged: 0/0
 11316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11317 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11318 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11319 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11320 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11321 ;;Total ram usage:       22 bytes
 11322 ;; Hardware stack levels used:    1
 11323 ;; Hardware stack levels required when called:    2
 11324 ;; This function calls:
 11325 ;;		Absolute function
 11326 ;;		i2___lwdiv
 11327 ;;		i2___lwmod
 11328 ;;		i2___wmul
 11329 ;;		i2_isdigit
 11330 ;;		i2_putch
 11331 ;; This function is called by:
 11332 ;;		i2_printf
 11333 ;; This function uses a non-reentrant model
 11334 ;;
 11335                           
 11336                           	psect	text35
 11337  000996                     __ptext35:
 11338                           	opt stack 0
 11339  000996                     i2__doprnt:
 11340                           	opt stack 20
 11341                           
 11342                           ;doprnt.c: 499: signed char c;
 11343                           ;doprnt.c: 501: int width;
 11344                           ;doprnt.c: 506: signed char prec;
 11345                           ;doprnt.c: 508: unsigned char flag;
 11346                           ;doprnt.c: 523: union {
 11347                           ;doprnt.c: 524: unsigned long vd;
 11348                           ;doprnt.c: 525: double integ;
 11349                           ;doprnt.c: 526: } tmpval;
 11350                           ;doprnt.c: 528: unsigned int val;
 11351                           ;doprnt.c: 529: unsigned len;
 11352                           ;doprnt.c: 530: const char * cp;
 11353                           ;doprnt.c: 536: while(c = *f++) {
 11354                           
 11355                           ;incstack = 0
 11356  000996  EFD6  F008         	goto	i2l7960
 11357  00099A                     i2l7754:
 11358                           
 11359                           ;doprnt.c: 538: if(c != '%')
 11360  00099A  0E25               	movlw	37
 11361  00099C  1822               	xorwf	i2__doprnt@c,w,c
 11362  00099E  B4D8               	btfsc	status,2,c
 11363  0009A0  D036               	goto	i2l7764
 11364                           
 11365                           ;doprnt.c: 540: {
 11366                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 11367  0009A2  EE20 F002          	lfsr	2,2
 11368  0009A6  500D               	movf	i2__doprnt@pb,w,c
 11369  0009A8  26D9               	addwf	fsr2l,f,c
 11370  0009AA  500E               	movf	i2__doprnt@pb+1,w,c
 11371  0009AC  22DA               	addwfc	fsr2h,f,c
 11372  0009AE  50DE               	movf	postinc2,w,c
 11373  0009B0  10DE               	iorwf	postinc2,w,c
 11374  0009B2  B4D8               	btfsc	status,2,c
 11375  0009B4  D016               	goto	i2l7760
 11376  0009B6  EE20 F002          	lfsr	2,2
 11377  0009BA  500D               	movf	i2__doprnt@pb,w,c
 11378  0009BC  26D9               	addwf	fsr2l,f,c
 11379  0009BE  500E               	movf	i2__doprnt@pb+1,w,c
 11380  0009C0  22DA               	addwfc	fsr2h,f,c
 11381  0009C2  CFDE F013          	movff	postinc2,??i2__doprnt
 11382  0009C6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11383  0009CA  D801               	call	i2u1209_48
 11384  0009CC  D3EF               	goto	i2l7960
 11385  0009CE                     i2u1209_48:
 11386  0009CE  0005               	push	
 11387  0009D0  6EFA               	movwf	pclath,c
 11388  0009D2  5013               	movf	??i2__doprnt,w,c
 11389  0009D4  6EFD               	movwf	tosl,c
 11390  0009D6  5014               	movf	??i2__doprnt+1,w,c
 11391  0009D8  6EFE               	movwf	tosh,c
 11392  0009DA  6AFF               	clrf	tosu,c
 11393  0009DC  50FA               	movf	pclath,w,c
 11394  0009DE  5022               	movf	i2__doprnt@c,w,c
 11395  0009E0  0012               	return		;indir
 11396  0009E2                     i2l7760:
 11397  0009E2  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11398  0009E6  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11399  0009EA  CFDE F013          	movff	postinc2,??i2__doprnt
 11400  0009EE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11401  0009F2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11402  0009F6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11403  0009FA  C022  FFDF         	movff	i2__doprnt@c,indf2
 11404  0009FE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11405  000A02  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11406  000A06  2ADE               	incf	postinc2,f,c
 11407  000A08  0E00               	movlw	0
 11408  000A0A  22DD               	addwfc	postdec2,f,c
 11409                           
 11410                           ;doprnt.c: 542: continue;
 11411  000A0C  D3CF               	goto	i2l7960
 11412  000A0E                     i2l7764:
 11413                           
 11414                           ;doprnt.c: 543: }
 11415                           ;doprnt.c: 546: width = 0;
 11416  000A0E  0E00               	movlw	0
 11417  000A10  6E21               	movwf	i2__doprnt@width+1,c
 11418  000A12  0E00               	movlw	0
 11419  000A14  6E20               	movwf	i2__doprnt@width,c
 11420                           
 11421                           ;doprnt.c: 548: flag = 0;
 11422  000A16  0E00               	movlw	0
 11423  000A18  6E1F               	movwf	i2__doprnt@flag,c
 11424                           
 11425                           ;doprnt.c: 551: switch(*f) {
 11426                           
 11427                           ;doprnt.c: 550: for(;;) {
 11428  000A1A  D003               	goto	i2l7770
 11429  000A1C                     i2l7766:
 11430                           
 11431                           ;doprnt.c: 580: flag |= 0x04;
 11432  000A1C  841F               	bsf	i2__doprnt@flag,2,c
 11433                           
 11434                           ;doprnt.c: 581: f++;
 11435  000A1E  4A0F               	infsnz	i2__doprnt@f,f,c
 11436  000A20  2A10               	incf	i2__doprnt@f+1,f,c
 11437  000A22                     i2l7770:
 11438  000A22  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 11439  000A26  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 11440  000A2A  0E00               	movlw	low (__mediumconst shr (0+16))
 11441  000A2C  6EF8               	movwf	tblptru,c
 11442  000A2E  0E0F               	movlw	(high __ramtop+-1)
 11443  000A30  64F7               	cpfsgt	tblptrh,c
 11444  000A32  D003               	bra	i2u1210_47
 11445  000A34  0008               	tblrd		*
 11446  000A36  50F5               	movf	tablat,w,c
 11447  000A38  D005               	bra	i2u1210_40
 11448  000A3A                     i2u1210_47:
 11449  000A3A  CFF6 FFE9          	movff	tblptrl,fsr0l
 11450  000A3E  CFF7 FFEA          	movff	tblptrh,fsr0h
 11451  000A42  50EF               	movf	indf0,w,c
 11452  000A44                     i2u1210_40:
 11453                           
 11454                           ; Switch size 1, requested type "space"
 11455                           ; Number of cases is 1, Range of values is 48 to 48
 11456                           ; switch strategies available:
 11457                           ; Name         Instructions Cycles
 11458                           ; simple_byte            4     3 (average)
 11459                           ;	Chosen strategy is simple_byte
 11460  000A44  0A30               	xorlw	48	; case 48
 11461  000A46  B4D8               	btfsc	status,2,c
 11462  000A48  D7E9               	goto	i2l7766
 11463                           
 11464                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11465                           
 11466                           ;doprnt.c: 586: }
 11467                           
 11468                           ;doprnt.c: 585: break;
 11469  000A4A  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 11470  000A4E  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 11471  000A52  0E00               	movlw	low (__mediumconst shr (0+16))
 11472  000A54  6EF8               	movwf	tblptru,c
 11473  000A56  0E0F               	movlw	(high __ramtop+-1)
 11474  000A58  64F7               	cpfsgt	tblptrh,c
 11475  000A5A  D003               	bra	i2u1211_47
 11476  000A5C  0008               	tblrd		*
 11477  000A5E  50F5               	movf	tablat,w,c
 11478  000A60  D005               	bra	i2u1211_40
 11479  000A62                     i2u1211_47:
 11480  000A62  CFF6 FFE9          	movff	tblptrl,fsr0l
 11481  000A66  CFF7 FFEA          	movff	tblptrh,fsr0h
 11482  000A6A  50EF               	movf	indf0,w,c
 11483  000A6C                     i2u1211_40:
 11484  000A6C  ECD4  F01B         	call	i2_isdigit
 11485  000A70  A0D8               	btfss	status,0,c
 11486  000A72  D154               	goto	i2l7836
 11487                           
 11488                           ;doprnt.c: 598: width = 0;
 11489  000A74  0E00               	movlw	0
 11490  000A76  6E21               	movwf	i2__doprnt@width+1,c
 11491  000A78  0E00               	movlw	0
 11492  000A7A  6E20               	movwf	i2__doprnt@width,c
 11493  000A7C                     i2l7776:
 11494                           
 11495                           ;doprnt.c: 600: width *= 10;
 11496  000A7C  C020  F001         	movff	i2__doprnt@width,i2___wmul@multiplier
 11497  000A80  C021  F002         	movff	i2__doprnt@width+1,i2___wmul@multiplier+1
 11498  000A84  0E00               	movlw	0
 11499  000A86  6E04               	movwf	i2___wmul@multiplicand+1,c
 11500  000A88  0E0A               	movlw	10
 11501  000A8A  6E03               	movwf	i2___wmul@multiplicand,c
 11502  000A8C  ECB2  F01B         	call	i2___wmul	;wreg free
 11503  000A90  C001  F020         	movff	?i2___wmul,i2__doprnt@width
 11504  000A94  C002  F021         	movff	?i2___wmul+1,i2__doprnt@width+1
 11505                           
 11506                           ;doprnt.c: 601: width += *f++ - '0';
 11507  000A98  0ED0               	movlw	208
 11508  000A9A  6E13               	movwf	??i2__doprnt& (0+255),c
 11509  000A9C  0EFF               	movlw	255
 11510  000A9E  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 11511  000AA0  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 11512  000AA4  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 11513  000AA8  0E00               	movlw	low (__mediumconst shr (0+16))
 11514  000AAA  6EF8               	movwf	tblptru,c
 11515  000AAC  0E0F               	movlw	(high __ramtop+-1)
 11516  000AAE  64F7               	cpfsgt	tblptrh,c
 11517  000AB0  D003               	bra	i2u1213_47
 11518  000AB2  0008               	tblrd		*
 11519  000AB4  50F5               	movf	tablat,w,c
 11520  000AB6  D005               	bra	i2u1213_40
 11521  000AB8                     i2u1213_47:
 11522  000AB8  CFF6 FFE9          	movff	tblptrl,fsr0l
 11523  000ABC  CFF7 FFEA          	movff	tblptrh,fsr0h
 11524  000AC0  50EF               	movf	indf0,w,c
 11525  000AC2                     i2u1213_40:
 11526  000AC2  6E15               	movwf	(??i2__doprnt+2)& (0+255),c
 11527  000AC4  6A16               	clrf	(??i2__doprnt+3)& (0+255),c
 11528  000AC6  5013               	movf	??i2__doprnt,w,c
 11529  000AC8  2615               	addwf	??i2__doprnt+2,f,c
 11530  000ACA  5014               	movf	??i2__doprnt+1,w,c
 11531  000ACC  2216               	addwfc	??i2__doprnt+3,f,c
 11532  000ACE  5015               	movf	??i2__doprnt+2,w,c
 11533  000AD0  2620               	addwf	i2__doprnt@width,f,c
 11534  000AD2  5016               	movf	??i2__doprnt+3,w,c
 11535  000AD4  2221               	addwfc	i2__doprnt@width+1,f,c
 11536  000AD6  4A0F               	infsnz	i2__doprnt@f,f,c
 11537  000AD8  2A10               	incf	i2__doprnt@f+1,f,c
 11538                           
 11539                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11540  000ADA  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 11541  000ADE  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 11542  000AE2  0E00               	movlw	low (__mediumconst shr (0+16))
 11543  000AE4  6EF8               	movwf	tblptru,c
 11544  000AE6  0E0F               	movlw	(high __ramtop+-1)
 11545  000AE8  64F7               	cpfsgt	tblptrh,c
 11546  000AEA  D003               	bra	i2u1214_47
 11547  000AEC  0008               	tblrd		*
 11548  000AEE  50F5               	movf	tablat,w,c
 11549  000AF0  D005               	bra	i2u1214_40
 11550  000AF2                     i2u1214_47:
 11551  000AF2  CFF6 FFE9          	movff	tblptrl,fsr0l
 11552  000AF6  CFF7 FFEA          	movff	tblptrh,fsr0h
 11553  000AFA  50EF               	movf	indf0,w,c
 11554  000AFC                     i2u1214_40:
 11555  000AFC  ECD4  F01B         	call	i2_isdigit
 11556  000B00  A0D8               	btfss	status,0,c
 11557  000B02  D10C               	goto	i2l7836
 11558  000B04  D7BB               	goto	i2l7776
 11559  000B06                     i2l7784:
 11560                           
 11561                           ;doprnt.c: 721: flag |= 0x80;
 11562  000B06  8E1F               	bsf	i2__doprnt@flag,7,c
 11563                           
 11564                           ;doprnt.c: 723: break;
 11565  000B08  D135               	goto	i2l503
 11566  000B0A                     i2l7786:
 11567                           
 11568                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11569  000B0A  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 11570  000B0E  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 11571  000B12  CFDF F013          	movff	indf2,??i2__doprnt
 11572  000B16  0E02               	movlw	2
 11573  000B18  26DE               	addwf	postinc2,f,c
 11574  000B1A  CFDF F014          	movff	indf2,??i2__doprnt+1
 11575  000B1E  0E00               	movlw	0
 11576  000B20  22DD               	addwfc	postdec2,f,c
 11577  000B22  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11578  000B26  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11579  000B2A  CFDE F01B          	movff	postinc2,i2__doprnt@cp
 11580  000B2E  CFDD F01C          	movff	postdec2,i2__doprnt@cp+1
 11581                           
 11582                           ;doprnt.c: 740: if(!cp)
 11583  000B32  501B               	movf	i2__doprnt@cp,w,c
 11584  000B34  101C               	iorwf	i2__doprnt@cp+1,w,c
 11585  000B36  A4D8               	btfss	status,2,c
 11586  000B38  D004               	goto	i2l7792
 11587                           
 11588                           ;doprnt.c: 741: cp = "(null)";
 11589  000B3A  0EED               	movlw	low STR_18
 11590  000B3C  6E1B               	movwf	i2__doprnt@cp,c
 11591  000B3E  0EFF               	movlw	high STR_18
 11592  000B40  6E1C               	movwf	i2__doprnt@cp+1,c
 11593  000B42                     i2l7792:
 11594                           
 11595                           ;doprnt.c: 745: len = 0;
 11596  000B42  0E00               	movlw	0
 11597  000B44  6E1A               	movwf	i2__doprnt@len+1,c
 11598  000B46  0E00               	movlw	0
 11599  000B48  6E19               	movwf	i2__doprnt@len,c
 11600                           
 11601                           ;doprnt.c: 746: while(cp[len])
 11602  000B4A  D002               	goto	i2l7796
 11603  000B4C                     i2l7794:
 11604                           
 11605                           ;doprnt.c: 747: len++;
 11606  000B4C  4A19               	infsnz	i2__doprnt@len,f,c
 11607  000B4E  2A1A               	incf	i2__doprnt@len+1,f,c
 11608  000B50                     i2l7796:
 11609  000B50  5019               	movf	i2__doprnt@len,w,c
 11610  000B52  241B               	addwf	i2__doprnt@cp,w,c
 11611  000B54  6E13               	movwf	??i2__doprnt& (0+255),c
 11612  000B56  501A               	movf	i2__doprnt@len+1,w,c
 11613  000B58  201C               	addwfc	i2__doprnt@cp+1,w,c
 11614  000B5A  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 11615  000B5C  C013  FFF6         	movff	??i2__doprnt,tblptrl
 11616  000B60  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 11617  000B64  0E00               	movlw	low (__mediumconst shr (0+16))
 11618  000B66  6EF8               	movwf	tblptru,c
 11619  000B68  0E0F               	movlw	(high __ramtop+-1)
 11620  000B6A  64F7               	cpfsgt	tblptrh,c
 11621  000B6C  D003               	bra	i2u1217_47
 11622  000B6E  0008               	tblrd		*
 11623  000B70  50F5               	movf	tablat,w,c
 11624  000B72  D005               	bra	i2u1217_40
 11625  000B74                     i2u1217_47:
 11626  000B74  CFF6 FFE9          	movff	tblptrl,fsr0l
 11627  000B78  CFF7 FFEA          	movff	tblptrh,fsr0h
 11628  000B7C  50EF               	movf	indf0,w,c
 11629  000B7E                     i2u1217_40:
 11630  000B7E  0900               	iorlw	0
 11631  000B80  A4D8               	btfss	status,2,c
 11632  000B82  D7E4               	goto	i2l7794
 11633  000B84                     i2l7798:
 11634                           
 11635                           ;doprnt.c: 757: if(width > len)
 11636  000B84  5020               	movf	i2__doprnt@width,w,c
 11637  000B86  5C19               	subwf	i2__doprnt@len,w,c
 11638  000B88  5021               	movf	i2__doprnt@width+1,w,c
 11639  000B8A  581A               	subwfb	i2__doprnt@len+1,w,c
 11640  000B8C  B0D8               	btfsc	status,0,c
 11641  000B8E  D005               	goto	i2l7802
 11642                           
 11643                           ;doprnt.c: 758: width -= len;
 11644  000B90  5019               	movf	i2__doprnt@len,w,c
 11645  000B92  5E20               	subwf	i2__doprnt@width,f,c
 11646  000B94  501A               	movf	i2__doprnt@len+1,w,c
 11647  000B96  5A21               	subwfb	i2__doprnt@width+1,f,c
 11648  000B98  D03A               	goto	i2l7812
 11649  000B9A                     i2l7802:
 11650                           
 11651                           ;doprnt.c: 759: else
 11652                           ;doprnt.c: 760: width = 0;
 11653  000B9A  0E00               	movlw	0
 11654  000B9C  6E21               	movwf	i2__doprnt@width+1,c
 11655  000B9E  0E00               	movlw	0
 11656  000BA0  6E20               	movwf	i2__doprnt@width,c
 11657                           
 11658                           ;doprnt.c: 764: while(width--)
 11659  000BA2  D035               	goto	i2l7812
 11660  000BA4                     i2l7804:
 11661                           
 11662                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 11663  000BA4  EE20 F002          	lfsr	2,2
 11664  000BA8  500D               	movf	i2__doprnt@pb,w,c
 11665  000BAA  26D9               	addwf	fsr2l,f,c
 11666  000BAC  500E               	movf	i2__doprnt@pb+1,w,c
 11667  000BAE  22DA               	addwfc	fsr2h,f,c
 11668  000BB0  50DE               	movf	postinc2,w,c
 11669  000BB2  10DE               	iorwf	postinc2,w,c
 11670  000BB4  B4D8               	btfsc	status,2,c
 11671  000BB6  D016               	goto	i2l7808
 11672  000BB8  EE20 F002          	lfsr	2,2
 11673  000BBC  500D               	movf	i2__doprnt@pb,w,c
 11674  000BBE  26D9               	addwf	fsr2l,f,c
 11675  000BC0  500E               	movf	i2__doprnt@pb+1,w,c
 11676  000BC2  22DA               	addwfc	fsr2h,f,c
 11677  000BC4  CFDE F013          	movff	postinc2,??i2__doprnt
 11678  000BC8  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11679  000BCC  D801               	call	i2u1221_48
 11680  000BCE  D01F               	goto	i2l7812
 11681  000BD0                     i2u1221_48:
 11682  000BD0  0005               	push	
 11683  000BD2  6EFA               	movwf	pclath,c
 11684  000BD4  5013               	movf	??i2__doprnt,w,c
 11685  000BD6  6EFD               	movwf	tosl,c
 11686  000BD8  5014               	movf	??i2__doprnt+1,w,c
 11687  000BDA  6EFE               	movwf	tosh,c
 11688  000BDC  6AFF               	clrf	tosu,c
 11689  000BDE  50FA               	movf	pclath,w,c
 11690  000BE0  0E20               	movlw	32
 11691  000BE2  0012               	return		;indir
 11692  000BE4                     i2l7808:
 11693  000BE4  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11694  000BE8  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11695  000BEC  CFDE F013          	movff	postinc2,??i2__doprnt
 11696  000BF0  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11697  000BF4  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11698  000BF8  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11699  000BFC  0E20               	movlw	32
 11700  000BFE  6EDF               	movwf	indf2,c
 11701  000C00  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11702  000C04  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11703  000C08  2ADE               	incf	postinc2,f,c
 11704  000C0A  0E00               	movlw	0
 11705  000C0C  22DD               	addwfc	postdec2,f,c
 11706  000C0E                     i2l7812:
 11707  000C0E  0620               	decf	i2__doprnt@width,f,c
 11708  000C10  A0D8               	btfss	status,0,c
 11709  000C12  0621               	decf	i2__doprnt@width+1,f,c
 11710  000C14  2820               	incf	i2__doprnt@width,w,c
 11711  000C16  E1C6               	bnz	i2l7804
 11712  000C18  2821               	incf	i2__doprnt@width+1,w,c
 11713  000C1A  B4D8               	btfsc	status,2,c
 11714  000C1C  D05B               	goto	i2l7826
 11715  000C1E  D7C2               	goto	i2l7804
 11716  000C20                     i2l7814:
 11717                           
 11718                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 11719  000C20  EE20 F002          	lfsr	2,2
 11720  000C24  500D               	movf	i2__doprnt@pb,w,c
 11721  000C26  26D9               	addwf	fsr2l,f,c
 11722  000C28  500E               	movf	i2__doprnt@pb+1,w,c
 11723  000C2A  22DA               	addwfc	fsr2h,f,c
 11724  000C2C  50DE               	movf	postinc2,w,c
 11725  000C2E  10DE               	iorwf	postinc2,w,c
 11726  000C30  B4D8               	btfsc	status,2,c
 11727  000C32  D029               	goto	i2l7820
 11728  000C34  EE20 F002          	lfsr	2,2
 11729  000C38  500D               	movf	i2__doprnt@pb,w,c
 11730  000C3A  26D9               	addwf	fsr2l,f,c
 11731  000C3C  500E               	movf	i2__doprnt@pb+1,w,c
 11732  000C3E  22DA               	addwfc	fsr2h,f,c
 11733  000C40  CFDE F013          	movff	postinc2,??i2__doprnt
 11734  000C44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11735  000C48  D801               	call	i2u1224_48
 11736  000C4A  D01A               	goto	i2l7818
 11737  000C4C                     i2u1224_48:
 11738  000C4C  0005               	push	
 11739  000C4E  6EFA               	movwf	pclath,c
 11740  000C50  5013               	movf	??i2__doprnt,w,c
 11741  000C52  6EFD               	movwf	tosl,c
 11742  000C54  5014               	movf	??i2__doprnt+1,w,c
 11743  000C56  6EFE               	movwf	tosh,c
 11744  000C58  6AFF               	clrf	tosu,c
 11745  000C5A  50FA               	movf	pclath,w,c
 11746  000C5C  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 11747  000C60  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 11748  000C64  0E00               	movlw	low (__mediumconst shr (0+16))
 11749  000C66  6EF8               	movwf	tblptru,c
 11750  000C68  0E0F               	movlw	(high __ramtop+-1)
 11751  000C6A  64F7               	cpfsgt	tblptrh,c
 11752  000C6C  D003               	bra	i2u1225_47
 11753  000C6E  0008               	tblrd		*
 11754  000C70  50F5               	movf	tablat,w,c
 11755  000C72  D005               	bra	i2u1225_40
 11756  000C74                     i2u1225_47:
 11757  000C74  CFF6 FFE9          	movff	tblptrl,fsr0l
 11758  000C78  CFF7 FFEA          	movff	tblptrh,fsr0h
 11759  000C7C  50EF               	movf	indf0,w,c
 11760  000C7E                     i2u1225_40:
 11761  000C7E  0012               	return		;indir
 11762  000C80                     i2l7818:
 11763  000C80  4A1B               	infsnz	i2__doprnt@cp,f,c
 11764  000C82  2A1C               	incf	i2__doprnt@cp+1,f,c
 11765  000C84  D027               	goto	i2l7826
 11766  000C86                     i2l7820:
 11767  000C86  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 11768  000C8A  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 11769  000C8E  0E00               	movlw	low (__mediumconst shr (0+16))
 11770  000C90  6EF8               	movwf	tblptru,c
 11771  000C92  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11772  000C96  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11773  000C9A  CFDE F013          	movff	postinc2,??i2__doprnt
 11774  000C9E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11775  000CA2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11776  000CA6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11777  000CAA  0E0F               	movlw	(high __ramtop+-1)
 11778  000CAC  64F7               	cpfsgt	tblptrh,c
 11779  000CAE  D003               	bra	i2u1226_47
 11780  000CB0  0008               	tblrd		*
 11781  000CB2  50F5               	movf	tablat,w,c
 11782  000CB4  D005               	bra	i2u1226_40
 11783  000CB6                     i2u1226_47:
 11784  000CB6  CFF6 FFE9          	movff	tblptrl,fsr0l
 11785  000CBA  CFF7 FFEA          	movff	tblptrh,fsr0h
 11786  000CBE  50EF               	movf	indf0,w,c
 11787  000CC0                     i2u1226_40:
 11788  000CC0  6EDF               	movwf	indf2,c
 11789  000CC2  4A1B               	infsnz	i2__doprnt@cp,f,c
 11790  000CC4  2A1C               	incf	i2__doprnt@cp+1,f,c
 11791  000CC6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11792  000CCA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11793  000CCE  2ADE               	incf	postinc2,f,c
 11794  000CD0  0E00               	movlw	0
 11795  000CD2  22DD               	addwfc	postdec2,f,c
 11796  000CD4                     i2l7826:
 11797  000CD4  0619               	decf	i2__doprnt@len,f,c
 11798  000CD6  A0D8               	btfss	status,0,c
 11799  000CD8  061A               	decf	i2__doprnt@len+1,f,c
 11800  000CDA  2819               	incf	i2__doprnt@len,w,c
 11801  000CDC  E1A1               	bnz	i2l7814
 11802  000CDE  281A               	incf	i2__doprnt@len+1,w,c
 11803  000CE0  B4D8               	btfsc	status,2,c
 11804  000CE2  D264               	goto	i2l7960
 11805  000CE4  D79D               	goto	i2l7814
 11806  000CE6                     i2l7828:
 11807                           
 11808                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 11809  000CE6  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 11810  000CEA  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 11811  000CEE  CFDF F013          	movff	indf2,??i2__doprnt
 11812  000CF2  0E02               	movlw	2
 11813  000CF4  26DE               	addwf	postinc2,f,c
 11814  000CF6  CFDF F014          	movff	indf2,??i2__doprnt+1
 11815  000CFA  0E00               	movlw	0
 11816  000CFC  22DD               	addwfc	postdec2,f,c
 11817  000CFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11818  000D02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11819  000D06  50DF               	movf	indf2,w,c
 11820  000D08  6E22               	movwf	i2__doprnt@c,c
 11821  000D0A                     i2l7830:
 11822                           
 11823                           ;doprnt.c: 805: cp = (char *)&c;
 11824  000D0A  0E22               	movlw	low i2__doprnt@c
 11825  000D0C  6E1B               	movwf	i2__doprnt@cp,c
 11826  000D0E  0E00               	movlw	high i2__doprnt@c
 11827  000D10  6E1C               	movwf	i2__doprnt@cp+1,c
 11828                           
 11829                           ;doprnt.c: 806: len = 1;
 11830  000D12  0E00               	movlw	0
 11831  000D14  6E1A               	movwf	i2__doprnt@len+1,c
 11832  000D16  0E01               	movlw	1
 11833  000D18  6E19               	movwf	i2__doprnt@len,c
 11834                           
 11835                           ;doprnt.c: 807: goto dostring;
 11836  000D1A  D734               	goto	i2l7798
 11837  000D1C                     i2l7836:
 11838  000D1C  500F               	movf	i2__doprnt@f,w,c
 11839  000D1E  6E13               	movwf	??i2__doprnt& (0+255),c
 11840  000D20  5010               	movf	i2__doprnt@f+1,w,c
 11841  000D22  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 11842  000D24  4A0F               	infsnz	i2__doprnt@f,f,c
 11843  000D26  2A10               	incf	i2__doprnt@f+1,f,c
 11844  000D28  C013  FFF6         	movff	??i2__doprnt,tblptrl
 11845  000D2C  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 11846  000D30  0E00               	movlw	low (__mediumconst shr (0+16))
 11847  000D32  6EF8               	movwf	tblptru,c
 11848  000D34  0E0F               	movlw	(high __ramtop+-1)
 11849  000D36  64F7               	cpfsgt	tblptrh,c
 11850  000D38  D003               	bra	i2u1228_47
 11851  000D3A  0008               	tblrd		*
 11852  000D3C  50F5               	movf	tablat,w,c
 11853  000D3E  D005               	bra	i2u1228_40
 11854  000D40                     i2u1228_47:
 11855  000D40  CFF6 FFE9          	movff	tblptrl,fsr0l
 11856  000D44  CFF7 FFEA          	movff	tblptrh,fsr0h
 11857  000D48  50EF               	movf	indf0,w,c
 11858  000D4A                     i2u1228_40:
 11859  000D4A  6E22               	movwf	i2__doprnt@c,c
 11860  000D4C  5022               	movf	i2__doprnt@c,w,c
 11861                           
 11862                           ; Switch size 1, requested type "space"
 11863                           ; Number of cases is 6, Range of values is 0 to 120
 11864                           ; switch strategies available:
 11865                           ; Name         Instructions Cycles
 11866                           ; simple_byte           19    10 (average)
 11867                           ;	Chosen strategy is simple_byte
 11868  000D4E  0A00               	xorlw	0	; case 0
 11869  000D50  B4D8               	btfsc	status,2,c
 11870  000D52  D248               	goto	i2l7962
 11871  000D54  0A63               	xorlw	99	; case 99
 11872  000D56  B4D8               	btfsc	status,2,c
 11873  000D58  D7C6               	goto	i2l7828
 11874  000D5A  0A07               	xorlw	7	; case 100
 11875  000D5C  B4D8               	btfsc	status,2,c
 11876  000D5E  D00A               	goto	i2l503
 11877  000D60  0A0D               	xorlw	13	; case 105
 11878  000D62  B4D8               	btfsc	status,2,c
 11879  000D64  D007               	goto	i2l503
 11880  000D66  0A1A               	xorlw	26	; case 115
 11881  000D68  B4D8               	btfsc	status,2,c
 11882  000D6A  D6CF               	goto	i2l7786
 11883  000D6C  0A0B               	xorlw	11	; case 120
 11884  000D6E  B4D8               	btfsc	status,2,c
 11885  000D70  D6CA               	goto	i2l7784
 11886  000D72  D7CB               	goto	i2l7830
 11887  000D74                     i2l503:
 11888                           
 11889                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 11890  000D74  BE1F               	btfsc	i2__doprnt@flag,7,c
 11891  000D76  D01D               	goto	i2l7846
 11892                           
 11893                           ;doprnt.c: 1253: {
 11894                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11895  000D78  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 11896  000D7C  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 11897  000D80  CFDF F013          	movff	indf2,??i2__doprnt
 11898  000D84  0E02               	movlw	2
 11899  000D86  26DE               	addwf	postinc2,f,c
 11900  000D88  CFDF F014          	movff	indf2,??i2__doprnt+1
 11901  000D8C  0E00               	movlw	0
 11902  000D8E  22DD               	addwfc	postdec2,f,c
 11903  000D90  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11904  000D94  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11905  000D98  CFDE F01D          	movff	postinc2,i2__doprnt@val
 11906  000D9C  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 11907                           
 11908                           ;doprnt.c: 1261: if((int)val < 0) {
 11909  000DA0  AE1E               	btfss	i2__doprnt@val+1,7,c
 11910  000DA2  D052               	goto	i2l7878
 11911                           
 11912                           ;doprnt.c: 1262: flag |= 0x03;
 11913  000DA4  0E03               	movlw	3
 11914  000DA6  121F               	iorwf	i2__doprnt@flag,f,c
 11915                           
 11916                           ;doprnt.c: 1263: val = -val;
 11917  000DA8  6C1D               	negf	i2__doprnt@val,c
 11918  000DAA  1E1E               	comf	i2__doprnt@val+1,f,c
 11919  000DAC  B0D8               	btfsc	status,0,c
 11920  000DAE  2A1E               	incf	i2__doprnt@val+1,f,c
 11921                           
 11922                           ;doprnt.c: 1264: }
 11923                           ;doprnt.c: 1266: }
 11924  000DB0  D04B               	goto	i2l7878
 11925  000DB2                     i2l7846:
 11926                           
 11927                           ;doprnt.c: 1268: else
 11928                           ;doprnt.c: 1273: {
 11929                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 11930  000DB2  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 11931  000DB6  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 11932  000DBA  CFDF F013          	movff	indf2,??i2__doprnt
 11933  000DBE  0E02               	movlw	2
 11934  000DC0  26DE               	addwf	postinc2,f,c
 11935  000DC2  CFDF F014          	movff	indf2,??i2__doprnt+1
 11936  000DC6  0E00               	movlw	0
 11937  000DC8  22DD               	addwfc	postdec2,f,c
 11938  000DCA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11939  000DCE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11940  000DD2  CFDE F01D          	movff	postinc2,i2__doprnt@val
 11941  000DD6  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 11942                           
 11943                           ;doprnt.c: 1287: }
 11944                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 11945  000DDA  D036               	goto	i2l7878
 11946  000DDC                     i2l7848:
 11947                           
 11948                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 11949  000DDC  0E01               	movlw	1
 11950  000DDE  6E22               	movwf	i2__doprnt@c,c
 11951  000DE0                     i2l7850:
 11952  000DE0  0E05               	movlw	5
 11953  000DE2  1822               	xorwf	i2__doprnt@c,w,c
 11954  000DE4  B4D8               	btfsc	status,2,c
 11955  000DE6  D038               	goto	i2l7880
 11956                           
 11957                           ;doprnt.c: 1306: if(val < dpowers[c])
 11958  000DE8  5022               	movf	i2__doprnt@c,w,c
 11959  000DEA  0D02               	mullw	2
 11960  000DEC  0EF6               	movlw	low _dpowers
 11961  000DEE  24F3               	addwf	prodl,w,c
 11962  000DF0  6EF6               	movwf	tblptrl,c
 11963  000DF2  0EFE               	movlw	high _dpowers
 11964  000DF4  20F4               	addwfc	prodh,w,c
 11965  000DF6  6EF7               	movwf	tblptrh,c
 11966  000DF8                     	if	1	;There are 3 active tblptr bytes
 11967  000DF8  6AF8               	clrf	tblptru,c
 11968  000DFA  0E00               	movlw	low (__mediumconst shr (0+16))
 11969  000DFC  22F8               	addwfc	tblptru,f,c
 11970  000DFE                     	endif
 11971  000DFE  0009               	tblrd		*+
 11972  000E00  50F5               	movf	tablat,w,c
 11973  000E02  5C1D               	subwf	i2__doprnt@val,w,c
 11974  000E04  0009               	tblrd		*+
 11975  000E06  50F5               	movf	tablat,w,c
 11976  000E08  581E               	subwfb	i2__doprnt@val+1,w,c
 11977  000E0A  A0D8               	btfss	status,0,c
 11978  000E0C  D025               	goto	i2l7880
 11979                           
 11980                           ;doprnt.c: 1307: break;
 11981  000E0E  2A22               	incf	i2__doprnt@c,f,c
 11982  000E10  D7E7               	goto	i2l7850
 11983  000E12                     i2l7862:
 11984                           
 11985                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 11986  000E12  0E01               	movlw	1
 11987  000E14  6E22               	movwf	i2__doprnt@c,c
 11988  000E16                     i2l7864:
 11989  000E16  0E04               	movlw	4
 11990  000E18  1822               	xorwf	i2__doprnt@c,w,c
 11991  000E1A  B4D8               	btfsc	status,2,c
 11992  000E1C  D01D               	goto	i2l7880
 11993                           
 11994                           ;doprnt.c: 1317: if(val < hexpowers[c])
 11995  000E1E  5022               	movf	i2__doprnt@c,w,c
 11996  000E20  0D02               	mullw	2
 11997  000E22  0E00               	movlw	low _hexpowers
 11998  000E24  24F3               	addwf	prodl,w,c
 11999  000E26  6EF6               	movwf	tblptrl,c
 12000  000E28  0EFF               	movlw	high _hexpowers
 12001  000E2A  20F4               	addwfc	prodh,w,c
 12002  000E2C  6EF7               	movwf	tblptrh,c
 12003  000E2E                     	if	1	;There are 3 active tblptr bytes
 12004  000E2E  6AF8               	clrf	tblptru,c
 12005  000E30  0E00               	movlw	low (__mediumconst shr (0+16))
 12006  000E32  22F8               	addwfc	tblptru,f,c
 12007  000E34                     	endif
 12008  000E34  0009               	tblrd		*+
 12009  000E36  50F5               	movf	tablat,w,c
 12010  000E38  5C1D               	subwf	i2__doprnt@val,w,c
 12011  000E3A  0009               	tblrd		*+
 12012  000E3C  50F5               	movf	tablat,w,c
 12013  000E3E  581E               	subwfb	i2__doprnt@val+1,w,c
 12014  000E40  A0D8               	btfss	status,0,c
 12015  000E42  D00A               	goto	i2l7880
 12016                           
 12017                           ;doprnt.c: 1318: break;
 12018  000E44  2A22               	incf	i2__doprnt@c,f,c
 12019  000E46  D7E7               	goto	i2l7864
 12020  000E48                     i2l7878:
 12021  000E48  501F               	movf	i2__doprnt@flag,w,c
 12022  000E4A  0B80               	andlw	128
 12023                           
 12024                           ; Switch size 1, requested type "space"
 12025                           ; Number of cases is 2, Range of values is 0 to 128
 12026                           ; switch strategies available:
 12027                           ; Name         Instructions Cycles
 12028                           ; simple_byte            7     4 (average)
 12029                           ;	Chosen strategy is simple_byte
 12030  000E4C  0A00               	xorlw	0	; case 0
 12031  000E4E  B4D8               	btfsc	status,2,c
 12032  000E50  D7C5               	goto	i2l7848
 12033  000E52  0A80               	xorlw	128	; case 128
 12034  000E54  B4D8               	btfsc	status,2,c
 12035  000E56  D7DD               	goto	i2l7862
 12036  000E58                     i2l7880:
 12037                           
 12038                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12039  000E58  5020               	movf	i2__doprnt@width,w,c
 12040  000E5A  1021               	iorwf	i2__doprnt@width+1,w,c
 12041  000E5C  B4D8               	btfsc	status,2,c
 12042  000E5E  D009               	goto	i2l7886
 12043  000E60  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 12044  000E64  0E03               	movlw	3
 12045  000E66  1613               	andwf	??i2__doprnt,f,c
 12046  000E68  B4D8               	btfsc	status,2,c
 12047  000E6A  D003               	goto	i2l7886
 12048                           
 12049                           ;doprnt.c: 1346: width--;
 12050  000E6C  0620               	decf	i2__doprnt@width,f,c
 12051  000E6E  A0D8               	btfss	status,0,c
 12052  000E70  0621               	decf	i2__doprnt@width+1,f,c
 12053  000E72                     i2l7886:
 12054                           
 12055                           ;doprnt.c: 1381: if(width > c)
 12056  000E72  0E80               	movlw	128
 12057  000E74  BE22               	btfsc	i2__doprnt@c,7,c
 12058  000E76  0E7F               	movlw	127
 12059  000E78  6E13               	movwf	??i2__doprnt& (0+255),c
 12060  000E7A  5020               	movf	i2__doprnt@width,w,c
 12061  000E7C  5C22               	subwf	i2__doprnt@c,w,c
 12062  000E7E  5021               	movf	i2__doprnt@width+1,w,c
 12063  000E80  0A80               	xorlw	128
 12064  000E82  5813               	subwfb	??i2__doprnt& (0+255),w,c
 12065  000E84  B0D8               	btfsc	status,0,c
 12066  000E86  D007               	goto	i2l7890
 12067                           
 12068                           ;doprnt.c: 1382: width -= c;
 12069  000E88  5022               	movf	i2__doprnt@c,w,c
 12070  000E8A  5E20               	subwf	i2__doprnt@width,f,c
 12071  000E8C  0E00               	movlw	0
 12072  000E8E  BE22               	btfsc	i2__doprnt@c,7,c
 12073  000E90  0EFF               	movlw	255
 12074  000E92  5A21               	subwfb	i2__doprnt@width+1,f,c
 12075  000E94  D004               	goto	i2l7892
 12076  000E96                     i2l7890:
 12077                           
 12078                           ;doprnt.c: 1383: else
 12079                           ;doprnt.c: 1384: width = 0;
 12080  000E96  0E00               	movlw	0
 12081  000E98  6E21               	movwf	i2__doprnt@width+1,c
 12082  000E9A  0E00               	movlw	0
 12083  000E9C  6E20               	movwf	i2__doprnt@width,c
 12084  000E9E                     i2l7892:
 12085                           
 12086                           ;doprnt.c: 1387: if(flag & 0x04) {
 12087  000E9E  A41F               	btfss	i2__doprnt@flag,2,c
 12088  000EA0  D078               	goto	i2l7916
 12089                           
 12090                           ;doprnt.c: 1392: if(flag & 0x03)
 12091  000EA2  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 12092  000EA6  0E03               	movlw	3
 12093  000EA8  1613               	andwf	??i2__doprnt,f,c
 12094  000EAA  B4D8               	btfsc	status,2,c
 12095  000EAC  D035               	goto	i2l7904
 12096                           
 12097                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 12098  000EAE  EE20 F002          	lfsr	2,2
 12099  000EB2  500D               	movf	i2__doprnt@pb,w,c
 12100  000EB4  26D9               	addwf	fsr2l,f,c
 12101  000EB6  500E               	movf	i2__doprnt@pb+1,w,c
 12102  000EB8  22DA               	addwfc	fsr2h,f,c
 12103  000EBA  50DE               	movf	postinc2,w,c
 12104  000EBC  10DE               	iorwf	postinc2,w,c
 12105  000EBE  B4D8               	btfsc	status,2,c
 12106  000EC0  D016               	goto	i2l7900
 12107  000EC2  EE20 F002          	lfsr	2,2
 12108  000EC6  500D               	movf	i2__doprnt@pb,w,c
 12109  000EC8  26D9               	addwf	fsr2l,f,c
 12110  000ECA  500E               	movf	i2__doprnt@pb+1,w,c
 12111  000ECC  22DA               	addwfc	fsr2h,f,c
 12112  000ECE  CFDE F013          	movff	postinc2,??i2__doprnt
 12113  000ED2  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12114  000ED6  D801               	call	i2u1243_48
 12115  000ED8  D01F               	goto	i2l7904
 12116  000EDA                     i2u1243_48:
 12117  000EDA  0005               	push	
 12118  000EDC  6EFA               	movwf	pclath,c
 12119  000EDE  5013               	movf	??i2__doprnt,w,c
 12120  000EE0  6EFD               	movwf	tosl,c
 12121  000EE2  5014               	movf	??i2__doprnt+1,w,c
 12122  000EE4  6EFE               	movwf	tosh,c
 12123  000EE6  6AFF               	clrf	tosu,c
 12124  000EE8  50FA               	movf	pclath,w,c
 12125  000EEA  0E2D               	movlw	45
 12126  000EEC  0012               	return		;indir
 12127  000EEE                     i2l7900:
 12128  000EEE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12129  000EF2  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12130  000EF6  CFDE F013          	movff	postinc2,??i2__doprnt
 12131  000EFA  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12132  000EFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12133  000F02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12134  000F06  0E2D               	movlw	45
 12135  000F08  6EDF               	movwf	indf2,c
 12136  000F0A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12137  000F0E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12138  000F12  2ADE               	incf	postinc2,f,c
 12139  000F14  0E00               	movlw	0
 12140  000F16  22DD               	addwfc	postdec2,f,c
 12141  000F18                     i2l7904:
 12142                           
 12143                           ;doprnt.c: 1415: if(width)
 12144  000F18  5020               	movf	i2__doprnt@width,w,c
 12145  000F1A  1021               	iorwf	i2__doprnt@width+1,w,c
 12146  000F1C  B4D8               	btfsc	status,2,c
 12147  000F1E  D0B4               	goto	i2l7938
 12148                           
 12149                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 12150                           
 12151                           ;doprnt.c: 1416: do
 12152  000F20  EE20 F002          	lfsr	2,2
 12153  000F24  500D               	movf	i2__doprnt@pb,w,c
 12154  000F26  26D9               	addwf	fsr2l,f,c
 12155  000F28  500E               	movf	i2__doprnt@pb+1,w,c
 12156  000F2A  22DA               	addwfc	fsr2h,f,c
 12157  000F2C  50DE               	movf	postinc2,w,c
 12158  000F2E  10DE               	iorwf	postinc2,w,c
 12159  000F30  B4D8               	btfsc	status,2,c
 12160  000F32  D016               	goto	i2l7910
 12161  000F34  EE20 F002          	lfsr	2,2
 12162  000F38  500D               	movf	i2__doprnt@pb,w,c
 12163  000F3A  26D9               	addwf	fsr2l,f,c
 12164  000F3C  500E               	movf	i2__doprnt@pb+1,w,c
 12165  000F3E  22DA               	addwfc	fsr2h,f,c
 12166  000F40  CFDE F013          	movff	postinc2,??i2__doprnt
 12167  000F44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12168  000F48  D801               	call	i2u1246_48
 12169  000F4A  D01F               	goto	i2l7914
 12170  000F4C                     i2u1246_48:
 12171  000F4C  0005               	push	
 12172  000F4E  6EFA               	movwf	pclath,c
 12173  000F50  5013               	movf	??i2__doprnt,w,c
 12174  000F52  6EFD               	movwf	tosl,c
 12175  000F54  5014               	movf	??i2__doprnt+1,w,c
 12176  000F56  6EFE               	movwf	tosh,c
 12177  000F58  6AFF               	clrf	tosu,c
 12178  000F5A  50FA               	movf	pclath,w,c
 12179  000F5C  0E30               	movlw	48
 12180  000F5E  0012               	return		;indir
 12181  000F60                     i2l7910:
 12182  000F60  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12183  000F64  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12184  000F68  CFDE F013          	movff	postinc2,??i2__doprnt
 12185  000F6C  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12186  000F70  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12187  000F74  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12188  000F78  0E30               	movlw	48
 12189  000F7A  6EDF               	movwf	indf2,c
 12190  000F7C  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12191  000F80  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12192  000F84  2ADE               	incf	postinc2,f,c
 12193  000F86  0E00               	movlw	0
 12194  000F88  22DD               	addwfc	postdec2,f,c
 12195  000F8A                     i2l7914:
 12196                           
 12197                           ;doprnt.c: 1418: while(--width);
 12198  000F8A  0620               	decf	i2__doprnt@width,f,c
 12199  000F8C  A0D8               	btfss	status,0,c
 12200  000F8E  0621               	decf	i2__doprnt@width+1,f,c
 12201  000F90  D7C3               	goto	i2l7904
 12202  000F92                     i2l7916:
 12203                           
 12204                           ;doprnt.c: 1422: {
 12205                           ;doprnt.c: 1424: if(width
 12206                           ;doprnt.c: 1428: )
 12207  000F92  5020               	movf	i2__doprnt@width,w,c
 12208  000F94  1021               	iorwf	i2__doprnt@width+1,w,c
 12209  000F96  B4D8               	btfsc	status,2,c
 12210  000F98  D03C               	goto	i2l7928
 12211  000F9A                     i2l7918:
 12212                           
 12213                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 12214  000F9A  EE20 F002          	lfsr	2,2
 12215  000F9E  500D               	movf	i2__doprnt@pb,w,c
 12216  000FA0  26D9               	addwf	fsr2l,f,c
 12217  000FA2  500E               	movf	i2__doprnt@pb+1,w,c
 12218  000FA4  22DA               	addwfc	fsr2h,f,c
 12219  000FA6  50DE               	movf	postinc2,w,c
 12220  000FA8  10DE               	iorwf	postinc2,w,c
 12221  000FAA  B4D8               	btfsc	status,2,c
 12222  000FAC  D016               	goto	i2l7922
 12223  000FAE  EE20 F002          	lfsr	2,2
 12224  000FB2  500D               	movf	i2__doprnt@pb,w,c
 12225  000FB4  26D9               	addwf	fsr2l,f,c
 12226  000FB6  500E               	movf	i2__doprnt@pb+1,w,c
 12227  000FB8  22DA               	addwfc	fsr2h,f,c
 12228  000FBA  CFDE F013          	movff	postinc2,??i2__doprnt
 12229  000FBE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12230  000FC2  D801               	call	i2u1250_48
 12231  000FC4  D01F               	goto	i2l7926
 12232  000FC6                     i2u1250_48:
 12233  000FC6  0005               	push	
 12234  000FC8  6EFA               	movwf	pclath,c
 12235  000FCA  5013               	movf	??i2__doprnt,w,c
 12236  000FCC  6EFD               	movwf	tosl,c
 12237  000FCE  5014               	movf	??i2__doprnt+1,w,c
 12238  000FD0  6EFE               	movwf	tosh,c
 12239  000FD2  6AFF               	clrf	tosu,c
 12240  000FD4  50FA               	movf	pclath,w,c
 12241  000FD6  0E20               	movlw	32
 12242  000FD8  0012               	return		;indir
 12243  000FDA                     i2l7922:
 12244  000FDA  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12245  000FDE  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12246  000FE2  CFDE F013          	movff	postinc2,??i2__doprnt
 12247  000FE6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12248  000FEA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12249  000FEE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12250  000FF2  0E20               	movlw	32
 12251  000FF4  6EDF               	movwf	indf2,c
 12252  000FF6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12253  000FFA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12254  000FFE  2ADE               	incf	postinc2,f,c
 12255  001000  0E00               	movlw	0
 12256  001002  22DD               	addwfc	postdec2,f,c
 12257  001004                     i2l7926:
 12258                           
 12259                           ;doprnt.c: 1431: while(--width);
 12260  001004  0620               	decf	i2__doprnt@width,f,c
 12261  001006  A0D8               	btfss	status,0,c
 12262  001008  0621               	decf	i2__doprnt@width+1,f,c
 12263  00100A  5020               	movf	i2__doprnt@width,w,c
 12264  00100C  1021               	iorwf	i2__doprnt@width+1,w,c
 12265  00100E  A4D8               	btfss	status,2,c
 12266  001010  D7C4               	goto	i2l7918
 12267  001012                     i2l7928:
 12268                           
 12269                           ;doprnt.c: 1438: if(flag & 0x03)
 12270  001012  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 12271  001016  0E03               	movlw	3
 12272  001018  1613               	andwf	??i2__doprnt,f,c
 12273  00101A  B4D8               	btfsc	status,2,c
 12274  00101C  D035               	goto	i2l7938
 12275                           
 12276                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 12277  00101E  EE20 F002          	lfsr	2,2
 12278  001022  500D               	movf	i2__doprnt@pb,w,c
 12279  001024  26D9               	addwf	fsr2l,f,c
 12280  001026  500E               	movf	i2__doprnt@pb+1,w,c
 12281  001028  22DA               	addwfc	fsr2h,f,c
 12282  00102A  50DE               	movf	postinc2,w,c
 12283  00102C  10DE               	iorwf	postinc2,w,c
 12284  00102E  B4D8               	btfsc	status,2,c
 12285  001030  D016               	goto	i2l7934
 12286  001032  EE20 F002          	lfsr	2,2
 12287  001036  500D               	movf	i2__doprnt@pb,w,c
 12288  001038  26D9               	addwf	fsr2l,f,c
 12289  00103A  500E               	movf	i2__doprnt@pb+1,w,c
 12290  00103C  22DA               	addwfc	fsr2h,f,c
 12291  00103E  CFDE F013          	movff	postinc2,??i2__doprnt
 12292  001042  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12293  001046  D801               	call	i2u1254_48
 12294  001048  D01F               	goto	i2l7938
 12295  00104A                     i2u1254_48:
 12296  00104A  0005               	push	
 12297  00104C  6EFA               	movwf	pclath,c
 12298  00104E  5013               	movf	??i2__doprnt,w,c
 12299  001050  6EFD               	movwf	tosl,c
 12300  001052  5014               	movf	??i2__doprnt+1,w,c
 12301  001054  6EFE               	movwf	tosh,c
 12302  001056  6AFF               	clrf	tosu,c
 12303  001058  50FA               	movf	pclath,w,c
 12304  00105A  0E2D               	movlw	45
 12305  00105C  0012               	return		;indir
 12306  00105E                     i2l7934:
 12307  00105E  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12308  001062  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12309  001066  CFDE F013          	movff	postinc2,??i2__doprnt
 12310  00106A  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12311  00106E  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12312  001072  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12313  001076  0E2D               	movlw	45
 12314  001078  6EDF               	movwf	indf2,c
 12315  00107A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12316  00107E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12317  001082  2ADE               	incf	postinc2,f,c
 12318  001084  0E00               	movlw	0
 12319  001086  22DD               	addwfc	postdec2,f,c
 12320  001088                     i2l7938:
 12321                           
 12322                           ;doprnt.c: 1469: }
 12323                           ;doprnt.c: 1472: prec = c;
 12324  001088  C022  F018         	movff	i2__doprnt@c,i2__doprnt@prec
 12325                           
 12326                           ;doprnt.c: 1474: while(prec--) {
 12327  00108C  D08B               	goto	i2l7958
 12328  00108E                     i2l7940:
 12329                           
 12330                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12331  00108E  5018               	movf	i2__doprnt@prec,w,c
 12332  001090  0D02               	mullw	2
 12333  001092  0EF6               	movlw	low _dpowers
 12334  001094  24F3               	addwf	prodl,w,c
 12335  001096  6EF6               	movwf	tblptrl,c
 12336  001098  0EFE               	movlw	high _dpowers
 12337  00109A  20F4               	addwfc	prodh,w,c
 12338  00109C  6EF7               	movwf	tblptrh,c
 12339  00109E                     	if	1	;There are 3 active tblptr bytes
 12340  00109E  6AF8               	clrf	tblptru,c
 12341  0010A0  0E00               	movlw	low (__mediumconst shr (0+16))
 12342  0010A2  22F8               	addwfc	tblptru,f,c
 12343  0010A4                     	endif
 12344  0010A4  0009               	tblrd		*+
 12345  0010A6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12346  0010AA  000A               	tblrd		*-
 12347  0010AC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12348  0010B0  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 12349  0010B4  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 12350  0010B8  EC8D  F01A         	call	i2___lwdiv
 12351  0010BC  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 12352  0010C0  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12353  0010C4  0E00               	movlw	0
 12354  0010C6  6E0B               	movwf	i2___lwmod@divisor+1,c
 12355  0010C8  0E0A               	movlw	10
 12356  0010CA  6E0A               	movwf	i2___lwmod@divisor,c
 12357  0010CC  EC00  F01B         	call	i2___lwmod	;wreg free
 12358  0010D0  5008               	movf	?i2___lwmod,w,c
 12359  0010D2  0F30               	addlw	48
 12360  0010D4  6E22               	movwf	i2__doprnt@c,c
 12361                           
 12362                           ;doprnt.c: 1491: break;
 12363  0010D6  D031               	goto	i2l7950
 12364  0010D8                     i2l7942:
 12365                           
 12366                           ;doprnt.c: 1499: {
 12367                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 12368  0010D8  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 12369  0010DC  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 12370  0010E0  5018               	movf	i2__doprnt@prec,w,c
 12371  0010E2  0D02               	mullw	2
 12372  0010E4  0E00               	movlw	low _hexpowers
 12373  0010E6  24F3               	addwf	prodl,w,c
 12374  0010E8  6EF6               	movwf	tblptrl,c
 12375  0010EA  0EFF               	movlw	high _hexpowers
 12376  0010EC  20F4               	addwfc	prodh,w,c
 12377  0010EE  6EF7               	movwf	tblptrh,c
 12378  0010F0                     	if	1	;There are 3 active tblptr bytes
 12379  0010F0  6AF8               	clrf	tblptru,c
 12380  0010F2  0E00               	movlw	low (__mediumconst shr (0+16))
 12381  0010F4  22F8               	addwfc	tblptru,f,c
 12382  0010F6                     	endif
 12383  0010F6  0009               	tblrd		*+
 12384  0010F8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12385  0010FC  000A               	tblrd		*-
 12386  0010FE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12387  001102  EC8D  F01A         	call	i2___lwdiv	;wreg free
 12388  001106  5001               	movf	?i2___lwdiv,w,c
 12389  001108  0B0F               	andlw	15
 12390  00110A  6E17               	movwf	i2__doprnt@idx,c
 12391                           
 12392                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 12393  00110C  5017               	movf	i2__doprnt@idx,w,c
 12394  00110E  0D01               	mullw	1
 12395  001110  0E8E               	movlw	low STR_19
 12396  001112  24F3               	addwf	prodl,w,c
 12397  001114  6EF6               	movwf	tblptrl,c
 12398  001116  0EFF               	movlw	high STR_19
 12399  001118  20F4               	addwfc	prodh,w,c
 12400  00111A  6EF7               	movwf	tblptrh,c
 12401  00111C                     	if	1	;There are 3 active tblptr bytes
 12402  00111C  6AF8               	clrf	tblptru,c
 12403  00111E  0E00               	movlw	low (__mediumconst shr (0+16))
 12404  001120  22F8               	addwfc	tblptru,f,c
 12405  001122                     	endif
 12406  001122  0008               	tblrd		*
 12407  001124  CFF5 F022          	movff	tablat,i2__doprnt@c
 12408                           
 12409                           ;doprnt.c: 1523: }
 12410                           
 12411                           ;doprnt.c: 1508: }
 12412                           ;doprnt.c: 1510: break;
 12413  001128  D008               	goto	i2l7950
 12414  00112A                     i2l7948:
 12415  00112A  501F               	movf	i2__doprnt@flag,w,c
 12416  00112C  0B80               	andlw	128
 12417                           
 12418                           ; Switch size 1, requested type "space"
 12419                           ; Number of cases is 2, Range of values is 0 to 128
 12420                           ; switch strategies available:
 12421                           ; Name         Instructions Cycles
 12422                           ; simple_byte            7     4 (average)
 12423                           ;	Chosen strategy is simple_byte
 12424  00112E  0A00               	xorlw	0	; case 0
 12425  001130  B4D8               	btfsc	status,2,c
 12426  001132  D7AD               	goto	i2l7940
 12427  001134  0A80               	xorlw	128	; case 128
 12428  001136  B4D8               	btfsc	status,2,c
 12429  001138  D7CF               	goto	i2l7942
 12430  00113A                     i2l7950:
 12431                           
 12432                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 12433  00113A  EE20 F002          	lfsr	2,2
 12434  00113E  500D               	movf	i2__doprnt@pb,w,c
 12435  001140  26D9               	addwf	fsr2l,f,c
 12436  001142  500E               	movf	i2__doprnt@pb+1,w,c
 12437  001144  22DA               	addwfc	fsr2h,f,c
 12438  001146  50DE               	movf	postinc2,w,c
 12439  001148  10DE               	iorwf	postinc2,w,c
 12440  00114A  B4D8               	btfsc	status,2,c
 12441  00114C  D016               	goto	i2l7954
 12442  00114E  EE20 F002          	lfsr	2,2
 12443  001152  500D               	movf	i2__doprnt@pb,w,c
 12444  001154  26D9               	addwf	fsr2l,f,c
 12445  001156  500E               	movf	i2__doprnt@pb+1,w,c
 12446  001158  22DA               	addwfc	fsr2h,f,c
 12447  00115A  CFDE F013          	movff	postinc2,??i2__doprnt
 12448  00115E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12449  001162  D801               	call	i2u1256_48
 12450  001164  D01F               	goto	i2l7958
 12451  001166                     i2u1256_48:
 12452  001166  0005               	push	
 12453  001168  6EFA               	movwf	pclath,c
 12454  00116A  5013               	movf	??i2__doprnt,w,c
 12455  00116C  6EFD               	movwf	tosl,c
 12456  00116E  5014               	movf	??i2__doprnt+1,w,c
 12457  001170  6EFE               	movwf	tosh,c
 12458  001172  6AFF               	clrf	tosu,c
 12459  001174  50FA               	movf	pclath,w,c
 12460  001176  5022               	movf	i2__doprnt@c,w,c
 12461  001178  0012               	return		;indir
 12462  00117A                     i2l7954:
 12463  00117A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12464  00117E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12465  001182  CFDE F013          	movff	postinc2,??i2__doprnt
 12466  001186  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12467  00118A  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12468  00118E  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12469  001192  C022  FFDF         	movff	i2__doprnt@c,indf2
 12470  001196  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12471  00119A  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12472  00119E  2ADE               	incf	postinc2,f,c
 12473  0011A0  0E00               	movlw	0
 12474  0011A2  22DD               	addwfc	postdec2,f,c
 12475  0011A4                     i2l7958:
 12476  0011A4  0618               	decf	i2__doprnt@prec,f,c
 12477  0011A6  2818               	incf	i2__doprnt@prec,w,c
 12478  0011A8  A4D8               	btfss	status,2,c
 12479  0011AA  D7BF               	goto	i2l7948
 12480  0011AC                     i2l7960:
 12481  0011AC  500F               	movf	i2__doprnt@f,w,c
 12482  0011AE  6E13               	movwf	??i2__doprnt& (0+255),c
 12483  0011B0  5010               	movf	i2__doprnt@f+1,w,c
 12484  0011B2  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 12485  0011B4  4A0F               	infsnz	i2__doprnt@f,f,c
 12486  0011B6  2A10               	incf	i2__doprnt@f+1,f,c
 12487  0011B8  C013  FFF6         	movff	??i2__doprnt,tblptrl
 12488  0011BC  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 12489  0011C0  0E00               	movlw	low (__mediumconst shr (0+16))
 12490  0011C2  6EF8               	movwf	tblptru,c
 12491  0011C4  0E0F               	movlw	(high __ramtop+-1)
 12492  0011C6  64F7               	cpfsgt	tblptrh,c
 12493  0011C8  D003               	bra	i2u1258_47
 12494  0011CA  0008               	tblrd		*
 12495  0011CC  50F5               	movf	tablat,w,c
 12496  0011CE  D005               	bra	i2u1258_40
 12497  0011D0                     i2u1258_47:
 12498  0011D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 12499  0011D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 12500  0011D8  50EF               	movf	indf0,w,c
 12501  0011DA                     i2u1258_40:
 12502  0011DA  6E22               	movwf	i2__doprnt@c,c
 12503  0011DC  5022               	movf	i2__doprnt@c,w,c
 12504  0011DE  A4D8               	btfss	status,2,c
 12505  0011E0  EFCD  F004         	goto	i2l7754
 12506  0011E4                     i2l7962:
 12507                           
 12508                           ;doprnt.c: 1540: return 0;
 12509  0011E4  0E00               	movlw	0
 12510  0011E6  6E0E               	movwf	?i2__doprnt+1,c
 12511  0011E8  0E00               	movlw	0
 12512  0011EA  6E0D               	movwf	?i2__doprnt,c
 12513  0011EC  0012               	return	
 12514  0011EE                     __end_ofi2__doprnt:
 12515                           	opt stack 0
 12516                           tosu	equ	0xFFF
 12517                           tosh	equ	0xFFE
 12518                           tosl	equ	0xFFD
 12519                           pclatu	equ	0xFFB
 12520                           pclath	equ	0xFFA
 12521                           tblptru	equ	0xFF8
 12522                           tblptrh	equ	0xFF7
 12523                           tblptrl	equ	0xFF6
 12524                           tablat	equ	0xFF5
 12525                           prodh	equ	0xFF4
 12526                           prodl	equ	0xFF3
 12527                           intcon	equ	0xFF2
 12528                           intcon2	equ	0xFF1
 12529                           intcon3	equ	0xFF0
 12530                           indf0	equ	0xFEF
 12531                           postinc0	equ	0xFEE
 12532                           fsr0h	equ	0xFEA
 12533                           fsr0l	equ	0xFE9
 12534                           wreg	equ	0xFE8
 12535                           indf1	equ	0xFE7
 12536                           postinc1	equ	0xFE6
 12537                           postdec1	equ	0xFE5
 12538                           fsr1h	equ	0xFE2
 12539                           fsr1l	equ	0xFE1
 12540                           indf2	equ	0xFDF
 12541                           postinc2	equ	0xFDE
 12542                           postdec2	equ	0xFDD
 12543                           fsr2h	equ	0xFDA
 12544                           fsr2l	equ	0xFD9
 12545                           status	equ	0xFD8
 12546                           
 12547 ;; *************** function i2_putch *****************
 12548 ;; Defined at:
 12549 ;;		line 30 in file "lcd.c"
 12550 ;; Parameters:    Size  Location     Type
 12551 ;;  data            1    wreg     unsigned char 
 12552 ;; Auto vars:     Size  Location     Type
 12553 ;;  data            1    2[COMRAM] unsigned char 
 12554 ;; Return value:  Size  Location     Type
 12555 ;;                  1    wreg      void 
 12556 ;; Registers used:
 12557 ;;		wreg, status,2, status,0, cstack
 12558 ;; Tracked objects:
 12559 ;;		On entry : 0/0
 12560 ;;		On exit  : 0/0
 12561 ;;		Unchanged: 0/0
 12562 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12564 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12566 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12567 ;;Total ram usage:        1 bytes
 12568 ;; Hardware stack levels used:    1
 12569 ;; Hardware stack levels required when called:    1
 12570 ;; This function calls:
 12571 ;;		i2_lcdNibble
 12572 ;; This function is called by:
 12573 ;;		i2_printf
 12574 ;; This function uses a non-reentrant model
 12575 ;;
 12576                           
 12577                           	psect	text36
 12578  003800                     __ptext36:
 12579                           	opt stack 0
 12580  003800                     i2_putch:
 12581                           	opt stack 20
 12582                           
 12583                           ;incstack = 0
 12584                           ;i2putch@data stored from wreg
 12585  003800  6E03               	movwf	i2putch@data,c
 12586                           
 12587                           ;lcd.c: 31: LATDbits.LATD2 = 1;
 12588  003802  848C               	bsf	3980,2,c	;volatile
 12589                           
 12590                           ;lcd.c: 32: lcdNibble(data);
 12591  003804  5003               	movf	i2putch@data,w,c
 12592  003806  EC39  F01A         	call	i2_lcdNibble
 12593  00380A  0012               	return		;funcret
 12594  00380C                     __end_ofi2_putch:
 12595                           	opt stack 0
 12596                           tosu	equ	0xFFF
 12597                           tosh	equ	0xFFE
 12598                           tosl	equ	0xFFD
 12599                           pclatu	equ	0xFFB
 12600                           pclath	equ	0xFFA
 12601                           tblptru	equ	0xFF8
 12602                           tblptrh	equ	0xFF7
 12603                           tblptrl	equ	0xFF6
 12604                           tablat	equ	0xFF5
 12605                           prodh	equ	0xFF4
 12606                           prodl	equ	0xFF3
 12607                           intcon	equ	0xFF2
 12608                           intcon2	equ	0xFF1
 12609                           intcon3	equ	0xFF0
 12610                           indf0	equ	0xFEF
 12611                           postinc0	equ	0xFEE
 12612                           fsr0h	equ	0xFEA
 12613                           fsr0l	equ	0xFE9
 12614                           wreg	equ	0xFE8
 12615                           indf1	equ	0xFE7
 12616                           postinc1	equ	0xFE6
 12617                           postdec1	equ	0xFE5
 12618                           fsr1h	equ	0xFE2
 12619                           fsr1l	equ	0xFE1
 12620                           indf2	equ	0xFDF
 12621                           postinc2	equ	0xFDE
 12622                           postdec2	equ	0xFDD
 12623                           fsr2h	equ	0xFDA
 12624                           fsr2l	equ	0xFD9
 12625                           status	equ	0xFD8
 12626                           
 12627 ;; *************** function i2_isdigit *****************
 12628 ;; Defined at:
 12629 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 12630 ;; Parameters:    Size  Location     Type
 12631 ;;  c               1    wreg     unsigned char 
 12632 ;; Auto vars:     Size  Location     Type
 12633 ;;  c               1    2[COMRAM] unsigned char 
 12634 ;; Return value:  Size  Location     Type
 12635 ;;		None               void
 12636 ;; Registers used:
 12637 ;;		wreg, status,2, status,0
 12638 ;; Tracked objects:
 12639 ;;		On entry : 0/0
 12640 ;;		On exit  : 0/0
 12641 ;;		Unchanged: 0/0
 12642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12643 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12644 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12645 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12646 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12647 ;;Total ram usage:        3 bytes
 12648 ;; Hardware stack levels used:    1
 12649 ;; This function calls:
 12650 ;;		Nothing
 12651 ;; This function is called by:
 12652 ;;		i2__doprnt
 12653 ;; This function uses a non-reentrant model
 12654 ;;
 12655                           
 12656                           	psect	text37
 12657  0037A8                     __ptext37:
 12658                           	opt stack 0
 12659  0037A8                     i2_isdigit:
 12660                           	opt stack 21
 12661                           
 12662                           ;incstack = 0
 12663                           ;i2isdigit@c stored from wreg
 12664  0037A8  6E03               	movwf	i2isdigit@c,c
 12665  0037AA  0E00               	movlw	0
 12666  0037AC  6E02               	movwf	i2_isdigit$761,c
 12667  0037AE  0E3A               	movlw	58
 12668  0037B0  6003               	cpfslt	i2isdigit@c,c
 12669  0037B2  D005               	goto	i2l3152
 12670  0037B4  0E2F               	movlw	47
 12671  0037B6  6403               	cpfsgt	i2isdigit@c,c
 12672  0037B8  D002               	goto	i2l3152
 12673  0037BA  0E01               	movlw	1
 12674  0037BC  6E02               	movwf	i2_isdigit$761,c
 12675  0037BE                     i2l3152:
 12676  0037BE  C002  F001         	movff	i2_isdigit$761,??i2_isdigit
 12677  0037C2  3001               	rrcf	??i2_isdigit,w,c
 12678  0037C4  0012               	return	
 12679  0037C6                     __end_ofi2_isdigit:
 12680                           	opt stack 0
 12681                           tosu	equ	0xFFF
 12682                           tosh	equ	0xFFE
 12683                           tosl	equ	0xFFD
 12684                           pclatu	equ	0xFFB
 12685                           pclath	equ	0xFFA
 12686                           tblptru	equ	0xFF8
 12687                           tblptrh	equ	0xFF7
 12688                           tblptrl	equ	0xFF6
 12689                           tablat	equ	0xFF5
 12690                           prodh	equ	0xFF4
 12691                           prodl	equ	0xFF3
 12692                           intcon	equ	0xFF2
 12693                           intcon2	equ	0xFF1
 12694                           intcon3	equ	0xFF0
 12695                           indf0	equ	0xFEF
 12696                           postinc0	equ	0xFEE
 12697                           fsr0h	equ	0xFEA
 12698                           fsr0l	equ	0xFE9
 12699                           wreg	equ	0xFE8
 12700                           indf1	equ	0xFE7
 12701                           postinc1	equ	0xFE6
 12702                           postdec1	equ	0xFE5
 12703                           fsr1h	equ	0xFE2
 12704                           fsr1l	equ	0xFE1
 12705                           indf2	equ	0xFDF
 12706                           postinc2	equ	0xFDE
 12707                           postdec2	equ	0xFDD
 12708                           fsr2h	equ	0xFDA
 12709                           fsr2l	equ	0xFD9
 12710                           status	equ	0xFD8
 12711                           
 12712 ;; *************** function i2___wmul *****************
 12713 ;; Defined at:
 12714 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12715 ;; Parameters:    Size  Location     Type
 12716 ;;  multiplier      2    0[COMRAM] unsigned int 
 12717 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12718 ;; Auto vars:     Size  Location     Type
 12719 ;;  __wmul          2    4[COMRAM] unsigned int 
 12720 ;; Return value:  Size  Location     Type
 12721 ;;                  2    0[COMRAM] unsigned int 
 12722 ;; Registers used:
 12723 ;;		wreg, status,2, status,0, prodl, prodh
 12724 ;; Tracked objects:
 12725 ;;		On entry : 0/0
 12726 ;;		On exit  : 0/0
 12727 ;;		Unchanged: 0/0
 12728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12729 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12730 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12731 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12732 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12733 ;;Total ram usage:        6 bytes
 12734 ;; Hardware stack levels used:    1
 12735 ;; This function calls:
 12736 ;;		Nothing
 12737 ;; This function is called by:
 12738 ;;		i2__doprnt
 12739 ;; This function uses a non-reentrant model
 12740 ;;
 12741                           
 12742                           	psect	text38
 12743  003764                     __ptext38:
 12744                           	opt stack 0
 12745  003764                     i2___wmul:
 12746                           	opt stack 21
 12747                           
 12748                           ;incstack = 0
 12749  003764  5001               	movf	i2___wmul@multiplier,w,c
 12750  003766  0203               	mulwf	i2___wmul@multiplicand,c
 12751  003768  CFF3 F005          	movff	prodl,i2___wmul@product
 12752  00376C  CFF4 F006          	movff	prodh,i2___wmul@product+1
 12753  003770  5001               	movf	i2___wmul@multiplier,w,c
 12754  003772  0204               	mulwf	i2___wmul@multiplicand+1,c
 12755  003774  50F3               	movf	prodl,w,c
 12756  003776  2606               	addwf	i2___wmul@product+1,f,c
 12757  003778  5002               	movf	i2___wmul@multiplier+1,w,c
 12758  00377A  0203               	mulwf	i2___wmul@multiplicand,c
 12759  00377C  50F3               	movf	prodl,w,c
 12760  00377E  2606               	addwf	i2___wmul@product+1,f,c
 12761  003780  C005  F001         	movff	i2___wmul@product,?i2___wmul
 12762  003784  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 12763  003788  0012               	return	
 12764  00378A                     __end_ofi2___wmul:
 12765                           	opt stack 0
 12766                           tosu	equ	0xFFF
 12767                           tosh	equ	0xFFE
 12768                           tosl	equ	0xFFD
 12769                           pclatu	equ	0xFFB
 12770                           pclath	equ	0xFFA
 12771                           tblptru	equ	0xFF8
 12772                           tblptrh	equ	0xFF7
 12773                           tblptrl	equ	0xFF6
 12774                           tablat	equ	0xFF5
 12775                           prodh	equ	0xFF4
 12776                           prodl	equ	0xFF3
 12777                           intcon	equ	0xFF2
 12778                           intcon2	equ	0xFF1
 12779                           intcon3	equ	0xFF0
 12780                           indf0	equ	0xFEF
 12781                           postinc0	equ	0xFEE
 12782                           fsr0h	equ	0xFEA
 12783                           fsr0l	equ	0xFE9
 12784                           wreg	equ	0xFE8
 12785                           indf1	equ	0xFE7
 12786                           postinc1	equ	0xFE6
 12787                           postdec1	equ	0xFE5
 12788                           fsr1h	equ	0xFE2
 12789                           fsr1l	equ	0xFE1
 12790                           indf2	equ	0xFDF
 12791                           postinc2	equ	0xFDE
 12792                           postdec2	equ	0xFDD
 12793                           fsr2h	equ	0xFDA
 12794                           fsr2l	equ	0xFD9
 12795                           status	equ	0xFD8
 12796                           
 12797 ;; *************** function i2___lwmod *****************
 12798 ;; Defined at:
 12799 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 12800 ;; Parameters:    Size  Location     Type
 12801 ;;  dividend        2    7[COMRAM] unsigned int 
 12802 ;;  divisor         2    9[COMRAM] unsigned int 
 12803 ;; Auto vars:     Size  Location     Type
 12804 ;;  __lwmod         1   11[COMRAM] unsigned char 
 12805 ;; Return value:  Size  Location     Type
 12806 ;;                  2    7[COMRAM] unsigned int 
 12807 ;; Registers used:
 12808 ;;		wreg, status,2, status,0
 12809 ;; Tracked objects:
 12810 ;;		On entry : 0/0
 12811 ;;		On exit  : 0/0
 12812 ;;		Unchanged: 0/0
 12813 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12814 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12815 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12816 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12817 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12818 ;;Total ram usage:        5 bytes
 12819 ;; Hardware stack levels used:    1
 12820 ;; This function calls:
 12821 ;;		Nothing
 12822 ;; This function is called by:
 12823 ;;		i2__doprnt
 12824 ;; This function uses a non-reentrant model
 12825 ;;
 12826                           
 12827                           	psect	text39
 12828  003600                     __ptext39:
 12829                           	opt stack 0
 12830  003600                     i2___lwmod:
 12831                           	opt stack 21
 12832                           
 12833                           ;incstack = 0
 12834  003600  500A               	movf	i2___lwmod@divisor,w,c
 12835  003602  100B               	iorwf	i2___lwmod@divisor+1,w,c
 12836  003604  B4D8               	btfsc	status,2,c
 12837  003606  D018               	goto	i2l987
 12838  003608  0E01               	movlw	1
 12839  00360A  6E0C               	movwf	i2___lwmod@counter,c
 12840  00360C  D004               	goto	i2l3184
 12841  00360E                     i2l3182:
 12842  00360E  90D8               	bcf	status,0,c
 12843  003610  360A               	rlcf	i2___lwmod@divisor,f,c
 12844  003612  360B               	rlcf	i2___lwmod@divisor+1,f,c
 12845  003614  2A0C               	incf	i2___lwmod@counter,f,c
 12846  003616                     i2l3184:
 12847  003616  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 12848  003618  D7FA               	goto	i2l3182
 12849  00361A                     i2l3186:
 12850  00361A  500A               	movf	i2___lwmod@divisor,w,c
 12851  00361C  5C08               	subwf	i2___lwmod@dividend,w,c
 12852  00361E  500B               	movf	i2___lwmod@divisor+1,w,c
 12853  003620  5809               	subwfb	i2___lwmod@dividend+1,w,c
 12854  003622  A0D8               	btfss	status,0,c
 12855  003624  D004               	goto	i2l3190
 12856  003626  500A               	movf	i2___lwmod@divisor,w,c
 12857  003628  5E08               	subwf	i2___lwmod@dividend,f,c
 12858  00362A  500B               	movf	i2___lwmod@divisor+1,w,c
 12859  00362C  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 12860  00362E                     i2l3190:
 12861  00362E  90D8               	bcf	status,0,c
 12862  003630  320B               	rrcf	i2___lwmod@divisor+1,f,c
 12863  003632  320A               	rrcf	i2___lwmod@divisor,f,c
 12864  003634  2E0C               	decfsz	i2___lwmod@counter,f,c
 12865  003636  D7F1               	goto	i2l3186
 12866  003638                     i2l987:
 12867  003638  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 12868  00363C  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12869  003640  0012               	return		;funcret
 12870  003642                     __end_ofi2___lwmod:
 12871                           	opt stack 0
 12872                           tosu	equ	0xFFF
 12873                           tosh	equ	0xFFE
 12874                           tosl	equ	0xFFD
 12875                           pclatu	equ	0xFFB
 12876                           pclath	equ	0xFFA
 12877                           tblptru	equ	0xFF8
 12878                           tblptrh	equ	0xFF7
 12879                           tblptrl	equ	0xFF6
 12880                           tablat	equ	0xFF5
 12881                           prodh	equ	0xFF4
 12882                           prodl	equ	0xFF3
 12883                           intcon	equ	0xFF2
 12884                           intcon2	equ	0xFF1
 12885                           intcon3	equ	0xFF0
 12886                           indf0	equ	0xFEF
 12887                           postinc0	equ	0xFEE
 12888                           fsr0h	equ	0xFEA
 12889                           fsr0l	equ	0xFE9
 12890                           wreg	equ	0xFE8
 12891                           indf1	equ	0xFE7
 12892                           postinc1	equ	0xFE6
 12893                           postdec1	equ	0xFE5
 12894                           fsr1h	equ	0xFE2
 12895                           fsr1l	equ	0xFE1
 12896                           indf2	equ	0xFDF
 12897                           postinc2	equ	0xFDE
 12898                           postdec2	equ	0xFDD
 12899                           fsr2h	equ	0xFDA
 12900                           fsr2l	equ	0xFD9
 12901                           status	equ	0xFD8
 12902                           
 12903 ;; *************** function i2___lwdiv *****************
 12904 ;; Defined at:
 12905 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 12906 ;; Parameters:    Size  Location     Type
 12907 ;;  dividend        2    0[COMRAM] unsigned int 
 12908 ;;  divisor         2    2[COMRAM] unsigned int 
 12909 ;; Auto vars:     Size  Location     Type
 12910 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 12911 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 12912 ;; Return value:  Size  Location     Type
 12913 ;;                  2    0[COMRAM] unsigned int 
 12914 ;; Registers used:
 12915 ;;		wreg, status,2, status,0
 12916 ;; Tracked objects:
 12917 ;;		On entry : 0/0
 12918 ;;		On exit  : 0/0
 12919 ;;		Unchanged: 0/0
 12920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12921 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12922 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12923 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12924 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12925 ;;Total ram usage:        7 bytes
 12926 ;; Hardware stack levels used:    1
 12927 ;; This function calls:
 12928 ;;		Nothing
 12929 ;; This function is called by:
 12930 ;;		i2__doprnt
 12931 ;; This function uses a non-reentrant model
 12932 ;;
 12933                           
 12934                           	psect	text40
 12935  00351A                     __ptext40:
 12936                           	opt stack 0
 12937  00351A                     i2___lwdiv:
 12938                           	opt stack 21
 12939                           
 12940                           ;incstack = 0
 12941  00351A  0E00               	movlw	0
 12942  00351C  6E06               	movwf	i2___lwdiv@quotient+1,c
 12943  00351E  0E00               	movlw	0
 12944  003520  6E05               	movwf	i2___lwdiv@quotient,c
 12945  003522  5003               	movf	i2___lwdiv@divisor,w,c
 12946  003524  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 12947  003526  B4D8               	btfsc	status,2,c
 12948  003528  D01C               	goto	i2l977
 12949  00352A  0E01               	movlw	1
 12950  00352C  6E07               	movwf	i2___lwdiv@counter,c
 12951  00352E  D004               	goto	i2l3164
 12952  003530                     i2l3162:
 12953  003530  90D8               	bcf	status,0,c
 12954  003532  3603               	rlcf	i2___lwdiv@divisor,f,c
 12955  003534  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 12956  003536  2A07               	incf	i2___lwdiv@counter,f,c
 12957  003538                     i2l3164:
 12958  003538  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 12959  00353A  D7FA               	goto	i2l3162
 12960  00353C                     i2l3166:
 12961  00353C  90D8               	bcf	status,0,c
 12962  00353E  3605               	rlcf	i2___lwdiv@quotient,f,c
 12963  003540  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 12964  003542  5003               	movf	i2___lwdiv@divisor,w,c
 12965  003544  5C01               	subwf	i2___lwdiv@dividend,w,c
 12966  003546  5004               	movf	i2___lwdiv@divisor+1,w,c
 12967  003548  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 12968  00354A  A0D8               	btfss	status,0,c
 12969  00354C  D005               	goto	i2l3174
 12970  00354E  5003               	movf	i2___lwdiv@divisor,w,c
 12971  003550  5E01               	subwf	i2___lwdiv@dividend,f,c
 12972  003552  5004               	movf	i2___lwdiv@divisor+1,w,c
 12973  003554  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 12974  003556  8005               	bsf	i2___lwdiv@quotient,0,c
 12975  003558                     i2l3174:
 12976  003558  90D8               	bcf	status,0,c
 12977  00355A  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 12978  00355C  3203               	rrcf	i2___lwdiv@divisor,f,c
 12979  00355E  2E07               	decfsz	i2___lwdiv@counter,f,c
 12980  003560  D7ED               	goto	i2l3166
 12981  003562                     i2l977:
 12982  003562  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 12983  003566  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 12984  00356A  0012               	return		;funcret
 12985  00356C                     __end_ofi2___lwdiv:
 12986                           	opt stack 0
 12987                           tosu	equ	0xFFF
 12988                           tosh	equ	0xFFE
 12989                           tosl	equ	0xFFD
 12990                           pclatu	equ	0xFFB
 12991                           pclath	equ	0xFFA
 12992                           tblptru	equ	0xFF8
 12993                           tblptrh	equ	0xFF7
 12994                           tblptrl	equ	0xFF6
 12995                           tablat	equ	0xFF5
 12996                           prodh	equ	0xFF4
 12997                           prodl	equ	0xFF3
 12998                           intcon	equ	0xFF2
 12999                           intcon2	equ	0xFF1
 13000                           intcon3	equ	0xFF0
 13001                           indf0	equ	0xFEF
 13002                           postinc0	equ	0xFEE
 13003                           fsr0h	equ	0xFEA
 13004                           fsr0l	equ	0xFE9
 13005                           wreg	equ	0xFE8
 13006                           indf1	equ	0xFE7
 13007                           postinc1	equ	0xFE6
 13008                           postdec1	equ	0xFE5
 13009                           fsr1h	equ	0xFE2
 13010                           fsr1l	equ	0xFE1
 13011                           indf2	equ	0xFDF
 13012                           postinc2	equ	0xFDE
 13013                           postdec2	equ	0xFDD
 13014                           fsr2h	equ	0xFDA
 13015                           fsr2l	equ	0xFD9
 13016                           status	equ	0xFD8
 13017                           
 13018 ;; *************** function i2_lcdInst *****************
 13019 ;; Defined at:
 13020 ;;		line 25 in file "lcd.c"
 13021 ;; Parameters:    Size  Location     Type
 13022 ;;  data            1    wreg     unsigned char 
 13023 ;; Auto vars:     Size  Location     Type
 13024 ;;  data            1    2[COMRAM] unsigned char 
 13025 ;; Return value:  Size  Location     Type
 13026 ;;                  1    wreg      void 
 13027 ;; Registers used:
 13028 ;;		wreg, status,2, status,0, cstack
 13029 ;; Tracked objects:
 13030 ;;		On entry : 0/0
 13031 ;;		On exit  : 0/0
 13032 ;;		Unchanged: 0/0
 13033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13034 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13035 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13036 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13037 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13038 ;;Total ram usage:        1 bytes
 13039 ;; Hardware stack levels used:    1
 13040 ;; Hardware stack levels required when called:    1
 13041 ;; This function calls:
 13042 ;;		i2_lcdNibble
 13043 ;; This function is called by:
 13044 ;;		_keypressed
 13045 ;; This function uses a non-reentrant model
 13046 ;;
 13047                           
 13048                           	psect	text41
 13049  00380C                     __ptext41:
 13050                           	opt stack 0
 13051  00380C                     i2_lcdInst:
 13052                           	opt stack 22
 13053                           
 13054                           ;incstack = 0
 13055                           ;i2lcdInst@data stored from wreg
 13056  00380C  6E03               	movwf	i2lcdInst@data,c
 13057                           
 13058                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 13059  00380E  948C               	bcf	3980,2,c	;volatile
 13060                           
 13061                           ;lcd.c: 27: lcdNibble(data);
 13062  003810  5003               	movf	i2lcdInst@data,w,c
 13063  003812  EC39  F01A         	call	i2_lcdNibble
 13064  003816  0012               	return		;funcret
 13065  003818                     __end_ofi2_lcdInst:
 13066                           	opt stack 0
 13067                           tosu	equ	0xFFF
 13068                           tosh	equ	0xFFE
 13069                           tosl	equ	0xFFD
 13070                           pclatu	equ	0xFFB
 13071                           pclath	equ	0xFFA
 13072                           tblptru	equ	0xFF8
 13073                           tblptrh	equ	0xFF7
 13074                           tblptrl	equ	0xFF6
 13075                           tablat	equ	0xFF5
 13076                           prodh	equ	0xFF4
 13077                           prodl	equ	0xFF3
 13078                           intcon	equ	0xFF2
 13079                           intcon2	equ	0xFF1
 13080                           intcon3	equ	0xFF0
 13081                           indf0	equ	0xFEF
 13082                           postinc0	equ	0xFEE
 13083                           fsr0h	equ	0xFEA
 13084                           fsr0l	equ	0xFE9
 13085                           wreg	equ	0xFE8
 13086                           indf1	equ	0xFE7
 13087                           postinc1	equ	0xFE6
 13088                           postdec1	equ	0xFE5
 13089                           fsr1h	equ	0xFE2
 13090                           fsr1l	equ	0xFE1
 13091                           indf2	equ	0xFDF
 13092                           postinc2	equ	0xFDE
 13093                           postdec2	equ	0xFDD
 13094                           fsr2h	equ	0xFDA
 13095                           fsr2l	equ	0xFD9
 13096                           status	equ	0xFD8
 13097                           
 13098 ;; *************** function i2_lcdNibble *****************
 13099 ;; Defined at:
 13100 ;;		line 35 in file "lcd.c"
 13101 ;; Parameters:    Size  Location     Type
 13102 ;;  data            1    wreg     unsigned char 
 13103 ;; Auto vars:     Size  Location     Type
 13104 ;;  data            1    1[COMRAM] unsigned char 
 13105 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 13106 ;; Return value:  Size  Location     Type
 13107 ;;                  1    wreg      void 
 13108 ;; Registers used:
 13109 ;;		wreg, status,2, status,0
 13110 ;; Tracked objects:
 13111 ;;		On entry : 0/0
 13112 ;;		On exit  : 0/0
 13113 ;;		Unchanged: 0/0
 13114 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13115 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13116 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13117 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13118 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13119 ;;Total ram usage:        2 bytes
 13120 ;; Hardware stack levels used:    1
 13121 ;; This function calls:
 13122 ;;		Nothing
 13123 ;; This function is called by:
 13124 ;;		i2_lcdInst
 13125 ;;		i2_putch
 13126 ;; This function uses a non-reentrant model
 13127 ;;
 13128                           
 13129                           	psect	text42
 13130  003472                     __ptext42:
 13131                           	opt stack 0
 13132  003472                     i2_lcdNibble:
 13133                           	opt stack 20
 13134                           
 13135                           ;incstack = 0
 13136                           ;i2lcdNibble@data stored from wreg
 13137  003472  6E02               	movwf	i2lcdNibble@data,c
 13138                           
 13139                           ;lcd.c: 37: char temp = data & 0xF0;
 13140  003474  5002               	movf	i2lcdNibble@data,w,c
 13141  003476  0BF0               	andlw	240
 13142  003478  6E01               	movwf	i2lcdNibble@temp,c
 13143                           
 13144                           ;lcd.c: 38: LATD = LATD & 0x0F;
 13145  00347A  508C               	movf	3980,w,c	;volatile
 13146  00347C  0B0F               	andlw	15
 13147  00347E  6E8C               	movwf	3980,c	;volatile
 13148                           
 13149                           ;lcd.c: 39: LATD = temp | LATD;
 13150  003480  5001               	movf	i2lcdNibble@temp,w,c
 13151  003482  108C               	iorwf	3980,w,c	;volatile
 13152  003484  6E8C               	movwf	3980,c	;volatile
 13153                           
 13154                           ;lcd.c: 41: LATDbits.LATD3 = 0;
 13155  003486  968C               	bcf	3980,3,c	;volatile
 13156                           
 13157                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
 13158  003488  0E14               	movlw	20
 13159  00348A                     i2u1326_47:
 13160  00348A  2EE8               	decfsz	wreg,f,c
 13161  00348C  D7FE               	bra	i2u1326_47
 13162  00348E  D000               	nop2	
 13163                           
 13164                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 13165  003490  868C               	bsf	3980,3,c	;volatile
 13166                           
 13167                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
 13168  003492  0E14               	movlw	20
 13169  003494                     i2u1327_47:
 13170  003494  2EE8               	decfsz	wreg,f,c
 13171  003496  D7FE               	bra	i2u1327_47
 13172  003498  D000               	nop2	
 13173                           
 13174                           ;lcd.c: 46: data = data << 4;
 13175  00349A  3802               	swapf	i2lcdNibble@data,w,c
 13176  00349C  0BF0               	andlw	240
 13177  00349E  6E02               	movwf	i2lcdNibble@data,c
 13178                           
 13179                           ;lcd.c: 48: temp = data & 0xF0;
 13180  0034A0  5002               	movf	i2lcdNibble@data,w,c
 13181  0034A2  0BF0               	andlw	240
 13182  0034A4  6E01               	movwf	i2lcdNibble@temp,c
 13183                           
 13184                           ;lcd.c: 49: LATD = LATD & 0x0F;
 13185  0034A6  508C               	movf	3980,w,c	;volatile
 13186  0034A8  0B0F               	andlw	15
 13187  0034AA  6E8C               	movwf	3980,c	;volatile
 13188                           
 13189                           ;lcd.c: 50: LATD = temp | LATD;
 13190  0034AC  5001               	movf	i2lcdNibble@temp,w,c
 13191  0034AE  108C               	iorwf	3980,w,c	;volatile
 13192  0034B0  6E8C               	movwf	3980,c	;volatile
 13193                           
 13194                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 13195  0034B2  968C               	bcf	3980,3,c	;volatile
 13196                           
 13197                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
 13198  0034B4  0E14               	movlw	20
 13199  0034B6                     i2u1328_47:
 13200  0034B6  2EE8               	decfsz	wreg,f,c
 13201  0034B8  D7FE               	bra	i2u1328_47
 13202  0034BA  D000               	nop2	
 13203                           
 13204                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 13205  0034BC  868C               	bsf	3980,3,c	;volatile
 13206                           
 13207                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
 13208  0034BE  0E14               	movlw	20
 13209  0034C0                     i2u1329_47:
 13210  0034C0  2EE8               	decfsz	wreg,f,c
 13211  0034C2  D7FE               	bra	i2u1329_47
 13212  0034C4  D000               	nop2	
 13213  0034C6  0012               	return		;funcret
 13214  0034C8                     __end_ofi2_lcdNibble:
 13215                           	opt stack 0
 13216                           tosu	equ	0xFFF
 13217                           tosh	equ	0xFFE
 13218                           tosl	equ	0xFFD
 13219                           pclatu	equ	0xFFB
 13220                           pclath	equ	0xFFA
 13221                           tblptru	equ	0xFF8
 13222                           tblptrh	equ	0xFF7
 13223                           tblptrl	equ	0xFF6
 13224                           tablat	equ	0xFF5
 13225                           prodh	equ	0xFF4
 13226                           prodl	equ	0xFF3
 13227                           intcon	equ	0xFF2
 13228                           intcon2	equ	0xFF1
 13229                           intcon3	equ	0xFF0
 13230                           indf0	equ	0xFEF
 13231                           postinc0	equ	0xFEE
 13232                           fsr0h	equ	0xFEA
 13233                           fsr0l	equ	0xFE9
 13234                           wreg	equ	0xFE8
 13235                           indf1	equ	0xFE7
 13236                           postinc1	equ	0xFE6
 13237                           postdec1	equ	0xFE5
 13238                           fsr1h	equ	0xFE2
 13239                           fsr1l	equ	0xFE1
 13240                           indf2	equ	0xFDF
 13241                           postinc2	equ	0xFDE
 13242                           postdec2	equ	0xFDD
 13243                           fsr2h	equ	0xFDA
 13244                           fsr2l	equ	0xFD9
 13245                           status	equ	0xFD8
 13246                           
 13247 ;; *************** function i2___awmod *****************
 13248 ;; Defined at:
 13249 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 13250 ;; Parameters:    Size  Location     Type
 13251 ;;  dividend        2    0[COMRAM] int 
 13252 ;;  divisor         2    2[COMRAM] int 
 13253 ;; Auto vars:     Size  Location     Type
 13254 ;;  __awmod         1    5[COMRAM] unsigned char 
 13255 ;;  __awmod         1    4[COMRAM] unsigned char 
 13256 ;; Return value:  Size  Location     Type
 13257 ;;                  2    0[COMRAM] int 
 13258 ;; Registers used:
 13259 ;;		wreg, status,2, status,0
 13260 ;; Tracked objects:
 13261 ;;		On entry : 0/0
 13262 ;;		On exit  : 0/0
 13263 ;;		Unchanged: 0/0
 13264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13265 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13266 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13268 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13269 ;;Total ram usage:        6 bytes
 13270 ;; Hardware stack levels used:    1
 13271 ;; This function calls:
 13272 ;;		Nothing
 13273 ;; This function is called by:
 13274 ;;		_keypressed
 13275 ;; This function uses a non-reentrant model
 13276 ;;
 13277                           
 13278                           	psect	text43
 13279  003220                     __ptext43:
 13280                           	opt stack 0
 13281  003220                     i2___awmod:
 13282                           	opt stack 23
 13283                           
 13284                           ;incstack = 0
 13285  003220  0E00               	movlw	0
 13286  003222  6E06               	movwf	i2___awmod@sign,c
 13287  003224  AE02               	btfss	i2___awmod@dividend+1,7,c
 13288  003226  D006               	goto	i2l4066
 13289  003228  6C01               	negf	i2___awmod@dividend,c
 13290  00322A  1E02               	comf	i2___awmod@dividend+1,f,c
 13291  00322C  B0D8               	btfsc	status,0,c
 13292  00322E  2A02               	incf	i2___awmod@dividend+1,f,c
 13293  003230  0E01               	movlw	1
 13294  003232  6E06               	movwf	i2___awmod@sign,c
 13295  003234                     i2l4066:
 13296  003234  AE04               	btfss	i2___awmod@divisor+1,7,c
 13297  003236  D004               	goto	i2l4070
 13298  003238  6C03               	negf	i2___awmod@divisor,c
 13299  00323A  1E04               	comf	i2___awmod@divisor+1,f,c
 13300  00323C  B0D8               	btfsc	status,0,c
 13301  00323E  2A04               	incf	i2___awmod@divisor+1,f,c
 13302  003240                     i2l4070:
 13303  003240  5003               	movf	i2___awmod@divisor,w,c
 13304  003242  1004               	iorwf	i2___awmod@divisor+1,w,c
 13305  003244  B4D8               	btfsc	status,2,c
 13306  003246  D018               	goto	i2l4086
 13307  003248  0E01               	movlw	1
 13308  00324A  6E05               	movwf	i2___awmod@counter,c
 13309  00324C  D004               	goto	i2l4076
 13310  00324E                     i2l4074:
 13311  00324E  90D8               	bcf	status,0,c
 13312  003250  3603               	rlcf	i2___awmod@divisor,f,c
 13313  003252  3604               	rlcf	i2___awmod@divisor+1,f,c
 13314  003254  2A05               	incf	i2___awmod@counter,f,c
 13315  003256                     i2l4076:
 13316  003256  AE04               	btfss	i2___awmod@divisor+1,7,c
 13317  003258  D7FA               	goto	i2l4074
 13318  00325A                     i2l4078:
 13319  00325A  5003               	movf	i2___awmod@divisor,w,c
 13320  00325C  5C01               	subwf	i2___awmod@dividend,w,c
 13321  00325E  5004               	movf	i2___awmod@divisor+1,w,c
 13322  003260  5802               	subwfb	i2___awmod@dividend+1,w,c
 13323  003262  A0D8               	btfss	status,0,c
 13324  003264  D004               	goto	i2l4082
 13325  003266  5003               	movf	i2___awmod@divisor,w,c
 13326  003268  5E01               	subwf	i2___awmod@dividend,f,c
 13327  00326A  5004               	movf	i2___awmod@divisor+1,w,c
 13328  00326C  5A02               	subwfb	i2___awmod@dividend+1,f,c
 13329  00326E                     i2l4082:
 13330  00326E  90D8               	bcf	status,0,c
 13331  003270  3204               	rrcf	i2___awmod@divisor+1,f,c
 13332  003272  3203               	rrcf	i2___awmod@divisor,f,c
 13333  003274  2E05               	decfsz	i2___awmod@counter,f,c
 13334  003276  D7F1               	goto	i2l4078
 13335  003278                     i2l4086:
 13336  003278  5006               	movf	i2___awmod@sign,w,c
 13337  00327A  B4D8               	btfsc	status,2,c
 13338  00327C  D004               	goto	i2l4090
 13339  00327E  6C01               	negf	i2___awmod@dividend,c
 13340  003280  1E02               	comf	i2___awmod@dividend+1,f,c
 13341  003282  B0D8               	btfsc	status,0,c
 13342  003284  2A02               	incf	i2___awmod@dividend+1,f,c
 13343  003286                     i2l4090:
 13344  003286  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 13345  00328A  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 13346  00328E  0012               	return	
 13347  003290                     __end_ofi2___awmod:
 13348                           	opt stack 0
 13349                           tosu	equ	0xFFF
 13350                           tosh	equ	0xFFE
 13351                           tosl	equ	0xFFD
 13352                           pclatu	equ	0xFFB
 13353                           pclath	equ	0xFFA
 13354                           tblptru	equ	0xFF8
 13355                           tblptrh	equ	0xFF7
 13356                           tblptrl	equ	0xFF6
 13357                           tablat	equ	0xFF5
 13358                           prodh	equ	0xFF4
 13359                           prodl	equ	0xFF3
 13360                           intcon	equ	0xFF2
 13361                           intcon2	equ	0xFF1
 13362                           intcon3	equ	0xFF0
 13363                           indf0	equ	0xFEF
 13364                           postinc0	equ	0xFEE
 13365                           fsr0h	equ	0xFEA
 13366                           fsr0l	equ	0xFE9
 13367                           wreg	equ	0xFE8
 13368                           indf1	equ	0xFE7
 13369                           postinc1	equ	0xFE6
 13370                           postdec1	equ	0xFE5
 13371                           fsr1h	equ	0xFE2
 13372                           fsr1l	equ	0xFE1
 13373                           indf2	equ	0xFDF
 13374                           postinc2	equ	0xFDE
 13375                           postdec2	equ	0xFDD
 13376                           fsr2h	equ	0xFDA
 13377                           fsr2l	equ	0xFD9
 13378                           status	equ	0xFD8
 13379                           tosu	equ	0xFFF
 13380                           tosh	equ	0xFFE
 13381                           tosl	equ	0xFFD
 13382                           pclatu	equ	0xFFB
 13383                           pclath	equ	0xFFA
 13384                           tblptru	equ	0xFF8
 13385                           tblptrh	equ	0xFF7
 13386                           tblptrl	equ	0xFF6
 13387                           tablat	equ	0xFF5
 13388                           prodh	equ	0xFF4
 13389                           prodl	equ	0xFF3
 13390                           intcon	equ	0xFF2
 13391                           intcon2	equ	0xFF1
 13392                           intcon3	equ	0xFF0
 13393                           indf0	equ	0xFEF
 13394                           postinc0	equ	0xFEE
 13395                           fsr0h	equ	0xFEA
 13396                           fsr0l	equ	0xFE9
 13397                           wreg	equ	0xFE8
 13398                           indf1	equ	0xFE7
 13399                           postinc1	equ	0xFE6
 13400                           postdec1	equ	0xFE5
 13401                           fsr1h	equ	0xFE2
 13402                           fsr1l	equ	0xFE1
 13403                           indf2	equ	0xFDF
 13404                           postinc2	equ	0xFDE
 13405                           postdec2	equ	0xFDD
 13406                           fsr2h	equ	0xFDA
 13407                           fsr2l	equ	0xFD9
 13408                           status	equ	0xFD8
 13409                           
 13410                           	psect	text44
 13411  000000                     __ptext44:
 13412                           	opt stack 0
 13413                           tosu	equ	0xFFF
 13414                           tosh	equ	0xFFE
 13415                           tosl	equ	0xFFD
 13416                           pclatu	equ	0xFFB
 13417                           pclath	equ	0xFFA
 13418                           tblptru	equ	0xFF8
 13419                           tblptrh	equ	0xFF7
 13420                           tblptrl	equ	0xFF6
 13421                           tablat	equ	0xFF5
 13422                           prodh	equ	0xFF4
 13423                           prodl	equ	0xFF3
 13424                           intcon	equ	0xFF2
 13425                           intcon2	equ	0xFF1
 13426                           intcon3	equ	0xFF0
 13427                           indf0	equ	0xFEF
 13428                           postinc0	equ	0xFEE
 13429                           fsr0h	equ	0xFEA
 13430                           fsr0l	equ	0xFE9
 13431                           wreg	equ	0xFE8
 13432                           indf1	equ	0xFE7
 13433                           postinc1	equ	0xFE6
 13434                           postdec1	equ	0xFE5
 13435                           fsr1h	equ	0xFE2
 13436                           fsr1l	equ	0xFE1
 13437                           indf2	equ	0xFDF
 13438                           postinc2	equ	0xFDE
 13439                           postdec2	equ	0xFDD
 13440                           fsr2h	equ	0xFDA
 13441                           fsr2l	equ	0xFD9
 13442                           status	equ	0xFD8
 13443                           
 13444                           	psect	rparam
 13445  0000                     tosu	equ	0xFFF
 13446                           tosh	equ	0xFFE
 13447                           tosl	equ	0xFFD
 13448                           pclatu	equ	0xFFB
 13449                           pclath	equ	0xFFA
 13450                           tblptru	equ	0xFF8
 13451                           tblptrh	equ	0xFF7
 13452                           tblptrl	equ	0xFF6
 13453                           tablat	equ	0xFF5
 13454                           prodh	equ	0xFF4
 13455                           prodl	equ	0xFF3
 13456                           intcon	equ	0xFF2
 13457                           intcon2	equ	0xFF1
 13458                           intcon3	equ	0xFF0
 13459                           indf0	equ	0xFEF
 13460                           postinc0	equ	0xFEE
 13461                           fsr0h	equ	0xFEA
 13462                           fsr0l	equ	0xFE9
 13463                           wreg	equ	0xFE8
 13464                           indf1	equ	0xFE7
 13465                           postinc1	equ	0xFE6
 13466                           postdec1	equ	0xFE5
 13467                           fsr1h	equ	0xFE2
 13468                           fsr1l	equ	0xFE1
 13469                           indf2	equ	0xFDF
 13470                           postinc2	equ	0xFDE
 13471                           postdec2	equ	0xFDD
 13472                           fsr2h	equ	0xFDA
 13473                           fsr2l	equ	0xFD9
 13474                           status	equ	0xFD8
 13475                           
 13476                           	psect	temp
 13477  00007A                     btemp:
 13478                           	opt stack 0
 13479  00007A                     	ds	1
 13480  0000                     int$flags	set	btemp
 13481                           tosu	equ	0xFFF
 13482                           tosh	equ	0xFFE
 13483                           tosl	equ	0xFFD
 13484                           pclatu	equ	0xFFB
 13485                           pclath	equ	0xFFA
 13486                           tblptru	equ	0xFF8
 13487                           tblptrh	equ	0xFF7
 13488                           tblptrl	equ	0xFF6
 13489                           tablat	equ	0xFF5
 13490                           prodh	equ	0xFF4
 13491                           prodl	equ	0xFF3
 13492                           intcon	equ	0xFF2
 13493                           intcon2	equ	0xFF1
 13494                           intcon3	equ	0xFF0
 13495                           indf0	equ	0xFEF
 13496                           postinc0	equ	0xFEE
 13497                           fsr0h	equ	0xFEA
 13498                           fsr0l	equ	0xFE9
 13499                           wreg	equ	0xFE8
 13500                           indf1	equ	0xFE7
 13501                           postinc1	equ	0xFE6
 13502                           postdec1	equ	0xFE5
 13503                           fsr1h	equ	0xFE2
 13504                           fsr1l	equ	0xFE1
 13505                           indf2	equ	0xFDF
 13506                           postinc2	equ	0xFDE
 13507                           postdec2	equ	0xFDD
 13508                           fsr2h	equ	0xFDA
 13509                           fsr2l	equ	0xFD9
 13510                           status	equ	0xFD8


Data Sizes:
    Strings     240
    Constant    42
    Data        754
    BSS         197
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     61     121
    BANK0           128     66     127
    BANK1           256      0     110
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    display_menu$1148	PTR const unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[20]), STR_9(CODE[20]), STR_8(CODE[22]), STR_7(CODE[19]), 
		 -> menu(BIGRAM[720]), STR_6(CODE[15]), STR_5(CODE[6]), STR_4(CODE[14]), 
		 -> STR_3(CODE[12]), STR_2(CODE[23]), STR_1(CODE[23]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_17(CODE[14]), STR_16(CODE[15]), STR_15(CODE[8]), display1(BANK1[18]), 
		 -> display0(BANK1[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> i2_putch(), Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), NULL(NULL[0]), STR_18(CODE[7]), 
		 -> _doprnt@c(BANK0[1]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_17(CODE[14]), STR_16(CODE[15]), STR_15(CODE[8]), STR_14(CODE[5]), 
		 -> STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), STR_10(CODE[20]), 
		 -> STR_9(CODE[20]), STR_8(CODE[22]), STR_7(CODE[19]), menu(BIGRAM[720]), 
		 -> STR_6(CODE[15]), STR_5(CODE[6]), STR_4(CODE[14]), STR_3(CODE[12]), 
		 -> STR_2(CODE[23]), STR_1(CODE[23]), display1(BANK1[18]), display0(BANK1[18]), 

    S501__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S501__prbuf$ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    display_menu@menuSizePtr	PTR int  size(2) Largest target is 2
		 -> endSize(BANK0[2]), menuSize(BANK0[2]), creditSize(BANK0[2]), events(BANK0[2]), 

    display_menu@menuIndexPtr	PTR int  size(2) Largest target is 2
		 -> endIndex(BANK0[2]), creditIndex(BANK0[2]), logIndex(BANK0[2]), menuIndex(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    i2_printf->i2__doprnt
    i2__doprnt->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _update_state->_sprintf
    _update_lcd->_printf
    _printf->__doprnt
    _update_display->_display_menu
    _display_menu->_sprintf
    _sprintf->__doprnt
    __doprnt->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _update_RTC->___wmul
    _I2C_Master_Read->_I2C_Master_Wait
    _sort->__measure
    __measure->___awmod
    _set_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _read_sensors->_readADC
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   94499
                                             65 BANK0      1     1      0
                    _I2C_Master_Init
                            _initLCD
                       _read_sensors
                           _set_time
                               _sort
                         _update_RTC
                     _update_display
                         _update_lcd
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         4     4      0   21122
                                             50 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     599
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _update_lcd                                           7     7      0   15264
                                             42 BANK0      3     3      0
                            _lcdInst
                             _printf
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     417
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4     441
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     6      2   14096
                                             34 BANK0      8     6      2
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _update_display                                       2     2      0   46403
                           __measure
                       _display_menu
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _display_menu                                        25    25      0   25080
                                             50 BANK0     15    15      0
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             16     6     10   17904
                                             34 BANK0     16     6     10
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            __doprnt
                           __measure (ARG)
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             26    20      6   11868
                                             12 BANK0     22    16      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _update_RTC                                           5     5      0    3606
                                              6 BANK0      5     5      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _sort                                                 6     6      0    6405
                                             20 BANK0      6     6      0
                             ___wmul
                           __measure
 ---------------------------------------------------------------------------------
 (2) __measure                                            14    12      2    3419
                                              6 BANK0     14    12      2
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    2309
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2856
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0     592
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     493
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_sensors                                         5     5      0     409
                                              2 BANK0      5     5      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _keypressed                                          19    19      0   11412
                                             42 COMRAM    19    19      0
                          i2___awmod
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_printf                                             8     6      2    8568
                                             34 COMRAM     8     6      2
                          i2__doprnt
 ---------------------------------------------------------------------------------
 (9) i2__doprnt                                           26    20      6    8036
                                             12 COMRAM    22    16      6
                   Absolute function *
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch *
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i2___awmod                                            6     2      4     504
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _read_sensors
     _readADC
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _sort
     ___wmul
     __measure
       ___awmod
   _update_RTC
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
   _update_display
     __measure
       ___awmod
     _display_menu
       ___wmul
       _sprintf
         ___awdiv (ARG)
         ___awmod (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
         __measure (ARG)
           ___awmod
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
       __measure (ARG)
         ___awmod
   _update_lcd
     _lcdInst
       _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _strcmp
     _strcpy
   _update_state
     ___awdiv
     ___awmod
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
       __measure (ARG)
         ___awmod

 _keypressed (ROOT)
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2__doprnt
       Absolute function(Fake) *
       i2___lwdiv *
       i2___lwmod *
         i2___lwdiv (ARG)
       i2___wmul *
       i2_isdigit *
       i2_putch *
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0     2D0      37       18.1%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      6E       7       43.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     42      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3D      79       1       96.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     166      34        0.0%
DATA                 0      0     436       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Feb 25 18:03:32 2017

             _update_state 2360                         l34 37DC               ___awdiv@sign 0085  
      ___wmul@multiplicand 0082         i2___lwdiv@dividend 0001                __CFG_BORV$3 000000  
           _update_display 2C3A               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l503 0480                        l465 2086                        l924 2FD4  
                      l977 3216                        l987 3350                        _IR1 0056  
             __CFG_CPB$OFF 000000                        _IR2 011C              ?_display_menu 0001  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
             ___awmod@sign 0085                        prod 000FF3                        tosl 000FFD  
                      wreg 000FE8               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     l5000 2F0C                       l5004 2F20                       l5014 2F58  
                     l5016 2F68                       l5026 2FC2                       l5018 2F6E  
                     l4410 331E                       l4414 3342                       l4406 330C  
                     l4408 3318                       l4370 375A                       l4700 3706  
                     l5318 27F2                       l5270 3380                       l5422 2A14  
                     l5414 29DC                       l4390 31D8                       l5280 33B6  
                     l5352 28F2                       l4712 341E                       l5274 338A  
                     l4802 1CC0                       l5426 2A30                       l5418 29F8  
                     l5362 2944                       l5290 2B14                       l4386 31C6  
                     l4714 342A                       l8010 2576                       l4660 3026  
                     l4652 3002                       l4820 1D22                       l4804 1CC6  
                     l5356 2908                       l5348 28E0                       l4388 31D2  
                     l4724 36B8                       l8004 2558                       l4662 3032  
                     l4910 1F66                       l4822 1D28                       l4814 1CF4  
                     l5382 29AA                       l5374 2982                       l5286 2B0A  
                     l4398 3208                       l4718 3462                       l4726 36C4  
                     l8014 2592                       l8110 317C                       l8102 3164  
                     l4664 3038                       l4672 306A                       l4656 3012  
                     l4912 1F6C                       l4904 1F38                       l4840 1D9C  
                     l4832 1D68                       l4808 1CD0                       l8040 2D0A  
                     l8024 25D2                       l4922 1FAC                       l4850 1DDC  
                     l4826 1D32                       l5378 2996                       l5386 29C0  
                     l5298 2BA2                       l8034 2C3C                       l4676 307E  
                     l4668 305C                       l4940 201A                       l4916 1F76  
                     l4844 1DA6                       l5388 29C6                       l8036 2CA6  
                     l8044 2D44                       l8060 2E14                       l8028 25E6  
                     l8116 3188                       l4950 207A                       l4862 1E1A  
                     l4838 1D96                       l4790 1C6E                       l8038 2CAC  
                     l8054 2DC6                       l4960 3722                       l4936 2000  
                     l4928 1FDA                       l4880 1E8E                       l4856 1E0A  
                     l7600 0574                       l7520 024C                       _ADFM 007E07  
                     l4962 3734                       l4874 1E7E                       l4858 1E10  
                     l4786 1C64                       l7602 0586                       l7530 02C4  
                     l7514 01FA                       l7506 01B4                       l4892 1EF2  
                     l4876 1E84                       l4868 1E50                       l4796 1C92  
                     l7612 05E0                       l7540 036C                       l7524 0272  
                     l7516 0206                       l7508 01BA                       l4972 2E88  
                     l4894 1EF8                       l4886 1EC4                       l7622 0644  
                     l7614 05EA                       l7550 03DC                       l7542 0374  
                     l7526 027E                       l7534 02EE                       l7518 020C  
                     l7710 17E6                       l7640 0700                       l7632 06C0  
                     l7608 05A8                       l7552 0402                       l7536 0306  
                     l7704 17C6                       l4984 2EBC                       l4898 1F02  
                     l7650 0784                       l7626 066E                       l7570 04F0  
                     l7482 006A                       l7722 1834                       l7730 1872  
                     l4986 2EC8                       l4978 2E9E                       l7644 0746  
                     l7636 06EA                       l7660 0802                       l7572 04F6  
                     l7548 03C4                       l7492 00B4                       l7476 0016  
                     l7740 19D2                       l7716 1806                       l4996 2EFE  
                     l4988 2ECE                       l7662 0808                       l7670 08B4  
                     l7638 06F4                       l7558 041A                       l7486 0098  
                     l7664 085A                       l7672 08C6                       l7680 0938  
                     l7656 07D8                       l7648 0770                       l7584 0532  
                     l7568 04C6                       l7488 00AA                       l7728 1858  
                     l7586 0538                       l7498 0110                       l7682 0944  
                     l7746 1B12                       l7676 090E                       l7684 098A  
                     _ADON 007E10                       l7970 2374                       l7980 23A8  
                     l7974 2388                       l7976 2392                       l7986 23E4  
                     l7996 2468                       STR_1 FF0F                       STR_2 FF26  
                     STR_3 FFD9                       STR_4 FFBD                       STR_5 FFF4  
                     STR_6 FF9F                       STR_7 FF7B                       STR_8 FF3D  
                     STR_9 FF53                       _LATB 000F8A                       _LATC 000F8B  
                     _LATD 000F8C                       u6410 1D58                       u6420 1D5A  
                     _RCEN 007E2B                       u6510 1E40                       u6270 3704  
                     u6520 1E42                       u6610 1F28                       u6620 1F2A  
                     u6460 1DCC                       u6470 1DCE                       u6560 1EB4  
                     u6570 1EB6                       u7610 29F0                       u6660 1F9C  
                     u7620 2A0C                       u6670 1F9E                       u7630 2A28  
                     u7640 2AC6                       u7474 2864                       u7395 33EC  
                     u7475 285E                       u7484 288C                       u7485 2886  
                     _RSEN 007E29                       _main 311A                i2__doprnt@c 0022  
              i2__doprnt@f 000F                       _menu 016E                       _keys FEE5  
                     _time 00C2                       fsr0h 000FEA                       fsr1h 000FE2  
       i2___lwdiv@quotient 0005                       indf0 000FEF                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf1 000FE7                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       _sort 28A2  
                     btemp 007A                       prodh 000FF4                       prodl 000FF3  
                     start 000E              __CFG_IESO$OFF 000000            __end_ofi2_putch 380C  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                i2_lcdNibble 3472  
   __end_of_update_display 2D6E         _discretize_counter 00CD           ?_I2C_Master_Init 008D  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
           ??_display_menu 00B2                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D            __end_of___awdiv 2F2A                      STR_10 FF67  
                    STR_11 FFFA                      STR_12 FFFA                      STR_13 FFFA  
                    STR_14 FFFA                      STR_15 FFE5                      STR_16 FFAE  
                    STR_17 FFCB                      STR_18 FFED                      STR_19 FF8E  
          __end_of___awmod 3088                      ?_sort 0001            __end_of___lldiv 2FE6  
                    _DIST1 004C                      u12030 097C                      u12018 08F6  
          ___awdiv@divisor 0082                      u12037 0972                      u11700 036A  
                    u11620 0246                      u11710 03AE                      u11550 00D6  
                    u13207 35BE                      u11560 00FE                      u13217 35F4  
                    u11730 0452                      u13227 32B0                      u11707 0360  
                    u11627 023C                      u11580 015C                      u11548 0052  
                    u13237 32BA                      u11717 03A4                      u11557 00CC  
                    u11590 01AA                      u13247 32E6                      u11567 00F4  
                    u13257 32F0                      u11737 0448                      u13177 319C  
                    u12730 258C                      u11587 0152                      u13187 2E2E  
                    u11668 02AE                      u13197 372A                      u11597 01A0  
                    u11918 06AA                      u12670 2462                      u11698 0336  
                    u11958 0730                      u11888 062E                      u11998 07C2  
          __end_of___lwdiv 3220            __end_of___lwmod 335A                      i2l503 0D74  
                    i2l348 177C                      i2l385 177E            ___awdiv@counter 0084  
                    i2l977 3562                      i2l987 3638                      _PORTB 000F81  
                    _PROX1 0060                      _PROX2 006A            __end_of__doprnt 0996  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst 3800             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
                    _nRBPU 007F8F              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_readADC 373A            __end_of_initLCD 3600  
           __CFG_EBTRB$OFF 000000                 i2isdigit@c 0003            __end_of_dpowers FF00  
             i2__doprnt@ap 0011               i2__doprnt@cp 001B               i2__doprnt@pb 000D  
          __end_of_isdigit 3764                      _state 00EE                      _putch 37C6  
                    pclath 000FFA                      tablat 000FF5           __end_ofi2___wmul 378A  
                    sort@i 0098                      status 000FD8            __end_of_sprintf 351A  
       __size_ofi2___awmod 0070             __CFG_PBADEN$ON 000000           __end_ofi2_printf 36AE  
       __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042         __size_ofi2__doprnt 0858  
          __initialization 3088         __size_ofi2_lcdInst 000C               __end_of_main 31A8  
             __end_of_keys FEF6               __end_of_sort 2ACE                 i2printf@ap 0025  
               i2printf@pb 0027            ?_update_display 0001         __size_ofi2_isdigit 001E  
          _IR_THRESHOLD_HI 00E5                     ??_main 00C1                     ??_sort 0094  
            __activetblptr 000003          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0081  
   _latestSortedBottleTime 0100         ??_I2C_Master_Start 0081                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 0083                     _ADRESH 000FC4  
                   _ADRESL 000FC3           ___awdiv@dividend 0080            i2lcdNibble@data 0002  
                   ?_putch 0001            i2lcdNibble@temp 0001                     _INT1IE 007F83  
                   _INT1IF 007F80                     _CVRCON 000FB5                     i2l3152 37BE  
                   i2l3162 3530                     i2l3164 3538                     i2l4070 3240  
                   i2l3174 3558                     i2l3166 353C                     i2l3190 362E  
                   i2l3182 360E                     i2l3184 3616                     i2l4090 3286  
                   i2l4082 326E                     i2l4074 324E                     i2l4066 3234  
                   i2l3186 361A                     i2l4076 3256                     i2l4078 325A  
                   i2l4086 3278                     i2l8202 1452                     i2l8220 14E0  
                   i2l8204 145A                     i2l8132 124E                     i2l8230 1544  
                   i2l8214 149C                     i2l8150 1304                     i2l8126 1236  
                   i2l8208 146A                     i2l8160 1332                     i2l8144 12C4  
                   i2l8128 123E                     i2l8242 15CC                     i2l8226 1520  
                   i2l8154 1326                     i2l8170 135E                     i2l8138 1280  
                   i2l8260 1698                     i2l8236 1588                     i2l8228 1540  
                   i2l8180 139C                     i2l8156 132A                     i2l8254 1654  
                   i2l8174 1384                     i2l8158 132E                     i2l8272 171C  
                   i2l8248 1610                     i2l8192 1412                     i2l8176 138C  
                   i2l8280 1752                     i2l7802 0B9A                     i2l8266 16DC  
                   i2l8258 1694                     i2l8186 13CE                     i2l7900 0EEE  
                   i2l7820 0C86                     i2l7804 0BA4                     i2l7812 0C0E  
                   i2l8276 1744                     i2l7910 0F60                     i2l7830 0D0A  
                   i2l7814 0C20                     i2l7904 0F18                     i2l7808 0BE4  
                   i2l7760 09E2                     i2l7922 0FDA                     i2l7914 0F8A  
                   i2l7850 0DE0                     i2l7818 0C80                     i2l7826 0CD4  
                   i2l7770 0A22                     i2l7754 099A                     i2l7940 108E  
                   i2l7916 0F92                     i2l7828 0CE6                     i2l7836 0D1C  
                   i2l7764 0A0E                     i2l7942 10D8                     i2l7950 113A  
                   i2l7934 105E                     i2l7926 1004                     i2l7918 0F9A  
                   i2l7862 0E12                     i2l7846 0DB2                     i2l7766 0A1C  
                   i2l7928 1012                     i2l7864 0E16                     i2l7880 0E58  
                   i2l7848 0DDC                     i2l7792 0B42                     i2l7784 0B06  
                   i2l7776 0A7C                     i2l7960 11AC                     i2l7954 117A  
                   i2l7938 1088                     i2l7890 0E96                     i2l7794 0B4C  
                   i2l7786 0B0A                     i2l7962 11E4                     i2l7948 112A  
                   i2l7892 0E9E                     i2l7796 0B50                     i2l7958 11A4  
                   i2l7886 0E72                     i2l7878 0E48                     i2l7798 0B84  
                ??i2_putch 0003                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9           __end_of__measure 2090  
           __CFG_XINST$OFF 000000                     ___wmul 3642                  ??___awdiv 0084  
           __CFG_STVREN$ON 000000                  ??___awmod 0084                  ??___lldiv 0088  
                ??___lwdiv 0084                  ??___lwmod 008B              ?_read_sensors 0001  
          _release_counter 00D5                  ??__doprnt 0092                     _events 00F7  
            i2__doprnt@idx 0017              i2__doprnt@len 0019              i2__doprnt@val 001D  
                   clear_0 30F2                     clear_1 30FE                     clear_2 310A  
         ___awdiv@quotient 0086            ___awmod@divisor 0082                     _time_i 003E  
             __doprnt@flag 009E                     _nstate 00ED            ___awmod@counter 0084  
                ??_lcdInst 0082                     _printf 356C               __doprnt@prec 0097  
                   _strcmp 341C                     _strcpy 36AE                  ??_readADC 0080  
                ??_initLCD 0083               __pdataBIGRAM 016E               __pdataCOMRAM 0076  
                ??_isdigit 0080           __end_of_set_time 33BC          __end_ofi2___awmod 3290  
        __end_ofi2___lwdiv 356C               __mediumconst FEE4          __end_ofi2___lwmod 3642  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
        __end_ofi2__doprnt 11EE             i2___awmod@sign 0006          __end_ofi2_lcdInst 3818  
                ??_sprintf 00AC          __end_ofi2_isdigit 37C6                 __accesstop 0080  
  __end_of__initialization 3110       __end_of_display_menu 1C54              ___rparam_used 000001  
display_menu@menuSelection 00BB         i2___lwmod@dividend 0008             __pcstackCOMRAM 0001  
             __pidataBANK0 378A             ??_read_sensors 0082              __end_of_putch 37DC  
                ?i2___wmul 0001         __size_of_lcdNibble 0068                i2putch@data 0003  
              keypressed@i 003B                  ?i2_printf 0023              update_state@i 00B4  
         _IR_THRESHOLD_LOW 00E7                 __doprnt@ap 0090                 __doprnt@cp 009A  
               __doprnt@pb 008C                 __measure@i 008A                    ??_putch 0082  
               __pbssBANK0 00C2                 __pbssBANK1 0100               ?i2_lcdNibble 0001  
                  ?___wmul 0080             _sorted_bottles 00D9                    ?_printf 00A2  
                  ?_strcmp 0080                    ?_strcpy 0080                 ??i2___wmul 0005  
                  _IR1_PIN 0077                    _IR2_PIN 0078                 _creditSize 00F1  
                ?__measure 0086                 _discretize 00CB       __measure@measurement 0092  
               ??i2_printf 0025                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7                    i2_putch 3800          __end_of_lcdNibble 32F8  
         ??_update_display 00C1                    __Hparam 0000                    __Lparam 0000  
           _manualDateTime FF08                  ?_set_time 0001                    ___awdiv 2E6C  
                  ___awmod 2FE6                    ___lldiv 2F2A            __size_of___wmul 0036  
                  ___lwdiv 31A8                    ___lwmod 32F8                  _CMCONbits 000FB4  
                  __doprnt 0012                  _DIST1_PIN 0074                    __pcinit 3088  
                  __ramtop 1000                    _endSize 00F5                    _lcdInst 37F0  
                  __ptext0 311A                    __ptext1 2360                    __ptext2 2E6C  
                  __ptext3 2D6E                    __ptext4 36AE                    __ptext5 341C  
                  __ptext6 356C                    __ptext7 2C3A                    __ptext8 17BA  
                  __ptext9 34C8            __size_of_printf 004A            __size_of_strcmp 0056  
                  _readADC 370E            __size_of_strcpy 0032                    _initLCD 35B6  
        __end_of_hexpowers FF08              i2_isdigit$761 0002                    _dpowers FEF6  
                  _measure 00E9                    _isdigit 373A                 ??__measure 0088  
           i2__doprnt@flag 001F           ___awmod@dividend 0080             i2__doprnt@prec 0018  
                  _release 00EB                 _keypressed 0008   __size_of_I2C_Master_Init 0060  
 __size_of_I2C_Master_Read 002E   __size_of_I2C_Master_Wait 0014   __size_of_I2C_Master_Stop 0008  
                  _runTime 00D7                    _yopWCap 00DF                    _sprintf 34C8  
            __doprnt@width 009F      __size_of_display_menu 049A             __pintcode_body 11EE  
       _DIST_THRESHOLD_LOW 00E3       end_of_initialization 3110       __end_of_read_sensors 28A2  
                  int_func 11EE        i2___wmul@multiplier 0001                  i2u1210_40 0A44  
                i2u1210_47 0A3A                  i2u1211_40 0A6C                  i2u1211_47 0A62  
                i2u1213_40 0AC2                  i2u1213_47 0AB8                  i2u1221_48 0BD0  
                i2u1214_40 0AFC                  i2u1214_47 0AF2                  i2u1304_40 1516  
                i2u1225_40 0C7E                  i2u1224_48 0C4C                  i2u1217_40 0B7E  
                i2u1225_47 0C74                  i2u1217_47 0B74                  i2u1226_40 0CC0  
                i2u1209_48 09CE                  i2u1226_47 0CB6                  i2u1250_48 0FC6  
                i2u1315_40 1712                  i2u1243_48 0EDA                  i2u1228_40 0D4A  
                i2u1228_47 0D40                  i2u1326_47 348A                  i2u1254_48 104A  
                i2u1246_48 0F4C                  i2u1327_47 3494                  i2u1328_47 34B6  
                i2u1256_48 1166                  i2u1329_47 34C0                  i2u1258_40 11DA  
                i2u1290_40 12FA                  i2u1258_47 11D0                  i2u1297_40 1448  
   __end_of_manualDateTime FF0F  __size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A  
          ___lldiv@divisor 0084            ___lldiv@counter 008C                 ??_set_time 0083  
                  printf@f 00A2           I2C_Master_Init@c 008D           I2C_Master_Read@a 0081  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE                    strcmp@r 0085  
                _PROX1_PIN 0075                  _PROX2_PIN 0079               _display_menu 17BA  
               _update_RTC 2ACE                 _update_lcd 2D6E                  i2___awmod 3220  
        i2___lwdiv@divisor 0003                  i2___lwdiv 351A                  i2___lwmod 3600  
        i2___lwdiv@counter 0007                  i2__doprnt 0996                  i2_lcdInst 380C  
                i2_isdigit 37A8              ?_update_state 0001              __pidataBIGRAM 2090  
           __end_of___wmul 3678       __size_ofi2_lcdNibble 0056              __pidataCOMRAM 3832  
            i2lcdInst@data 0003           i2___wmul@product 0005             __end_of_printf 35B6  
              update_RTC@i 008A             __end_of_strcmp 3472             __end_of_strcpy 36E0  
           update_lcd@flag 00AB        start_initialization 3088                ?_keypressed 0001  
        __size_ofi2___wmul 0026                  i2printf@f 0023                 ?i2___awmod 0001  
               ?i2___lwdiv 0001                 ?i2___lwmod 0008          __size_ofi2_printf 0036  
               ?i2__doprnt 000D          ??_I2C_Master_Init 0091          ??_I2C_Master_Read 0081  
        ??_I2C_Master_Wait 0080                 ?i2_lcdInst 0001          ??_I2C_Master_Stop 0081  
               ?i2_isdigit 0001             ??_update_state 00B2                   ??___wmul 0084  
              __doprnt@idx 0096                __doprnt@len 0098                __doprnt@val 009C  
              __pdataBANK0 00E1           __CFG_LPT1OSC$OFF 000000                   ??_printf 00A4  
                 ??_strcmp 0084                   ??_strcpy 0084                __pbssCOMRAM 003E  
              ?_update_RTC 0001      __size_of_read_sensors 0288              __pcstackBANK0 0080  
              ?_update_lcd 0001          i2___lwmod@divisor 000A          __size_of__measure 043C  
        i2___lwmod@counter 000C                   ?i2_putch 0001                  __doprnt@c 00A1  
                __doprnt@f 008E           _I2C_Master_Start 382A           _I2C_Master_Write 3818  
         ___lwdiv@dividend 0080          __CFG_CCP2MX$PORTC 000000        __size_of_keypressed 17B2  
                __pintcode 0008              __pmediumconst FEE4                  _lcdNibble 3290  
                 ?___awdiv 0080                   ?___awmod 0080                   ?___lldiv 0080  
                 ?___lwdiv 0080                   ?___lwmod 0087          __size_of_set_time 0062  
                 ?__doprnt 008C               _read_sensors 261A                   ?_lcdInst 0001  
                _eskaNoCap 00CF                   ?_readADC 0001                   ?_initLCD 0001  
        _display_menu$1148 00BD                   ?_isdigit 0001                  _hexpowers FF00  
                _menuIndex 00FB           ___lwdiv@quotient 0085                ??i2___awmod 0005  
                 ?_sprintf 00A2                ??i2___lwdiv 0005                  _ndisplay0 014A  
              ??i2___lwmod 000C                  _ndisplay1 015C             __size_of_putch 0016  
              ??i2__doprnt 0013                _creditIndex 00EF                ??i2_lcdInst 0003  
           ___wmul@product 0084                   _LATDbits 000F8C          _DIST_THRESHOLD_HI 00E1  
              ??i2_isdigit 0001        __size_of_update_RTC 016C           __CFG_WDTPS$32768 000000  
               ?_lcdNibble 0001        __size_of_update_lcd 00FE                 _ADCON0bits 000FC2  
        ___wmul@multiplier 0080                  _startTime 010E                   i2___wmul 3764  
            lcdNibble@data 0081              lcdNibble@temp 0080                   i2_printf 3678  
     __end_of_update_state 261A        I2C_Master_Read@temp 0082                _bottle_type 00C9  
                copy_data0 309C                  copy_data1 30C0                  copy_data2 30E0  
       i2___awmod@dividend 0001           __size_ofi2_putch 000C         keypressed@keypress 003D  
                 __Hrparam 0000                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
         __size_of___awdiv 00BE           __size_of___awmod 00A2      i2___wmul@multiplicand 0003  
         __size_of___lldiv 00BC           __size_of___lwdiv 0078           __size_of___lwmod 0062  
           readADC@channel 0081           __size_of__doprnt 0984    __size_of_update_display 0134  
              _isdigit$761 0081            _putch$intlevel0 37CC   display_menu@menuIndexPtr 00BF  
         __size_of_lcdInst 0010                   __measure 1C54            _I2C_Master_Init 33BC  
         __size_of_readADC 002C            _I2C_Master_Read 36E0           __size_of_initLCD 004A  
          _I2C_Master_Wait 37DC            _I2C_Master_Stop 3822                 _DIST1_TRIG 0076  
             ??_keypressed 002B           __size_of_isdigit 002A                   _endIndex 00F3  
          ___lwdiv@divisor 0082            ___lwdiv@counter 0084                   __ptext10 0012  
                 __ptext11 37C6                   __ptext20 3642                   __ptext12 373A  
                 __ptext21 335A                   __ptext13 32F8                   __ptext30 3290  
                 __ptext22 3818                   __ptext14 31A8                   __ptext31 33BC  
                 __ptext23 3822                   __ptext15 2ACE                   __ptext40 351A  
                 __ptext32 2F2A                   __ptext24 382A                   __ptext16 36E0  
                 __ptext41 380C                   __ptext25 37DC                   __ptext17 28A2  
                 __ptext42 3472                   __ptext34 3678                   __ptext26 261A  
                 __ptext18 1C54                   __ptext43 3220                   __ptext35 0996  
                 __ptext27 370E                   __ptext19 2FE6                   __ptext44 0000  
                 __ptext36 3800                   __ptext28 35B6                   __ptext37 37A8  
                 __ptext29 37F0                   __ptext38 3764                   __ptext39 3600  
                 _display0 0126                   _eskaWCap 00D1                   _display1 0138  
         __size_of_sprintf 0052                 strcpy@from 0082                   _logIndex 00F9  
            __size_of_main 008E                   _menuSize 00FD              __size_of_sort 022C  
          i2__doprnt@width 0020                  set_time@i 0083                   _timeDiff 00DB  
                 _set_time 335A              ??i2_lcdNibble 0001                ??_lcdNibble 0080  
       __end_of_keypressed 17BA                   int$flags 007A                   _yopNoCap 00DD  
        i2___awmod@divisor 0003                  putch@data 0082          i2___awmod@counter 0005  
 __end_of_I2C_Master_Start 3832   __end_of_I2C_Master_Write 3822                 _INTCONbits 000FF2  
             ??_update_RTC 0086               ??_update_lcd 00AA                   isdigit@c 0082  
                 intlevel2 0000                  sprintf@ap 00AC                  sprintf@pb 00AE  
                sprintf@wh 00A2            _measure_counter 00D3           ___lwmod@dividend 0087  
         ___lldiv@dividend 0080    display_menu@menuSizePtr 00B9             __measure@i_483 008B  
           __measure@i_484 008C             __measure@i_485 008D             __measure@i_486 008E  
           __measure@i_487 008F             __measure@i_488 0090             __measure@i_489 0091  
       __end_of_update_RTC 2C3A                   printf@ap 00A4                   printf@pb 00A6  
       __end_of_update_lcd 2E6C    __end_of_I2C_Master_Init 341C    __end_of_I2C_Master_Read 370E  
  __end_of_I2C_Master_Wait 37F0    __end_of_I2C_Master_Stop 382A                lcdInst@data 0082  
      __end_ofi2_lcdNibble 34C8                   sprintf@f 00A4      __size_of_update_state 02BA  
                 strcmp@s1 0080                   strcmp@s2 0082           ___lldiv@quotient 0088  
        I2C_Master_Write@d 0081            ___lwmod@divisor 0089                   strcpy@cp 0084  
                 strcpy@to 0080            ___lwmod@counter 008B              read_sensors@i 0086  
     display_menu@selector 00B7  
