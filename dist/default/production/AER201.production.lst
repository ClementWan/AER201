

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sun Feb 26 20:57:25 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	text43,global,reloc=2,class=CODE,delta=1
    65                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    66                           	psect	text44,global,reloc=2,class=CODE,delta=1
    67                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    68                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    69  0000                     
    70                           ; Version 1.40
    71                           ; Generated 01/12/2016 GMT
    72                           ; 
    73                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC18F4620 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     
   105                           	psect	idataCOMRAM
   106  00388A                     __pidataCOMRAM:
   107                           	opt stack 0
   108                           
   109                           ;initializer for _DIST1_TRIG
   110  00388A  05                 	db	5
   111                           
   112                           ;initializer for _IR1_PIN
   113  00388B  01                 	db	1
   114                           
   115                           ;initializer for _IR2_PIN
   116  00388C  02                 	db	2
   117                           
   118                           ;initializer for _PROX2_PIN
   119  00388D  02                 	db	2
   120                           
   121                           	psect	idataBIGRAM
   122  00237A                     __pidataBIGRAM:
   123                           	opt stack 0
   124                           
   125                           ;initializer for _menu
   126  00237A  31                 	db	49
   127  00237B  2E                 	db	46
   128  00237C  20                 	db	32
   129  00237D  53                 	db	83
   130  00237E  6F                 	db	111
   131  00237F  72                 	db	114
   132  002380  74                 	db	116
   133  002381  20                 	db	32
   134  002382  20                 	db	32
   135  002383  20                 	db	32
   136  002384  20                 	db	32
   137  002385  20                 	db	32
   138  002386  20                 	db	32
   139  002387  20                 	db	32
   140  002388  20                 	db	32
   141  002389  00                 	db	0
   142  00238A  00                 	db	0
   143  00238B  00                 	db	0
   144  00238C  32                 	db	50
   145  00238D  2E                 	db	46
   146  00238E  20                 	db	32
   147  00238F  50                 	db	80
   148  002390  20                 	db	32
   149  002391  4C                 	db	76
   150  002392  6F                 	db	111
   151  002393  67                 	db	103
   152  002394  73                 	db	115
   153  002395  20                 	db	32
   154  002396  20                 	db	32
   155  002397  20                 	db	32
   156  002398  20                 	db	32
   157  002399  20                 	db	32
   158  00239A  20                 	db	32
   159  00239B  00                 	db	0
   160  00239C  00                 	db	0
   161  00239D  00                 	db	0
   162  00239E  33                 	db	51
   163  00239F  2E                 	db	46
   164  0023A0  20                 	db	32
   165  0023A1  43                 	db	67
   166  0023A2  72                 	db	114
   167  0023A3  65                 	db	101
   168  0023A4  64                 	db	100
   169  0023A5  69                 	db	105
   170  0023A6  74                 	db	116
   171  0023A7  73                 	db	115
   172  0023A8  20                 	db	32
   173  0023A9  20                 	db	32
   174  0023AA  20                 	db	32
   175  0023AB  20                 	db	32
   176  0023AC  20                 	db	32
   177  0023AD  00                 	db	0
   178  0023AE  00                 	db	0
   179  0023AF  00                 	db	0
   180  0023B0  00                 	db	0
   181  0023B1  00                 	db	0
   182  0023B2  00                 	db	0
   183  0023B3  00                 	db	0
   184  0023B4  00                 	db	0
   185  0023B5  00                 	db	0
   186  0023B6  00                 	db	0
   187  0023B7  00                 	db	0
   188  0023B8  00                 	db	0
   189  0023B9  00                 	db	0
   190  0023BA  00                 	db	0
   191  0023BB  00                 	db	0
   192  0023BC  00                 	db	0
   193  0023BD  00                 	db	0
   194  0023BE  00                 	db	0
   195  0023BF  00                 	db	0
   196  0023C0  00                 	db	0
   197  0023C1  00                 	db	0
   198  0023C2  00                 	db	0
   199  0023C3  00                 	db	0
   200  0023C4  00                 	db	0
   201  0023C5  00                 	db	0
   202  0023C6  00                 	db	0
   203  0023C7  00                 	db	0
   204  0023C8  00                 	db	0
   205  0023C9  00                 	db	0
   206  0023CA  00                 	db	0
   207  0023CB  00                 	db	0
   208  0023CC  00                 	db	0
   209  0023CD  00                 	db	0
   210  0023CE  00                 	db	0
   211  0023CF  00                 	db	0
   212  0023D0  00                 	db	0
   213  0023D1  00                 	db	0
   214  0023D2  00                 	db	0
   215  0023D3  00                 	db	0
   216  0023D4  00                 	db	0
   217  0023D5  00                 	db	0
   218  0023D6  00                 	db	0
   219  0023D7  00                 	db	0
   220  0023D8  00                 	db	0
   221  0023D9  00                 	db	0
   222  0023DA  00                 	db	0
   223  0023DB  00                 	db	0
   224  0023DC  00                 	db	0
   225  0023DD  00                 	db	0
   226  0023DE  00                 	db	0
   227  0023DF  00                 	db	0
   228  0023E0  00                 	db	0
   229  0023E1  00                 	db	0
   230  0023E2  00                 	db	0
   231  0023E3  00                 	db	0
   232  0023E4  00                 	db	0
   233  0023E5  00                 	db	0
   234  0023E6  00                 	db	0
   235  0023E7  00                 	db	0
   236  0023E8  00                 	db	0
   237  0023E9  00                 	db	0
   238  0023EA  00                 	db	0
   239  0023EB  00                 	db	0
   240  0023EC  00                 	db	0
   241  0023ED  00                 	db	0
   242  0023EE  00                 	db	0
   243  0023EF  00                 	db	0
   244  0023F0  00                 	db	0
   245  0023F1  00                 	db	0
   246  0023F2  00                 	db	0
   247  0023F3  00                 	db	0
   248  0023F4  00                 	db	0
   249  0023F5  00                 	db	0
   250  0023F6  00                 	db	0
   251  0023F7  00                 	db	0
   252  0023F8  00                 	db	0
   253  0023F9  00                 	db	0
   254  0023FA  00                 	db	0
   255  0023FB  00                 	db	0
   256  0023FC  00                 	db	0
   257  0023FD  00                 	db	0
   258  0023FE  00                 	db	0
   259  0023FF  00                 	db	0
   260  002400  00                 	db	0
   261  002401  00                 	db	0
   262  002402  00                 	db	0
   263  002403  00                 	db	0
   264  002404  00                 	db	0
   265  002405  00                 	db	0
   266  002406  00                 	db	0
   267  002407  00                 	db	0
   268  002408  00                 	db	0
   269  002409  00                 	db	0
   270  00240A  00                 	db	0
   271  00240B  00                 	db	0
   272  00240C  00                 	db	0
   273  00240D  00                 	db	0
   274  00240E  00                 	db	0
   275  00240F  00                 	db	0
   276  002410  00                 	db	0
   277  002411  00                 	db	0
   278  002412  00                 	db	0
   279  002413  00                 	db	0
   280  002414  00                 	db	0
   281  002415  00                 	db	0
   282  002416  00                 	db	0
   283  002417  00                 	db	0
   284  002418  00                 	db	0
   285  002419  00                 	db	0
   286  00241A  00                 	db	0
   287  00241B  00                 	db	0
   288  00241C  00                 	db	0
   289  00241D  00                 	db	0
   290  00241E  00                 	db	0
   291  00241F  00                 	db	0
   292  002420  00                 	db	0
   293  002421  00                 	db	0
   294  002422  00                 	db	0
   295  002423  00                 	db	0
   296  002424  00                 	db	0
   297  002425  00                 	db	0
   298  002426  00                 	db	0
   299  002427  00                 	db	0
   300  002428  00                 	db	0
   301  002429  00                 	db	0
   302  00242A  00                 	db	0
   303  00242B  00                 	db	0
   304  00242C  00                 	db	0
   305  00242D  00                 	db	0
   306  00242E  65                 	db	101
   307  00242F  76                 	db	118
   308  002430  65                 	db	101
   309  002431  6E                 	db	110
   310  002432  74                 	db	116
   311  002433  31                 	db	49
   312  002434  20                 	db	32
   313  002435  20                 	db	32
   314  002436  20                 	db	32
   315  002437  20                 	db	32
   316  002438  20                 	db	32
   317  002439  20                 	db	32
   318  00243A  20                 	db	32
   319  00243B  20                 	db	32
   320  00243C  20                 	db	32
   321  00243D  00                 	db	0
   322  00243E  00                 	db	0
   323  00243F  00                 	db	0
   324  002440  65                 	db	101
   325  002441  76                 	db	118
   326  002442  65                 	db	101
   327  002443  6E                 	db	110
   328  002444  74                 	db	116
   329  002445  32                 	db	50
   330  002446  20                 	db	32
   331  002447  20                 	db	32
   332  002448  20                 	db	32
   333  002449  20                 	db	32
   334  00244A  20                 	db	32
   335  00244B  20                 	db	32
   336  00244C  20                 	db	32
   337  00244D  20                 	db	32
   338  00244E  20                 	db	32
   339  00244F  00                 	db	0
   340  002450  00                 	db	0
   341  002451  00                 	db	0
   342  002452  65                 	db	101
   343  002453  76                 	db	118
   344  002454  65                 	db	101
   345  002455  6E                 	db	110
   346  002456  74                 	db	116
   347  002457  33                 	db	51
   348  002458  20                 	db	32
   349  002459  20                 	db	32
   350  00245A  20                 	db	32
   351  00245B  20                 	db	32
   352  00245C  20                 	db	32
   353  00245D  20                 	db	32
   354  00245E  20                 	db	32
   355  00245F  20                 	db	32
   356  002460  20                 	db	32
   357  002461  00                 	db	0
   358  002462  00                 	db	0
   359  002463  00                 	db	0
   360  002464  00                 	db	0
   361  002465  00                 	db	0
   362  002466  00                 	db	0
   363  002467  00                 	db	0
   364  002468  00                 	db	0
   365  002469  00                 	db	0
   366  00246A  00                 	db	0
   367  00246B  00                 	db	0
   368  00246C  00                 	db	0
   369  00246D  00                 	db	0
   370  00246E  00                 	db	0
   371  00246F  00                 	db	0
   372  002470  00                 	db	0
   373  002471  00                 	db	0
   374  002472  00                 	db	0
   375  002473  00                 	db	0
   376  002474  00                 	db	0
   377  002475  00                 	db	0
   378  002476  00                 	db	0
   379  002477  00                 	db	0
   380  002478  00                 	db	0
   381  002479  00                 	db	0
   382  00247A  00                 	db	0
   383  00247B  00                 	db	0
   384  00247C  00                 	db	0
   385  00247D  00                 	db	0
   386  00247E  00                 	db	0
   387  00247F  00                 	db	0
   388  002480  00                 	db	0
   389  002481  00                 	db	0
   390  002482  00                 	db	0
   391  002483  00                 	db	0
   392  002484  00                 	db	0
   393  002485  00                 	db	0
   394  002486  00                 	db	0
   395  002487  00                 	db	0
   396  002488  00                 	db	0
   397  002489  00                 	db	0
   398  00248A  00                 	db	0
   399  00248B  00                 	db	0
   400  00248C  00                 	db	0
   401  00248D  00                 	db	0
   402  00248E  00                 	db	0
   403  00248F  00                 	db	0
   404  002490  00                 	db	0
   405  002491  00                 	db	0
   406  002492  00                 	db	0
   407  002493  00                 	db	0
   408  002494  00                 	db	0
   409  002495  00                 	db	0
   410  002496  00                 	db	0
   411  002497  00                 	db	0
   412  002498  00                 	db	0
   413  002499  00                 	db	0
   414  00249A  00                 	db	0
   415  00249B  00                 	db	0
   416  00249C  00                 	db	0
   417  00249D  00                 	db	0
   418  00249E  00                 	db	0
   419  00249F  00                 	db	0
   420  0024A0  00                 	db	0
   421  0024A1  00                 	db	0
   422  0024A2  00                 	db	0
   423  0024A3  00                 	db	0
   424  0024A4  00                 	db	0
   425  0024A5  00                 	db	0
   426  0024A6  00                 	db	0
   427  0024A7  00                 	db	0
   428  0024A8  00                 	db	0
   429  0024A9  00                 	db	0
   430  0024AA  00                 	db	0
   431  0024AB  00                 	db	0
   432  0024AC  00                 	db	0
   433  0024AD  00                 	db	0
   434  0024AE  00                 	db	0
   435  0024AF  00                 	db	0
   436  0024B0  00                 	db	0
   437  0024B1  00                 	db	0
   438  0024B2  00                 	db	0
   439  0024B3  00                 	db	0
   440  0024B4  00                 	db	0
   441  0024B5  00                 	db	0
   442  0024B6  00                 	db	0
   443  0024B7  00                 	db	0
   444  0024B8  00                 	db	0
   445  0024B9  00                 	db	0
   446  0024BA  00                 	db	0
   447  0024BB  00                 	db	0
   448  0024BC  00                 	db	0
   449  0024BD  00                 	db	0
   450  0024BE  00                 	db	0
   451  0024BF  00                 	db	0
   452  0024C0  00                 	db	0
   453  0024C1  00                 	db	0
   454  0024C2  00                 	db	0
   455  0024C3  00                 	db	0
   456  0024C4  00                 	db	0
   457  0024C5  00                 	db	0
   458  0024C6  00                 	db	0
   459  0024C7  00                 	db	0
   460  0024C8  00                 	db	0
   461  0024C9  00                 	db	0
   462  0024CA  00                 	db	0
   463  0024CB  00                 	db	0
   464  0024CC  00                 	db	0
   465  0024CD  00                 	db	0
   466  0024CE  00                 	db	0
   467  0024CF  00                 	db	0
   468  0024D0  00                 	db	0
   469  0024D1  00                 	db	0
   470  0024D2  00                 	db	0
   471  0024D3  00                 	db	0
   472  0024D4  00                 	db	0
   473  0024D5  00                 	db	0
   474  0024D6  00                 	db	0
   475  0024D7  00                 	db	0
   476  0024D8  00                 	db	0
   477  0024D9  00                 	db	0
   478  0024DA  00                 	db	0
   479  0024DB  00                 	db	0
   480  0024DC  00                 	db	0
   481  0024DD  00                 	db	0
   482  0024DE  00                 	db	0
   483  0024DF  00                 	db	0
   484  0024E0  00                 	db	0
   485  0024E1  00                 	db	0
   486  0024E2  4D                 	db	77
   487  0024E3  69                 	db	105
   488  0024E4  63                 	db	99
   489  0024E5  72                 	db	114
   490  0024E6  6F                 	db	111
   491  0024E7  63                 	db	99
   492  0024E8  6F                 	db	111
   493  0024E9  6E                 	db	110
   494  0024EA  74                 	db	116
   495  0024EB  72                 	db	114
   496  0024EC  6F                 	db	111
   497  0024ED  6C                 	db	108
   498  0024EE  3A                 	db	58
   499  0024EF  20                 	db	32
   500  0024F0  20                 	db	32
   501  0024F1  00                 	db	0
   502  0024F2  00                 	db	0
   503  0024F3  00                 	db	0
   504  0024F4  43                 	db	67
   505  0024F5  6C                 	db	108
   506  0024F6  65                 	db	101
   507  0024F7  6D                 	db	109
   508  0024F8  65                 	db	101
   509  0024F9  6E                 	db	110
   510  0024FA  74                 	db	116
   511  0024FB  20                 	db	32
   512  0024FC  57                 	db	87
   513  0024FD  61                 	db	97
   514  0024FE  6E                 	db	110
   515  0024FF  20                 	db	32
   516  002500  20                 	db	32
   517  002501  20                 	db	32
   518  002502  20                 	db	32
   519  002503  00                 	db	0
   520  002504  00                 	db	0
   521  002505  00                 	db	0
   522  002506  43                 	db	67
   523  002507  69                 	db	105
   524  002508  72                 	db	114
   525  002509  63                 	db	99
   526  00250A  75                 	db	117
   527  00250B  69                 	db	105
   528  00250C  74                 	db	116
   529  00250D  73                 	db	115
   530  00250E  3A                 	db	58
   531  00250F  20                 	db	32
   532  002510  20                 	db	32
   533  002511  20                 	db	32
   534  002512  20                 	db	32
   535  002513  20                 	db	32
   536  002514  20                 	db	32
   537  002515  00                 	db	0
   538  002516  00                 	db	0
   539  002517  00                 	db	0
   540  002518  4A                 	db	74
   541  002519  75                 	db	117
   542  00251A  73                 	db	115
   543  00251B  74                 	db	116
   544  00251C  69                 	db	105
   545  00251D  6E                 	db	110
   546  00251E  20                 	db	32
   547  00251F  51                 	db	81
   548  002520  75                 	db	117
   549  002521  20                 	db	32
   550  002522  20                 	db	32
   551  002523  20                 	db	32
   552  002524  20                 	db	32
   553  002525  20                 	db	32
   554  002526  20                 	db	32
   555  002527  00                 	db	0
   556  002528  00                 	db	0
   557  002529  00                 	db	0
   558  00252A  45                 	db	69
   559  00252B  6C                 	db	108
   560  00252C  65                 	db	101
   561  00252D  63                 	db	99
   562  00252E  74                 	db	116
   563  00252F  72                 	db	114
   564  002530  6F                 	db	111
   565  002531  6D                 	db	109
   566  002532  65                 	db	101
   567  002533  63                 	db	99
   568  002534  68                 	db	104
   569  002535  3A                 	db	58
   570  002536  20                 	db	32
   571  002537  20                 	db	32
   572  002538  20                 	db	32
   573  002539  00                 	db	0
   574  00253A  00                 	db	0
   575  00253B  00                 	db	0
   576  00253C  50                 	db	80
   577  00253D  65                 	db	101
   578  00253E  74                 	db	116
   579  00253F  65                 	db	101
   580  002540  72                 	db	114
   581  002541  20                 	db	32
   582  002542  46                 	db	70
   583  002543  65                 	db	101
   584  002544  6E                 	db	110
   585  002545  67                 	db	103
   586  002546  20                 	db	32
   587  002547  20                 	db	32
   588  002548  20                 	db	32
   589  002549  20                 	db	32
   590  00254A  20                 	db	32
   591  00254B  00                 	db	0
   592  00254C  00                 	db	0
   593  00254D  00                 	db	0
   594  00254E  00                 	db	0
   595  00254F  00                 	db	0
   596  002550  00                 	db	0
   597  002551  00                 	db	0
   598  002552  00                 	db	0
   599  002553  00                 	db	0
   600  002554  00                 	db	0
   601  002555  00                 	db	0
   602  002556  00                 	db	0
   603  002557  00                 	db	0
   604  002558  00                 	db	0
   605  002559  00                 	db	0
   606  00255A  00                 	db	0
   607  00255B  00                 	db	0
   608  00255C  00                 	db	0
   609  00255D  00                 	db	0
   610  00255E  00                 	db	0
   611  00255F  00                 	db	0
   612  002560  00                 	db	0
   613  002561  00                 	db	0
   614  002562  00                 	db	0
   615  002563  00                 	db	0
   616  002564  00                 	db	0
   617  002565  00                 	db	0
   618  002566  00                 	db	0
   619  002567  00                 	db	0
   620  002568  00                 	db	0
   621  002569  00                 	db	0
   622  00256A  00                 	db	0
   623  00256B  00                 	db	0
   624  00256C  00                 	db	0
   625  00256D  00                 	db	0
   626  00256E  00                 	db	0
   627  00256F  00                 	db	0
   628  002570  00                 	db	0
   629  002571  00                 	db	0
   630  002572  00                 	db	0
   631  002573  00                 	db	0
   632  002574  00                 	db	0
   633  002575  00                 	db	0
   634  002576  00                 	db	0
   635  002577  00                 	db	0
   636  002578  00                 	db	0
   637  002579  00                 	db	0
   638  00257A  00                 	db	0
   639  00257B  00                 	db	0
   640  00257C  00                 	db	0
   641  00257D  00                 	db	0
   642  00257E  00                 	db	0
   643  00257F  00                 	db	0
   644  002580  00                 	db	0
   645  002581  00                 	db	0
   646  002582  00                 	db	0
   647  002583  00                 	db	0
   648  002584  00                 	db	0
   649  002585  00                 	db	0
   650  002586  00                 	db	0
   651  002587  00                 	db	0
   652  002588  00                 	db	0
   653  002589  00                 	db	0
   654  00258A  00                 	db	0
   655  00258B  00                 	db	0
   656  00258C  00                 	db	0
   657  00258D  00                 	db	0
   658  00258E  00                 	db	0
   659  00258F  00                 	db	0
   660  002590  00                 	db	0
   661  002591  00                 	db	0
   662  002592  00                 	db	0
   663  002593  00                 	db	0
   664  002594  00                 	db	0
   665  002595  00                 	db	0
   666  002596  00                 	db	0
   667  002597  00                 	db	0
   668  002598  00                 	db	0
   669  002599  00                 	db	0
   670  00259A  00                 	db	0
   671  00259B  00                 	db	0
   672  00259C  00                 	db	0
   673  00259D  00                 	db	0
   674  00259E  00                 	db	0
   675  00259F  00                 	db	0
   676  0025A0  00                 	db	0
   677  0025A1  00                 	db	0
   678  0025A2  00                 	db	0
   679  0025A3  00                 	db	0
   680  0025A4  00                 	db	0
   681  0025A5  00                 	db	0
   682  0025A6  00                 	db	0
   683  0025A7  00                 	db	0
   684  0025A8  00                 	db	0
   685  0025A9  00                 	db	0
   686  0025AA  00                 	db	0
   687  0025AB  00                 	db	0
   688  0025AC  00                 	db	0
   689  0025AD  00                 	db	0
   690  0025AE  00                 	db	0
   691  0025AF  00                 	db	0
   692  0025B0  00                 	db	0
   693  0025B1  00                 	db	0
   694  0025B2  00                 	db	0
   695  0025B3  00                 	db	0
   696  0025B4  00                 	db	0
   697  0025B5  00                 	db	0
   698  0025B6  00                 	db	0
   699  0025B7  00                 	db	0
   700  0025B8  00                 	db	0
   701  0025B9  00                 	db	0
   702  0025BA  00                 	db	0
   703  0025BB  00                 	db	0
   704  0025BC  00                 	db	0
   705  0025BD  00                 	db	0
   706  0025BE  00                 	db	0
   707  0025BF  00                 	db	0
   708  0025C0  00                 	db	0
   709  0025C1  00                 	db	0
   710  0025C2  00                 	db	0
   711  0025C3  00                 	db	0
   712  0025C4  00                 	db	0
   713  0025C5  00                 	db	0
   714  0025C6  00                 	db	0
   715  0025C7  00                 	db	0
   716  0025C8  00                 	db	0
   717  0025C9  00                 	db	0
   718  0025CA  00                 	db	0
   719  0025CB  00                 	db	0
   720  0025CC  00                 	db	0
   721  0025CD  00                 	db	0
   722  0025CE  00                 	db	0
   723  0025CF  00                 	db	0
   724  0025D0  00                 	db	0
   725  0025D1  00                 	db	0
   726  0025D2  00                 	db	0
   727  0025D3  00                 	db	0
   728  0025D4  00                 	db	0
   729  0025D5  00                 	db	0
   730  0025D6  00                 	db	0
   731  0025D7  00                 	db	0
   732  0025D8  00                 	db	0
   733  0025D9  00                 	db	0
   734  0025DA  00                 	db	0
   735  0025DB  00                 	db	0
   736  0025DC  00                 	db	0
   737  0025DD  00                 	db	0
   738  0025DE  00                 	db	0
   739  0025DF  00                 	db	0
   740  0025E0  00                 	db	0
   741  0025E1  00                 	db	0
   742  0025E2  00                 	db	0
   743  0025E3  00                 	db	0
   744  0025E4  00                 	db	0
   745  0025E5  00                 	db	0
   746  0025E6  00                 	db	0
   747  0025E7  00                 	db	0
   748  0025E8  00                 	db	0
   749  0025E9  00                 	db	0
   750  0025EA  00                 	db	0
   751  0025EB  00                 	db	0
   752  0025EC  00                 	db	0
   753  0025ED  00                 	db	0
   754  0025EE  00                 	db	0
   755  0025EF  00                 	db	0
   756  0025F0  00                 	db	0
   757  0025F1  00                 	db	0
   758  0025F2  00                 	db	0
   759  0025F3  00                 	db	0
   760  0025F4  00                 	db	0
   761  0025F5  00                 	db	0
   762  0025F6  00                 	db	0
   763  0025F7  00                 	db	0
   764  0025F8  00                 	db	0
   765  0025F9  00                 	db	0
   766  0025FA  00                 	db	0
   767  0025FB  00                 	db	0
   768  0025FC  00                 	db	0
   769  0025FD  00                 	db	0
   770  0025FE  00                 	db	0
   771  0025FF  00                 	db	0
   772  002600  00                 	db	0
   773  002601  00                 	db	0
   774  002602  00                 	db	0
   775  002603  00                 	db	0
   776  002604  00                 	db	0
   777  002605  00                 	db	0
   778  002606  00                 	db	0
   779  002607  00                 	db	0
   780  002608  00                 	db	0
   781  002609  00                 	db	0
   782  00260A  00                 	db	0
   783  00260B  00                 	db	0
   784  00260C  00                 	db	0
   785  00260D  00                 	db	0
   786  00260E  00                 	db	0
   787  00260F  00                 	db	0
   788  002610  00                 	db	0
   789  002611  00                 	db	0
   790  002612  00                 	db	0
   791  002613  00                 	db	0
   792  002614  00                 	db	0
   793  002615  00                 	db	0
   794  002616  00                 	db	0
   795  002617  00                 	db	0
   796  002618  00                 	db	0
   797  002619  00                 	db	0
   798  00261A  00                 	db	0
   799  00261B  00                 	db	0
   800  00261C  00                 	db	0
   801  00261D  00                 	db	0
   802  00261E  00                 	db	0
   803  00261F  00                 	db	0
   804  002620  00                 	db	0
   805  002621  00                 	db	0
   806  002622  00                 	db	0
   807  002623  00                 	db	0
   808  002624  00                 	db	0
   809  002625  00                 	db	0
   810  002626  00                 	db	0
   811  002627  00                 	db	0
   812  002628  00                 	db	0
   813  002629  00                 	db	0
   814  00262A  00                 	db	0
   815  00262B  00                 	db	0
   816  00262C  00                 	db	0
   817  00262D  00                 	db	0
   818  00262E  00                 	db	0
   819  00262F  00                 	db	0
   820  002630  00                 	db	0
   821  002631  00                 	db	0
   822  002632  00                 	db	0
   823  002633  00                 	db	0
   824  002634  00                 	db	0
   825  002635  00                 	db	0
   826  002636  00                 	db	0
   827  002637  00                 	db	0
   828  002638  00                 	db	0
   829  002639  00                 	db	0
   830  00263A  00                 	db	0
   831  00263B  00                 	db	0
   832  00263C  00                 	db	0
   833  00263D  00                 	db	0
   834  00263E  00                 	db	0
   835  00263F  00                 	db	0
   836  002640  00                 	db	0
   837  002641  00                 	db	0
   838  002642  00                 	db	0
   839  002643  00                 	db	0
   840  002644  00                 	db	0
   841  002645  00                 	db	0
   842  002646  00                 	db	0
   843  002647  00                 	db	0
   844  002648  00                 	db	0
   845  002649  00                 	db	0
   846                           
   847                           	psect	idataBANK0
   848  003804                     __pidataBANK0:
   849                           	opt stack 0
   850                           
   851                           ;initializer for _DIST_THRESHOLD_HI
   852  003804  02FF               	dw	767
   853                           
   854                           ;initializer for _DIST_THRESHOLD_LOW
   855  003806  00FF               	dw	255
   856                           
   857                           ;initializer for _IR_THRESHOLD_HI
   858  003808  02FF               	dw	767
   859                           
   860                           ;initializer for _IR_THRESHOLD_LOW
   861  00380A  00FF               	dw	255
   862                           
   863                           ;initializer for _nstate
   864  00380C  72                 	db	114
   865                           
   866                           ;initializer for _state
   867  00380D  72                 	db	114
   868                           
   869                           ;initializer for _creditIndex
   870  00380E  0001               	dw	1
   871                           
   872                           ;initializer for _creditSize
   873  003810  0005               	dw	5
   874                           
   875                           ;initializer for _endIndex
   876  003812  0001               	dw	1
   877                           
   878                           ;initializer for _endSize
   879  003814  0003               	dw	3
   880                           
   881                           ;initializer for _events
   882  003816  0002               	dw	2
   883                           
   884                           ;initializer for _logIndex
   885  003818  0001               	dw	1
   886                           
   887                           ;initializer for _menuIndex
   888  00381A  0001               	dw	1
   889                           
   890                           ;initializer for _menuSize
   891  00381C  0003               	dw	3
   892                           
   893                           	psect	mediumconst
   894  00FEE4                     __pmediumconst:
   895                           	opt stack 0
   896  00FEE4  00                 	db	0
   897  00FEE5                     _keys:
   898                           	opt stack 0
   899  00FEE5  31                 	db	49
   900  00FEE6  32                 	db	50
   901  00FEE7  33                 	db	51
   902  00FEE8  41                 	db	65
   903  00FEE9  34                 	db	52
   904  00FEEA  35                 	db	53
   905  00FEEB  36                 	db	54
   906  00FEEC  42                 	db	66
   907  00FEED  37                 	db	55
   908  00FEEE  38                 	db	56
   909  00FEEF  39                 	db	57
   910  00FEF0  43                 	db	67
   911  00FEF1  2A                 	db	42
   912  00FEF2  30                 	db	48
   913  00FEF3  23                 	db	35
   914  00FEF4  44                 	db	68
   915  00FEF5  00                 	db	0
   916  00FEF6                     __end_of_keys:
   917                           	opt stack 0
   918  00FEF6                     _dpowers:
   919                           	opt stack 0
   920  00FEF6  0001               	dw	1
   921  00FEF8  000A               	dw	10
   922  00FEFA  0064               	dw	100
   923  00FEFC  03E8               	dw	1000
   924  00FEFE  2710               	dw	10000
   925  00FF00                     __end_of_dpowers:
   926                           	opt stack 0
   927  00FF00                     _hexpowers:
   928                           	opt stack 0
   929  00FF00  0001               	dw	1
   930  00FF02  0010               	dw	16
   931  00FF04  0100               	dw	256
   932  00FF06  1000               	dw	4096
   933  00FF08                     __end_of_hexpowers:
   934                           	opt stack 0
   935  00FF08                     _manualDateTime:
   936                           	opt stack 0
   937  00FF08  00                 	db	0
   938  00FF09  00                 	db	0
   939  00FF0A  00                 	db	0
   940  00FF0B  00                 	db	0
   941  00FF0C  01                 	db	1
   942  00FF0D  00                 	db	0
   943  00FF0E  17                 	db	23
   944  00FF0F                     __end_of_manualDateTime:
   945                           	opt stack 0
   946  00FF0F                     STR_1:
   947  00FF0F  25                 	db	37
   948  00FF10  30                 	db	48	;'0'
   949  00FF11  32                 	db	50	;'2'
   950  00FF12  78                 	db	120	;'x'
   951  00FF13  2F                 	db	47
   952  00FF14  25                 	db	37
   953  00FF15  30                 	db	48	;'0'
   954  00FF16  32                 	db	50	;'2'
   955  00FF17  78                 	db	120	;'x'
   956  00FF18  2F                 	db	47
   957  00FF19  25                 	db	37
   958  00FF1A  30                 	db	48	;'0'
   959  00FF1B  32                 	db	50	;'2'
   960  00FF1C  78                 	db	120	;'x'
   961  00FF1D  20                 	db	32
   962  00FF1E  50                 	db	80	;'P'
   963  00FF1F  55                 	db	85	;'U'
   964  00FF20  53                 	db	83	;'S'
   965  00FF21  48                 	db	72	;'H'
   966  00FF22  20                 	db	32
   967  00FF23  54                 	db	84	;'T'
   968  00FF24  4F                 	db	79	;'O'
   969  00FF25  00                 	db	0
   970  00FF26                     STR_2:
   971  00FF26  25                 	db	37
   972  00FF27  30                 	db	48	;'0'
   973  00FF28  32                 	db	50	;'2'
   974  00FF29  78                 	db	120	;'x'
   975  00FF2A  3A                 	db	58	;':'
   976  00FF2B  25                 	db	37
   977  00FF2C  30                 	db	48	;'0'
   978  00FF2D  32                 	db	50	;'2'
   979  00FF2E  78                 	db	120	;'x'
   980  00FF2F  3A                 	db	58	;':'
   981  00FF30  25                 	db	37
   982  00FF31  30                 	db	48	;'0'
   983  00FF32  32                 	db	50	;'2'
   984  00FF33  78                 	db	120	;'x'
   985  00FF34  20                 	db	32
   986  00FF35  20                 	db	32
   987  00FF36  20                 	db	32
   988  00FF37  53                 	db	83	;'S'
   989  00FF38  54                 	db	84	;'T'
   990  00FF39  41                 	db	65	;'A'
   991  00FF3A  52                 	db	82	;'R'
   992  00FF3B  54                 	db	84	;'T'
   993  00FF3C  00                 	db	0
   994  00FF3D                     STR_8:
   995  00FF3D  72                 	db	114	;'r'
   996  00FF3E  75                 	db	117	;'u'
   997  00FF3F  6E                 	db	110	;'n'
   998  00FF40  20                 	db	32
   999  00FF41  74                 	db	116	;'t'
  1000  00FF42  69                 	db	105	;'i'
  1001  00FF43  6D                 	db	109	;'m'
  1002  00FF44  65                 	db	101	;'e'
  1003  00FF45  3A                 	db	58	;':'
  1004  00FF46  20                 	db	32
  1005  00FF47  25                 	db	37
  1006  00FF48  30                 	db	48	;'0'
  1007  00FF49  31                 	db	49	;'1'
  1008  00FF4A  64                 	db	100	;'d'
  1009  00FF4B  3A                 	db	58	;':'
  1010  00FF4C  25                 	db	37
  1011  00FF4D  30                 	db	48	;'0'
  1012  00FF4E  32                 	db	50	;'2'
  1013  00FF4F  64                 	db	100	;'d'
  1014  00FF50  20                 	db	32
  1015  00FF51  00                 	db	0
  1016  00FF52  00                 	db	0
  1017  00FF53                     STR_9:
  1018  00FF53  65                 	db	101	;'e'
  1019  00FF54  6E                 	db	110	;'n'
  1020  00FF55  3A                 	db	58	;':'
  1021  00FF56  25                 	db	37
  1022  00FF57  30                 	db	48	;'0'
  1023  00FF58  32                 	db	50	;'2'
  1024  00FF59  64                 	db	100	;'d'
  1025  00FF5A  20                 	db	32
  1026  00FF5B  65                 	db	101	;'e'
  1027  00FF5C  63                 	db	99	;'c'
  1028  00FF5D  3A                 	db	58	;':'
  1029  00FF5E  25                 	db	37
  1030  00FF5F  30                 	db	48	;'0'
  1031  00FF60  32                 	db	50	;'2'
  1032  00FF61  64                 	db	100	;'d'
  1033  00FF62  20                 	db	32
  1034  00FF63  20                 	db	32
  1035  00FF64  20                 	db	32
  1036  00FF65  20                 	db	32
  1037  00FF66  00                 	db	0
  1038  00FF67                     STR_10:
  1039  00FF67  79                 	db	121	;'y'
  1040  00FF68  6E                 	db	110	;'n'
  1041  00FF69  3A                 	db	58	;':'
  1042  00FF6A  25                 	db	37
  1043  00FF6B  30                 	db	48	;'0'
  1044  00FF6C  32                 	db	50	;'2'
  1045  00FF6D  64                 	db	100	;'d'
  1046  00FF6E  20                 	db	32
  1047  00FF6F  79                 	db	121	;'y'
  1048  00FF70  63                 	db	99	;'c'
  1049  00FF71  3A                 	db	58	;':'
  1050  00FF72  25                 	db	37
  1051  00FF73  30                 	db	48	;'0'
  1052  00FF74  32                 	db	50	;'2'
  1053  00FF75  64                 	db	100	;'d'
  1054  00FF76  20                 	db	32
  1055  00FF77  20                 	db	32
  1056  00FF78  20                 	db	32
  1057  00FF79  20                 	db	32
  1058  00FF7A  00                 	db	0
  1059  00FF7B                     STR_7:
  1060  00FF7B  62                 	db	98	;'b'
  1061  00FF7C  6F                 	db	111	;'o'
  1062  00FF7D  74                 	db	116	;'t'
  1063  00FF7E  74                 	db	116	;'t'
  1064  00FF7F  6C                 	db	108	;'l'
  1065  00FF80  65                 	db	101	;'e'
  1066  00FF81  73                 	db	115	;'s'
  1067  00FF82  3A                 	db	58	;':'
  1068  00FF83  20                 	db	32
  1069  00FF84  25                 	db	37
  1070  00FF85  30                 	db	48	;'0'
  1071  00FF86  32                 	db	50	;'2'
  1072  00FF87  64                 	db	100	;'d'
  1073  00FF88  20                 	db	32
  1074  00FF89  20                 	db	32
  1075  00FF8A  20                 	db	32
  1076  00FF8B  20                 	db	32
  1077  00FF8C  00                 	db	0
  1078  00FF8D  00                 	db	0
  1079  00FF8E                     STR_19:
  1080  00FF8E  30                 	db	48	;'0'
  1081  00FF8F  31                 	db	49	;'1'
  1082  00FF90  32                 	db	50	;'2'
  1083  00FF91  33                 	db	51	;'3'
  1084  00FF92  34                 	db	52	;'4'
  1085  00FF93  35                 	db	53	;'5'
  1086  00FF94  36                 	db	54	;'6'
  1087  00FF95  37                 	db	55	;'7'
  1088  00FF96  38                 	db	56	;'8'
  1089  00FF97  39                 	db	57	;'9'
  1090  00FF98  61                 	db	97	;'a'
  1091  00FF99  62                 	db	98	;'b'
  1092  00FF9A  63                 	db	99	;'c'
  1093  00FF9B  64                 	db	100	;'d'
  1094  00FF9C  65                 	db	101	;'e'
  1095  00FF9D  66                 	db	102	;'f'
  1096  00FF9E  00                 	db	0
  1097  00FF9F                     STR_6:
  1098  00FF9F  45                 	db	69	;'E'
  1099  00FFA0  4D                 	db	77	;'M'
  1100  00FFA1  45                 	db	69	;'E'
  1101  00FFA2  52                 	db	82	;'R'
  1102  00FFA3  47                 	db	71	;'G'
  1103  00FFA4  45                 	db	69	;'E'
  1104  00FFA5  4E                 	db	78	;'N'
  1105  00FFA6  43                 	db	67	;'C'
  1106  00FFA7  59                 	db	89	;'Y'
  1107  00FFA8  20                 	db	32
  1108  00FFA9  53                 	db	83	;'S'
  1109  00FFAA  54                 	db	84	;'T'
  1110  00FFAB  4F                 	db	79	;'O'
  1111  00FFAC  50                 	db	80	;'P'
  1112  00FFAD  00                 	db	0
  1113  00FFAE                     STR_16:
  1114  00FFAE  6D                 	db	109	;'m'
  1115  00FFAF  65                 	db	101	;'e'
  1116  00FFB0  6E                 	db	110	;'n'
  1117  00FFB1  75                 	db	117	;'u'
  1118  00FFB2  20                 	db	32
  1119  00FFB3  73                 	db	115	;'s'
  1120  00FFB4  65                 	db	101	;'e'
  1121  00FFB5  6C                 	db	108	;'l'
  1122  00FFB6  65                 	db	101	;'e'
  1123  00FFB7  63                 	db	99	;'c'
  1124  00FFB8  74                 	db	116	;'t'
  1125  00FFB9  69                 	db	105	;'i'
  1126  00FFBA  6F                 	db	111	;'o'
  1127  00FFBB  6E                 	db	110	;'n'
  1128  00FFBC  00                 	db	0
  1129  00FFBD                     STR_4:
  1130  00FFBD  44                 	db	68	;'D'
  1131  00FFBE  43                 	db	67	;'C'
  1132  00FFBF  3A                 	db	58	;':'
  1133  00FFC0  25                 	db	37
  1134  00FFC1  64                 	db	100	;'d'
  1135  00FFC2  20                 	db	32
  1136  00FFC3  4D                 	db	77	;'M'
  1137  00FFC4  45                 	db	69	;'E'
  1138  00FFC5  41                 	db	65	;'A'
  1139  00FFC6  53                 	db	83	;'S'
  1140  00FFC7  3A                 	db	58	;':'
  1141  00FFC8  25                 	db	37
  1142  00FFC9  64                 	db	100	;'d'
  1143  00FFCA  00                 	db	0
  1144  00FFCB                     STR_17:
  1145  00FFCB  6E                 	db	110	;'n'
  1146  00FFCC  6F                 	db	111	;'o'
  1147  00FFCD  20                 	db	32
  1148  00FFCE  70                 	db	112	;'p'
  1149  00FFCF  61                 	db	97	;'a'
  1150  00FFD0  67                 	db	103	;'g'
  1151  00FFD1  65                 	db	101	;'e'
  1152  00FFD2  20                 	db	32
  1153  00FFD3  66                 	db	102	;'f'
  1154  00FFD4  6F                 	db	111	;'o'
  1155  00FFD5  75                 	db	117	;'u'
  1156  00FFD6  6E                 	db	110	;'n'
  1157  00FFD7  64                 	db	100	;'d'
  1158  00FFD8  00                 	db	0
  1159  00FFD9                     STR_3:
  1160  00FFD9  52                 	db	82	;'R'
  1161  00FFDA  43                 	db	67	;'C'
  1162  00FFDB  3A                 	db	58	;':'
  1163  00FFDC  25                 	db	37
  1164  00FFDD  64                 	db	100	;'d'
  1165  00FFDE  20                 	db	32
  1166  00FFDF  4D                 	db	77	;'M'
  1167  00FFE0  43                 	db	67	;'C'
  1168  00FFE1  3A                 	db	58	;':'
  1169  00FFE2  25                 	db	37
  1170  00FFE3  64                 	db	100	;'d'
  1171  00FFE4  00                 	db	0
  1172  00FFE5                     STR_15:
  1173  00FFE5  69                 	db	105	;'i'
  1174  00FFE6  6E                 	db	110	;'n'
  1175  00FFE7  76                 	db	118	;'v'
  1176  00FFE8  61                 	db	97	;'a'
  1177  00FFE9  6C                 	db	108	;'l'
  1178  00FFEA  69                 	db	105	;'i'
  1179  00FFEB  64                 	db	100	;'d'
  1180  00FFEC  00                 	db	0
  1181  00FFED                     STR_18:
  1182  00FFED  28                 	db	40
  1183  00FFEE  6E                 	db	110	;'n'
  1184  00FFEF  75                 	db	117	;'u'
  1185  00FFF0  6C                 	db	108	;'l'
  1186  00FFF1  6C                 	db	108	;'l'
  1187  00FFF2  29                 	db	41
  1188  00FFF3  00                 	db	0
  1189  00FFF4                     STR_5:
  1190  00FFF4  45                 	db	69	;'E'
  1191  00FFF5  52                 	db	82	;'R'
  1192  00FFF6  52                 	db	82	;'R'
  1193  00FFF7  4F                 	db	79	;'O'
  1194  00FFF8  52                 	db	82	;'R'
  1195  00FFF9  00                 	db	0
  1196  00FFFA                     STR_11:
  1197  00FFFA  25                 	db	37
  1198  00FFFB  73                 	db	115	;'s'
  1199  00FFFC  25                 	db	37
  1200  00FFFD  63                 	db	99	;'c'
  1201  00FFFE  00                 	db	0
  1202  0000                     
  1203                           ; #config settings
  1204  00FFFF  00                 	db	0	; dummy byte at the end
  1205  0000                     
  1206                           	psect	nvBANK1
  1207  00016E                     __pnvBANK1:
  1208                           	opt stack 0
  1209  00016E                     _discretize:
  1210                           	opt stack 0
  1211  00016E                     	ds	2
  1212  000170                     _measure:
  1213                           	opt stack 0
  1214  000170                     	ds	2
  1215  000172                     _release:
  1216                           	opt stack 0
  1217  000172                     	ds	2
  1218  0000                     _ADCON0	set	4034
  1219  0000                     _ADCON0bits	set	4034
  1220  0000                     _ADCON1	set	4033
  1221  0000                     _ADRESL	set	4035
  1222  0000                     _CMCONbits	set	4020
  1223  0000                     _CVRCON	set	4021
  1224  0000                     _INTCONbits	set	4082
  1225  0000                     _LATB	set	3978
  1226  0000                     _LATC	set	3979
  1227  0000                     _LATD	set	3980
  1228  0000                     _LATDbits	set	3980
  1229  0000                     _PORTB	set	3969
  1230  0000                     _SSPADD	set	4040
  1231  0000                     _SSPBUF	set	4041
  1232  0000                     _SSPCON1	set	4038
  1233  0000                     _SSPCON2	set	4037
  1234  0000                     _SSPSTAT	set	4039
  1235  0000                     _TRISB	set	3987
  1236  0000                     _TRISC	set	3988
  1237  0000                     _TRISD	set	3989
  1238  0000                     _TRISE	set	3990
  1239  0000                     _ADRESH	set	4036
  1240  0000                     _ACKDT	set	32301
  1241  0000                     _ACKEN	set	32300
  1242  0000                     _ADFM	set	32263
  1243  0000                     _ADON	set	32272
  1244  0000                     _INT1IE	set	32643
  1245  0000                     _INT1IF	set	32640
  1246  0000                     _PEN	set	32298
  1247  0000                     _RCEN	set	32299
  1248  0000                     _RSEN	set	32297
  1249  0000                     _SEN	set	32296
  1250  0000                     _TRISC3	set	31907
  1251  0000                     _TRISC4	set	31908
  1252  0000                     _nRBPU	set	32655
  1253                           
  1254                           	psect	cinit
  1255  003172                     __pcinit:
  1256                           	opt stack 0
  1257  003172                     start_initialization:
  1258                           	opt stack 0
  1259  003172                     __initialization:
  1260                           	opt stack 0
  1261                           
  1262                           ; Initialize objects allocated to BIGRAM (720 bytes)
  1263                           ; load TBLPTR registers with __pidataBIGRAM
  1264  003172  0E7A               	movlw	low __pidataBIGRAM
  1265  003174  6EF6               	movwf	tblptrl,c
  1266  003176  0E23               	movlw	high __pidataBIGRAM
  1267  003178  6EF7               	movwf	tblptrh,c
  1268  00317A  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
  1269  00317C  6EF8               	movwf	tblptru,c
  1270  00317E  EE01  F074         	lfsr	0,__pdataBIGRAM
  1271  003182  EE12 F0D0          	lfsr	1,720
  1272  003186                     copy_data0:
  1273  003186  0009               	tblrd		*+
  1274  003188  CFF5 FFEE          	movff	tablat,postinc0
  1275  00318C  50E5               	movf	postdec1,w,c
  1276  00318E  50E1               	movf	fsr1l,w,c
  1277  003190  E1FA               	bnz	copy_data0
  1278  003192  50E2               	movf	fsr1h,w,c
  1279  003194  E1F8               	bnz	copy_data0
  1280                           
  1281                           ; Initialize objects allocated to BANK0 (26 bytes)
  1282                           ; load TBLPTR registers with __pidataBANK0
  1283  003196  0E04               	movlw	low __pidataBANK0
  1284  003198  6EF6               	movwf	tblptrl,c
  1285  00319A  0E38               	movlw	high __pidataBANK0
  1286  00319C  6EF7               	movwf	tblptrh,c
  1287  00319E  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1288  0031A0  6EF8               	movwf	tblptru,c
  1289  0031A2  EE00  F0DF         	lfsr	0,__pdataBANK0
  1290  0031A6  EE10 F01A          	lfsr	1,26
  1291  0031AA                     copy_data1:
  1292  0031AA  0009               	tblrd		*+
  1293  0031AC  CFF5 FFEE          	movff	tablat,postinc0
  1294  0031B0  50E5               	movf	postdec1,w,c
  1295  0031B2  50E1               	movf	fsr1l,w,c
  1296  0031B4  E1FA               	bnz	copy_data1
  1297                           
  1298                           ; Initialize objects allocated to COMRAM (4 bytes)
  1299                           ; load TBLPTR registers with __pidataCOMRAM
  1300  0031B6  0E8A               	movlw	low __pidataCOMRAM
  1301  0031B8  6EF6               	movwf	tblptrl,c
  1302  0031BA  0E38               	movlw	high __pidataCOMRAM
  1303  0031BC  6EF7               	movwf	tblptrh,c
  1304  0031BE  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1305  0031C0  6EF8               	movwf	tblptru,c
  1306  0031C2  EE00  F076         	lfsr	0,__pdataCOMRAM
  1307  0031C6  EE10 F004          	lfsr	1,4
  1308  0031CA                     copy_data2:
  1309  0031CA  0009               	tblrd		*+
  1310  0031CC  CFF5 FFEE          	movff	tablat,postinc0
  1311  0031D0  50E5               	movf	postdec1,w,c
  1312  0031D2  50E1               	movf	fsr1l,w,c
  1313  0031D4  E1FA               	bnz	copy_data2
  1314                           
  1315                           ; Clear objects allocated to BANK1 (100 bytes)
  1316  0031D6  EE01  F000         	lfsr	0,__pbssBANK1
  1317  0031DA  0E64               	movlw	100
  1318  0031DC                     clear_0:
  1319  0031DC  6AEE               	clrf	postinc0,c
  1320  0031DE  06E8               	decf	wreg,f,c
  1321  0031E0  E1FD               	bnz	clear_0
  1322                           
  1323                           ; Clear objects allocated to BANK0 (39 bytes)
  1324  0031E2  EE00  F0B8         	lfsr	0,__pbssBANK0
  1325  0031E6  0E27               	movlw	39
  1326  0031E8                     clear_1:
  1327  0031E8  6AEE               	clrf	postinc0,c
  1328  0031EA  06E8               	decf	wreg,f,c
  1329  0031EC  E1FD               	bnz	clear_1
  1330                           
  1331                           ; Clear objects allocated to COMRAM (56 bytes)
  1332  0031EE  EE00  F03E         	lfsr	0,__pbssCOMRAM
  1333  0031F2  0E38               	movlw	56
  1334  0031F4                     clear_2:
  1335  0031F4  6AEE               	clrf	postinc0,c
  1336  0031F6  06E8               	decf	wreg,f,c
  1337  0031F8  E1FD               	bnz	clear_2
  1338  0031FA                     end_of_initialization:
  1339                           	opt stack 0
  1340  0031FA                     __end_of__initialization:
  1341                           	opt stack 0
  1342  0031FA  907A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1343  0031FC  927A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1344  0031FE  0100               	movlb	0
  1345  003200  EF11  F018         	goto	_main	;jump to C main() function
  1346                           tblptru	equ	0xFF8
  1347                           tblptrh	equ	0xFF7
  1348                           tblptrl	equ	0xFF6
  1349                           tablat	equ	0xFF5
  1350                           postinc0	equ	0xFEE
  1351                           wreg	equ	0xFE8
  1352                           postdec1	equ	0xFE5
  1353                           fsr1h	equ	0xFE2
  1354                           fsr1l	equ	0xFE1
  1355                           
  1356                           	psect	bssCOMRAM
  1357  00003E                     __pbssCOMRAM:
  1358                           	opt stack 0
  1359  00003E                     _time_i:
  1360                           	opt stack 0
  1361  00003E                     	ds	14
  1362  00004C                     _DIST1:
  1363                           	opt stack 0
  1364  00004C                     	ds	10
  1365  000056                     _IR1:
  1366                           	opt stack 0
  1367  000056                     	ds	10
  1368  000060                     _PROX1:
  1369                           	opt stack 0
  1370  000060                     	ds	10
  1371  00006A                     _PROX2:
  1372                           	opt stack 0
  1373  00006A                     	ds	10
  1374  000074                     _DIST1_PIN:
  1375                           	opt stack 0
  1376  000074                     	ds	1
  1377  000075                     _PROX1_PIN:
  1378                           	opt stack 0
  1379  000075                     	ds	1
  1380                           tblptru	equ	0xFF8
  1381                           tblptrh	equ	0xFF7
  1382                           tblptrl	equ	0xFF6
  1383                           tablat	equ	0xFF5
  1384                           postinc0	equ	0xFEE
  1385                           wreg	equ	0xFE8
  1386                           postdec1	equ	0xFE5
  1387                           fsr1h	equ	0xFE2
  1388                           fsr1l	equ	0xFE1
  1389                           
  1390                           	psect	dataCOMRAM
  1391  000076                     __pdataCOMRAM:
  1392                           	opt stack 0
  1393  000076                     _DIST1_TRIG:
  1394                           	opt stack 0
  1395  000076                     	ds	1
  1396  000077                     _IR1_PIN:
  1397                           	opt stack 0
  1398  000077                     	ds	1
  1399  000078                     _IR2_PIN:
  1400                           	opt stack 0
  1401  000078                     	ds	1
  1402  000079                     _PROX2_PIN:
  1403                           	opt stack 0
  1404  000079                     	ds	1
  1405                           tblptru	equ	0xFF8
  1406                           tblptrh	equ	0xFF7
  1407                           tblptrl	equ	0xFF6
  1408                           tablat	equ	0xFF5
  1409                           postinc0	equ	0xFEE
  1410                           wreg	equ	0xFE8
  1411                           postdec1	equ	0xFE5
  1412                           fsr1h	equ	0xFE2
  1413                           fsr1l	equ	0xFE1
  1414                           
  1415                           	psect	bssBANK0
  1416  0000B8                     __pbssBANK0:
  1417                           	opt stack 0
  1418  0000B8                     _IR2:
  1419                           	opt stack 0
  1420  0000B8                     	ds	10
  1421  0000C2                     _time:
  1422                           	opt stack 0
  1423  0000C2                     	ds	7
  1424  0000C9                     _bottle_type:
  1425                           	opt stack 0
  1426  0000C9                     	ds	2
  1427  0000CB                     _discretize_counter:
  1428                           	opt stack 0
  1429  0000CB                     	ds	2
  1430  0000CD                     _eskaNoCap:
  1431                           	opt stack 0
  1432  0000CD                     	ds	2
  1433  0000CF                     _eskaWCap:
  1434                           	opt stack 0
  1435  0000CF                     	ds	2
  1436  0000D1                     _measure_counter:
  1437                           	opt stack 0
  1438  0000D1                     	ds	2
  1439  0000D3                     _release_counter:
  1440                           	opt stack 0
  1441  0000D3                     	ds	2
  1442  0000D5                     _runTime:
  1443                           	opt stack 0
  1444  0000D5                     	ds	2
  1445  0000D7                     _sorted_bottles:
  1446                           	opt stack 0
  1447  0000D7                     	ds	2
  1448  0000D9                     _timeDiff:
  1449                           	opt stack 0
  1450  0000D9                     	ds	2
  1451  0000DB                     _yopNoCap:
  1452                           	opt stack 0
  1453  0000DB                     	ds	2
  1454  0000DD                     _yopWCap:
  1455                           	opt stack 0
  1456  0000DD                     	ds	2
  1457                           tblptru	equ	0xFF8
  1458                           tblptrh	equ	0xFF7
  1459                           tblptrl	equ	0xFF6
  1460                           tablat	equ	0xFF5
  1461                           postinc0	equ	0xFEE
  1462                           wreg	equ	0xFE8
  1463                           postdec1	equ	0xFE5
  1464                           fsr1h	equ	0xFE2
  1465                           fsr1l	equ	0xFE1
  1466                           
  1467                           	psect	dataBANK0
  1468  0000DF                     __pdataBANK0:
  1469                           	opt stack 0
  1470  0000DF                     _DIST_THRESHOLD_HI:
  1471                           	opt stack 0
  1472  0000DF                     	ds	2
  1473  0000E1                     _DIST_THRESHOLD_LOW:
  1474                           	opt stack 0
  1475  0000E1                     	ds	2
  1476  0000E3                     _IR_THRESHOLD_HI:
  1477                           	opt stack 0
  1478  0000E3                     	ds	2
  1479  0000E5                     _IR_THRESHOLD_LOW:
  1480                           	opt stack 0
  1481  0000E5                     	ds	2
  1482  0000E7                     _nstate:
  1483                           	opt stack 0
  1484  0000E7                     	ds	1
  1485  0000E8                     _state:
  1486                           	opt stack 0
  1487  0000E8                     	ds	1
  1488  0000E9                     _creditIndex:
  1489                           	opt stack 0
  1490  0000E9                     	ds	2
  1491  0000EB                     _creditSize:
  1492                           	opt stack 0
  1493  0000EB                     	ds	2
  1494  0000ED                     _endIndex:
  1495                           	opt stack 0
  1496  0000ED                     	ds	2
  1497  0000EF                     _endSize:
  1498                           	opt stack 0
  1499  0000EF                     	ds	2
  1500  0000F1                     _events:
  1501                           	opt stack 0
  1502  0000F1                     	ds	2
  1503  0000F3                     _logIndex:
  1504                           	opt stack 0
  1505  0000F3                     	ds	2
  1506  0000F5                     _menuIndex:
  1507                           	opt stack 0
  1508  0000F5                     	ds	2
  1509  0000F7                     _menuSize:
  1510                           	opt stack 0
  1511  0000F7                     	ds	2
  1512                           tblptru	equ	0xFF8
  1513                           tblptrh	equ	0xFF7
  1514                           tblptrl	equ	0xFF6
  1515                           tablat	equ	0xFF5
  1516                           postinc0	equ	0xFEE
  1517                           wreg	equ	0xFE8
  1518                           postdec1	equ	0xFE5
  1519                           fsr1h	equ	0xFE2
  1520                           fsr1l	equ	0xFE1
  1521                           
  1522                           	psect	bssBANK1
  1523  000100                     __pbssBANK1:
  1524                           	opt stack 0
  1525  000100                     _latestSortedBottleTime:
  1526                           	opt stack 0
  1527  000100                     	ds	14
  1528  00010E                     _startTime:
  1529                           	opt stack 0
  1530  00010E                     	ds	14
  1531  00011C                     _display0:
  1532                           	opt stack 0
  1533  00011C                     	ds	18
  1534  00012E                     _display1:
  1535                           	opt stack 0
  1536  00012E                     	ds	18
  1537  000140                     _ndisplay0:
  1538                           	opt stack 0
  1539  000140                     	ds	18
  1540  000152                     _ndisplay1:
  1541                           	opt stack 0
  1542  000152                     	ds	18
  1543                           tblptru	equ	0xFF8
  1544                           tblptrh	equ	0xFF7
  1545                           tblptrl	equ	0xFF6
  1546                           tablat	equ	0xFF5
  1547                           postinc0	equ	0xFEE
  1548                           wreg	equ	0xFE8
  1549                           postdec1	equ	0xFE5
  1550                           fsr1h	equ	0xFE2
  1551                           fsr1l	equ	0xFE1
  1552                           
  1553                           	psect	dataBIGRAM
  1554  000174                     __pdataBIGRAM:
  1555                           	opt stack 0
  1556  000174                     _menu:
  1557                           	opt stack 0
  1558  000174                     	ds	720
  1559                           tblptru	equ	0xFF8
  1560                           tblptrh	equ	0xFF7
  1561                           tblptrl	equ	0xFF6
  1562                           tablat	equ	0xFF5
  1563                           postinc0	equ	0xFEE
  1564                           wreg	equ	0xFE8
  1565                           postdec1	equ	0xFE5
  1566                           fsr1h	equ	0xFE2
  1567                           fsr1l	equ	0xFE1
  1568                           
  1569                           	psect	cstackBANK1
  1570  000164                     __pcstackBANK1:
  1571                           	opt stack 0
  1572  000164                     display_menu@selector:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0x0
  1576  000164                     	ds	2
  1577  000166                     display_menu@menuSizePtr:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x2
  1581  000166                     	ds	2
  1582  000168                     display_menu@menuSelection:
  1583                           	opt stack 0
  1584                           
  1585                           ; 2 bytes @ 0x4
  1586  000168                     	ds	2
  1587  00016A                     _display_menu$1147:
  1588                           	opt stack 0
  1589                           
  1590                           ; 2 bytes @ 0x6
  1591  00016A                     	ds	2
  1592  00016C                     display_menu@menuIndexPtr:
  1593                           	opt stack 0
  1594                           
  1595                           ; 2 bytes @ 0x8
  1596  00016C                     	ds	2
  1597                           tblptru	equ	0xFF8
  1598                           tblptrh	equ	0xFF7
  1599                           tblptrl	equ	0xFF6
  1600                           tablat	equ	0xFF5
  1601                           postinc0	equ	0xFEE
  1602                           wreg	equ	0xFE8
  1603                           postdec1	equ	0xFE5
  1604                           fsr1h	equ	0xFE2
  1605                           fsr1l	equ	0xFE1
  1606                           
  1607                           	psect	cstackBANK0
  1608  000080                     __pcstackBANK0:
  1609                           	opt stack 0
  1610  000080                     ??_readADC:
  1611  000080                     ??_isdigit:
  1612  000080                     ??_I2C_Master_Wait:
  1613  000080                     ?_strcmp:
  1614                           	opt stack 0
  1615  000080                     ?___wmul:
  1616                           	opt stack 0
  1617  000080                     ?___awdiv:
  1618                           	opt stack 0
  1619  000080                     ?___awmod:
  1620                           	opt stack 0
  1621  000080                     ?___lwdiv:
  1622                           	opt stack 0
  1623  000080                     ?___lldiv:
  1624                           	opt stack 0
  1625  000080                     lcdNibble@temp:
  1626                           	opt stack 0
  1627  000080                     ___wmul@multiplier:
  1628                           	opt stack 0
  1629  000080                     ___awdiv@dividend:
  1630                           	opt stack 0
  1631  000080                     ___awmod@dividend:
  1632                           	opt stack 0
  1633  000080                     ___lwdiv@dividend:
  1634                           	opt stack 0
  1635  000080                     strcmp@s1:
  1636                           	opt stack 0
  1637  000080                     strcpy@to:
  1638                           	opt stack 0
  1639  000080                     ___lldiv@dividend:
  1640                           	opt stack 0
  1641                           
  1642                           ; 4 bytes @ 0x0
  1643  000080                     	ds	1
  1644  000081                     I2C_Master_Read@a:
  1645                           	opt stack 0
  1646  000081                     lcdNibble@data:
  1647                           	opt stack 0
  1648  000081                     readADC@channel:
  1649                           	opt stack 0
  1650  000081                     _isdigit$760:
  1651                           	opt stack 0
  1652  000081                     I2C_Master_Write@d:
  1653                           	opt stack 0
  1654                           
  1655                           ; 2 bytes @ 0x1
  1656  000081                     	ds	1
  1657  000082                     ??_read_sensors:
  1658  000082                     I2C_Master_Read@temp:
  1659                           	opt stack 0
  1660  000082                     lcdInst@data:
  1661                           	opt stack 0
  1662  000082                     putch@data:
  1663                           	opt stack 0
  1664  000082                     isdigit@c:
  1665                           	opt stack 0
  1666  000082                     ___wmul@multiplicand:
  1667                           	opt stack 0
  1668  000082                     ___awdiv@divisor:
  1669                           	opt stack 0
  1670  000082                     ___awmod@divisor:
  1671                           	opt stack 0
  1672  000082                     ___lwdiv@divisor:
  1673                           	opt stack 0
  1674  000082                     strcmp@s2:
  1675                           	opt stack 0
  1676  000082                     strcpy@from:
  1677                           	opt stack 0
  1678                           
  1679                           ; 2 bytes @ 0x2
  1680  000082                     	ds	1
  1681  000083                     ??_initLCD:
  1682  000083                     set_time@i:
  1683                           	opt stack 0
  1684                           
  1685                           ; 1 bytes @ 0x3
  1686  000083                     	ds	1
  1687  000084                     ??_strcmp:
  1688  000084                     ___awdiv@counter:
  1689                           	opt stack 0
  1690  000084                     ___awmod@counter:
  1691                           	opt stack 0
  1692  000084                     ___lwdiv@counter:
  1693                           	opt stack 0
  1694  000084                     ___wmul@product:
  1695                           	opt stack 0
  1696  000084                     strcpy@cp:
  1697                           	opt stack 0
  1698  000084                     ___lldiv@divisor:
  1699                           	opt stack 0
  1700                           
  1701                           ; 4 bytes @ 0x4
  1702  000084                     	ds	1
  1703  000085                     ___awdiv@sign:
  1704                           	opt stack 0
  1705  000085                     ___awmod@sign:
  1706                           	opt stack 0
  1707  000085                     strcmp@r:
  1708                           	opt stack 0
  1709  000085                     ___lwdiv@quotient:
  1710                           	opt stack 0
  1711                           
  1712                           ; 2 bytes @ 0x5
  1713  000085                     	ds	1
  1714  000086                     ??_update_RTC:
  1715  000086                     ?__measure:
  1716                           	opt stack 0
  1717  000086                     read_sensors@i:
  1718                           	opt stack 0
  1719  000086                     ___awdiv@quotient:
  1720                           	opt stack 0
  1721                           
  1722                           ; 2 bytes @ 0x6
  1723  000086                     	ds	1
  1724  000087                     ?___lwmod:
  1725                           	opt stack 0
  1726  000087                     ___lwmod@dividend:
  1727                           	opt stack 0
  1728                           
  1729                           ; 2 bytes @ 0x7
  1730  000087                     	ds	1
  1731  000088                     ___lldiv@quotient:
  1732                           	opt stack 0
  1733                           
  1734                           ; 4 bytes @ 0x8
  1735  000088                     	ds	1
  1736  000089                     ___lwmod@divisor:
  1737                           	opt stack 0
  1738                           
  1739                           ; 2 bytes @ 0x9
  1740  000089                     	ds	1
  1741  00008A                     update_RTC@i:
  1742                           	opt stack 0
  1743  00008A                     __measure@i:
  1744                           	opt stack 0
  1745                           
  1746                           ; 1 bytes @ 0xA
  1747  00008A                     	ds	1
  1748  00008B                     __measure@i_482:
  1749                           	opt stack 0
  1750  00008B                     ___lwmod@counter:
  1751                           	opt stack 0
  1752                           
  1753                           ; 1 bytes @ 0xB
  1754  00008B                     	ds	1
  1755  00008C                     ?__doprnt:
  1756                           	opt stack 0
  1757  00008C                     __measure@i_483:
  1758                           	opt stack 0
  1759  00008C                     ___lldiv@counter:
  1760                           	opt stack 0
  1761  00008C                     __doprnt@pb:
  1762                           	opt stack 0
  1763                           
  1764                           ; 2 bytes @ 0xC
  1765  00008C                     	ds	1
  1766  00008D                     __measure@i_484:
  1767                           	opt stack 0
  1768  00008D                     I2C_Master_Init@c:
  1769                           	opt stack 0
  1770                           
  1771                           ; 4 bytes @ 0xD
  1772  00008D                     	ds	1
  1773  00008E                     __measure@i_485:
  1774                           	opt stack 0
  1775  00008E                     __doprnt@f:
  1776                           	opt stack 0
  1777                           
  1778                           ; 2 bytes @ 0xE
  1779  00008E                     	ds	1
  1780  00008F                     __measure@i_486:
  1781                           	opt stack 0
  1782                           
  1783                           ; 1 bytes @ 0xF
  1784  00008F                     	ds	1
  1785  000090                     __measure@i_487:
  1786                           	opt stack 0
  1787  000090                     __doprnt@ap:
  1788                           	opt stack 0
  1789                           
  1790                           ; 2 bytes @ 0x10
  1791  000090                     	ds	1
  1792  000091                     ??_I2C_Master_Init:
  1793  000091                     __measure@i_488:
  1794                           	opt stack 0
  1795                           
  1796                           ; 1 bytes @ 0x11
  1797  000091                     	ds	1
  1798  000092                     ??__doprnt:
  1799  000092                     __measure@measurement:
  1800                           	opt stack 0
  1801                           
  1802                           ; 2 bytes @ 0x12
  1803  000092                     	ds	2
  1804  000094                     ??_sort:
  1805                           
  1806                           ; 1 bytes @ 0x14
  1807  000094                     	ds	2
  1808  000096                     __doprnt@idx:
  1809                           	opt stack 0
  1810                           
  1811                           ; 1 bytes @ 0x16
  1812  000096                     	ds	1
  1813  000097                     __doprnt@prec:
  1814                           	opt stack 0
  1815                           
  1816                           ; 1 bytes @ 0x17
  1817  000097                     	ds	1
  1818  000098                     sort@i:
  1819                           	opt stack 0
  1820  000098                     __doprnt@len:
  1821                           	opt stack 0
  1822                           
  1823                           ; 2 bytes @ 0x18
  1824  000098                     	ds	2
  1825  00009A                     __doprnt@cp:
  1826                           	opt stack 0
  1827                           
  1828                           ; 2 bytes @ 0x1A
  1829  00009A                     	ds	2
  1830  00009C                     __doprnt@val:
  1831                           	opt stack 0
  1832                           
  1833                           ; 2 bytes @ 0x1C
  1834  00009C                     	ds	2
  1835  00009E                     __doprnt@flag:
  1836                           	opt stack 0
  1837                           
  1838                           ; 1 bytes @ 0x1E
  1839  00009E                     	ds	1
  1840  00009F                     __doprnt@width:
  1841                           	opt stack 0
  1842                           
  1843                           ; 2 bytes @ 0x1F
  1844  00009F                     	ds	2
  1845  0000A1                     __doprnt@c:
  1846                           	opt stack 0
  1847                           
  1848                           ; 1 bytes @ 0x21
  1849  0000A1                     	ds	1
  1850  0000A2                     ?_printf:
  1851                           	opt stack 0
  1852  0000A2                     ?_sprintf:
  1853                           	opt stack 0
  1854  0000A2                     printf@f:
  1855                           	opt stack 0
  1856  0000A2                     sprintf@wh:
  1857                           	opt stack 0
  1858                           
  1859                           ; 2 bytes @ 0x22
  1860  0000A2                     	ds	2
  1861  0000A4                     printf@ap:
  1862                           	opt stack 0
  1863  0000A4                     sprintf@f:
  1864                           	opt stack 0
  1865                           
  1866                           ; 2 bytes @ 0x24
  1867  0000A4                     	ds	2
  1868  0000A6                     printf@pb:
  1869                           	opt stack 0
  1870                           
  1871                           ; 4 bytes @ 0x26
  1872  0000A6                     	ds	4
  1873  0000AA                     ??_update_lcd:
  1874                           
  1875                           ; 1 bytes @ 0x2A
  1876  0000AA                     	ds	1
  1877  0000AB                     update_lcd@flag:
  1878                           	opt stack 0
  1879                           
  1880                           ; 2 bytes @ 0x2B
  1881  0000AB                     	ds	1
  1882  0000AC                     sprintf@ap:
  1883                           	opt stack 0
  1884                           
  1885                           ; 2 bytes @ 0x2C
  1886  0000AC                     	ds	2
  1887  0000AE                     sprintf@pb:
  1888                           	opt stack 0
  1889                           
  1890                           ; 4 bytes @ 0x2E
  1891  0000AE                     	ds	4
  1892  0000B2                     ??_update_state:
  1893  0000B2                     ??_display_menu:
  1894                           
  1895                           ; 1 bytes @ 0x32
  1896  0000B2                     	ds	2
  1897  0000B4                     update_state@i:
  1898                           	opt stack 0
  1899                           
  1900                           ; 1 bytes @ 0x34
  1901  0000B4                     	ds	3
  1902  0000B7                     ??_main:
  1903                           
  1904                           ; 1 bytes @ 0x37
  1905  0000B7                     	ds	1
  1906                           tblptru	equ	0xFF8
  1907                           tblptrh	equ	0xFF7
  1908                           tblptrl	equ	0xFF6
  1909                           tablat	equ	0xFF5
  1910                           postinc0	equ	0xFEE
  1911                           wreg	equ	0xFE8
  1912                           postdec1	equ	0xFE5
  1913                           fsr1h	equ	0xFE2
  1914                           fsr1l	equ	0xFE1
  1915                           
  1916                           	psect	cstackCOMRAM
  1917  000001                     __pcstackCOMRAM:
  1918                           	opt stack 0
  1919  000001                     ??i2_isdigit:
  1920  000001                     ?i2___wmul:
  1921                           	opt stack 0
  1922  000001                     ?i2___awmod:
  1923                           	opt stack 0
  1924  000001                     ?i2___lwdiv:
  1925                           	opt stack 0
  1926  000001                     i2lcdNibble@temp:
  1927                           	opt stack 0
  1928  000001                     i2___wmul@multiplier:
  1929                           	opt stack 0
  1930  000001                     i2___awmod@dividend:
  1931                           	opt stack 0
  1932  000001                     i2___lwdiv@dividend:
  1933                           	opt stack 0
  1934                           
  1935                           ; 2 bytes @ 0x0
  1936  000001                     	ds	1
  1937  000002                     i2lcdNibble@data:
  1938                           	opt stack 0
  1939  000002                     i2_isdigit$760:
  1940                           	opt stack 0
  1941                           
  1942                           ; 1 bytes @ 0x1
  1943  000002                     	ds	1
  1944  000003                     i2lcdInst@data:
  1945                           	opt stack 0
  1946  000003                     i2putch@data:
  1947                           	opt stack 0
  1948  000003                     i2isdigit@c:
  1949                           	opt stack 0
  1950  000003                     i2___wmul@multiplicand:
  1951                           	opt stack 0
  1952  000003                     i2___awmod@divisor:
  1953                           	opt stack 0
  1954  000003                     i2___lwdiv@divisor:
  1955                           	opt stack 0
  1956                           
  1957                           ; 2 bytes @ 0x2
  1958  000003                     	ds	2
  1959  000005                     i2___awmod@counter:
  1960                           	opt stack 0
  1961  000005                     i2___wmul@product:
  1962                           	opt stack 0
  1963  000005                     i2___lwdiv@quotient:
  1964                           	opt stack 0
  1965                           
  1966                           ; 2 bytes @ 0x4
  1967  000005                     	ds	1
  1968  000006                     i2___awmod@sign:
  1969                           	opt stack 0
  1970                           
  1971                           ; 1 bytes @ 0x5
  1972  000006                     	ds	1
  1973  000007                     i2___lwdiv@counter:
  1974                           	opt stack 0
  1975                           
  1976                           ; 1 bytes @ 0x6
  1977  000007                     	ds	1
  1978  000008                     ?i2___lwmod:
  1979                           	opt stack 0
  1980  000008                     i2___lwmod@dividend:
  1981                           	opt stack 0
  1982                           
  1983                           ; 2 bytes @ 0x7
  1984  000008                     	ds	2
  1985  00000A                     i2___lwmod@divisor:
  1986                           	opt stack 0
  1987                           
  1988                           ; 2 bytes @ 0x9
  1989  00000A                     	ds	2
  1990  00000C                     i2___lwmod@counter:
  1991                           	opt stack 0
  1992                           
  1993                           ; 1 bytes @ 0xB
  1994  00000C                     	ds	1
  1995  00000D                     ?i2__doprnt:
  1996                           	opt stack 0
  1997  00000D                     i2__doprnt@pb:
  1998                           	opt stack 0
  1999                           
  2000                           ; 2 bytes @ 0xC
  2001  00000D                     	ds	2
  2002  00000F                     i2__doprnt@f:
  2003                           	opt stack 0
  2004                           
  2005                           ; 2 bytes @ 0xE
  2006  00000F                     	ds	2
  2007  000011                     i2__doprnt@ap:
  2008                           	opt stack 0
  2009                           
  2010                           ; 2 bytes @ 0x10
  2011  000011                     	ds	2
  2012  000013                     ??i2__doprnt:
  2013                           
  2014                           ; 1 bytes @ 0x12
  2015  000013                     	ds	4
  2016  000017                     i2__doprnt@idx:
  2017                           	opt stack 0
  2018                           
  2019                           ; 1 bytes @ 0x16
  2020  000017                     	ds	1
  2021  000018                     i2__doprnt@prec:
  2022                           	opt stack 0
  2023                           
  2024                           ; 1 bytes @ 0x17
  2025  000018                     	ds	1
  2026  000019                     i2__doprnt@len:
  2027                           	opt stack 0
  2028                           
  2029                           ; 2 bytes @ 0x18
  2030  000019                     	ds	2
  2031  00001B                     i2__doprnt@cp:
  2032                           	opt stack 0
  2033                           
  2034                           ; 2 bytes @ 0x1A
  2035  00001B                     	ds	2
  2036  00001D                     i2__doprnt@val:
  2037                           	opt stack 0
  2038                           
  2039                           ; 2 bytes @ 0x1C
  2040  00001D                     	ds	2
  2041  00001F                     i2__doprnt@flag:
  2042                           	opt stack 0
  2043                           
  2044                           ; 1 bytes @ 0x1E
  2045  00001F                     	ds	1
  2046  000020                     i2__doprnt@width:
  2047                           	opt stack 0
  2048                           
  2049                           ; 2 bytes @ 0x1F
  2050  000020                     	ds	2
  2051  000022                     i2__doprnt@c:
  2052                           	opt stack 0
  2053                           
  2054                           ; 1 bytes @ 0x21
  2055  000022                     	ds	1
  2056  000023                     ?i2_printf:
  2057                           	opt stack 0
  2058  000023                     i2printf@f:
  2059                           	opt stack 0
  2060                           
  2061                           ; 2 bytes @ 0x22
  2062  000023                     	ds	2
  2063  000025                     i2printf@ap:
  2064                           	opt stack 0
  2065                           
  2066                           ; 2 bytes @ 0x24
  2067  000025                     	ds	2
  2068  000027                     i2printf@pb:
  2069                           	opt stack 0
  2070                           
  2071                           ; 4 bytes @ 0x26
  2072  000027                     	ds	4
  2073  00002B                     ??_keypressed:
  2074                           
  2075                           ; 1 bytes @ 0x2A
  2076  00002B                     	ds	16
  2077  00003B                     keypressed@i:
  2078                           	opt stack 0
  2079                           
  2080                           ; 2 bytes @ 0x3A
  2081  00003B                     	ds	2
  2082  00003D                     keypressed@keypress:
  2083                           	opt stack 0
  2084                           
  2085                           ; 1 bytes @ 0x3C
  2086  00003D                     	ds	1
  2087                           tblptru	equ	0xFF8
  2088                           tblptrh	equ	0xFF7
  2089                           tblptrl	equ	0xFF6
  2090                           tablat	equ	0xFF5
  2091                           postinc0	equ	0xFEE
  2092                           wreg	equ	0xFE8
  2093                           postdec1	equ	0xFE5
  2094                           fsr1h	equ	0xFE2
  2095                           fsr1l	equ	0xFE1
  2096                           
  2097 ;;
  2098 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2099 ;;
  2100 ;; *************** function _main *****************
  2101 ;; Defined at:
  2102 ;;		line 101 in file "main.c"
  2103 ;; Parameters:    Size  Location     Type
  2104 ;;		None
  2105 ;; Auto vars:     Size  Location     Type
  2106 ;;		None
  2107 ;; Return value:  Size  Location     Type
  2108 ;;                  1    wreg      void 
  2109 ;; Registers used:
  2110 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2111 ;; Tracked objects:
  2112 ;;		On entry : 0/0
  2113 ;;		On exit  : 0/0
  2114 ;;		Unchanged: 0/0
  2115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2116 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2118 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2119 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2120 ;;Total ram usage:        1 bytes
  2121 ;; Hardware stack levels required when called:   11
  2122 ;; This function calls:
  2123 ;;		_I2C_Master_Init
  2124 ;;		_initLCD
  2125 ;;		_read_sensors
  2126 ;;		_set_time
  2127 ;;		_sort
  2128 ;;		_update_RTC
  2129 ;;		_update_display
  2130 ;;		_update_lcd
  2131 ;;		_update_state
  2132 ;; This function is called by:
  2133 ;;		Startup code after reset
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137                           	psect	text0
  2138  003022                     __ptext0:
  2139                           	opt stack 0
  2140  003022                     _main:
  2141                           	opt stack 20
  2142                           
  2143                           ;main.c: 102: discretize=3000/(40+10);
  2144                           
  2145                           ;incstack = 0
  2146  003022  0E00               	movlw	0
  2147  003024  0101               	movlb	1	; () banked
  2148  003026  6F6F               	movwf	(_discretize+1)& (0+255),b
  2149  003028  0E3C               	movlw	60
  2150  00302A  6F6E               	movwf	_discretize& (0+255),b
  2151                           
  2152                           ;main.c: 103: release=(4000)/(40+10);
  2153  00302C  0E00               	movlw	0
  2154  00302E  0101               	movlb	1	; () banked
  2155  003030  6F73               	movwf	(_release+1)& (0+255),b
  2156  003032  0E50               	movlw	80
  2157  003034  6F72               	movwf	_release& (0+255),b
  2158                           
  2159                           ;main.c: 104: measure=5+500/(40+10);
  2160  003036  0E00               	movlw	0
  2161  003038  0101               	movlb	1	; () banked
  2162  00303A  6F71               	movwf	(_measure+1)& (0+255),b
  2163  00303C  0E0F               	movlw	15
  2164  00303E  6F70               	movwf	_measure& (0+255),b
  2165                           
  2166                           ;main.c: 109: TRISC = 0x00;
  2167  003040  0E00               	movlw	0
  2168  003042  6E94               	movwf	3988,c	;volatile
  2169                           
  2170                           ;main.c: 110: TRISD = 0x00;
  2171  003044  0E00               	movlw	0
  2172  003046  6E95               	movwf	3989,c	;volatile
  2173                           
  2174                           ; BSR set to: 1
  2175                           ;main.c: 111: TRISB = 0xFF;
  2176  003048  6893               	setf	3987,c	;volatile
  2177                           
  2178                           ;main.c: 112: TRISE = 0x03;
  2179  00304A  0E03               	movlw	3
  2180  00304C  6E96               	movwf	3990,c	;volatile
  2181                           
  2182                           ;main.c: 113: LATB = 0x00;
  2183  00304E  0E00               	movlw	0
  2184  003050  6E8A               	movwf	3978,c	;volatile
  2185                           
  2186                           ;main.c: 114: LATC = 0x00;
  2187  003052  0E00               	movlw	0
  2188  003054  6E8B               	movwf	3979,c	;volatile
  2189                           
  2190                           ;main.c: 116: ADCON0 = 0x00;
  2191  003056  0E00               	movlw	0
  2192  003058  6EC2               	movwf	4034,c	;volatile
  2193                           
  2194                           ;main.c: 117: ADCON1 = 0x0B;
  2195  00305A  0E0B               	movlw	11
  2196  00305C  6EC1               	movwf	4033,c	;volatile
  2197                           
  2198                           ;main.c: 118: CVRCON = 0x00;
  2199  00305E  0E00               	movlw	0
  2200  003060  6EB5               	movwf	4021,c	;volatile
  2201                           
  2202                           ; BSR set to: 1
  2203                           ;main.c: 119: CMCONbits.CIS = 0;
  2204  003062  96B4               	bcf	4020,3,c	;volatile
  2205                           
  2206                           ; BSR set to: 1
  2207                           ;main.c: 120: ADFM = 1;
  2208  003064  8EC0               	bsf	4032,7,c	;volatile
  2209                           
  2210                           ; BSR set to: 1
  2211                           ;main.c: 122: initLCD();
  2212  003066  EC09  F01B         	call	_initLCD	;wreg free
  2213                           
  2214                           ;main.c: 123: INT1IE = 1;
  2215  00306A  86F0               	bsf	intcon3,3,c	;volatile
  2216                           
  2217                           ;main.c: 124: nRBPU = 0;
  2218  00306C  9EF1               	bcf	intcon2,7,c	;volatile
  2219                           
  2220                           ;main.c: 125: I2C_Master_Init(10000);
  2221  00306E  0E10               	movlw	16
  2222  003070  0100               	movlb	0	; () banked
  2223  003072  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2224  003074  0E27               	movlw	39
  2225  003076  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2226  003078  0E00               	movlw	0
  2227  00307A  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2228  00307C  0E00               	movlw	0
  2229  00307E  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2230  003080  EC0C  F01A         	call	_I2C_Master_Init	;wreg free
  2231                           
  2232                           ;main.c: 127: (INTCONbits.GIE = 0);
  2233  003084  9EF2               	bcf	intcon,7,c	;volatile
  2234                           
  2235                           ;main.c: 128: set_time();
  2236  003086  ECDB  F019         	call	_set_time	;wreg free
  2237  00308A                     l8144:
  2238                           
  2239                           ;main.c: 130: (INTCONbits.GIE = 0);
  2240  00308A  9EF2               	bcf	intcon,7,c	;volatile
  2241                           
  2242                           ;main.c: 131: update_RTC();
  2243  00308C  EC85  F015         	call	_update_RTC	;wreg free
  2244                           
  2245                           ;main.c: 132: if (state=='s'){
  2246  003090  0E73               	movlw	115
  2247  003092  0100               	movlb	0	; () banked
  2248  003094  19E8               	xorwf	_state& (0+255),w,b
  2249  003096  A4D8               	btfss	status,2,c
  2250  003098  D004               	goto	l8152
  2251                           
  2252                           ; BSR set to: 0
  2253                           ;main.c: 133: read_sensors();
  2254  00309A  EC25  F013         	call	_read_sensors	;wreg free
  2255                           
  2256                           ;main.c: 134: sort();
  2257  00309E  EC69  F014         	call	_sort	;wreg free
  2258  0030A2                     l8152:
  2259                           
  2260                           ;main.c: 135: }
  2261                           ;main.c: 136: update_state();
  2262  0030A2  EC48  F010         	call	_update_state	;wreg free
  2263                           
  2264                           ;main.c: 137: update_display();
  2265  0030A6  EC3B  F016         	call	_update_display	;wreg free
  2266                           
  2267                           ;main.c: 138: update_lcd();
  2268  0030AA  ECD5  F016         	call	_update_lcd	;wreg free
  2269  0030AE                     l8158:
  2270  0030AE  0E78               	movlw	120
  2271  0030B0  0100               	movlb	0	; () banked
  2272  0030B2  19E8               	xorwf	_state& (0+255),w,b
  2273  0030B4  B4D8               	btfsc	status,2,c
  2274  0030B6  D7FB               	goto	l8158
  2275                           
  2276                           ; BSR set to: 0
  2277                           ;main.c: 140: (INTCONbits.GIE = 1);
  2278  0030B8  8EF2               	bsf	intcon,7,c	;volatile
  2279                           
  2280                           ; BSR set to: 0
  2281                           ;main.c: 141: _delay((unsigned long)((40)*(10000000/4000.0)));
  2282  0030BA  0E82               	movlw	130
  2283  0030BC  0100               	movlb	0	; () banked
  2284  0030BE  6FB7               	movwf	??_main& (0+255),b
  2285  0030C0  0EDD               	movlw	221
  2286  0030C2                     u13207:
  2287  0030C2  2EE8               	decfsz	wreg,f,c
  2288  0030C4  D7FE               	bra	u13207
  2289  0030C6  2FB7               	decfsz	??_main& (0+255),f,b
  2290  0030C8  D7FC               	bra	u13207
  2291  0030CA  D000               	nop2	
  2292                           
  2293                           ;main.c: 142: (INTCONbits.GIE = 0);
  2294  0030CC  9EF2               	bcf	intcon,7,c	;volatile
  2295  0030CE  D7DD               	goto	l8144
  2296  0030D0                     __end_of_main:
  2297                           	opt stack 0
  2298                           tblptru	equ	0xFF8
  2299                           tblptrh	equ	0xFF7
  2300                           tblptrl	equ	0xFF6
  2301                           tablat	equ	0xFF5
  2302                           intcon	equ	0xFF2
  2303                           intcon2	equ	0xFF1
  2304                           intcon3	equ	0xFF0
  2305                           postinc0	equ	0xFEE
  2306                           wreg	equ	0xFE8
  2307                           postdec1	equ	0xFE5
  2308                           fsr1h	equ	0xFE2
  2309                           fsr1l	equ	0xFE1
  2310                           status	equ	0xFD8
  2311                           
  2312 ;; *************** function _update_state *****************
  2313 ;; Defined at:
  2314 ;;		line 232 in file "main.c"
  2315 ;; Parameters:    Size  Location     Type
  2316 ;;		None
  2317 ;; Auto vars:     Size  Location     Type
  2318 ;;  i               1   52[BANK0 ] unsigned char 
  2319 ;; Return value:  Size  Location     Type
  2320 ;;                  1    wreg      void 
  2321 ;; Registers used:
  2322 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2323 ;; Tracked objects:
  2324 ;;		On entry : 0/0
  2325 ;;		On exit  : 0/0
  2326 ;;		Unchanged: 0/0
  2327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2328 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2329 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2330 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2331 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2332 ;;Total ram usage:        3 bytes
  2333 ;; Hardware stack levels used:    1
  2334 ;; Hardware stack levels required when called:    9
  2335 ;; This function calls:
  2336 ;;		___awdiv
  2337 ;;		___awmod
  2338 ;;		_sprintf
  2339 ;; This function is called by:
  2340 ;;		_main
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344                           	psect	text1
  2345  002090                     __ptext1:
  2346                           	opt stack 0
  2347  002090                     _update_state:
  2348                           	opt stack 21
  2349                           
  2350                           ;main.c: 233: if ((nstate=='s'&&state!='s')||(nstate=='m'&&state!='m')){
  2351                           
  2352                           ;incstack = 0
  2353  002090  0E73               	movlw	115
  2354  002092  0100               	movlb	0	; () banked
  2355  002094  19E7               	xorwf	_nstate& (0+255),w,b
  2356  002096  A4D8               	btfss	status,2,c
  2357  002098  D005               	goto	l8006
  2358                           
  2359                           ; BSR set to: 0
  2360  00209A  0E73               	movlw	115
  2361  00209C  0100               	movlb	0	; () banked
  2362  00209E  19E8               	xorwf	_state& (0+255),w,b
  2363  0020A0  A4D8               	btfss	status,2,c
  2364  0020A2  D00A               	goto	l8010
  2365  0020A4                     l8006:
  2366                           
  2367                           ; BSR set to: 0
  2368  0020A4  0E6D               	movlw	109
  2369  0020A6  0100               	movlb	0	; () banked
  2370  0020A8  19E7               	xorwf	_nstate& (0+255),w,b
  2371  0020AA  A4D8               	btfss	status,2,c
  2372  0020AC  D04B               	goto	l8028
  2373                           
  2374                           ; BSR set to: 0
  2375  0020AE  0E6D               	movlw	109
  2376  0020B0  0100               	movlb	0	; () banked
  2377  0020B2  19E8               	xorwf	_state& (0+255),w,b
  2378  0020B4  B4D8               	btfsc	status,2,c
  2379  0020B6  D046               	goto	l8028
  2380  0020B8                     l8010:
  2381                           
  2382                           ; BSR set to: 0
  2383                           ;main.c: 234: for (char i=0;i<7;i++){
  2384  0020B8  0E00               	movlw	0
  2385  0020BA  0100               	movlb	0	; () banked
  2386  0020BC  6FB4               	movwf	update_state@i& (0+255),b
  2387  0020BE                     l8012:
  2388                           
  2389                           ; BSR set to: 0
  2390  0020BE  0E06               	movlw	6
  2391  0020C0  0100               	movlb	0	; () banked
  2392  0020C2  65B4               	cpfsgt	update_state@i& (0+255),b
  2393  0020C4  D001               	goto	l8016
  2394  0020C6  D03E               	goto	l8028
  2395  0020C8                     l8016:
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;main.c: 235: startTime[i]=time_i[i];
  2399  0020C8  0100               	movlb	0	; () banked
  2400  0020CA  51B4               	movf	update_state@i& (0+255),w,b
  2401  0020CC  0D02               	mullw	2
  2402  0020CE  0E3E               	movlw	low _time_i
  2403  0020D0  24F3               	addwf	prodl,w,c
  2404  0020D2  6ED9               	movwf	fsr2l,c
  2405  0020D4  0E00               	movlw	high _time_i
  2406  0020D6  20F4               	addwfc	prodh,w,c
  2407  0020D8  6EDA               	movwf	fsr2h,c
  2408  0020DA  0100               	movlb	0	; () banked
  2409  0020DC  51B4               	movf	update_state@i& (0+255),w,b
  2410  0020DE  0D02               	mullw	2
  2411  0020E0  0E0E               	movlw	low _startTime
  2412  0020E2  24F3               	addwf	prodl,w,c
  2413  0020E4  6EE1               	movwf	fsr1l,c
  2414  0020E6  0E01               	movlw	high _startTime
  2415  0020E8  20F4               	addwfc	prodh,w,c
  2416  0020EA  6EE2               	movwf	fsr1h,c
  2417  0020EC  CFDE FFE6          	movff	postinc2,postinc1
  2418  0020F0  CFDD FFE5          	movff	postdec2,postdec1
  2419                           
  2420                           ;main.c: 236: latestSortedBottleTime[i]=time_i[i];
  2421  0020F4  0100               	movlb	0	; () banked
  2422  0020F6  51B4               	movf	update_state@i& (0+255),w,b
  2423  0020F8  0D02               	mullw	2
  2424  0020FA  0E3E               	movlw	low _time_i
  2425  0020FC  24F3               	addwf	prodl,w,c
  2426  0020FE  6ED9               	movwf	fsr2l,c
  2427  002100  0E00               	movlw	high _time_i
  2428  002102  20F4               	addwfc	prodh,w,c
  2429  002104  6EDA               	movwf	fsr2h,c
  2430  002106  0100               	movlb	0	; () banked
  2431  002108  51B4               	movf	update_state@i& (0+255),w,b
  2432  00210A  0D02               	mullw	2
  2433  00210C  0E00               	movlw	low _latestSortedBottleTime
  2434  00210E  24F3               	addwf	prodl,w,c
  2435  002110  6EE1               	movwf	fsr1l,c
  2436  002112  0E01               	movlw	high _latestSortedBottleTime
  2437  002114  20F4               	addwfc	prodh,w,c
  2438  002116  6EE2               	movwf	fsr1h,c
  2439  002118  CFDE FFE6          	movff	postinc2,postinc1
  2440  00211C  CFDD FFE5          	movff	postdec2,postdec1
  2441                           
  2442                           ; BSR set to: 0
  2443                           ;main.c: 237: discretize_counter=3000/40;
  2444  002120  0E00               	movlw	0
  2445  002122  0100               	movlb	0	; () banked
  2446  002124  6FCC               	movwf	(_discretize_counter+1)& (0+255),b
  2447  002126  0E4B               	movlw	75
  2448  002128  6FCB               	movwf	_discretize_counter& (0+255),b
  2449                           
  2450                           ; BSR set to: 0
  2451                           ;main.c: 238: measure_counter=0;
  2452  00212A  0E00               	movlw	0
  2453  00212C  0100               	movlb	0	; () banked
  2454  00212E  6FD2               	movwf	(_measure_counter+1)& (0+255),b
  2455  002130  0E00               	movlw	0
  2456  002132  6FD1               	movwf	_measure_counter& (0+255),b
  2457                           
  2458                           ; BSR set to: 0
  2459                           ;main.c: 239: release_counter=0;
  2460  002134  0E00               	movlw	0
  2461  002136  0100               	movlb	0	; () banked
  2462  002138  6FD4               	movwf	(_release_counter+1)& (0+255),b
  2463  00213A  0E00               	movlw	0
  2464  00213C  6FD3               	movwf	_release_counter& (0+255),b
  2465                           
  2466                           ; BSR set to: 0
  2467  00213E  0100               	movlb	0	; () banked
  2468  002140  2BB4               	incf	update_state@i& (0+255),f,b
  2469  002142  D7BD               	goto	l8012
  2470  002144                     l8028:
  2471                           
  2472                           ; BSR set to: 0
  2473                           ;main.c: 240: }
  2474                           ;main.c: 241: }
  2475                           ;main.c: 242: sorted_bottles=eskaNoCap+eskaWCap+yopNoCap+yopWCap;
  2476  002144  0100               	movlb	0	; () banked
  2477  002146  51CF               	movf	_eskaWCap& (0+255),w,b
  2478  002148  0100               	movlb	0	; () banked
  2479  00214A  25CD               	addwf	_eskaNoCap& (0+255),w,b
  2480  00214C  0100               	movlb	0	; () banked
  2481  00214E  6FB2               	movwf	??_update_state& (0+255),b
  2482  002150  0100               	movlb	0	; () banked
  2483  002152  51D0               	movf	(_eskaWCap+1)& (0+255),w,b
  2484  002154  0100               	movlb	0	; () banked
  2485  002156  21CE               	addwfc	(_eskaNoCap+1)& (0+255),w,b
  2486  002158  0100               	movlb	0	; () banked
  2487  00215A  6FB3               	movwf	(??_update_state+1)& (0+255),b
  2488  00215C  0100               	movlb	0	; () banked
  2489  00215E  51DB               	movf	_yopNoCap& (0+255),w,b
  2490  002160  0100               	movlb	0	; () banked
  2491  002162  27B2               	addwf	??_update_state& (0+255),f,b
  2492  002164  0100               	movlb	0	; () banked
  2493  002166  51DC               	movf	(_yopNoCap+1)& (0+255),w,b
  2494  002168  0100               	movlb	0	; () banked
  2495  00216A  23B3               	addwfc	(??_update_state+1)& (0+255),f,b
  2496  00216C  0100               	movlb	0	; () banked
  2497  00216E  51DD               	movf	_yopWCap& (0+255),w,b
  2498  002170  0100               	movlb	0	; () banked
  2499  002172  25B2               	addwf	??_update_state& (0+255),w,b
  2500  002174  0100               	movlb	0	; () banked
  2501  002176  6FD7               	movwf	_sorted_bottles& (0+255),b
  2502  002178  0100               	movlb	0	; () banked
  2503  00217A  51DE               	movf	(_yopWCap+1)& (0+255),w,b
  2504  00217C  0100               	movlb	0	; () banked
  2505  00217E  21B3               	addwfc	(??_update_state+1)& (0+255),w,b
  2506  002180  0100               	movlb	0	; () banked
  2507  002182  6FD8               	movwf	(_sorted_bottles+1)& (0+255),b
  2508                           
  2509                           ; BSR set to: 0
  2510                           ;main.c: 243: sorted_bottles%=100;
  2511  002184  C0D7  F080         	movff	_sorted_bottles,___awmod@dividend
  2512  002188  C0D8  F081         	movff	_sorted_bottles+1,___awmod@dividend+1
  2513  00218C  0E00               	movlw	0
  2514  00218E  0100               	movlb	0	; () banked
  2515  002190  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2516  002192  0E64               	movlw	100
  2517  002194  6F82               	movwf	___awmod@divisor& (0+255),b
  2518  002196  EC68  F018         	call	___awmod	;wreg free
  2519  00219A  C080  F0D7         	movff	?___awmod,_sorted_bottles
  2520  00219E  C081  F0D8         	movff	?___awmod+1,_sorted_bottles+1
  2521                           
  2522                           ;main.c: 244: if (state=='s'&&timeDiff>=180){
  2523  0021A2  0E73               	movlw	115
  2524  0021A4  0100               	movlb	0	; () banked
  2525  0021A6  19E8               	xorwf	_state& (0+255),w,b
  2526  0021A8  A4D8               	btfss	status,2,c
  2527  0021AA  D00E               	goto	l8038
  2528                           
  2529                           ; BSR set to: 0
  2530  0021AC  0100               	movlb	0	; () banked
  2531  0021AE  BFDA               	btfsc	(_timeDiff+1)& (0+255),7,b
  2532  0021B0  D00B               	goto	l8038
  2533  0021B2  0100               	movlb	0	; () banked
  2534  0021B4  51DA               	movf	(_timeDiff+1)& (0+255),w,b
  2535  0021B6  E105               	bnz	u12700
  2536  0021B8  0EB4               	movlw	180
  2537  0021BA  0100               	movlb	0	; () banked
  2538  0021BC  5DD9               	subwf	_timeDiff& (0+255),w,b
  2539  0021BE  A0D8               	btfss	status,0,c
  2540  0021C0  D003               	goto	l8038
  2541  0021C2                     u12700:
  2542                           
  2543                           ; BSR set to: 0
  2544                           ;main.c: 245: nstate='e';
  2545  0021C2  0E65               	movlw	101
  2546  0021C4  0100               	movlb	0	; () banked
  2547  0021C6  6FE7               	movwf	_nstate& (0+255),b
  2548  0021C8                     l8038:
  2549                           
  2550                           ; BSR set to: 0
  2551                           ;main.c: 246: }
  2552                           ;main.c: 247: if (nstate=='e'&&state!='e'){
  2553  0021C8  0E65               	movlw	101
  2554  0021CA  0100               	movlb	0	; () banked
  2555  0021CC  19E7               	xorwf	_nstate& (0+255),w,b
  2556  0021CE  A4D8               	btfss	status,2,c
  2557  0021D0  D073               	goto	l8046
  2558                           
  2559                           ; BSR set to: 0
  2560  0021D2  0E65               	movlw	101
  2561  0021D4  0100               	movlb	0	; () banked
  2562  0021D6  19E8               	xorwf	_state& (0+255),w,b
  2563  0021D8  B4D8               	btfsc	status,2,c
  2564  0021DA  D06E               	goto	l8046
  2565                           
  2566                           ; BSR set to: 0
  2567                           ;main.c: 248: runTime=timeDiff;
  2568  0021DC  C0D9  F0D5         	movff	_timeDiff,_runTime
  2569  0021E0  C0DA  F0D6         	movff	_timeDiff+1,_runTime+1
  2570                           
  2571                           ; BSR set to: 0
  2572                           ;main.c: 249: sprintf(menu[3][0],"bottles: %02d    \0", sorted_bottles);
  2573  0021E4  0E90               	movlw	low (_menu+540)
  2574  0021E6  0100               	movlb	0	; () banked
  2575  0021E8  6FA2               	movwf	sprintf@wh& (0+255),b
  2576  0021EA  0E03               	movlw	high (_menu+540)
  2577  0021EC  0100               	movlb	0	; () banked
  2578  0021EE  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2579  0021F0  0E7B               	movlw	low STR_7
  2580  0021F2  0100               	movlb	0	; () banked
  2581  0021F4  6FA4               	movwf	sprintf@f& (0+255),b
  2582  0021F6  0EFF               	movlw	high STR_7
  2583  0021F8  0100               	movlb	0	; () banked
  2584  0021FA  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2585  0021FC  C0D7  F0A6         	movff	_sorted_bottles,?_sprintf+4
  2586  002200  C0D8  F0A7         	movff	_sorted_bottles+1,?_sprintf+5
  2587  002204  EC92  F01A         	call	_sprintf	;wreg free
  2588                           
  2589                           ;main.c: 250: sprintf(menu[3][1],"run time: %01d:%02d \0",(runTime/60),timeDiff%60);
  2590  002208  0EA2               	movlw	low (_menu+558)
  2591  00220A  0100               	movlb	0	; () banked
  2592  00220C  6FA2               	movwf	sprintf@wh& (0+255),b
  2593  00220E  0E03               	movlw	high (_menu+558)
  2594  002210  0100               	movlb	0	; () banked
  2595  002212  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2596  002214  0E3D               	movlw	low STR_8
  2597  002216  0100               	movlb	0	; () banked
  2598  002218  6FA4               	movwf	sprintf@f& (0+255),b
  2599  00221A  0EFF               	movlw	high STR_8
  2600  00221C  0100               	movlb	0	; () banked
  2601  00221E  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2602  002220  C0D5  F080         	movff	_runTime,___awdiv@dividend
  2603  002224  C0D6  F081         	movff	_runTime+1,___awdiv@dividend+1
  2604  002228  0E00               	movlw	0
  2605  00222A  0100               	movlb	0	; () banked
  2606  00222C  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2607  00222E  0E3C               	movlw	60
  2608  002230  6F82               	movwf	___awdiv@divisor& (0+255),b
  2609  002232  EC54  F017         	call	___awdiv	;wreg free
  2610  002236  C080  F0A6         	movff	?___awdiv,?_sprintf+4
  2611  00223A  C081  F0A7         	movff	?___awdiv+1,?_sprintf+5
  2612  00223E  C0D9  F080         	movff	_timeDiff,___awmod@dividend
  2613  002242  C0DA  F081         	movff	_timeDiff+1,___awmod@dividend+1
  2614  002246  0E00               	movlw	0
  2615  002248  0100               	movlb	0	; () banked
  2616  00224A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2617  00224C  0E3C               	movlw	60
  2618  00224E  6F82               	movwf	___awmod@divisor& (0+255),b
  2619  002250  EC68  F018         	call	___awmod	;wreg free
  2620  002254  C080  F0A8         	movff	?___awmod,?_sprintf+6
  2621  002258  C081  F0A9         	movff	?___awmod+1,?_sprintf+7
  2622  00225C  EC92  F01A         	call	_sprintf	;wreg free
  2623                           
  2624                           ;main.c: 251: sprintf(menu[3][2],"en:%02d ec:%02d    ", eskaNoCap,eskaWCap);
  2625  002260  0EB4               	movlw	low (_menu+576)
  2626  002262  0100               	movlb	0	; () banked
  2627  002264  6FA2               	movwf	sprintf@wh& (0+255),b
  2628  002266  0E03               	movlw	high (_menu+576)
  2629  002268  0100               	movlb	0	; () banked
  2630  00226A  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2631  00226C  0E53               	movlw	low STR_9
  2632  00226E  0100               	movlb	0	; () banked
  2633  002270  6FA4               	movwf	sprintf@f& (0+255),b
  2634  002272  0EFF               	movlw	high STR_9
  2635  002274  0100               	movlb	0	; () banked
  2636  002276  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2637  002278  C0CD  F0A6         	movff	_eskaNoCap,?_sprintf+4
  2638  00227C  C0CE  F0A7         	movff	_eskaNoCap+1,?_sprintf+5
  2639  002280  C0CF  F0A8         	movff	_eskaWCap,?_sprintf+6
  2640  002284  C0D0  F0A9         	movff	_eskaWCap+1,?_sprintf+7
  2641  002288  EC92  F01A         	call	_sprintf	;wreg free
  2642                           
  2643                           ;main.c: 252: sprintf(menu[3][3],"yn:%02d yc:%02d    ", yopNoCap, yopWCap);
  2644  00228C  0EC6               	movlw	low (_menu+594)
  2645  00228E  0100               	movlb	0	; () banked
  2646  002290  6FA2               	movwf	sprintf@wh& (0+255),b
  2647  002292  0E03               	movlw	high (_menu+594)
  2648  002294  0100               	movlb	0	; () banked
  2649  002296  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2650  002298  0E67               	movlw	low STR_10
  2651  00229A  0100               	movlb	0	; () banked
  2652  00229C  6FA4               	movwf	sprintf@f& (0+255),b
  2653  00229E  0EFF               	movlw	high STR_10
  2654  0022A0  0100               	movlb	0	; () banked
  2655  0022A2  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2656  0022A4  C0DB  F0A6         	movff	_yopNoCap,?_sprintf+4
  2657  0022A8  C0DC  F0A7         	movff	_yopNoCap+1,?_sprintf+5
  2658  0022AC  C0DD  F0A8         	movff	_yopWCap,?_sprintf+6
  2659  0022B0  C0DE  F0A9         	movff	_yopWCap+1,?_sprintf+7
  2660  0022B4  EC92  F01A         	call	_sprintf	;wreg free
  2661  0022B8                     l8046:
  2662                           
  2663                           ;main.c: 253: }
  2664                           ;main.c: 254: if ((state=='m'||state=='l'||state=='c')&&timeDiff>=10){
  2665  0022B8  0E6D               	movlw	109
  2666  0022BA  0100               	movlb	0	; () banked
  2667  0022BC  19E8               	xorwf	_state& (0+255),w,b
  2668  0022BE  B4D8               	btfsc	status,2,c
  2669  0022C0  D00A               	goto	l8052
  2670                           
  2671                           ; BSR set to: 0
  2672  0022C2  0E6C               	movlw	108
  2673  0022C4  0100               	movlb	0	; () banked
  2674  0022C6  19E8               	xorwf	_state& (0+255),w,b
  2675  0022C8  B4D8               	btfsc	status,2,c
  2676  0022CA  D005               	goto	l8052
  2677                           
  2678                           ; BSR set to: 0
  2679  0022CC  0E63               	movlw	99
  2680  0022CE  0100               	movlb	0	; () banked
  2681  0022D0  19E8               	xorwf	_state& (0+255),w,b
  2682  0022D2  A4D8               	btfss	status,2,c
  2683  0022D4  D00E               	goto	l8056
  2684  0022D6                     l8052:
  2685                           
  2686                           ; BSR set to: 0
  2687  0022D6  0100               	movlb	0	; () banked
  2688  0022D8  BFDA               	btfsc	(_timeDiff+1)& (0+255),7,b
  2689  0022DA  D00B               	goto	l8056
  2690  0022DC  0100               	movlb	0	; () banked
  2691  0022DE  51DA               	movf	(_timeDiff+1)& (0+255),w,b
  2692  0022E0  E105               	bnz	u12760
  2693  0022E2  0E0A               	movlw	10
  2694  0022E4  0100               	movlb	0	; () banked
  2695  0022E6  5DD9               	subwf	_timeDiff& (0+255),w,b
  2696  0022E8  A0D8               	btfss	status,0,c
  2697  0022EA  D003               	goto	l8056
  2698  0022EC                     u12760:
  2699                           
  2700                           ; BSR set to: 0
  2701                           ;main.c: 255: nstate='r';
  2702  0022EC  0E72               	movlw	114
  2703  0022EE  0100               	movlb	0	; () banked
  2704  0022F0  6FE7               	movwf	_nstate& (0+255),b
  2705  0022F2                     l8056:
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;main.c: 256: }
  2709                           ;main.c: 257: state=nstate;
  2710  0022F2  C0E7  F0E8         	movff	_nstate,_state
  2711                           
  2712                           ; BSR set to: 0
  2713                           ;main.c: 265: if (state!='m'&&state!='l'&&state!='c')
  2714  0022F6  0E6D               	movlw	109
  2715  0022F8  0100               	movlb	0	; () banked
  2716  0022FA  19E8               	xorwf	_state& (0+255),w,b
  2717  0022FC  B4D8               	btfsc	status,2,c
  2718  0022FE  D019               	goto	l8066
  2719                           
  2720                           ; BSR set to: 0
  2721  002300  0E6C               	movlw	108
  2722  002302  0100               	movlb	0	; () banked
  2723  002304  19E8               	xorwf	_state& (0+255),w,b
  2724  002306  B4D8               	btfsc	status,2,c
  2725  002308  D014               	goto	l8066
  2726                           
  2727                           ; BSR set to: 0
  2728  00230A  0E63               	movlw	99
  2729  00230C  0100               	movlb	0	; () banked
  2730  00230E  19E8               	xorwf	_state& (0+255),w,b
  2731  002310  B4D8               	btfsc	status,2,c
  2732  002312  D00F               	goto	l8066
  2733                           
  2734                           ; BSR set to: 0
  2735                           ;main.c: 266: {
  2736                           ;main.c: 267: menuIndex=1;
  2737  002314  0E00               	movlw	0
  2738  002316  0100               	movlb	0	; () banked
  2739  002318  6FF6               	movwf	(_menuIndex+1)& (0+255),b
  2740  00231A  0E01               	movlw	1
  2741  00231C  6FF5               	movwf	_menuIndex& (0+255),b
  2742                           
  2743                           ;main.c: 268: logIndex=1;
  2744  00231E  0E00               	movlw	0
  2745  002320  0100               	movlb	0	; () banked
  2746  002322  6FF4               	movwf	(_logIndex+1)& (0+255),b
  2747  002324  0E01               	movlw	1
  2748  002326  6FF3               	movwf	_logIndex& (0+255),b
  2749                           
  2750                           ;main.c: 269: creditIndex=1;
  2751  002328  0E00               	movlw	0
  2752  00232A  0100               	movlb	0	; () banked
  2753  00232C  6FEA               	movwf	(_creditIndex+1)& (0+255),b
  2754  00232E  0E01               	movlw	1
  2755  002330  6FE9               	movwf	_creditIndex& (0+255),b
  2756  002332                     l8066:
  2757                           
  2758                           ; BSR set to: 0
  2759                           ;main.c: 270: }
  2760                           ;main.c: 271: if (state!='e')
  2761  002332  0E65               	movlw	101
  2762  002334  0100               	movlb	0	; () banked
  2763  002336  19E8               	xorwf	_state& (0+255),w,b
  2764  002338  B4D8               	btfsc	status,2,c
  2765  00233A  D005               	goto	l8070
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;main.c: 272: endIndex=1;
  2769  00233C  0E00               	movlw	0
  2770  00233E  0100               	movlb	0	; () banked
  2771  002340  6FEE               	movwf	(_endIndex+1)& (0+255),b
  2772  002342  0E01               	movlw	1
  2773  002344  6FED               	movwf	_endIndex& (0+255),b
  2774  002346                     l8070:
  2775                           
  2776                           ; BSR set to: 0
  2777                           ;main.c: 273: if (state=='r'){
  2778  002346  0E72               	movlw	114
  2779  002348  0100               	movlb	0	; () banked
  2780  00234A  19E8               	xorwf	_state& (0+255),w,b
  2781  00234C  A4D8               	btfss	status,2,c
  2782  00234E  0012               	return	
  2783                           
  2784                           ; BSR set to: 0
  2785                           ;main.c: 274: eskaNoCap=0;
  2786  002350  0E00               	movlw	0
  2787  002352  0100               	movlb	0	; () banked
  2788  002354  6FCE               	movwf	(_eskaNoCap+1)& (0+255),b
  2789  002356  0E00               	movlw	0
  2790  002358  6FCD               	movwf	_eskaNoCap& (0+255),b
  2791                           
  2792                           ;main.c: 275: eskaWCap=0;
  2793  00235A  0E00               	movlw	0
  2794  00235C  0100               	movlb	0	; () banked
  2795  00235E  6FD0               	movwf	(_eskaWCap+1)& (0+255),b
  2796  002360  0E00               	movlw	0
  2797  002362  6FCF               	movwf	_eskaWCap& (0+255),b
  2798                           
  2799                           ;main.c: 276: yopNoCap=0;
  2800  002364  0E00               	movlw	0
  2801  002366  0100               	movlb	0	; () banked
  2802  002368  6FDC               	movwf	(_yopNoCap+1)& (0+255),b
  2803  00236A  0E00               	movlw	0
  2804  00236C  6FDB               	movwf	_yopNoCap& (0+255),b
  2805                           
  2806                           ;main.c: 277: yopWCap=0;
  2807  00236E  0E00               	movlw	0
  2808  002370  0100               	movlb	0	; () banked
  2809  002372  6FDE               	movwf	(_yopWCap+1)& (0+255),b
  2810  002374  0E00               	movlw	0
  2811  002376  6FDD               	movwf	_yopWCap& (0+255),b
  2812  002378  0012               	return	
  2813  00237A                     __end_of_update_state:
  2814                           	opt stack 0
  2815                           tblptru	equ	0xFF8
  2816                           tblptrh	equ	0xFF7
  2817                           tblptrl	equ	0xFF6
  2818                           tablat	equ	0xFF5
  2819                           prodh	equ	0xFF4
  2820                           prodl	equ	0xFF3
  2821                           intcon	equ	0xFF2
  2822                           intcon2	equ	0xFF1
  2823                           intcon3	equ	0xFF0
  2824                           postinc0	equ	0xFEE
  2825                           wreg	equ	0xFE8
  2826                           postinc1	equ	0xFE6
  2827                           postdec1	equ	0xFE5
  2828                           fsr1h	equ	0xFE2
  2829                           fsr1l	equ	0xFE1
  2830                           postinc2	equ	0xFDE
  2831                           postdec2	equ	0xFDD
  2832                           fsr2h	equ	0xFDA
  2833                           fsr2l	equ	0xFD9
  2834                           status	equ	0xFD8
  2835                           
  2836 ;; *************** function ___awdiv *****************
  2837 ;; Defined at:
  2838 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  2839 ;; Parameters:    Size  Location     Type
  2840 ;;  dividend        2    0[BANK0 ] int 
  2841 ;;  divisor         2    2[BANK0 ] int 
  2842 ;; Auto vars:     Size  Location     Type
  2843 ;;  quotient        2    6[BANK0 ] int 
  2844 ;;  sign            1    5[BANK0 ] unsigned char 
  2845 ;;  counter         1    4[BANK0 ] unsigned char 
  2846 ;; Return value:  Size  Location     Type
  2847 ;;                  2    0[BANK0 ] int 
  2848 ;; Registers used:
  2849 ;;		wreg, status,2, status,0
  2850 ;; Tracked objects:
  2851 ;;		On entry : 0/0
  2852 ;;		On exit  : 0/0
  2853 ;;		Unchanged: 0/0
  2854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2855 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2856 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2858 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2859 ;;Total ram usage:        8 bytes
  2860 ;; Hardware stack levels used:    1
  2861 ;; Hardware stack levels required when called:    5
  2862 ;; This function calls:
  2863 ;;		Nothing
  2864 ;; This function is called by:
  2865 ;;		_update_state
  2866 ;; This function uses a non-reentrant model
  2867 ;;
  2868                           
  2869                           	psect	text2
  2870  002EA8                     __ptext2:
  2871                           	opt stack 0
  2872  002EA8                     ___awdiv:
  2873                           	opt stack 24
  2874                           
  2875                           ; BSR set to: 0
  2876                           ;incstack = 0
  2877  002EA8  0E00               	movlw	0
  2878  002EAA  0100               	movlb	0	; () banked
  2879  002EAC  6F85               	movwf	___awdiv@sign& (0+255),b
  2880                           
  2881                           ; BSR set to: 0
  2882  002EAE  0100               	movlb	0	; () banked
  2883  002EB0  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2884  002EB2  D008               	goto	l4988
  2885                           
  2886                           ; BSR set to: 0
  2887  002EB4  0100               	movlb	0	; () banked
  2888  002EB6  6D82               	negf	___awdiv@divisor& (0+255),b
  2889  002EB8  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  2890  002EBA  B0D8               	btfsc	status,0,c
  2891  002EBC  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  2892                           
  2893                           ; BSR set to: 0
  2894  002EBE  0E01               	movlw	1
  2895  002EC0  0100               	movlb	0	; () banked
  2896  002EC2  6F85               	movwf	___awdiv@sign& (0+255),b
  2897  002EC4                     l4988:
  2898                           
  2899                           ; BSR set to: 0
  2900  002EC4  0100               	movlb	0	; () banked
  2901  002EC6  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  2902  002EC8  D008               	goto	l4994
  2903                           
  2904                           ; BSR set to: 0
  2905  002ECA  0100               	movlb	0	; () banked
  2906  002ECC  6D80               	negf	___awdiv@dividend& (0+255),b
  2907  002ECE  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  2908  002ED0  B0D8               	btfsc	status,0,c
  2909  002ED2  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  2910                           
  2911                           ; BSR set to: 0
  2912  002ED4  0E01               	movlw	1
  2913  002ED6  0100               	movlb	0	; () banked
  2914  002ED8  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  2915  002EDA                     l4994:
  2916                           
  2917                           ; BSR set to: 0
  2918  002EDA  0E00               	movlw	0
  2919  002EDC  0100               	movlb	0	; () banked
  2920  002EDE  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  2921  002EE0  0E00               	movlw	0
  2922  002EE2  6F86               	movwf	___awdiv@quotient& (0+255),b
  2923                           
  2924                           ; BSR set to: 0
  2925  002EE4  0100               	movlb	0	; () banked
  2926  002EE6  5182               	movf	___awdiv@divisor& (0+255),w,b
  2927  002EE8  0100               	movlb	0	; () banked
  2928  002EEA  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  2929  002EEC  B4D8               	btfsc	status,2,c
  2930  002EEE  D02C               	goto	l5016
  2931                           
  2932                           ; BSR set to: 0
  2933  002EF0  0E01               	movlw	1
  2934  002EF2  0100               	movlb	0	; () banked
  2935  002EF4  6F84               	movwf	___awdiv@counter& (0+255),b
  2936  002EF6  D006               	goto	l5002
  2937  002EF8                     l5000:
  2938                           
  2939                           ; BSR set to: 0
  2940  002EF8  0100               	movlb	0	; () banked
  2941  002EFA  90D8               	bcf	status,0,c
  2942  002EFC  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  2943  002EFE  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  2944  002F00  0100               	movlb	0	; () banked
  2945  002F02  2B84               	incf	___awdiv@counter& (0+255),f,b
  2946  002F04                     l5002:
  2947                           
  2948                           ; BSR set to: 0
  2949  002F04  0100               	movlb	0	; () banked
  2950  002F06  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  2951  002F08  D7F7               	goto	l5000
  2952  002F0A                     l5004:
  2953                           
  2954                           ; BSR set to: 0
  2955  002F0A  0100               	movlb	0	; () banked
  2956  002F0C  90D8               	bcf	status,0,c
  2957  002F0E  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  2958  002F10  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  2959                           
  2960                           ; BSR set to: 0
  2961  002F12  0100               	movlb	0	; () banked
  2962  002F14  5182               	movf	___awdiv@divisor& (0+255),w,b
  2963  002F16  0100               	movlb	0	; () banked
  2964  002F18  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  2965  002F1A  0100               	movlb	0	; () banked
  2966  002F1C  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2967  002F1E  0100               	movlb	0	; () banked
  2968  002F20  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  2969  002F22  A0D8               	btfss	status,0,c
  2970  002F24  D00A               	goto	l5012
  2971                           
  2972                           ; BSR set to: 0
  2973  002F26  0100               	movlb	0	; () banked
  2974  002F28  5182               	movf	___awdiv@divisor& (0+255),w,b
  2975  002F2A  0100               	movlb	0	; () banked
  2976  002F2C  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  2977  002F2E  0100               	movlb	0	; () banked
  2978  002F30  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  2979  002F32  0100               	movlb	0	; () banked
  2980  002F34  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  2981                           
  2982                           ; BSR set to: 0
  2983  002F36  0100               	movlb	0	; () banked
  2984  002F38  8186               	bsf	___awdiv@quotient& (0+255),0,b
  2985  002F3A                     l5012:
  2986                           
  2987                           ; BSR set to: 0
  2988  002F3A  0100               	movlb	0	; () banked
  2989  002F3C  90D8               	bcf	status,0,c
  2990  002F3E  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  2991  002F40  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  2992                           
  2993                           ; BSR set to: 0
  2994  002F42  0100               	movlb	0	; () banked
  2995  002F44  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  2996  002F46  D7E1               	goto	l5004
  2997  002F48                     l5016:
  2998                           
  2999                           ; BSR set to: 0
  3000  002F48  0100               	movlb	0	; () banked
  3001  002F4A  5185               	movf	___awdiv@sign& (0+255),w,b
  3002  002F4C  0100               	movlb	0	; () banked
  3003  002F4E  B4D8               	btfsc	status,2,c
  3004  002F50  D005               	goto	l5020
  3005                           
  3006                           ; BSR set to: 0
  3007  002F52  0100               	movlb	0	; () banked
  3008  002F54  6D86               	negf	___awdiv@quotient& (0+255),b
  3009  002F56  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  3010  002F58  B0D8               	btfsc	status,0,c
  3011  002F5A  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  3012  002F5C                     l5020:
  3013                           
  3014                           ; BSR set to: 0
  3015  002F5C  C086  F080         	movff	___awdiv@quotient,?___awdiv
  3016  002F60  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  3017  002F64  0012               	return	
  3018  002F66                     __end_of___awdiv:
  3019                           	opt stack 0
  3020                           tblptru	equ	0xFF8
  3021                           tblptrh	equ	0xFF7
  3022                           tblptrl	equ	0xFF6
  3023                           tablat	equ	0xFF5
  3024                           prodh	equ	0xFF4
  3025                           prodl	equ	0xFF3
  3026                           intcon	equ	0xFF2
  3027                           intcon2	equ	0xFF1
  3028                           intcon3	equ	0xFF0
  3029                           postinc0	equ	0xFEE
  3030                           wreg	equ	0xFE8
  3031                           postinc1	equ	0xFE6
  3032                           postdec1	equ	0xFE5
  3033                           fsr1h	equ	0xFE2
  3034                           fsr1l	equ	0xFE1
  3035                           postinc2	equ	0xFDE
  3036                           postdec2	equ	0xFDD
  3037                           fsr2h	equ	0xFDA
  3038                           fsr2l	equ	0xFD9
  3039                           status	equ	0xFD8
  3040                           
  3041 ;; *************** function _update_lcd *****************
  3042 ;; Defined at:
  3043 ;;		line 154 in file "main.c"
  3044 ;; Parameters:    Size  Location     Type
  3045 ;;		None
  3046 ;; Auto vars:     Size  Location     Type
  3047 ;;  flag            2   43[BANK0 ] int 
  3048 ;;  j               2    0        int 
  3049 ;;  i               2    0        int 
  3050 ;; Return value:  Size  Location     Type
  3051 ;;                  1    wreg      void 
  3052 ;; Registers used:
  3053 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3054 ;; Tracked objects:
  3055 ;;		On entry : 0/0
  3056 ;;		On exit  : 0/0
  3057 ;;		Unchanged: 0/0
  3058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3060 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3061 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3062 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3063 ;;Total ram usage:        3 bytes
  3064 ;; Hardware stack levels used:    1
  3065 ;; Hardware stack levels required when called:    9
  3066 ;; This function calls:
  3067 ;;		_lcdInst
  3068 ;;		_printf
  3069 ;;		_strcmp
  3070 ;;		_strcpy
  3071 ;; This function is called by:
  3072 ;;		_main
  3073 ;; This function uses a non-reentrant model
  3074 ;;
  3075                           
  3076                           	psect	text3
  3077  002DAA                     __ptext3:
  3078                           	opt stack 0
  3079  002DAA                     _update_lcd:
  3080                           	opt stack 21
  3081                           
  3082                           ;main.c: 155: int flag=0;
  3083                           
  3084                           ; BSR set to: 0
  3085                           ;incstack = 0
  3086  002DAA  0E00               	movlw	0
  3087  002DAC  0100               	movlb	0	; () banked
  3088  002DAE  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  3089  002DB0  0E00               	movlw	0
  3090  002DB2  6FAB               	movwf	update_lcd@flag& (0+255),b
  3091                           
  3092                           ; BSR set to: 0
  3093                           ;main.c: 156: int i,j;
  3094                           ;main.c: 158: if (strcmp(display0, ndisplay0)!=0){
  3095  002DB4  0E1C               	movlw	low _display0
  3096  002DB6  0100               	movlb	0	; () banked
  3097  002DB8  6F80               	movwf	strcmp@s1& (0+255),b
  3098  002DBA  0E01               	movlw	high _display0
  3099  002DBC  0100               	movlb	0	; () banked
  3100  002DBE  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  3101  002DC0  0E40               	movlw	low _ndisplay0
  3102  002DC2  0100               	movlb	0	; () banked
  3103  002DC4  6F82               	movwf	strcmp@s2& (0+255),b
  3104  002DC6  0E01               	movlw	high _ndisplay0
  3105  002DC8  0100               	movlb	0	; () banked
  3106  002DCA  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  3107  002DCC  EC3C  F01A         	call	_strcmp	;wreg free
  3108  002DD0  0100               	movlb	0	; () banked
  3109  002DD2  5180               	movf	?_strcmp& (0+255),w,b
  3110  002DD4  0100               	movlb	0	; () banked
  3111  002DD6  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  3112  002DD8  B4D8               	btfsc	status,2,c
  3113  002DDA  D013               	goto	l8096
  3114                           
  3115                           ; BSR set to: 0
  3116                           ;main.c: 159: strcpy(display0,ndisplay0);
  3117  002DDC  0E1C               	movlw	low _display0
  3118  002DDE  0100               	movlb	0	; () banked
  3119  002DE0  6F80               	movwf	strcpy@to& (0+255),b
  3120  002DE2  0E01               	movlw	high _display0
  3121  002DE4  0100               	movlb	0	; () banked
  3122  002DE6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  3123  002DE8  0E40               	movlw	low _ndisplay0
  3124  002DEA  0100               	movlb	0	; () banked
  3125  002DEC  6F82               	movwf	strcpy@from& (0+255),b
  3126  002DEE  0E01               	movlw	high _ndisplay0
  3127  002DF0  0100               	movlb	0	; () banked
  3128  002DF2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  3129  002DF4  EC85  F01B         	call	_strcpy	;wreg free
  3130                           
  3131                           ;main.c: 160: flag=1;
  3132  002DF8  0E00               	movlw	0
  3133  002DFA  0100               	movlb	0	; () banked
  3134  002DFC  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  3135  002DFE  0E01               	movlw	1
  3136  002E00  6FAB               	movwf	update_lcd@flag& (0+255),b
  3137  002E02                     l8096:
  3138                           
  3139                           ; BSR set to: 0
  3140                           ;main.c: 161: }
  3141                           ;main.c: 162: if (strcmp(display1, ndisplay1)!=0){
  3142  002E02  0E2E               	movlw	low _display1
  3143  002E04  0100               	movlb	0	; () banked
  3144  002E06  6F80               	movwf	strcmp@s1& (0+255),b
  3145  002E08  0E01               	movlw	high _display1
  3146  002E0A  0100               	movlb	0	; () banked
  3147  002E0C  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  3148  002E0E  0E52               	movlw	low _ndisplay1
  3149  002E10  0100               	movlb	0	; () banked
  3150  002E12  6F82               	movwf	strcmp@s2& (0+255),b
  3151  002E14  0E01               	movlw	high _ndisplay1
  3152  002E16  0100               	movlb	0	; () banked
  3153  002E18  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  3154  002E1A  EC3C  F01A         	call	_strcmp	;wreg free
  3155  002E1E  0100               	movlb	0	; () banked
  3156  002E20  5180               	movf	?_strcmp& (0+255),w,b
  3157  002E22  0100               	movlb	0	; () banked
  3158  002E24  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  3159  002E26  B4D8               	btfsc	status,2,c
  3160  002E28  D013               	goto	l8102
  3161                           
  3162                           ; BSR set to: 0
  3163                           ;main.c: 163: strcpy(display1,ndisplay1);
  3164  002E2A  0E2E               	movlw	low _display1
  3165  002E2C  0100               	movlb	0	; () banked
  3166  002E2E  6F80               	movwf	strcpy@to& (0+255),b
  3167  002E30  0E01               	movlw	high _display1
  3168  002E32  0100               	movlb	0	; () banked
  3169  002E34  6F81               	movwf	(strcpy@to+1)& (0+255),b
  3170  002E36  0E52               	movlw	low _ndisplay1
  3171  002E38  0100               	movlb	0	; () banked
  3172  002E3A  6F82               	movwf	strcpy@from& (0+255),b
  3173  002E3C  0E01               	movlw	high _ndisplay1
  3174  002E3E  0100               	movlb	0	; () banked
  3175  002E40  6F83               	movwf	(strcpy@from+1)& (0+255),b
  3176  002E42  EC85  F01B         	call	_strcpy	;wreg free
  3177                           
  3178                           ;main.c: 164: flag=1;
  3179  002E46  0E00               	movlw	0
  3180  002E48  0100               	movlb	0	; () banked
  3181  002E4A  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  3182  002E4C  0E01               	movlw	1
  3183  002E4E  6FAB               	movwf	update_lcd@flag& (0+255),b
  3184  002E50                     l8102:
  3185                           
  3186                           ; BSR set to: 0
  3187                           ;main.c: 165: }
  3188                           ;main.c: 166: if (flag){
  3189  002E50  0100               	movlb	0	; () banked
  3190  002E52  51AB               	movf	update_lcd@flag& (0+255),w,b
  3191  002E54  0100               	movlb	0	; () banked
  3192  002E56  11AC               	iorwf	(update_lcd@flag+1)& (0+255),w,b
  3193  002E58  B4D8               	btfsc	status,2,c
  3194  002E5A  0012               	return	
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;main.c: 167: lcdInst(0x01);_delay((unsigned long)((10)*(10000000/4000.0)));;
  3198  002E5C  0E01               	movlw	1
  3199  002E5E  EC24  F01C         	call	_lcdInst
  3200  002E62  0E21               	movlw	33
  3201  002E64  0100               	movlb	0	; () banked
  3202  002E66  6FAA               	movwf	??_update_lcd& (0+255),b
  3203  002E68  0E76               	movlw	118
  3204  002E6A                     u13217:
  3205  002E6A  2EE8               	decfsz	wreg,f,c
  3206  002E6C  D7FE               	bra	u13217
  3207  002E6E  2FAA               	decfsz	??_update_lcd& (0+255),f,b
  3208  002E70  D7FC               	bra	u13217
  3209  002E72  F000               	nop	
  3210                           
  3211                           ;main.c: 168: lcdInst(0b10000000);;
  3212  002E74  0E80               	movlw	128
  3213  002E76  EC24  F01C         	call	_lcdInst
  3214                           
  3215                           ;main.c: 169: printf(display0);
  3216  002E7A  0E1C               	movlw	low _display0
  3217  002E7C  0100               	movlb	0	; () banked
  3218  002E7E  6FA2               	movwf	printf@f& (0+255),b
  3219  002E80  0E01               	movlw	high _display0
  3220  002E82  0100               	movlb	0	; () banked
  3221  002E84  6FA3               	movwf	(printf@f+1)& (0+255),b
  3222  002E86  ECE4  F01A         	call	_printf	;wreg free
  3223                           
  3224                           ;main.c: 170: lcdInst(0b11000000);;
  3225  002E8A  0EC0               	movlw	192
  3226  002E8C  EC24  F01C         	call	_lcdInst
  3227                           
  3228                           ;main.c: 171: printf(display1);
  3229  002E90  0E2E               	movlw	low _display1
  3230  002E92  0100               	movlb	0	; () banked
  3231  002E94  6FA2               	movwf	printf@f& (0+255),b
  3232  002E96  0E01               	movlw	high _display1
  3233  002E98  0100               	movlb	0	; () banked
  3234  002E9A  6FA3               	movwf	(printf@f+1)& (0+255),b
  3235  002E9C  ECE4  F01A         	call	_printf	;wreg free
  3236                           
  3237                           ;main.c: 172: lcdInst(0b10010000);;
  3238  002EA0  0E90               	movlw	144
  3239  002EA2  EC24  F01C         	call	_lcdInst
  3240  002EA6  0012               	return	
  3241  002EA8                     __end_of_update_lcd:
  3242                           	opt stack 0
  3243                           tblptru	equ	0xFF8
  3244                           tblptrh	equ	0xFF7
  3245                           tblptrl	equ	0xFF6
  3246                           tablat	equ	0xFF5
  3247                           prodh	equ	0xFF4
  3248                           prodl	equ	0xFF3
  3249                           intcon	equ	0xFF2
  3250                           intcon2	equ	0xFF1
  3251                           intcon3	equ	0xFF0
  3252                           postinc0	equ	0xFEE
  3253                           wreg	equ	0xFE8
  3254                           postinc1	equ	0xFE6
  3255                           postdec1	equ	0xFE5
  3256                           fsr1h	equ	0xFE2
  3257                           fsr1l	equ	0xFE1
  3258                           postinc2	equ	0xFDE
  3259                           postdec2	equ	0xFDD
  3260                           fsr2h	equ	0xFDA
  3261                           fsr2l	equ	0xFD9
  3262                           status	equ	0xFD8
  3263                           
  3264 ;; *************** function _strcpy *****************
  3265 ;; Defined at:
  3266 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  3267 ;; Parameters:    Size  Location     Type
  3268 ;;  to              2    0[BANK0 ] PTR unsigned char 
  3269 ;;		 -> display1(18), display0(18), 
  3270 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  3271 ;;		 -> ndisplay1(18), ndisplay0(18), 
  3272 ;; Auto vars:     Size  Location     Type
  3273 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  3274 ;;		 -> display1(18), display0(18), 
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  2    0[BANK0 ] PTR unsigned char 
  3277 ;; Registers used:
  3278 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3284 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3285 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3286 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3287 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3288 ;;Total ram usage:        6 bytes
  3289 ;; Hardware stack levels used:    1
  3290 ;; Hardware stack levels required when called:    5
  3291 ;; This function calls:
  3292 ;;		Nothing
  3293 ;; This function is called by:
  3294 ;;		_update_lcd
  3295 ;; This function uses a non-reentrant model
  3296 ;;
  3297                           
  3298                           	psect	text4
  3299  00370A                     __ptext4:
  3300                           	opt stack 0
  3301  00370A                     _strcpy:
  3302                           	opt stack 24
  3303                           
  3304                           ;incstack = 0
  3305  00370A  C080  F084         	movff	strcpy@to,strcpy@cp
  3306  00370E  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  3307  003712  D006               	goto	l4742
  3308  003714                     l4740:
  3309  003714  0100               	movlb	0	; () banked
  3310  003716  4B84               	infsnz	strcpy@cp& (0+255),f,b
  3311  003718  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  3312  00371A  0100               	movlb	0	; () banked
  3313  00371C  4B82               	infsnz	strcpy@from& (0+255),f,b
  3314  00371E  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  3315  003720                     l4742:
  3316  003720  C082  FFD9         	movff	strcpy@from,fsr2l
  3317  003724  C083  FFDA         	movff	strcpy@from+1,fsr2h
  3318  003728  C084  FFE1         	movff	strcpy@cp,fsr1l
  3319  00372C  C085  FFE2         	movff	strcpy@cp+1,fsr1h
  3320  003730  CFDF FFE7          	movff	indf2,indf1
  3321  003734  50E7               	movf	indf1,w,c
  3322  003736  B4D8               	btfsc	status,2,c
  3323  003738  0012               	return	
  3324  00373A  D7EC               	goto	l4740
  3325  00373C                     __end_of_strcpy:
  3326                           	opt stack 0
  3327                           tblptru	equ	0xFF8
  3328                           tblptrh	equ	0xFF7
  3329                           tblptrl	equ	0xFF6
  3330                           tablat	equ	0xFF5
  3331                           prodh	equ	0xFF4
  3332                           prodl	equ	0xFF3
  3333                           intcon	equ	0xFF2
  3334                           intcon2	equ	0xFF1
  3335                           intcon3	equ	0xFF0
  3336                           postinc0	equ	0xFEE
  3337                           wreg	equ	0xFE8
  3338                           indf1	equ	0xFE7
  3339                           postinc1	equ	0xFE6
  3340                           postdec1	equ	0xFE5
  3341                           fsr1h	equ	0xFE2
  3342                           fsr1l	equ	0xFE1
  3343                           indf2	equ	0xFDF
  3344                           postinc2	equ	0xFDE
  3345                           postdec2	equ	0xFDD
  3346                           fsr2h	equ	0xFDA
  3347                           fsr2l	equ	0xFD9
  3348                           status	equ	0xFD8
  3349                           
  3350 ;; *************** function _strcmp *****************
  3351 ;; Defined at:
  3352 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
  3353 ;; Parameters:    Size  Location     Type
  3354 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3355 ;;		 -> display1(18), display0(18), 
  3356 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  3357 ;;		 -> ndisplay1(18), ndisplay0(18), 
  3358 ;; Auto vars:     Size  Location     Type
  3359 ;;  r               1    5[BANK0 ] char 
  3360 ;; Return value:  Size  Location     Type
  3361 ;;                  2    0[BANK0 ] int 
  3362 ;; Registers used:
  3363 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3364 ;; Tracked objects:
  3365 ;;		On entry : 0/0
  3366 ;;		On exit  : 0/0
  3367 ;;		Unchanged: 0/0
  3368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3369 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;Total ram usage:        6 bytes
  3374 ;; Hardware stack levels used:    1
  3375 ;; Hardware stack levels required when called:    5
  3376 ;; This function calls:
  3377 ;;		Nothing
  3378 ;; This function is called by:
  3379 ;;		_update_lcd
  3380 ;; This function uses a non-reentrant model
  3381 ;;
  3382                           
  3383                           	psect	text5
  3384  003478                     __ptext5:
  3385                           	opt stack 0
  3386  003478                     _strcmp:
  3387                           	opt stack 24
  3388                           
  3389                           ;incstack = 0
  3390  003478  D006               	goto	l4730
  3391  00347A                     l4728:
  3392  00347A  0100               	movlb	0	; () banked
  3393  00347C  4B80               	infsnz	strcmp@s1& (0+255),f,b
  3394  00347E  2B81               	incf	(strcmp@s1+1)& (0+255),f,b
  3395  003480  0100               	movlb	0	; () banked
  3396  003482  4B82               	infsnz	strcmp@s2& (0+255),f,b
  3397  003484  2B83               	incf	(strcmp@s2+1)& (0+255),f,b
  3398  003486                     l4730:
  3399  003486  C080  FFD9         	movff	strcmp@s1,fsr2l
  3400  00348A  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3401  00348E  50DF               	movf	indf2,w,c
  3402  003490  0100               	movlb	0	; () banked
  3403  003492  6F84               	movwf	??_strcmp& (0+255),b
  3404  003494  C082  FFD9         	movff	strcmp@s2,fsr2l
  3405  003498  C083  FFDA         	movff	strcmp@s2+1,fsr2h
  3406  00349C  50DF               	movf	indf2,w,c
  3407  00349E  0800               	sublw	0
  3408  0034A0  0100               	movlb	0	; () banked
  3409  0034A2  2584               	addwf	??_strcmp& (0+255),w,b
  3410  0034A4  0100               	movlb	0	; () banked
  3411  0034A6  6F85               	movwf	strcmp@r& (0+255),b
  3412  0034A8  0100               	movlb	0	; () banked
  3413  0034AA  5185               	movf	strcmp@r& (0+255),w,b
  3414  0034AC  A4D8               	btfss	status,2,c
  3415  0034AE  D007               	goto	l4734
  3416                           
  3417                           ; BSR set to: 0
  3418  0034B0  C080  FFD9         	movff	strcmp@s1,fsr2l
  3419  0034B4  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3420  0034B8  50DF               	movf	indf2,w,c
  3421  0034BA  A4D8               	btfss	status,2,c
  3422  0034BC  D7DE               	goto	l4728
  3423  0034BE                     l4734:
  3424                           
  3425                           ; BSR set to: 0
  3426  0034BE  0100               	movlb	0	; () banked
  3427  0034C0  5185               	movf	strcmp@r& (0+255),w,b
  3428  0034C2  0100               	movlb	0	; () banked
  3429  0034C4  6F80               	movwf	?_strcmp& (0+255),b
  3430  0034C6  6B81               	clrf	(?_strcmp+1)& (0+255),b
  3431  0034C8  BF80               	btfsc	?_strcmp& (0+255),7,b
  3432  0034CA  0781               	decf	(?_strcmp+1)& (0+255),f,b
  3433  0034CC  0012               	return	
  3434  0034CE                     __end_of_strcmp:
  3435                           	opt stack 0
  3436                           tblptru	equ	0xFF8
  3437                           tblptrh	equ	0xFF7
  3438                           tblptrl	equ	0xFF6
  3439                           tablat	equ	0xFF5
  3440                           prodh	equ	0xFF4
  3441                           prodl	equ	0xFF3
  3442                           intcon	equ	0xFF2
  3443                           intcon2	equ	0xFF1
  3444                           intcon3	equ	0xFF0
  3445                           postinc0	equ	0xFEE
  3446                           wreg	equ	0xFE8
  3447                           indf1	equ	0xFE7
  3448                           postinc1	equ	0xFE6
  3449                           postdec1	equ	0xFE5
  3450                           fsr1h	equ	0xFE2
  3451                           fsr1l	equ	0xFE1
  3452                           indf2	equ	0xFDF
  3453                           postinc2	equ	0xFDE
  3454                           postdec2	equ	0xFDD
  3455                           fsr2h	equ	0xFDA
  3456                           fsr2l	equ	0xFD9
  3457                           status	equ	0xFD8
  3458                           
  3459 ;; *************** function _printf *****************
  3460 ;; Defined at:
  3461 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  3462 ;; Parameters:    Size  Location     Type
  3463 ;;  f               2   34[BANK0 ] PTR const unsigned char 
  3464 ;;		 -> STR_17(14), STR_16(15), STR_15(8), display1(18), 
  3465 ;;		 -> display0(18), 
  3466 ;; Auto vars:     Size  Location     Type
  3467 ;;  pb              4   38[BANK0 ] struct __prbuf
  3468 ;;  ap              2   36[BANK0 ] PTR void [1]
  3469 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  2   34[BANK0 ] int 
  3472 ;; Registers used:
  3473 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3479 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;Total ram usage:        8 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    8
  3486 ;; This function calls:
  3487 ;;		__doprnt
  3488 ;; This function is called by:
  3489 ;;		_update_lcd
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           	psect	text6
  3494  0035C8                     __ptext6:
  3495                           	opt stack 0
  3496  0035C8                     _printf:
  3497                           	opt stack 21
  3498                           
  3499                           ; BSR set to: 0
  3500                           ;incstack = 0
  3501  0035C8  0E00               	movlw	0
  3502  0035CA  0100               	movlb	0	; () banked
  3503  0035CC  6FA6               	movwf	printf@pb& (0+255),b
  3504  0035CE  0E00               	movlw	0
  3505  0035D0  0100               	movlb	0	; () banked
  3506  0035D2  6FA7               	movwf	(printf@pb+1)& (0+255),b
  3507  0035D4  0E1E               	movlw	low _putch
  3508  0035D6  0100               	movlb	0	; () banked
  3509  0035D8  6FA8               	movwf	(printf@pb+2)& (0+255),b
  3510  0035DA  0E38               	movlw	high _putch
  3511  0035DC  0100               	movlb	0	; () banked
  3512  0035DE  6FA9               	movwf	(printf@pb+3)& (0+255),b
  3513  0035E0  0EA4               	movlw	low (?_printf+2)
  3514  0035E2  0100               	movlb	0	; () banked
  3515  0035E4  6FA4               	movwf	printf@ap& (0+255),b
  3516  0035E6  0E00               	movlw	high (?_printf+2)
  3517  0035E8  0100               	movlb	0	; () banked
  3518  0035EA  6FA5               	movwf	(printf@ap+1)& (0+255),b
  3519                           
  3520                           ; BSR set to: 0
  3521                           ;	Return value of _printf is never used
  3522  0035EC  0EA6               	movlw	low printf@pb
  3523  0035EE  0100               	movlb	0	; () banked
  3524  0035F0  6F8C               	movwf	__doprnt@pb& (0+255),b
  3525  0035F2  0E00               	movlw	high printf@pb
  3526  0035F4  0100               	movlb	0	; () banked
  3527  0035F6  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  3528  0035F8  C0A2  F08E         	movff	printf@f,__doprnt@f
  3529  0035FC  C0A3  F08F         	movff	printf@f+1,__doprnt@f+1
  3530  003600  0EA4               	movlw	low printf@ap
  3531  003602  0100               	movlb	0	; () banked
  3532  003604  6F90               	movwf	__doprnt@ap& (0+255),b
  3533  003606  0E00               	movlw	high printf@ap
  3534  003608  0100               	movlb	0	; () banked
  3535  00360A  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  3536  00360C  EC09  F000         	call	__doprnt	;wreg free
  3537  003610  0012               	return	
  3538  003612                     __end_of_printf:
  3539                           	opt stack 0
  3540                           tblptru	equ	0xFF8
  3541                           tblptrh	equ	0xFF7
  3542                           tblptrl	equ	0xFF6
  3543                           tablat	equ	0xFF5
  3544                           prodh	equ	0xFF4
  3545                           prodl	equ	0xFF3
  3546                           intcon	equ	0xFF2
  3547                           intcon2	equ	0xFF1
  3548                           intcon3	equ	0xFF0
  3549                           postinc0	equ	0xFEE
  3550                           wreg	equ	0xFE8
  3551                           indf1	equ	0xFE7
  3552                           postinc1	equ	0xFE6
  3553                           postdec1	equ	0xFE5
  3554                           fsr1h	equ	0xFE2
  3555                           fsr1l	equ	0xFE1
  3556                           indf2	equ	0xFDF
  3557                           postinc2	equ	0xFDE
  3558                           postdec2	equ	0xFDD
  3559                           fsr2h	equ	0xFDA
  3560                           fsr2l	equ	0xFD9
  3561                           status	equ	0xFD8
  3562                           
  3563 ;; *************** function _update_display *****************
  3564 ;; Defined at:
  3565 ;;		line 194 in file "main.c"
  3566 ;; Parameters:    Size  Location     Type
  3567 ;;		None
  3568 ;; Auto vars:     Size  Location     Type
  3569 ;;		None
  3570 ;; Return value:  Size  Location     Type
  3571 ;;                  1    wreg      void 
  3572 ;; Registers used:
  3573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3574 ;; Tracked objects:
  3575 ;;		On entry : 0/0
  3576 ;;		On exit  : 0/0
  3577 ;;		Unchanged: 0/0
  3578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3583 ;;Total ram usage:        0 bytes
  3584 ;; Hardware stack levels used:    1
  3585 ;; Hardware stack levels required when called:   10
  3586 ;; This function calls:
  3587 ;;		__measure
  3588 ;;		_display_menu
  3589 ;;		_sprintf
  3590 ;; This function is called by:
  3591 ;;		_main
  3592 ;; This function uses a non-reentrant model
  3593 ;;
  3594                           
  3595                           	psect	text7
  3596  002C76                     __ptext7:
  3597                           	opt stack 0
  3598  002C76                     _update_display:
  3599                           	opt stack 20
  3600                           
  3601                           ;main.c: 195: switch(state)
  3602                           
  3603                           ;incstack = 0
  3604  002C76  D084               	goto	l8086
  3605  002C78                     l8076:
  3606                           
  3607                           ;main.c: 198: sprintf(ndisplay0,"%02x/%02x/%02x PUSH TO", time[6],time[5],time[4]);
  3608  002C78  0E40               	movlw	low _ndisplay0
  3609  002C7A  0100               	movlb	0	; () banked
  3610  002C7C  6FA2               	movwf	sprintf@wh& (0+255),b
  3611  002C7E  0E01               	movlw	high _ndisplay0
  3612  002C80  0100               	movlb	0	; () banked
  3613  002C82  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3614  002C84  0E0F               	movlw	low STR_1
  3615  002C86  0100               	movlb	0	; () banked
  3616  002C88  6FA4               	movwf	sprintf@f& (0+255),b
  3617  002C8A  0EFF               	movlw	high STR_1
  3618  002C8C  0100               	movlb	0	; () banked
  3619  002C8E  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3620  002C90  C0C8  F0A6         	movff	_time+6,?_sprintf+4
  3621  002C94  0100               	movlb	0	; () banked
  3622  002C96  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3623  002C98  C0C7  F0A8         	movff	_time+5,?_sprintf+6
  3624  002C9C  0100               	movlb	0	; () banked
  3625  002C9E  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3626  002CA0  C0C6  F0AA         	movff	_time+4,?_sprintf+8
  3627  002CA4  0100               	movlb	0	; () banked
  3628  002CA6  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3629  002CA8  EC92  F01A         	call	_sprintf	;wreg free
  3630                           
  3631                           ;main.c: 199: sprintf(ndisplay1,"%02x:%02x:%02x   START", time[2],time[1],time[0]);
  3632  002CAC  0E52               	movlw	low _ndisplay1
  3633  002CAE  0100               	movlb	0	; () banked
  3634  002CB0  6FA2               	movwf	sprintf@wh& (0+255),b
  3635  002CB2  0E01               	movlw	high _ndisplay1
  3636  002CB4  0100               	movlb	0	; () banked
  3637  002CB6  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3638  002CB8  0E26               	movlw	low STR_2
  3639  002CBA  0100               	movlb	0	; () banked
  3640  002CBC  6FA4               	movwf	sprintf@f& (0+255),b
  3641  002CBE  0EFF               	movlw	high STR_2
  3642  002CC0  0100               	movlb	0	; () banked
  3643  002CC2  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3644  002CC4  C0C4  F0A6         	movff	_time+2,?_sprintf+4
  3645  002CC8  0100               	movlb	0	; () banked
  3646  002CCA  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3647  002CCC  C0C3  F0A8         	movff	_time+1,?_sprintf+6
  3648  002CD0  0100               	movlb	0	; () banked
  3649  002CD2  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3650  002CD4  C0C2  F0AA         	movff	_time,?_sprintf+8
  3651  002CD8  0100               	movlb	0	; () banked
  3652  002CDA  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3653  002CDC  EC92  F01A         	call	_sprintf	;wreg free
  3654                           
  3655                           ;main.c: 200: break;
  3656  002CE0  0012               	return	
  3657  002CE2                     l8078:
  3658                           
  3659                           ;main.c: 202: case 'l':
  3660                           ;main.c: 203: case 'c':
  3661                           ;main.c: 204: case 'e':
  3662                           ;main.c: 205: display_menu();
  3663  002CE2  ECDD  F00B         	call	_display_menu	;wreg free
  3664                           
  3665                           ;main.c: 206: break;
  3666  002CE6  0012               	return	
  3667  002CE8                     l8080:
  3668                           
  3669                           ;main.c: 218: sprintf(ndisplay0, "RC:%d MC:%d", release_counter, measure_counter);
  3670  002CE8  0E40               	movlw	low _ndisplay0
  3671  002CEA  0100               	movlb	0	; () banked
  3672  002CEC  6FA2               	movwf	sprintf@wh& (0+255),b
  3673  002CEE  0E01               	movlw	high _ndisplay0
  3674  002CF0  0100               	movlb	0	; () banked
  3675  002CF2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3676  002CF4  0ED9               	movlw	low STR_3
  3677  002CF6  0100               	movlb	0	; () banked
  3678  002CF8  6FA4               	movwf	sprintf@f& (0+255),b
  3679  002CFA  0EFF               	movlw	high STR_3
  3680  002CFC  0100               	movlb	0	; () banked
  3681  002CFE  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3682  002D00  C0D3  F0A6         	movff	_release_counter,?_sprintf+4
  3683  002D04  C0D4  F0A7         	movff	_release_counter+1,?_sprintf+5
  3684  002D08  C0D1  F0A8         	movff	_measure_counter,?_sprintf+6
  3685  002D0C  C0D2  F0A9         	movff	_measure_counter+1,?_sprintf+7
  3686  002D10  EC92  F01A         	call	_sprintf	;wreg free
  3687                           
  3688                           ;main.c: 219: sprintf(ndisplay1, "DC:%d MEAS:%d", discretize_counter, _measure());
  3689  002D14  0E52               	movlw	low _ndisplay1
  3690  002D16  0100               	movlb	0	; () banked
  3691  002D18  6FA2               	movwf	sprintf@wh& (0+255),b
  3692  002D1A  0E01               	movlw	high _ndisplay1
  3693  002D1C  0100               	movlb	0	; () banked
  3694  002D1E  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3695  002D20  0EBD               	movlw	low STR_4
  3696  002D22  0100               	movlb	0	; () banked
  3697  002D24  6FA4               	movwf	sprintf@f& (0+255),b
  3698  002D26  0EFF               	movlw	high STR_4
  3699  002D28  0100               	movlb	0	; () banked
  3700  002D2A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3701  002D2C  C0CB  F0A6         	movff	_discretize_counter,?_sprintf+4
  3702  002D30  C0CC  F0A7         	movff	_discretize_counter+1,?_sprintf+5
  3703  002D34  EC2A  F00E         	call	__measure	;wreg free
  3704  002D38  C086  F0A8         	movff	?__measure,?_sprintf+6
  3705  002D3C  C087  F0A9         	movff	?__measure+1,?_sprintf+7
  3706  002D40  EC92  F01A         	call	_sprintf	;wreg free
  3707                           
  3708                           ;main.c: 224: break;
  3709  002D44  0012               	return	
  3710  002D46                     l8082:
  3711                           
  3712                           ;main.c: 226: sprintf(ndisplay0, "ERROR");
  3713  002D46  0E40               	movlw	low _ndisplay0
  3714  002D48  0100               	movlb	0	; () banked
  3715  002D4A  6FA2               	movwf	sprintf@wh& (0+255),b
  3716  002D4C  0E01               	movlw	high _ndisplay0
  3717  002D4E  0100               	movlb	0	; () banked
  3718  002D50  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3719  002D52  0EF4               	movlw	low STR_5
  3720  002D54  0100               	movlb	0	; () banked
  3721  002D56  6FA4               	movwf	sprintf@f& (0+255),b
  3722  002D58  0EFF               	movlw	high STR_5
  3723  002D5A  0100               	movlb	0	; () banked
  3724  002D5C  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3725  002D5E  EC92  F01A         	call	_sprintf	;wreg free
  3726                           
  3727                           ;main.c: 227: sprintf(ndisplay1, "EMERGENCY STOP");
  3728  002D62  0E52               	movlw	low _ndisplay1
  3729  002D64  0100               	movlb	0	; () banked
  3730  002D66  6FA2               	movwf	sprintf@wh& (0+255),b
  3731  002D68  0E01               	movlw	high _ndisplay1
  3732  002D6A  0100               	movlb	0	; () banked
  3733  002D6C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3734  002D6E  0E9F               	movlw	low STR_6
  3735  002D70  0100               	movlb	0	; () banked
  3736  002D72  6FA4               	movwf	sprintf@f& (0+255),b
  3737  002D74  0EFF               	movlw	high STR_6
  3738  002D76  0100               	movlb	0	; () banked
  3739  002D78  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3740  002D7A  EC92  F01A         	call	_sprintf	;wreg free
  3741                           
  3742                           ;main.c: 230: }
  3743                           
  3744                           ;main.c: 228: break;
  3745  002D7E  0012               	return	
  3746  002D80                     l8086:
  3747  002D80  0100               	movlb	0	; () banked
  3748  002D82  51E8               	movf	_state& (0+255),w,b
  3749                           
  3750                           ; Switch size 1, requested type "space"
  3751                           ; Number of cases is 6, Range of values is 99 to 115
  3752                           ; switch strategies available:
  3753                           ; Name         Instructions Cycles
  3754                           ; simple_byte           19    10 (average)
  3755                           ;	Chosen strategy is simple_byte
  3756  002D84  0A63               	xorlw	99	; case 99
  3757  002D86  B4D8               	btfsc	status,2,c
  3758  002D88  D7AC               	goto	l8078
  3759  002D8A  0A06               	xorlw	6	; case 101
  3760  002D8C  B4D8               	btfsc	status,2,c
  3761  002D8E  D7A9               	goto	l8078
  3762  002D90  0A09               	xorlw	9	; case 108
  3763  002D92  B4D8               	btfsc	status,2,c
  3764  002D94  D7A6               	goto	l8078
  3765  002D96  0A01               	xorlw	1	; case 109
  3766  002D98  B4D8               	btfsc	status,2,c
  3767  002D9A  D7A3               	goto	l8078
  3768  002D9C  0A1F               	xorlw	31	; case 114
  3769  002D9E  B4D8               	btfsc	status,2,c
  3770  002DA0  D76B               	goto	l8076
  3771  002DA2  0A01               	xorlw	1	; case 115
  3772  002DA4  B4D8               	btfsc	status,2,c
  3773  002DA6  D7A0               	goto	l8080
  3774  002DA8  D7CE               	goto	l8082
  3775  002DAA                     __end_of_update_display:
  3776                           	opt stack 0
  3777                           tblptru	equ	0xFF8
  3778                           tblptrh	equ	0xFF7
  3779                           tblptrl	equ	0xFF6
  3780                           tablat	equ	0xFF5
  3781                           prodh	equ	0xFF4
  3782                           prodl	equ	0xFF3
  3783                           intcon	equ	0xFF2
  3784                           intcon2	equ	0xFF1
  3785                           intcon3	equ	0xFF0
  3786                           postinc0	equ	0xFEE
  3787                           wreg	equ	0xFE8
  3788                           indf1	equ	0xFE7
  3789                           postinc1	equ	0xFE6
  3790                           postdec1	equ	0xFE5
  3791                           fsr1h	equ	0xFE2
  3792                           fsr1l	equ	0xFE1
  3793                           indf2	equ	0xFDF
  3794                           postinc2	equ	0xFDE
  3795                           postdec2	equ	0xFDD
  3796                           fsr2h	equ	0xFDA
  3797                           fsr2l	equ	0xFD9
  3798                           status	equ	0xFD8
  3799                           
  3800 ;; *************** function _display_menu *****************
  3801 ;; Defined at:
  3802 ;;		line 280 in file "main.c"
  3803 ;; Parameters:    Size  Location     Type
  3804 ;;		None
  3805 ;; Auto vars:     Size  Location     Type
  3806 ;;  menuIndexPtr    2    8[BANK1 ] PTR int 
  3807 ;;		 -> endIndex(2), creditIndex(2), logIndex(2), menuIndex(2), 
  3808 ;;  menuSelectio    2    4[BANK1 ] int 
  3809 ;;  menuSizePtr     2    2[BANK1 ] PTR int 
  3810 ;;		 -> endSize(2), menuSize(2), creditSize(2), events(2), 
  3811 ;;  selector        2    0[BANK1 ] int 
  3812 ;; Return value:  Size  Location     Type
  3813 ;;                  1    wreg      void 
  3814 ;; Registers used:
  3815 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3816 ;; Tracked objects:
  3817 ;;		On entry : 0/0
  3818 ;;		On exit  : 0/0
  3819 ;;		Unchanged: 0/0
  3820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3822 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3823 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3824 ;;      Totals:         0       5      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3825 ;;Total ram usage:       15 bytes
  3826 ;; Hardware stack levels used:    1
  3827 ;; Hardware stack levels required when called:    9
  3828 ;; This function calls:
  3829 ;;		___wmul
  3830 ;;		_sprintf
  3831 ;; This function is called by:
  3832 ;;		_update_display
  3833 ;; This function uses a non-reentrant model
  3834 ;;
  3835                           
  3836                           	psect	text8
  3837  0017BA                     __ptext8:
  3838                           	opt stack 0
  3839  0017BA                     _display_menu:
  3840                           	opt stack 20
  3841                           
  3842                           ;main.c: 281: int menuSelection;
  3843                           ;main.c: 282: int* menuIndexPtr;
  3844                           ;main.c: 283: int* menuSizePtr;
  3845                           ;main.c: 284: int selector=0;
  3846                           
  3847                           ;incstack = 0
  3848  0017BA  0E00               	movlw	0
  3849  0017BC  0101               	movlb	1	; () banked
  3850  0017BE  6F65               	movwf	(display_menu@selector+1)& (0+255),b
  3851  0017C0  0E00               	movlw	0
  3852  0017C2  6F64               	movwf	display_menu@selector& (0+255),b
  3853                           
  3854                           ;main.c: 285: switch(state)
  3855  0017C4  D049               	goto	l7764
  3856  0017C6                     l7740:
  3857                           
  3858                           ;main.c: 288: menuSelection=1;
  3859  0017C6  0E00               	movlw	0
  3860  0017C8  0101               	movlb	1	; () banked
  3861  0017CA  6F69               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3862  0017CC  0E01               	movlw	1
  3863  0017CE  6F68               	movwf	display_menu@menuSelection& (0+255),b
  3864                           
  3865                           ; BSR set to: 1
  3866                           ;main.c: 289: menuIndexPtr=&logIndex;
  3867  0017D0  0EF3               	movlw	low _logIndex
  3868  0017D2  0101               	movlb	1	; () banked
  3869  0017D4  6F6C               	movwf	display_menu@menuIndexPtr& (0+255),b
  3870  0017D6  0E00               	movlw	high _logIndex
  3871  0017D8  0101               	movlb	1	; () banked
  3872  0017DA  6F6D               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3873                           
  3874                           ; BSR set to: 1
  3875                           ;main.c: 290: menuSizePtr=&events;
  3876  0017DC  0EF1               	movlw	low _events
  3877  0017DE  0101               	movlb	1	; () banked
  3878  0017E0  6F66               	movwf	display_menu@menuSizePtr& (0+255),b
  3879  0017E2  0E00               	movlw	high _events
  3880  0017E4  D036               	goto	L2
  3881  0017E6                     l7746:
  3882                           
  3883                           ;main.c: 293: menuSelection=2;
  3884  0017E6  0E00               	movlw	0
  3885  0017E8  0101               	movlb	1	; () banked
  3886  0017EA  6F69               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3887  0017EC  0E02               	movlw	2
  3888  0017EE  6F68               	movwf	display_menu@menuSelection& (0+255),b
  3889                           
  3890                           ; BSR set to: 1
  3891                           ;main.c: 294: menuIndexPtr=&creditIndex;
  3892  0017F0  0EE9               	movlw	low _creditIndex
  3893  0017F2  0101               	movlb	1	; () banked
  3894  0017F4  6F6C               	movwf	display_menu@menuIndexPtr& (0+255),b
  3895  0017F6  0E00               	movlw	high _creditIndex
  3896  0017F8  0101               	movlb	1	; () banked
  3897  0017FA  6F6D               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3898                           
  3899                           ; BSR set to: 1
  3900                           ;main.c: 295: menuSizePtr=&creditSize;
  3901  0017FC  0EEB               	movlw	low _creditSize
  3902  0017FE  0101               	movlb	1	; () banked
  3903  001800  6F66               	movwf	display_menu@menuSizePtr& (0+255),b
  3904  001802  0E00               	movlw	high _creditSize
  3905  001804  D026               	goto	L2
  3906  001806                     l7752:
  3907                           
  3908                           ;main.c: 299: menuSelection=0;
  3909  001806  0E00               	movlw	0
  3910  001808  0101               	movlb	1	; () banked
  3911  00180A  6F69               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3912  00180C  0E00               	movlw	0
  3913  00180E  6F68               	movwf	display_menu@menuSelection& (0+255),b
  3914                           
  3915                           ; BSR set to: 1
  3916                           ;main.c: 300: menuIndexPtr=&menuIndex;
  3917  001810  0EF5               	movlw	low _menuIndex
  3918  001812  0101               	movlb	1	; () banked
  3919  001814  6F6C               	movwf	display_menu@menuIndexPtr& (0+255),b
  3920  001816  0E00               	movlw	high _menuIndex
  3921  001818  0101               	movlb	1	; () banked
  3922  00181A  6F6D               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3923                           
  3924                           ; BSR set to: 1
  3925                           ;main.c: 301: menuSizePtr=&menuSize;
  3926  00181C  0EF7               	movlw	low _menuSize
  3927  00181E  0101               	movlb	1	; () banked
  3928  001820  6F66               	movwf	display_menu@menuSizePtr& (0+255),b
  3929  001822  0E00               	movlw	high _menuSize
  3930  001824  0101               	movlb	1	; () banked
  3931  001826  6F67               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  3932                           
  3933                           ;main.c: 302: selector=1;
  3934  001828  0E00               	movlw	0
  3935  00182A  0101               	movlb	1	; () banked
  3936  00182C  6F65               	movwf	(display_menu@selector+1)& (0+255),b
  3937  00182E  0E01               	movlw	1
  3938  001830  6F64               	movwf	display_menu@selector& (0+255),b
  3939                           
  3940                           ;main.c: 303: break;
  3941  001832  D01F               	goto	l7766
  3942  001834                     l7758:
  3943                           
  3944                           ;main.c: 305: menuSelection=3;
  3945  001834  0E00               	movlw	0
  3946  001836  0101               	movlb	1	; () banked
  3947  001838  6F69               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3948  00183A  0E03               	movlw	3
  3949  00183C  6F68               	movwf	display_menu@menuSelection& (0+255),b
  3950                           
  3951                           ; BSR set to: 1
  3952                           ;main.c: 306: menuIndexPtr=&endIndex;
  3953  00183E  0EED               	movlw	low _endIndex
  3954  001840  0101               	movlb	1	; () banked
  3955  001842  6F6C               	movwf	display_menu@menuIndexPtr& (0+255),b
  3956  001844  0E00               	movlw	high _endIndex
  3957  001846  0101               	movlb	1	; () banked
  3958  001848  6F6D               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3959                           
  3960                           ; BSR set to: 1
  3961                           ;main.c: 307: menuSizePtr=&endSize;
  3962  00184A  0EEF               	movlw	low _endSize
  3963  00184C  0101               	movlb	1	; () banked
  3964  00184E  6F66               	movwf	display_menu@menuSizePtr& (0+255),b
  3965  001850  0E00               	movlw	high _endSize
  3966  001852                     L2:
  3967  001852  0101               	movlb	1	; () banked
  3968  001854  6F67               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  3969                           
  3970                           ;main.c: 308: }
  3971  001856  D00D               	goto	l7766
  3972  001858                     l7764:
  3973                           
  3974                           ; BSR set to: 1
  3975  001858  0100               	movlb	0	; () banked
  3976  00185A  51E8               	movf	_state& (0+255),w,b
  3977                           
  3978                           ; Switch size 1, requested type "space"
  3979                           ; Number of cases is 4, Range of values is 99 to 109
  3980                           ; switch strategies available:
  3981                           ; Name         Instructions Cycles
  3982                           ; simple_byte           13     7 (average)
  3983                           ;	Chosen strategy is simple_byte
  3984  00185C  0A63               	xorlw	99	; case 99
  3985  00185E  B4D8               	btfsc	status,2,c
  3986  001860  D7C2               	goto	l7746
  3987  001862  0A06               	xorlw	6	; case 101
  3988  001864  B4D8               	btfsc	status,2,c
  3989  001866  D7E6               	goto	l7758
  3990  001868  0A09               	xorlw	9	; case 108
  3991  00186A  B4D8               	btfsc	status,2,c
  3992  00186C  D7AC               	goto	l7740
  3993  00186E  0A01               	xorlw	1	; case 109
  3994  001870  D7CA               	goto	l7752
  3995  001872                     l7766:
  3996                           
  3997                           ;main.c: 309: if (selector){
  3998  001872  0101               	movlb	1	; () banked
  3999  001874  5164               	movf	display_menu@selector& (0+255),w,b
  4000  001876  0101               	movlb	1	; () banked
  4001  001878  1165               	iorwf	(display_menu@selector+1)& (0+255),w,b
  4002  00187A  B4D8               	btfsc	status,2,c
  4003  00187C  D14A               	goto	l7782
  4004                           
  4005                           ; BSR set to: 1
  4006                           ;main.c: 310: if (*menuIndexPtr<*menuSizePtr){
  4007  00187E  C166  FFD9         	movff	display_menu@menuSizePtr,fsr2l
  4008  001882  C167  FFDA         	movff	display_menu@menuSizePtr+1,fsr2h
  4009  001886  C16C  FFE1         	movff	display_menu@menuIndexPtr,fsr1l
  4010  00188A  C16D  FFE2         	movff	display_menu@menuIndexPtr+1,fsr1h
  4011  00188E  50DE               	movf	postinc2,w,c
  4012  001890  5CE6               	subwf	postinc1,w,c
  4013  001892  50E6               	movf	postinc1,w,c
  4014  001894  0A80               	xorlw	128
  4015  001896  0100               	movlb	0	; () banked
  4016  001898  6FB6               	movwf	(??_display_menu+4)& (0+255),b
  4017  00189A  50DE               	movf	postinc2,w,c
  4018  00189C  0A80               	xorlw	128
  4019  00189E  0100               	movlb	0	; () banked
  4020  0018A0  59B6               	subwfb	(??_display_menu+4)& (0+255),w,b
  4021  0018A2  B0D8               	btfsc	status,0,c
  4022  0018A4  D096               	goto	l7776
  4023                           
  4024                           ; BSR set to: 0
  4025                           ;main.c: 311: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4026  0018A6  C168  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4027  0018AA  C169  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4028  0018AE  0E00               	movlw	0
  4029  0018B0  0100               	movlb	0	; () banked
  4030  0018B2  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4031  0018B4  0EB4               	movlw	180
  4032  0018B6  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4033  0018B8  EC4F  F01B         	call	___wmul	;wreg free
  4034  0018BC  0E74               	movlw	low _menu
  4035  0018BE  0100               	movlb	0	; () banked
  4036  0018C0  6FB2               	movwf	??_display_menu& (0+255),b
  4037  0018C2  0E01               	movlw	high _menu
  4038  0018C4  0100               	movlb	0	; () banked
  4039  0018C6  6FB3               	movwf	(??_display_menu+1)& (0+255),b
  4040  0018C8  0100               	movlb	0	; () banked
  4041  0018CA  5180               	movf	?___wmul& (0+255),w,b
  4042  0018CC  0100               	movlb	0	; () banked
  4043  0018CE  27B2               	addwf	??_display_menu& (0+255),f,b
  4044  0018D0  0100               	movlb	0	; () banked
  4045  0018D2  5181               	movf	(?___wmul+1)& (0+255),w,b
  4046  0018D4  0100               	movlb	0	; () banked
  4047  0018D6  23B3               	addwfc	(??_display_menu+1)& (0+255),f,b
  4048  0018D8  C16C  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4049  0018DC  C16D  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4050  0018E0  CFDE F0B4          	movff	postinc2,??_display_menu+2
  4051  0018E4  CFDD F0B5          	movff	postdec2,??_display_menu+3
  4052  0018E8  0EFF               	movlw	255
  4053  0018EA  0100               	movlb	0	; () banked
  4054  0018EC  25B4               	addwf	(??_display_menu+2)& (0+255),w,b
  4055  0018EE  0100               	movlb	0	; () banked
  4056  0018F0  6F80               	movwf	___wmul@multiplier& (0+255),b
  4057  0018F2  0EFF               	movlw	255
  4058  0018F4  0100               	movlb	0	; () banked
  4059  0018F6  21B5               	addwfc	(??_display_menu+3)& (0+255),w,b
  4060  0018F8  0100               	movlb	0	; () banked
  4061  0018FA  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4062  0018FC  0E00               	movlw	0
  4063  0018FE  0100               	movlb	0	; () banked
  4064  001900  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4065  001902  0E12               	movlw	18
  4066  001904  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4067  001906  EC4F  F01B         	call	___wmul	;wreg free
  4068  00190A  0100               	movlb	0	; () banked
  4069  00190C  5180               	movf	?___wmul& (0+255),w,b
  4070  00190E  0100               	movlb	0	; () banked
  4071  001910  25B2               	addwf	??_display_menu& (0+255),w,b
  4072  001912  0101               	movlb	1	; () banked
  4073  001914  6F6A               	movwf	_display_menu$1147& (0+255),b
  4074  001916  0100               	movlb	0	; () banked
  4075  001918  5181               	movf	(?___wmul+1)& (0+255),w,b
  4076  00191A  0100               	movlb	0	; () banked
  4077  00191C  21B3               	addwfc	(??_display_menu+1)& (0+255),w,b
  4078  00191E  0101               	movlb	1	; () banked
  4079  001920  6F6B               	movwf	(_display_menu$1147+1)& (0+255),b
  4080                           
  4081                           ; BSR set to: 1
  4082                           ;main.c: 311: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4083  001922  0E40               	movlw	low _ndisplay0
  4084  001924  0100               	movlb	0	; () banked
  4085  001926  6FA2               	movwf	sprintf@wh& (0+255),b
  4086  001928  0E01               	movlw	high _ndisplay0
  4087  00192A  0100               	movlb	0	; () banked
  4088  00192C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4089  00192E  0EFA               	movlw	low STR_11
  4090  001930  0100               	movlb	0	; () banked
  4091  001932  6FA4               	movwf	sprintf@f& (0+255),b
  4092  001934  0EFF               	movlw	high STR_11
  4093  001936  0100               	movlb	0	; () banked
  4094  001938  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4095  00193A  C16A  F0A6         	movff	_display_menu$1147,?_sprintf+4
  4096  00193E  C16B  F0A7         	movff	_display_menu$1147+1,?_sprintf+5
  4097  001942  0E00               	movlw	0
  4098  001944  0100               	movlb	0	; () banked
  4099  001946  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4100  001948  0E3C               	movlw	60
  4101  00194A  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4102  00194C  EC92  F01A         	call	_sprintf	;wreg free
  4103                           
  4104                           ;main.c: 312: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  4105  001950  C168  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4106  001954  C169  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4107  001958  0E00               	movlw	0
  4108  00195A  0100               	movlb	0	; () banked
  4109  00195C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4110  00195E  0EB4               	movlw	180
  4111  001960  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4112  001962  EC4F  F01B         	call	___wmul	;wreg free
  4113  001966  0E74               	movlw	low _menu
  4114  001968  0100               	movlb	0	; () banked
  4115  00196A  6FB2               	movwf	??_display_menu& (0+255),b
  4116  00196C  0E01               	movlw	high _menu
  4117  00196E  0100               	movlb	0	; () banked
  4118  001970  6FB3               	movwf	(??_display_menu+1)& (0+255),b
  4119  001972  0100               	movlb	0	; () banked
  4120  001974  5180               	movf	?___wmul& (0+255),w,b
  4121  001976  0100               	movlb	0	; () banked
  4122  001978  27B2               	addwf	??_display_menu& (0+255),f,b
  4123  00197A  0100               	movlb	0	; () banked
  4124  00197C  5181               	movf	(?___wmul+1)& (0+255),w,b
  4125  00197E  0100               	movlb	0	; () banked
  4126  001980  23B3               	addwfc	(??_display_menu+1)& (0+255),f,b
  4127  001982  C16C  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4128  001986  C16D  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4129  00198A  CFDE F080          	movff	postinc2,___wmul@multiplier
  4130  00198E  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  4131  001992  0E00               	movlw	0
  4132  001994  0100               	movlb	0	; () banked
  4133  001996  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4134  001998  0E12               	movlw	18
  4135  00199A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4136  00199C  EC4F  F01B         	call	___wmul	;wreg free
  4137  0019A0  0100               	movlb	0	; () banked
  4138  0019A2  5180               	movf	?___wmul& (0+255),w,b
  4139  0019A4  0100               	movlb	0	; () banked
  4140  0019A6  25B2               	addwf	??_display_menu& (0+255),w,b
  4141  0019A8  0101               	movlb	1	; () banked
  4142  0019AA  6F6A               	movwf	_display_menu$1147& (0+255),b
  4143  0019AC  0100               	movlb	0	; () banked
  4144  0019AE  5181               	movf	(?___wmul+1)& (0+255),w,b
  4145  0019B0  0100               	movlb	0	; () banked
  4146  0019B2  21B3               	addwfc	(??_display_menu+1)& (0+255),w,b
  4147  0019B4  0101               	movlb	1	; () banked
  4148  0019B6  6F6B               	movwf	(_display_menu$1147+1)& (0+255),b
  4149                           
  4150                           ;main.c: 312: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  4151  0019B8  0E52               	movlw	low _ndisplay1
  4152  0019BA  0100               	movlb	0	; () banked
  4153  0019BC  6FA2               	movwf	sprintf@wh& (0+255),b
  4154  0019BE  0E01               	movlw	high _ndisplay1
  4155  0019C0  0100               	movlb	0	; () banked
  4156  0019C2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4157  0019C4  C16A  F0A4         	movff	_display_menu$1147,sprintf@f
  4158  0019C8  C16B  F0A5         	movff	_display_menu$1147+1,sprintf@f+1
  4159  0019CC  EC92  F01A         	call	_sprintf	;wreg free
  4160                           
  4161                           ;main.c: 313: }
  4162  0019D0  0012               	return	
  4163  0019D2                     l7776:
  4164                           
  4165                           ;main.c: 314: else{
  4166                           ;main.c: 315: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  4167  0019D2  C168  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4168  0019D6  C169  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4169  0019DA  0E00               	movlw	0
  4170  0019DC  0100               	movlb	0	; () banked
  4171  0019DE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4172  0019E0  0EB4               	movlw	180
  4173  0019E2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4174  0019E4  EC4F  F01B         	call	___wmul	;wreg free
  4175  0019E8  0E74               	movlw	low _menu
  4176  0019EA  0100               	movlb	0	; () banked
  4177  0019EC  6FB2               	movwf	??_display_menu& (0+255),b
  4178  0019EE  0E01               	movlw	high _menu
  4179  0019F0  0100               	movlb	0	; () banked
  4180  0019F2  6FB3               	movwf	(??_display_menu+1)& (0+255),b
  4181  0019F4  0100               	movlb	0	; () banked
  4182  0019F6  5180               	movf	?___wmul& (0+255),w,b
  4183  0019F8  0100               	movlb	0	; () banked
  4184  0019FA  27B2               	addwf	??_display_menu& (0+255),f,b
  4185  0019FC  0100               	movlb	0	; () banked
  4186  0019FE  5181               	movf	(?___wmul+1)& (0+255),w,b
  4187  001A00  0100               	movlb	0	; () banked
  4188  001A02  23B3               	addwfc	(??_display_menu+1)& (0+255),f,b
  4189  001A04  C16C  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4190  001A08  C16D  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4191  001A0C  CFDE F0B4          	movff	postinc2,??_display_menu+2
  4192  001A10  CFDD F0B5          	movff	postdec2,??_display_menu+3
  4193  001A14  0EFE               	movlw	254
  4194  001A16  0100               	movlb	0	; () banked
  4195  001A18  25B4               	addwf	(??_display_menu+2)& (0+255),w,b
  4196  001A1A  0100               	movlb	0	; () banked
  4197  001A1C  6F80               	movwf	___wmul@multiplier& (0+255),b
  4198  001A1E  0EFF               	movlw	255
  4199  001A20  0100               	movlb	0	; () banked
  4200  001A22  21B5               	addwfc	(??_display_menu+3)& (0+255),w,b
  4201  001A24  0100               	movlb	0	; () banked
  4202  001A26  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4203  001A28  0E00               	movlw	0
  4204  001A2A  0100               	movlb	0	; () banked
  4205  001A2C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4206  001A2E  0E12               	movlw	18
  4207  001A30  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4208  001A32  EC4F  F01B         	call	___wmul	;wreg free
  4209  001A36  0100               	movlb	0	; () banked
  4210  001A38  5180               	movf	?___wmul& (0+255),w,b
  4211  001A3A  0100               	movlb	0	; () banked
  4212  001A3C  25B2               	addwf	??_display_menu& (0+255),w,b
  4213  001A3E  0101               	movlb	1	; () banked
  4214  001A40  6F6A               	movwf	_display_menu$1147& (0+255),b
  4215  001A42  0100               	movlb	0	; () banked
  4216  001A44  5181               	movf	(?___wmul+1)& (0+255),w,b
  4217  001A46  0100               	movlb	0	; () banked
  4218  001A48  21B3               	addwfc	(??_display_menu+1)& (0+255),w,b
  4219  001A4A  0101               	movlb	1	; () banked
  4220  001A4C  6F6B               	movwf	(_display_menu$1147+1)& (0+255),b
  4221                           
  4222                           ; BSR set to: 1
  4223                           ;main.c: 314: else{
  4224                           ;main.c: 315: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  4225  001A4E  0E40               	movlw	low _ndisplay0
  4226  001A50  0100               	movlb	0	; () banked
  4227  001A52  6FA2               	movwf	sprintf@wh& (0+255),b
  4228  001A54  0E01               	movlw	high _ndisplay0
  4229  001A56  0100               	movlb	0	; () banked
  4230  001A58  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4231  001A5A  C16A  F0A4         	movff	_display_menu$1147,sprintf@f
  4232  001A5E  C16B  F0A5         	movff	_display_menu$1147+1,sprintf@f+1
  4233  001A62  EC92  F01A         	call	_sprintf	;wreg free
  4234                           
  4235                           ;main.c: 316: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4236  001A66  C168  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4237  001A6A  C169  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4238  001A6E  0E00               	movlw	0
  4239  001A70  0100               	movlb	0	; () banked
  4240  001A72  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4241  001A74  0EB4               	movlw	180
  4242  001A76  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4243  001A78  EC4F  F01B         	call	___wmul	;wreg free
  4244  001A7C  0E74               	movlw	low _menu
  4245  001A7E  0100               	movlb	0	; () banked
  4246  001A80  6FB2               	movwf	??_display_menu& (0+255),b
  4247  001A82  0E01               	movlw	high _menu
  4248  001A84  0100               	movlb	0	; () banked
  4249  001A86  6FB3               	movwf	(??_display_menu+1)& (0+255),b
  4250  001A88  0100               	movlb	0	; () banked
  4251  001A8A  5180               	movf	?___wmul& (0+255),w,b
  4252  001A8C  0100               	movlb	0	; () banked
  4253  001A8E  27B2               	addwf	??_display_menu& (0+255),f,b
  4254  001A90  0100               	movlb	0	; () banked
  4255  001A92  5181               	movf	(?___wmul+1)& (0+255),w,b
  4256  001A94  0100               	movlb	0	; () banked
  4257  001A96  23B3               	addwfc	(??_display_menu+1)& (0+255),f,b
  4258  001A98  C16C  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4259  001A9C  C16D  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4260  001AA0  CFDE F0B4          	movff	postinc2,??_display_menu+2
  4261  001AA4  CFDD F0B5          	movff	postdec2,??_display_menu+3
  4262  001AA8  0EFF               	movlw	255
  4263  001AAA  0100               	movlb	0	; () banked
  4264  001AAC  25B4               	addwf	(??_display_menu+2)& (0+255),w,b
  4265  001AAE  0100               	movlb	0	; () banked
  4266  001AB0  6F80               	movwf	___wmul@multiplier& (0+255),b
  4267  001AB2  0EFF               	movlw	255
  4268  001AB4  0100               	movlb	0	; () banked
  4269  001AB6  21B5               	addwfc	(??_display_menu+3)& (0+255),w,b
  4270  001AB8  0100               	movlb	0	; () banked
  4271  001ABA  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4272  001ABC  0E00               	movlw	0
  4273  001ABE  0100               	movlb	0	; () banked
  4274  001AC0  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4275  001AC2  0E12               	movlw	18
  4276  001AC4  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4277  001AC6  EC4F  F01B         	call	___wmul	;wreg free
  4278  001ACA  0100               	movlb	0	; () banked
  4279  001ACC  5180               	movf	?___wmul& (0+255),w,b
  4280  001ACE  0100               	movlb	0	; () banked
  4281  001AD0  25B2               	addwf	??_display_menu& (0+255),w,b
  4282  001AD2  0101               	movlb	1	; () banked
  4283  001AD4  6F6A               	movwf	_display_menu$1147& (0+255),b
  4284  001AD6  0100               	movlb	0	; () banked
  4285  001AD8  5181               	movf	(?___wmul+1)& (0+255),w,b
  4286  001ADA  0100               	movlb	0	; () banked
  4287  001ADC  21B3               	addwfc	(??_display_menu+1)& (0+255),w,b
  4288  001ADE  0101               	movlb	1	; () banked
  4289  001AE0  6F6B               	movwf	(_display_menu$1147+1)& (0+255),b
  4290                           
  4291                           ;main.c: 316: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4292  001AE2  0E52               	movlw	low _ndisplay1
  4293  001AE4  0100               	movlb	0	; () banked
  4294  001AE6  6FA2               	movwf	sprintf@wh& (0+255),b
  4295  001AE8  0E01               	movlw	high _ndisplay1
  4296  001AEA  0100               	movlb	0	; () banked
  4297  001AEC  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4298  001AEE  0EFA               	movlw	low STR_11
  4299  001AF0  0100               	movlb	0	; () banked
  4300  001AF2  6FA4               	movwf	sprintf@f& (0+255),b
  4301  001AF4  0EFF               	movlw	high STR_11
  4302  001AF6  0100               	movlb	0	; () banked
  4303  001AF8  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4304  001AFA  C16A  F0A6         	movff	_display_menu$1147,?_sprintf+4
  4305  001AFE  C16B  F0A7         	movff	_display_menu$1147+1,?_sprintf+5
  4306  001B02  0E00               	movlw	0
  4307  001B04  0100               	movlb	0	; () banked
  4308  001B06  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4309  001B08  0E3C               	movlw	60
  4310  001B0A  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4311  001B0C  EC92  F01A         	call	_sprintf	;wreg free
  4312                           
  4313                           ;main.c: 317: }
  4314                           ;main.c: 318: }
  4315  001B10  0012               	return	
  4316  001B12                     l7782:
  4317                           
  4318                           ;main.c: 319: else{
  4319                           ;main.c: 320: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  4320  001B12  C168  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4321  001B16  C169  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4322  001B1A  0E00               	movlw	0
  4323  001B1C  0100               	movlb	0	; () banked
  4324  001B1E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4325  001B20  0EB4               	movlw	180
  4326  001B22  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4327  001B24  EC4F  F01B         	call	___wmul	;wreg free
  4328  001B28  0E74               	movlw	low _menu
  4329  001B2A  0100               	movlb	0	; () banked
  4330  001B2C  6FB2               	movwf	??_display_menu& (0+255),b
  4331  001B2E  0E01               	movlw	high _menu
  4332  001B30  0100               	movlb	0	; () banked
  4333  001B32  6FB3               	movwf	(??_display_menu+1)& (0+255),b
  4334  001B34  0100               	movlb	0	; () banked
  4335  001B36  5180               	movf	?___wmul& (0+255),w,b
  4336  001B38  0100               	movlb	0	; () banked
  4337  001B3A  27B2               	addwf	??_display_menu& (0+255),f,b
  4338  001B3C  0100               	movlb	0	; () banked
  4339  001B3E  5181               	movf	(?___wmul+1)& (0+255),w,b
  4340  001B40  0100               	movlb	0	; () banked
  4341  001B42  23B3               	addwfc	(??_display_menu+1)& (0+255),f,b
  4342  001B44  C16C  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4343  001B48  C16D  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4344  001B4C  CFDE F0B4          	movff	postinc2,??_display_menu+2
  4345  001B50  CFDD F0B5          	movff	postdec2,??_display_menu+3
  4346  001B54  0EFF               	movlw	255
  4347  001B56  0100               	movlb	0	; () banked
  4348  001B58  25B4               	addwf	(??_display_menu+2)& (0+255),w,b
  4349  001B5A  0100               	movlb	0	; () banked
  4350  001B5C  6F80               	movwf	___wmul@multiplier& (0+255),b
  4351  001B5E  0EFF               	movlw	255
  4352  001B60  0100               	movlb	0	; () banked
  4353  001B62  21B5               	addwfc	(??_display_menu+3)& (0+255),w,b
  4354  001B64  0100               	movlb	0	; () banked
  4355  001B66  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4356  001B68  0E00               	movlw	0
  4357  001B6A  0100               	movlb	0	; () banked
  4358  001B6C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4359  001B6E  0E12               	movlw	18
  4360  001B70  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4361  001B72  EC4F  F01B         	call	___wmul	;wreg free
  4362  001B76  0100               	movlb	0	; () banked
  4363  001B78  5180               	movf	?___wmul& (0+255),w,b
  4364  001B7A  0100               	movlb	0	; () banked
  4365  001B7C  25B2               	addwf	??_display_menu& (0+255),w,b
  4366  001B7E  0101               	movlb	1	; () banked
  4367  001B80  6F6A               	movwf	_display_menu$1147& (0+255),b
  4368  001B82  0100               	movlb	0	; () banked
  4369  001B84  5181               	movf	(?___wmul+1)& (0+255),w,b
  4370  001B86  0100               	movlb	0	; () banked
  4371  001B88  21B3               	addwfc	(??_display_menu+1)& (0+255),w,b
  4372  001B8A  0101               	movlb	1	; () banked
  4373  001B8C  6F6B               	movwf	(_display_menu$1147+1)& (0+255),b
  4374                           
  4375                           ; BSR set to: 1
  4376                           ;main.c: 319: else{
  4377                           ;main.c: 320: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  4378  001B8E  0E40               	movlw	low _ndisplay0
  4379  001B90  0100               	movlb	0	; () banked
  4380  001B92  6FA2               	movwf	sprintf@wh& (0+255),b
  4381  001B94  0E01               	movlw	high _ndisplay0
  4382  001B96  0100               	movlb	0	; () banked
  4383  001B98  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4384  001B9A  0EFA               	movlw	low STR_11
  4385  001B9C  0100               	movlb	0	; () banked
  4386  001B9E  6FA4               	movwf	sprintf@f& (0+255),b
  4387  001BA0  0EFF               	movlw	high STR_11
  4388  001BA2  0100               	movlb	0	; () banked
  4389  001BA4  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4390  001BA6  C16A  F0A6         	movff	_display_menu$1147,?_sprintf+4
  4391  001BAA  C16B  F0A7         	movff	_display_menu$1147+1,?_sprintf+5
  4392  001BAE  0E00               	movlw	0
  4393  001BB0  0100               	movlb	0	; () banked
  4394  001BB2  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4395  001BB4  0E5E               	movlw	94
  4396  001BB6  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4397  001BB8  EC92  F01A         	call	_sprintf	;wreg free
  4398                           
  4399                           ;main.c: 321: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4400  001BBC  C168  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4401  001BC0  C169  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4402  001BC4  0E00               	movlw	0
  4403  001BC6  0100               	movlb	0	; () banked
  4404  001BC8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4405  001BCA  0EB4               	movlw	180
  4406  001BCC  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4407  001BCE  EC4F  F01B         	call	___wmul	;wreg free
  4408  001BD2  0E74               	movlw	low _menu
  4409  001BD4  0100               	movlb	0	; () banked
  4410  001BD6  6FB2               	movwf	??_display_menu& (0+255),b
  4411  001BD8  0E01               	movlw	high _menu
  4412  001BDA  0100               	movlb	0	; () banked
  4413  001BDC  6FB3               	movwf	(??_display_menu+1)& (0+255),b
  4414  001BDE  0100               	movlb	0	; () banked
  4415  001BE0  5180               	movf	?___wmul& (0+255),w,b
  4416  001BE2  0100               	movlb	0	; () banked
  4417  001BE4  27B2               	addwf	??_display_menu& (0+255),f,b
  4418  001BE6  0100               	movlb	0	; () banked
  4419  001BE8  5181               	movf	(?___wmul+1)& (0+255),w,b
  4420  001BEA  0100               	movlb	0	; () banked
  4421  001BEC  23B3               	addwfc	(??_display_menu+1)& (0+255),f,b
  4422  001BEE  C16C  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4423  001BF2  C16D  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4424  001BF6  CFDE F080          	movff	postinc2,___wmul@multiplier
  4425  001BFA  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  4426  001BFE  0E00               	movlw	0
  4427  001C00  0100               	movlb	0	; () banked
  4428  001C02  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4429  001C04  0E12               	movlw	18
  4430  001C06  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4431  001C08  EC4F  F01B         	call	___wmul	;wreg free
  4432  001C0C  0100               	movlb	0	; () banked
  4433  001C0E  5180               	movf	?___wmul& (0+255),w,b
  4434  001C10  0100               	movlb	0	; () banked
  4435  001C12  25B2               	addwf	??_display_menu& (0+255),w,b
  4436  001C14  0101               	movlb	1	; () banked
  4437  001C16  6F6A               	movwf	_display_menu$1147& (0+255),b
  4438  001C18  0100               	movlb	0	; () banked
  4439  001C1A  5181               	movf	(?___wmul+1)& (0+255),w,b
  4440  001C1C  0100               	movlb	0	; () banked
  4441  001C1E  21B3               	addwfc	(??_display_menu+1)& (0+255),w,b
  4442  001C20  0101               	movlb	1	; () banked
  4443  001C22  6F6B               	movwf	(_display_menu$1147+1)& (0+255),b
  4444                           
  4445                           ;main.c: 321: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4446  001C24  0E52               	movlw	low _ndisplay1
  4447  001C26  0100               	movlb	0	; () banked
  4448  001C28  6FA2               	movwf	sprintf@wh& (0+255),b
  4449  001C2A  0E01               	movlw	high _ndisplay1
  4450  001C2C  0100               	movlb	0	; () banked
  4451  001C2E  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4452  001C30  0EFA               	movlw	low STR_11
  4453  001C32  0100               	movlb	0	; () banked
  4454  001C34  6FA4               	movwf	sprintf@f& (0+255),b
  4455  001C36  0EFF               	movlw	high STR_11
  4456  001C38  0100               	movlb	0	; () banked
  4457  001C3A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4458  001C3C  C16A  F0A6         	movff	_display_menu$1147,?_sprintf+4
  4459  001C40  C16B  F0A7         	movff	_display_menu$1147+1,?_sprintf+5
  4460  001C44  0E00               	movlw	0
  4461  001C46  0100               	movlb	0	; () banked
  4462  001C48  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4463  001C4A  0E5E               	movlw	94
  4464  001C4C  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4465  001C4E  EC92  F01A         	call	_sprintf	;wreg free
  4466  001C52  0012               	return	
  4467  001C54                     __end_of_display_menu:
  4468                           	opt stack 0
  4469                           tblptru	equ	0xFF8
  4470                           tblptrh	equ	0xFF7
  4471                           tblptrl	equ	0xFF6
  4472                           tablat	equ	0xFF5
  4473                           prodh	equ	0xFF4
  4474                           prodl	equ	0xFF3
  4475                           intcon	equ	0xFF2
  4476                           intcon2	equ	0xFF1
  4477                           intcon3	equ	0xFF0
  4478                           postinc0	equ	0xFEE
  4479                           wreg	equ	0xFE8
  4480                           indf1	equ	0xFE7
  4481                           postinc1	equ	0xFE6
  4482                           postdec1	equ	0xFE5
  4483                           fsr1h	equ	0xFE2
  4484                           fsr1l	equ	0xFE1
  4485                           indf2	equ	0xFDF
  4486                           postinc2	equ	0xFDE
  4487                           postdec2	equ	0xFDD
  4488                           fsr2h	equ	0xFDA
  4489                           fsr2l	equ	0xFD9
  4490                           status	equ	0xFD8
  4491                           
  4492 ;; *************** function _sprintf *****************
  4493 ;; Defined at:
  4494 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  4495 ;; Parameters:    Size  Location     Type
  4496 ;;  wh              2   34[BANK0 ] PTR unsigned char 
  4497 ;;		 -> menu(720), ndisplay1(18), ndisplay0(18), 
  4498 ;;  f               2   36[BANK0 ] PTR const unsigned char 
  4499 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
  4500 ;;		 -> STR_10(20), STR_9(20), STR_8(22), STR_7(19), 
  4501 ;;		 -> menu(720), STR_6(15), STR_5(6), STR_4(14), 
  4502 ;;		 -> STR_3(12), STR_2(23), STR_1(23), 
  4503 ;; Auto vars:     Size  Location     Type
  4504 ;;  pb              4   46[BANK0 ] struct __prbuf
  4505 ;;  ap              2   44[BANK0 ] PTR void [1]
  4506 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4507 ;; Return value:  Size  Location     Type
  4508 ;;                  2   34[BANK0 ] int 
  4509 ;; Registers used:
  4510 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4511 ;; Tracked objects:
  4512 ;;		On entry : 0/0
  4513 ;;		On exit  : 0/0
  4514 ;;		Unchanged: 0/0
  4515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4516 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4520 ;;Total ram usage:       16 bytes
  4521 ;; Hardware stack levels used:    1
  4522 ;; Hardware stack levels required when called:    8
  4523 ;; This function calls:
  4524 ;;		__doprnt
  4525 ;; This function is called by:
  4526 ;;		_update_display
  4527 ;;		_update_state
  4528 ;;		_display_menu
  4529 ;; This function uses a non-reentrant model
  4530 ;;
  4531                           
  4532                           	psect	text9
  4533  003524                     __ptext9:
  4534                           	opt stack 0
  4535  003524                     _sprintf:
  4536                           	opt stack 21
  4537                           
  4538                           ;incstack = 0
  4539  003524  C0A2  F0AE         	movff	sprintf@wh,sprintf@pb
  4540  003528  C0A3  F0AF         	movff	sprintf@wh+1,sprintf@pb+1
  4541  00352C  0E00               	movlw	0
  4542  00352E  0100               	movlb	0	; () banked
  4543  003530  6FB0               	movwf	(sprintf@pb+2)& (0+255),b
  4544  003532  0E00               	movlw	0
  4545  003534  0100               	movlb	0	; () banked
  4546  003536  6FB1               	movwf	(sprintf@pb+3)& (0+255),b
  4547  003538  0EA6               	movlw	low (?_sprintf+4)
  4548  00353A  0100               	movlb	0	; () banked
  4549  00353C  6FAC               	movwf	sprintf@ap& (0+255),b
  4550  00353E  0E00               	movlw	high (?_sprintf+4)
  4551  003540  0100               	movlb	0	; () banked
  4552  003542  6FAD               	movwf	(sprintf@ap+1)& (0+255),b
  4553                           
  4554                           ; BSR set to: 0
  4555  003544  0EAE               	movlw	low sprintf@pb
  4556  003546  0100               	movlb	0	; () banked
  4557  003548  6F8C               	movwf	__doprnt@pb& (0+255),b
  4558  00354A  0E00               	movlw	high sprintf@pb
  4559  00354C  0100               	movlb	0	; () banked
  4560  00354E  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  4561  003550  C0A4  F08E         	movff	sprintf@f,__doprnt@f
  4562  003554  C0A5  F08F         	movff	sprintf@f+1,__doprnt@f+1
  4563  003558  0EAC               	movlw	low sprintf@ap
  4564  00355A  0100               	movlb	0	; () banked
  4565  00355C  6F90               	movwf	__doprnt@ap& (0+255),b
  4566  00355E  0E00               	movlw	high sprintf@ap
  4567  003560  0100               	movlb	0	; () banked
  4568  003562  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  4569  003564  EC09  F000         	call	__doprnt	;wreg free
  4570  003568  C0AE  FFD9         	movff	sprintf@pb,fsr2l
  4571  00356C  C0AF  FFDA         	movff	sprintf@pb+1,fsr2h
  4572  003570  0E00               	movlw	0
  4573  003572  6EDF               	movwf	indf2,c
  4574  003574  0012               	return	
  4575  003576                     __end_of_sprintf:
  4576                           	opt stack 0
  4577                           tblptru	equ	0xFF8
  4578                           tblptrh	equ	0xFF7
  4579                           tblptrl	equ	0xFF6
  4580                           tablat	equ	0xFF5
  4581                           prodh	equ	0xFF4
  4582                           prodl	equ	0xFF3
  4583                           intcon	equ	0xFF2
  4584                           intcon2	equ	0xFF1
  4585                           intcon3	equ	0xFF0
  4586                           postinc0	equ	0xFEE
  4587                           wreg	equ	0xFE8
  4588                           indf1	equ	0xFE7
  4589                           postinc1	equ	0xFE6
  4590                           postdec1	equ	0xFE5
  4591                           fsr1h	equ	0xFE2
  4592                           fsr1l	equ	0xFE1
  4593                           indf2	equ	0xFDF
  4594                           postinc2	equ	0xFDE
  4595                           postdec2	equ	0xFDD
  4596                           fsr2h	equ	0xFDA
  4597                           fsr2l	equ	0xFD9
  4598                           status	equ	0xFD8
  4599                           
  4600 ;; *************** function __doprnt *****************
  4601 ;; Defined at:
  4602 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4603 ;; Parameters:    Size  Location     Type
  4604 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
  4605 ;;		 -> sprintf@pb(4), printf@pb(4), 
  4606 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4607 ;;		 -> STR_17(14), STR_16(15), STR_15(8), STR_14(5), 
  4608 ;;		 -> STR_13(5), STR_12(5), STR_11(5), STR_10(20), 
  4609 ;;		 -> STR_9(20), STR_8(22), STR_7(19), menu(720), 
  4610 ;;		 -> STR_6(15), STR_5(6), STR_4(14), STR_3(12), 
  4611 ;;		 -> STR_2(23), STR_1(23), display1(18), display0(18), 
  4612 ;;  ap              2   16[BANK0 ] PTR PTR void 
  4613 ;;		 -> sprintf@ap(2), printf@ap(2), 
  4614 ;; Auto vars:     Size  Location     Type
  4615 ;;  idx             1   22[BANK0 ] unsigned char 
  4616 ;;  tmpval          4    0        struct .
  4617 ;;  width           2   31[BANK0 ] int 
  4618 ;;  val             2   28[BANK0 ] unsigned int 
  4619 ;;  cp              2   26[BANK0 ] PTR const unsigned char 
  4620 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_18(7), 
  4621 ;;		 -> _doprnt@c(1), menu(720), ndisplay1(18), ndisplay0(18), 
  4622 ;;  len             2   24[BANK0 ] unsigned int 
  4623 ;;  c               1   33[BANK0 ] char 
  4624 ;;  flag            1   30[BANK0 ] unsigned char 
  4625 ;;  prec            1   23[BANK0 ] char 
  4626 ;; Return value:  Size  Location     Type
  4627 ;;                  2   12[BANK0 ] int 
  4628 ;; Registers used:
  4629 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4630 ;; Tracked objects:
  4631 ;;		On entry : 0/0
  4632 ;;		On exit  : 0/0
  4633 ;;		Unchanged: 0/0
  4634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4635 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4636 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4637 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4638 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4639 ;;Total ram usage:       22 bytes
  4640 ;; Hardware stack levels used:    1
  4641 ;; Hardware stack levels required when called:    7
  4642 ;; This function calls:
  4643 ;;		Absolute function
  4644 ;;		___lwdiv
  4645 ;;		___lwmod
  4646 ;;		___wmul
  4647 ;;		_isdigit
  4648 ;;		_putch
  4649 ;; This function is called by:
  4650 ;;		_printf
  4651 ;;		_sprintf
  4652 ;; This function uses a non-reentrant model
  4653 ;;
  4654                           
  4655                           	psect	text10
  4656  000012                     __ptext10:
  4657                           	opt stack 0
  4658  000012                     __doprnt:
  4659                           	opt stack 21
  4660                           
  4661                           ;doprnt.c: 499: signed char c;
  4662                           ;doprnt.c: 501: int width;
  4663                           ;doprnt.c: 506: signed char prec;
  4664                           ;doprnt.c: 508: unsigned char flag;
  4665                           ;doprnt.c: 523: union {
  4666                           ;doprnt.c: 524: unsigned long vd;
  4667                           ;doprnt.c: 525: double integ;
  4668                           ;doprnt.c: 526: } tmpval;
  4669                           ;doprnt.c: 528: unsigned int val;
  4670                           ;doprnt.c: 529: unsigned len;
  4671                           ;doprnt.c: 530: const char * cp;
  4672                           ;doprnt.c: 536: while(c = *f++) {
  4673                           
  4674                           ;incstack = 0
  4675  000012  EFA2  F004         	goto	l7718
  4676  000016                     l7512:
  4677                           
  4678                           ;doprnt.c: 538: if(c != '%')
  4679  000016  0E25               	movlw	37
  4680  000018  0100               	movlb	0	; () banked
  4681  00001A  19A1               	xorwf	__doprnt@c& (0+255),w,b
  4682  00001C  B4D8               	btfsc	status,2,c
  4683  00001E  D03C               	goto	l7522
  4684                           
  4685                           ; BSR set to: 0
  4686                           ;doprnt.c: 540: {
  4687                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4688  000020  0100               	movlb	0	; () banked
  4689  000022  EE20 F002          	lfsr	2,2
  4690  000026  518C               	movf	__doprnt@pb& (0+255),w,b
  4691  000028  26D9               	addwf	fsr2l,f,c
  4692  00002A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4693  00002C  22DA               	addwfc	fsr2h,f,c
  4694  00002E  50DE               	movf	postinc2,w,c
  4695  000030  10DE               	iorwf	postinc2,w,c
  4696  000032  B4D8               	btfsc	status,2,c
  4697  000034  D01A               	goto	l7518
  4698                           
  4699                           ; BSR set to: 0
  4700  000036  0100               	movlb	0	; () banked
  4701  000038  EE20 F002          	lfsr	2,2
  4702  00003C  518C               	movf	__doprnt@pb& (0+255),w,b
  4703  00003E  26D9               	addwf	fsr2l,f,c
  4704  000040  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4705  000042  22DA               	addwfc	fsr2h,f,c
  4706  000044  CFDE F092          	movff	postinc2,??__doprnt
  4707  000048  CFDD F093          	movff	postdec2,??__doprnt+1
  4708  00004C  D802               	call	u11578
  4709  00004E  EFA2  F004         	goto	l7718
  4710  000052                     u11578:
  4711  000052  0005               	push	
  4712  000054  6EFA               	movwf	pclath,c
  4713  000056  0100               	movlb	0	; () banked
  4714  000058  5192               	movf	??__doprnt& (0+255),w,b
  4715  00005A  6EFD               	movwf	tosl,c
  4716  00005C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4717  00005E  6EFE               	movwf	tosh,c
  4718  000060  6AFF               	clrf	tosu,c
  4719  000062  50FA               	movf	pclath,w,c
  4720  000064  0100               	movlb	0	; () banked
  4721  000066  51A1               	movf	__doprnt@c& (0+255),w,b
  4722  000068  0012               	return		;indir
  4723  00006A                     l7518:
  4724  00006A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4725  00006E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4726  000072  CFDE F092          	movff	postinc2,??__doprnt
  4727  000076  CFDD F093          	movff	postdec2,??__doprnt+1
  4728  00007A  C092  FFD9         	movff	??__doprnt,fsr2l
  4729  00007E  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4730  000082  C0A1  FFDF         	movff	__doprnt@c,indf2
  4731  000086  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4732  00008A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4733  00008E  2ADE               	incf	postinc2,f,c
  4734  000090  0E00               	movlw	0
  4735  000092  22DD               	addwfc	postdec2,f,c
  4736                           
  4737                           ;doprnt.c: 542: continue;
  4738  000094  EFA2  F004         	goto	l7718
  4739  000098                     l7522:
  4740                           
  4741                           ;doprnt.c: 543: }
  4742                           ;doprnt.c: 546: width = 0;
  4743  000098  0E00               	movlw	0
  4744  00009A  0100               	movlb	0	; () banked
  4745  00009C  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  4746  00009E  0E00               	movlw	0
  4747  0000A0  6F9F               	movwf	__doprnt@width& (0+255),b
  4748                           
  4749                           ;doprnt.c: 548: flag = 0;
  4750  0000A2  0E00               	movlw	0
  4751  0000A4  0100               	movlb	0	; () banked
  4752  0000A6  6F9E               	movwf	__doprnt@flag& (0+255),b
  4753                           
  4754                           ; BSR set to: 0
  4755                           ;doprnt.c: 551: switch(*f) {
  4756                           
  4757                           ;doprnt.c: 550: for(;;) {
  4758  0000A8  D005               	goto	l7528
  4759  0000AA                     l7524:
  4760                           
  4761                           ;doprnt.c: 580: flag |= 0x04;
  4762  0000AA  0100               	movlb	0	; () banked
  4763  0000AC  859E               	bsf	__doprnt@flag& (0+255),2,b
  4764                           
  4765                           ;doprnt.c: 581: f++;
  4766  0000AE  0100               	movlb	0	; () banked
  4767  0000B0  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  4768  0000B2  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  4769  0000B4                     l7528:
  4770  0000B4  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4771  0000B8  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4772  0000BC  0E00               	movlw	low (__mediumconst shr (0+16))
  4773  0000BE  6EF8               	movwf	tblptru,c
  4774  0000C0  0E0F               	movlw	(high __ramtop+-1)
  4775  0000C2  64F7               	cpfsgt	tblptrh,c
  4776  0000C4  D003               	bra	u11587
  4777  0000C6  0008               	tblrd		*
  4778  0000C8  50F5               	movf	tablat,w,c
  4779  0000CA  D005               	bra	u11580
  4780  0000CC                     u11587:
  4781  0000CC  CFF6 FFE9          	movff	tblptrl,fsr0l
  4782  0000D0  CFF7 FFEA          	movff	tblptrh,fsr0h
  4783  0000D4  50EF               	movf	indf0,w,c
  4784  0000D6                     u11580:
  4785                           
  4786                           ; Switch size 1, requested type "space"
  4787                           ; Number of cases is 1, Range of values is 48 to 48
  4788                           ; switch strategies available:
  4789                           ; Name         Instructions Cycles
  4790                           ; simple_byte            4     3 (average)
  4791                           ;	Chosen strategy is simple_byte
  4792  0000D6  0A30               	xorlw	48	; case 48
  4793  0000D8  B4D8               	btfsc	status,2,c
  4794  0000DA  D7E7               	goto	l7524
  4795                           
  4796                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4797                           
  4798                           ;doprnt.c: 586: }
  4799                           
  4800                           ;doprnt.c: 585: break;
  4801  0000DC  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4802  0000E0  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4803  0000E4  0E00               	movlw	low (__mediumconst shr (0+16))
  4804  0000E6  6EF8               	movwf	tblptru,c
  4805  0000E8  0E0F               	movlw	(high __ramtop+-1)
  4806  0000EA  64F7               	cpfsgt	tblptrh,c
  4807  0000EC  D003               	bra	u11597
  4808  0000EE  0008               	tblrd		*
  4809  0000F0  50F5               	movf	tablat,w,c
  4810  0000F2  D005               	bra	u11590
  4811  0000F4                     u11597:
  4812  0000F4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4813  0000F8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4814  0000FC  50EF               	movf	indf0,w,c
  4815  0000FE                     u11590:
  4816  0000FE  ECCB  F01B         	call	_isdigit
  4817  000102  A0D8               	btfss	status,0,c
  4818  000104  D18A               	goto	l7594
  4819                           
  4820                           ;doprnt.c: 598: width = 0;
  4821  000106  0E00               	movlw	0
  4822  000108  0100               	movlb	0	; () banked
  4823  00010A  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  4824  00010C  0E00               	movlw	0
  4825  00010E  6F9F               	movwf	__doprnt@width& (0+255),b
  4826  000110                     l7534:
  4827                           
  4828                           ;doprnt.c: 600: width *= 10;
  4829  000110  C09F  F080         	movff	__doprnt@width,___wmul@multiplier
  4830  000114  C0A0  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
  4831  000118  0E00               	movlw	0
  4832  00011A  0100               	movlb	0	; () banked
  4833  00011C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4834  00011E  0E0A               	movlw	10
  4835  000120  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4836  000122  EC4F  F01B         	call	___wmul	;wreg free
  4837  000126  C080  F09F         	movff	?___wmul,__doprnt@width
  4838  00012A  C081  F0A0         	movff	?___wmul+1,__doprnt@width+1
  4839                           
  4840                           ;doprnt.c: 601: width += *f++ - '0';
  4841  00012E  0ED0               	movlw	208
  4842  000130  0100               	movlb	0	; () banked
  4843  000132  6F92               	movwf	??__doprnt& (0+255),b
  4844  000134  0EFF               	movlw	255
  4845  000136  0100               	movlb	0	; () banked
  4846  000138  6F93               	movwf	(??__doprnt+1)& (0+255),b
  4847  00013A  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4848  00013E  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4849  000142  0E00               	movlw	low (__mediumconst shr (0+16))
  4850  000144  6EF8               	movwf	tblptru,c
  4851  000146  0E0F               	movlw	(high __ramtop+-1)
  4852  000148  64F7               	cpfsgt	tblptrh,c
  4853  00014A  D003               	bra	u11617
  4854  00014C  0008               	tblrd		*
  4855  00014E  50F5               	movf	tablat,w,c
  4856  000150  D005               	bra	u11610
  4857  000152                     u11617:
  4858  000152  CFF6 FFE9          	movff	tblptrl,fsr0l
  4859  000156  CFF7 FFEA          	movff	tblptrh,fsr0h
  4860  00015A  50EF               	movf	indf0,w,c
  4861  00015C                     u11610:
  4862  00015C  0100               	movlb	0	; () banked
  4863  00015E  6F94               	movwf	(??__doprnt+2)& (0+255),b
  4864  000160  6B95               	clrf	(??__doprnt+3)& (0+255),b
  4865  000162  0100               	movlb	0	; () banked
  4866  000164  5192               	movf	??__doprnt& (0+255),w,b
  4867  000166  0100               	movlb	0	; () banked
  4868  000168  2794               	addwf	(??__doprnt+2)& (0+255),f,b
  4869  00016A  0100               	movlb	0	; () banked
  4870  00016C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4871  00016E  0100               	movlb	0	; () banked
  4872  000170  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
  4873  000172  0100               	movlb	0	; () banked
  4874  000174  5194               	movf	(??__doprnt+2)& (0+255),w,b
  4875  000176  0100               	movlb	0	; () banked
  4876  000178  279F               	addwf	__doprnt@width& (0+255),f,b
  4877  00017A  0100               	movlb	0	; () banked
  4878  00017C  5195               	movf	(??__doprnt+3)& (0+255),w,b
  4879  00017E  0100               	movlb	0	; () banked
  4880  000180  23A0               	addwfc	(__doprnt@width+1)& (0+255),f,b
  4881                           
  4882                           ; BSR set to: 0
  4883  000182  0100               	movlb	0	; () banked
  4884  000184  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  4885  000186  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  4886                           
  4887                           ; BSR set to: 0
  4888                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4889  000188  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4890  00018C  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4891  000190  0E00               	movlw	low (__mediumconst shr (0+16))
  4892  000192  6EF8               	movwf	tblptru,c
  4893  000194  0E0F               	movlw	(high __ramtop+-1)
  4894  000196  64F7               	cpfsgt	tblptrh,c
  4895  000198  D003               	bra	u11627
  4896  00019A  0008               	tblrd		*
  4897  00019C  50F5               	movf	tablat,w,c
  4898  00019E  D005               	bra	u11620
  4899  0001A0                     u11627:
  4900  0001A0  CFF6 FFE9          	movff	tblptrl,fsr0l
  4901  0001A4  CFF7 FFEA          	movff	tblptrh,fsr0h
  4902  0001A8  50EF               	movf	indf0,w,c
  4903  0001AA                     u11620:
  4904  0001AA  ECCB  F01B         	call	_isdigit
  4905  0001AE  A0D8               	btfss	status,0,c
  4906  0001B0  D134               	goto	l7594
  4907  0001B2  D7AE               	goto	l7534
  4908  0001B4                     l7542:
  4909                           
  4910                           ;doprnt.c: 721: flag |= 0x80;
  4911  0001B4  0100               	movlb	0	; () banked
  4912  0001B6  8F9E               	bsf	__doprnt@flag& (0+255),7,b
  4913                           
  4914                           ;doprnt.c: 723: break;
  4915  0001B8  D163               	goto	l503
  4916  0001BA                     l7544:
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4920  0001BA  C090  FFD9         	movff	__doprnt@ap,fsr2l
  4921  0001BE  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  4922  0001C2  CFDF F092          	movff	indf2,??__doprnt
  4923  0001C6  0E02               	movlw	2
  4924  0001C8  26DE               	addwf	postinc2,f,c
  4925  0001CA  CFDF F093          	movff	indf2,??__doprnt+1
  4926  0001CE  0E00               	movlw	0
  4927  0001D0  22DD               	addwfc	postdec2,f,c
  4928  0001D2  C092  FFD9         	movff	??__doprnt,fsr2l
  4929  0001D6  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4930  0001DA  CFDE F09A          	movff	postinc2,__doprnt@cp
  4931  0001DE  CFDD F09B          	movff	postdec2,__doprnt@cp+1
  4932                           
  4933                           ; BSR set to: 0
  4934                           ;doprnt.c: 740: if(!cp)
  4935  0001E2  0100               	movlb	0	; () banked
  4936  0001E4  519A               	movf	__doprnt@cp& (0+255),w,b
  4937  0001E6  0100               	movlb	0	; () banked
  4938  0001E8  119B               	iorwf	(__doprnt@cp+1)& (0+255),w,b
  4939  0001EA  A4D8               	btfss	status,2,c
  4940  0001EC  D006               	goto	l7550
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;doprnt.c: 741: cp = "(null)";
  4944  0001EE  0EED               	movlw	low STR_18
  4945  0001F0  0100               	movlb	0	; () banked
  4946  0001F2  6F9A               	movwf	__doprnt@cp& (0+255),b
  4947  0001F4  0EFF               	movlw	high STR_18
  4948  0001F6  0100               	movlb	0	; () banked
  4949  0001F8  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  4950  0001FA                     l7550:
  4951                           
  4952                           ; BSR set to: 0
  4953                           ;doprnt.c: 745: len = 0;
  4954  0001FA  0E00               	movlw	0
  4955  0001FC  0100               	movlb	0	; () banked
  4956  0001FE  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  4957  000200  0E00               	movlw	0
  4958  000202  6F98               	movwf	__doprnt@len& (0+255),b
  4959                           
  4960                           ;doprnt.c: 746: while(cp[len])
  4961  000204  D003               	goto	l7554
  4962  000206                     l7552:
  4963                           
  4964                           ;doprnt.c: 747: len++;
  4965  000206  0100               	movlb	0	; () banked
  4966  000208  4B98               	infsnz	__doprnt@len& (0+255),f,b
  4967  00020A  2B99               	incf	(__doprnt@len+1)& (0+255),f,b
  4968  00020C                     l7554:
  4969                           
  4970                           ; BSR set to: 0
  4971  00020C  0100               	movlb	0	; () banked
  4972  00020E  5198               	movf	__doprnt@len& (0+255),w,b
  4973  000210  0100               	movlb	0	; () banked
  4974  000212  259A               	addwf	__doprnt@cp& (0+255),w,b
  4975  000214  0100               	movlb	0	; () banked
  4976  000216  6F92               	movwf	??__doprnt& (0+255),b
  4977  000218  0100               	movlb	0	; () banked
  4978  00021A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  4979  00021C  0100               	movlb	0	; () banked
  4980  00021E  219B               	addwfc	(__doprnt@cp+1)& (0+255),w,b
  4981  000220  0100               	movlb	0	; () banked
  4982  000222  6F93               	movwf	(??__doprnt+1)& (0+255),b
  4983  000224  C092  FFF6         	movff	??__doprnt,tblptrl
  4984  000228  C093  FFF7         	movff	??__doprnt+1,tblptrh
  4985  00022C  0E00               	movlw	low (__mediumconst shr (0+16))
  4986  00022E  6EF8               	movwf	tblptru,c
  4987  000230  0E0F               	movlw	(high __ramtop+-1)
  4988  000232  64F7               	cpfsgt	tblptrh,c
  4989  000234  D003               	bra	u11657
  4990  000236  0008               	tblrd		*
  4991  000238  50F5               	movf	tablat,w,c
  4992  00023A  D005               	bra	u11650
  4993  00023C                     u11657:
  4994  00023C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4995  000240  CFF7 FFEA          	movff	tblptrh,fsr0h
  4996  000244  50EF               	movf	indf0,w,c
  4997  000246                     u11650:
  4998  000246  0900               	iorlw	0
  4999  000248  A4D8               	btfss	status,2,c
  5000  00024A  D7DD               	goto	l7552
  5001  00024C                     l7556:
  5002                           
  5003                           ;doprnt.c: 757: if(width > len)
  5004  00024C  0100               	movlb	0	; () banked
  5005  00024E  519F               	movf	__doprnt@width& (0+255),w,b
  5006  000250  0100               	movlb	0	; () banked
  5007  000252  5D98               	subwf	__doprnt@len& (0+255),w,b
  5008  000254  0100               	movlb	0	; () banked
  5009  000256  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  5010  000258  0100               	movlb	0	; () banked
  5011  00025A  5999               	subwfb	(__doprnt@len+1)& (0+255),w,b
  5012  00025C  B0D8               	btfsc	status,0,c
  5013  00025E  D009               	goto	l7560
  5014                           
  5015                           ; BSR set to: 0
  5016                           ;doprnt.c: 758: width -= len;
  5017  000260  0100               	movlb	0	; () banked
  5018  000262  5198               	movf	__doprnt@len& (0+255),w,b
  5019  000264  0100               	movlb	0	; () banked
  5020  000266  5F9F               	subwf	__doprnt@width& (0+255),f,b
  5021  000268  0100               	movlb	0	; () banked
  5022  00026A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  5023  00026C  0100               	movlb	0	; () banked
  5024  00026E  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5025  000270  D03E               	goto	l7570
  5026  000272                     l7560:
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;doprnt.c: 759: else
  5030                           ;doprnt.c: 760: width = 0;
  5031  000272  0E00               	movlw	0
  5032  000274  0100               	movlb	0	; () banked
  5033  000276  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5034  000278  0E00               	movlw	0
  5035  00027A  6F9F               	movwf	__doprnt@width& (0+255),b
  5036                           
  5037                           ; BSR set to: 0
  5038                           ;doprnt.c: 764: while(width--)
  5039  00027C  D038               	goto	l7570
  5040  00027E                     l7562:
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5044  00027E  0100               	movlb	0	; () banked
  5045  000280  EE20 F002          	lfsr	2,2
  5046  000284  518C               	movf	__doprnt@pb& (0+255),w,b
  5047  000286  26D9               	addwf	fsr2l,f,c
  5048  000288  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5049  00028A  22DA               	addwfc	fsr2h,f,c
  5050  00028C  50DE               	movf	postinc2,w,c
  5051  00028E  10DE               	iorwf	postinc2,w,c
  5052  000290  B4D8               	btfsc	status,2,c
  5053  000292  D018               	goto	l7566
  5054                           
  5055                           ; BSR set to: 0
  5056  000294  0100               	movlb	0	; () banked
  5057  000296  EE20 F002          	lfsr	2,2
  5058  00029A  518C               	movf	__doprnt@pb& (0+255),w,b
  5059  00029C  26D9               	addwf	fsr2l,f,c
  5060  00029E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5061  0002A0  22DA               	addwfc	fsr2h,f,c
  5062  0002A2  CFDE F092          	movff	postinc2,??__doprnt
  5063  0002A6  CFDD F093          	movff	postdec2,??__doprnt+1
  5064  0002AA  D801               	call	u11698
  5065  0002AC  D020               	goto	l7570
  5066  0002AE                     u11698:
  5067  0002AE  0005               	push	
  5068  0002B0  6EFA               	movwf	pclath,c
  5069  0002B2  0100               	movlb	0	; () banked
  5070  0002B4  5192               	movf	??__doprnt& (0+255),w,b
  5071  0002B6  6EFD               	movwf	tosl,c
  5072  0002B8  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5073  0002BA  6EFE               	movwf	tosh,c
  5074  0002BC  6AFF               	clrf	tosu,c
  5075  0002BE  50FA               	movf	pclath,w,c
  5076  0002C0  0E20               	movlw	32
  5077  0002C2  0012               	return		;indir
  5078  0002C4                     l7566:
  5079  0002C4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5080  0002C8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5081  0002CC  CFDE F092          	movff	postinc2,??__doprnt
  5082  0002D0  CFDD F093          	movff	postdec2,??__doprnt+1
  5083  0002D4  C092  FFD9         	movff	??__doprnt,fsr2l
  5084  0002D8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5085  0002DC  0E20               	movlw	32
  5086  0002DE  6EDF               	movwf	indf2,c
  5087  0002E0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5088  0002E4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5089  0002E8  2ADE               	incf	postinc2,f,c
  5090  0002EA  0E00               	movlw	0
  5091  0002EC  22DD               	addwfc	postdec2,f,c
  5092  0002EE                     l7570:
  5093  0002EE  0100               	movlb	0	; () banked
  5094  0002F0  079F               	decf	__doprnt@width& (0+255),f,b
  5095  0002F2  A0D8               	btfss	status,0,c
  5096  0002F4  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5097  0002F6  0100               	movlb	0	; () banked
  5098  0002F8  299F               	incf	__doprnt@width& (0+255),w,b
  5099  0002FA  E1C1               	bnz	l7562
  5100  0002FC  0100               	movlb	0	; () banked
  5101  0002FE  29A0               	incf	(__doprnt@width+1)& (0+255),w,b
  5102  000300  B4D8               	btfsc	status,2,c
  5103  000302  D060               	goto	l7584
  5104  000304  D7BC               	goto	l7562
  5105  000306                     l7572:
  5106                           
  5107                           ; BSR set to: 0
  5108                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  5109  000306  0100               	movlb	0	; () banked
  5110  000308  EE20 F002          	lfsr	2,2
  5111  00030C  518C               	movf	__doprnt@pb& (0+255),w,b
  5112  00030E  26D9               	addwf	fsr2l,f,c
  5113  000310  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5114  000312  22DA               	addwfc	fsr2h,f,c
  5115  000314  50DE               	movf	postinc2,w,c
  5116  000316  10DE               	iorwf	postinc2,w,c
  5117  000318  B4D8               	btfsc	status,2,c
  5118  00031A  D02C               	goto	l7578
  5119                           
  5120                           ; BSR set to: 0
  5121  00031C  0100               	movlb	0	; () banked
  5122  00031E  EE20 F002          	lfsr	2,2
  5123  000322  518C               	movf	__doprnt@pb& (0+255),w,b
  5124  000324  26D9               	addwf	fsr2l,f,c
  5125  000326  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5126  000328  22DA               	addwfc	fsr2h,f,c
  5127  00032A  CFDE F092          	movff	postinc2,??__doprnt
  5128  00032E  CFDD F093          	movff	postdec2,??__doprnt+1
  5129  000332  D801               	call	u11728
  5130  000334  D01B               	goto	l7576
  5131  000336                     u11728:
  5132  000336  0005               	push	
  5133  000338  6EFA               	movwf	pclath,c
  5134  00033A  0100               	movlb	0	; () banked
  5135  00033C  5192               	movf	??__doprnt& (0+255),w,b
  5136  00033E  6EFD               	movwf	tosl,c
  5137  000340  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5138  000342  6EFE               	movwf	tosh,c
  5139  000344  6AFF               	clrf	tosu,c
  5140  000346  50FA               	movf	pclath,w,c
  5141  000348  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  5142  00034C  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  5143  000350  0E00               	movlw	low (__mediumconst shr (0+16))
  5144  000352  6EF8               	movwf	tblptru,c
  5145  000354  0E0F               	movlw	(high __ramtop+-1)
  5146  000356  64F7               	cpfsgt	tblptrh,c
  5147  000358  D003               	bra	u11737
  5148  00035A  0008               	tblrd		*
  5149  00035C  50F5               	movf	tablat,w,c
  5150  00035E  D005               	bra	u11730
  5151  000360                     u11737:
  5152  000360  CFF6 FFE9          	movff	tblptrl,fsr0l
  5153  000364  CFF7 FFEA          	movff	tblptrh,fsr0h
  5154  000368  50EF               	movf	indf0,w,c
  5155  00036A                     u11730:
  5156  00036A  0012               	return		;indir
  5157  00036C                     l7576:
  5158  00036C  0100               	movlb	0	; () banked
  5159  00036E  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  5160  000370  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  5161  000372  D028               	goto	l7584
  5162  000374                     l7578:
  5163                           
  5164                           ; BSR set to: 0
  5165  000374  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  5166  000378  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  5167  00037C  0E00               	movlw	low (__mediumconst shr (0+16))
  5168  00037E  6EF8               	movwf	tblptru,c
  5169  000380  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5170  000384  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5171  000388  CFDE F092          	movff	postinc2,??__doprnt
  5172  00038C  CFDD F093          	movff	postdec2,??__doprnt+1
  5173  000390  C092  FFD9         	movff	??__doprnt,fsr2l
  5174  000394  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5175  000398  0E0F               	movlw	(high __ramtop+-1)
  5176  00039A  64F7               	cpfsgt	tblptrh,c
  5177  00039C  D003               	bra	u11747
  5178  00039E  0008               	tblrd		*
  5179  0003A0  50F5               	movf	tablat,w,c
  5180  0003A2  D005               	bra	u11740
  5181  0003A4                     u11747:
  5182  0003A4  CFF6 FFE9          	movff	tblptrl,fsr0l
  5183  0003A8  CFF7 FFEA          	movff	tblptrh,fsr0h
  5184  0003AC  50EF               	movf	indf0,w,c
  5185  0003AE                     u11740:
  5186  0003AE  6EDF               	movwf	indf2,c
  5187  0003B0  0100               	movlb	0	; () banked
  5188  0003B2  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  5189  0003B4  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  5190                           
  5191                           ; BSR set to: 0
  5192  0003B6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5193  0003BA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5194  0003BE  2ADE               	incf	postinc2,f,c
  5195  0003C0  0E00               	movlw	0
  5196  0003C2  22DD               	addwfc	postdec2,f,c
  5197  0003C4                     l7584:
  5198                           
  5199                           ; BSR set to: 0
  5200  0003C4  0100               	movlb	0	; () banked
  5201  0003C6  0798               	decf	__doprnt@len& (0+255),f,b
  5202  0003C8  A0D8               	btfss	status,0,c
  5203  0003CA  0799               	decf	(__doprnt@len+1)& (0+255),f,b
  5204  0003CC  0100               	movlb	0	; () banked
  5205  0003CE  2998               	incf	__doprnt@len& (0+255),w,b
  5206  0003D0  E19A               	bnz	l7572
  5207  0003D2  0100               	movlb	0	; () banked
  5208  0003D4  2999               	incf	(__doprnt@len+1)& (0+255),w,b
  5209  0003D6  B4D8               	btfsc	status,2,c
  5210  0003D8  D2B5               	goto	l7718
  5211  0003DA  D795               	goto	l7572
  5212  0003DC                     l7586:
  5213                           
  5214                           ; BSR set to: 0
  5215                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5216  0003DC  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5217  0003E0  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5218  0003E4  CFDF F092          	movff	indf2,??__doprnt
  5219  0003E8  0E02               	movlw	2
  5220  0003EA  26DE               	addwf	postinc2,f,c
  5221  0003EC  CFDF F093          	movff	indf2,??__doprnt+1
  5222  0003F0  0E00               	movlw	0
  5223  0003F2  22DD               	addwfc	postdec2,f,c
  5224  0003F4  C092  FFD9         	movff	??__doprnt,fsr2l
  5225  0003F8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5226  0003FC  50DF               	movf	indf2,w,c
  5227  0003FE  0100               	movlb	0	; () banked
  5228  000400  6FA1               	movwf	__doprnt@c& (0+255),b
  5229  000402                     l7588:
  5230                           
  5231                           ; BSR set to: 0
  5232                           ;doprnt.c: 805: cp = (char *)&c;
  5233  000402  0EA1               	movlw	low __doprnt@c
  5234  000404  0100               	movlb	0	; () banked
  5235  000406  6F9A               	movwf	__doprnt@cp& (0+255),b
  5236  000408  0E00               	movlw	high __doprnt@c
  5237  00040A  0100               	movlb	0	; () banked
  5238  00040C  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  5239                           
  5240                           ; BSR set to: 0
  5241                           ;doprnt.c: 806: len = 1;
  5242  00040E  0E00               	movlw	0
  5243  000410  0100               	movlb	0	; () banked
  5244  000412  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  5245  000414  0E01               	movlw	1
  5246  000416  6F98               	movwf	__doprnt@len& (0+255),b
  5247                           
  5248                           ;doprnt.c: 807: goto dostring;
  5249  000418  D719               	goto	l7556
  5250  00041A                     l7594:
  5251  00041A  0100               	movlb	0	; () banked
  5252  00041C  518E               	movf	__doprnt@f& (0+255),w,b
  5253  00041E  0100               	movlb	0	; () banked
  5254  000420  6F92               	movwf	??__doprnt& (0+255),b
  5255  000422  0100               	movlb	0	; () banked
  5256  000424  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  5257  000426  0100               	movlb	0	; () banked
  5258  000428  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5259  00042A  0100               	movlb	0	; () banked
  5260  00042C  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5261  00042E  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5262  000430  C092  FFF6         	movff	??__doprnt,tblptrl
  5263  000434  C093  FFF7         	movff	??__doprnt+1,tblptrh
  5264  000438  0E00               	movlw	low (__mediumconst shr (0+16))
  5265  00043A  6EF8               	movwf	tblptru,c
  5266  00043C  0E0F               	movlw	(high __ramtop+-1)
  5267  00043E  64F7               	cpfsgt	tblptrh,c
  5268  000440  D003               	bra	u11767
  5269  000442  0008               	tblrd		*
  5270  000444  50F5               	movf	tablat,w,c
  5271  000446  D005               	bra	u11760
  5272  000448                     u11767:
  5273  000448  CFF6 FFE9          	movff	tblptrl,fsr0l
  5274  00044C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5275  000450  50EF               	movf	indf0,w,c
  5276  000452                     u11760:
  5277  000452  0100               	movlb	0	; () banked
  5278  000454  6FA1               	movwf	__doprnt@c& (0+255),b
  5279  000456  0100               	movlb	0	; () banked
  5280  000458  51A1               	movf	__doprnt@c& (0+255),w,b
  5281                           
  5282                           ; Switch size 1, requested type "space"
  5283                           ; Number of cases is 6, Range of values is 0 to 120
  5284                           ; switch strategies available:
  5285                           ; Name         Instructions Cycles
  5286                           ; simple_byte           19    10 (average)
  5287                           ;	Chosen strategy is simple_byte
  5288  00045A  0A00               	xorlw	0	; case 0
  5289  00045C  B4D8               	btfsc	status,2,c
  5290  00045E  D295               	goto	l7720
  5291  000460  0A63               	xorlw	99	; case 99
  5292  000462  B4D8               	btfsc	status,2,c
  5293  000464  D7BB               	goto	l7586
  5294  000466  0A07               	xorlw	7	; case 100
  5295  000468  B4D8               	btfsc	status,2,c
  5296  00046A  D00A               	goto	l503
  5297  00046C  0A0D               	xorlw	13	; case 105
  5298  00046E  B4D8               	btfsc	status,2,c
  5299  000470  D007               	goto	l503
  5300  000472  0A1A               	xorlw	26	; case 115
  5301  000474  B4D8               	btfsc	status,2,c
  5302  000476  D6A1               	goto	l7544
  5303  000478  0A0B               	xorlw	11	; case 120
  5304  00047A  B4D8               	btfsc	status,2,c
  5305  00047C  D69B               	goto	l7542
  5306  00047E  D7C1               	goto	l7588
  5307  000480                     l503:
  5308                           
  5309                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5310  000480  0100               	movlb	0	; () banked
  5311  000482  BF9E               	btfsc	__doprnt@flag& (0+255),7,b
  5312  000484  D020               	goto	l7604
  5313                           
  5314                           ; BSR set to: 0
  5315                           ;doprnt.c: 1253: {
  5316                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5317  000486  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5318  00048A  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5319  00048E  CFDF F092          	movff	indf2,??__doprnt
  5320  000492  0E02               	movlw	2
  5321  000494  26DE               	addwf	postinc2,f,c
  5322  000496  CFDF F093          	movff	indf2,??__doprnt+1
  5323  00049A  0E00               	movlw	0
  5324  00049C  22DD               	addwfc	postdec2,f,c
  5325  00049E  C092  FFD9         	movff	??__doprnt,fsr2l
  5326  0004A2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5327  0004A6  CFDE F09C          	movff	postinc2,__doprnt@val
  5328  0004AA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  5329                           
  5330                           ; BSR set to: 0
  5331                           ;doprnt.c: 1261: if((int)val < 0) {
  5332  0004AE  0100               	movlb	0	; () banked
  5333  0004B0  AF9D               	btfss	(__doprnt@val+1)& (0+255),7,b
  5334  0004B2  D060               	goto	l7636
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;doprnt.c: 1262: flag |= 0x03;
  5338  0004B4  0E03               	movlw	3
  5339  0004B6  0100               	movlb	0	; () banked
  5340  0004B8  139E               	iorwf	__doprnt@flag& (0+255),f,b
  5341                           
  5342                           ; BSR set to: 0
  5343                           ;doprnt.c: 1263: val = -val;
  5344  0004BA  0100               	movlb	0	; () banked
  5345  0004BC  6D9C               	negf	__doprnt@val& (0+255),b
  5346  0004BE  1F9D               	comf	(__doprnt@val+1)& (0+255),f,b
  5347  0004C0  B0D8               	btfsc	status,0,c
  5348  0004C2  2B9D               	incf	(__doprnt@val+1)& (0+255),f,b
  5349                           
  5350                           ; BSR set to: 0
  5351                           ;doprnt.c: 1264: }
  5352                           ;doprnt.c: 1266: }
  5353  0004C4  D057               	goto	l7636
  5354  0004C6                     l7604:
  5355                           
  5356                           ; BSR set to: 0
  5357                           ;doprnt.c: 1268: else
  5358                           ;doprnt.c: 1273: {
  5359                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5360  0004C6  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5361  0004CA  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5362  0004CE  CFDF F092          	movff	indf2,??__doprnt
  5363  0004D2  0E02               	movlw	2
  5364  0004D4  26DE               	addwf	postinc2,f,c
  5365  0004D6  CFDF F093          	movff	indf2,??__doprnt+1
  5366  0004DA  0E00               	movlw	0
  5367  0004DC  22DD               	addwfc	postdec2,f,c
  5368  0004DE  C092  FFD9         	movff	??__doprnt,fsr2l
  5369  0004E2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5370  0004E6  CFDE F09C          	movff	postinc2,__doprnt@val
  5371  0004EA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;doprnt.c: 1287: }
  5375                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5376  0004EE  D042               	goto	l7636
  5377  0004F0                     l7606:
  5378                           
  5379                           ; BSR set to: 0
  5380                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5381  0004F0  0E01               	movlw	1
  5382  0004F2  0100               	movlb	0	; () banked
  5383  0004F4  6FA1               	movwf	__doprnt@c& (0+255),b
  5384  0004F6                     l7608:
  5385                           
  5386                           ; BSR set to: 0
  5387  0004F6  0E05               	movlw	5
  5388  0004F8  0100               	movlb	0	; () banked
  5389  0004FA  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5390  0004FC  B4D8               	btfsc	status,2,c
  5391  0004FE  D043               	goto	l7638
  5392                           
  5393                           ; BSR set to: 0
  5394                           ;doprnt.c: 1306: if(val < dpowers[c])
  5395                           
  5396                           ; BSR set to: 0
  5397                           
  5398                           ; BSR set to: 0
  5399  000500  0100               	movlb	0	; () banked
  5400  000502  51A1               	movf	__doprnt@c& (0+255),w,b
  5401  000504  0D02               	mullw	2
  5402  000506  0EF6               	movlw	low _dpowers
  5403  000508  24F3               	addwf	prodl,w,c
  5404  00050A  6EF6               	movwf	tblptrl,c
  5405  00050C  0EFE               	movlw	high _dpowers
  5406  00050E  20F4               	addwfc	prodh,w,c
  5407  000510  6EF7               	movwf	tblptrh,c
  5408  000512                     	if	1	;There are 3 active tblptr bytes
  5409  000512  6AF8               	clrf	tblptru,c
  5410  000514  0E00               	movlw	low (__mediumconst shr (0+16))
  5411  000516  22F8               	addwfc	tblptru,f,c
  5412  000518                     	endif
  5413  000518  0009               	tblrd		*+
  5414  00051A  50F5               	movf	tablat,w,c
  5415  00051C  0100               	movlb	0	; () banked
  5416  00051E  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5417  000520  0009               	tblrd		*+
  5418  000522  50F5               	movf	tablat,w,c
  5419  000524  0100               	movlb	0	; () banked
  5420  000526  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5421  000528  A0D8               	btfss	status,0,c
  5422  00052A  D02D               	goto	l7638
  5423                           
  5424                           ; BSR set to: 0
  5425                           
  5426                           ; BSR set to: 0
  5427                           
  5428                           ; BSR set to: 0
  5429                           ;doprnt.c: 1307: break;
  5430  00052C  0100               	movlb	0	; () banked
  5431  00052E  2BA1               	incf	__doprnt@c& (0+255),f,b
  5432  000530  D7E2               	goto	l7608
  5433  000532                     l7620:
  5434                           
  5435                           ; BSR set to: 0
  5436                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5437  000532  0E01               	movlw	1
  5438  000534  0100               	movlb	0	; () banked
  5439  000536  6FA1               	movwf	__doprnt@c& (0+255),b
  5440  000538                     l7622:
  5441                           
  5442                           ; BSR set to: 0
  5443  000538  0E04               	movlw	4
  5444  00053A  0100               	movlb	0	; () banked
  5445  00053C  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5446  00053E  B4D8               	btfsc	status,2,c
  5447  000540  D022               	goto	l7638
  5448                           
  5449                           ; BSR set to: 0
  5450                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5451                           
  5452                           ; BSR set to: 0
  5453                           
  5454                           ; BSR set to: 0
  5455  000542  0100               	movlb	0	; () banked
  5456  000544  51A1               	movf	__doprnt@c& (0+255),w,b
  5457  000546  0D02               	mullw	2
  5458  000548  0E00               	movlw	low _hexpowers
  5459  00054A  24F3               	addwf	prodl,w,c
  5460  00054C  6EF6               	movwf	tblptrl,c
  5461  00054E  0EFF               	movlw	high _hexpowers
  5462  000550  20F4               	addwfc	prodh,w,c
  5463  000552  6EF7               	movwf	tblptrh,c
  5464  000554                     	if	1	;There are 3 active tblptr bytes
  5465  000554  6AF8               	clrf	tblptru,c
  5466  000556  0E00               	movlw	low (__mediumconst shr (0+16))
  5467  000558  22F8               	addwfc	tblptru,f,c
  5468  00055A                     	endif
  5469  00055A  0009               	tblrd		*+
  5470  00055C  50F5               	movf	tablat,w,c
  5471  00055E  0100               	movlb	0	; () banked
  5472  000560  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5473  000562  0009               	tblrd		*+
  5474  000564  50F5               	movf	tablat,w,c
  5475  000566  0100               	movlb	0	; () banked
  5476  000568  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5477  00056A  A0D8               	btfss	status,0,c
  5478  00056C  D00C               	goto	l7638
  5479                           
  5480                           ; BSR set to: 0
  5481                           
  5482                           ; BSR set to: 0
  5483                           
  5484                           ; BSR set to: 0
  5485                           ;doprnt.c: 1318: break;
  5486  00056E  0100               	movlb	0	; () banked
  5487  000570  2BA1               	incf	__doprnt@c& (0+255),f,b
  5488  000572  D7E2               	goto	l7622
  5489  000574                     l7636:
  5490                           
  5491                           ; BSR set to: 0
  5492  000574  0100               	movlb	0	; () banked
  5493  000576  519E               	movf	__doprnt@flag& (0+255),w,b
  5494  000578  0B80               	andlw	128
  5495                           
  5496                           ; Switch size 1, requested type "space"
  5497                           ; Number of cases is 2, Range of values is 0 to 128
  5498                           ; switch strategies available:
  5499                           ; Name         Instructions Cycles
  5500                           ; simple_byte            7     4 (average)
  5501                           ;	Chosen strategy is simple_byte
  5502  00057A  0A00               	xorlw	0	; case 0
  5503  00057C  B4D8               	btfsc	status,2,c
  5504  00057E  D7B8               	goto	l7606
  5505  000580  0A80               	xorlw	128	; case 128
  5506  000582  B4D8               	btfsc	status,2,c
  5507  000584  D7D6               	goto	l7620
  5508  000586                     l7638:
  5509                           
  5510                           ; BSR set to: 0
  5511                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5512  000586  0100               	movlb	0	; () banked
  5513  000588  519F               	movf	__doprnt@width& (0+255),w,b
  5514  00058A  0100               	movlb	0	; () banked
  5515  00058C  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5516  00058E  B4D8               	btfsc	status,2,c
  5517  000590  D00B               	goto	l7644
  5518                           
  5519                           ; BSR set to: 0
  5520  000592  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5521  000596  0E03               	movlw	3
  5522  000598  0100               	movlb	0	; () banked
  5523  00059A  1792               	andwf	??__doprnt& (0+255),f,b
  5524  00059C  B4D8               	btfsc	status,2,c
  5525  00059E  D004               	goto	l7644
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;doprnt.c: 1346: width--;
  5529  0005A0  0100               	movlb	0	; () banked
  5530  0005A2  079F               	decf	__doprnt@width& (0+255),f,b
  5531  0005A4  A0D8               	btfss	status,0,c
  5532  0005A6  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5533  0005A8                     l7644:
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;doprnt.c: 1381: if(width > c)
  5537  0005A8  0E80               	movlw	128
  5538  0005AA  0100               	movlb	0	; () banked
  5539  0005AC  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  5540  0005AE  0E7F               	movlw	127
  5541  0005B0  0100               	movlb	0	; () banked
  5542  0005B2  6F92               	movwf	??__doprnt& (0+255),b
  5543  0005B4  0100               	movlb	0	; () banked
  5544  0005B6  519F               	movf	__doprnt@width& (0+255),w,b
  5545  0005B8  0100               	movlb	0	; () banked
  5546  0005BA  5DA1               	subwf	__doprnt@c& (0+255),w,b
  5547  0005BC  0100               	movlb	0	; () banked
  5548  0005BE  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  5549  0005C0  0A80               	xorlw	128
  5550  0005C2  0100               	movlb	0	; () banked
  5551  0005C4  5992               	subwfb	??__doprnt& (0+255),w,b
  5552  0005C6  B0D8               	btfsc	status,0,c
  5553  0005C8  D00B               	goto	l7648
  5554                           
  5555                           ; BSR set to: 0
  5556                           ;doprnt.c: 1382: width -= c;
  5557  0005CA  0100               	movlb	0	; () banked
  5558  0005CC  51A1               	movf	__doprnt@c& (0+255),w,b
  5559  0005CE  0100               	movlb	0	; () banked
  5560  0005D0  5F9F               	subwf	__doprnt@width& (0+255),f,b
  5561  0005D2  0E00               	movlw	0
  5562  0005D4  0100               	movlb	0	; () banked
  5563  0005D6  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  5564  0005D8  0EFF               	movlw	255
  5565  0005DA  0100               	movlb	0	; () banked
  5566  0005DC  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5567  0005DE  D005               	goto	l7650
  5568  0005E0                     l7648:
  5569                           
  5570                           ; BSR set to: 0
  5571                           ;doprnt.c: 1383: else
  5572                           ;doprnt.c: 1384: width = 0;
  5573  0005E0  0E00               	movlw	0
  5574  0005E2  0100               	movlb	0	; () banked
  5575  0005E4  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5576  0005E6  0E00               	movlw	0
  5577  0005E8  6F9F               	movwf	__doprnt@width& (0+255),b
  5578  0005EA                     l7650:
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;doprnt.c: 1387: if(flag & 0x04) {
  5582  0005EA  0100               	movlb	0	; () banked
  5583  0005EC  A59E               	btfss	__doprnt@flag& (0+255),2,b
  5584  0005EE  D082               	goto	l7674
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;doprnt.c: 1392: if(flag & 0x03)
  5588  0005F0  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5589  0005F4  0E03               	movlw	3
  5590  0005F6  0100               	movlb	0	; () banked
  5591  0005F8  1792               	andwf	??__doprnt& (0+255),f,b
  5592  0005FA  B4D8               	btfsc	status,2,c
  5593  0005FC  D038               	goto	l7662
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5597  0005FE  0100               	movlb	0	; () banked
  5598  000600  EE20 F002          	lfsr	2,2
  5599  000604  518C               	movf	__doprnt@pb& (0+255),w,b
  5600  000606  26D9               	addwf	fsr2l,f,c
  5601  000608  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5602  00060A  22DA               	addwfc	fsr2h,f,c
  5603  00060C  50DE               	movf	postinc2,w,c
  5604  00060E  10DE               	iorwf	postinc2,w,c
  5605  000610  B4D8               	btfsc	status,2,c
  5606  000612  D018               	goto	l7658
  5607                           
  5608                           ; BSR set to: 0
  5609  000614  0100               	movlb	0	; () banked
  5610  000616  EE20 F002          	lfsr	2,2
  5611  00061A  518C               	movf	__doprnt@pb& (0+255),w,b
  5612  00061C  26D9               	addwf	fsr2l,f,c
  5613  00061E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5614  000620  22DA               	addwfc	fsr2h,f,c
  5615  000622  CFDE F092          	movff	postinc2,??__doprnt
  5616  000626  CFDD F093          	movff	postdec2,??__doprnt+1
  5617  00062A  D801               	call	u11918
  5618  00062C  D020               	goto	l7662
  5619  00062E                     u11918:
  5620  00062E  0005               	push	
  5621  000630  6EFA               	movwf	pclath,c
  5622  000632  0100               	movlb	0	; () banked
  5623  000634  5192               	movf	??__doprnt& (0+255),w,b
  5624  000636  6EFD               	movwf	tosl,c
  5625  000638  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5626  00063A  6EFE               	movwf	tosh,c
  5627  00063C  6AFF               	clrf	tosu,c
  5628  00063E  50FA               	movf	pclath,w,c
  5629  000640  0E2D               	movlw	45
  5630  000642  0012               	return		;indir
  5631  000644                     l7658:
  5632  000644  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5633  000648  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5634  00064C  CFDE F092          	movff	postinc2,??__doprnt
  5635  000650  CFDD F093          	movff	postdec2,??__doprnt+1
  5636  000654  C092  FFD9         	movff	??__doprnt,fsr2l
  5637  000658  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5638  00065C  0E2D               	movlw	45
  5639  00065E  6EDF               	movwf	indf2,c
  5640  000660  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5641  000664  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5642  000668  2ADE               	incf	postinc2,f,c
  5643  00066A  0E00               	movlw	0
  5644  00066C  22DD               	addwfc	postdec2,f,c
  5645  00066E                     l7662:
  5646                           
  5647                           ;doprnt.c: 1415: if(width)
  5648  00066E  0100               	movlb	0	; () banked
  5649  000670  519F               	movf	__doprnt@width& (0+255),w,b
  5650  000672  0100               	movlb	0	; () banked
  5651  000674  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5652  000676  B4D8               	btfsc	status,2,c
  5653  000678  D0C4               	goto	l7696
  5654                           
  5655                           ; BSR set to: 0
  5656                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  5657                           
  5658                           ; BSR set to: 0
  5659                           
  5660                           ;doprnt.c: 1416: do
  5661  00067A  0100               	movlb	0	; () banked
  5662  00067C  EE20 F002          	lfsr	2,2
  5663  000680  518C               	movf	__doprnt@pb& (0+255),w,b
  5664  000682  26D9               	addwf	fsr2l,f,c
  5665  000684  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5666  000686  22DA               	addwfc	fsr2h,f,c
  5667  000688  50DE               	movf	postinc2,w,c
  5668  00068A  10DE               	iorwf	postinc2,w,c
  5669  00068C  B4D8               	btfsc	status,2,c
  5670  00068E  D018               	goto	l7668
  5671                           
  5672                           ; BSR set to: 0
  5673  000690  0100               	movlb	0	; () banked
  5674  000692  EE20 F002          	lfsr	2,2
  5675  000696  518C               	movf	__doprnt@pb& (0+255),w,b
  5676  000698  26D9               	addwf	fsr2l,f,c
  5677  00069A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5678  00069C  22DA               	addwfc	fsr2h,f,c
  5679  00069E  CFDE F092          	movff	postinc2,??__doprnt
  5680  0006A2  CFDD F093          	movff	postdec2,??__doprnt+1
  5681  0006A6  D801               	call	u11948
  5682  0006A8  D020               	goto	l7672
  5683  0006AA                     u11948:
  5684  0006AA  0005               	push	
  5685  0006AC  6EFA               	movwf	pclath,c
  5686  0006AE  0100               	movlb	0	; () banked
  5687  0006B0  5192               	movf	??__doprnt& (0+255),w,b
  5688  0006B2  6EFD               	movwf	tosl,c
  5689  0006B4  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5690  0006B6  6EFE               	movwf	tosh,c
  5691  0006B8  6AFF               	clrf	tosu,c
  5692  0006BA  50FA               	movf	pclath,w,c
  5693  0006BC  0E30               	movlw	48
  5694  0006BE  0012               	return		;indir
  5695  0006C0                     l7668:
  5696  0006C0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5697  0006C4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5698  0006C8  CFDE F092          	movff	postinc2,??__doprnt
  5699  0006CC  CFDD F093          	movff	postdec2,??__doprnt+1
  5700  0006D0  C092  FFD9         	movff	??__doprnt,fsr2l
  5701  0006D4  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5702  0006D8  0E30               	movlw	48
  5703  0006DA  6EDF               	movwf	indf2,c
  5704  0006DC  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5705  0006E0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5706  0006E4  2ADE               	incf	postinc2,f,c
  5707  0006E6  0E00               	movlw	0
  5708  0006E8  22DD               	addwfc	postdec2,f,c
  5709  0006EA                     l7672:
  5710                           
  5711                           ;doprnt.c: 1418: while(--width);
  5712  0006EA  0100               	movlb	0	; () banked
  5713  0006EC  079F               	decf	__doprnt@width& (0+255),f,b
  5714  0006EE  A0D8               	btfss	status,0,c
  5715  0006F0  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5716  0006F2  D7BD               	goto	l7662
  5717  0006F4                     l7674:
  5718                           
  5719                           ; BSR set to: 0
  5720                           ;doprnt.c: 1422: {
  5721                           ;doprnt.c: 1424: if(width
  5722                           ;doprnt.c: 1428: )
  5723  0006F4  0100               	movlb	0	; () banked
  5724  0006F6  519F               	movf	__doprnt@width& (0+255),w,b
  5725  0006F8  0100               	movlb	0	; () banked
  5726  0006FA  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5727  0006FC  B4D8               	btfsc	status,2,c
  5728  0006FE  D042               	goto	l7686
  5729  000700                     l7676:
  5730                           
  5731                           ; BSR set to: 0
  5732                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5733  000700  0100               	movlb	0	; () banked
  5734  000702  EE20 F002          	lfsr	2,2
  5735  000706  518C               	movf	__doprnt@pb& (0+255),w,b
  5736  000708  26D9               	addwf	fsr2l,f,c
  5737  00070A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5738  00070C  22DA               	addwfc	fsr2h,f,c
  5739  00070E  50DE               	movf	postinc2,w,c
  5740  000710  10DE               	iorwf	postinc2,w,c
  5741  000712  B4D8               	btfsc	status,2,c
  5742  000714  D018               	goto	l7680
  5743                           
  5744                           ; BSR set to: 0
  5745  000716  0100               	movlb	0	; () banked
  5746  000718  EE20 F002          	lfsr	2,2
  5747  00071C  518C               	movf	__doprnt@pb& (0+255),w,b
  5748  00071E  26D9               	addwf	fsr2l,f,c
  5749  000720  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5750  000722  22DA               	addwfc	fsr2h,f,c
  5751  000724  CFDE F092          	movff	postinc2,??__doprnt
  5752  000728  CFDD F093          	movff	postdec2,??__doprnt+1
  5753  00072C  D801               	call	u11988
  5754  00072E  D020               	goto	l7684
  5755  000730                     u11988:
  5756  000730  0005               	push	
  5757  000732  6EFA               	movwf	pclath,c
  5758  000734  0100               	movlb	0	; () banked
  5759  000736  5192               	movf	??__doprnt& (0+255),w,b
  5760  000738  6EFD               	movwf	tosl,c
  5761  00073A  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5762  00073C  6EFE               	movwf	tosh,c
  5763  00073E  6AFF               	clrf	tosu,c
  5764  000740  50FA               	movf	pclath,w,c
  5765  000742  0E20               	movlw	32
  5766  000744  0012               	return		;indir
  5767  000746                     l7680:
  5768  000746  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5769  00074A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5770  00074E  CFDE F092          	movff	postinc2,??__doprnt
  5771  000752  CFDD F093          	movff	postdec2,??__doprnt+1
  5772  000756  C092  FFD9         	movff	??__doprnt,fsr2l
  5773  00075A  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5774  00075E  0E20               	movlw	32
  5775  000760  6EDF               	movwf	indf2,c
  5776  000762  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5777  000766  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5778  00076A  2ADE               	incf	postinc2,f,c
  5779  00076C  0E00               	movlw	0
  5780  00076E  22DD               	addwfc	postdec2,f,c
  5781  000770                     l7684:
  5782                           
  5783                           ;doprnt.c: 1431: while(--width);
  5784  000770  0100               	movlb	0	; () banked
  5785  000772  079F               	decf	__doprnt@width& (0+255),f,b
  5786  000774  A0D8               	btfss	status,0,c
  5787  000776  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5788  000778  0100               	movlb	0	; () banked
  5789  00077A  519F               	movf	__doprnt@width& (0+255),w,b
  5790  00077C  0100               	movlb	0	; () banked
  5791  00077E  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5792  000780  A4D8               	btfss	status,2,c
  5793  000782  D7BE               	goto	l7676
  5794  000784                     l7686:
  5795                           
  5796                           ; BSR set to: 0
  5797                           ;doprnt.c: 1438: if(flag & 0x03)
  5798  000784  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5799  000788  0E03               	movlw	3
  5800  00078A  0100               	movlb	0	; () banked
  5801  00078C  1792               	andwf	??__doprnt& (0+255),f,b
  5802  00078E  B4D8               	btfsc	status,2,c
  5803  000790  D038               	goto	l7696
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5807  000792  0100               	movlb	0	; () banked
  5808  000794  EE20 F002          	lfsr	2,2
  5809  000798  518C               	movf	__doprnt@pb& (0+255),w,b
  5810  00079A  26D9               	addwf	fsr2l,f,c
  5811  00079C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5812  00079E  22DA               	addwfc	fsr2h,f,c
  5813  0007A0  50DE               	movf	postinc2,w,c
  5814  0007A2  10DE               	iorwf	postinc2,w,c
  5815  0007A4  B4D8               	btfsc	status,2,c
  5816  0007A6  D018               	goto	l7692
  5817                           
  5818                           ; BSR set to: 0
  5819  0007A8  0100               	movlb	0	; () banked
  5820  0007AA  EE20 F002          	lfsr	2,2
  5821  0007AE  518C               	movf	__doprnt@pb& (0+255),w,b
  5822  0007B0  26D9               	addwf	fsr2l,f,c
  5823  0007B2  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5824  0007B4  22DA               	addwfc	fsr2h,f,c
  5825  0007B6  CFDE F092          	movff	postinc2,??__doprnt
  5826  0007BA  CFDD F093          	movff	postdec2,??__doprnt+1
  5827  0007BE  D801               	call	u12028
  5828  0007C0  D020               	goto	l7696
  5829  0007C2                     u12028:
  5830  0007C2  0005               	push	
  5831  0007C4  6EFA               	movwf	pclath,c
  5832  0007C6  0100               	movlb	0	; () banked
  5833  0007C8  5192               	movf	??__doprnt& (0+255),w,b
  5834  0007CA  6EFD               	movwf	tosl,c
  5835  0007CC  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5836  0007CE  6EFE               	movwf	tosh,c
  5837  0007D0  6AFF               	clrf	tosu,c
  5838  0007D2  50FA               	movf	pclath,w,c
  5839  0007D4  0E2D               	movlw	45
  5840  0007D6  0012               	return		;indir
  5841  0007D8                     l7692:
  5842  0007D8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5843  0007DC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5844  0007E0  CFDE F092          	movff	postinc2,??__doprnt
  5845  0007E4  CFDD F093          	movff	postdec2,??__doprnt+1
  5846  0007E8  C092  FFD9         	movff	??__doprnt,fsr2l
  5847  0007EC  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5848  0007F0  0E2D               	movlw	45
  5849  0007F2  6EDF               	movwf	indf2,c
  5850  0007F4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5851  0007F8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5852  0007FC  2ADE               	incf	postinc2,f,c
  5853  0007FE  0E00               	movlw	0
  5854  000800  22DD               	addwfc	postdec2,f,c
  5855  000802                     l7696:
  5856                           
  5857                           ;doprnt.c: 1469: }
  5858                           ;doprnt.c: 1472: prec = c;
  5859  000802  C0A1  F097         	movff	__doprnt@c,__doprnt@prec
  5860                           
  5861                           ;doprnt.c: 1474: while(prec--) {
  5862  000806  D098               	goto	l7716
  5863  000808                     l7698:
  5864                           
  5865                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5866  000808  0100               	movlb	0	; () banked
  5867  00080A  5197               	movf	__doprnt@prec& (0+255),w,b
  5868  00080C  0D02               	mullw	2
  5869  00080E  0EF6               	movlw	low _dpowers
  5870  000810  24F3               	addwf	prodl,w,c
  5871  000812  6EF6               	movwf	tblptrl,c
  5872  000814  0EFE               	movlw	high _dpowers
  5873  000816  20F4               	addwfc	prodh,w,c
  5874  000818  6EF7               	movwf	tblptrh,c
  5875  00081A                     	if	1	;There are 3 active tblptr bytes
  5876  00081A  6AF8               	clrf	tblptru,c
  5877  00081C  0E00               	movlw	low (__mediumconst shr (0+16))
  5878  00081E  22F8               	addwfc	tblptru,f,c
  5879  000820                     	endif
  5880  000820  0009               	tblrd		*+
  5881  000822  CFF5 F082          	movff	tablat,___lwdiv@divisor
  5882  000826  000A               	tblrd		*-
  5883  000828  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  5884  00082C  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  5885  000830  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  5886  000834  EC02  F019         	call	___lwdiv
  5887  000838  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  5888  00083C  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  5889  000840  0E00               	movlw	0
  5890  000842  0100               	movlb	0	; () banked
  5891  000844  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  5892  000846  0E0A               	movlw	10
  5893  000848  6F89               	movwf	___lwmod@divisor& (0+255),b
  5894  00084A  ECAA  F019         	call	___lwmod	;wreg free
  5895  00084E  0100               	movlb	0	; () banked
  5896  000850  5187               	movf	?___lwmod& (0+255),w,b
  5897  000852  0F30               	addlw	48
  5898  000854  0100               	movlb	0	; () banked
  5899  000856  6FA1               	movwf	__doprnt@c& (0+255),b
  5900                           
  5901                           ;doprnt.c: 1491: break;
  5902  000858  D036               	goto	l7708
  5903  00085A                     l7700:
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;doprnt.c: 1499: {
  5907                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5908  00085A  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  5909  00085E  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  5910  000862  0100               	movlb	0	; () banked
  5911  000864  5197               	movf	__doprnt@prec& (0+255),w,b
  5912  000866  0D02               	mullw	2
  5913  000868  0E00               	movlw	low _hexpowers
  5914  00086A  24F3               	addwf	prodl,w,c
  5915  00086C  6EF6               	movwf	tblptrl,c
  5916  00086E  0EFF               	movlw	high _hexpowers
  5917  000870  20F4               	addwfc	prodh,w,c
  5918  000872  6EF7               	movwf	tblptrh,c
  5919  000874                     	if	1	;There are 3 active tblptr bytes
  5920  000874  6AF8               	clrf	tblptru,c
  5921  000876  0E00               	movlw	low (__mediumconst shr (0+16))
  5922  000878  22F8               	addwfc	tblptru,f,c
  5923  00087A                     	endif
  5924  00087A  0009               	tblrd		*+
  5925  00087C  CFF5 F082          	movff	tablat,___lwdiv@divisor
  5926  000880  000A               	tblrd		*-
  5927  000882  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  5928  000886  EC02  F019         	call	___lwdiv	;wreg free
  5929  00088A  0100               	movlb	0	; () banked
  5930  00088C  5180               	movf	?___lwdiv& (0+255),w,b
  5931  00088E  0B0F               	andlw	15
  5932  000890  0100               	movlb	0	; () banked
  5933  000892  6F96               	movwf	__doprnt@idx& (0+255),b
  5934                           
  5935                           ; BSR set to: 0
  5936                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5937  000894  0100               	movlb	0	; () banked
  5938  000896  5196               	movf	__doprnt@idx& (0+255),w,b
  5939  000898  0D01               	mullw	1
  5940  00089A  0E8E               	movlw	low STR_19
  5941  00089C  24F3               	addwf	prodl,w,c
  5942  00089E  6EF6               	movwf	tblptrl,c
  5943  0008A0  0EFF               	movlw	high STR_19
  5944  0008A2  20F4               	addwfc	prodh,w,c
  5945  0008A4  6EF7               	movwf	tblptrh,c
  5946  0008A6                     	if	1	;There are 3 active tblptr bytes
  5947  0008A6  6AF8               	clrf	tblptru,c
  5948  0008A8  0E00               	movlw	low (__mediumconst shr (0+16))
  5949  0008AA  22F8               	addwfc	tblptru,f,c
  5950  0008AC                     	endif
  5951  0008AC  0008               	tblrd		*
  5952  0008AE  CFF5 F0A1          	movff	tablat,__doprnt@c
  5953                           
  5954                           ; BSR set to: 0
  5955                           ;doprnt.c: 1523: }
  5956                           
  5957                           ;doprnt.c: 1508: }
  5958                           ;doprnt.c: 1510: break;
  5959  0008B2  D009               	goto	l7708
  5960  0008B4                     l7706:
  5961  0008B4  0100               	movlb	0	; () banked
  5962  0008B6  519E               	movf	__doprnt@flag& (0+255),w,b
  5963  0008B8  0B80               	andlw	128
  5964                           
  5965                           ; Switch size 1, requested type "space"
  5966                           ; Number of cases is 2, Range of values is 0 to 128
  5967                           ; switch strategies available:
  5968                           ; Name         Instructions Cycles
  5969                           ; simple_byte            7     4 (average)
  5970                           ;	Chosen strategy is simple_byte
  5971  0008BA  0A00               	xorlw	0	; case 0
  5972  0008BC  B4D8               	btfsc	status,2,c
  5973  0008BE  D7A4               	goto	l7698
  5974  0008C0  0A80               	xorlw	128	; case 128
  5975  0008C2  B4D8               	btfsc	status,2,c
  5976  0008C4  D7CA               	goto	l7700
  5977  0008C6                     l7708:
  5978                           
  5979                           ; BSR set to: 0
  5980                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  5981  0008C6  0100               	movlb	0	; () banked
  5982  0008C8  EE20 F002          	lfsr	2,2
  5983  0008CC  518C               	movf	__doprnt@pb& (0+255),w,b
  5984  0008CE  26D9               	addwf	fsr2l,f,c
  5985  0008D0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5986  0008D2  22DA               	addwfc	fsr2h,f,c
  5987  0008D4  50DE               	movf	postinc2,w,c
  5988  0008D6  10DE               	iorwf	postinc2,w,c
  5989  0008D8  B4D8               	btfsc	status,2,c
  5990  0008DA  D019               	goto	l7712
  5991                           
  5992                           ; BSR set to: 0
  5993  0008DC  0100               	movlb	0	; () banked
  5994  0008DE  EE20 F002          	lfsr	2,2
  5995  0008E2  518C               	movf	__doprnt@pb& (0+255),w,b
  5996  0008E4  26D9               	addwf	fsr2l,f,c
  5997  0008E6  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5998  0008E8  22DA               	addwfc	fsr2h,f,c
  5999  0008EA  CFDE F092          	movff	postinc2,??__doprnt
  6000  0008EE  CFDD F093          	movff	postdec2,??__doprnt+1
  6001  0008F2  D801               	call	u12048
  6002  0008F4  D021               	goto	l7716
  6003  0008F6                     u12048:
  6004  0008F6  0005               	push	
  6005  0008F8  6EFA               	movwf	pclath,c
  6006  0008FA  0100               	movlb	0	; () banked
  6007  0008FC  5192               	movf	??__doprnt& (0+255),w,b
  6008  0008FE  6EFD               	movwf	tosl,c
  6009  000900  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6010  000902  6EFE               	movwf	tosh,c
  6011  000904  6AFF               	clrf	tosu,c
  6012  000906  50FA               	movf	pclath,w,c
  6013  000908  0100               	movlb	0	; () banked
  6014  00090A  51A1               	movf	__doprnt@c& (0+255),w,b
  6015  00090C  0012               	return		;indir
  6016  00090E                     l7712:
  6017  00090E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6018  000912  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6019  000916  CFDE F092          	movff	postinc2,??__doprnt
  6020  00091A  CFDD F093          	movff	postdec2,??__doprnt+1
  6021  00091E  C092  FFD9         	movff	??__doprnt,fsr2l
  6022  000922  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6023  000926  C0A1  FFDF         	movff	__doprnt@c,indf2
  6024  00092A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6025  00092E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6026  000932  2ADE               	incf	postinc2,f,c
  6027  000934  0E00               	movlw	0
  6028  000936  22DD               	addwfc	postdec2,f,c
  6029  000938                     l7716:
  6030  000938  0100               	movlb	0	; () banked
  6031  00093A  0797               	decf	__doprnt@prec& (0+255),f,b
  6032  00093C  0100               	movlb	0	; () banked
  6033  00093E  2997               	incf	__doprnt@prec& (0+255),w,b
  6034  000940  A4D8               	btfss	status,2,c
  6035  000942  D7B8               	goto	l7706
  6036  000944                     l7718:
  6037  000944  0100               	movlb	0	; () banked
  6038  000946  518E               	movf	__doprnt@f& (0+255),w,b
  6039  000948  0100               	movlb	0	; () banked
  6040  00094A  6F92               	movwf	??__doprnt& (0+255),b
  6041  00094C  0100               	movlb	0	; () banked
  6042  00094E  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  6043  000950  0100               	movlb	0	; () banked
  6044  000952  6F93               	movwf	(??__doprnt+1)& (0+255),b
  6045  000954  0100               	movlb	0	; () banked
  6046  000956  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  6047  000958  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  6048  00095A  C092  FFF6         	movff	??__doprnt,tblptrl
  6049  00095E  C093  FFF7         	movff	??__doprnt+1,tblptrh
  6050  000962  0E00               	movlw	low (__mediumconst shr (0+16))
  6051  000964  6EF8               	movwf	tblptru,c
  6052  000966  0E0F               	movlw	(high __ramtop+-1)
  6053  000968  64F7               	cpfsgt	tblptrh,c
  6054  00096A  D003               	bra	u12067
  6055  00096C  0008               	tblrd		*
  6056  00096E  50F5               	movf	tablat,w,c
  6057  000970  D005               	bra	u12060
  6058  000972                     u12067:
  6059  000972  CFF6 FFE9          	movff	tblptrl,fsr0l
  6060  000976  CFF7 FFEA          	movff	tblptrh,fsr0h
  6061  00097A  50EF               	movf	indf0,w,c
  6062  00097C                     u12060:
  6063  00097C  0100               	movlb	0	; () banked
  6064  00097E  6FA1               	movwf	__doprnt@c& (0+255),b
  6065  000980  0100               	movlb	0	; () banked
  6066  000982  51A1               	movf	__doprnt@c& (0+255),w,b
  6067  000984  A4D8               	btfss	status,2,c
  6068  000986  EF0B  F000         	goto	l7512
  6069  00098A                     l7720:
  6070                           
  6071                           ;doprnt.c: 1540: return 0;
  6072  00098A  0E00               	movlw	0
  6073  00098C  0100               	movlb	0	; () banked
  6074  00098E  6F8D               	movwf	(?__doprnt+1)& (0+255),b
  6075  000990  0E00               	movlw	0
  6076  000992  6F8C               	movwf	?__doprnt& (0+255),b
  6077  000994  0012               	return	
  6078  000996                     __end_of__doprnt:
  6079                           	opt stack 0
  6080                           tosu	equ	0xFFF
  6081                           tosh	equ	0xFFE
  6082                           tosl	equ	0xFFD
  6083                           pclath	equ	0xFFA
  6084                           tblptru	equ	0xFF8
  6085                           tblptrh	equ	0xFF7
  6086                           tblptrl	equ	0xFF6
  6087                           tablat	equ	0xFF5
  6088                           prodh	equ	0xFF4
  6089                           prodl	equ	0xFF3
  6090                           intcon	equ	0xFF2
  6091                           intcon2	equ	0xFF1
  6092                           intcon3	equ	0xFF0
  6093                           indf0	equ	0xFEF
  6094                           postinc0	equ	0xFEE
  6095                           fsr0h	equ	0xFEA
  6096                           fsr0l	equ	0xFE9
  6097                           wreg	equ	0xFE8
  6098                           indf1	equ	0xFE7
  6099                           postinc1	equ	0xFE6
  6100                           postdec1	equ	0xFE5
  6101                           fsr1h	equ	0xFE2
  6102                           fsr1l	equ	0xFE1
  6103                           indf2	equ	0xFDF
  6104                           postinc2	equ	0xFDE
  6105                           postdec2	equ	0xFDD
  6106                           fsr2h	equ	0xFDA
  6107                           fsr2l	equ	0xFD9
  6108                           status	equ	0xFD8
  6109                           
  6110 ;; *************** function _putch *****************
  6111 ;; Defined at:
  6112 ;;		line 30 in file "lcd.c"
  6113 ;; Parameters:    Size  Location     Type
  6114 ;;  data            1    wreg     unsigned char 
  6115 ;; Auto vars:     Size  Location     Type
  6116 ;;  data            1    2[BANK0 ] unsigned char 
  6117 ;; Return value:  Size  Location     Type
  6118 ;;                  1    wreg      void 
  6119 ;; Registers used:
  6120 ;;		wreg, status,2, status,0, cstack
  6121 ;; Tracked objects:
  6122 ;;		On entry : 0/0
  6123 ;;		On exit  : 0/0
  6124 ;;		Unchanged: 0/0
  6125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6127 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6129 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6130 ;;Total ram usage:        1 bytes
  6131 ;; Hardware stack levels used:    1
  6132 ;; Hardware stack levels required when called:    6
  6133 ;; This function calls:
  6134 ;;		_lcdNibble
  6135 ;; This function is called by:
  6136 ;;		_printf
  6137 ;;		__doprnt
  6138 ;;		i2__doprnt
  6139 ;; This function uses a non-reentrant model
  6140 ;;
  6141                           
  6142                           	psect	text11
  6143  00381E                     __ptext11:
  6144                           	opt stack 0
  6145  00381E                     _putch:
  6146                           	opt stack 0
  6147                           
  6148                           ; BSR set to: 0
  6149                           ;Skip over the trampoline to the duplicate function for level 2
  6150  00381E  B27A               	btfsc	btemp,1,c
  6151  003820  EF2C  F01C         	goto	i2_putch
  6152  003824                     _putch$intlevel0:
  6153                           	opt stack 21
  6154                           
  6155                           ;incstack = 0
  6156                           ;putch@data stored from wreg
  6157  003824  0100               	movlb	0	; () banked
  6158  003826  6F82               	movwf	putch@data& (0+255),b
  6159                           
  6160                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  6161  003828  848C               	bsf	3980,2,c	;volatile
  6162                           
  6163                           ;lcd.c: 32: lcdNibble(data);
  6164  00382A  0100               	movlb	0	; () banked
  6165  00382C  5182               	movf	putch@data& (0+255),w,b
  6166  00382E  EC76  F019         	call	_lcdNibble
  6167  003832  0012               	return		;funcret
  6168  003834                     __end_of_putch:
  6169                           	opt stack 0
  6170                           tosu	equ	0xFFF
  6171                           tosh	equ	0xFFE
  6172                           tosl	equ	0xFFD
  6173                           pclath	equ	0xFFA
  6174                           tblptru	equ	0xFF8
  6175                           tblptrh	equ	0xFF7
  6176                           tblptrl	equ	0xFF6
  6177                           tablat	equ	0xFF5
  6178                           prodh	equ	0xFF4
  6179                           prodl	equ	0xFF3
  6180                           intcon	equ	0xFF2
  6181                           intcon2	equ	0xFF1
  6182                           intcon3	equ	0xFF0
  6183                           indf0	equ	0xFEF
  6184                           postinc0	equ	0xFEE
  6185                           fsr0h	equ	0xFEA
  6186                           fsr0l	equ	0xFE9
  6187                           wreg	equ	0xFE8
  6188                           indf1	equ	0xFE7
  6189                           postinc1	equ	0xFE6
  6190                           postdec1	equ	0xFE5
  6191                           fsr1h	equ	0xFE2
  6192                           fsr1l	equ	0xFE1
  6193                           indf2	equ	0xFDF
  6194                           postinc2	equ	0xFDE
  6195                           postdec2	equ	0xFDD
  6196                           fsr2h	equ	0xFDA
  6197                           fsr2l	equ	0xFD9
  6198                           status	equ	0xFD8
  6199                           
  6200 ;; *************** function _isdigit *****************
  6201 ;; Defined at:
  6202 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;  c               1    wreg     unsigned char 
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;  c               1    2[BANK0 ] unsigned char 
  6207 ;; Return value:  Size  Location     Type
  6208 ;;		None               void
  6209 ;; Registers used:
  6210 ;;		wreg, status,2, status,0
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 0/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6217 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6220 ;;Total ram usage:        3 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:    5
  6223 ;; This function calls:
  6224 ;;		Nothing
  6225 ;; This function is called by:
  6226 ;;		__doprnt
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           	psect	text12
  6231  003796                     __ptext12:
  6232                           	opt stack 0
  6233  003796                     _isdigit:
  6234                           	opt stack 22
  6235                           
  6236                           ;incstack = 0
  6237                           ;isdigit@c stored from wreg
  6238  003796  0100               	movlb	0	; () banked
  6239  003798  6F82               	movwf	isdigit@c& (0+255),b
  6240  00379A  0E00               	movlw	0
  6241  00379C  0100               	movlb	0	; () banked
  6242  00379E  6F81               	movwf	_isdigit$760& (0+255),b
  6243                           
  6244                           ; BSR set to: 0
  6245  0037A0  0E3A               	movlw	58
  6246  0037A2  0100               	movlb	0	; () banked
  6247  0037A4  6182               	cpfslt	isdigit@c& (0+255),b
  6248  0037A6  D007               	goto	l4386
  6249                           
  6250                           ; BSR set to: 0
  6251  0037A8  0E2F               	movlw	47
  6252  0037AA  0100               	movlb	0	; () banked
  6253  0037AC  6582               	cpfsgt	isdigit@c& (0+255),b
  6254  0037AE  D003               	goto	l4386
  6255                           
  6256                           ; BSR set to: 0
  6257  0037B0  0E01               	movlw	1
  6258  0037B2  0100               	movlb	0	; () banked
  6259  0037B4  6F81               	movwf	_isdigit$760& (0+255),b
  6260  0037B6                     l4386:
  6261                           
  6262                           ; BSR set to: 0
  6263  0037B6  C081  F080         	movff	_isdigit$760,??_isdigit
  6264  0037BA  0100               	movlb	0	; () banked
  6265  0037BC  3180               	rrcf	??_isdigit& (0+255),w,b
  6266  0037BE  0012               	return	
  6267  0037C0                     __end_of_isdigit:
  6268                           	opt stack 0
  6269                           tosu	equ	0xFFF
  6270                           tosh	equ	0xFFE
  6271                           tosl	equ	0xFFD
  6272                           pclath	equ	0xFFA
  6273                           tblptru	equ	0xFF8
  6274                           tblptrh	equ	0xFF7
  6275                           tblptrl	equ	0xFF6
  6276                           tablat	equ	0xFF5
  6277                           prodh	equ	0xFF4
  6278                           prodl	equ	0xFF3
  6279                           intcon	equ	0xFF2
  6280                           intcon2	equ	0xFF1
  6281                           intcon3	equ	0xFF0
  6282                           indf0	equ	0xFEF
  6283                           postinc0	equ	0xFEE
  6284                           fsr0h	equ	0xFEA
  6285                           fsr0l	equ	0xFE9
  6286                           wreg	equ	0xFE8
  6287                           indf1	equ	0xFE7
  6288                           postinc1	equ	0xFE6
  6289                           postdec1	equ	0xFE5
  6290                           fsr1h	equ	0xFE2
  6291                           fsr1l	equ	0xFE1
  6292                           indf2	equ	0xFDF
  6293                           postinc2	equ	0xFDE
  6294                           postdec2	equ	0xFDD
  6295                           fsr2h	equ	0xFDA
  6296                           fsr2l	equ	0xFD9
  6297                           status	equ	0xFD8
  6298                           
  6299 ;; *************** function ___lwmod *****************
  6300 ;; Defined at:
  6301 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6302 ;; Parameters:    Size  Location     Type
  6303 ;;  dividend        2    7[BANK0 ] unsigned int 
  6304 ;;  divisor         2    9[BANK0 ] unsigned int 
  6305 ;; Auto vars:     Size  Location     Type
  6306 ;;  counter         1   11[BANK0 ] unsigned char 
  6307 ;; Return value:  Size  Location     Type
  6308 ;;                  2    7[BANK0 ] unsigned int 
  6309 ;; Registers used:
  6310 ;;		wreg, status,2, status,0
  6311 ;; Tracked objects:
  6312 ;;		On entry : 0/0
  6313 ;;		On exit  : 0/0
  6314 ;;		Unchanged: 0/0
  6315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6316 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6317 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6319 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6320 ;;Total ram usage:        5 bytes
  6321 ;; Hardware stack levels used:    1
  6322 ;; Hardware stack levels required when called:    5
  6323 ;; This function calls:
  6324 ;;		Nothing
  6325 ;; This function is called by:
  6326 ;;		__doprnt
  6327 ;; This function uses a non-reentrant model
  6328 ;;
  6329                           
  6330                           	psect	text13
  6331  003354                     __ptext13:
  6332                           	opt stack 0
  6333  003354                     ___lwmod:
  6334                           	opt stack 22
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;incstack = 0
  6338  003354  0100               	movlb	0	; () banked
  6339  003356  5189               	movf	___lwmod@divisor& (0+255),w,b
  6340  003358  0100               	movlb	0	; () banked
  6341  00335A  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6342  00335C  B4D8               	btfsc	status,2,c
  6343  00335E  D026               	goto	l987
  6344                           
  6345                           ; BSR set to: 0
  6346  003360  0E01               	movlw	1
  6347  003362  0100               	movlb	0	; () banked
  6348  003364  6F8B               	movwf	___lwmod@counter& (0+255),b
  6349  003366  D006               	goto	l4424
  6350  003368                     l4422:
  6351                           
  6352                           ; BSR set to: 0
  6353  003368  0100               	movlb	0	; () banked
  6354  00336A  90D8               	bcf	status,0,c
  6355  00336C  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  6356  00336E  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6357  003370  0100               	movlb	0	; () banked
  6358  003372  2B8B               	incf	___lwmod@counter& (0+255),f,b
  6359  003374                     l4424:
  6360                           
  6361                           ; BSR set to: 0
  6362  003374  0100               	movlb	0	; () banked
  6363  003376  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6364  003378  D7F7               	goto	l4422
  6365  00337A                     l4426:
  6366                           
  6367                           ; BSR set to: 0
  6368  00337A  0100               	movlb	0	; () banked
  6369  00337C  5189               	movf	___lwmod@divisor& (0+255),w,b
  6370  00337E  0100               	movlb	0	; () banked
  6371  003380  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  6372  003382  0100               	movlb	0	; () banked
  6373  003384  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6374  003386  0100               	movlb	0	; () banked
  6375  003388  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6376  00338A  A0D8               	btfss	status,0,c
  6377  00338C  D008               	goto	l4430
  6378                           
  6379                           ; BSR set to: 0
  6380  00338E  0100               	movlb	0	; () banked
  6381  003390  5189               	movf	___lwmod@divisor& (0+255),w,b
  6382  003392  0100               	movlb	0	; () banked
  6383  003394  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  6384  003396  0100               	movlb	0	; () banked
  6385  003398  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6386  00339A  0100               	movlb	0	; () banked
  6387  00339C  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6388  00339E                     l4430:
  6389                           
  6390                           ; BSR set to: 0
  6391  00339E  0100               	movlb	0	; () banked
  6392  0033A0  90D8               	bcf	status,0,c
  6393  0033A2  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6394  0033A4  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  6395                           
  6396                           ; BSR set to: 0
  6397  0033A6  0100               	movlb	0	; () banked
  6398  0033A8  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  6399  0033AA  D7E7               	goto	l4426
  6400  0033AC                     l987:
  6401                           
  6402                           ; BSR set to: 0
  6403  0033AC  C087  F087         	movff	___lwmod@dividend,?___lwmod
  6404  0033B0  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  6405                           
  6406                           ; BSR set to: 0
  6407  0033B4  0012               	return		;funcret
  6408  0033B6                     __end_of___lwmod:
  6409                           	opt stack 0
  6410                           tosu	equ	0xFFF
  6411                           tosh	equ	0xFFE
  6412                           tosl	equ	0xFFD
  6413                           pclath	equ	0xFFA
  6414                           tblptru	equ	0xFF8
  6415                           tblptrh	equ	0xFF7
  6416                           tblptrl	equ	0xFF6
  6417                           tablat	equ	0xFF5
  6418                           prodh	equ	0xFF4
  6419                           prodl	equ	0xFF3
  6420                           intcon	equ	0xFF2
  6421                           intcon2	equ	0xFF1
  6422                           intcon3	equ	0xFF0
  6423                           indf0	equ	0xFEF
  6424                           postinc0	equ	0xFEE
  6425                           fsr0h	equ	0xFEA
  6426                           fsr0l	equ	0xFE9
  6427                           wreg	equ	0xFE8
  6428                           indf1	equ	0xFE7
  6429                           postinc1	equ	0xFE6
  6430                           postdec1	equ	0xFE5
  6431                           fsr1h	equ	0xFE2
  6432                           fsr1l	equ	0xFE1
  6433                           indf2	equ	0xFDF
  6434                           postinc2	equ	0xFDE
  6435                           postdec2	equ	0xFDD
  6436                           fsr2h	equ	0xFDA
  6437                           fsr2l	equ	0xFD9
  6438                           status	equ	0xFD8
  6439                           
  6440 ;; *************** function ___lwdiv *****************
  6441 ;; Defined at:
  6442 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6443 ;; Parameters:    Size  Location     Type
  6444 ;;  dividend        2    0[BANK0 ] unsigned int 
  6445 ;;  divisor         2    2[BANK0 ] unsigned int 
  6446 ;; Auto vars:     Size  Location     Type
  6447 ;;  quotient        2    5[BANK0 ] unsigned int 
  6448 ;;  counter         1    4[BANK0 ] unsigned char 
  6449 ;; Return value:  Size  Location     Type
  6450 ;;                  2    0[BANK0 ] unsigned int 
  6451 ;; Registers used:
  6452 ;;		wreg, status,2, status,0
  6453 ;; Tracked objects:
  6454 ;;		On entry : 0/0
  6455 ;;		On exit  : 0/0
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6458 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6459 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6460 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6461 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6462 ;;Total ram usage:        7 bytes
  6463 ;; Hardware stack levels used:    1
  6464 ;; Hardware stack levels required when called:    5
  6465 ;; This function calls:
  6466 ;;		Nothing
  6467 ;; This function is called by:
  6468 ;;		__doprnt
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text14
  6473  003204                     __ptext14:
  6474                           	opt stack 0
  6475  003204                     ___lwdiv:
  6476                           	opt stack 22
  6477                           
  6478                           ; BSR set to: 0
  6479                           ;incstack = 0
  6480  003204  0E00               	movlw	0
  6481  003206  0100               	movlb	0	; () banked
  6482  003208  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6483  00320A  0E00               	movlw	0
  6484  00320C  6F85               	movwf	___lwdiv@quotient& (0+255),b
  6485                           
  6486                           ; BSR set to: 0
  6487  00320E  0100               	movlb	0	; () banked
  6488  003210  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6489  003212  0100               	movlb	0	; () banked
  6490  003214  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6491  003216  B4D8               	btfsc	status,2,c
  6492  003218  D02C               	goto	l977
  6493                           
  6494                           ; BSR set to: 0
  6495  00321A  0E01               	movlw	1
  6496  00321C  0100               	movlb	0	; () banked
  6497  00321E  6F84               	movwf	___lwdiv@counter& (0+255),b
  6498  003220  D006               	goto	l4404
  6499  003222                     l4402:
  6500                           
  6501                           ; BSR set to: 0
  6502  003222  0100               	movlb	0	; () banked
  6503  003224  90D8               	bcf	status,0,c
  6504  003226  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  6505  003228  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6506  00322A  0100               	movlb	0	; () banked
  6507  00322C  2B84               	incf	___lwdiv@counter& (0+255),f,b
  6508  00322E                     l4404:
  6509                           
  6510                           ; BSR set to: 0
  6511  00322E  0100               	movlb	0	; () banked
  6512  003230  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6513  003232  D7F7               	goto	l4402
  6514  003234                     l4406:
  6515                           
  6516                           ; BSR set to: 0
  6517  003234  0100               	movlb	0	; () banked
  6518  003236  90D8               	bcf	status,0,c
  6519  003238  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  6520  00323A  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6521                           
  6522                           ; BSR set to: 0
  6523  00323C  0100               	movlb	0	; () banked
  6524  00323E  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6525  003240  0100               	movlb	0	; () banked
  6526  003242  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  6527  003244  0100               	movlb	0	; () banked
  6528  003246  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6529  003248  0100               	movlb	0	; () banked
  6530  00324A  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6531  00324C  A0D8               	btfss	status,0,c
  6532  00324E  D00A               	goto	l4414
  6533                           
  6534                           ; BSR set to: 0
  6535  003250  0100               	movlb	0	; () banked
  6536  003252  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6537  003254  0100               	movlb	0	; () banked
  6538  003256  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  6539  003258  0100               	movlb	0	; () banked
  6540  00325A  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6541  00325C  0100               	movlb	0	; () banked
  6542  00325E  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6543                           
  6544                           ; BSR set to: 0
  6545  003260  0100               	movlb	0	; () banked
  6546  003262  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  6547  003264                     l4414:
  6548                           
  6549                           ; BSR set to: 0
  6550  003264  0100               	movlb	0	; () banked
  6551  003266  90D8               	bcf	status,0,c
  6552  003268  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6553  00326A  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  6554                           
  6555                           ; BSR set to: 0
  6556  00326C  0100               	movlb	0	; () banked
  6557  00326E  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  6558  003270  D7E1               	goto	l4406
  6559  003272                     l977:
  6560                           
  6561                           ; BSR set to: 0
  6562  003272  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  6563  003276  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6564                           
  6565                           ; BSR set to: 0
  6566  00327A  0012               	return		;funcret
  6567  00327C                     __end_of___lwdiv:
  6568                           	opt stack 0
  6569                           tosu	equ	0xFFF
  6570                           tosh	equ	0xFFE
  6571                           tosl	equ	0xFFD
  6572                           pclath	equ	0xFFA
  6573                           tblptru	equ	0xFF8
  6574                           tblptrh	equ	0xFF7
  6575                           tblptrl	equ	0xFF6
  6576                           tablat	equ	0xFF5
  6577                           prodh	equ	0xFF4
  6578                           prodl	equ	0xFF3
  6579                           intcon	equ	0xFF2
  6580                           intcon2	equ	0xFF1
  6581                           intcon3	equ	0xFF0
  6582                           indf0	equ	0xFEF
  6583                           postinc0	equ	0xFEE
  6584                           fsr0h	equ	0xFEA
  6585                           fsr0l	equ	0xFE9
  6586                           wreg	equ	0xFE8
  6587                           indf1	equ	0xFE7
  6588                           postinc1	equ	0xFE6
  6589                           postdec1	equ	0xFE5
  6590                           fsr1h	equ	0xFE2
  6591                           fsr1l	equ	0xFE1
  6592                           indf2	equ	0xFDF
  6593                           postinc2	equ	0xFDE
  6594                           postdec2	equ	0xFDD
  6595                           fsr2h	equ	0xFDA
  6596                           fsr2l	equ	0xFD9
  6597                           status	equ	0xFD8
  6598                           
  6599 ;; *************** function _update_RTC *****************
  6600 ;; Defined at:
  6601 ;;		line 175 in file "main.c"
  6602 ;; Parameters:    Size  Location     Type
  6603 ;;		None
  6604 ;; Auto vars:     Size  Location     Type
  6605 ;;  i               1   10[BANK0 ] unsigned char 
  6606 ;; Return value:  Size  Location     Type
  6607 ;;                  1    wreg      void 
  6608 ;; Registers used:
  6609 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6610 ;; Tracked objects:
  6611 ;;		On entry : 0/0
  6612 ;;		On exit  : 0/0
  6613 ;;		Unchanged: 0/0
  6614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6616 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6617 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6618 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6619 ;;Total ram usage:        5 bytes
  6620 ;; Hardware stack levels used:    1
  6621 ;; Hardware stack levels required when called:    7
  6622 ;; This function calls:
  6623 ;;		_I2C_Master_Read
  6624 ;;		_I2C_Master_Start
  6625 ;;		_I2C_Master_Stop
  6626 ;;		_I2C_Master_Write
  6627 ;;		___wmul
  6628 ;; This function is called by:
  6629 ;;		_main
  6630 ;; This function uses a non-reentrant model
  6631 ;;
  6632                           
  6633                           	psect	text15
  6634  002B0A                     __ptext15:
  6635                           	opt stack 0
  6636  002B0A                     _update_RTC:
  6637                           	opt stack 23
  6638                           
  6639                           ;main.c: 178: I2C_Master_Start();
  6640                           
  6641                           ; BSR set to: 0
  6642                           ;incstack = 0
  6643  002B0A  EC41  F01C         	call	_I2C_Master_Start	;wreg free
  6644                           
  6645                           ;main.c: 179: I2C_Master_Write(0b11010000);
  6646  002B0E  0E00               	movlw	0
  6647  002B10  0100               	movlb	0	; () banked
  6648  002B12  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6649  002B14  0ED0               	movlw	208
  6650  002B16  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6651  002B18  EC38  F01C         	call	_I2C_Master_Write	;wreg free
  6652                           
  6653                           ;main.c: 180: I2C_Master_Write(0x00);
  6654  002B1C  0E00               	movlw	0
  6655  002B1E  0100               	movlb	0	; () banked
  6656  002B20  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6657  002B22  0E00               	movlw	0
  6658  002B24  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6659  002B26  EC38  F01C         	call	_I2C_Master_Write	;wreg free
  6660                           
  6661                           ;main.c: 181: I2C_Master_Stop();
  6662  002B2A  EC3D  F01C         	call	_I2C_Master_Stop	;wreg free
  6663                           
  6664                           ;main.c: 184: I2C_Master_Start();
  6665  002B2E  EC41  F01C         	call	_I2C_Master_Start	;wreg free
  6666                           
  6667                           ;main.c: 185: I2C_Master_Write(0b11010001);
  6668  002B32  0E00               	movlw	0
  6669  002B34  0100               	movlb	0	; () banked
  6670  002B36  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6671  002B38  0ED1               	movlw	209
  6672  002B3A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6673  002B3C  EC38  F01C         	call	_I2C_Master_Write	;wreg free
  6674                           
  6675                           ;main.c: 186: for(unsigned char i=0;i<0x06;i++){
  6676  002B40  0E00               	movlw	0
  6677  002B42  0100               	movlb	0	; () banked
  6678  002B44  6F8A               	movwf	update_RTC@i& (0+255),b
  6679  002B46                     l5302:
  6680                           
  6681                           ; BSR set to: 0
  6682  002B46  0E05               	movlw	5
  6683  002B48  0100               	movlb	0	; () banked
  6684  002B4A  658A               	cpfsgt	update_RTC@i& (0+255),b
  6685  002B4C  D001               	goto	l5306
  6686  002B4E  D047               	goto	l5314
  6687  002B50                     l5306:
  6688                           
  6689                           ; BSR set to: 0
  6690                           ;main.c: 187: time[i] = I2C_Master_Read(1);
  6691  002B50  0100               	movlb	0	; () banked
  6692  002B52  518A               	movf	update_RTC@i& (0+255),w,b
  6693  002B54  0D01               	mullw	1
  6694  002B56  0EC2               	movlw	low _time
  6695  002B58  24F3               	addwf	prodl,w,c
  6696  002B5A  6ED9               	movwf	fsr2l,c
  6697  002B5C  0E00               	movlw	high _time
  6698  002B5E  20F4               	addwfc	prodh,w,c
  6699  002B60  6EDA               	movwf	fsr2h,c
  6700  002B62  0E01               	movlw	1
  6701  002B64  EC9E  F01B         	call	_I2C_Master_Read
  6702  002B68  6EDF               	movwf	indf2,c
  6703                           
  6704                           ;main.c: 188: time_i[i]=(time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  6705  002B6A  0100               	movlb	0	; () banked
  6706  002B6C  518A               	movf	update_RTC@i& (0+255),w,b
  6707  002B6E  0D01               	mullw	1
  6708  002B70  0EC2               	movlw	low _time
  6709  002B72  24F3               	addwf	prodl,w,c
  6710  002B74  6ED9               	movwf	fsr2l,c
  6711  002B76  0E00               	movlw	high _time
  6712  002B78  20F4               	addwfc	prodh,w,c
  6713  002B7A  6EDA               	movwf	fsr2h,c
  6714  002B7C  50DF               	movf	indf2,w,c
  6715  002B7E  0B0F               	andlw	15
  6716  002B80  0100               	movlb	0	; () banked
  6717  002B82  6F86               	movwf	??_update_RTC& (0+255),b
  6718  002B84  6B87               	clrf	(??_update_RTC+1)& (0+255),b
  6719  002B86  0100               	movlb	0	; () banked
  6720  002B88  518A               	movf	update_RTC@i& (0+255),w,b
  6721  002B8A  0D01               	mullw	1
  6722  002B8C  0EC2               	movlw	low _time
  6723  002B8E  24F3               	addwf	prodl,w,c
  6724  002B90  6ED9               	movwf	fsr2l,c
  6725  002B92  0E00               	movlw	high _time
  6726  002B94  20F4               	addwfc	prodh,w,c
  6727  002B96  6EDA               	movwf	fsr2h,c
  6728  002B98  50DF               	movf	indf2,w,c
  6729  002B9A  0100               	movlb	0	; () banked
  6730  002B9C  6F88               	movwf	(??_update_RTC+2)& (0+255),b
  6731  002B9E  0100               	movlb	0	; () banked
  6732  002BA0  3B88               	swapf	(??_update_RTC+2)& (0+255),f,b
  6733  002BA2  0E0F               	movlw	15
  6734  002BA4  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  6735  002BA6  0E0F               	movlw	15
  6736  002BA8  0100               	movlb	0	; () banked
  6737  002BAA  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  6738  002BAC  0100               	movlb	0	; () banked
  6739  002BAE  5188               	movf	(??_update_RTC+2)& (0+255),w,b
  6740  002BB0  0D0A               	mullw	10
  6741  002BB2  50F3               	movf	prodl,w,c
  6742  002BB4  0100               	movlb	0	; () banked
  6743  002BB6  2786               	addwf	??_update_RTC& (0+255),f,b
  6744  002BB8  50F4               	movf	prodh,w,c
  6745  002BBA  0100               	movlb	0	; () banked
  6746  002BBC  2387               	addwfc	(??_update_RTC+1)& (0+255),f,b
  6747  002BBE  0100               	movlb	0	; () banked
  6748  002BC0  518A               	movf	update_RTC@i& (0+255),w,b
  6749  002BC2  0D02               	mullw	2
  6750  002BC4  0E3E               	movlw	low _time_i
  6751  002BC6  24F3               	addwf	prodl,w,c
  6752  002BC8  6ED9               	movwf	fsr2l,c
  6753  002BCA  0E00               	movlw	high _time_i
  6754  002BCC  20F4               	addwfc	prodh,w,c
  6755  002BCE  6EDA               	movwf	fsr2h,c
  6756  002BD0  C086  FFDE         	movff	??_update_RTC,postinc2
  6757  002BD4  C087  FFDD         	movff	??_update_RTC+1,postdec2
  6758                           
  6759                           ; BSR set to: 0
  6760  002BD8  0100               	movlb	0	; () banked
  6761  002BDA  2B8A               	incf	update_RTC@i& (0+255),f,b
  6762  002BDC  D7B4               	goto	l5302
  6763  002BDE                     l5314:
  6764                           
  6765                           ; BSR set to: 0
  6766                           ;main.c: 189: }
  6767                           ;main.c: 190: timeDiff=time_i[1]*60-startTime[1]*60+time_i[0]-startTime[0];
  6768  002BDE  C10E  F086         	movff	_startTime,??_update_RTC
  6769  002BE2  C10F  F087         	movff	_startTime+1,??_update_RTC+1
  6770  002BE6  0100               	movlb	0	; () banked
  6771  002BE8  1F86               	comf	??_update_RTC& (0+255),f,b
  6772  002BEA  1F87               	comf	(??_update_RTC+1)& (0+255),f,b
  6773  002BEC  4B86               	infsnz	??_update_RTC& (0+255),f,b
  6774  002BEE  2B87               	incf	(??_update_RTC+1)& (0+255),f,b
  6775  002BF0  C040  F080         	movff	_time_i+2,___wmul@multiplier
  6776  002BF4  C041  F081         	movff	_time_i+3,___wmul@multiplier+1
  6777  002BF8  0E00               	movlw	0
  6778  002BFA  0100               	movlb	0	; () banked
  6779  002BFC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6780  002BFE  0E3C               	movlw	60
  6781  002C00  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6782  002C02  EC4F  F01B         	call	___wmul	;wreg free
  6783  002C06  C080  F088         	movff	?___wmul,??_update_RTC+2
  6784  002C0A  C081  F089         	movff	?___wmul+1,??_update_RTC+3
  6785  002C0E  C110  F080         	movff	_startTime+2,___wmul@multiplier
  6786  002C12  C111  F081         	movff	_startTime+3,___wmul@multiplier+1
  6787  002C16  0E00               	movlw	0
  6788  002C18  0100               	movlb	0	; () banked
  6789  002C1A  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6790  002C1C  0E3C               	movlw	60
  6791  002C1E  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6792  002C20  EC4F  F01B         	call	___wmul	;wreg free
  6793  002C24  0100               	movlb	0	; () banked
  6794  002C26  1F80               	comf	?___wmul& (0+255),f,b
  6795  002C28  0100               	movlb	0	; () banked
  6796  002C2A  1F81               	comf	(?___wmul+1)& (0+255),f,b
  6797  002C2C  0100               	movlb	0	; () banked
  6798  002C2E  4B80               	infsnz	?___wmul& (0+255),f,b
  6799  002C30  2B81               	incf	(?___wmul+1)& (0+255),f,b
  6800  002C32  0100               	movlb	0	; () banked
  6801  002C34  5180               	movf	?___wmul& (0+255),w,b
  6802  002C36  0100               	movlb	0	; () banked
  6803  002C38  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  6804  002C3A  0100               	movlb	0	; () banked
  6805  002C3C  5181               	movf	(?___wmul+1)& (0+255),w,b
  6806  002C3E  0100               	movlb	0	; () banked
  6807  002C40  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  6808  002C42  0100               	movlb	0	; () banked
  6809  002C44  5186               	movf	??_update_RTC& (0+255),w,b
  6810  002C46  0100               	movlb	0	; () banked
  6811  002C48  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  6812  002C4A  0100               	movlb	0	; () banked
  6813  002C4C  5187               	movf	(??_update_RTC+1)& (0+255),w,b
  6814  002C4E  0100               	movlb	0	; () banked
  6815  002C50  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  6816  002C52  503E               	movf	_time_i,w,c
  6817  002C54  0100               	movlb	0	; () banked
  6818  002C56  2588               	addwf	(??_update_RTC+2)& (0+255),w,b
  6819  002C58  0100               	movlb	0	; () banked
  6820  002C5A  6FD9               	movwf	_timeDiff& (0+255),b
  6821  002C5C  503F               	movf	_time_i+1,w,c
  6822  002C5E  0100               	movlb	0	; () banked
  6823  002C60  2189               	addwfc	(??_update_RTC+3)& (0+255),w,b
  6824  002C62  0100               	movlb	0	; () banked
  6825  002C64  6FDA               	movwf	(_timeDiff+1)& (0+255),b
  6826                           
  6827                           ; BSR set to: 0
  6828                           ;main.c: 191: time[6] = I2C_Master_Read(0);
  6829  002C66  0E00               	movlw	0
  6830  002C68  EC9E  F01B         	call	_I2C_Master_Read
  6831  002C6C  0100               	movlb	0	; () banked
  6832  002C6E  6FC8               	movwf	(_time+6)& (0+255),b
  6833                           
  6834                           ; BSR set to: 0
  6835                           ;main.c: 192: I2C_Master_Stop();
  6836  002C70  EC3D  F01C         	call	_I2C_Master_Stop	;wreg free
  6837  002C74  0012               	return		;funcret
  6838  002C76                     __end_of_update_RTC:
  6839                           	opt stack 0
  6840                           tosu	equ	0xFFF
  6841                           tosh	equ	0xFFE
  6842                           tosl	equ	0xFFD
  6843                           pclath	equ	0xFFA
  6844                           tblptru	equ	0xFF8
  6845                           tblptrh	equ	0xFF7
  6846                           tblptrl	equ	0xFF6
  6847                           tablat	equ	0xFF5
  6848                           prodh	equ	0xFF4
  6849                           prodl	equ	0xFF3
  6850                           intcon	equ	0xFF2
  6851                           intcon2	equ	0xFF1
  6852                           intcon3	equ	0xFF0
  6853                           indf0	equ	0xFEF
  6854                           postinc0	equ	0xFEE
  6855                           fsr0h	equ	0xFEA
  6856                           fsr0l	equ	0xFE9
  6857                           wreg	equ	0xFE8
  6858                           indf1	equ	0xFE7
  6859                           postinc1	equ	0xFE6
  6860                           postdec1	equ	0xFE5
  6861                           fsr1h	equ	0xFE2
  6862                           fsr1l	equ	0xFE1
  6863                           indf2	equ	0xFDF
  6864                           postinc2	equ	0xFDE
  6865                           postdec2	equ	0xFDD
  6866                           fsr2h	equ	0xFDA
  6867                           fsr2l	equ	0xFD9
  6868                           status	equ	0xFD8
  6869                           
  6870 ;; *************** function _I2C_Master_Read *****************
  6871 ;; Defined at:
  6872 ;;		line 53 in file "I2C.c"
  6873 ;; Parameters:    Size  Location     Type
  6874 ;;  a               1    wreg     unsigned char 
  6875 ;; Auto vars:     Size  Location     Type
  6876 ;;  a               1    1[BANK0 ] unsigned char 
  6877 ;;  temp            1    2[BANK0 ] unsigned char 
  6878 ;; Return value:  Size  Location     Type
  6879 ;;                  1    wreg      unsigned char 
  6880 ;; Registers used:
  6881 ;;		wreg, status,2, status,0, cstack
  6882 ;; Tracked objects:
  6883 ;;		On entry : 0/0
  6884 ;;		On exit  : 0/0
  6885 ;;		Unchanged: 0/0
  6886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6888 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6889 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6890 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6891 ;;Total ram usage:        2 bytes
  6892 ;; Hardware stack levels used:    1
  6893 ;; Hardware stack levels required when called:    6
  6894 ;; This function calls:
  6895 ;;		_I2C_Master_Wait
  6896 ;; This function is called by:
  6897 ;;		_update_RTC
  6898 ;; This function uses a non-reentrant model
  6899 ;;
  6900                           
  6901                           	psect	text16
  6902  00373C                     __ptext16:
  6903                           	opt stack 0
  6904  00373C                     _I2C_Master_Read:
  6905                           	opt stack 23
  6906                           
  6907                           ;incstack = 0
  6908                           ;I2C_Master_Read@a stored from wreg
  6909  00373C  0100               	movlb	0	; () banked
  6910  00373E  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  6911                           
  6912                           ;I2C.c: 55: unsigned char temp;
  6913                           ;I2C.c: 56: I2C_Master_Wait();
  6914  003740  EC1A  F01C         	call	_I2C_Master_Wait	;wreg free
  6915                           
  6916                           ;I2C.c: 57: RCEN = 1;
  6917  003744  86C5               	bsf	4037,3,c	;volatile
  6918                           
  6919                           ;I2C.c: 58: I2C_Master_Wait();
  6920  003746  EC1A  F01C         	call	_I2C_Master_Wait	;wreg free
  6921                           
  6922                           ;I2C.c: 59: temp = SSPBUF;
  6923  00374A  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  6924                           
  6925                           ;I2C.c: 60: I2C_Master_Wait();
  6926  00374E  EC1A  F01C         	call	_I2C_Master_Wait	;wreg free
  6927                           
  6928                           ;I2C.c: 61: ACKDT = (a)?0:1;
  6929  003752  0100               	movlb	0	; () banked
  6930  003754  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  6931  003756  0100               	movlb	0	; () banked
  6932  003758  A4D8               	btfss	status,2,c
  6933  00375A  D002               	goto	u6290
  6934  00375C  8AC5               	bsf	4037,5,c	;volatile
  6935  00375E  D001               	goto	l4716
  6936  003760                     u6290:
  6937  003760  9AC5               	bcf	4037,5,c	;volatile
  6938  003762                     l4716:
  6939                           
  6940                           ;I2C.c: 62: ACKEN = 1;
  6941  003762  88C5               	bsf	4037,4,c	;volatile
  6942                           
  6943                           ;I2C.c: 63: return temp;
  6944  003764  0100               	movlb	0	; () banked
  6945  003766  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  6946  003768  0012               	return	
  6947  00376A                     __end_of_I2C_Master_Read:
  6948                           	opt stack 0
  6949                           tosu	equ	0xFFF
  6950                           tosh	equ	0xFFE
  6951                           tosl	equ	0xFFD
  6952                           pclath	equ	0xFFA
  6953                           tblptru	equ	0xFF8
  6954                           tblptrh	equ	0xFF7
  6955                           tblptrl	equ	0xFF6
  6956                           tablat	equ	0xFF5
  6957                           prodh	equ	0xFF4
  6958                           prodl	equ	0xFF3
  6959                           intcon	equ	0xFF2
  6960                           intcon2	equ	0xFF1
  6961                           intcon3	equ	0xFF0
  6962                           indf0	equ	0xFEF
  6963                           postinc0	equ	0xFEE
  6964                           fsr0h	equ	0xFEA
  6965                           fsr0l	equ	0xFE9
  6966                           wreg	equ	0xFE8
  6967                           indf1	equ	0xFE7
  6968                           postinc1	equ	0xFE6
  6969                           postdec1	equ	0xFE5
  6970                           fsr1h	equ	0xFE2
  6971                           fsr1l	equ	0xFE1
  6972                           indf2	equ	0xFDF
  6973                           postinc2	equ	0xFDE
  6974                           postdec2	equ	0xFDD
  6975                           fsr2h	equ	0xFDA
  6976                           fsr2l	equ	0xFD9
  6977                           status	equ	0xFD8
  6978                           
  6979 ;; *************** function _sort *****************
  6980 ;; Defined at:
  6981 ;;		line 480 in file "main.c"
  6982 ;; Parameters:    Size  Location     Type
  6983 ;;		None
  6984 ;; Auto vars:     Size  Location     Type
  6985 ;;  i               2   24[BANK0 ] int 
  6986 ;; Return value:  Size  Location     Type
  6987 ;;                  1    wreg      void 
  6988 ;; Registers used:
  6989 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6990 ;; Tracked objects:
  6991 ;;		On entry : 0/0
  6992 ;;		On exit  : 0/0
  6993 ;;		Unchanged: 0/0
  6994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6997 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6998 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6999 ;;Total ram usage:        6 bytes
  7000 ;; Hardware stack levels used:    1
  7001 ;; Hardware stack levels required when called:    7
  7002 ;; This function calls:
  7003 ;;		___wmul
  7004 ;;		__measure
  7005 ;; This function is called by:
  7006 ;;		_main
  7007 ;; This function uses a non-reentrant model
  7008 ;;
  7009                           
  7010                           	psect	text17
  7011  0028D2                     __ptext17:
  7012                           	opt stack 0
  7013  0028D2                     _sort:
  7014                           	opt stack 23
  7015                           
  7016                           ;main.c: 492: if ((PROX1[0]+PROX2[0])&&measure_counter==0&&release_counter<=1000/40){
  7017                           
  7018                           ;main.c: 487: ;
  7019                           
  7020                           ;main.c: 485: ;
  7021                           
  7022                           ;main.c: 483: ;
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;incstack = 0
  7026  0028D2  506A               	movf	_PROX2,w,c
  7027  0028D4  2460               	addwf	_PROX1,w,c
  7028  0028D6  0100               	movlb	0	; () banked
  7029  0028D8  6F94               	movwf	??_sort& (0+255),b
  7030  0028DA  506B               	movf	_PROX2+1,w,c
  7031  0028DC  2061               	addwfc	_PROX1+1,w,c
  7032  0028DE  0100               	movlb	0	; () banked
  7033  0028E0  6F95               	movwf	(??_sort+1)& (0+255),b
  7034  0028E2  0100               	movlb	0	; () banked
  7035  0028E4  5194               	movf	??_sort& (0+255),w,b
  7036  0028E6  0100               	movlb	0	; () banked
  7037  0028E8  1195               	iorwf	(??_sort+1)& (0+255),w,b
  7038  0028EA  B4D8               	btfsc	status,2,c
  7039  0028EC  D043               	goto	l5378
  7040                           
  7041                           ; BSR set to: 0
  7042  0028EE  0100               	movlb	0	; () banked
  7043  0028F0  51D1               	movf	_measure_counter& (0+255),w,b
  7044  0028F2  0100               	movlb	0	; () banked
  7045  0028F4  11D2               	iorwf	(_measure_counter+1)& (0+255),w,b
  7046  0028F6  A4D8               	btfss	status,2,c
  7047  0028F8  D03D               	goto	l5378
  7048                           
  7049                           ; BSR set to: 0
  7050  0028FA  0100               	movlb	0	; () banked
  7051  0028FC  BFD4               	btfsc	(_release_counter+1)& (0+255),7,b
  7052  0028FE  D008               	goto	l5364
  7053  002900  0100               	movlb	0	; () banked
  7054  002902  51D4               	movf	(_release_counter+1)& (0+255),w,b
  7055  002904  E137               	bnz	l5378
  7056  002906  0E1A               	movlw	26
  7057  002908  0100               	movlb	0	; () banked
  7058  00290A  5DD3               	subwf	_release_counter& (0+255),w,b
  7059  00290C  B0D8               	btfsc	status,0,c
  7060  00290E  D032               	goto	l5378
  7061  002910                     l5364:
  7062                           
  7063                           ; BSR set to: 0
  7064                           ;main.c: 493: measure_counter=measure;
  7065  002910  C170  F0D1         	movff	_measure,_measure_counter
  7066  002914  C171  F0D2         	movff	_measure+1,_measure_counter+1
  7067                           
  7068                           ; BSR set to: 0
  7069                           ;main.c: 494: int i;
  7070                           ;main.c: 495: for (i=0;i<7;i++)
  7071  002918  0E00               	movlw	0
  7072  00291A  0100               	movlb	0	; () banked
  7073  00291C  6F99               	movwf	(sort@i+1)& (0+255),b
  7074  00291E  0E00               	movlw	0
  7075  002920  6F98               	movwf	sort@i& (0+255),b
  7076  002922                     l5368:
  7077                           
  7078                           ; BSR set to: 0
  7079  002922  0100               	movlb	0	; () banked
  7080  002924  BF99               	btfsc	(sort@i+1)& (0+255),7,b
  7081  002926  D008               	goto	l5372
  7082  002928  0100               	movlb	0	; () banked
  7083  00292A  5199               	movf	(sort@i+1)& (0+255),w,b
  7084  00292C  E123               	bnz	l5378
  7085  00292E  0E07               	movlw	7
  7086  002930  0100               	movlb	0	; () banked
  7087  002932  5D98               	subwf	sort@i& (0+255),w,b
  7088  002934  B0D8               	btfsc	status,0,c
  7089  002936  D01E               	goto	l5378
  7090  002938                     l5372:
  7091                           
  7092                           ; BSR set to: 0
  7093                           ;main.c: 496: latestSortedBottleTime[i]=time_i[i];
  7094  002938  90D8               	bcf	status,0,c
  7095  00293A  0100               	movlb	0	; () banked
  7096  00293C  3598               	rlcf	sort@i& (0+255),w,b
  7097  00293E  6ED9               	movwf	fsr2l,c
  7098  002940  0100               	movlb	0	; () banked
  7099  002942  3599               	rlcf	(sort@i+1)& (0+255),w,b
  7100  002944  6EDA               	movwf	fsr2h,c
  7101  002946  0E3E               	movlw	low _time_i
  7102  002948  26D9               	addwf	fsr2l,f,c
  7103  00294A  0E00               	movlw	high _time_i
  7104  00294C  22DA               	addwfc	fsr2h,f,c
  7105  00294E  90D8               	bcf	status,0,c
  7106  002950  0100               	movlb	0	; () banked
  7107  002952  3598               	rlcf	sort@i& (0+255),w,b
  7108  002954  6EE1               	movwf	fsr1l,c
  7109  002956  0100               	movlb	0	; () banked
  7110  002958  3599               	rlcf	(sort@i+1)& (0+255),w,b
  7111  00295A  6EE2               	movwf	fsr1h,c
  7112  00295C  0E00               	movlw	low _latestSortedBottleTime
  7113  00295E  26E1               	addwf	fsr1l,f,c
  7114  002960  0E01               	movlw	high _latestSortedBottleTime
  7115  002962  22E2               	addwfc	fsr1h,f,c
  7116  002964  CFDE FFE6          	movff	postinc2,postinc1
  7117  002968  CFDD FFE5          	movff	postdec2,postdec1
  7118                           
  7119                           ; BSR set to: 0
  7120  00296C  0100               	movlb	0	; () banked
  7121  00296E  4B98               	infsnz	sort@i& (0+255),f,b
  7122  002970  2B99               	incf	(sort@i+1)& (0+255),f,b
  7123  002972  D7D7               	goto	l5368
  7124  002974                     l5378:
  7125                           
  7126                           ; BSR set to: 0
  7127                           ;main.c: 497: }
  7128                           ;main.c: 498: if (measure_counter==1){
  7129  002974  0100               	movlb	0	; () banked
  7130  002976  05D1               	decf	_measure_counter& (0+255),w,b
  7131  002978  0100               	movlb	0	; () banked
  7132  00297A  11D2               	iorwf	(_measure_counter+1)& (0+255),w,b
  7133  00297C  A4D8               	btfss	status,2,c
  7134  00297E  D041               	goto	l5406
  7135                           
  7136                           ; BSR set to: 0
  7137                           ;main.c: 499: bottle_type=_measure();
  7138  002980  EC2A  F00E         	call	__measure	;wreg free
  7139  002984  C086  F0C9         	movff	?__measure,_bottle_type
  7140  002988  C087  F0CA         	movff	?__measure+1,_bottle_type+1
  7141                           
  7142                           ;main.c: 501: if (bottle_type!=0&&release_counter==0){
  7143  00298C  0100               	movlb	0	; () banked
  7144  00298E  51C9               	movf	_bottle_type& (0+255),w,b
  7145  002990  0100               	movlb	0	; () banked
  7146  002992  11CA               	iorwf	(_bottle_type+1)& (0+255),w,b
  7147  002994  B4D8               	btfsc	status,2,c
  7148  002996  D032               	goto	l5404
  7149                           
  7150                           ; BSR set to: 0
  7151  002998  0100               	movlb	0	; () banked
  7152  00299A  51D3               	movf	_release_counter& (0+255),w,b
  7153  00299C  0100               	movlb	0	; () banked
  7154  00299E  11D4               	iorwf	(_release_counter+1)& (0+255),w,b
  7155  0029A0  A4D8               	btfss	status,2,c
  7156  0029A2  D02C               	goto	l5404
  7157                           
  7158                           ; BSR set to: 0
  7159                           ;main.c: 502: release_counter=release;
  7160  0029A4  C172  F0D3         	movff	_release,_release_counter
  7161  0029A8  C173  F0D4         	movff	_release+1,_release_counter+1
  7162                           
  7163                           ; BSR set to: 0
  7164                           ;main.c: 503: if (bottle_type==1)
  7165  0029AC  0100               	movlb	0	; () banked
  7166  0029AE  05C9               	decf	_bottle_type& (0+255),w,b
  7167  0029B0  0100               	movlb	0	; () banked
  7168  0029B2  11CA               	iorwf	(_bottle_type+1)& (0+255),w,b
  7169  0029B4  A4D8               	btfss	status,2,c
  7170  0029B6  D003               	goto	l5392
  7171                           
  7172                           ; BSR set to: 0
  7173                           ;main.c: 504: eskaNoCap++;
  7174  0029B8  0100               	movlb	0	; () banked
  7175  0029BA  4BCD               	infsnz	_eskaNoCap& (0+255),f,b
  7176  0029BC  2BCE               	incf	(_eskaNoCap+1)& (0+255),f,b
  7177  0029BE                     l5392:
  7178                           
  7179                           ; BSR set to: 0
  7180                           ;main.c: 505: if (bottle_type==2)
  7181  0029BE  0E02               	movlw	2
  7182  0029C0  0100               	movlb	0	; () banked
  7183  0029C2  19C9               	xorwf	_bottle_type& (0+255),w,b
  7184  0029C4  0100               	movlb	0	; () banked
  7185  0029C6  11CA               	iorwf	(_bottle_type+1)& (0+255),w,b
  7186  0029C8  A4D8               	btfss	status,2,c
  7187  0029CA  D003               	goto	l5396
  7188                           
  7189                           ; BSR set to: 0
  7190                           ;main.c: 506: eskaWCap++;
  7191  0029CC  0100               	movlb	0	; () banked
  7192  0029CE  4BCF               	infsnz	_eskaWCap& (0+255),f,b
  7193  0029D0  2BD0               	incf	(_eskaWCap+1)& (0+255),f,b
  7194  0029D2                     l5396:
  7195                           
  7196                           ; BSR set to: 0
  7197                           ;main.c: 507: if (bottle_type==3)
  7198  0029D2  0E03               	movlw	3
  7199  0029D4  0100               	movlb	0	; () banked
  7200  0029D6  19C9               	xorwf	_bottle_type& (0+255),w,b
  7201  0029D8  0100               	movlb	0	; () banked
  7202  0029DA  11CA               	iorwf	(_bottle_type+1)& (0+255),w,b
  7203  0029DC  A4D8               	btfss	status,2,c
  7204  0029DE  D003               	goto	l5400
  7205                           
  7206                           ; BSR set to: 0
  7207                           ;main.c: 508: yopNoCap++;
  7208  0029E0  0100               	movlb	0	; () banked
  7209  0029E2  4BDB               	infsnz	_yopNoCap& (0+255),f,b
  7210  0029E4  2BDC               	incf	(_yopNoCap+1)& (0+255),f,b
  7211  0029E6                     l5400:
  7212                           
  7213                           ; BSR set to: 0
  7214                           ;main.c: 509: if (bottle_type==4)
  7215  0029E6  0E04               	movlw	4
  7216  0029E8  0100               	movlb	0	; () banked
  7217  0029EA  19C9               	xorwf	_bottle_type& (0+255),w,b
  7218  0029EC  0100               	movlb	0	; () banked
  7219  0029EE  11CA               	iorwf	(_bottle_type+1)& (0+255),w,b
  7220  0029F0  A4D8               	btfss	status,2,c
  7221  0029F2  D007               	goto	l5406
  7222                           
  7223                           ; BSR set to: 0
  7224                           ;main.c: 510: yopWCap++;
  7225  0029F4  0100               	movlb	0	; () banked
  7226  0029F6  4BDD               	infsnz	_yopWCap& (0+255),f,b
  7227  0029F8  2BDE               	incf	(_yopWCap+1)& (0+255),f,b
  7228                           
  7229                           ; BSR set to: 0
  7230                           ;main.c: 511: }
  7231  0029FA  D003               	goto	l5406
  7232  0029FC                     l5404:
  7233                           
  7234                           ; BSR set to: 0
  7235                           ;main.c: 512: else
  7236                           ;main.c: 513: measure_counter+=1;
  7237  0029FC  0100               	movlb	0	; () banked
  7238  0029FE  4BD1               	infsnz	_measure_counter& (0+255),f,b
  7239  002A00  2BD2               	incf	(_measure_counter+1)& (0+255),f,b
  7240  002A02                     l5406:
  7241                           
  7242                           ; BSR set to: 0
  7243                           ;main.c: 514: }
  7244                           ;main.c: 519: if (release_counter==1000/40)
  7245  002A02  0E19               	movlw	25
  7246  002A04  0100               	movlb	0	; () banked
  7247  002A06  19D3               	xorwf	_release_counter& (0+255),w,b
  7248  002A08  0100               	movlb	0	; () banked
  7249  002A0A  11D4               	iorwf	(_release_counter+1)& (0+255),w,b
  7250  002A0C  A4D8               	btfss	status,2,c
  7251  002A0E  D004               	goto	l5432
  7252                           
  7253                           ; BSR set to: 0
  7254                           ;main.c: 520: discretize_counter=discretize;
  7255  002A10  C16E  F0CB         	movff	_discretize,_discretize_counter
  7256  002A14  C16F  F0CC         	movff	_discretize+1,_discretize_counter+1
  7257  002A18                     l5432:
  7258                           
  7259                           ; BSR set to: 0
  7260                           ;main.c: 533: }
  7261                           ;main.c: 536: if (discretize_counter>0)
  7262  002A18  0100               	movlb	0	; () banked
  7263  002A1A  BFCC               	btfsc	(_discretize_counter+1)& (0+255),7,b
  7264  002A1C  D00B               	goto	l5436
  7265  002A1E  0100               	movlb	0	; () banked
  7266  002A20  51CC               	movf	(_discretize_counter+1)& (0+255),w,b
  7267  002A22  E104               	bnz	u7640
  7268  002A24  0100               	movlb	0	; () banked
  7269  002A26  05CB               	decf	_discretize_counter& (0+255),w,b
  7270  002A28  A0D8               	btfss	status,0,c
  7271  002A2A  D004               	goto	l5436
  7272  002A2C                     u7640:
  7273                           
  7274                           ; BSR set to: 0
  7275                           ;main.c: 537: discretize_counter--;
  7276  002A2C  0100               	movlb	0	; () banked
  7277  002A2E  07CB               	decf	_discretize_counter& (0+255),f,b
  7278  002A30  A0D8               	btfss	status,0,c
  7279  002A32  07CC               	decf	(_discretize_counter+1)& (0+255),f,b
  7280  002A34                     l5436:
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;main.c: 538: if (measure_counter>0)
  7284  002A34  0100               	movlb	0	; () banked
  7285  002A36  BFD2               	btfsc	(_measure_counter+1)& (0+255),7,b
  7286  002A38  D00B               	goto	l5440
  7287  002A3A  0100               	movlb	0	; () banked
  7288  002A3C  51D2               	movf	(_measure_counter+1)& (0+255),w,b
  7289  002A3E  E104               	bnz	u7650
  7290  002A40  0100               	movlb	0	; () banked
  7291  002A42  05D1               	decf	_measure_counter& (0+255),w,b
  7292  002A44  A0D8               	btfss	status,0,c
  7293  002A46  D004               	goto	l5440
  7294  002A48                     u7650:
  7295                           
  7296                           ; BSR set to: 0
  7297                           ;main.c: 539: measure_counter--;
  7298  002A48  0100               	movlb	0	; () banked
  7299  002A4A  07D1               	decf	_measure_counter& (0+255),f,b
  7300  002A4C  A0D8               	btfss	status,0,c
  7301  002A4E  07D2               	decf	(_measure_counter+1)& (0+255),f,b
  7302  002A50                     l5440:
  7303                           
  7304                           ; BSR set to: 0
  7305                           ;main.c: 540: if (release_counter>0)
  7306  002A50  0100               	movlb	0	; () banked
  7307  002A52  BFD4               	btfsc	(_release_counter+1)& (0+255),7,b
  7308  002A54  D00B               	goto	l5444
  7309  002A56  0100               	movlb	0	; () banked
  7310  002A58  51D4               	movf	(_release_counter+1)& (0+255),w,b
  7311  002A5A  E104               	bnz	u7660
  7312  002A5C  0100               	movlb	0	; () banked
  7313  002A5E  05D3               	decf	_release_counter& (0+255),w,b
  7314  002A60  A0D8               	btfss	status,0,c
  7315  002A62  D004               	goto	l5444
  7316  002A64                     u7660:
  7317                           
  7318                           ; BSR set to: 0
  7319                           ;main.c: 541: release_counter--;
  7320  002A64  0100               	movlb	0	; () banked
  7321  002A66  07D3               	decf	_release_counter& (0+255),f,b
  7322  002A68  A0D8               	btfss	status,0,c
  7323  002A6A  07D4               	decf	(_release_counter+1)& (0+255),f,b
  7324  002A6C                     l5444:
  7325                           
  7326                           ; BSR set to: 0
  7327                           ;main.c: 544: if (time_i[1]*60-latestSortedBottleTime[1]*60+time_i[0]-latestSortedBottle
      +                          Time[0]>=15)
  7328  002A6C  C100  F094         	movff	_latestSortedBottleTime,??_sort
  7329  002A70  C101  F095         	movff	_latestSortedBottleTime+1,??_sort+1
  7330  002A74  0100               	movlb	0	; () banked
  7331  002A76  1F94               	comf	??_sort& (0+255),f,b
  7332  002A78  1F95               	comf	(??_sort+1)& (0+255),f,b
  7333  002A7A  4B94               	infsnz	??_sort& (0+255),f,b
  7334  002A7C  2B95               	incf	(??_sort+1)& (0+255),f,b
  7335  002A7E  C040  F080         	movff	_time_i+2,___wmul@multiplier
  7336  002A82  C041  F081         	movff	_time_i+3,___wmul@multiplier+1
  7337  002A86  0E00               	movlw	0
  7338  002A88  0100               	movlb	0	; () banked
  7339  002A8A  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7340  002A8C  0E3C               	movlw	60
  7341  002A8E  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7342  002A90  EC4F  F01B         	call	___wmul	;wreg free
  7343  002A94  C080  F096         	movff	?___wmul,??_sort+2
  7344  002A98  C081  F097         	movff	?___wmul+1,??_sort+3
  7345  002A9C  C102  F080         	movff	_latestSortedBottleTime+2,___wmul@multiplier
  7346  002AA0  C103  F081         	movff	_latestSortedBottleTime+3,___wmul@multiplier+1
  7347  002AA4  0E00               	movlw	0
  7348  002AA6  0100               	movlb	0	; () banked
  7349  002AA8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7350  002AAA  0E3C               	movlw	60
  7351  002AAC  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7352  002AAE  EC4F  F01B         	call	___wmul	;wreg free
  7353  002AB2  0100               	movlb	0	; () banked
  7354  002AB4  1F80               	comf	?___wmul& (0+255),f,b
  7355  002AB6  0100               	movlb	0	; () banked
  7356  002AB8  1F81               	comf	(?___wmul+1)& (0+255),f,b
  7357  002ABA  0100               	movlb	0	; () banked
  7358  002ABC  4B80               	infsnz	?___wmul& (0+255),f,b
  7359  002ABE  2B81               	incf	(?___wmul+1)& (0+255),f,b
  7360  002AC0  0100               	movlb	0	; () banked
  7361  002AC2  5180               	movf	?___wmul& (0+255),w,b
  7362  002AC4  0100               	movlb	0	; () banked
  7363  002AC6  2796               	addwf	(??_sort+2)& (0+255),f,b
  7364  002AC8  0100               	movlb	0	; () banked
  7365  002ACA  5181               	movf	(?___wmul+1)& (0+255),w,b
  7366  002ACC  0100               	movlb	0	; () banked
  7367  002ACE  2397               	addwfc	(??_sort+3)& (0+255),f,b
  7368  002AD0  0100               	movlb	0	; () banked
  7369  002AD2  5194               	movf	??_sort& (0+255),w,b
  7370  002AD4  0100               	movlb	0	; () banked
  7371  002AD6  2796               	addwf	(??_sort+2)& (0+255),f,b
  7372  002AD8  0100               	movlb	0	; () banked
  7373  002ADA  5195               	movf	(??_sort+1)& (0+255),w,b
  7374  002ADC  0100               	movlb	0	; () banked
  7375  002ADE  2397               	addwfc	(??_sort+3)& (0+255),f,b
  7376  002AE0  503E               	movf	_time_i,w,c
  7377  002AE2  0100               	movlb	0	; () banked
  7378  002AE4  2796               	addwf	(??_sort+2)& (0+255),f,b
  7379  002AE6  503F               	movf	_time_i+1,w,c
  7380  002AE8  0100               	movlb	0	; () banked
  7381  002AEA  2397               	addwfc	(??_sort+3)& (0+255),f,b
  7382  002AEC  0100               	movlb	0	; () banked
  7383  002AEE  BF97               	btfsc	(??_sort+3)& (0+255),7,b
  7384  002AF0  0012               	return	
  7385  002AF2  0100               	movlb	0	; () banked
  7386  002AF4  5197               	movf	(??_sort+3)& (0+255),w,b
  7387  002AF6  E105               	bnz	u7670
  7388  002AF8  0E0F               	movlw	15
  7389  002AFA  0100               	movlb	0	; () banked
  7390  002AFC  5D96               	subwf	(??_sort+2)& (0+255),w,b
  7391  002AFE  A0D8               	btfss	status,0,c
  7392  002B00  0012               	return	
  7393  002B02                     u7670:
  7394                           
  7395                           ; BSR set to: 0
  7396                           ;main.c: 545: nstate='e';
  7397  002B02  0E65               	movlw	101
  7398  002B04  0100               	movlb	0	; () banked
  7399  002B06  6FE7               	movwf	_nstate& (0+255),b
  7400  002B08  0012               	return	
  7401  002B0A                     __end_of_sort:
  7402                           	opt stack 0
  7403                           tosu	equ	0xFFF
  7404                           tosh	equ	0xFFE
  7405                           tosl	equ	0xFFD
  7406                           pclath	equ	0xFFA
  7407                           tblptru	equ	0xFF8
  7408                           tblptrh	equ	0xFF7
  7409                           tblptrl	equ	0xFF6
  7410                           tablat	equ	0xFF5
  7411                           prodh	equ	0xFF4
  7412                           prodl	equ	0xFF3
  7413                           intcon	equ	0xFF2
  7414                           intcon2	equ	0xFF1
  7415                           intcon3	equ	0xFF0
  7416                           indf0	equ	0xFEF
  7417                           postinc0	equ	0xFEE
  7418                           fsr0h	equ	0xFEA
  7419                           fsr0l	equ	0xFE9
  7420                           wreg	equ	0xFE8
  7421                           indf1	equ	0xFE7
  7422                           postinc1	equ	0xFE6
  7423                           postdec1	equ	0xFE5
  7424                           fsr1h	equ	0xFE2
  7425                           fsr1l	equ	0xFE1
  7426                           indf2	equ	0xFDF
  7427                           postinc2	equ	0xFDE
  7428                           postdec2	equ	0xFDD
  7429                           fsr2h	equ	0xFDA
  7430                           fsr2l	equ	0xFD9
  7431                           status	equ	0xFD8
  7432                           
  7433 ;; *************** function __measure *****************
  7434 ;; Defined at:
  7435 ;;		line 576 in file "main.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;		None
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;  i               1   17[BANK0 ] unsigned char 
  7440 ;;  i               1   16[BANK0 ] unsigned char 
  7441 ;;  i               1   15[BANK0 ] unsigned char 
  7442 ;;  i               1   14[BANK0 ] unsigned char 
  7443 ;;  i               1   13[BANK0 ] unsigned char 
  7444 ;;  i               1   12[BANK0 ] unsigned char 
  7445 ;;  i               1   11[BANK0 ] unsigned char 
  7446 ;;  i               1   10[BANK0 ] unsigned char 
  7447 ;;  measurement     2   18[BANK0 ] int 
  7448 ;; Return value:  Size  Location     Type
  7449 ;;                  2    6[BANK0 ] int 
  7450 ;; Registers used:
  7451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7452 ;; Tracked objects:
  7453 ;;		On entry : 0/0
  7454 ;;		On exit  : 0/0
  7455 ;;		Unchanged: 0/0
  7456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7457 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7458 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7459 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7460 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7461 ;;Total ram usage:       14 bytes
  7462 ;; Hardware stack levels used:    1
  7463 ;; Hardware stack levels required when called:    6
  7464 ;; This function calls:
  7465 ;;		___awmod
  7466 ;; This function is called by:
  7467 ;;		_update_display
  7468 ;;		_sort
  7469 ;; This function uses a non-reentrant model
  7470 ;;
  7471                           
  7472                           	psect	text18
  7473  001C54                     __ptext18:
  7474                           	opt stack 0
  7475  001C54                     __measure:
  7476                           	opt stack 23
  7477                           
  7478                           ;main.c: 588: int measurement=0;
  7479                           
  7480                           ; BSR set to: 0
  7481                           ;incstack = 0
  7482  001C54  0E00               	movlw	0
  7483  001C56  0100               	movlb	0	; () banked
  7484  001C58  6F93               	movwf	(__measure@measurement+1)& (0+255),b
  7485  001C5A  0E00               	movlw	0
  7486  001C5C  6F92               	movwf	__measure@measurement& (0+255),b
  7487                           
  7488                           ;main.c: 591: for (char i=0;i<5;i++)
  7489  001C5E  0E00               	movlw	0
  7490  001C60  0100               	movlb	0	; () banked
  7491  001C62  6F8A               	movwf	__measure@i& (0+255),b
  7492  001C64                     l4802:
  7493                           
  7494                           ; BSR set to: 0
  7495  001C64  0E04               	movlw	4
  7496  001C66  0100               	movlb	0	; () banked
  7497  001C68  658A               	cpfsgt	__measure@i& (0+255),b
  7498  001C6A  D001               	goto	l4806
  7499  001C6C  D012               	goto	l4812
  7500  001C6E                     l4806:
  7501                           
  7502                           ; BSR set to: 0
  7503                           ;main.c: 592: measurement+=PROX1[i];
  7504  001C6E  0100               	movlb	0	; () banked
  7505  001C70  518A               	movf	__measure@i& (0+255),w,b
  7506  001C72  0D02               	mullw	2
  7507  001C74  0E60               	movlw	low _PROX1
  7508  001C76  24F3               	addwf	prodl,w,c
  7509  001C78  6ED9               	movwf	fsr2l,c
  7510  001C7A  0E00               	movlw	high _PROX1
  7511  001C7C  20F4               	addwfc	prodh,w,c
  7512  001C7E  6EDA               	movwf	fsr2h,c
  7513  001C80  50DE               	movf	postinc2,w,c
  7514  001C82  0100               	movlb	0	; () banked
  7515  001C84  2792               	addwf	__measure@measurement& (0+255),f,b
  7516  001C86  50DD               	movf	postdec2,w,c
  7517  001C88  0100               	movlb	0	; () banked
  7518  001C8A  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  7519                           
  7520                           ; BSR set to: 0
  7521  001C8C  0100               	movlb	0	; () banked
  7522  001C8E  2B8A               	incf	__measure@i& (0+255),f,b
  7523  001C90  D7E9               	goto	l4802
  7524  001C92                     l4812:
  7525                           
  7526                           ; BSR set to: 0
  7527                           ;main.c: 593: if (measurement%5!=0)
  7528  001C92  C092  F080         	movff	__measure@measurement,___awmod@dividend
  7529  001C96  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  7530  001C9A  0E00               	movlw	0
  7531  001C9C  0100               	movlb	0	; () banked
  7532  001C9E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7533  001CA0  0E05               	movlw	5
  7534  001CA2  6F82               	movwf	___awmod@divisor& (0+255),b
  7535  001CA4  EC68  F018         	call	___awmod	;wreg free
  7536  001CA8  0100               	movlb	0	; () banked
  7537  001CAA  5180               	movf	?___awmod& (0+255),w,b
  7538  001CAC  0100               	movlb	0	; () banked
  7539  001CAE  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  7540  001CB0  B4D8               	btfsc	status,2,c
  7541  001CB2  D006               	goto	l4818
  7542                           
  7543                           ; BSR set to: 0
  7544                           ;main.c: 594: return 0;
  7545  001CB4  0E00               	movlw	0
  7546  001CB6  0100               	movlb	0	; () banked
  7547  001CB8  6F87               	movwf	(?__measure+1)& (0+255),b
  7548  001CBA  0E00               	movlw	0
  7549  001CBC  6F86               	movwf	?__measure& (0+255),b
  7550                           
  7551                           ; BSR set to: 0
  7552  001CBE  0012               	return	
  7553  001CC0                     l4818:
  7554                           
  7555                           ; BSR set to: 0
  7556                           ;main.c: 595: for (char i=0;i<5;i++)
  7557  001CC0  0E00               	movlw	0
  7558  001CC2  0100               	movlb	0	; () banked
  7559  001CC4  6F8B               	movwf	__measure@i_482& (0+255),b
  7560  001CC6                     l4820:
  7561                           
  7562                           ; BSR set to: 0
  7563  001CC6  0E04               	movlw	4
  7564  001CC8  0100               	movlb	0	; () banked
  7565  001CCA  658B               	cpfsgt	__measure@i_482& (0+255),b
  7566  001CCC  D001               	goto	l4824
  7567  001CCE  D012               	goto	l4830
  7568  001CD0                     l4824:
  7569                           
  7570                           ; BSR set to: 0
  7571                           ;main.c: 596: measurement+=PROX2[i];
  7572  001CD0  0100               	movlb	0	; () banked
  7573  001CD2  518B               	movf	__measure@i_482& (0+255),w,b
  7574  001CD4  0D02               	mullw	2
  7575  001CD6  0E6A               	movlw	low _PROX2
  7576  001CD8  24F3               	addwf	prodl,w,c
  7577  001CDA  6ED9               	movwf	fsr2l,c
  7578  001CDC  0E00               	movlw	high _PROX2
  7579  001CDE  20F4               	addwfc	prodh,w,c
  7580  001CE0  6EDA               	movwf	fsr2h,c
  7581  001CE2  50DE               	movf	postinc2,w,c
  7582  001CE4  0100               	movlb	0	; () banked
  7583  001CE6  2792               	addwf	__measure@measurement& (0+255),f,b
  7584  001CE8  50DD               	movf	postdec2,w,c
  7585  001CEA  0100               	movlb	0	; () banked
  7586  001CEC  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  7587                           
  7588                           ; BSR set to: 0
  7589  001CEE  0100               	movlb	0	; () banked
  7590  001CF0  2B8B               	incf	__measure@i_482& (0+255),f,b
  7591  001CF2  D7E9               	goto	l4820
  7592  001CF4                     l4830:
  7593                           
  7594                           ; BSR set to: 0
  7595                           ;main.c: 597: if (measurement%5!=0)
  7596  001CF4  C092  F080         	movff	__measure@measurement,___awmod@dividend
  7597  001CF8  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  7598  001CFC  0E00               	movlw	0
  7599  001CFE  0100               	movlb	0	; () banked
  7600  001D00  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7601  001D02  0E05               	movlw	5
  7602  001D04  6F82               	movwf	___awmod@divisor& (0+255),b
  7603  001D06  EC68  F018         	call	___awmod	;wreg free
  7604  001D0A  0100               	movlb	0	; () banked
  7605  001D0C  5180               	movf	?___awmod& (0+255),w,b
  7606  001D0E  0100               	movlb	0	; () banked
  7607  001D10  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  7608  001D12  B4D8               	btfsc	status,2,c
  7609  001D14  D006               	goto	l4836
  7610                           
  7611                           ; BSR set to: 0
  7612                           ;main.c: 598: return 0;
  7613  001D16  0E00               	movlw	0
  7614  001D18  0100               	movlb	0	; () banked
  7615  001D1A  6F87               	movwf	(?__measure+1)& (0+255),b
  7616  001D1C  0E00               	movlw	0
  7617  001D1E  6F86               	movwf	?__measure& (0+255),b
  7618                           
  7619                           ; BSR set to: 0
  7620  001D20  0012               	return	
  7621  001D22                     l4836:
  7622                           
  7623                           ; BSR set to: 0
  7624                           ;main.c: 601: for (char i=0;i<5;i++)
  7625  001D22  0E00               	movlw	0
  7626  001D24  0100               	movlb	0	; () banked
  7627  001D26  6F8C               	movwf	__measure@i_483& (0+255),b
  7628  001D28                     l4838:
  7629                           
  7630                           ; BSR set to: 0
  7631  001D28  0E04               	movlw	4
  7632  001D2A  0100               	movlb	0	; () banked
  7633  001D2C  658C               	cpfsgt	__measure@i_483& (0+255),b
  7634  001D2E  D001               	goto	l4842
  7635  001D30  D01B               	goto	l4848
  7636  001D32                     l4842:
  7637                           
  7638                           ; BSR set to: 0
  7639                           ;main.c: 602: measurement+=(DIST1[i]<DIST_THRESHOLD_LOW);
  7640  001D32  0100               	movlb	0	; () banked
  7641  001D34  518C               	movf	__measure@i_483& (0+255),w,b
  7642  001D36  0D02               	mullw	2
  7643  001D38  0E4C               	movlw	low _DIST1
  7644  001D3A  24F3               	addwf	prodl,w,c
  7645  001D3C  6ED9               	movwf	fsr2l,c
  7646  001D3E  0E00               	movlw	high _DIST1
  7647  001D40  20F4               	addwfc	prodh,w,c
  7648  001D42  6EDA               	movwf	fsr2h,c
  7649  001D44  0100               	movlb	0	; () banked
  7650  001D46  51E1               	movf	_DIST_THRESHOLD_LOW& (0+255),w,b
  7651  001D48  5CDE               	subwf	postinc2,w,c
  7652  001D4A  0100               	movlb	0	; () banked
  7653  001D4C  51E2               	movf	(_DIST_THRESHOLD_LOW+1)& (0+255),w,b
  7654  001D4E  58DE               	subwfb	postinc2,w,c
  7655  001D50  B0D8               	btfsc	status,0,c
  7656  001D52  D002               	goto	u6430
  7657  001D54  0E01               	movlw	1
  7658  001D56  D001               	goto	u6440
  7659  001D58                     u6430:
  7660  001D58  0E00               	movlw	0
  7661  001D5A                     u6440:
  7662  001D5A  0100               	movlb	0	; () banked
  7663  001D5C  2792               	addwf	__measure@measurement& (0+255),f,b
  7664  001D5E  0E00               	movlw	0
  7665  001D60  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  7666                           
  7667                           ; BSR set to: 0
  7668  001D62  0100               	movlb	0	; () banked
  7669  001D64  2B8C               	incf	__measure@i_483& (0+255),f,b
  7670  001D66  D7E0               	goto	l4838
  7671  001D68                     l4848:
  7672                           
  7673                           ; BSR set to: 0
  7674                           ;main.c: 603: if (measurement%5!=0)
  7675  001D68  C092  F080         	movff	__measure@measurement,___awmod@dividend
  7676  001D6C  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  7677  001D70  0E00               	movlw	0
  7678  001D72  0100               	movlb	0	; () banked
  7679  001D74  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7680  001D76  0E05               	movlw	5
  7681  001D78  6F82               	movwf	___awmod@divisor& (0+255),b
  7682  001D7A  EC68  F018         	call	___awmod	;wreg free
  7683  001D7E  0100               	movlb	0	; () banked
  7684  001D80  5180               	movf	?___awmod& (0+255),w,b
  7685  001D82  0100               	movlb	0	; () banked
  7686  001D84  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  7687  001D86  B4D8               	btfsc	status,2,c
  7688  001D88  D006               	goto	l4854
  7689                           
  7690                           ; BSR set to: 0
  7691                           ;main.c: 604: return 0;
  7692  001D8A  0E00               	movlw	0
  7693  001D8C  0100               	movlb	0	; () banked
  7694  001D8E  6F87               	movwf	(?__measure+1)& (0+255),b
  7695  001D90  0E00               	movlw	0
  7696  001D92  6F86               	movwf	?__measure& (0+255),b
  7697                           
  7698                           ; BSR set to: 0
  7699  001D94  0012               	return	
  7700  001D96                     l4854:
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;main.c: 605: for (char i=0;i<5;i++)
  7704  001D96  0E00               	movlw	0
  7705  001D98  0100               	movlb	0	; () banked
  7706  001D9A  6F8D               	movwf	__measure@i_484& (0+255),b
  7707  001D9C                     l4856:
  7708                           
  7709                           ; BSR set to: 0
  7710  001D9C  0E04               	movlw	4
  7711  001D9E  0100               	movlb	0	; () banked
  7712  001DA0  658D               	cpfsgt	__measure@i_484& (0+255),b
  7713  001DA2  D001               	goto	l4860
  7714  001DA4  D01B               	goto	l4866
  7715  001DA6                     l4860:
  7716                           
  7717                           ; BSR set to: 0
  7718                           ;main.c: 606: measurement+=(DIST1[i]<DIST_THRESHOLD_HI);
  7719  001DA6  0100               	movlb	0	; () banked
  7720  001DA8  518D               	movf	__measure@i_484& (0+255),w,b
  7721  001DAA  0D02               	mullw	2
  7722  001DAC  0E4C               	movlw	low _DIST1
  7723  001DAE  24F3               	addwf	prodl,w,c
  7724  001DB0  6ED9               	movwf	fsr2l,c
  7725  001DB2  0E00               	movlw	high _DIST1
  7726  001DB4  20F4               	addwfc	prodh,w,c
  7727  001DB6  6EDA               	movwf	fsr2h,c
  7728  001DB8  0100               	movlb	0	; () banked
  7729  001DBA  51DF               	movf	_DIST_THRESHOLD_HI& (0+255),w,b
  7730  001DBC  5CDE               	subwf	postinc2,w,c
  7731  001DBE  0100               	movlb	0	; () banked
  7732  001DC0  51E0               	movf	(_DIST_THRESHOLD_HI+1)& (0+255),w,b
  7733  001DC2  58DE               	subwfb	postinc2,w,c
  7734  001DC4  B0D8               	btfsc	status,0,c
  7735  001DC6  D002               	goto	u6480
  7736  001DC8  0E01               	movlw	1
  7737  001DCA  D001               	goto	u6490
  7738  001DCC                     u6480:
  7739  001DCC  0E00               	movlw	0
  7740  001DCE                     u6490:
  7741  001DCE  0100               	movlb	0	; () banked
  7742  001DD0  2792               	addwf	__measure@measurement& (0+255),f,b
  7743  001DD2  0E00               	movlw	0
  7744  001DD4  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  7745                           
  7746                           ; BSR set to: 0
  7747  001DD6  0100               	movlb	0	; () banked
  7748  001DD8  2B8D               	incf	__measure@i_484& (0+255),f,b
  7749  001DDA  D7E0               	goto	l4856
  7750  001DDC                     l4866:
  7751                           
  7752                           ; BSR set to: 0
  7753                           ;main.c: 607: if (measurement%5!=0)
  7754  001DDC  C092  F080         	movff	__measure@measurement,___awmod@dividend
  7755  001DE0  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  7756  001DE4  0E00               	movlw	0
  7757  001DE6  0100               	movlb	0	; () banked
  7758  001DE8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7759  001DEA  0E05               	movlw	5
  7760  001DEC  6F82               	movwf	___awmod@divisor& (0+255),b
  7761  001DEE  EC68  F018         	call	___awmod	;wreg free
  7762  001DF2  0100               	movlb	0	; () banked
  7763  001DF4  5180               	movf	?___awmod& (0+255),w,b
  7764  001DF6  0100               	movlb	0	; () banked
  7765  001DF8  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  7766  001DFA  B4D8               	btfsc	status,2,c
  7767  001DFC  D006               	goto	l4872
  7768                           
  7769                           ; BSR set to: 0
  7770                           ;main.c: 608: return 0;
  7771  001DFE  0E00               	movlw	0
  7772  001E00  0100               	movlb	0	; () banked
  7773  001E02  6F87               	movwf	(?__measure+1)& (0+255),b
  7774  001E04  0E00               	movlw	0
  7775  001E06  6F86               	movwf	?__measure& (0+255),b
  7776                           
  7777                           ; BSR set to: 0
  7778  001E08  0012               	return	
  7779  001E0A                     l4872:
  7780                           
  7781                           ; BSR set to: 0
  7782                           ;main.c: 611: for (char i=0;i<5;i++)
  7783  001E0A  0E00               	movlw	0
  7784  001E0C  0100               	movlb	0	; () banked
  7785  001E0E  6F8E               	movwf	__measure@i_485& (0+255),b
  7786  001E10                     l4874:
  7787                           
  7788                           ; BSR set to: 0
  7789  001E10  0E04               	movlw	4
  7790  001E12  0100               	movlb	0	; () banked
  7791  001E14  658E               	cpfsgt	__measure@i_485& (0+255),b
  7792  001E16  D001               	goto	l4878
  7793  001E18  D01B               	goto	l4884
  7794  001E1A                     l4878:
  7795                           
  7796                           ; BSR set to: 0
  7797                           ;main.c: 612: measurement+=(IR1[i]<IR_THRESHOLD_LOW);
  7798  001E1A  0100               	movlb	0	; () banked
  7799  001E1C  518E               	movf	__measure@i_485& (0+255),w,b
  7800  001E1E  0D02               	mullw	2
  7801  001E20  0E56               	movlw	low _IR1
  7802  001E22  24F3               	addwf	prodl,w,c
  7803  001E24  6ED9               	movwf	fsr2l,c
  7804  001E26  0E00               	movlw	high _IR1
  7805  001E28  20F4               	addwfc	prodh,w,c
  7806  001E2A  6EDA               	movwf	fsr2h,c
  7807  001E2C  0100               	movlb	0	; () banked
  7808  001E2E  51E5               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  7809  001E30  5CDE               	subwf	postinc2,w,c
  7810  001E32  0100               	movlb	0	; () banked
  7811  001E34  51E6               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  7812  001E36  58DE               	subwfb	postinc2,w,c
  7813  001E38  B0D8               	btfsc	status,0,c
  7814  001E3A  D002               	goto	u6530
  7815  001E3C  0E01               	movlw	1
  7816  001E3E  D001               	goto	u6540
  7817  001E40                     u6530:
  7818  001E40  0E00               	movlw	0
  7819  001E42                     u6540:
  7820  001E42  0100               	movlb	0	; () banked
  7821  001E44  2792               	addwf	__measure@measurement& (0+255),f,b
  7822  001E46  0E00               	movlw	0
  7823  001E48  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  7824                           
  7825                           ; BSR set to: 0
  7826  001E4A  0100               	movlb	0	; () banked
  7827  001E4C  2B8E               	incf	__measure@i_485& (0+255),f,b
  7828  001E4E  D7E0               	goto	l4874
  7829  001E50                     l4884:
  7830                           
  7831                           ; BSR set to: 0
  7832                           ;main.c: 613: if (measurement%5!=0)
  7833  001E50  C092  F080         	movff	__measure@measurement,___awmod@dividend
  7834  001E54  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  7835  001E58  0E00               	movlw	0
  7836  001E5A  0100               	movlb	0	; () banked
  7837  001E5C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7838  001E5E  0E05               	movlw	5
  7839  001E60  6F82               	movwf	___awmod@divisor& (0+255),b
  7840  001E62  EC68  F018         	call	___awmod	;wreg free
  7841  001E66  0100               	movlb	0	; () banked
  7842  001E68  5180               	movf	?___awmod& (0+255),w,b
  7843  001E6A  0100               	movlb	0	; () banked
  7844  001E6C  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  7845  001E6E  B4D8               	btfsc	status,2,c
  7846  001E70  D006               	goto	l4890
  7847                           
  7848                           ; BSR set to: 0
  7849                           ;main.c: 614: return 0;
  7850  001E72  0E00               	movlw	0
  7851  001E74  0100               	movlb	0	; () banked
  7852  001E76  6F87               	movwf	(?__measure+1)& (0+255),b
  7853  001E78  0E00               	movlw	0
  7854  001E7A  6F86               	movwf	?__measure& (0+255),b
  7855                           
  7856                           ; BSR set to: 0
  7857  001E7C  0012               	return	
  7858  001E7E                     l4890:
  7859                           
  7860                           ; BSR set to: 0
  7861                           ;main.c: 616: for (char i=0;i<5;i++)
  7862  001E7E  0E00               	movlw	0
  7863  001E80  0100               	movlb	0	; () banked
  7864  001E82  6F8F               	movwf	__measure@i_486& (0+255),b
  7865  001E84                     l4892:
  7866                           
  7867                           ; BSR set to: 0
  7868  001E84  0E04               	movlw	4
  7869  001E86  0100               	movlb	0	; () banked
  7870  001E88  658F               	cpfsgt	__measure@i_486& (0+255),b
  7871  001E8A  D001               	goto	l4896
  7872  001E8C  D01B               	goto	l4902
  7873  001E8E                     l4896:
  7874                           
  7875                           ; BSR set to: 0
  7876                           ;main.c: 617: measurement+=(IR1[i]<IR_THRESHOLD_HI);
  7877  001E8E  0100               	movlb	0	; () banked
  7878  001E90  518F               	movf	__measure@i_486& (0+255),w,b
  7879  001E92  0D02               	mullw	2
  7880  001E94  0E56               	movlw	low _IR1
  7881  001E96  24F3               	addwf	prodl,w,c
  7882  001E98  6ED9               	movwf	fsr2l,c
  7883  001E9A  0E00               	movlw	high _IR1
  7884  001E9C  20F4               	addwfc	prodh,w,c
  7885  001E9E  6EDA               	movwf	fsr2h,c
  7886  001EA0  0100               	movlb	0	; () banked
  7887  001EA2  51E3               	movf	_IR_THRESHOLD_HI& (0+255),w,b
  7888  001EA4  5CDE               	subwf	postinc2,w,c
  7889  001EA6  0100               	movlb	0	; () banked
  7890  001EA8  51E4               	movf	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  7891  001EAA  58DE               	subwfb	postinc2,w,c
  7892  001EAC  B0D8               	btfsc	status,0,c
  7893  001EAE  D002               	goto	u6580
  7894  001EB0  0E01               	movlw	1
  7895  001EB2  D001               	goto	u6590
  7896  001EB4                     u6580:
  7897  001EB4  0E00               	movlw	0
  7898  001EB6                     u6590:
  7899  001EB6  0100               	movlb	0	; () banked
  7900  001EB8  2792               	addwf	__measure@measurement& (0+255),f,b
  7901  001EBA  0E00               	movlw	0
  7902  001EBC  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  7903                           
  7904                           ; BSR set to: 0
  7905  001EBE  0100               	movlb	0	; () banked
  7906  001EC0  2B8F               	incf	__measure@i_486& (0+255),f,b
  7907  001EC2  D7E0               	goto	l4892
  7908  001EC4                     l4902:
  7909                           
  7910                           ; BSR set to: 0
  7911                           ;main.c: 618: if (measurement%5!=0)
  7912  001EC4  C092  F080         	movff	__measure@measurement,___awmod@dividend
  7913  001EC8  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  7914  001ECC  0E00               	movlw	0
  7915  001ECE  0100               	movlb	0	; () banked
  7916  001ED0  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7917  001ED2  0E05               	movlw	5
  7918  001ED4  6F82               	movwf	___awmod@divisor& (0+255),b
  7919  001ED6  EC68  F018         	call	___awmod	;wreg free
  7920  001EDA  0100               	movlb	0	; () banked
  7921  001EDC  5180               	movf	?___awmod& (0+255),w,b
  7922  001EDE  0100               	movlb	0	; () banked
  7923  001EE0  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  7924  001EE2  B4D8               	btfsc	status,2,c
  7925  001EE4  D006               	goto	l4908
  7926                           
  7927                           ; BSR set to: 0
  7928                           ;main.c: 619: return 0;
  7929  001EE6  0E00               	movlw	0
  7930  001EE8  0100               	movlb	0	; () banked
  7931  001EEA  6F87               	movwf	(?__measure+1)& (0+255),b
  7932  001EEC  0E00               	movlw	0
  7933  001EEE  6F86               	movwf	?__measure& (0+255),b
  7934                           
  7935                           ; BSR set to: 0
  7936  001EF0  0012               	return	
  7937  001EF2                     l4908:
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;main.c: 621: for (char i=0;i<5;i++)
  7941  001EF2  0E00               	movlw	0
  7942  001EF4  0100               	movlb	0	; () banked
  7943  001EF6  6F90               	movwf	__measure@i_487& (0+255),b
  7944  001EF8                     l4910:
  7945                           
  7946                           ; BSR set to: 0
  7947  001EF8  0E04               	movlw	4
  7948  001EFA  0100               	movlb	0	; () banked
  7949  001EFC  6590               	cpfsgt	__measure@i_487& (0+255),b
  7950  001EFE  D001               	goto	l4914
  7951  001F00  D01B               	goto	l4920
  7952  001F02                     l4914:
  7953                           
  7954                           ; BSR set to: 0
  7955                           ;main.c: 622: measurement+=(IR2[i]<IR_THRESHOLD_LOW);
  7956  001F02  0100               	movlb	0	; () banked
  7957  001F04  5190               	movf	__measure@i_487& (0+255),w,b
  7958  001F06  0D02               	mullw	2
  7959  001F08  0EB8               	movlw	low _IR2
  7960  001F0A  24F3               	addwf	prodl,w,c
  7961  001F0C  6ED9               	movwf	fsr2l,c
  7962  001F0E  0E00               	movlw	high _IR2
  7963  001F10  20F4               	addwfc	prodh,w,c
  7964  001F12  6EDA               	movwf	fsr2h,c
  7965  001F14  0100               	movlb	0	; () banked
  7966  001F16  51E5               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  7967  001F18  5CDE               	subwf	postinc2,w,c
  7968  001F1A  0100               	movlb	0	; () banked
  7969  001F1C  51E6               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  7970  001F1E  58DE               	subwfb	postinc2,w,c
  7971  001F20  B0D8               	btfsc	status,0,c
  7972  001F22  D002               	goto	u6630
  7973  001F24  0E01               	movlw	1
  7974  001F26  D001               	goto	u6640
  7975  001F28                     u6630:
  7976  001F28  0E00               	movlw	0
  7977  001F2A                     u6640:
  7978  001F2A  0100               	movlb	0	; () banked
  7979  001F2C  2792               	addwf	__measure@measurement& (0+255),f,b
  7980  001F2E  0E00               	movlw	0
  7981  001F30  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  7982                           
  7983                           ; BSR set to: 0
  7984  001F32  0100               	movlb	0	; () banked
  7985  001F34  2B90               	incf	__measure@i_487& (0+255),f,b
  7986  001F36  D7E0               	goto	l4910
  7987  001F38                     l4920:
  7988                           
  7989                           ; BSR set to: 0
  7990                           ;main.c: 623: if (measurement%5!=0)
  7991  001F38  C092  F080         	movff	__measure@measurement,___awmod@dividend
  7992  001F3C  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  7993  001F40  0E00               	movlw	0
  7994  001F42  0100               	movlb	0	; () banked
  7995  001F44  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7996  001F46  0E05               	movlw	5
  7997  001F48  6F82               	movwf	___awmod@divisor& (0+255),b
  7998  001F4A  EC68  F018         	call	___awmod	;wreg free
  7999  001F4E  0100               	movlb	0	; () banked
  8000  001F50  5180               	movf	?___awmod& (0+255),w,b
  8001  001F52  0100               	movlb	0	; () banked
  8002  001F54  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8003  001F56  B4D8               	btfsc	status,2,c
  8004  001F58  D006               	goto	l4926
  8005                           
  8006                           ; BSR set to: 0
  8007                           ;main.c: 624: return 0;
  8008  001F5A  0E00               	movlw	0
  8009  001F5C  0100               	movlb	0	; () banked
  8010  001F5E  6F87               	movwf	(?__measure+1)& (0+255),b
  8011  001F60  0E00               	movlw	0
  8012  001F62  6F86               	movwf	?__measure& (0+255),b
  8013                           
  8014                           ; BSR set to: 0
  8015  001F64  0012               	return	
  8016  001F66                     l4926:
  8017                           
  8018                           ; BSR set to: 0
  8019                           ;main.c: 626: for (char i=0;i<5;i++)
  8020  001F66  0E00               	movlw	0
  8021  001F68  0100               	movlb	0	; () banked
  8022  001F6A  6F91               	movwf	__measure@i_488& (0+255),b
  8023  001F6C                     l4928:
  8024                           
  8025                           ; BSR set to: 0
  8026  001F6C  0E04               	movlw	4
  8027  001F6E  0100               	movlb	0	; () banked
  8028  001F70  6591               	cpfsgt	__measure@i_488& (0+255),b
  8029  001F72  D001               	goto	l4932
  8030  001F74  D01B               	goto	l4938
  8031  001F76                     l4932:
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;main.c: 627: measurement+=(IR1[i]<IR_THRESHOLD_HI);
  8035  001F76  0100               	movlb	0	; () banked
  8036  001F78  5191               	movf	__measure@i_488& (0+255),w,b
  8037  001F7A  0D02               	mullw	2
  8038  001F7C  0E56               	movlw	low _IR1
  8039  001F7E  24F3               	addwf	prodl,w,c
  8040  001F80  6ED9               	movwf	fsr2l,c
  8041  001F82  0E00               	movlw	high _IR1
  8042  001F84  20F4               	addwfc	prodh,w,c
  8043  001F86  6EDA               	movwf	fsr2h,c
  8044  001F88  0100               	movlb	0	; () banked
  8045  001F8A  51E3               	movf	_IR_THRESHOLD_HI& (0+255),w,b
  8046  001F8C  5CDE               	subwf	postinc2,w,c
  8047  001F8E  0100               	movlb	0	; () banked
  8048  001F90  51E4               	movf	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  8049  001F92  58DE               	subwfb	postinc2,w,c
  8050  001F94  B0D8               	btfsc	status,0,c
  8051  001F96  D002               	goto	u6680
  8052  001F98  0E01               	movlw	1
  8053  001F9A  D001               	goto	u6690
  8054  001F9C                     u6680:
  8055  001F9C  0E00               	movlw	0
  8056  001F9E                     u6690:
  8057  001F9E  0100               	movlb	0	; () banked
  8058  001FA0  2792               	addwf	__measure@measurement& (0+255),f,b
  8059  001FA2  0E00               	movlw	0
  8060  001FA4  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8061                           
  8062                           ; BSR set to: 0
  8063  001FA6  0100               	movlb	0	; () banked
  8064  001FA8  2B91               	incf	__measure@i_488& (0+255),f,b
  8065  001FAA  D7E0               	goto	l4928
  8066  001FAC                     l4938:
  8067                           
  8068                           ; BSR set to: 0
  8069                           ;main.c: 628: if (measurement%5!=0)
  8070  001FAC  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8071  001FB0  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8072  001FB4  0E00               	movlw	0
  8073  001FB6  0100               	movlb	0	; () banked
  8074  001FB8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8075  001FBA  0E05               	movlw	5
  8076  001FBC  6F82               	movwf	___awmod@divisor& (0+255),b
  8077  001FBE  EC68  F018         	call	___awmod	;wreg free
  8078  001FC2  0100               	movlb	0	; () banked
  8079  001FC4  5180               	movf	?___awmod& (0+255),w,b
  8080  001FC6  0100               	movlb	0	; () banked
  8081  001FC8  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8082  001FCA  B4D8               	btfsc	status,2,c
  8083  001FCC  D006               	goto	l4944
  8084                           
  8085                           ; BSR set to: 0
  8086                           ;main.c: 629: return 0;
  8087  001FCE  0E00               	movlw	0
  8088  001FD0  0100               	movlb	0	; () banked
  8089  001FD2  6F87               	movwf	(?__measure+1)& (0+255),b
  8090  001FD4  0E00               	movlw	0
  8091  001FD6  6F86               	movwf	?__measure& (0+255),b
  8092                           
  8093                           ; BSR set to: 0
  8094  001FD8  0012               	return	
  8095  001FDA                     l4944:
  8096                           
  8097                           ; BSR set to: 0
  8098                           ;main.c: 632: measurement=2;
  8099  001FDA  0E00               	movlw	0
  8100  001FDC  0100               	movlb	0	; () banked
  8101  001FDE  6F93               	movwf	(__measure@measurement+1)& (0+255),b
  8102  001FE0  0E02               	movlw	2
  8103  001FE2  6F92               	movwf	__measure@measurement& (0+255),b
  8104                           
  8105                           ; BSR set to: 0
  8106                           ;main.c: 634: if (DIST1[0]>DIST_THRESHOLD_HI)
  8107  001FE4  504C               	movf	_DIST1,w,c
  8108  001FE6  0100               	movlb	0	; () banked
  8109  001FE8  5DDF               	subwf	_DIST_THRESHOLD_HI& (0+255),w,b
  8110  001FEA  504D               	movf	_DIST1+1,w,c
  8111  001FEC  0100               	movlb	0	; () banked
  8112  001FEE  59E0               	subwfb	(_DIST_THRESHOLD_HI+1)& (0+255),w,b
  8113  001FF0  B0D8               	btfsc	status,0,c
  8114  001FF2  D006               	goto	l4952
  8115                           
  8116                           ; BSR set to: 0
  8117                           ;main.c: 635: return 0;
  8118  001FF4  0E00               	movlw	0
  8119  001FF6  0100               	movlb	0	; () banked
  8120  001FF8  6F87               	movwf	(?__measure+1)& (0+255),b
  8121  001FFA  0E00               	movlw	0
  8122  001FFC  6F86               	movwf	?__measure& (0+255),b
  8123                           
  8124                           ; BSR set to: 0
  8125  001FFE  0012               	return	
  8126  002000                     l4952:
  8127                           
  8128                           ; BSR set to: 0
  8129                           ;main.c: 636: if (DIST1[0]>DIST_THRESHOLD_LOW){
  8130  002000  504C               	movf	_DIST1,w,c
  8131  002002  0100               	movlb	0	; () banked
  8132  002004  5DE1               	subwf	_DIST_THRESHOLD_LOW& (0+255),w,b
  8133  002006  504D               	movf	_DIST1+1,w,c
  8134  002008  0100               	movlb	0	; () banked
  8135  00200A  59E2               	subwfb	(_DIST_THRESHOLD_LOW+1)& (0+255),w,b
  8136  00200C  B0D8               	btfsc	status,0,c
  8137  00200E  D005               	goto	l4956
  8138                           
  8139                           ; BSR set to: 0
  8140                           ;main.c: 637: measurement-=PROX2[0];
  8141  002010  506A               	movf	_PROX2,w,c
  8142  002012  0100               	movlb	0	; () banked
  8143  002014  5F92               	subwf	__measure@measurement& (0+255),f,b
  8144  002016  506B               	movf	_PROX2+1,w,c
  8145  002018  D004               	goto	L3
  8146  00201A                     l4956:
  8147                           
  8148                           ; BSR set to: 0
  8149                           ;main.c: 639: else
  8150                           ;main.c: 640: measurement-=PROX1[0];
  8151  00201A  5060               	movf	_PROX1,w,c
  8152  00201C  0100               	movlb	0	; () banked
  8153  00201E  5F92               	subwf	__measure@measurement& (0+255),f,b
  8154  002020  5061               	movf	_PROX1+1,w,c
  8155  002022                     L3:
  8156  002022  0100               	movlb	0	; () banked
  8157  002024  5B93               	subwfb	(__measure@measurement+1)& (0+255),f,b
  8158                           
  8159                           ; BSR set to: 0
  8160                           ;main.c: 643: if (IR1[0]>IR_THRESHOLD_HI||IR2[0]>IR_THRESHOLD_HI);
  8161  002026  5056               	movf	_IR1,w,c
  8162  002028  0100               	movlb	0	; () banked
  8163  00202A  5DE3               	subwf	_IR_THRESHOLD_HI& (0+255),w,b
  8164  00202C  5057               	movf	_IR1+1,w,c
  8165  00202E  0100               	movlb	0	; () banked
  8166  002030  59E4               	subwfb	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  8167  002032  A0D8               	btfss	status,0,c
  8168  002034  D028               	goto	l465
  8169                           
  8170                           ; BSR set to: 0
  8171  002036  0100               	movlb	0	; () banked
  8172  002038  51B8               	movf	_IR2& (0+255),w,b
  8173  00203A  0100               	movlb	0	; () banked
  8174  00203C  5DE3               	subwf	_IR_THRESHOLD_HI& (0+255),w,b
  8175  00203E  0100               	movlb	0	; () banked
  8176  002040  51B9               	movf	(_IR2+1)& (0+255),w,b
  8177  002042  0100               	movlb	0	; () banked
  8178  002044  59E4               	subwfb	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  8179  002046  A0D8               	btfss	status,0,c
  8180  002048  D01E               	goto	l465
  8181                           
  8182                           ; BSR set to: 0
  8183                           ;main.c: 644: else if (IR1[0]<IR_THRESHOLD_LOW&&IR2[0]<IR_THRESHOLD_LOW)
  8184                           
  8185                           ; BSR set to: 0
  8186                           
  8187                           ; BSR set to: 0
  8188  00204A  0100               	movlb	0	; () banked
  8189  00204C  51E5               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  8190  00204E  5C56               	subwf	_IR1,w,c
  8191  002050  0100               	movlb	0	; () banked
  8192  002052  51E6               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  8193  002054  5857               	subwfb	_IR1+1,w,c
  8194  002056  B0D8               	btfsc	status,0,c
  8195  002058  D010               	goto	l4966
  8196                           
  8197                           ; BSR set to: 0
  8198  00205A  0100               	movlb	0	; () banked
  8199  00205C  51E5               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  8200  00205E  0100               	movlb	0	; () banked
  8201  002060  5DB8               	subwf	_IR2& (0+255),w,b
  8202  002062  0100               	movlb	0	; () banked
  8203  002064  51E6               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  8204  002066  0100               	movlb	0	; () banked
  8205  002068  59B9               	subwfb	(_IR2+1)& (0+255),w,b
  8206  00206A  B0D8               	btfsc	status,0,c
  8207  00206C  D006               	goto	l4966
  8208                           
  8209                           ; BSR set to: 0
  8210                           ;main.c: 645: measurement+=2;
  8211  00206E  0E02               	movlw	2
  8212  002070  0100               	movlb	0	; () banked
  8213  002072  2792               	addwf	__measure@measurement& (0+255),f,b
  8214  002074  0E00               	movlw	0
  8215  002076  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8216  002078  D006               	goto	l465
  8217  00207A                     l4966:
  8218                           
  8219                           ; BSR set to: 0
  8220                           ;main.c: 646: else
  8221                           ;main.c: 647: return 0;
  8222  00207A  0E00               	movlw	0
  8223  00207C  0100               	movlb	0	; () banked
  8224  00207E  6F87               	movwf	(?__measure+1)& (0+255),b
  8225  002080  0E00               	movlw	0
  8226  002082  6F86               	movwf	?__measure& (0+255),b
  8227                           
  8228                           ; BSR set to: 0
  8229  002084  0012               	return	
  8230  002086                     l465:
  8231                           
  8232                           ; BSR set to: 0
  8233                           ;main.c: 649: return measurement;
  8234  002086  C092  F086         	movff	__measure@measurement,?__measure
  8235  00208A  C093  F087         	movff	__measure@measurement+1,?__measure+1
  8236                           
  8237                           ; BSR set to: 0
  8238  00208E  0012               	return		;funcret
  8239  002090                     __end_of__measure:
  8240                           	opt stack 0
  8241                           tosu	equ	0xFFF
  8242                           tosh	equ	0xFFE
  8243                           tosl	equ	0xFFD
  8244                           pclath	equ	0xFFA
  8245                           tblptru	equ	0xFF8
  8246                           tblptrh	equ	0xFF7
  8247                           tblptrl	equ	0xFF6
  8248                           tablat	equ	0xFF5
  8249                           prodh	equ	0xFF4
  8250                           prodl	equ	0xFF3
  8251                           intcon	equ	0xFF2
  8252                           intcon2	equ	0xFF1
  8253                           intcon3	equ	0xFF0
  8254                           indf0	equ	0xFEF
  8255                           postinc0	equ	0xFEE
  8256                           fsr0h	equ	0xFEA
  8257                           fsr0l	equ	0xFE9
  8258                           wreg	equ	0xFE8
  8259                           indf1	equ	0xFE7
  8260                           postinc1	equ	0xFE6
  8261                           postdec1	equ	0xFE5
  8262                           fsr1h	equ	0xFE2
  8263                           fsr1l	equ	0xFE1
  8264                           indf2	equ	0xFDF
  8265                           postinc2	equ	0xFDE
  8266                           postdec2	equ	0xFDD
  8267                           fsr2h	equ	0xFDA
  8268                           fsr2l	equ	0xFD9
  8269                           status	equ	0xFD8
  8270                           
  8271 ;; *************** function ___awmod *****************
  8272 ;; Defined at:
  8273 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8274 ;; Parameters:    Size  Location     Type
  8275 ;;  dividend        2    0[BANK0 ] int 
  8276 ;;  divisor         2    2[BANK0 ] int 
  8277 ;; Auto vars:     Size  Location     Type
  8278 ;;  sign            1    5[BANK0 ] unsigned char 
  8279 ;;  counter         1    4[BANK0 ] unsigned char 
  8280 ;; Return value:  Size  Location     Type
  8281 ;;                  2    0[BANK0 ] int 
  8282 ;; Registers used:
  8283 ;;		wreg, status,2, status,0
  8284 ;; Tracked objects:
  8285 ;;		On entry : 0/0
  8286 ;;		On exit  : 0/0
  8287 ;;		Unchanged: 0/0
  8288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8289 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8290 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8292 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8293 ;;Total ram usage:        6 bytes
  8294 ;; Hardware stack levels used:    1
  8295 ;; Hardware stack levels required when called:    5
  8296 ;; This function calls:
  8297 ;;		Nothing
  8298 ;; This function is called by:
  8299 ;;		_update_state
  8300 ;;		__measure
  8301 ;; This function uses a non-reentrant model
  8302 ;;
  8303                           
  8304                           	psect	text19
  8305  0030D0                     __ptext19:
  8306                           	opt stack 0
  8307  0030D0                     ___awmod:
  8308                           	opt stack 24
  8309                           
  8310                           ; BSR set to: 0
  8311                           ;incstack = 0
  8312  0030D0  0E00               	movlw	0
  8313  0030D2  0100               	movlb	0	; () banked
  8314  0030D4  6F85               	movwf	___awmod@sign& (0+255),b
  8315                           
  8316                           ; BSR set to: 0
  8317  0030D6  0100               	movlb	0	; () banked
  8318  0030D8  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  8319  0030DA  D008               	goto	l4668
  8320                           
  8321                           ; BSR set to: 0
  8322  0030DC  0100               	movlb	0	; () banked
  8323  0030DE  6D80               	negf	___awmod@dividend& (0+255),b
  8324  0030E0  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8325  0030E2  B0D8               	btfsc	status,0,c
  8326  0030E4  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8327                           
  8328                           ; BSR set to: 0
  8329  0030E6  0E01               	movlw	1
  8330  0030E8  0100               	movlb	0	; () banked
  8331  0030EA  6F85               	movwf	___awmod@sign& (0+255),b
  8332  0030EC                     l4668:
  8333                           
  8334                           ; BSR set to: 0
  8335  0030EC  0100               	movlb	0	; () banked
  8336  0030EE  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8337  0030F0  D005               	goto	l4672
  8338                           
  8339                           ; BSR set to: 0
  8340  0030F2  0100               	movlb	0	; () banked
  8341  0030F4  6D82               	negf	___awmod@divisor& (0+255),b
  8342  0030F6  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  8343  0030F8  B0D8               	btfsc	status,0,c
  8344  0030FA  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  8345  0030FC                     l4672:
  8346                           
  8347                           ; BSR set to: 0
  8348  0030FC  0100               	movlb	0	; () banked
  8349  0030FE  5182               	movf	___awmod@divisor& (0+255),w,b
  8350  003100  0100               	movlb	0	; () banked
  8351  003102  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  8352  003104  B4D8               	btfsc	status,2,c
  8353  003106  D026               	goto	l4688
  8354                           
  8355                           ; BSR set to: 0
  8356  003108  0E01               	movlw	1
  8357  00310A  0100               	movlb	0	; () banked
  8358  00310C  6F84               	movwf	___awmod@counter& (0+255),b
  8359  00310E  D006               	goto	l4678
  8360  003110                     l4676:
  8361                           
  8362                           ; BSR set to: 0
  8363  003110  0100               	movlb	0	; () banked
  8364  003112  90D8               	bcf	status,0,c
  8365  003114  3782               	rlcf	___awmod@divisor& (0+255),f,b
  8366  003116  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  8367  003118  0100               	movlb	0	; () banked
  8368  00311A  2B84               	incf	___awmod@counter& (0+255),f,b
  8369  00311C                     l4678:
  8370                           
  8371                           ; BSR set to: 0
  8372  00311C  0100               	movlb	0	; () banked
  8373  00311E  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  8374  003120  D7F7               	goto	l4676
  8375  003122                     l4680:
  8376                           
  8377                           ; BSR set to: 0
  8378  003122  0100               	movlb	0	; () banked
  8379  003124  5182               	movf	___awmod@divisor& (0+255),w,b
  8380  003126  0100               	movlb	0	; () banked
  8381  003128  5D80               	subwf	___awmod@dividend& (0+255),w,b
  8382  00312A  0100               	movlb	0	; () banked
  8383  00312C  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8384  00312E  0100               	movlb	0	; () banked
  8385  003130  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  8386  003132  A0D8               	btfss	status,0,c
  8387  003134  D008               	goto	l4684
  8388                           
  8389                           ; BSR set to: 0
  8390  003136  0100               	movlb	0	; () banked
  8391  003138  5182               	movf	___awmod@divisor& (0+255),w,b
  8392  00313A  0100               	movlb	0	; () banked
  8393  00313C  5F80               	subwf	___awmod@dividend& (0+255),f,b
  8394  00313E  0100               	movlb	0	; () banked
  8395  003140  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  8396  003142  0100               	movlb	0	; () banked
  8397  003144  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  8398  003146                     l4684:
  8399                           
  8400                           ; BSR set to: 0
  8401  003146  0100               	movlb	0	; () banked
  8402  003148  90D8               	bcf	status,0,c
  8403  00314A  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  8404  00314C  3382               	rrcf	___awmod@divisor& (0+255),f,b
  8405                           
  8406                           ; BSR set to: 0
  8407  00314E  0100               	movlb	0	; () banked
  8408  003150  2F84               	decfsz	___awmod@counter& (0+255),f,b
  8409  003152  D7E7               	goto	l4680
  8410  003154                     l4688:
  8411                           
  8412                           ; BSR set to: 0
  8413  003154  0100               	movlb	0	; () banked
  8414  003156  5185               	movf	___awmod@sign& (0+255),w,b
  8415  003158  0100               	movlb	0	; () banked
  8416  00315A  B4D8               	btfsc	status,2,c
  8417  00315C  D005               	goto	l4692
  8418                           
  8419                           ; BSR set to: 0
  8420  00315E  0100               	movlb	0	; () banked
  8421  003160  6D80               	negf	___awmod@dividend& (0+255),b
  8422  003162  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  8423  003164  B0D8               	btfsc	status,0,c
  8424  003166  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  8425  003168                     l4692:
  8426                           
  8427                           ; BSR set to: 0
  8428  003168  C080  F080         	movff	___awmod@dividend,?___awmod
  8429  00316C  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  8430  003170  0012               	return	
  8431  003172                     __end_of___awmod:
  8432                           	opt stack 0
  8433                           tosu	equ	0xFFF
  8434                           tosh	equ	0xFFE
  8435                           tosl	equ	0xFFD
  8436                           pclath	equ	0xFFA
  8437                           tblptru	equ	0xFF8
  8438                           tblptrh	equ	0xFF7
  8439                           tblptrl	equ	0xFF6
  8440                           tablat	equ	0xFF5
  8441                           prodh	equ	0xFF4
  8442                           prodl	equ	0xFF3
  8443                           intcon	equ	0xFF2
  8444                           intcon2	equ	0xFF1
  8445                           intcon3	equ	0xFF0
  8446                           indf0	equ	0xFEF
  8447                           postinc0	equ	0xFEE
  8448                           fsr0h	equ	0xFEA
  8449                           fsr0l	equ	0xFE9
  8450                           wreg	equ	0xFE8
  8451                           indf1	equ	0xFE7
  8452                           postinc1	equ	0xFE6
  8453                           postdec1	equ	0xFE5
  8454                           fsr1h	equ	0xFE2
  8455                           fsr1l	equ	0xFE1
  8456                           indf2	equ	0xFDF
  8457                           postinc2	equ	0xFDE
  8458                           postdec2	equ	0xFDD
  8459                           fsr2h	equ	0xFDA
  8460                           fsr2l	equ	0xFD9
  8461                           status	equ	0xFD8
  8462                           
  8463 ;; *************** function ___wmul *****************
  8464 ;; Defined at:
  8465 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  8466 ;; Parameters:    Size  Location     Type
  8467 ;;  multiplier      2    0[BANK0 ] unsigned int 
  8468 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  8469 ;; Auto vars:     Size  Location     Type
  8470 ;;  product         2    4[BANK0 ] unsigned int 
  8471 ;; Return value:  Size  Location     Type
  8472 ;;                  2    0[BANK0 ] unsigned int 
  8473 ;; Registers used:
  8474 ;;		wreg, status,2, status,0, prodl, prodh
  8475 ;; Tracked objects:
  8476 ;;		On entry : 0/0
  8477 ;;		On exit  : 0/0
  8478 ;;		Unchanged: 0/0
  8479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8480 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8481 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8483 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8484 ;;Total ram usage:        6 bytes
  8485 ;; Hardware stack levels used:    1
  8486 ;; Hardware stack levels required when called:    5
  8487 ;; This function calls:
  8488 ;;		Nothing
  8489 ;; This function is called by:
  8490 ;;		_update_RTC
  8491 ;;		_display_menu
  8492 ;;		_sort
  8493 ;;		__doprnt
  8494 ;; This function uses a non-reentrant model
  8495 ;;
  8496                           
  8497                           	psect	text20
  8498  00369E                     __ptext20:
  8499                           	opt stack 0
  8500  00369E                     ___wmul:
  8501                           	opt stack 22
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;incstack = 0
  8505  00369E  0100               	movlb	0	; () banked
  8506  0036A0  5180               	movf	___wmul@multiplier& (0+255),w,b
  8507  0036A2  0100               	movlb	0	; () banked
  8508  0036A4  0382               	mulwf	___wmul@multiplicand& (0+255),b
  8509  0036A6  CFF3 F084          	movff	prodl,___wmul@product
  8510  0036AA  CFF4 F085          	movff	prodh,___wmul@product+1
  8511  0036AE  0100               	movlb	0	; () banked
  8512  0036B0  5180               	movf	___wmul@multiplier& (0+255),w,b
  8513  0036B2  0100               	movlb	0	; () banked
  8514  0036B4  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  8515  0036B6  50F3               	movf	prodl,w,c
  8516  0036B8  0100               	movlb	0	; () banked
  8517  0036BA  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  8518  0036BC  0100               	movlb	0	; () banked
  8519  0036BE  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  8520  0036C0  0100               	movlb	0	; () banked
  8521  0036C2  0382               	mulwf	___wmul@multiplicand& (0+255),b
  8522  0036C4  50F3               	movf	prodl,w,c
  8523  0036C6  0100               	movlb	0	; () banked
  8524  0036C8  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  8525                           
  8526                           ; BSR set to: 0
  8527  0036CA  C084  F080         	movff	___wmul@product,?___wmul
  8528  0036CE  C085  F081         	movff	___wmul@product+1,?___wmul+1
  8529  0036D2  0012               	return	
  8530  0036D4                     __end_of___wmul:
  8531                           	opt stack 0
  8532                           tosu	equ	0xFFF
  8533                           tosh	equ	0xFFE
  8534                           tosl	equ	0xFFD
  8535                           pclath	equ	0xFFA
  8536                           tblptru	equ	0xFF8
  8537                           tblptrh	equ	0xFF7
  8538                           tblptrl	equ	0xFF6
  8539                           tablat	equ	0xFF5
  8540                           prodh	equ	0xFF4
  8541                           prodl	equ	0xFF3
  8542                           intcon	equ	0xFF2
  8543                           intcon2	equ	0xFF1
  8544                           intcon3	equ	0xFF0
  8545                           indf0	equ	0xFEF
  8546                           postinc0	equ	0xFEE
  8547                           fsr0h	equ	0xFEA
  8548                           fsr0l	equ	0xFE9
  8549                           wreg	equ	0xFE8
  8550                           indf1	equ	0xFE7
  8551                           postinc1	equ	0xFE6
  8552                           postdec1	equ	0xFE5
  8553                           fsr1h	equ	0xFE2
  8554                           fsr1l	equ	0xFE1
  8555                           indf2	equ	0xFDF
  8556                           postinc2	equ	0xFDE
  8557                           postdec2	equ	0xFDD
  8558                           fsr2h	equ	0xFDA
  8559                           fsr2l	equ	0xFD9
  8560                           status	equ	0xFD8
  8561                           
  8562 ;; *************** function _set_time *****************
  8563 ;; Defined at:
  8564 ;;		line 429 in file "main.c"
  8565 ;; Parameters:    Size  Location     Type
  8566 ;;		None
  8567 ;; Auto vars:     Size  Location     Type
  8568 ;;  i               1    3[BANK0 ] unsigned char 
  8569 ;; Return value:  Size  Location     Type
  8570 ;;                  1    wreg      void 
  8571 ;; Registers used:
  8572 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8573 ;; Tracked objects:
  8574 ;;		On entry : 0/0
  8575 ;;		On exit  : 0/0
  8576 ;;		Unchanged: 0/0
  8577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8578 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8579 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8581 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8582 ;;Total ram usage:        1 bytes
  8583 ;; Hardware stack levels used:    1
  8584 ;; Hardware stack levels required when called:    7
  8585 ;; This function calls:
  8586 ;;		_I2C_Master_Start
  8587 ;;		_I2C_Master_Stop
  8588 ;;		_I2C_Master_Write
  8589 ;; This function is called by:
  8590 ;;		_main
  8591 ;; This function uses a non-reentrant model
  8592 ;;
  8593                           
  8594                           	psect	text21
  8595  0033B6                     __ptext21:
  8596                           	opt stack 0
  8597  0033B6                     _set_time:
  8598                           	opt stack 23
  8599                           
  8600                           ;main.c: 430: I2C_Master_Start();
  8601                           
  8602                           ; BSR set to: 0
  8603                           ;incstack = 0
  8604  0033B6  EC41  F01C         	call	_I2C_Master_Start	;wreg free
  8605                           
  8606                           ;main.c: 431: I2C_Master_Write(0b11010000);
  8607  0033BA  0E00               	movlw	0
  8608  0033BC  0100               	movlb	0	; () banked
  8609  0033BE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8610  0033C0  0ED0               	movlw	208
  8611  0033C2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8612  0033C4  EC38  F01C         	call	_I2C_Master_Write	;wreg free
  8613                           
  8614                           ;main.c: 432: I2C_Master_Write(0x00);
  8615  0033C8  0E00               	movlw	0
  8616  0033CA  0100               	movlb	0	; () banked
  8617  0033CC  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  8618  0033CE  0E00               	movlw	0
  8619  0033D0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8620  0033D2  EC38  F01C         	call	_I2C_Master_Write	;wreg free
  8621                           
  8622                           ;main.c: 433: for(char i=0; i<7; i++){
  8623  0033D6  0E00               	movlw	0
  8624  0033D8  0100               	movlb	0	; () banked
  8625  0033DA  6F83               	movwf	set_time@i& (0+255),b
  8626  0033DC                     l5286:
  8627                           
  8628                           ; BSR set to: 0
  8629  0033DC  0E06               	movlw	6
  8630  0033DE  0100               	movlb	0	; () banked
  8631  0033E0  6583               	cpfsgt	set_time@i& (0+255),b
  8632  0033E2  D001               	goto	l5290
  8633  0033E4  D016               	goto	l5296
  8634  0033E6                     l5290:
  8635                           
  8636                           ; BSR set to: 0
  8637                           ;main.c: 434: I2C_Master_Write(manualDateTime[i]);
  8638  0033E6  0100               	movlb	0	; () banked
  8639  0033E8  5183               	movf	set_time@i& (0+255),w,b
  8640  0033EA  0D01               	mullw	1
  8641  0033EC  0E08               	movlw	low _manualDateTime
  8642  0033EE  24F3               	addwf	prodl,w,c
  8643  0033F0  6EF6               	movwf	tblptrl,c
  8644  0033F2  0EFF               	movlw	high _manualDateTime
  8645  0033F4  20F4               	addwfc	prodh,w,c
  8646  0033F6  6EF7               	movwf	tblptrh,c
  8647  0033F8                     	if	1	;There are 3 active tblptr bytes
  8648  0033F8  6AF8               	clrf	tblptru,c
  8649  0033FA  0E00               	movlw	low (__mediumconst shr (0+16))
  8650  0033FC  22F8               	addwfc	tblptru,f,c
  8651  0033FE                     	endif
  8652  0033FE  0008               	tblrd		*
  8653  003400  50F5               	movf	tablat,w,c
  8654  003402  0100               	movlb	0	; () banked
  8655  003404  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  8656  003406  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  8657  003408  EC38  F01C         	call	_I2C_Master_Write	;wreg free
  8658  00340C  0100               	movlb	0	; () banked
  8659  00340E  2B83               	incf	set_time@i& (0+255),f,b
  8660  003410  D7E5               	goto	l5286
  8661  003412                     l5296:
  8662                           
  8663                           ; BSR set to: 0
  8664                           ;main.c: 435: }
  8665                           ;main.c: 436: I2C_Master_Stop();
  8666  003412  EC3D  F01C         	call	_I2C_Master_Stop	;wreg free
  8667  003416  0012               	return		;funcret
  8668  003418                     __end_of_set_time:
  8669                           	opt stack 0
  8670                           tosu	equ	0xFFF
  8671                           tosh	equ	0xFFE
  8672                           tosl	equ	0xFFD
  8673                           pclath	equ	0xFFA
  8674                           tblptru	equ	0xFF8
  8675                           tblptrh	equ	0xFF7
  8676                           tblptrl	equ	0xFF6
  8677                           tablat	equ	0xFF5
  8678                           prodh	equ	0xFF4
  8679                           prodl	equ	0xFF3
  8680                           intcon	equ	0xFF2
  8681                           intcon2	equ	0xFF1
  8682                           intcon3	equ	0xFF0
  8683                           indf0	equ	0xFEF
  8684                           postinc0	equ	0xFEE
  8685                           fsr0h	equ	0xFEA
  8686                           fsr0l	equ	0xFE9
  8687                           wreg	equ	0xFE8
  8688                           indf1	equ	0xFE7
  8689                           postinc1	equ	0xFE6
  8690                           postdec1	equ	0xFE5
  8691                           fsr1h	equ	0xFE2
  8692                           fsr1l	equ	0xFE1
  8693                           indf2	equ	0xFDF
  8694                           postinc2	equ	0xFDE
  8695                           postdec2	equ	0xFDD
  8696                           fsr2h	equ	0xFDA
  8697                           fsr2l	equ	0xFD9
  8698                           status	equ	0xFD8
  8699                           
  8700 ;; *************** function _I2C_Master_Write *****************
  8701 ;; Defined at:
  8702 ;;		line 47 in file "I2C.c"
  8703 ;; Parameters:    Size  Location     Type
  8704 ;;  d               2    1[BANK0 ] unsigned int 
  8705 ;; Auto vars:     Size  Location     Type
  8706 ;;		None
  8707 ;; Return value:  Size  Location     Type
  8708 ;;                  1    wreg      void 
  8709 ;; Registers used:
  8710 ;;		wreg, status,2, status,0, cstack
  8711 ;; Tracked objects:
  8712 ;;		On entry : 0/0
  8713 ;;		On exit  : 0/0
  8714 ;;		Unchanged: 0/0
  8715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8716 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8719 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8720 ;;Total ram usage:        2 bytes
  8721 ;; Hardware stack levels used:    1
  8722 ;; Hardware stack levels required when called:    6
  8723 ;; This function calls:
  8724 ;;		_I2C_Master_Wait
  8725 ;; This function is called by:
  8726 ;;		_update_RTC
  8727 ;;		_set_time
  8728 ;; This function uses a non-reentrant model
  8729 ;;
  8730                           
  8731                           	psect	text22
  8732  003870                     __ptext22:
  8733                           	opt stack 0
  8734  003870                     _I2C_Master_Write:
  8735                           	opt stack 23
  8736                           
  8737                           ;I2C.c: 49: I2C_Master_Wait();
  8738                           
  8739                           ;incstack = 0
  8740  003870  EC1A  F01C         	call	_I2C_Master_Wait	;wreg free
  8741                           
  8742                           ;I2C.c: 50: SSPBUF = d;
  8743  003874  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  8744  003878  0012               	return		;funcret
  8745  00387A                     __end_of_I2C_Master_Write:
  8746                           	opt stack 0
  8747                           tosu	equ	0xFFF
  8748                           tosh	equ	0xFFE
  8749                           tosl	equ	0xFFD
  8750                           pclath	equ	0xFFA
  8751                           tblptru	equ	0xFF8
  8752                           tblptrh	equ	0xFF7
  8753                           tblptrl	equ	0xFF6
  8754                           tablat	equ	0xFF5
  8755                           prodh	equ	0xFF4
  8756                           prodl	equ	0xFF3
  8757                           intcon	equ	0xFF2
  8758                           intcon2	equ	0xFF1
  8759                           intcon3	equ	0xFF0
  8760                           indf0	equ	0xFEF
  8761                           postinc0	equ	0xFEE
  8762                           fsr0h	equ	0xFEA
  8763                           fsr0l	equ	0xFE9
  8764                           wreg	equ	0xFE8
  8765                           indf1	equ	0xFE7
  8766                           postinc1	equ	0xFE6
  8767                           postdec1	equ	0xFE5
  8768                           fsr1h	equ	0xFE2
  8769                           fsr1l	equ	0xFE1
  8770                           indf2	equ	0xFDF
  8771                           postinc2	equ	0xFDE
  8772                           postdec2	equ	0xFDD
  8773                           fsr2h	equ	0xFDA
  8774                           fsr2l	equ	0xFD9
  8775                           status	equ	0xFD8
  8776                           
  8777 ;; *************** function _I2C_Master_Stop *****************
  8778 ;; Defined at:
  8779 ;;		line 41 in file "I2C.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;		None
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;		None
  8784 ;; Return value:  Size  Location     Type
  8785 ;;                  1    wreg      void 
  8786 ;; Registers used:
  8787 ;;		wreg, status,2, status,0, cstack
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8797 ;;Total ram usage:        0 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; Hardware stack levels required when called:    6
  8800 ;; This function calls:
  8801 ;;		_I2C_Master_Wait
  8802 ;; This function is called by:
  8803 ;;		_update_RTC
  8804 ;;		_set_time
  8805 ;; This function uses a non-reentrant model
  8806 ;;
  8807                           
  8808                           	psect	text23
  8809  00387A                     __ptext23:
  8810                           	opt stack 0
  8811  00387A                     _I2C_Master_Stop:
  8812                           	opt stack 23
  8813                           
  8814                           ;I2C.c: 43: I2C_Master_Wait();
  8815                           
  8816                           ;incstack = 0
  8817  00387A  EC1A  F01C         	call	_I2C_Master_Wait	;wreg free
  8818                           
  8819                           ;I2C.c: 44: PEN = 1;
  8820  00387E  84C5               	bsf	4037,2,c	;volatile
  8821  003880  0012               	return		;funcret
  8822  003882                     __end_of_I2C_Master_Stop:
  8823                           	opt stack 0
  8824                           tosu	equ	0xFFF
  8825                           tosh	equ	0xFFE
  8826                           tosl	equ	0xFFD
  8827                           pclath	equ	0xFFA
  8828                           tblptru	equ	0xFF8
  8829                           tblptrh	equ	0xFF7
  8830                           tblptrl	equ	0xFF6
  8831                           tablat	equ	0xFF5
  8832                           prodh	equ	0xFF4
  8833                           prodl	equ	0xFF3
  8834                           intcon	equ	0xFF2
  8835                           intcon2	equ	0xFF1
  8836                           intcon3	equ	0xFF0
  8837                           indf0	equ	0xFEF
  8838                           postinc0	equ	0xFEE
  8839                           fsr0h	equ	0xFEA
  8840                           fsr0l	equ	0xFE9
  8841                           wreg	equ	0xFE8
  8842                           indf1	equ	0xFE7
  8843                           postinc1	equ	0xFE6
  8844                           postdec1	equ	0xFE5
  8845                           fsr1h	equ	0xFE2
  8846                           fsr1l	equ	0xFE1
  8847                           indf2	equ	0xFDF
  8848                           postinc2	equ	0xFDE
  8849                           postdec2	equ	0xFDD
  8850                           fsr2h	equ	0xFDA
  8851                           fsr2l	equ	0xFD9
  8852                           status	equ	0xFD8
  8853                           
  8854 ;; *************** function _I2C_Master_Start *****************
  8855 ;; Defined at:
  8856 ;;		line 29 in file "I2C.c"
  8857 ;; Parameters:    Size  Location     Type
  8858 ;;		None
  8859 ;; Auto vars:     Size  Location     Type
  8860 ;;		None
  8861 ;; Return value:  Size  Location     Type
  8862 ;;                  1    wreg      void 
  8863 ;; Registers used:
  8864 ;;		wreg, status,2, status,0, cstack
  8865 ;; Tracked objects:
  8866 ;;		On entry : 0/0
  8867 ;;		On exit  : 0/0
  8868 ;;		Unchanged: 0/0
  8869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8870 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8871 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8873 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8874 ;;Total ram usage:        0 bytes
  8875 ;; Hardware stack levels used:    1
  8876 ;; Hardware stack levels required when called:    6
  8877 ;; This function calls:
  8878 ;;		_I2C_Master_Wait
  8879 ;; This function is called by:
  8880 ;;		_update_RTC
  8881 ;;		_set_time
  8882 ;; This function uses a non-reentrant model
  8883 ;;
  8884                           
  8885                           	psect	text24
  8886  003882                     __ptext24:
  8887                           	opt stack 0
  8888  003882                     _I2C_Master_Start:
  8889                           	opt stack 23
  8890                           
  8891                           ;I2C.c: 31: I2C_Master_Wait();
  8892                           
  8893                           ;incstack = 0
  8894  003882  EC1A  F01C         	call	_I2C_Master_Wait	;wreg free
  8895                           
  8896                           ;I2C.c: 32: SEN = 1;
  8897  003886  80C5               	bsf	4037,0,c	;volatile
  8898  003888  0012               	return		;funcret
  8899  00388A                     __end_of_I2C_Master_Start:
  8900                           	opt stack 0
  8901                           tosu	equ	0xFFF
  8902                           tosh	equ	0xFFE
  8903                           tosl	equ	0xFFD
  8904                           pclath	equ	0xFFA
  8905                           tblptru	equ	0xFF8
  8906                           tblptrh	equ	0xFF7
  8907                           tblptrl	equ	0xFF6
  8908                           tablat	equ	0xFF5
  8909                           prodh	equ	0xFF4
  8910                           prodl	equ	0xFF3
  8911                           intcon	equ	0xFF2
  8912                           intcon2	equ	0xFF1
  8913                           intcon3	equ	0xFF0
  8914                           indf0	equ	0xFEF
  8915                           postinc0	equ	0xFEE
  8916                           fsr0h	equ	0xFEA
  8917                           fsr0l	equ	0xFE9
  8918                           wreg	equ	0xFE8
  8919                           indf1	equ	0xFE7
  8920                           postinc1	equ	0xFE6
  8921                           postdec1	equ	0xFE5
  8922                           fsr1h	equ	0xFE2
  8923                           fsr1l	equ	0xFE1
  8924                           indf2	equ	0xFDF
  8925                           postinc2	equ	0xFDE
  8926                           postdec2	equ	0xFDD
  8927                           fsr2h	equ	0xFDA
  8928                           fsr2l	equ	0xFD9
  8929                           status	equ	0xFD8
  8930                           
  8931 ;; *************** function _I2C_Master_Wait *****************
  8932 ;; Defined at:
  8933 ;;		line 24 in file "I2C.c"
  8934 ;; Parameters:    Size  Location     Type
  8935 ;;		None
  8936 ;; Auto vars:     Size  Location     Type
  8937 ;;		None
  8938 ;; Return value:  Size  Location     Type
  8939 ;;                  1    wreg      void 
  8940 ;; Registers used:
  8941 ;;		wreg, status,2, status,0
  8942 ;; Tracked objects:
  8943 ;;		On entry : 0/0
  8944 ;;		On exit  : 0/0
  8945 ;;		Unchanged: 0/0
  8946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8947 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8948 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8949 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8950 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8951 ;;Total ram usage:        1 bytes
  8952 ;; Hardware stack levels used:    1
  8953 ;; Hardware stack levels required when called:    5
  8954 ;; This function calls:
  8955 ;;		Nothing
  8956 ;; This function is called by:
  8957 ;;		_I2C_Master_Start
  8958 ;;		_I2C_Master_Stop
  8959 ;;		_I2C_Master_Write
  8960 ;;		_I2C_Master_Read
  8961 ;;		_I2C_Master_RepeatedStart
  8962 ;; This function uses a non-reentrant model
  8963 ;;
  8964                           
  8965                           	psect	text25
  8966  003834                     __ptext25:
  8967                           	opt stack 0
  8968  003834                     _I2C_Master_Wait:
  8969                           	opt stack 23
  8970  003834                     l34:
  8971  003834  B4C7               	btfsc	4039,2,c	;volatile
  8972  003836  D7FE               	goto	l34
  8973  003838  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  8974  00383C  0E1F               	movlw	31
  8975  00383E  0100               	movlb	0	; () banked
  8976  003840  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  8977  003842  B4D8               	btfsc	status,2,c
  8978  003844  0012               	return	
  8979  003846  D7F6               	goto	l34
  8980  003848                     __end_of_I2C_Master_Wait:
  8981                           	opt stack 0
  8982                           tosu	equ	0xFFF
  8983                           tosh	equ	0xFFE
  8984                           tosl	equ	0xFFD
  8985                           pclath	equ	0xFFA
  8986                           tblptru	equ	0xFF8
  8987                           tblptrh	equ	0xFF7
  8988                           tblptrl	equ	0xFF6
  8989                           tablat	equ	0xFF5
  8990                           prodh	equ	0xFF4
  8991                           prodl	equ	0xFF3
  8992                           intcon	equ	0xFF2
  8993                           intcon2	equ	0xFF1
  8994                           intcon3	equ	0xFF0
  8995                           indf0	equ	0xFEF
  8996                           postinc0	equ	0xFEE
  8997                           fsr0h	equ	0xFEA
  8998                           fsr0l	equ	0xFE9
  8999                           wreg	equ	0xFE8
  9000                           indf1	equ	0xFE7
  9001                           postinc1	equ	0xFE6
  9002                           postdec1	equ	0xFE5
  9003                           fsr1h	equ	0xFE2
  9004                           fsr1l	equ	0xFE1
  9005                           indf2	equ	0xFDF
  9006                           postinc2	equ	0xFDE
  9007                           postdec2	equ	0xFDD
  9008                           fsr2h	equ	0xFDA
  9009                           fsr2l	equ	0xFD9
  9010                           status	equ	0xFD8
  9011                           
  9012 ;; *************** function _read_sensors *****************
  9013 ;; Defined at:
  9014 ;;		line 440 in file "main.c"
  9015 ;; Parameters:    Size  Location     Type
  9016 ;;		None
  9017 ;; Auto vars:     Size  Location     Type
  9018 ;;  i               1    6[BANK0 ] unsigned char 
  9019 ;; Return value:  Size  Location     Type
  9020 ;;                  1    wreg      void 
  9021 ;; Registers used:
  9022 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9023 ;; Tracked objects:
  9024 ;;		On entry : 0/0
  9025 ;;		On exit  : 0/0
  9026 ;;		Unchanged: 0/0
  9027 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9030 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9031 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9032 ;;Total ram usage:        5 bytes
  9033 ;; Hardware stack levels used:    1
  9034 ;; Hardware stack levels required when called:    6
  9035 ;; This function calls:
  9036 ;;		_readADC
  9037 ;; This function is called by:
  9038 ;;		_main
  9039 ;; This function uses a non-reentrant model
  9040 ;;
  9041                           
  9042                           	psect	text26
  9043  00264A                     __ptext26:
  9044                           	opt stack 0
  9045  00264A                     _read_sensors:
  9046                           	opt stack 24
  9047                           
  9048                           ;main.c: 441: if (state!='s'){
  9049                           
  9050                           ; BSR set to: 0
  9051                           ;incstack = 0
  9052  00264A  0E73               	movlw	115
  9053  00264C  0100               	movlb	0	; () banked
  9054  00264E  19E8               	xorwf	_state& (0+255),w,b
  9055  002650  A4D8               	btfss	status,2,c
  9056  002652  0012               	return	
  9057                           
  9058                           ; BSR set to: 0
  9059                           ;main.c: 443: }
  9060                           ;main.c: 445: for(char i=5-1;i>0;i--){
  9061                           
  9062                           ; BSR set to: 0
  9063                           
  9064                           ; BSR set to: 0
  9065                           ;main.c: 442: return;
  9066  002654  0E04               	movlw	4
  9067  002656  0100               	movlb	0	; () banked
  9068  002658  6F86               	movwf	read_sensors@i& (0+255),b
  9069  00265A  0100               	movlb	0	; () banked
  9070  00265C  5186               	movf	read_sensors@i& (0+255),w,b
  9071  00265E  0100               	movlb	0	; () banked
  9072  002660  B4D8               	btfsc	status,2,c
  9073  002662  D0DF               	goto	l5334
  9074                           
  9075                           ; BSR set to: 0
  9076                           ;main.c: 446: PROX1[i]=PROX1[i-1];
  9077                           
  9078                           ; BSR set to: 0
  9079                           
  9080                           ; BSR set to: 0
  9081  002664  0EFE               	movlw	254
  9082  002666  0100               	movlb	0	; () banked
  9083  002668  6F82               	movwf	??_read_sensors& (0+255),b
  9084  00266A  0EFF               	movlw	255
  9085  00266C  0100               	movlb	0	; () banked
  9086  00266E  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9087  002670  0100               	movlb	0	; () banked
  9088  002672  5186               	movf	read_sensors@i& (0+255),w,b
  9089  002674  0100               	movlb	0	; () banked
  9090  002676  6F84               	movwf	(??_read_sensors+2)& (0+255),b
  9091  002678  6B85               	clrf	(??_read_sensors+3)& (0+255),b
  9092  00267A  90D8               	bcf	status,0,c
  9093  00267C  0100               	movlb	0	; () banked
  9094  00267E  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
  9095  002680  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
  9096  002682  0100               	movlb	0	; () banked
  9097  002684  5182               	movf	??_read_sensors& (0+255),w,b
  9098  002686  0100               	movlb	0	; () banked
  9099  002688  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
  9100  00268A  0100               	movlb	0	; () banked
  9101  00268C  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9102  00268E  0100               	movlb	0	; () banked
  9103  002690  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
  9104  002692  0E60               	movlw	low _PROX1
  9105  002694  0100               	movlb	0	; () banked
  9106  002696  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
  9107  002698  6ED9               	movwf	fsr2l,c
  9108  00269A  0E00               	movlw	high _PROX1
  9109  00269C  0100               	movlb	0	; () banked
  9110  00269E  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
  9111  0026A0  6EDA               	movwf	fsr2h,c
  9112  0026A2  0100               	movlb	0	; () banked
  9113  0026A4  5186               	movf	read_sensors@i& (0+255),w,b
  9114  0026A6  0D02               	mullw	2
  9115  0026A8  0E60               	movlw	low _PROX1
  9116  0026AA  24F3               	addwf	prodl,w,c
  9117  0026AC  6EE1               	movwf	fsr1l,c
  9118  0026AE  0E00               	movlw	high _PROX1
  9119  0026B0  20F4               	addwfc	prodh,w,c
  9120  0026B2  6EE2               	movwf	fsr1h,c
  9121  0026B4  CFDE FFE6          	movff	postinc2,postinc1
  9122  0026B8  CFDD FFE5          	movff	postdec2,postdec1
  9123                           
  9124                           ;main.c: 447: PROX2[i]=PROX2[i-1];
  9125  0026BC  0EFE               	movlw	254
  9126  0026BE  0100               	movlb	0	; () banked
  9127  0026C0  6F82               	movwf	??_read_sensors& (0+255),b
  9128  0026C2  0EFF               	movlw	255
  9129  0026C4  0100               	movlb	0	; () banked
  9130  0026C6  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9131  0026C8  0100               	movlb	0	; () banked
  9132  0026CA  5186               	movf	read_sensors@i& (0+255),w,b
  9133  0026CC  0100               	movlb	0	; () banked
  9134  0026CE  6F84               	movwf	(??_read_sensors+2)& (0+255),b
  9135  0026D0  6B85               	clrf	(??_read_sensors+3)& (0+255),b
  9136  0026D2  90D8               	bcf	status,0,c
  9137  0026D4  0100               	movlb	0	; () banked
  9138  0026D6  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
  9139  0026D8  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
  9140  0026DA  0100               	movlb	0	; () banked
  9141  0026DC  5182               	movf	??_read_sensors& (0+255),w,b
  9142  0026DE  0100               	movlb	0	; () banked
  9143  0026E0  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
  9144  0026E2  0100               	movlb	0	; () banked
  9145  0026E4  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9146  0026E6  0100               	movlb	0	; () banked
  9147  0026E8  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
  9148  0026EA  0E6A               	movlw	low _PROX2
  9149  0026EC  0100               	movlb	0	; () banked
  9150  0026EE  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
  9151  0026F0  6ED9               	movwf	fsr2l,c
  9152  0026F2  0E00               	movlw	high _PROX2
  9153  0026F4  0100               	movlb	0	; () banked
  9154  0026F6  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
  9155  0026F8  6EDA               	movwf	fsr2h,c
  9156  0026FA  0100               	movlb	0	; () banked
  9157  0026FC  5186               	movf	read_sensors@i& (0+255),w,b
  9158  0026FE  0D02               	mullw	2
  9159  002700  0E6A               	movlw	low _PROX2
  9160  002702  24F3               	addwf	prodl,w,c
  9161  002704  6EE1               	movwf	fsr1l,c
  9162  002706  0E00               	movlw	high _PROX2
  9163  002708  20F4               	addwfc	prodh,w,c
  9164  00270A  6EE2               	movwf	fsr1h,c
  9165  00270C  CFDE FFE6          	movff	postinc2,postinc1
  9166  002710  CFDD FFE5          	movff	postdec2,postdec1
  9167                           
  9168                           ;main.c: 448: DIST1[i]=DIST1[i-1];
  9169  002714  0EFE               	movlw	254
  9170  002716  0100               	movlb	0	; () banked
  9171  002718  6F82               	movwf	??_read_sensors& (0+255),b
  9172  00271A  0EFF               	movlw	255
  9173  00271C  0100               	movlb	0	; () banked
  9174  00271E  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9175  002720  0100               	movlb	0	; () banked
  9176  002722  5186               	movf	read_sensors@i& (0+255),w,b
  9177  002724  0100               	movlb	0	; () banked
  9178  002726  6F84               	movwf	(??_read_sensors+2)& (0+255),b
  9179  002728  6B85               	clrf	(??_read_sensors+3)& (0+255),b
  9180  00272A  90D8               	bcf	status,0,c
  9181  00272C  0100               	movlb	0	; () banked
  9182  00272E  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
  9183  002730  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
  9184  002732  0100               	movlb	0	; () banked
  9185  002734  5182               	movf	??_read_sensors& (0+255),w,b
  9186  002736  0100               	movlb	0	; () banked
  9187  002738  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
  9188  00273A  0100               	movlb	0	; () banked
  9189  00273C  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9190  00273E  0100               	movlb	0	; () banked
  9191  002740  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
  9192  002742  0E4C               	movlw	low _DIST1
  9193  002744  0100               	movlb	0	; () banked
  9194  002746  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
  9195  002748  6ED9               	movwf	fsr2l,c
  9196  00274A  0E00               	movlw	high _DIST1
  9197  00274C  0100               	movlb	0	; () banked
  9198  00274E  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
  9199  002750  6EDA               	movwf	fsr2h,c
  9200  002752  0100               	movlb	0	; () banked
  9201  002754  5186               	movf	read_sensors@i& (0+255),w,b
  9202  002756  0D02               	mullw	2
  9203  002758  0E4C               	movlw	low _DIST1
  9204  00275A  24F3               	addwf	prodl,w,c
  9205  00275C  6EE1               	movwf	fsr1l,c
  9206  00275E  0E00               	movlw	high _DIST1
  9207  002760  20F4               	addwfc	prodh,w,c
  9208  002762  6EE2               	movwf	fsr1h,c
  9209  002764  CFDE FFE6          	movff	postinc2,postinc1
  9210  002768  CFDD FFE5          	movff	postdec2,postdec1
  9211                           
  9212                           ;main.c: 449: IR1[i]=IR1[i-1];
  9213  00276C  0EFE               	movlw	254
  9214  00276E  0100               	movlb	0	; () banked
  9215  002770  6F82               	movwf	??_read_sensors& (0+255),b
  9216  002772  0EFF               	movlw	255
  9217  002774  0100               	movlb	0	; () banked
  9218  002776  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9219  002778  0100               	movlb	0	; () banked
  9220  00277A  5186               	movf	read_sensors@i& (0+255),w,b
  9221  00277C  0100               	movlb	0	; () banked
  9222  00277E  6F84               	movwf	(??_read_sensors+2)& (0+255),b
  9223  002780  6B85               	clrf	(??_read_sensors+3)& (0+255),b
  9224  002782  90D8               	bcf	status,0,c
  9225  002784  0100               	movlb	0	; () banked
  9226  002786  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
  9227  002788  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
  9228  00278A  0100               	movlb	0	; () banked
  9229  00278C  5182               	movf	??_read_sensors& (0+255),w,b
  9230  00278E  0100               	movlb	0	; () banked
  9231  002790  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
  9232  002792  0100               	movlb	0	; () banked
  9233  002794  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9234  002796  0100               	movlb	0	; () banked
  9235  002798  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
  9236  00279A  0E56               	movlw	low _IR1
  9237  00279C  0100               	movlb	0	; () banked
  9238  00279E  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
  9239  0027A0  6ED9               	movwf	fsr2l,c
  9240  0027A2  0E00               	movlw	high _IR1
  9241  0027A4  0100               	movlb	0	; () banked
  9242  0027A6  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
  9243  0027A8  6EDA               	movwf	fsr2h,c
  9244  0027AA  0100               	movlb	0	; () banked
  9245  0027AC  5186               	movf	read_sensors@i& (0+255),w,b
  9246  0027AE  0D02               	mullw	2
  9247  0027B0  0E56               	movlw	low _IR1
  9248  0027B2  24F3               	addwf	prodl,w,c
  9249  0027B4  6EE1               	movwf	fsr1l,c
  9250  0027B6  0E00               	movlw	high _IR1
  9251  0027B8  20F4               	addwfc	prodh,w,c
  9252  0027BA  6EE2               	movwf	fsr1h,c
  9253  0027BC  CFDE FFE6          	movff	postinc2,postinc1
  9254  0027C0  CFDD FFE5          	movff	postdec2,postdec1
  9255                           
  9256                           ;main.c: 450: IR2[i]=IR2[i-1];
  9257  0027C4  0EFE               	movlw	254
  9258  0027C6  0100               	movlb	0	; () banked
  9259  0027C8  6F82               	movwf	??_read_sensors& (0+255),b
  9260  0027CA  0EFF               	movlw	255
  9261  0027CC  0100               	movlb	0	; () banked
  9262  0027CE  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9263  0027D0  0100               	movlb	0	; () banked
  9264  0027D2  5186               	movf	read_sensors@i& (0+255),w,b
  9265  0027D4  0100               	movlb	0	; () banked
  9266  0027D6  6F84               	movwf	(??_read_sensors+2)& (0+255),b
  9267  0027D8  6B85               	clrf	(??_read_sensors+3)& (0+255),b
  9268  0027DA  90D8               	bcf	status,0,c
  9269  0027DC  0100               	movlb	0	; () banked
  9270  0027DE  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
  9271  0027E0  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
  9272  0027E2  0100               	movlb	0	; () banked
  9273  0027E4  5182               	movf	??_read_sensors& (0+255),w,b
  9274  0027E6  0100               	movlb	0	; () banked
  9275  0027E8  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
  9276  0027EA  0100               	movlb	0	; () banked
  9277  0027EC  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9278  0027EE  0100               	movlb	0	; () banked
  9279  0027F0  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
  9280  0027F2  0EB8               	movlw	low _IR2
  9281  0027F4  0100               	movlb	0	; () banked
  9282  0027F6  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
  9283  0027F8  6ED9               	movwf	fsr2l,c
  9284  0027FA  0E00               	movlw	high _IR2
  9285  0027FC  0100               	movlb	0	; () banked
  9286  0027FE  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
  9287  002800  6EDA               	movwf	fsr2h,c
  9288  002802  0100               	movlb	0	; () banked
  9289  002804  5186               	movf	read_sensors@i& (0+255),w,b
  9290  002806  0D02               	mullw	2
  9291  002808  0EB8               	movlw	low _IR2
  9292  00280A  24F3               	addwf	prodl,w,c
  9293  00280C  6EE1               	movwf	fsr1l,c
  9294  00280E  0E00               	movlw	high _IR2
  9295  002810  20F4               	addwfc	prodh,w,c
  9296  002812  6EE2               	movwf	fsr1h,c
  9297  002814  CFDE FFE6          	movff	postinc2,postinc1
  9298  002818  CFDD FFE5          	movff	postdec2,postdec1
  9299                           
  9300                           ; BSR set to: 0
  9301  00281C  0100               	movlb	0	; () banked
  9302  00281E  0786               	decf	read_sensors@i& (0+255),f,b
  9303  002820  D71C               	goto	L4
  9304  002822                     l5334:
  9305                           
  9306                           ; BSR set to: 0
  9307                           ;main.c: 451: }
  9308                           ;main.c: 456: readADC(DIST1_PIN);
  9309  002822  5074               	movf	_DIST1_PIN,w,c
  9310  002824  ECB5  F01B         	call	_readADC
  9311                           
  9312                           ;main.c: 457: DIST1[0]=16*16*ADRESH+ADRESL;
  9313  002828  50C4               	movf	4036,w,c	;volatile
  9314  00282A  0100               	movlb	0	; () banked
  9315  00282C  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9316  00282E  6B82               	clrf	??_read_sensors& (0+255),b
  9317  002830  50C3               	movf	4035,w,c	;volatile
  9318  002832  0100               	movlb	0	; () banked
  9319  002834  2582               	addwf	??_read_sensors& (0+255),w,b
  9320  002836  6E4C               	movwf	_DIST1,c
  9321  002838  0E00               	movlw	0
  9322  00283A  0100               	movlb	0	; () banked
  9323  00283C  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  9324  00283E  6E4D               	movwf	_DIST1+1,c
  9325                           
  9326                           ; BSR set to: 0
  9327                           ;main.c: 458: readADC(IR1_PIN);
  9328  002840  5077               	movf	_IR1_PIN,w,c
  9329  002842  ECB5  F01B         	call	_readADC
  9330                           
  9331                           ;main.c: 459: IR1[0]=16*16*ADRESH+ADRESL;
  9332  002846  50C4               	movf	4036,w,c	;volatile
  9333  002848  0100               	movlb	0	; () banked
  9334  00284A  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9335  00284C  6B82               	clrf	??_read_sensors& (0+255),b
  9336  00284E  50C3               	movf	4035,w,c	;volatile
  9337  002850  0100               	movlb	0	; () banked
  9338  002852  2582               	addwf	??_read_sensors& (0+255),w,b
  9339  002854  6E56               	movwf	_IR1,c
  9340  002856  0E00               	movlw	0
  9341  002858  0100               	movlb	0	; () banked
  9342  00285A  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  9343  00285C  6E57               	movwf	_IR1+1,c
  9344                           
  9345                           ; BSR set to: 0
  9346                           ;main.c: 460: readADC(IR2_PIN);
  9347  00285E  5078               	movf	_IR2_PIN,w,c
  9348  002860  ECB5  F01B         	call	_readADC
  9349                           
  9350                           ;main.c: 461: IR2[0]=16*16*ADRESH+ADRESL;
  9351  002864  50C4               	movf	4036,w,c	;volatile
  9352  002866  0100               	movlb	0	; () banked
  9353  002868  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9354  00286A  6B82               	clrf	??_read_sensors& (0+255),b
  9355  00286C  50C3               	movf	4035,w,c	;volatile
  9356  00286E  0100               	movlb	0	; () banked
  9357  002870  2582               	addwf	??_read_sensors& (0+255),w,b
  9358  002872  0100               	movlb	0	; () banked
  9359  002874  6FB8               	movwf	_IR2& (0+255),b
  9360  002876  0E00               	movlw	0
  9361  002878  0100               	movlb	0	; () banked
  9362  00287A  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  9363  00287C  0100               	movlb	0	; () banked
  9364  00287E  6FB9               	movwf	(_IR2+1)& (0+255),b
  9365                           
  9366                           ; BSR set to: 0
  9367                           ;main.c: 463: PROX1[0]=(PORTB>>PROX1_PIN)&1;
  9368  002880  C075  F082         	movff	_PROX1_PIN,??_read_sensors
  9369  002884  CF81 F083          	movff	3969,??_read_sensors+1	;volatile
  9370  002888  0100               	movlb	0	; () banked
  9371  00288A  2B82               	incf	??_read_sensors& (0+255),f,b
  9372  00288C  D003               	goto	u7494
  9373  00288E                     u7495:
  9374  00288E  0100               	movlb	0	; () banked
  9375  002890  90D8               	bcf	status,0,c
  9376  002892  3383               	rrcf	(??_read_sensors+1)& (0+255),f,b
  9377  002894                     u7494:
  9378  002894  0100               	movlb	0	; () banked
  9379  002896  2F82               	decfsz	??_read_sensors& (0+255),f,b
  9380  002898  D7FA               	goto	u7495
  9381  00289A  0E01               	movlw	1
  9382  00289C  0100               	movlb	0	; () banked
  9383  00289E  1783               	andwf	(??_read_sensors+1)& (0+255),f,b
  9384  0028A0  0100               	movlb	0	; () banked
  9385  0028A2  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9386  0028A4  6E60               	movwf	_PROX1,c
  9387  0028A6  6A61               	clrf	_PROX1+1,c
  9388                           
  9389                           ; BSR set to: 0
  9390                           ;main.c: 464: PROX2[0]=(PORTB>>PROX2_PIN)&1;
  9391  0028A8  C079  F082         	movff	_PROX2_PIN,??_read_sensors
  9392  0028AC  CF81 F083          	movff	3969,??_read_sensors+1	;volatile
  9393  0028B0  0100               	movlb	0	; () banked
  9394  0028B2  2B82               	incf	??_read_sensors& (0+255),f,b
  9395  0028B4  D003               	goto	u7504
  9396  0028B6                     u7505:
  9397  0028B6  0100               	movlb	0	; () banked
  9398  0028B8  90D8               	bcf	status,0,c
  9399  0028BA  3383               	rrcf	(??_read_sensors+1)& (0+255),f,b
  9400  0028BC                     u7504:
  9401  0028BC  0100               	movlb	0	; () banked
  9402  0028BE  2F82               	decfsz	??_read_sensors& (0+255),f,b
  9403  0028C0  D7FA               	goto	u7505
  9404  0028C2  0E01               	movlw	1
  9405  0028C4  0100               	movlb	0	; () banked
  9406  0028C6  1783               	andwf	(??_read_sensors+1)& (0+255),f,b
  9407  0028C8  0100               	movlb	0	; () banked
  9408  0028CA  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9409  0028CC  6E6A               	movwf	_PROX2,c
  9410  0028CE  6A6B               	clrf	_PROX2+1,c
  9411                           
  9412                           ; BSR set to: 0
  9413  0028D0  0012               	return		;funcret
  9414  0028D2                     __end_of_read_sensors:
  9415                           	opt stack 0
  9416                           tosu	equ	0xFFF
  9417                           tosh	equ	0xFFE
  9418                           tosl	equ	0xFFD
  9419                           pclath	equ	0xFFA
  9420                           tblptru	equ	0xFF8
  9421                           tblptrh	equ	0xFF7
  9422                           tblptrl	equ	0xFF6
  9423                           tablat	equ	0xFF5
  9424                           prodh	equ	0xFF4
  9425                           prodl	equ	0xFF3
  9426                           intcon	equ	0xFF2
  9427                           intcon2	equ	0xFF1
  9428                           intcon3	equ	0xFF0
  9429                           indf0	equ	0xFEF
  9430                           postinc0	equ	0xFEE
  9431                           fsr0h	equ	0xFEA
  9432                           fsr0l	equ	0xFE9
  9433                           wreg	equ	0xFE8
  9434                           indf1	equ	0xFE7
  9435                           postinc1	equ	0xFE6
  9436                           postdec1	equ	0xFE5
  9437                           fsr1h	equ	0xFE2
  9438                           fsr1l	equ	0xFE1
  9439                           indf2	equ	0xFDF
  9440                           postinc2	equ	0xFDE
  9441                           postdec2	equ	0xFDD
  9442                           fsr2h	equ	0xFDA
  9443                           fsr2l	equ	0xFD9
  9444                           status	equ	0xFD8
  9445                           
  9446 ;; *************** function _readADC *****************
  9447 ;; Defined at:
  9448 ;;		line 651 in file "main.c"
  9449 ;; Parameters:    Size  Location     Type
  9450 ;;  channel         1    wreg     unsigned char 
  9451 ;; Auto vars:     Size  Location     Type
  9452 ;;  channel         1    1[BANK0 ] unsigned char 
  9453 ;; Return value:  Size  Location     Type
  9454 ;;                  1    wreg      void 
  9455 ;; Registers used:
  9456 ;;		wreg, status,2, status,0, cstack
  9457 ;; Tracked objects:
  9458 ;;		On entry : 0/0
  9459 ;;		On exit  : 0/0
  9460 ;;		Unchanged: 0/0
  9461 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9462 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9463 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9464 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9465 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9466 ;;Total ram usage:        2 bytes
  9467 ;; Hardware stack levels used:    1
  9468 ;; Hardware stack levels required when called:    5
  9469 ;; This function calls:
  9470 ;;		Nothing
  9471 ;; This function is called by:
  9472 ;;		_read_sensors
  9473 ;; This function uses a non-reentrant model
  9474 ;;
  9475                           
  9476                           	psect	text27
  9477  00376A                     __ptext27:
  9478                           	opt stack 0
  9479  00376A                     _readADC:
  9480                           	opt stack 24
  9481                           
  9482                           ; BSR set to: 0
  9483                           ;incstack = 0
  9484                           ;readADC@channel stored from wreg
  9485  00376A  0100               	movlb	0	; () banked
  9486  00376C  6F81               	movwf	readADC@channel& (0+255),b
  9487                           
  9488                           ;main.c: 653: ADCON0 = ((channel <<2));
  9489  00376E  0100               	movlb	0	; () banked
  9490  003770  4581               	rlncf	readADC@channel& (0+255),w,b
  9491  003772  46E8               	rlncf	wreg,f,c
  9492  003774  0BFC               	andlw	252
  9493  003776  6EC2               	movwf	4034,c	;volatile
  9494                           
  9495                           ; BSR set to: 0
  9496                           ;main.c: 654: ADON = 1;
  9497  003778  80C2               	bsf	4034,0,c	;volatile
  9498                           
  9499                           ; BSR set to: 0
  9500                           ;main.c: 655: ADCON0bits.GO = 1;
  9501  00377A  82C2               	bsf	4034,1,c	;volatile
  9502                           
  9503                           ;main.c: 656: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(10000000/4000.0)
      +                          ));}
  9504  00377C  D009               	goto	l4978
  9505  00377E                     l4976:
  9506  00377E  0E11               	movlw	17
  9507  003780  0100               	movlb	0	; () banked
  9508  003782  6F80               	movwf	??_readADC& (0+255),b
  9509  003784  0E3A               	movlw	58
  9510  003786                     u13227:
  9511  003786  2EE8               	decfsz	wreg,f,c
  9512  003788  D7FE               	bra	u13227
  9513  00378A  2F80               	decfsz	??_readADC& (0+255),f,b
  9514  00378C  D7FC               	bra	u13227
  9515  00378E  F000               	nop	
  9516  003790                     l4978:
  9517  003790  A2C2               	btfss	4034,1,c	;volatile
  9518  003792  0012               	return	
  9519  003794  D7F4               	goto	l4976
  9520  003796                     __end_of_readADC:
  9521                           	opt stack 0
  9522                           tosu	equ	0xFFF
  9523                           tosh	equ	0xFFE
  9524                           tosl	equ	0xFFD
  9525                           pclath	equ	0xFFA
  9526                           tblptru	equ	0xFF8
  9527                           tblptrh	equ	0xFF7
  9528                           tblptrl	equ	0xFF6
  9529                           tablat	equ	0xFF5
  9530                           prodh	equ	0xFF4
  9531                           prodl	equ	0xFF3
  9532                           intcon	equ	0xFF2
  9533                           intcon2	equ	0xFF1
  9534                           intcon3	equ	0xFF0
  9535                           indf0	equ	0xFEF
  9536                           postinc0	equ	0xFEE
  9537                           fsr0h	equ	0xFEA
  9538                           fsr0l	equ	0xFE9
  9539                           wreg	equ	0xFE8
  9540                           indf1	equ	0xFE7
  9541                           postinc1	equ	0xFE6
  9542                           postdec1	equ	0xFE5
  9543                           fsr1h	equ	0xFE2
  9544                           fsr1l	equ	0xFE1
  9545                           indf2	equ	0xFDF
  9546                           postinc2	equ	0xFDE
  9547                           postdec2	equ	0xFDD
  9548                           fsr2h	equ	0xFDA
  9549                           fsr2l	equ	0xFD9
  9550                           status	equ	0xFD8
  9551                           
  9552 ;; *************** function _initLCD *****************
  9553 ;; Defined at:
  9554 ;;		line 14 in file "lcd.c"
  9555 ;; Parameters:    Size  Location     Type
  9556 ;;		None
  9557 ;; Auto vars:     Size  Location     Type
  9558 ;;		None
  9559 ;; Return value:  Size  Location     Type
  9560 ;;                  1    wreg      void 
  9561 ;; Registers used:
  9562 ;;		wreg, status,2, status,0, cstack
  9563 ;; Tracked objects:
  9564 ;;		On entry : 0/0
  9565 ;;		On exit  : 0/0
  9566 ;;		Unchanged: 0/0
  9567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9568 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9569 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9570 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9571 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9572 ;;Total ram usage:        1 bytes
  9573 ;; Hardware stack levels used:    1
  9574 ;; Hardware stack levels required when called:    7
  9575 ;; This function calls:
  9576 ;;		_lcdInst
  9577 ;; This function is called by:
  9578 ;;		_main
  9579 ;; This function uses a non-reentrant model
  9580 ;;
  9581                           
  9582                           	psect	text28
  9583  003612                     __ptext28:
  9584                           	opt stack 0
  9585  003612                     _initLCD:
  9586                           	opt stack 23
  9587                           
  9588                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  9589                           
  9590                           ;incstack = 0
  9591  003612  0E31               	movlw	49
  9592  003614  0100               	movlb	0	; () banked
  9593  003616  6F83               	movwf	??_initLCD& (0+255),b
  9594  003618  0EB2               	movlw	178
  9595  00361A                     u13237:
  9596  00361A  2EE8               	decfsz	wreg,f,c
  9597  00361C  D7FE               	bra	u13237
  9598  00361E  2F83               	decfsz	??_initLCD& (0+255),f,b
  9599  003620  D7FC               	bra	u13237
  9600  003622  F000               	nop	
  9601                           
  9602                           ;lcd.c: 16: lcdInst(0b00110011);
  9603  003624  0E33               	movlw	51
  9604  003626  EC24  F01C         	call	_lcdInst
  9605                           
  9606                           ;lcd.c: 17: lcdInst(0b00110010);
  9607  00362A  0E32               	movlw	50
  9608  00362C  EC24  F01C         	call	_lcdInst
  9609                           
  9610                           ;lcd.c: 18: lcdInst(0b00101000);
  9611  003630  0E28               	movlw	40
  9612  003632  EC24  F01C         	call	_lcdInst
  9613                           
  9614                           ;lcd.c: 19: lcdInst(0b00001111);
  9615  003636  0E0F               	movlw	15
  9616  003638  EC24  F01C         	call	_lcdInst
  9617                           
  9618                           ;lcd.c: 20: lcdInst(0b00000110);
  9619  00363C  0E06               	movlw	6
  9620  00363E  EC24  F01C         	call	_lcdInst
  9621                           
  9622                           ;lcd.c: 21: lcdInst(0b00000001);
  9623  003642  0E01               	movlw	1
  9624  003644  EC24  F01C         	call	_lcdInst
  9625                           
  9626                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  9627  003648  0E31               	movlw	49
  9628  00364A  0100               	movlb	0	; () banked
  9629  00364C  6F83               	movwf	??_initLCD& (0+255),b
  9630  00364E  0EB2               	movlw	178
  9631  003650                     u13247:
  9632  003650  2EE8               	decfsz	wreg,f,c
  9633  003652  D7FE               	bra	u13247
  9634  003654  2F83               	decfsz	??_initLCD& (0+255),f,b
  9635  003656  D7FC               	bra	u13247
  9636  003658  F000               	nop	
  9637  00365A  0012               	return		;funcret
  9638  00365C                     __end_of_initLCD:
  9639                           	opt stack 0
  9640                           tosu	equ	0xFFF
  9641                           tosh	equ	0xFFE
  9642                           tosl	equ	0xFFD
  9643                           pclath	equ	0xFFA
  9644                           tblptru	equ	0xFF8
  9645                           tblptrh	equ	0xFF7
  9646                           tblptrl	equ	0xFF6
  9647                           tablat	equ	0xFF5
  9648                           prodh	equ	0xFF4
  9649                           prodl	equ	0xFF3
  9650                           intcon	equ	0xFF2
  9651                           intcon2	equ	0xFF1
  9652                           intcon3	equ	0xFF0
  9653                           indf0	equ	0xFEF
  9654                           postinc0	equ	0xFEE
  9655                           fsr0h	equ	0xFEA
  9656                           fsr0l	equ	0xFE9
  9657                           wreg	equ	0xFE8
  9658                           indf1	equ	0xFE7
  9659                           postinc1	equ	0xFE6
  9660                           postdec1	equ	0xFE5
  9661                           fsr1h	equ	0xFE2
  9662                           fsr1l	equ	0xFE1
  9663                           indf2	equ	0xFDF
  9664                           postinc2	equ	0xFDE
  9665                           postdec2	equ	0xFDD
  9666                           fsr2h	equ	0xFDA
  9667                           fsr2l	equ	0xFD9
  9668                           status	equ	0xFD8
  9669                           
  9670 ;; *************** function _lcdInst *****************
  9671 ;; Defined at:
  9672 ;;		line 25 in file "lcd.c"
  9673 ;; Parameters:    Size  Location     Type
  9674 ;;  data            1    wreg     unsigned char 
  9675 ;; Auto vars:     Size  Location     Type
  9676 ;;  data            1    2[BANK0 ] unsigned char 
  9677 ;; Return value:  Size  Location     Type
  9678 ;;                  1    wreg      void 
  9679 ;; Registers used:
  9680 ;;		wreg, status,2, status,0, cstack
  9681 ;; Tracked objects:
  9682 ;;		On entry : 0/0
  9683 ;;		On exit  : 0/0
  9684 ;;		Unchanged: 0/0
  9685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9686 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9687 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9688 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9689 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9690 ;;Total ram usage:        1 bytes
  9691 ;; Hardware stack levels used:    1
  9692 ;; Hardware stack levels required when called:    6
  9693 ;; This function calls:
  9694 ;;		_lcdNibble
  9695 ;; This function is called by:
  9696 ;;		_initLCD
  9697 ;;		_update_lcd
  9698 ;; This function uses a non-reentrant model
  9699 ;;
  9700                           
  9701                           	psect	text29
  9702  003848                     __ptext29:
  9703                           	opt stack 0
  9704  003848                     _lcdInst:
  9705                           	opt stack 23
  9706                           
  9707                           ;incstack = 0
  9708                           ;lcdInst@data stored from wreg
  9709  003848  0100               	movlb	0	; () banked
  9710  00384A  6F82               	movwf	lcdInst@data& (0+255),b
  9711                           
  9712                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  9713  00384C  948C               	bcf	3980,2,c	;volatile
  9714                           
  9715                           ;lcd.c: 27: lcdNibble(data);
  9716  00384E  0100               	movlb	0	; () banked
  9717  003850  5182               	movf	lcdInst@data& (0+255),w,b
  9718  003852  EC76  F019         	call	_lcdNibble
  9719  003856  0012               	return		;funcret
  9720  003858                     __end_of_lcdInst:
  9721                           	opt stack 0
  9722                           tosu	equ	0xFFF
  9723                           tosh	equ	0xFFE
  9724                           tosl	equ	0xFFD
  9725                           pclath	equ	0xFFA
  9726                           tblptru	equ	0xFF8
  9727                           tblptrh	equ	0xFF7
  9728                           tblptrl	equ	0xFF6
  9729                           tablat	equ	0xFF5
  9730                           prodh	equ	0xFF4
  9731                           prodl	equ	0xFF3
  9732                           intcon	equ	0xFF2
  9733                           intcon2	equ	0xFF1
  9734                           intcon3	equ	0xFF0
  9735                           indf0	equ	0xFEF
  9736                           postinc0	equ	0xFEE
  9737                           fsr0h	equ	0xFEA
  9738                           fsr0l	equ	0xFE9
  9739                           wreg	equ	0xFE8
  9740                           indf1	equ	0xFE7
  9741                           postinc1	equ	0xFE6
  9742                           postdec1	equ	0xFE5
  9743                           fsr1h	equ	0xFE2
  9744                           fsr1l	equ	0xFE1
  9745                           indf2	equ	0xFDF
  9746                           postinc2	equ	0xFDE
  9747                           postdec2	equ	0xFDD
  9748                           fsr2h	equ	0xFDA
  9749                           fsr2l	equ	0xFD9
  9750                           status	equ	0xFD8
  9751                           
  9752 ;; *************** function _lcdNibble *****************
  9753 ;; Defined at:
  9754 ;;		line 35 in file "lcd.c"
  9755 ;; Parameters:    Size  Location     Type
  9756 ;;  data            1    wreg     unsigned char 
  9757 ;; Auto vars:     Size  Location     Type
  9758 ;;  data            1    1[BANK0 ] unsigned char 
  9759 ;;  temp            1    0[BANK0 ] unsigned char 
  9760 ;; Return value:  Size  Location     Type
  9761 ;;                  1    wreg      void 
  9762 ;; Registers used:
  9763 ;;		wreg, status,2, status,0
  9764 ;; Tracked objects:
  9765 ;;		On entry : 0/0
  9766 ;;		On exit  : 0/0
  9767 ;;		Unchanged: 0/0
  9768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9770 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9772 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9773 ;;Total ram usage:        2 bytes
  9774 ;; Hardware stack levels used:    1
  9775 ;; Hardware stack levels required when called:    5
  9776 ;; This function calls:
  9777 ;;		Nothing
  9778 ;; This function is called by:
  9779 ;;		_lcdInst
  9780 ;;		_putch
  9781 ;; This function uses a non-reentrant model
  9782 ;;
  9783                           
  9784                           	psect	text30
  9785  0032EC                     __ptext30:
  9786                           	opt stack 0
  9787  0032EC                     _lcdNibble:
  9788                           	opt stack 21
  9789                           
  9790                           ;incstack = 0
  9791                           ;lcdNibble@data stored from wreg
  9792  0032EC  0100               	movlb	0	; () banked
  9793  0032EE  6F81               	movwf	lcdNibble@data& (0+255),b
  9794                           
  9795                           ;lcd.c: 37: char temp = data & 0xF0;
  9796  0032F0  0100               	movlb	0	; () banked
  9797  0032F2  5181               	movf	lcdNibble@data& (0+255),w,b
  9798  0032F4  0BF0               	andlw	240
  9799  0032F6  0100               	movlb	0	; () banked
  9800  0032F8  6F80               	movwf	lcdNibble@temp& (0+255),b
  9801                           
  9802                           ;lcd.c: 38: LATD = LATD & 0x0F;
  9803  0032FA  508C               	movf	3980,w,c	;volatile
  9804  0032FC  0B0F               	andlw	15
  9805  0032FE  6E8C               	movwf	3980,c	;volatile
  9806                           
  9807                           ;lcd.c: 39: LATD = temp | LATD;
  9808  003300  0100               	movlb	0	; () banked
  9809  003302  5180               	movf	lcdNibble@temp& (0+255),w,b
  9810  003304  108C               	iorwf	3980,w,c	;volatile
  9811  003306  6E8C               	movwf	3980,c	;volatile
  9812                           
  9813                           ; BSR set to: 0
  9814                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  9815  003308  968C               	bcf	3980,3,c	;volatile
  9816                           
  9817                           ; BSR set to: 0
  9818                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9819  00330A  0E14               	movlw	20
  9820  00330C                     u13257:
  9821  00330C  2EE8               	decfsz	wreg,f,c
  9822  00330E  D7FE               	bra	u13257
  9823  003310  D000               	nop2	
  9824                           
  9825                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  9826  003312  868C               	bsf	3980,3,c	;volatile
  9827                           
  9828                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9829  003314  0E14               	movlw	20
  9830  003316                     u13267:
  9831  003316  2EE8               	decfsz	wreg,f,c
  9832  003318  D7FE               	bra	u13267
  9833  00331A  D000               	nop2	
  9834                           
  9835                           ;lcd.c: 46: data = data << 4;
  9836  00331C  0100               	movlb	0	; () banked
  9837  00331E  3981               	swapf	lcdNibble@data& (0+255),w,b
  9838  003320  0BF0               	andlw	240
  9839  003322  0100               	movlb	0	; () banked
  9840  003324  6F81               	movwf	lcdNibble@data& (0+255),b
  9841                           
  9842                           ;lcd.c: 48: temp = data & 0xF0;
  9843  003326  0100               	movlb	0	; () banked
  9844  003328  5181               	movf	lcdNibble@data& (0+255),w,b
  9845  00332A  0BF0               	andlw	240
  9846  00332C  0100               	movlb	0	; () banked
  9847  00332E  6F80               	movwf	lcdNibble@temp& (0+255),b
  9848                           
  9849                           ;lcd.c: 49: LATD = LATD & 0x0F;
  9850  003330  508C               	movf	3980,w,c	;volatile
  9851  003332  0B0F               	andlw	15
  9852  003334  6E8C               	movwf	3980,c	;volatile
  9853                           
  9854                           ;lcd.c: 50: LATD = temp | LATD;
  9855  003336  0100               	movlb	0	; () banked
  9856  003338  5180               	movf	lcdNibble@temp& (0+255),w,b
  9857  00333A  108C               	iorwf	3980,w,c	;volatile
  9858  00333C  6E8C               	movwf	3980,c	;volatile
  9859                           
  9860                           ; BSR set to: 0
  9861                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  9862  00333E  968C               	bcf	3980,3,c	;volatile
  9863                           
  9864                           ; BSR set to: 0
  9865                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9866  003340  0E14               	movlw	20
  9867  003342                     u13277:
  9868  003342  2EE8               	decfsz	wreg,f,c
  9869  003344  D7FE               	bra	u13277
  9870  003346  D000               	nop2	
  9871                           
  9872                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  9873  003348  868C               	bsf	3980,3,c	;volatile
  9874                           
  9875                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
  9876  00334A  0E14               	movlw	20
  9877  00334C                     u13287:
  9878  00334C  2EE8               	decfsz	wreg,f,c
  9879  00334E  D7FE               	bra	u13287
  9880  003350  D000               	nop2	
  9881  003352  0012               	return		;funcret
  9882  003354                     __end_of_lcdNibble:
  9883                           	opt stack 0
  9884                           tosu	equ	0xFFF
  9885                           tosh	equ	0xFFE
  9886                           tosl	equ	0xFFD
  9887                           pclath	equ	0xFFA
  9888                           tblptru	equ	0xFF8
  9889                           tblptrh	equ	0xFF7
  9890                           tblptrl	equ	0xFF6
  9891                           tablat	equ	0xFF5
  9892                           prodh	equ	0xFF4
  9893                           prodl	equ	0xFF3
  9894                           intcon	equ	0xFF2
  9895                           intcon2	equ	0xFF1
  9896                           intcon3	equ	0xFF0
  9897                           indf0	equ	0xFEF
  9898                           postinc0	equ	0xFEE
  9899                           fsr0h	equ	0xFEA
  9900                           fsr0l	equ	0xFE9
  9901                           wreg	equ	0xFE8
  9902                           indf1	equ	0xFE7
  9903                           postinc1	equ	0xFE6
  9904                           postdec1	equ	0xFE5
  9905                           fsr1h	equ	0xFE2
  9906                           fsr1l	equ	0xFE1
  9907                           indf2	equ	0xFDF
  9908                           postinc2	equ	0xFDE
  9909                           postdec2	equ	0xFDD
  9910                           fsr2h	equ	0xFDA
  9911                           fsr2l	equ	0xFD9
  9912                           status	equ	0xFD8
  9913                           
  9914 ;; *************** function _I2C_Master_Init *****************
  9915 ;; Defined at:
  9916 ;;		line 13 in file "I2C.c"
  9917 ;; Parameters:    Size  Location     Type
  9918 ;;  c               4   13[BANK0 ] const unsigned long 
  9919 ;; Auto vars:     Size  Location     Type
  9920 ;;		None
  9921 ;; Return value:  Size  Location     Type
  9922 ;;                  1    wreg      void 
  9923 ;; Registers used:
  9924 ;;		wreg, status,2, status,0, cstack
  9925 ;; Tracked objects:
  9926 ;;		On entry : 0/0
  9927 ;;		On exit  : 0/0
  9928 ;;		Unchanged: 0/0
  9929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9930 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9931 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9932 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9933 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9934 ;;Total ram usage:        8 bytes
  9935 ;; Hardware stack levels used:    1
  9936 ;; Hardware stack levels required when called:    6
  9937 ;; This function calls:
  9938 ;;		___lldiv
  9939 ;; This function is called by:
  9940 ;;		_main
  9941 ;; This function uses a non-reentrant model
  9942 ;;
  9943                           
  9944                           	psect	text31
  9945  003418                     __ptext31:
  9946                           	opt stack 0
  9947  003418                     _I2C_Master_Init:
  9948                           	opt stack 24
  9949                           
  9950                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  9951                           
  9952                           ;incstack = 0
  9953  003418  0E00               	movlw	0
  9954  00341A  6EC7               	movwf	4039,c	;volatile
  9955                           
  9956                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  9957  00341C  0E28               	movlw	40
  9958  00341E  6EC6               	movwf	4038,c	;volatile
  9959                           
  9960                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  9961  003420  0E00               	movlw	0
  9962  003422  6EC5               	movwf	4037,c	;volatile
  9963                           
  9964                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  9965  003424  0E80               	movlw	128
  9966  003426  0100               	movlb	0	; () banked
  9967  003428  6F80               	movwf	___lldiv@dividend& (0+255),b
  9968  00342A  0E96               	movlw	150
  9969  00342C  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  9970  00342E  0E98               	movlw	152
  9971  003430  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  9972  003432  0E00               	movlw	0
  9973  003434  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  9974  003436  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  9975  00343A  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  9976  00343E  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  9977  003442  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  9978  003446  0E02               	movlw	2
  9979  003448                     u7415:
  9980  003448  90D8               	bcf	status,0,c
  9981  00344A  0100               	movlb	0	; () banked
  9982  00344C  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  9983  00344E  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  9984  003450  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  9985  003452  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  9986  003454  2EE8               	decfsz	wreg,f,c
  9987  003456  D7F8               	goto	u7415
  9988  003458  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  9989  00345C  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  9990  003460  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  9991  003464  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  9992  003468  ECB3  F017         	call	___lldiv	;wreg free
  9993  00346C  0100               	movlb	0	; () banked
  9994  00346E  0580               	decf	?___lldiv& (0+255),w,b
  9995  003470  6EC8               	movwf	4040,c	;volatile
  9996                           
  9997                           ; BSR set to: 0
  9998                           ;I2C.c: 20: TRISC3 = 1;
  9999  003472  8694               	bsf	3988,3,c	;volatile
 10000                           
 10001                           ; BSR set to: 0
 10002                           ;I2C.c: 21: TRISC4 = 1;
 10003  003474  8894               	bsf	3988,4,c	;volatile
 10004                           
 10005                           ; BSR set to: 0
 10006  003476  0012               	return		;funcret
 10007  003478                     __end_of_I2C_Master_Init:
 10008                           	opt stack 0
 10009                           tosu	equ	0xFFF
 10010                           tosh	equ	0xFFE
 10011                           tosl	equ	0xFFD
 10012                           pclath	equ	0xFFA
 10013                           tblptru	equ	0xFF8
 10014                           tblptrh	equ	0xFF7
 10015                           tblptrl	equ	0xFF6
 10016                           tablat	equ	0xFF5
 10017                           prodh	equ	0xFF4
 10018                           prodl	equ	0xFF3
 10019                           intcon	equ	0xFF2
 10020                           intcon2	equ	0xFF1
 10021                           intcon3	equ	0xFF0
 10022                           indf0	equ	0xFEF
 10023                           postinc0	equ	0xFEE
 10024                           fsr0h	equ	0xFEA
 10025                           fsr0l	equ	0xFE9
 10026                           wreg	equ	0xFE8
 10027                           indf1	equ	0xFE7
 10028                           postinc1	equ	0xFE6
 10029                           postdec1	equ	0xFE5
 10030                           fsr1h	equ	0xFE2
 10031                           fsr1l	equ	0xFE1
 10032                           indf2	equ	0xFDF
 10033                           postinc2	equ	0xFDE
 10034                           postdec2	equ	0xFDD
 10035                           fsr2h	equ	0xFDA
 10036                           fsr2l	equ	0xFD9
 10037                           status	equ	0xFD8
 10038                           
 10039 ;; *************** function ___lldiv *****************
 10040 ;; Defined at:
 10041 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 10042 ;; Parameters:    Size  Location     Type
 10043 ;;  dividend        4    0[BANK0 ] unsigned long 
 10044 ;;  divisor         4    4[BANK0 ] unsigned long 
 10045 ;; Auto vars:     Size  Location     Type
 10046 ;;  quotient        4    8[BANK0 ] unsigned long 
 10047 ;;  counter         1   12[BANK0 ] unsigned char 
 10048 ;; Return value:  Size  Location     Type
 10049 ;;                  4    0[BANK0 ] unsigned long 
 10050 ;; Registers used:
 10051 ;;		wreg, status,2, status,0
 10052 ;; Tracked objects:
 10053 ;;		On entry : 0/0
 10054 ;;		On exit  : 0/0
 10055 ;;		Unchanged: 0/0
 10056 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10057 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10058 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10060 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10061 ;;Total ram usage:       13 bytes
 10062 ;; Hardware stack levels used:    1
 10063 ;; Hardware stack levels required when called:    5
 10064 ;; This function calls:
 10065 ;;		Nothing
 10066 ;; This function is called by:
 10067 ;;		_I2C_Master_Init
 10068 ;; This function uses a non-reentrant model
 10069 ;;
 10070                           
 10071                           	psect	text32
 10072  002F66                     __ptext32:
 10073                           	opt stack 0
 10074  002F66                     ___lldiv:
 10075                           	opt stack 24
 10076                           
 10077                           ; BSR set to: 0
 10078                           ;incstack = 0
 10079  002F66  0E00               	movlw	0
 10080  002F68  0100               	movlb	0	; () banked
 10081  002F6A  6F88               	movwf	___lldiv@quotient& (0+255),b
 10082  002F6C  0E00               	movlw	0
 10083  002F6E  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 10084  002F70  0E00               	movlw	0
 10085  002F72  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 10086  002F74  0E00               	movlw	0
 10087  002F76  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 10088                           
 10089                           ; BSR set to: 0
 10090  002F78  0100               	movlb	0	; () banked
 10091  002F7A  5184               	movf	___lldiv@divisor& (0+255),w,b
 10092  002F7C  0100               	movlb	0	; () banked
 10093  002F7E  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 10094  002F80  0100               	movlb	0	; () banked
 10095  002F82  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 10096  002F84  0100               	movlb	0	; () banked
 10097  002F86  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 10098  002F88  B4D8               	btfsc	status,2,c
 10099  002F8A  D042               	goto	l924
 10100                           
 10101                           ; BSR set to: 0
 10102  002F8C  0E01               	movlw	1
 10103  002F8E  0100               	movlb	0	; () banked
 10104  002F90  6F8C               	movwf	___lldiv@counter& (0+255),b
 10105  002F92  D008               	goto	l5032
 10106  002F94                     l5030:
 10107                           
 10108                           ; BSR set to: 0
 10109  002F94  0100               	movlb	0	; () banked
 10110  002F96  90D8               	bcf	status,0,c
 10111  002F98  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 10112  002F9A  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 10113  002F9C  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 10114  002F9E  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 10115  002FA0  0100               	movlb	0	; () banked
 10116  002FA2  2B8C               	incf	___lldiv@counter& (0+255),f,b
 10117  002FA4                     l5032:
 10118                           
 10119                           ; BSR set to: 0
 10120  002FA4  0100               	movlb	0	; () banked
 10121  002FA6  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 10122  002FA8  D7F5               	goto	l5030
 10123  002FAA                     l5034:
 10124                           
 10125                           ; BSR set to: 0
 10126  002FAA  0100               	movlb	0	; () banked
 10127  002FAC  90D8               	bcf	status,0,c
 10128  002FAE  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 10129  002FB0  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 10130  002FB2  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 10131  002FB4  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 10132                           
 10133                           ; BSR set to: 0
 10134  002FB6  0100               	movlb	0	; () banked
 10135  002FB8  5184               	movf	___lldiv@divisor& (0+255),w,b
 10136  002FBA  0100               	movlb	0	; () banked
 10137  002FBC  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 10138  002FBE  0100               	movlb	0	; () banked
 10139  002FC0  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10140  002FC2  0100               	movlb	0	; () banked
 10141  002FC4  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 10142  002FC6  0100               	movlb	0	; () banked
 10143  002FC8  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10144  002FCA  0100               	movlb	0	; () banked
 10145  002FCC  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 10146  002FCE  0100               	movlb	0	; () banked
 10147  002FD0  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10148  002FD2  0100               	movlb	0	; () banked
 10149  002FD4  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 10150  002FD6  A0D8               	btfss	status,0,c
 10151  002FD8  D012               	goto	l5042
 10152                           
 10153                           ; BSR set to: 0
 10154  002FDA  0100               	movlb	0	; () banked
 10155  002FDC  5184               	movf	___lldiv@divisor& (0+255),w,b
 10156  002FDE  0100               	movlb	0	; () banked
 10157  002FE0  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 10158  002FE2  0100               	movlb	0	; () banked
 10159  002FE4  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10160  002FE6  0100               	movlb	0	; () banked
 10161  002FE8  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 10162  002FEA  0100               	movlb	0	; () banked
 10163  002FEC  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10164  002FEE  0100               	movlb	0	; () banked
 10165  002FF0  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 10166  002FF2  0100               	movlb	0	; () banked
 10167  002FF4  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10168  002FF6  0100               	movlb	0	; () banked
 10169  002FF8  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 10170                           
 10171                           ; BSR set to: 0
 10172  002FFA  0100               	movlb	0	; () banked
 10173  002FFC  8188               	bsf	___lldiv@quotient& (0+255),0,b
 10174  002FFE                     l5042:
 10175                           
 10176                           ; BSR set to: 0
 10177  002FFE  0100               	movlb	0	; () banked
 10178  003000  90D8               	bcf	status,0,c
 10179  003002  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 10180  003004  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 10181  003006  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 10182  003008  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 10183                           
 10184                           ; BSR set to: 0
 10185  00300A  0100               	movlb	0	; () banked
 10186  00300C  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 10187  00300E  D7CD               	goto	l5034
 10188  003010                     l924:
 10189                           
 10190                           ; BSR set to: 0
 10191  003010  C088  F080         	movff	___lldiv@quotient,?___lldiv
 10192  003014  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 10193  003018  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 10194  00301C  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 10195                           
 10196                           ; BSR set to: 0
 10197  003020  0012               	return		;funcret
 10198  003022                     __end_of___lldiv:
 10199                           	opt stack 0
 10200                           tosu	equ	0xFFF
 10201                           tosh	equ	0xFFE
 10202                           tosl	equ	0xFFD
 10203                           pclath	equ	0xFFA
 10204                           tblptru	equ	0xFF8
 10205                           tblptrh	equ	0xFF7
 10206                           tblptrl	equ	0xFF6
 10207                           tablat	equ	0xFF5
 10208                           prodh	equ	0xFF4
 10209                           prodl	equ	0xFF3
 10210                           intcon	equ	0xFF2
 10211                           intcon2	equ	0xFF1
 10212                           intcon3	equ	0xFF0
 10213                           indf0	equ	0xFEF
 10214                           postinc0	equ	0xFEE
 10215                           fsr0h	equ	0xFEA
 10216                           fsr0l	equ	0xFE9
 10217                           wreg	equ	0xFE8
 10218                           indf1	equ	0xFE7
 10219                           postinc1	equ	0xFE6
 10220                           postdec1	equ	0xFE5
 10221                           fsr1h	equ	0xFE2
 10222                           fsr1l	equ	0xFE1
 10223                           indf2	equ	0xFDF
 10224                           postinc2	equ	0xFDE
 10225                           postdec2	equ	0xFDD
 10226                           fsr2h	equ	0xFDA
 10227                           fsr2l	equ	0xFD9
 10228                           status	equ	0xFD8
 10229                           
 10230 ;; *************** function _keypressed *****************
 10231 ;; Defined at:
 10232 ;;		line 326 in file "main.c"
 10233 ;; Parameters:    Size  Location     Type
 10234 ;;		None
 10235 ;; Auto vars:     Size  Location     Type
 10236 ;;  i               2   58[COMRAM] int 
 10237 ;;  keypress        1   60[COMRAM] unsigned char 
 10238 ;; Return value:  Size  Location     Type
 10239 ;;                  1    wreg      void 
 10240 ;; Registers used:
 10241 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 10242 ;; Tracked objects:
 10243 ;;		On entry : 0/0
 10244 ;;		On exit  : 0/0
 10245 ;;		Unchanged: 0/0
 10246 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10248 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10249 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10250 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10251 ;;Total ram usage:       19 bytes
 10252 ;; Hardware stack levels used:    1
 10253 ;; Hardware stack levels required when called:    4
 10254 ;; This function calls:
 10255 ;;		i2___awmod
 10256 ;;		i2_lcdInst
 10257 ;;		i2_printf
 10258 ;; This function is called by:
 10259 ;;		Interrupt level 2
 10260 ;; This function uses a non-reentrant model
 10261 ;;
 10262                           
 10263                           	psect	intcode
 10264  000008                     __pintcode:
 10265                           	opt stack 0
 10266  000008                     _keypressed:
 10267                           	opt stack 20
 10268                           
 10269                           ; BSR set to: 0
 10270                           ;incstack = 0
 10271  000008  827A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 10272  00000A  EDF7  F008         	call	int_func,f	;refresh shadow registers
 10273                           tosu	equ	0xFFF
 10274                           tosh	equ	0xFFE
 10275                           tosl	equ	0xFFD
 10276                           pclath	equ	0xFFA
 10277                           tblptru	equ	0xFF8
 10278                           tblptrh	equ	0xFF7
 10279                           tblptrl	equ	0xFF6
 10280                           tablat	equ	0xFF5
 10281                           prodh	equ	0xFF4
 10282                           prodl	equ	0xFF3
 10283                           intcon	equ	0xFF2
 10284                           intcon2	equ	0xFF1
 10285                           intcon3	equ	0xFF0
 10286                           indf0	equ	0xFEF
 10287                           postinc0	equ	0xFEE
 10288                           fsr0h	equ	0xFEA
 10289                           fsr0l	equ	0xFE9
 10290                           wreg	equ	0xFE8
 10291                           indf1	equ	0xFE7
 10292                           postinc1	equ	0xFE6
 10293                           postdec1	equ	0xFE5
 10294                           fsr1h	equ	0xFE2
 10295                           fsr1l	equ	0xFE1
 10296                           indf2	equ	0xFDF
 10297                           postinc2	equ	0xFDE
 10298                           postdec2	equ	0xFDD
 10299                           fsr2h	equ	0xFDA
 10300                           fsr2l	equ	0xFD9
 10301                           status	equ	0xFD8
 10302                           
 10303                           	psect	intcode_body
 10304  0011EE                     __pintcode_body:
 10305                           	opt stack 20
 10306  0011EE                     int_func:
 10307                           	opt stack 20
 10308  0011EE  0006               	pop		; remove dummy address from shadow register refresh
 10309  0011F0  CFFA F02D          	movff	pclath,??_keypressed+2
 10310  0011F4  CFFB F02E          	movff	pclatu,??_keypressed+3
 10311  0011F8  CFE9 F02F          	movff	fsr0l,??_keypressed+4
 10312  0011FC  CFEA F030          	movff	fsr0h,??_keypressed+5
 10313  001200  CFE1 F031          	movff	fsr1l,??_keypressed+6
 10314  001204  CFE2 F032          	movff	fsr1h,??_keypressed+7
 10315  001208  CFD9 F033          	movff	fsr2l,??_keypressed+8
 10316  00120C  CFDA F034          	movff	fsr2h,??_keypressed+9
 10317  001210  CFF3 F035          	movff	prodl,??_keypressed+10
 10318  001214  CFF4 F036          	movff	prodh,??_keypressed+11
 10319  001218  CFF6 F037          	movff	tblptrl,??_keypressed+12
 10320  00121C  CFF7 F038          	movff	tblptrh,??_keypressed+13
 10321  001220  CFF8 F039          	movff	tblptru,??_keypressed+14
 10322  001224  CFF5 F03A          	movff	tablat,??_keypressed+15
 10323                           
 10324                           ;main.c: 328: if(INT1IF){
 10325  001228  A0F0               	btfss	intcon3,0,c	;volatile
 10326  00122A  D2A9               	goto	i2l385
 10327                           
 10328                           ;main.c: 329: int i;
 10329                           ;main.c: 330: unsigned char keypress = (PORTB & 0xF0) >> 4;
 10330  00122C  3881               	swapf	3969,w,c	;volatile
 10331  00122E  0B0F               	andlw	15
 10332  001230  0B0F               	andlw	15
 10333  001232  6E3D               	movwf	keypressed@keypress,c
 10334                           
 10335                           ;main.c: 331: switch(state)
 10336  001234  D28E               	goto	i2l8322
 10337  001236                     i2l8168:
 10338                           
 10339                           ;main.c: 333: for (i=0;i<7;i++)
 10340  001236  0E00               	movlw	0
 10341  001238  6E3C               	movwf	keypressed@i+1,c
 10342  00123A  0E00               	movlw	0
 10343  00123C  6E3B               	movwf	keypressed@i,c
 10344  00123E                     i2l8170:
 10345  00123E  BE3C               	btfsc	keypressed@i+1,7,c
 10346  001240  D006               	goto	i2l8174
 10347  001242  503C               	movf	keypressed@i+1,w,c
 10348  001244  E11D               	bnz	i2l8180
 10349  001246  0E07               	movlw	7
 10350  001248  5C3B               	subwf	keypressed@i,w,c
 10351  00124A  B0D8               	btfsc	status,0,c
 10352  00124C  D019               	goto	i2l8180
 10353  00124E                     i2l8174:
 10354                           
 10355                           ;main.c: 334: startTime[i]=time_i[i];
 10356  00124E  90D8               	bcf	status,0,c
 10357  001250  343B               	rlcf	keypressed@i,w,c
 10358  001252  6ED9               	movwf	fsr2l,c
 10359  001254  343C               	rlcf	keypressed@i+1,w,c
 10360  001256  6EDA               	movwf	fsr2h,c
 10361  001258  0E3E               	movlw	low _time_i
 10362  00125A  26D9               	addwf	fsr2l,f,c
 10363  00125C  0E00               	movlw	high _time_i
 10364  00125E  22DA               	addwfc	fsr2h,f,c
 10365  001260  90D8               	bcf	status,0,c
 10366  001262  343B               	rlcf	keypressed@i,w,c
 10367  001264  6EE1               	movwf	fsr1l,c
 10368  001266  343C               	rlcf	keypressed@i+1,w,c
 10369  001268  6EE2               	movwf	fsr1h,c
 10370  00126A  0E0E               	movlw	low _startTime
 10371  00126C  26E1               	addwf	fsr1l,f,c
 10372  00126E  0E01               	movlw	high _startTime
 10373  001270  22E2               	addwfc	fsr1h,f,c
 10374  001272  CFDE FFE6          	movff	postinc2,postinc1
 10375  001276  CFDD FFE5          	movff	postdec2,postdec1
 10376  00127A  4A3B               	infsnz	keypressed@i,f,c
 10377  00127C  2A3C               	incf	keypressed@i+1,f,c
 10378  00127E  D7DF               	goto	i2l8170
 10379  001280                     i2l8180:
 10380                           
 10381                           ;main.c: 335: if (keys[keypress]=='B'&&menuIndex<menuSize)
 10382  001280  503D               	movf	keypressed@keypress,w,c
 10383  001282  0D01               	mullw	1
 10384  001284  0EE5               	movlw	low _keys
 10385  001286  24F3               	addwf	prodl,w,c
 10386  001288  6EF6               	movwf	tblptrl,c
 10387  00128A  0EFE               	movlw	high _keys
 10388  00128C  20F4               	addwfc	prodh,w,c
 10389  00128E  6EF7               	movwf	tblptrh,c
 10390  001290                     	if	1	;There are 3 active tblptr bytes
 10391  001290  6AF8               	clrf	tblptru,c
 10392  001292  0E00               	movlw	low (__mediumconst shr (0+16))
 10393  001294  22F8               	addwfc	tblptru,f,c
 10394  001296                     	endif
 10395  001296  0008               	tblrd		*
 10396  001298  50F5               	movf	tablat,w,c
 10397  00129A  0A42               	xorlw	66
 10398  00129C  A4D8               	btfss	status,2,c
 10399  00129E  D012               	goto	i2l8186
 10400  0012A0  0100               	movlb	0	; () banked
 10401  0012A2  51F7               	movf	_menuSize& (0+255),w,b
 10402  0012A4  0100               	movlb	0	; () banked
 10403  0012A6  5DF5               	subwf	_menuIndex& (0+255),w,b
 10404  0012A8  0100               	movlb	0	; () banked
 10405  0012AA  51F6               	movf	(_menuIndex+1)& (0+255),w,b
 10406  0012AC  0A80               	xorlw	128
 10407  0012AE  6E2B               	movwf	??_keypressed& (0+255),c
 10408  0012B0  0100               	movlb	0	; () banked
 10409  0012B2  51F8               	movf	(_menuSize+1)& (0+255),w,b
 10410  0012B4  0A80               	xorlw	128
 10411  0012B6  582B               	subwfb	??_keypressed& (0+255),w,c
 10412  0012B8  B0D8               	btfsc	status,0,c
 10413  0012BA  D004               	goto	i2l8186
 10414                           
 10415                           ; BSR set to: 0
 10416                           ;main.c: 336: menuIndex++;
 10417  0012BC  0100               	movlb	0	; () banked
 10418  0012BE  4BF5               	infsnz	_menuIndex& (0+255),f,b
 10419  0012C0  2BF6               	incf	(_menuIndex+1)& (0+255),f,b
 10420  0012C2  D25C               	goto	i2l348
 10421  0012C4                     i2l8186:
 10422                           
 10423                           ;main.c: 337: else if (keys[keypress]=='A'&&menuIndex>1)
 10424  0012C4  503D               	movf	keypressed@keypress,w,c
 10425  0012C6  0D01               	mullw	1
 10426  0012C8  0EE5               	movlw	low _keys
 10427  0012CA  24F3               	addwf	prodl,w,c
 10428  0012CC  6EF6               	movwf	tblptrl,c
 10429  0012CE  0EFE               	movlw	high _keys
 10430  0012D0  20F4               	addwfc	prodh,w,c
 10431  0012D2  6EF7               	movwf	tblptrh,c
 10432  0012D4                     	if	1	;There are 3 active tblptr bytes
 10433  0012D4  6AF8               	clrf	tblptru,c
 10434  0012D6  0E00               	movlw	low (__mediumconst shr (0+16))
 10435  0012D8  22F8               	addwfc	tblptru,f,c
 10436  0012DA                     	endif
 10437  0012DA  0008               	tblrd		*
 10438  0012DC  50F5               	movf	tablat,w,c
 10439  0012DE  0A41               	xorlw	65
 10440  0012E0  A4D8               	btfss	status,2,c
 10441  0012E2  D010               	goto	i2l8192
 10442  0012E4  0100               	movlb	0	; () banked
 10443  0012E6  BFF6               	btfsc	(_menuIndex+1)& (0+255),7,b
 10444  0012E8  D00D               	goto	i2l8192
 10445  0012EA  0100               	movlb	0	; () banked
 10446  0012EC  51F6               	movf	(_menuIndex+1)& (0+255),w,b
 10447  0012EE  E105               	bnz	i2u1293_40
 10448  0012F0  0E02               	movlw	2
 10449  0012F2  0100               	movlb	0	; () banked
 10450  0012F4  5DF5               	subwf	_menuIndex& (0+255),w,b
 10451  0012F6  A0D8               	btfss	status,0,c
 10452  0012F8  D005               	goto	i2l8192
 10453  0012FA                     i2u1293_40:
 10454                           
 10455                           ; BSR set to: 0
 10456                           ;main.c: 338: menuIndex--;
 10457  0012FA  0100               	movlb	0	; () banked
 10458  0012FC  07F5               	decf	_menuIndex& (0+255),f,b
 10459  0012FE  A0D8               	btfss	status,0,c
 10460  001300  07F6               	decf	(_menuIndex+1)& (0+255),f,b
 10461  001302  D23C               	goto	i2l348
 10462  001304                     i2l8192:
 10463                           
 10464                           ;main.c: 339: else if (keys[keypress]=='C'){
 10465  001304  503D               	movf	keypressed@keypress,w,c
 10466  001306  0D01               	mullw	1
 10467  001308  0EE5               	movlw	low _keys
 10468  00130A  24F3               	addwf	prodl,w,c
 10469  00130C  6EF6               	movwf	tblptrl,c
 10470  00130E  0EFE               	movlw	high _keys
 10471  001310  20F4               	addwfc	prodh,w,c
 10472  001312  6EF7               	movwf	tblptrh,c
 10473  001314                     	if	1	;There are 3 active tblptr bytes
 10474  001314  6AF8               	clrf	tblptru,c
 10475  001316  0E00               	movlw	low (__mediumconst shr (0+16))
 10476  001318  22F8               	addwfc	tblptru,f,c
 10477  00131A                     	endif
 10478  00131A  0008               	tblrd		*
 10479  00131C  50F5               	movf	tablat,w,c
 10480  00131E  0A43               	xorlw	67
 10481  001320  B4D8               	btfsc	status,2,c
 10482  001322  D01D               	goto	i2l8212
 10483  001324  D22B               	goto	i2l348
 10484  001326                     i2l8196:
 10485  001326  0E73               	movlw	115
 10486  001328  D20A               	goto	L9
 10487  00132A                     i2l8198:
 10488  00132A  0E6C               	movlw	108
 10489  00132C  D208               	goto	L9
 10490  00132E                     i2l8200:
 10491  00132E  0E63               	movlw	99
 10492  001330  D206               	goto	L9
 10493  001332                     i2l8202:
 10494                           
 10495                           ;main.c: 348: lcdInst(0b10000000);;
 10496  001332  0E80               	movlw	128
 10497  001334  EC32  F01C         	call	i2_lcdInst
 10498                           
 10499                           ;main.c: 349: printf("invalid");
 10500  001338  0EE5               	movlw	low STR_15
 10501  00133A  6E23               	movwf	i2printf@f,c
 10502  00133C  0EFF               	movlw	high STR_15
 10503  00133E  6E24               	movwf	i2printf@f+1,c
 10504  001340  EC6A  F01B         	call	i2_printf	;wreg free
 10505                           
 10506                           ;main.c: 350: lcdInst(0b11000000);;
 10507  001344  0EC0               	movlw	192
 10508  001346  EC32  F01C         	call	i2_lcdInst
 10509                           
 10510                           ;main.c: 351: printf("menu selection");
 10511  00134A  0EAE               	movlw	low STR_16
 10512  00134C  6E23               	movwf	i2printf@f,c
 10513  00134E  0EFF               	movlw	high STR_16
 10514  001350  6E24               	movwf	i2printf@f+1,c
 10515  001352  EC6A  F01B         	call	i2_printf	;wreg free
 10516                           
 10517                           ;main.c: 352: lcdInst(0b10010000);;
 10518  001356  0E90               	movlw	144
 10519  001358  EC32  F01C         	call	i2_lcdInst
 10520                           
 10521                           ;main.c: 354: }
 10522                           
 10523                           ;main.c: 353: break;
 10524  00135C  D20F               	goto	i2l348
 10525  00135E                     i2l8212:
 10526  00135E  C0F5  F02B         	movff	_menuIndex,??_keypressed
 10527  001362  C0F6  F02C         	movff	_menuIndex+1,??_keypressed+1
 10528                           
 10529                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10530                           ; Switch size 1, requested type "space"
 10531                           ; Number of cases is 1, Range of values is 0 to 0
 10532                           ; switch strategies available:
 10533                           ; Name         Instructions Cycles
 10534                           ; simple_byte            4     3 (average)
 10535                           ;	Chosen strategy is simple_byte
 10536  001366  502C               	movf	??_keypressed+1,w,c
 10537  001368  0A00               	xorlw	0	; case 0
 10538  00136A  A4D8               	btfss	status,2,c
 10539  00136C  D7E2               	goto	i2l8202
 10540                           
 10541                           ; Switch size 1, requested type "space"
 10542                           ; Number of cases is 3, Range of values is 1 to 3
 10543                           ; switch strategies available:
 10544                           ; Name         Instructions Cycles
 10545                           ; simple_byte           10     6 (average)
 10546                           ;	Chosen strategy is simple_byte
 10547  00136E  502B               	movf	??_keypressed,w,c
 10548  001370  0A01               	xorlw	1	; case 1
 10549  001372  B4D8               	btfsc	status,2,c
 10550  001374  D7D8               	goto	i2l8196
 10551  001376  0A03               	xorlw	3	; case 2
 10552  001378  B4D8               	btfsc	status,2,c
 10553  00137A  D7D7               	goto	i2l8198
 10554  00137C  0A01               	xorlw	1	; case 3
 10555  00137E  B4D8               	btfsc	status,2,c
 10556  001380  D7D6               	goto	i2l8200
 10557  001382  D7D7               	goto	i2l8202
 10558  001384                     i2l8216:
 10559                           
 10560                           ; BSR set to: 0
 10561                           ;main.c: 362: for (i=0;i<7;i++)
 10562  001384  0E00               	movlw	0
 10563  001386  6E3C               	movwf	keypressed@i+1,c
 10564  001388  0E00               	movlw	0
 10565  00138A  6E3B               	movwf	keypressed@i,c
 10566  00138C                     i2l8218:
 10567                           
 10568                           ; BSR set to: 0
 10569  00138C  BE3C               	btfsc	keypressed@i+1,7,c
 10570  00138E  D006               	goto	i2l8222
 10571  001390  503C               	movf	keypressed@i+1,w,c
 10572  001392  E11D               	bnz	i2l8228
 10573  001394  0E07               	movlw	7
 10574  001396  5C3B               	subwf	keypressed@i,w,c
 10575  001398  B0D8               	btfsc	status,0,c
 10576  00139A  D019               	goto	i2l8228
 10577  00139C                     i2l8222:
 10578                           
 10579                           ;main.c: 363: startTime[i]=time_i[i];
 10580  00139C  90D8               	bcf	status,0,c
 10581  00139E  343B               	rlcf	keypressed@i,w,c
 10582  0013A0  6ED9               	movwf	fsr2l,c
 10583  0013A2  343C               	rlcf	keypressed@i+1,w,c
 10584  0013A4  6EDA               	movwf	fsr2h,c
 10585  0013A6  0E3E               	movlw	low _time_i
 10586  0013A8  26D9               	addwf	fsr2l,f,c
 10587  0013AA  0E00               	movlw	high _time_i
 10588  0013AC  22DA               	addwfc	fsr2h,f,c
 10589  0013AE  90D8               	bcf	status,0,c
 10590  0013B0  343B               	rlcf	keypressed@i,w,c
 10591  0013B2  6EE1               	movwf	fsr1l,c
 10592  0013B4  343C               	rlcf	keypressed@i+1,w,c
 10593  0013B6  6EE2               	movwf	fsr1h,c
 10594  0013B8  0E0E               	movlw	low _startTime
 10595  0013BA  26E1               	addwf	fsr1l,f,c
 10596  0013BC  0E01               	movlw	high _startTime
 10597  0013BE  22E2               	addwfc	fsr1h,f,c
 10598  0013C0  CFDE FFE6          	movff	postinc2,postinc1
 10599  0013C4  CFDD FFE5          	movff	postdec2,postdec1
 10600  0013C8  4A3B               	infsnz	keypressed@i,f,c
 10601  0013CA  2A3C               	incf	keypressed@i+1,f,c
 10602  0013CC  D7DF               	goto	i2l8218
 10603  0013CE                     i2l8228:
 10604                           
 10605                           ;main.c: 365: if (keys[keypress]=='B'&&logIndex<events){
 10606  0013CE  503D               	movf	keypressed@keypress,w,c
 10607  0013D0  0D01               	mullw	1
 10608  0013D2  0EE5               	movlw	low _keys
 10609  0013D4  24F3               	addwf	prodl,w,c
 10610  0013D6  6EF6               	movwf	tblptrl,c
 10611  0013D8  0EFE               	movlw	high _keys
 10612  0013DA  20F4               	addwfc	prodh,w,c
 10613  0013DC  6EF7               	movwf	tblptrh,c
 10614  0013DE                     	if	1	;There are 3 active tblptr bytes
 10615  0013DE  6AF8               	clrf	tblptru,c
 10616  0013E0  0E00               	movlw	low (__mediumconst shr (0+16))
 10617  0013E2  22F8               	addwfc	tblptru,f,c
 10618  0013E4                     	endif
 10619  0013E4  0008               	tblrd		*
 10620  0013E6  50F5               	movf	tablat,w,c
 10621  0013E8  0A42               	xorlw	66
 10622  0013EA  A4D8               	btfss	status,2,c
 10623  0013EC  D012               	goto	i2l8234
 10624  0013EE  0100               	movlb	0	; () banked
 10625  0013F0  51F1               	movf	_events& (0+255),w,b
 10626  0013F2  0100               	movlb	0	; () banked
 10627  0013F4  5DF3               	subwf	_logIndex& (0+255),w,b
 10628  0013F6  0100               	movlb	0	; () banked
 10629  0013F8  51F4               	movf	(_logIndex+1)& (0+255),w,b
 10630  0013FA  0A80               	xorlw	128
 10631  0013FC  6E2B               	movwf	??_keypressed& (0+255),c
 10632  0013FE  0100               	movlb	0	; () banked
 10633  001400  51F2               	movf	(_events+1)& (0+255),w,b
 10634  001402  0A80               	xorlw	128
 10635  001404  582B               	subwfb	??_keypressed& (0+255),w,c
 10636  001406  B0D8               	btfsc	status,0,c
 10637  001408  D004               	goto	i2l8234
 10638                           
 10639                           ; BSR set to: 0
 10640                           ;main.c: 369: logIndex++;
 10641  00140A  0100               	movlb	0	; () banked
 10642  00140C  4BF3               	infsnz	_logIndex& (0+255),f,b
 10643  00140E  2BF4               	incf	(_logIndex+1)& (0+255),f,b
 10644                           
 10645                           ;main.c: 370: }
 10646  001410  D1B5               	goto	i2l348
 10647  001412                     i2l8234:
 10648                           
 10649                           ;main.c: 371: else if (keys[keypress]=='A'&&logIndex>1)
 10650  001412  503D               	movf	keypressed@keypress,w,c
 10651  001414  0D01               	mullw	1
 10652  001416  0EE5               	movlw	low _keys
 10653  001418  24F3               	addwf	prodl,w,c
 10654  00141A  6EF6               	movwf	tblptrl,c
 10655  00141C  0EFE               	movlw	high _keys
 10656  00141E  20F4               	addwfc	prodh,w,c
 10657  001420  6EF7               	movwf	tblptrh,c
 10658  001422                     	if	1	;There are 3 active tblptr bytes
 10659  001422  6AF8               	clrf	tblptru,c
 10660  001424  0E00               	movlw	low (__mediumconst shr (0+16))
 10661  001426  22F8               	addwfc	tblptru,f,c
 10662  001428                     	endif
 10663  001428  0008               	tblrd		*
 10664  00142A  50F5               	movf	tablat,w,c
 10665  00142C  0A41               	xorlw	65
 10666  00142E  A4D8               	btfss	status,2,c
 10667  001430  D077               	goto	i2l8268
 10668  001432  0100               	movlb	0	; () banked
 10669  001434  BFF4               	btfsc	(_logIndex+1)& (0+255),7,b
 10670  001436  D074               	goto	i2l8268
 10671  001438  0100               	movlb	0	; () banked
 10672  00143A  51F4               	movf	(_logIndex+1)& (0+255),w,b
 10673  00143C  E105               	bnz	i2u1300_40
 10674  00143E  0E02               	movlw	2
 10675  001440  0100               	movlb	0	; () banked
 10676  001442  5DF3               	subwf	_logIndex& (0+255),w,b
 10677  001444  A0D8               	btfss	status,0,c
 10678  001446  D06C               	goto	i2l8268
 10679  001448                     i2u1300_40:
 10680                           
 10681                           ; BSR set to: 0
 10682                           ;main.c: 372: logIndex--;
 10683  001448  0100               	movlb	0	; () banked
 10684  00144A  07F3               	decf	_logIndex& (0+255),f,b
 10685  00144C  A0D8               	btfss	status,0,c
 10686  00144E  07F4               	decf	(_logIndex+1)& (0+255),f,b
 10687  001450  D195               	goto	i2l348
 10688  001452                     i2l8244:
 10689                           
 10690                           ; BSR set to: 0
 10691                           ;main.c: 377: for (i=0;i<7;i++)
 10692  001452  0E00               	movlw	0
 10693  001454  6E3C               	movwf	keypressed@i+1,c
 10694  001456  0E00               	movlw	0
 10695  001458  6E3B               	movwf	keypressed@i,c
 10696  00145A                     i2l8246:
 10697                           
 10698                           ; BSR set to: 0
 10699  00145A  BE3C               	btfsc	keypressed@i+1,7,c
 10700  00145C  D006               	goto	i2l8250
 10701  00145E  503C               	movf	keypressed@i+1,w,c
 10702  001460  E11D               	bnz	i2l8256
 10703  001462  0E07               	movlw	7
 10704  001464  5C3B               	subwf	keypressed@i,w,c
 10705  001466  B0D8               	btfsc	status,0,c
 10706  001468  D019               	goto	i2l8256
 10707  00146A                     i2l8250:
 10708                           
 10709                           ;main.c: 378: startTime[i]=time_i[i];
 10710  00146A  90D8               	bcf	status,0,c
 10711  00146C  343B               	rlcf	keypressed@i,w,c
 10712  00146E  6ED9               	movwf	fsr2l,c
 10713  001470  343C               	rlcf	keypressed@i+1,w,c
 10714  001472  6EDA               	movwf	fsr2h,c
 10715  001474  0E3E               	movlw	low _time_i
 10716  001476  26D9               	addwf	fsr2l,f,c
 10717  001478  0E00               	movlw	high _time_i
 10718  00147A  22DA               	addwfc	fsr2h,f,c
 10719  00147C  90D8               	bcf	status,0,c
 10720  00147E  343B               	rlcf	keypressed@i,w,c
 10721  001480  6EE1               	movwf	fsr1l,c
 10722  001482  343C               	rlcf	keypressed@i+1,w,c
 10723  001484  6EE2               	movwf	fsr1h,c
 10724  001486  0E0E               	movlw	low _startTime
 10725  001488  26E1               	addwf	fsr1l,f,c
 10726  00148A  0E01               	movlw	high _startTime
 10727  00148C  22E2               	addwfc	fsr1h,f,c
 10728  00148E  CFDE FFE6          	movff	postinc2,postinc1
 10729  001492  CFDD FFE5          	movff	postdec2,postdec1
 10730  001496  4A3B               	infsnz	keypressed@i,f,c
 10731  001498  2A3C               	incf	keypressed@i+1,f,c
 10732  00149A  D7DF               	goto	i2l8246
 10733  00149C                     i2l8256:
 10734                           
 10735                           ;main.c: 380: if (keys[keypress]=='B'&&creditIndex<creditSize)
 10736  00149C  503D               	movf	keypressed@keypress,w,c
 10737  00149E  0D01               	mullw	1
 10738  0014A0  0EE5               	movlw	low _keys
 10739  0014A2  24F3               	addwf	prodl,w,c
 10740  0014A4  6EF6               	movwf	tblptrl,c
 10741  0014A6  0EFE               	movlw	high _keys
 10742  0014A8  20F4               	addwfc	prodh,w,c
 10743  0014AA  6EF7               	movwf	tblptrh,c
 10744  0014AC                     	if	1	;There are 3 active tblptr bytes
 10745  0014AC  6AF8               	clrf	tblptru,c
 10746  0014AE  0E00               	movlw	low (__mediumconst shr (0+16))
 10747  0014B0  22F8               	addwfc	tblptru,f,c
 10748  0014B2                     	endif
 10749  0014B2  0008               	tblrd		*
 10750  0014B4  50F5               	movf	tablat,w,c
 10751  0014B6  0A42               	xorlw	66
 10752  0014B8  A4D8               	btfss	status,2,c
 10753  0014BA  D012               	goto	i2l8262
 10754  0014BC  0100               	movlb	0	; () banked
 10755  0014BE  51EB               	movf	_creditSize& (0+255),w,b
 10756  0014C0  0100               	movlb	0	; () banked
 10757  0014C2  5DE9               	subwf	_creditIndex& (0+255),w,b
 10758  0014C4  0100               	movlb	0	; () banked
 10759  0014C6  51EA               	movf	(_creditIndex+1)& (0+255),w,b
 10760  0014C8  0A80               	xorlw	128
 10761  0014CA  6E2B               	movwf	??_keypressed& (0+255),c
 10762  0014CC  0100               	movlb	0	; () banked
 10763  0014CE  51EC               	movf	(_creditSize+1)& (0+255),w,b
 10764  0014D0  0A80               	xorlw	128
 10765  0014D2  582B               	subwfb	??_keypressed& (0+255),w,c
 10766  0014D4  B0D8               	btfsc	status,0,c
 10767  0014D6  D004               	goto	i2l8262
 10768                           
 10769                           ; BSR set to: 0
 10770                           ;main.c: 381: creditIndex++;
 10771  0014D8  0100               	movlb	0	; () banked
 10772  0014DA  4BE9               	infsnz	_creditIndex& (0+255),f,b
 10773  0014DC  2BEA               	incf	(_creditIndex+1)& (0+255),f,b
 10774  0014DE  D14E               	goto	i2l348
 10775  0014E0                     i2l8262:
 10776                           
 10777                           ;main.c: 382: else if (keys[keypress]=='A'&&creditIndex>1)
 10778  0014E0  503D               	movf	keypressed@keypress,w,c
 10779  0014E2  0D01               	mullw	1
 10780  0014E4  0EE5               	movlw	low _keys
 10781  0014E6  24F3               	addwf	prodl,w,c
 10782  0014E8  6EF6               	movwf	tblptrl,c
 10783  0014EA  0EFE               	movlw	high _keys
 10784  0014EC  20F4               	addwfc	prodh,w,c
 10785  0014EE  6EF7               	movwf	tblptrh,c
 10786  0014F0                     	if	1	;There are 3 active tblptr bytes
 10787  0014F0  6AF8               	clrf	tblptru,c
 10788  0014F2  0E00               	movlw	low (__mediumconst shr (0+16))
 10789  0014F4  22F8               	addwfc	tblptru,f,c
 10790  0014F6                     	endif
 10791  0014F6  0008               	tblrd		*
 10792  0014F8  50F5               	movf	tablat,w,c
 10793  0014FA  0A41               	xorlw	65
 10794  0014FC  A4D8               	btfss	status,2,c
 10795  0014FE  D010               	goto	i2l8268
 10796  001500  0100               	movlb	0	; () banked
 10797  001502  BFEA               	btfsc	(_creditIndex+1)& (0+255),7,b
 10798  001504  D00D               	goto	i2l8268
 10799  001506  0100               	movlb	0	; () banked
 10800  001508  51EA               	movf	(_creditIndex+1)& (0+255),w,b
 10801  00150A  E105               	bnz	i2u1307_40
 10802  00150C  0E02               	movlw	2
 10803  00150E  0100               	movlb	0	; () banked
 10804  001510  5DE9               	subwf	_creditIndex& (0+255),w,b
 10805  001512  A0D8               	btfss	status,0,c
 10806  001514  D005               	goto	i2l8268
 10807  001516                     i2u1307_40:
 10808                           
 10809                           ; BSR set to: 0
 10810                           ;main.c: 383: creditIndex--;
 10811  001516  0100               	movlb	0	; () banked
 10812  001518  07E9               	decf	_creditIndex& (0+255),f,b
 10813  00151A  A0D8               	btfss	status,0,c
 10814  00151C  07EA               	decf	(_creditIndex+1)& (0+255),f,b
 10815  00151E  D12E               	goto	i2l348
 10816  001520                     i2l8268:
 10817                           
 10818                           ;main.c: 384: else if(keys[keypress]=='D')
 10819  001520  503D               	movf	keypressed@keypress,w,c
 10820  001522  0D01               	mullw	1
 10821  001524  0EE5               	movlw	low _keys
 10822  001526  24F3               	addwf	prodl,w,c
 10823  001528  6EF6               	movwf	tblptrl,c
 10824  00152A  0EFE               	movlw	high _keys
 10825  00152C  20F4               	addwfc	prodh,w,c
 10826  00152E  6EF7               	movwf	tblptrh,c
 10827  001530                     	if	1	;There are 3 active tblptr bytes
 10828  001530  6AF8               	clrf	tblptru,c
 10829  001532  0E00               	movlw	low (__mediumconst shr (0+16))
 10830  001534  22F8               	addwfc	tblptru,f,c
 10831  001536                     	endif
 10832  001536  0008               	tblrd		*
 10833  001538  50F5               	movf	tablat,w,c
 10834  00153A  0A44               	xorlw	68
 10835  00153C  A4D8               	btfss	status,2,c
 10836  00153E  D11E               	goto	i2l348
 10837  001540                     i2l8270:
 10838                           
 10839                           ;main.c: 385: nstate='m';
 10840  001540  0E6D               	movlw	109
 10841  001542  D0FD               	goto	L9
 10842  001544                     i2l8272:
 10843                           
 10844                           ; BSR set to: 0
 10845                           ;main.c: 388: if (keys[keypress]=='1'){
 10846  001544  503D               	movf	keypressed@keypress,w,c
 10847  001546  0D01               	mullw	1
 10848  001548  0EE5               	movlw	low _keys
 10849  00154A  24F3               	addwf	prodl,w,c
 10850  00154C  6EF6               	movwf	tblptrl,c
 10851  00154E  0EFE               	movlw	high _keys
 10852  001550  20F4               	addwfc	prodh,w,c
 10853  001552  6EF7               	movwf	tblptrh,c
 10854  001554                     	if	1	;There are 3 active tblptr bytes
 10855  001554  6AF8               	clrf	tblptru,c
 10856  001556  0E00               	movlw	low (__mediumconst shr (0+16))
 10857  001558  22F8               	addwfc	tblptru,f,c
 10858  00155A                     	endif
 10859  00155A  0008               	tblrd		*
 10860  00155C  50F5               	movf	tablat,w,c
 10861  00155E  0A31               	xorlw	49
 10862  001560  A4D8               	btfss	status,2,c
 10863  001562  D012               	goto	i2l8278
 10864                           
 10865                           ; BSR set to: 0
 10866                           ;main.c: 389: eskaNoCap++;
 10867  001564  0100               	movlb	0	; () banked
 10868  001566  4BCD               	infsnz	_eskaNoCap& (0+255),f,b
 10869  001568  2BCE               	incf	(_eskaNoCap+1)& (0+255),f,b
 10870                           
 10871                           ; BSR set to: 0
 10872                           ;main.c: 390: eskaNoCap%=100;
 10873  00156A  C0CD  F001         	movff	_eskaNoCap,i2___awmod@dividend
 10874  00156E  C0CE  F002         	movff	_eskaNoCap+1,i2___awmod@dividend+1
 10875  001572  0E00               	movlw	0
 10876  001574  6E04               	movwf	i2___awmod@divisor+1,c
 10877  001576  0E64               	movlw	100
 10878  001578  6E03               	movwf	i2___awmod@divisor,c
 10879  00157A  EC3E  F019         	call	i2___awmod	;wreg free
 10880  00157E  C001  F0CD         	movff	?i2___awmod,_eskaNoCap
 10881  001582  C002  F0CE         	movff	?i2___awmod+1,_eskaNoCap+1
 10882                           
 10883                           ;main.c: 391: }
 10884  001586  D0FA               	goto	i2l348
 10885  001588                     i2l8278:
 10886                           
 10887                           ;main.c: 392: else if (keys[keypress]=='2'){
 10888  001588  503D               	movf	keypressed@keypress,w,c
 10889  00158A  0D01               	mullw	1
 10890  00158C  0EE5               	movlw	low _keys
 10891  00158E  24F3               	addwf	prodl,w,c
 10892  001590  6EF6               	movwf	tblptrl,c
 10893  001592  0EFE               	movlw	high _keys
 10894  001594  20F4               	addwfc	prodh,w,c
 10895  001596  6EF7               	movwf	tblptrh,c
 10896  001598                     	if	1	;There are 3 active tblptr bytes
 10897  001598  6AF8               	clrf	tblptru,c
 10898  00159A  0E00               	movlw	low (__mediumconst shr (0+16))
 10899  00159C  22F8               	addwfc	tblptru,f,c
 10900  00159E                     	endif
 10901  00159E  0008               	tblrd		*
 10902  0015A0  50F5               	movf	tablat,w,c
 10903  0015A2  0A32               	xorlw	50
 10904  0015A4  A4D8               	btfss	status,2,c
 10905  0015A6  D012               	goto	i2l8284
 10906                           
 10907                           ;main.c: 393: eskaWCap++;
 10908  0015A8  0100               	movlb	0	; () banked
 10909  0015AA  4BCF               	infsnz	_eskaWCap& (0+255),f,b
 10910  0015AC  2BD0               	incf	(_eskaWCap+1)& (0+255),f,b
 10911                           
 10912                           ; BSR set to: 0
 10913                           ;main.c: 394: eskaWCap%=100;
 10914  0015AE  C0CF  F001         	movff	_eskaWCap,i2___awmod@dividend
 10915  0015B2  C0D0  F002         	movff	_eskaWCap+1,i2___awmod@dividend+1
 10916  0015B6  0E00               	movlw	0
 10917  0015B8  6E04               	movwf	i2___awmod@divisor+1,c
 10918  0015BA  0E64               	movlw	100
 10919  0015BC  6E03               	movwf	i2___awmod@divisor,c
 10920  0015BE  EC3E  F019         	call	i2___awmod	;wreg free
 10921  0015C2  C001  F0CF         	movff	?i2___awmod,_eskaWCap
 10922  0015C6  C002  F0D0         	movff	?i2___awmod+1,_eskaWCap+1
 10923                           
 10924                           ;main.c: 395: }
 10925  0015CA  D0D8               	goto	i2l348
 10926  0015CC                     i2l8284:
 10927                           
 10928                           ;main.c: 396: else if (keys[keypress]=='4'){
 10929  0015CC  503D               	movf	keypressed@keypress,w,c
 10930  0015CE  0D01               	mullw	1
 10931  0015D0  0EE5               	movlw	low _keys
 10932  0015D2  24F3               	addwf	prodl,w,c
 10933  0015D4  6EF6               	movwf	tblptrl,c
 10934  0015D6  0EFE               	movlw	high _keys
 10935  0015D8  20F4               	addwfc	prodh,w,c
 10936  0015DA  6EF7               	movwf	tblptrh,c
 10937  0015DC                     	if	1	;There are 3 active tblptr bytes
 10938  0015DC  6AF8               	clrf	tblptru,c
 10939  0015DE  0E00               	movlw	low (__mediumconst shr (0+16))
 10940  0015E0  22F8               	addwfc	tblptru,f,c
 10941  0015E2                     	endif
 10942  0015E2  0008               	tblrd		*
 10943  0015E4  50F5               	movf	tablat,w,c
 10944  0015E6  0A34               	xorlw	52
 10945  0015E8  A4D8               	btfss	status,2,c
 10946  0015EA  D012               	goto	i2l8290
 10947                           
 10948                           ;main.c: 397: yopNoCap++;
 10949  0015EC  0100               	movlb	0	; () banked
 10950  0015EE  4BDB               	infsnz	_yopNoCap& (0+255),f,b
 10951  0015F0  2BDC               	incf	(_yopNoCap+1)& (0+255),f,b
 10952                           
 10953                           ; BSR set to: 0
 10954                           ;main.c: 398: yopNoCap%=100;
 10955  0015F2  C0DB  F001         	movff	_yopNoCap,i2___awmod@dividend
 10956  0015F6  C0DC  F002         	movff	_yopNoCap+1,i2___awmod@dividend+1
 10957  0015FA  0E00               	movlw	0
 10958  0015FC  6E04               	movwf	i2___awmod@divisor+1,c
 10959  0015FE  0E64               	movlw	100
 10960  001600  6E03               	movwf	i2___awmod@divisor,c
 10961  001602  EC3E  F019         	call	i2___awmod	;wreg free
 10962  001606  C001  F0DB         	movff	?i2___awmod,_yopNoCap
 10963  00160A  C002  F0DC         	movff	?i2___awmod+1,_yopNoCap+1
 10964                           
 10965                           ;main.c: 399: }
 10966  00160E  D0B6               	goto	i2l348
 10967  001610                     i2l8290:
 10968                           
 10969                           ;main.c: 400: else if (keys[keypress]=='5'){
 10970  001610  503D               	movf	keypressed@keypress,w,c
 10971  001612  0D01               	mullw	1
 10972  001614  0EE5               	movlw	low _keys
 10973  001616  24F3               	addwf	prodl,w,c
 10974  001618  6EF6               	movwf	tblptrl,c
 10975  00161A  0EFE               	movlw	high _keys
 10976  00161C  20F4               	addwfc	prodh,w,c
 10977  00161E  6EF7               	movwf	tblptrh,c
 10978  001620                     	if	1	;There are 3 active tblptr bytes
 10979  001620  6AF8               	clrf	tblptru,c
 10980  001622  0E00               	movlw	low (__mediumconst shr (0+16))
 10981  001624  22F8               	addwfc	tblptru,f,c
 10982  001626                     	endif
 10983  001626  0008               	tblrd		*
 10984  001628  50F5               	movf	tablat,w,c
 10985  00162A  0A35               	xorlw	53
 10986  00162C  A4D8               	btfss	status,2,c
 10987  00162E  D012               	goto	i2l8296
 10988                           
 10989                           ;main.c: 401: yopWCap++;
 10990  001630  0100               	movlb	0	; () banked
 10991  001632  4BDD               	infsnz	_yopWCap& (0+255),f,b
 10992  001634  2BDE               	incf	(_yopWCap+1)& (0+255),f,b
 10993                           
 10994                           ; BSR set to: 0
 10995                           ;main.c: 402: yopWCap%=100;
 10996  001636  C0DD  F001         	movff	_yopWCap,i2___awmod@dividend
 10997  00163A  C0DE  F002         	movff	_yopWCap+1,i2___awmod@dividend+1
 10998  00163E  0E00               	movlw	0
 10999  001640  6E04               	movwf	i2___awmod@divisor+1,c
 11000  001642  0E64               	movlw	100
 11001  001644  6E03               	movwf	i2___awmod@divisor,c
 11002  001646  EC3E  F019         	call	i2___awmod	;wreg free
 11003  00164A  C001  F0DD         	movff	?i2___awmod,_yopWCap
 11004  00164E  C002  F0DE         	movff	?i2___awmod+1,_yopWCap+1
 11005                           
 11006                           ;main.c: 403: }
 11007  001652  D094               	goto	i2l348
 11008  001654                     i2l8296:
 11009                           
 11010                           ;main.c: 404: else if (keys[keypress]=='7'||keys[keypress]=='8')
 11011  001654  503D               	movf	keypressed@keypress,w,c
 11012  001656  0D01               	mullw	1
 11013  001658  0EE5               	movlw	low _keys
 11014  00165A  24F3               	addwf	prodl,w,c
 11015  00165C  6EF6               	movwf	tblptrl,c
 11016  00165E  0EFE               	movlw	high _keys
 11017  001660  20F4               	addwfc	prodh,w,c
 11018  001662  6EF7               	movwf	tblptrh,c
 11019  001664                     	if	1	;There are 3 active tblptr bytes
 11020  001664  6AF8               	clrf	tblptru,c
 11021  001666  0E00               	movlw	low (__mediumconst shr (0+16))
 11022  001668  22F8               	addwfc	tblptru,f,c
 11023  00166A                     	endif
 11024  00166A  0008               	tblrd		*
 11025  00166C  50F5               	movf	tablat,w,c
 11026  00166E  0A37               	xorlw	55
 11027  001670  B4D8               	btfsc	status,2,c
 11028  001672  D010               	goto	i2l8300
 11029  001674  503D               	movf	keypressed@keypress,w,c
 11030  001676  0D01               	mullw	1
 11031  001678  0EE5               	movlw	low _keys
 11032  00167A  24F3               	addwf	prodl,w,c
 11033  00167C  6EF6               	movwf	tblptrl,c
 11034  00167E  0EFE               	movlw	high _keys
 11035  001680  20F4               	addwfc	prodh,w,c
 11036  001682  6EF7               	movwf	tblptrh,c
 11037  001684                     	if	1	;There are 3 active tblptr bytes
 11038  001684  6AF8               	clrf	tblptru,c
 11039  001686  0E00               	movlw	low (__mediumconst shr (0+16))
 11040  001688  22F8               	addwfc	tblptru,f,c
 11041  00168A                     	endif
 11042  00168A  0008               	tblrd		*
 11043  00168C  50F5               	movf	tablat,w,c
 11044  00168E  0A38               	xorlw	56
 11045  001690  A4D8               	btfss	status,2,c
 11046  001692  D074               	goto	i2l348
 11047  001694                     i2l8300:
 11048                           
 11049                           ;main.c: 405: nstate='e';
 11050  001694  0E65               	movlw	101
 11051  001696  D053               	goto	L9
 11052  001698                     i2l8302:
 11053                           
 11054                           ; BSR set to: 0
 11055                           ;main.c: 408: if (keys[keypress]=='B'&&endIndex<endSize)
 11056  001698  503D               	movf	keypressed@keypress,w,c
 11057  00169A  0D01               	mullw	1
 11058  00169C  0EE5               	movlw	low _keys
 11059  00169E  24F3               	addwf	prodl,w,c
 11060  0016A0  6EF6               	movwf	tblptrl,c
 11061  0016A2  0EFE               	movlw	high _keys
 11062  0016A4  20F4               	addwfc	prodh,w,c
 11063  0016A6  6EF7               	movwf	tblptrh,c
 11064  0016A8                     	if	1	;There are 3 active tblptr bytes
 11065  0016A8  6AF8               	clrf	tblptru,c
 11066  0016AA  0E00               	movlw	low (__mediumconst shr (0+16))
 11067  0016AC  22F8               	addwfc	tblptru,f,c
 11068  0016AE                     	endif
 11069  0016AE  0008               	tblrd		*
 11070  0016B0  50F5               	movf	tablat,w,c
 11071  0016B2  0A42               	xorlw	66
 11072  0016B4  A4D8               	btfss	status,2,c
 11073  0016B6  D012               	goto	i2l8308
 11074                           
 11075                           ; BSR set to: 0
 11076  0016B8  0100               	movlb	0	; () banked
 11077  0016BA  51EF               	movf	_endSize& (0+255),w,b
 11078  0016BC  0100               	movlb	0	; () banked
 11079  0016BE  5DED               	subwf	_endIndex& (0+255),w,b
 11080  0016C0  0100               	movlb	0	; () banked
 11081  0016C2  51EE               	movf	(_endIndex+1)& (0+255),w,b
 11082  0016C4  0A80               	xorlw	128
 11083  0016C6  6E2B               	movwf	??_keypressed& (0+255),c
 11084  0016C8  0100               	movlb	0	; () banked
 11085  0016CA  51F0               	movf	(_endSize+1)& (0+255),w,b
 11086  0016CC  0A80               	xorlw	128
 11087  0016CE  582B               	subwfb	??_keypressed& (0+255),w,c
 11088  0016D0  B0D8               	btfsc	status,0,c
 11089  0016D2  D004               	goto	i2l8308
 11090                           
 11091                           ; BSR set to: 0
 11092                           ;main.c: 409: endIndex++;
 11093  0016D4  0100               	movlb	0	; () banked
 11094  0016D6  4BED               	infsnz	_endIndex& (0+255),f,b
 11095  0016D8  2BEE               	incf	(_endIndex+1)& (0+255),f,b
 11096  0016DA  D050               	goto	i2l348
 11097  0016DC                     i2l8308:
 11098                           
 11099                           ; BSR set to: 0
 11100                           ;main.c: 410: else if (keys[keypress]=='A'&&endIndex>1)
 11101  0016DC  503D               	movf	keypressed@keypress,w,c
 11102  0016DE  0D01               	mullw	1
 11103  0016E0  0EE5               	movlw	low _keys
 11104  0016E2  24F3               	addwf	prodl,w,c
 11105  0016E4  6EF6               	movwf	tblptrl,c
 11106  0016E6  0EFE               	movlw	high _keys
 11107  0016E8  20F4               	addwfc	prodh,w,c
 11108  0016EA  6EF7               	movwf	tblptrh,c
 11109  0016EC                     	if	1	;There are 3 active tblptr bytes
 11110  0016EC  6AF8               	clrf	tblptru,c
 11111  0016EE  0E00               	movlw	low (__mediumconst shr (0+16))
 11112  0016F0  22F8               	addwfc	tblptru,f,c
 11113  0016F2                     	endif
 11114  0016F2  0008               	tblrd		*
 11115  0016F4  50F5               	movf	tablat,w,c
 11116  0016F6  0A41               	xorlw	65
 11117  0016F8  A4D8               	btfss	status,2,c
 11118  0016FA  D010               	goto	i2l8314
 11119                           
 11120                           ; BSR set to: 0
 11121  0016FC  0100               	movlb	0	; () banked
 11122  0016FE  BFEE               	btfsc	(_endIndex+1)& (0+255),7,b
 11123  001700  D00D               	goto	i2l8314
 11124  001702  0100               	movlb	0	; () banked
 11125  001704  51EE               	movf	(_endIndex+1)& (0+255),w,b
 11126  001706  E105               	bnz	i2u1318_40
 11127  001708  0E02               	movlw	2
 11128  00170A  0100               	movlb	0	; () banked
 11129  00170C  5DED               	subwf	_endIndex& (0+255),w,b
 11130  00170E  A0D8               	btfss	status,0,c
 11131  001710  D005               	goto	i2l8314
 11132  001712                     i2u1318_40:
 11133                           
 11134                           ; BSR set to: 0
 11135                           ;main.c: 411: endIndex--;
 11136  001712  0100               	movlb	0	; () banked
 11137  001714  07ED               	decf	_endIndex& (0+255),f,b
 11138  001716  A0D8               	btfss	status,0,c
 11139  001718  07EE               	decf	(_endIndex+1)& (0+255),f,b
 11140  00171A  D030               	goto	i2l348
 11141  00171C                     i2l8314:
 11142                           
 11143                           ; BSR set to: 0
 11144                           ;main.c: 412: else if (keys[keypress]=='C')
 11145  00171C  503D               	movf	keypressed@keypress,w,c
 11146  00171E  0D01               	mullw	1
 11147  001720  0EE5               	movlw	low _keys
 11148  001722  24F3               	addwf	prodl,w,c
 11149  001724  6EF6               	movwf	tblptrl,c
 11150  001726  0EFE               	movlw	high _keys
 11151  001728  20F4               	addwfc	prodh,w,c
 11152  00172A  6EF7               	movwf	tblptrh,c
 11153  00172C                     	if	1	;There are 3 active tblptr bytes
 11154  00172C  6AF8               	clrf	tblptru,c
 11155  00172E  0E00               	movlw	low (__mediumconst shr (0+16))
 11156  001730  22F8               	addwfc	tblptru,f,c
 11157  001732                     	endif
 11158  001732  0008               	tblrd		*
 11159  001734  50F5               	movf	tablat,w,c
 11160  001736  0A43               	xorlw	67
 11161  001738  A4D8               	btfss	status,2,c
 11162  00173A  D020               	goto	i2l348
 11163                           
 11164                           ; BSR set to: 0
 11165                           ;main.c: 413: nstate='r';
 11166  00173C  0E72               	movlw	114
 11167  00173E                     L9:
 11168  00173E  0100               	movlb	0	; () banked
 11169  001740  6FE7               	movwf	_nstate& (0+255),b
 11170                           
 11171                           ; BSR set to: 0
 11172                           ;main.c: 414: break;
 11173                           
 11174                           ; BSR set to: 0
 11175                           
 11176                           ; BSR set to: 0
 11177  001742  D01C               	goto	i2l348
 11178  001744                     i2l8318:
 11179                           
 11180                           ; BSR set to: 0
 11181                           ;main.c: 416: printf("no page found");
 11182  001744  0ECB               	movlw	low STR_17
 11183  001746  6E23               	movwf	i2printf@f,c
 11184  001748  0EFF               	movlw	high STR_17
 11185  00174A  6E24               	movwf	i2printf@f+1,c
 11186  00174C  EC6A  F01B         	call	i2_printf	;wreg free
 11187                           
 11188                           ;main.c: 418: }
 11189                           
 11190                           ;main.c: 417: break;
 11191  001750  D015               	goto	i2l348
 11192  001752                     i2l8322:
 11193  001752  0100               	movlb	0	; () banked
 11194  001754  51E8               	movf	_state& (0+255),w,b
 11195                           
 11196                           ; Switch size 1, requested type "space"
 11197                           ; Number of cases is 6, Range of values is 99 to 115
 11198                           ; switch strategies available:
 11199                           ; Name         Instructions Cycles
 11200                           ; simple_byte           19    10 (average)
 11201                           ;	Chosen strategy is simple_byte
 11202  001756  0A63               	xorlw	99	; case 99
 11203  001758  B4D8               	btfsc	status,2,c
 11204  00175A  D67B               	goto	i2l8244
 11205  00175C  0A06               	xorlw	6	; case 101
 11206  00175E  B4D8               	btfsc	status,2,c
 11207  001760  D79B               	goto	i2l8302
 11208  001762  0A09               	xorlw	9	; case 108
 11209  001764  B4D8               	btfsc	status,2,c
 11210  001766  D60E               	goto	i2l8216
 11211  001768  0A01               	xorlw	1	; case 109
 11212  00176A  B4D8               	btfsc	status,2,c
 11213  00176C  D564               	goto	i2l8168
 11214  00176E  0A1F               	xorlw	31	; case 114
 11215  001770  B4D8               	btfsc	status,2,c
 11216  001772  D6E6               	goto	i2l8270
 11217  001774  0A01               	xorlw	1	; case 115
 11218  001776  B4D8               	btfsc	status,2,c
 11219  001778  D6E5               	goto	i2l8272
 11220  00177A  D7E4               	goto	i2l8318
 11221  00177C                     i2l348:
 11222                           
 11223                           ;main.c: 419: INT1IF = 0;
 11224  00177C  90F0               	bcf	intcon3,0,c	;volatile
 11225  00177E                     i2l385:
 11226  00177E  C03A  FFF5         	movff	??_keypressed+15,tablat
 11227  001782  C039  FFF8         	movff	??_keypressed+14,tblptru
 11228  001786  C038  FFF7         	movff	??_keypressed+13,tblptrh
 11229  00178A  C037  FFF6         	movff	??_keypressed+12,tblptrl
 11230  00178E  C036  FFF4         	movff	??_keypressed+11,prodh
 11231  001792  C035  FFF3         	movff	??_keypressed+10,prodl
 11232  001796  C034  FFDA         	movff	??_keypressed+9,fsr2h
 11233  00179A  C033  FFD9         	movff	??_keypressed+8,fsr2l
 11234  00179E  C032  FFE2         	movff	??_keypressed+7,fsr1h
 11235  0017A2  C031  FFE1         	movff	??_keypressed+6,fsr1l
 11236  0017A6  C030  FFEA         	movff	??_keypressed+5,fsr0h
 11237  0017AA  C02F  FFE9         	movff	??_keypressed+4,fsr0l
 11238  0017AE  C02E  FFFB         	movff	??_keypressed+3,pclatu
 11239  0017B2  C02D  FFFA         	movff	??_keypressed+2,pclath
 11240  0017B6  927A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11241  0017B8  0011               	retfie		f
 11242  0017BA                     __end_of_keypressed:
 11243                           	opt stack 0
 11244                           tosu	equ	0xFFF
 11245                           tosh	equ	0xFFE
 11246                           tosl	equ	0xFFD
 11247                           pclatu	equ	0xFFB
 11248                           pclath	equ	0xFFA
 11249                           tblptru	equ	0xFF8
 11250                           tblptrh	equ	0xFF7
 11251                           tblptrl	equ	0xFF6
 11252                           tablat	equ	0xFF5
 11253                           prodh	equ	0xFF4
 11254                           prodl	equ	0xFF3
 11255                           intcon	equ	0xFF2
 11256                           intcon2	equ	0xFF1
 11257                           intcon3	equ	0xFF0
 11258                           indf0	equ	0xFEF
 11259                           postinc0	equ	0xFEE
 11260                           fsr0h	equ	0xFEA
 11261                           fsr0l	equ	0xFE9
 11262                           wreg	equ	0xFE8
 11263                           indf1	equ	0xFE7
 11264                           postinc1	equ	0xFE6
 11265                           postdec1	equ	0xFE5
 11266                           fsr1h	equ	0xFE2
 11267                           fsr1l	equ	0xFE1
 11268                           indf2	equ	0xFDF
 11269                           postinc2	equ	0xFDE
 11270                           postdec2	equ	0xFDD
 11271                           fsr2h	equ	0xFDA
 11272                           fsr2l	equ	0xFD9
 11273                           status	equ	0xFD8
 11274                           
 11275 ;; *************** function i2_printf *****************
 11276 ;; Defined at:
 11277 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
 11278 ;; Parameters:    Size  Location     Type
 11279 ;;  f               2   34[COMRAM] PTR const unsigned char 
 11280 ;;		 -> STR_17(14), STR_16(15), STR_15(8), display1(18), 
 11281 ;;		 -> display0(18), 
 11282 ;; Auto vars:     Size  Location     Type
 11283 ;;  printf          4   38[COMRAM] struct __prbuf
 11284 ;;  printf          2   36[COMRAM] PTR void [1]
 11285 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
 11286 ;; Return value:  Size  Location     Type
 11287 ;;                  2   34[COMRAM] int 
 11288 ;; Registers used:
 11289 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11290 ;; Tracked objects:
 11291 ;;		On entry : 0/0
 11292 ;;		On exit  : 0/0
 11293 ;;		Unchanged: 0/0
 11294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11295 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11296 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11298 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11299 ;;Total ram usage:        8 bytes
 11300 ;; Hardware stack levels used:    1
 11301 ;; Hardware stack levels required when called:    3
 11302 ;; This function calls:
 11303 ;;		i2__doprnt
 11304 ;; This function is called by:
 11305 ;;		_keypressed
 11306 ;; This function uses a non-reentrant model
 11307 ;;
 11308                           
 11309                           	psect	text34
 11310  0036D4                     __ptext34:
 11311                           	opt stack 0
 11312  0036D4                     i2_printf:
 11313                           	opt stack 20
 11314                           
 11315                           ;incstack = 0
 11316  0036D4  0E00               	movlw	0
 11317  0036D6  6E27               	movwf	i2printf@pb,c
 11318  0036D8  0E00               	movlw	0
 11319  0036DA  6E28               	movwf	i2printf@pb+1,c
 11320  0036DC  0E58               	movlw	low i2_putch
 11321  0036DE  6E29               	movwf	i2printf@pb+2,c
 11322  0036E0  0E38               	movlw	high i2_putch
 11323  0036E2  6E2A               	movwf	i2printf@pb+3,c
 11324  0036E4  0E25               	movlw	low (?i2_printf+2)
 11325  0036E6  6E25               	movwf	i2printf@ap,c
 11326  0036E8  0E00               	movlw	high (?i2_printf+2)
 11327  0036EA  6E26               	movwf	i2printf@ap+1,c
 11328                           
 11329                           ;	Return value of i2_printf is never used
 11330  0036EC  0E27               	movlw	low i2printf@pb
 11331  0036EE  6E0D               	movwf	i2__doprnt@pb,c
 11332  0036F0  0E00               	movlw	high i2printf@pb
 11333  0036F2  6E0E               	movwf	i2__doprnt@pb+1,c
 11334  0036F4  C023  F00F         	movff	i2printf@f,i2__doprnt@f
 11335  0036F8  C024  F010         	movff	i2printf@f+1,i2__doprnt@f+1
 11336  0036FC  0E25               	movlw	low i2printf@ap
 11337  0036FE  6E11               	movwf	i2__doprnt@ap,c
 11338  003700  0E00               	movlw	high i2printf@ap
 11339  003702  6E12               	movwf	i2__doprnt@ap+1,c
 11340  003704  ECCB  F004         	call	i2__doprnt	;wreg free
 11341  003708  0012               	return	
 11342  00370A                     __end_ofi2_printf:
 11343                           	opt stack 0
 11344                           tosu	equ	0xFFF
 11345                           tosh	equ	0xFFE
 11346                           tosl	equ	0xFFD
 11347                           pclatu	equ	0xFFB
 11348                           pclath	equ	0xFFA
 11349                           tblptru	equ	0xFF8
 11350                           tblptrh	equ	0xFF7
 11351                           tblptrl	equ	0xFF6
 11352                           tablat	equ	0xFF5
 11353                           prodh	equ	0xFF4
 11354                           prodl	equ	0xFF3
 11355                           intcon	equ	0xFF2
 11356                           intcon2	equ	0xFF1
 11357                           intcon3	equ	0xFF0
 11358                           indf0	equ	0xFEF
 11359                           postinc0	equ	0xFEE
 11360                           fsr0h	equ	0xFEA
 11361                           fsr0l	equ	0xFE9
 11362                           wreg	equ	0xFE8
 11363                           indf1	equ	0xFE7
 11364                           postinc1	equ	0xFE6
 11365                           postdec1	equ	0xFE5
 11366                           fsr1h	equ	0xFE2
 11367                           fsr1l	equ	0xFE1
 11368                           indf2	equ	0xFDF
 11369                           postinc2	equ	0xFDE
 11370                           postdec2	equ	0xFDD
 11371                           fsr2h	equ	0xFDA
 11372                           fsr2l	equ	0xFD9
 11373                           status	equ	0xFD8
 11374                           
 11375 ;; *************** function i2__doprnt *****************
 11376 ;; Defined at:
 11377 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 11378 ;; Parameters:    Size  Location     Type
 11379 ;;  pb              2   12[COMRAM] PTR struct __prbuf
 11380 ;;		 -> sprintf@pb(4), printf@pb(4), 
 11381 ;;  f               2   14[COMRAM] PTR const unsigned char 
 11382 ;;		 -> STR_17(14), STR_16(15), STR_15(8), STR_14(5), 
 11383 ;;		 -> STR_13(5), STR_12(5), STR_11(5), STR_10(20), 
 11384 ;;		 -> STR_9(20), STR_8(22), STR_7(19), menu(720), 
 11385 ;;		 -> STR_6(15), STR_5(6), STR_4(14), STR_3(12), 
 11386 ;;		 -> STR_2(23), STR_1(23), display1(18), display0(18), 
 11387 ;;  ap              2   16[COMRAM] PTR PTR void 
 11388 ;;		 -> sprintf@ap(2), printf@ap(2), 
 11389 ;; Auto vars:     Size  Location     Type
 11390 ;;  _doprnt         4    0        struct .
 11391 ;;  _doprnt         2   31[COMRAM] int 
 11392 ;;  _doprnt         2   28[COMRAM] unsigned int 
 11393 ;;  _doprnt         2   26[COMRAM] PTR const unsigned char 
 11394 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_18(7), 
 11395 ;;		 -> _doprnt@c(1), menu(720), ndisplay1(18), ndisplay0(18), 
 11396 ;;  _doprnt         2   24[COMRAM] unsigned int 
 11397 ;;  _doprnt         1   33[COMRAM] char 
 11398 ;;  _doprnt         1   30[COMRAM] unsigned char 
 11399 ;;  _doprnt         1   23[COMRAM] char 
 11400 ;;  _doprnt         1   22[COMRAM] unsigned char 
 11401 ;; Return value:  Size  Location     Type
 11402 ;;                  2   12[COMRAM] int 
 11403 ;; Registers used:
 11404 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11405 ;; Tracked objects:
 11406 ;;		On entry : 0/0
 11407 ;;		On exit  : 0/0
 11408 ;;		Unchanged: 0/0
 11409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11410 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11411 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11412 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11413 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11414 ;;Total ram usage:       22 bytes
 11415 ;; Hardware stack levels used:    1
 11416 ;; Hardware stack levels required when called:    2
 11417 ;; This function calls:
 11418 ;;		Absolute function
 11419 ;;		i2___lwdiv
 11420 ;;		i2___lwmod
 11421 ;;		i2___wmul
 11422 ;;		i2_isdigit
 11423 ;;		i2_putch
 11424 ;; This function is called by:
 11425 ;;		i2_printf
 11426 ;; This function uses a non-reentrant model
 11427 ;;
 11428                           
 11429                           	psect	text35
 11430  000996                     __ptext35:
 11431                           	opt stack 0
 11432  000996                     i2__doprnt:
 11433                           	opt stack 20
 11434                           
 11435                           ;doprnt.c: 499: signed char c;
 11436                           ;doprnt.c: 501: int width;
 11437                           ;doprnt.c: 506: signed char prec;
 11438                           ;doprnt.c: 508: unsigned char flag;
 11439                           ;doprnt.c: 523: union {
 11440                           ;doprnt.c: 524: unsigned long vd;
 11441                           ;doprnt.c: 525: double integ;
 11442                           ;doprnt.c: 526: } tmpval;
 11443                           ;doprnt.c: 528: unsigned int val;
 11444                           ;doprnt.c: 529: unsigned len;
 11445                           ;doprnt.c: 530: const char * cp;
 11446                           ;doprnt.c: 536: while(c = *f++) {
 11447                           
 11448                           ;incstack = 0
 11449  000996  EFD6  F008         	goto	i2l7996
 11450  00099A                     i2l7790:
 11451                           
 11452                           ;doprnt.c: 538: if(c != '%')
 11453  00099A  0E25               	movlw	37
 11454  00099C  1822               	xorwf	i2__doprnt@c,w,c
 11455  00099E  B4D8               	btfsc	status,2,c
 11456  0009A0  D036               	goto	i2l7800
 11457                           
 11458                           ;doprnt.c: 540: {
 11459                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 11460  0009A2  EE20 F002          	lfsr	2,2
 11461  0009A6  500D               	movf	i2__doprnt@pb,w,c
 11462  0009A8  26D9               	addwf	fsr2l,f,c
 11463  0009AA  500E               	movf	i2__doprnt@pb+1,w,c
 11464  0009AC  22DA               	addwfc	fsr2h,f,c
 11465  0009AE  50DE               	movf	postinc2,w,c
 11466  0009B0  10DE               	iorwf	postinc2,w,c
 11467  0009B2  B4D8               	btfsc	status,2,c
 11468  0009B4  D016               	goto	i2l7796
 11469  0009B6  EE20 F002          	lfsr	2,2
 11470  0009BA  500D               	movf	i2__doprnt@pb,w,c
 11471  0009BC  26D9               	addwf	fsr2l,f,c
 11472  0009BE  500E               	movf	i2__doprnt@pb+1,w,c
 11473  0009C0  22DA               	addwfc	fsr2h,f,c
 11474  0009C2  CFDE F013          	movff	postinc2,??i2__doprnt
 11475  0009C6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11476  0009CA  D801               	call	i2u1212_48
 11477  0009CC  D3EF               	goto	i2l7996
 11478  0009CE                     i2u1212_48:
 11479  0009CE  0005               	push	
 11480  0009D0  6EFA               	movwf	pclath,c
 11481  0009D2  5013               	movf	??i2__doprnt,w,c
 11482  0009D4  6EFD               	movwf	tosl,c
 11483  0009D6  5014               	movf	??i2__doprnt+1,w,c
 11484  0009D8  6EFE               	movwf	tosh,c
 11485  0009DA  6AFF               	clrf	tosu,c
 11486  0009DC  50FA               	movf	pclath,w,c
 11487  0009DE  5022               	movf	i2__doprnt@c,w,c
 11488  0009E0  0012               	return		;indir
 11489  0009E2                     i2l7796:
 11490  0009E2  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11491  0009E6  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11492  0009EA  CFDE F013          	movff	postinc2,??i2__doprnt
 11493  0009EE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11494  0009F2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11495  0009F6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11496  0009FA  C022  FFDF         	movff	i2__doprnt@c,indf2
 11497  0009FE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11498  000A02  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11499  000A06  2ADE               	incf	postinc2,f,c
 11500  000A08  0E00               	movlw	0
 11501  000A0A  22DD               	addwfc	postdec2,f,c
 11502                           
 11503                           ;doprnt.c: 542: continue;
 11504  000A0C  D3CF               	goto	i2l7996
 11505  000A0E                     i2l7800:
 11506                           
 11507                           ;doprnt.c: 543: }
 11508                           ;doprnt.c: 546: width = 0;
 11509  000A0E  0E00               	movlw	0
 11510  000A10  6E21               	movwf	i2__doprnt@width+1,c
 11511  000A12  0E00               	movlw	0
 11512  000A14  6E20               	movwf	i2__doprnt@width,c
 11513                           
 11514                           ;doprnt.c: 548: flag = 0;
 11515  000A16  0E00               	movlw	0
 11516  000A18  6E1F               	movwf	i2__doprnt@flag,c
 11517                           
 11518                           ;doprnt.c: 551: switch(*f) {
 11519                           
 11520                           ;doprnt.c: 550: for(;;) {
 11521  000A1A  D003               	goto	i2l7806
 11522  000A1C                     i2l7802:
 11523                           
 11524                           ;doprnt.c: 580: flag |= 0x04;
 11525  000A1C  841F               	bsf	i2__doprnt@flag,2,c
 11526                           
 11527                           ;doprnt.c: 581: f++;
 11528  000A1E  4A0F               	infsnz	i2__doprnt@f,f,c
 11529  000A20  2A10               	incf	i2__doprnt@f+1,f,c
 11530  000A22                     i2l7806:
 11531  000A22  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 11532  000A26  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 11533  000A2A  0E00               	movlw	low (__mediumconst shr (0+16))
 11534  000A2C  6EF8               	movwf	tblptru,c
 11535  000A2E  0E0F               	movlw	(high __ramtop+-1)
 11536  000A30  64F7               	cpfsgt	tblptrh,c
 11537  000A32  D003               	bra	i2u1213_47
 11538  000A34  0008               	tblrd		*
 11539  000A36  50F5               	movf	tablat,w,c
 11540  000A38  D005               	bra	i2u1213_40
 11541  000A3A                     i2u1213_47:
 11542  000A3A  CFF6 FFE9          	movff	tblptrl,fsr0l
 11543  000A3E  CFF7 FFEA          	movff	tblptrh,fsr0h
 11544  000A42  50EF               	movf	indf0,w,c
 11545  000A44                     i2u1213_40:
 11546                           
 11547                           ; Switch size 1, requested type "space"
 11548                           ; Number of cases is 1, Range of values is 48 to 48
 11549                           ; switch strategies available:
 11550                           ; Name         Instructions Cycles
 11551                           ; simple_byte            4     3 (average)
 11552                           ;	Chosen strategy is simple_byte
 11553  000A44  0A30               	xorlw	48	; case 48
 11554  000A46  B4D8               	btfsc	status,2,c
 11555  000A48  D7E9               	goto	i2l7802
 11556                           
 11557                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 11558                           
 11559                           ;doprnt.c: 586: }
 11560                           
 11561                           ;doprnt.c: 585: break;
 11562  000A4A  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 11563  000A4E  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 11564  000A52  0E00               	movlw	low (__mediumconst shr (0+16))
 11565  000A54  6EF8               	movwf	tblptru,c
 11566  000A56  0E0F               	movlw	(high __ramtop+-1)
 11567  000A58  64F7               	cpfsgt	tblptrh,c
 11568  000A5A  D003               	bra	i2u1214_47
 11569  000A5C  0008               	tblrd		*
 11570  000A5E  50F5               	movf	tablat,w,c
 11571  000A60  D005               	bra	i2u1214_40
 11572  000A62                     i2u1214_47:
 11573  000A62  CFF6 FFE9          	movff	tblptrl,fsr0l
 11574  000A66  CFF7 FFEA          	movff	tblptrh,fsr0h
 11575  000A6A  50EF               	movf	indf0,w,c
 11576  000A6C                     i2u1214_40:
 11577  000A6C  ECF3  F01B         	call	i2_isdigit
 11578  000A70  A0D8               	btfss	status,0,c
 11579  000A72  D154               	goto	i2l7872
 11580                           
 11581                           ;doprnt.c: 598: width = 0;
 11582  000A74  0E00               	movlw	0
 11583  000A76  6E21               	movwf	i2__doprnt@width+1,c
 11584  000A78  0E00               	movlw	0
 11585  000A7A  6E20               	movwf	i2__doprnt@width,c
 11586  000A7C                     i2l7812:
 11587                           
 11588                           ;doprnt.c: 600: width *= 10;
 11589  000A7C  C020  F001         	movff	i2__doprnt@width,i2___wmul@multiplier
 11590  000A80  C021  F002         	movff	i2__doprnt@width+1,i2___wmul@multiplier+1
 11591  000A84  0E00               	movlw	0
 11592  000A86  6E04               	movwf	i2___wmul@multiplicand+1,c
 11593  000A88  0E0A               	movlw	10
 11594  000A8A  6E03               	movwf	i2___wmul@multiplicand,c
 11595  000A8C  ECE0  F01B         	call	i2___wmul	;wreg free
 11596  000A90  C001  F020         	movff	?i2___wmul,i2__doprnt@width
 11597  000A94  C002  F021         	movff	?i2___wmul+1,i2__doprnt@width+1
 11598                           
 11599                           ;doprnt.c: 601: width += *f++ - '0';
 11600  000A98  0ED0               	movlw	208
 11601  000A9A  6E13               	movwf	??i2__doprnt& (0+255),c
 11602  000A9C  0EFF               	movlw	255
 11603  000A9E  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 11604  000AA0  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 11605  000AA4  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 11606  000AA8  0E00               	movlw	low (__mediumconst shr (0+16))
 11607  000AAA  6EF8               	movwf	tblptru,c
 11608  000AAC  0E0F               	movlw	(high __ramtop+-1)
 11609  000AAE  64F7               	cpfsgt	tblptrh,c
 11610  000AB0  D003               	bra	i2u1216_47
 11611  000AB2  0008               	tblrd		*
 11612  000AB4  50F5               	movf	tablat,w,c
 11613  000AB6  D005               	bra	i2u1216_40
 11614  000AB8                     i2u1216_47:
 11615  000AB8  CFF6 FFE9          	movff	tblptrl,fsr0l
 11616  000ABC  CFF7 FFEA          	movff	tblptrh,fsr0h
 11617  000AC0  50EF               	movf	indf0,w,c
 11618  000AC2                     i2u1216_40:
 11619  000AC2  6E15               	movwf	(??i2__doprnt+2)& (0+255),c
 11620  000AC4  6A16               	clrf	(??i2__doprnt+3)& (0+255),c
 11621  000AC6  5013               	movf	??i2__doprnt,w,c
 11622  000AC8  2615               	addwf	??i2__doprnt+2,f,c
 11623  000ACA  5014               	movf	??i2__doprnt+1,w,c
 11624  000ACC  2216               	addwfc	??i2__doprnt+3,f,c
 11625  000ACE  5015               	movf	??i2__doprnt+2,w,c
 11626  000AD0  2620               	addwf	i2__doprnt@width,f,c
 11627  000AD2  5016               	movf	??i2__doprnt+3,w,c
 11628  000AD4  2221               	addwfc	i2__doprnt@width+1,f,c
 11629  000AD6  4A0F               	infsnz	i2__doprnt@f,f,c
 11630  000AD8  2A10               	incf	i2__doprnt@f+1,f,c
 11631                           
 11632                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 11633  000ADA  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 11634  000ADE  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 11635  000AE2  0E00               	movlw	low (__mediumconst shr (0+16))
 11636  000AE4  6EF8               	movwf	tblptru,c
 11637  000AE6  0E0F               	movlw	(high __ramtop+-1)
 11638  000AE8  64F7               	cpfsgt	tblptrh,c
 11639  000AEA  D003               	bra	i2u1217_47
 11640  000AEC  0008               	tblrd		*
 11641  000AEE  50F5               	movf	tablat,w,c
 11642  000AF0  D005               	bra	i2u1217_40
 11643  000AF2                     i2u1217_47:
 11644  000AF2  CFF6 FFE9          	movff	tblptrl,fsr0l
 11645  000AF6  CFF7 FFEA          	movff	tblptrh,fsr0h
 11646  000AFA  50EF               	movf	indf0,w,c
 11647  000AFC                     i2u1217_40:
 11648  000AFC  ECF3  F01B         	call	i2_isdigit
 11649  000B00  A0D8               	btfss	status,0,c
 11650  000B02  D10C               	goto	i2l7872
 11651  000B04  D7BB               	goto	i2l7812
 11652  000B06                     i2l7820:
 11653                           
 11654                           ;doprnt.c: 721: flag |= 0x80;
 11655  000B06  8E1F               	bsf	i2__doprnt@flag,7,c
 11656                           
 11657                           ;doprnt.c: 723: break;
 11658  000B08  D135               	goto	i2l503
 11659  000B0A                     i2l7822:
 11660                           
 11661                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 11662  000B0A  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 11663  000B0E  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 11664  000B12  CFDF F013          	movff	indf2,??i2__doprnt
 11665  000B16  0E02               	movlw	2
 11666  000B18  26DE               	addwf	postinc2,f,c
 11667  000B1A  CFDF F014          	movff	indf2,??i2__doprnt+1
 11668  000B1E  0E00               	movlw	0
 11669  000B20  22DD               	addwfc	postdec2,f,c
 11670  000B22  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11671  000B26  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11672  000B2A  CFDE F01B          	movff	postinc2,i2__doprnt@cp
 11673  000B2E  CFDD F01C          	movff	postdec2,i2__doprnt@cp+1
 11674                           
 11675                           ;doprnt.c: 740: if(!cp)
 11676  000B32  501B               	movf	i2__doprnt@cp,w,c
 11677  000B34  101C               	iorwf	i2__doprnt@cp+1,w,c
 11678  000B36  A4D8               	btfss	status,2,c
 11679  000B38  D004               	goto	i2l7828
 11680                           
 11681                           ;doprnt.c: 741: cp = "(null)";
 11682  000B3A  0EED               	movlw	low STR_18
 11683  000B3C  6E1B               	movwf	i2__doprnt@cp,c
 11684  000B3E  0EFF               	movlw	high STR_18
 11685  000B40  6E1C               	movwf	i2__doprnt@cp+1,c
 11686  000B42                     i2l7828:
 11687                           
 11688                           ;doprnt.c: 745: len = 0;
 11689  000B42  0E00               	movlw	0
 11690  000B44  6E1A               	movwf	i2__doprnt@len+1,c
 11691  000B46  0E00               	movlw	0
 11692  000B48  6E19               	movwf	i2__doprnt@len,c
 11693                           
 11694                           ;doprnt.c: 746: while(cp[len])
 11695  000B4A  D002               	goto	i2l7832
 11696  000B4C                     i2l7830:
 11697                           
 11698                           ;doprnt.c: 747: len++;
 11699  000B4C  4A19               	infsnz	i2__doprnt@len,f,c
 11700  000B4E  2A1A               	incf	i2__doprnt@len+1,f,c
 11701  000B50                     i2l7832:
 11702  000B50  5019               	movf	i2__doprnt@len,w,c
 11703  000B52  241B               	addwf	i2__doprnt@cp,w,c
 11704  000B54  6E13               	movwf	??i2__doprnt& (0+255),c
 11705  000B56  501A               	movf	i2__doprnt@len+1,w,c
 11706  000B58  201C               	addwfc	i2__doprnt@cp+1,w,c
 11707  000B5A  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 11708  000B5C  C013  FFF6         	movff	??i2__doprnt,tblptrl
 11709  000B60  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 11710  000B64  0E00               	movlw	low (__mediumconst shr (0+16))
 11711  000B66  6EF8               	movwf	tblptru,c
 11712  000B68  0E0F               	movlw	(high __ramtop+-1)
 11713  000B6A  64F7               	cpfsgt	tblptrh,c
 11714  000B6C  D003               	bra	i2u1220_47
 11715  000B6E  0008               	tblrd		*
 11716  000B70  50F5               	movf	tablat,w,c
 11717  000B72  D005               	bra	i2u1220_40
 11718  000B74                     i2u1220_47:
 11719  000B74  CFF6 FFE9          	movff	tblptrl,fsr0l
 11720  000B78  CFF7 FFEA          	movff	tblptrh,fsr0h
 11721  000B7C  50EF               	movf	indf0,w,c
 11722  000B7E                     i2u1220_40:
 11723  000B7E  0900               	iorlw	0
 11724  000B80  A4D8               	btfss	status,2,c
 11725  000B82  D7E4               	goto	i2l7830
 11726  000B84                     i2l7834:
 11727                           
 11728                           ;doprnt.c: 757: if(width > len)
 11729  000B84  5020               	movf	i2__doprnt@width,w,c
 11730  000B86  5C19               	subwf	i2__doprnt@len,w,c
 11731  000B88  5021               	movf	i2__doprnt@width+1,w,c
 11732  000B8A  581A               	subwfb	i2__doprnt@len+1,w,c
 11733  000B8C  B0D8               	btfsc	status,0,c
 11734  000B8E  D005               	goto	i2l7838
 11735                           
 11736                           ;doprnt.c: 758: width -= len;
 11737  000B90  5019               	movf	i2__doprnt@len,w,c
 11738  000B92  5E20               	subwf	i2__doprnt@width,f,c
 11739  000B94  501A               	movf	i2__doprnt@len+1,w,c
 11740  000B96  5A21               	subwfb	i2__doprnt@width+1,f,c
 11741  000B98  D03A               	goto	i2l7848
 11742  000B9A                     i2l7838:
 11743                           
 11744                           ;doprnt.c: 759: else
 11745                           ;doprnt.c: 760: width = 0;
 11746  000B9A  0E00               	movlw	0
 11747  000B9C  6E21               	movwf	i2__doprnt@width+1,c
 11748  000B9E  0E00               	movlw	0
 11749  000BA0  6E20               	movwf	i2__doprnt@width,c
 11750                           
 11751                           ;doprnt.c: 764: while(width--)
 11752  000BA2  D035               	goto	i2l7848
 11753  000BA4                     i2l7840:
 11754                           
 11755                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 11756  000BA4  EE20 F002          	lfsr	2,2
 11757  000BA8  500D               	movf	i2__doprnt@pb,w,c
 11758  000BAA  26D9               	addwf	fsr2l,f,c
 11759  000BAC  500E               	movf	i2__doprnt@pb+1,w,c
 11760  000BAE  22DA               	addwfc	fsr2h,f,c
 11761  000BB0  50DE               	movf	postinc2,w,c
 11762  000BB2  10DE               	iorwf	postinc2,w,c
 11763  000BB4  B4D8               	btfsc	status,2,c
 11764  000BB6  D016               	goto	i2l7844
 11765  000BB8  EE20 F002          	lfsr	2,2
 11766  000BBC  500D               	movf	i2__doprnt@pb,w,c
 11767  000BBE  26D9               	addwf	fsr2l,f,c
 11768  000BC0  500E               	movf	i2__doprnt@pb+1,w,c
 11769  000BC2  22DA               	addwfc	fsr2h,f,c
 11770  000BC4  CFDE F013          	movff	postinc2,??i2__doprnt
 11771  000BC8  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11772  000BCC  D801               	call	i2u1224_48
 11773  000BCE  D01F               	goto	i2l7848
 11774  000BD0                     i2u1224_48:
 11775  000BD0  0005               	push	
 11776  000BD2  6EFA               	movwf	pclath,c
 11777  000BD4  5013               	movf	??i2__doprnt,w,c
 11778  000BD6  6EFD               	movwf	tosl,c
 11779  000BD8  5014               	movf	??i2__doprnt+1,w,c
 11780  000BDA  6EFE               	movwf	tosh,c
 11781  000BDC  6AFF               	clrf	tosu,c
 11782  000BDE  50FA               	movf	pclath,w,c
 11783  000BE0  0E20               	movlw	32
 11784  000BE2  0012               	return		;indir
 11785  000BE4                     i2l7844:
 11786  000BE4  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11787  000BE8  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11788  000BEC  CFDE F013          	movff	postinc2,??i2__doprnt
 11789  000BF0  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11790  000BF4  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11791  000BF8  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11792  000BFC  0E20               	movlw	32
 11793  000BFE  6EDF               	movwf	indf2,c
 11794  000C00  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11795  000C04  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11796  000C08  2ADE               	incf	postinc2,f,c
 11797  000C0A  0E00               	movlw	0
 11798  000C0C  22DD               	addwfc	postdec2,f,c
 11799  000C0E                     i2l7848:
 11800  000C0E  0620               	decf	i2__doprnt@width,f,c
 11801  000C10  A0D8               	btfss	status,0,c
 11802  000C12  0621               	decf	i2__doprnt@width+1,f,c
 11803  000C14  2820               	incf	i2__doprnt@width,w,c
 11804  000C16  E1C6               	bnz	i2l7840
 11805  000C18  2821               	incf	i2__doprnt@width+1,w,c
 11806  000C1A  B4D8               	btfsc	status,2,c
 11807  000C1C  D05B               	goto	i2l7862
 11808  000C1E  D7C2               	goto	i2l7840
 11809  000C20                     i2l7850:
 11810                           
 11811                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 11812  000C20  EE20 F002          	lfsr	2,2
 11813  000C24  500D               	movf	i2__doprnt@pb,w,c
 11814  000C26  26D9               	addwf	fsr2l,f,c
 11815  000C28  500E               	movf	i2__doprnt@pb+1,w,c
 11816  000C2A  22DA               	addwfc	fsr2h,f,c
 11817  000C2C  50DE               	movf	postinc2,w,c
 11818  000C2E  10DE               	iorwf	postinc2,w,c
 11819  000C30  B4D8               	btfsc	status,2,c
 11820  000C32  D029               	goto	i2l7856
 11821  000C34  EE20 F002          	lfsr	2,2
 11822  000C38  500D               	movf	i2__doprnt@pb,w,c
 11823  000C3A  26D9               	addwf	fsr2l,f,c
 11824  000C3C  500E               	movf	i2__doprnt@pb+1,w,c
 11825  000C3E  22DA               	addwfc	fsr2h,f,c
 11826  000C40  CFDE F013          	movff	postinc2,??i2__doprnt
 11827  000C44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11828  000C48  D801               	call	i2u1227_48
 11829  000C4A  D01A               	goto	i2l7854
 11830  000C4C                     i2u1227_48:
 11831  000C4C  0005               	push	
 11832  000C4E  6EFA               	movwf	pclath,c
 11833  000C50  5013               	movf	??i2__doprnt,w,c
 11834  000C52  6EFD               	movwf	tosl,c
 11835  000C54  5014               	movf	??i2__doprnt+1,w,c
 11836  000C56  6EFE               	movwf	tosh,c
 11837  000C58  6AFF               	clrf	tosu,c
 11838  000C5A  50FA               	movf	pclath,w,c
 11839  000C5C  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 11840  000C60  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 11841  000C64  0E00               	movlw	low (__mediumconst shr (0+16))
 11842  000C66  6EF8               	movwf	tblptru,c
 11843  000C68  0E0F               	movlw	(high __ramtop+-1)
 11844  000C6A  64F7               	cpfsgt	tblptrh,c
 11845  000C6C  D003               	bra	i2u1228_47
 11846  000C6E  0008               	tblrd		*
 11847  000C70  50F5               	movf	tablat,w,c
 11848  000C72  D005               	bra	i2u1228_40
 11849  000C74                     i2u1228_47:
 11850  000C74  CFF6 FFE9          	movff	tblptrl,fsr0l
 11851  000C78  CFF7 FFEA          	movff	tblptrh,fsr0h
 11852  000C7C  50EF               	movf	indf0,w,c
 11853  000C7E                     i2u1228_40:
 11854  000C7E  0012               	return		;indir
 11855  000C80                     i2l7854:
 11856  000C80  4A1B               	infsnz	i2__doprnt@cp,f,c
 11857  000C82  2A1C               	incf	i2__doprnt@cp+1,f,c
 11858  000C84  D027               	goto	i2l7862
 11859  000C86                     i2l7856:
 11860  000C86  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 11861  000C8A  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 11862  000C8E  0E00               	movlw	low (__mediumconst shr (0+16))
 11863  000C90  6EF8               	movwf	tblptru,c
 11864  000C92  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11865  000C96  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11866  000C9A  CFDE F013          	movff	postinc2,??i2__doprnt
 11867  000C9E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11868  000CA2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11869  000CA6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11870  000CAA  0E0F               	movlw	(high __ramtop+-1)
 11871  000CAC  64F7               	cpfsgt	tblptrh,c
 11872  000CAE  D003               	bra	i2u1229_47
 11873  000CB0  0008               	tblrd		*
 11874  000CB2  50F5               	movf	tablat,w,c
 11875  000CB4  D005               	bra	i2u1229_40
 11876  000CB6                     i2u1229_47:
 11877  000CB6  CFF6 FFE9          	movff	tblptrl,fsr0l
 11878  000CBA  CFF7 FFEA          	movff	tblptrh,fsr0h
 11879  000CBE  50EF               	movf	indf0,w,c
 11880  000CC0                     i2u1229_40:
 11881  000CC0  6EDF               	movwf	indf2,c
 11882  000CC2  4A1B               	infsnz	i2__doprnt@cp,f,c
 11883  000CC4  2A1C               	incf	i2__doprnt@cp+1,f,c
 11884  000CC6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11885  000CCA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11886  000CCE  2ADE               	incf	postinc2,f,c
 11887  000CD0  0E00               	movlw	0
 11888  000CD2  22DD               	addwfc	postdec2,f,c
 11889  000CD4                     i2l7862:
 11890  000CD4  0619               	decf	i2__doprnt@len,f,c
 11891  000CD6  A0D8               	btfss	status,0,c
 11892  000CD8  061A               	decf	i2__doprnt@len+1,f,c
 11893  000CDA  2819               	incf	i2__doprnt@len,w,c
 11894  000CDC  E1A1               	bnz	i2l7850
 11895  000CDE  281A               	incf	i2__doprnt@len+1,w,c
 11896  000CE0  B4D8               	btfsc	status,2,c
 11897  000CE2  D264               	goto	i2l7996
 11898  000CE4  D79D               	goto	i2l7850
 11899  000CE6                     i2l7864:
 11900                           
 11901                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 11902  000CE6  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 11903  000CEA  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 11904  000CEE  CFDF F013          	movff	indf2,??i2__doprnt
 11905  000CF2  0E02               	movlw	2
 11906  000CF4  26DE               	addwf	postinc2,f,c
 11907  000CF6  CFDF F014          	movff	indf2,??i2__doprnt+1
 11908  000CFA  0E00               	movlw	0
 11909  000CFC  22DD               	addwfc	postdec2,f,c
 11910  000CFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11911  000D02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11912  000D06  50DF               	movf	indf2,w,c
 11913  000D08  6E22               	movwf	i2__doprnt@c,c
 11914  000D0A                     i2l7866:
 11915                           
 11916                           ;doprnt.c: 805: cp = (char *)&c;
 11917  000D0A  0E22               	movlw	low i2__doprnt@c
 11918  000D0C  6E1B               	movwf	i2__doprnt@cp,c
 11919  000D0E  0E00               	movlw	high i2__doprnt@c
 11920  000D10  6E1C               	movwf	i2__doprnt@cp+1,c
 11921                           
 11922                           ;doprnt.c: 806: len = 1;
 11923  000D12  0E00               	movlw	0
 11924  000D14  6E1A               	movwf	i2__doprnt@len+1,c
 11925  000D16  0E01               	movlw	1
 11926  000D18  6E19               	movwf	i2__doprnt@len,c
 11927                           
 11928                           ;doprnt.c: 807: goto dostring;
 11929  000D1A  D734               	goto	i2l7834
 11930  000D1C                     i2l7872:
 11931  000D1C  500F               	movf	i2__doprnt@f,w,c
 11932  000D1E  6E13               	movwf	??i2__doprnt& (0+255),c
 11933  000D20  5010               	movf	i2__doprnt@f+1,w,c
 11934  000D22  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 11935  000D24  4A0F               	infsnz	i2__doprnt@f,f,c
 11936  000D26  2A10               	incf	i2__doprnt@f+1,f,c
 11937  000D28  C013  FFF6         	movff	??i2__doprnt,tblptrl
 11938  000D2C  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 11939  000D30  0E00               	movlw	low (__mediumconst shr (0+16))
 11940  000D32  6EF8               	movwf	tblptru,c
 11941  000D34  0E0F               	movlw	(high __ramtop+-1)
 11942  000D36  64F7               	cpfsgt	tblptrh,c
 11943  000D38  D003               	bra	i2u1231_47
 11944  000D3A  0008               	tblrd		*
 11945  000D3C  50F5               	movf	tablat,w,c
 11946  000D3E  D005               	bra	i2u1231_40
 11947  000D40                     i2u1231_47:
 11948  000D40  CFF6 FFE9          	movff	tblptrl,fsr0l
 11949  000D44  CFF7 FFEA          	movff	tblptrh,fsr0h
 11950  000D48  50EF               	movf	indf0,w,c
 11951  000D4A                     i2u1231_40:
 11952  000D4A  6E22               	movwf	i2__doprnt@c,c
 11953  000D4C  5022               	movf	i2__doprnt@c,w,c
 11954                           
 11955                           ; Switch size 1, requested type "space"
 11956                           ; Number of cases is 6, Range of values is 0 to 120
 11957                           ; switch strategies available:
 11958                           ; Name         Instructions Cycles
 11959                           ; simple_byte           19    10 (average)
 11960                           ;	Chosen strategy is simple_byte
 11961  000D4E  0A00               	xorlw	0	; case 0
 11962  000D50  B4D8               	btfsc	status,2,c
 11963  000D52  D248               	goto	i2l7998
 11964  000D54  0A63               	xorlw	99	; case 99
 11965  000D56  B4D8               	btfsc	status,2,c
 11966  000D58  D7C6               	goto	i2l7864
 11967  000D5A  0A07               	xorlw	7	; case 100
 11968  000D5C  B4D8               	btfsc	status,2,c
 11969  000D5E  D00A               	goto	i2l503
 11970  000D60  0A0D               	xorlw	13	; case 105
 11971  000D62  B4D8               	btfsc	status,2,c
 11972  000D64  D007               	goto	i2l503
 11973  000D66  0A1A               	xorlw	26	; case 115
 11974  000D68  B4D8               	btfsc	status,2,c
 11975  000D6A  D6CF               	goto	i2l7822
 11976  000D6C  0A0B               	xorlw	11	; case 120
 11977  000D6E  B4D8               	btfsc	status,2,c
 11978  000D70  D6CA               	goto	i2l7820
 11979  000D72  D7CB               	goto	i2l7866
 11980  000D74                     i2l503:
 11981                           
 11982                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 11983  000D74  BE1F               	btfsc	i2__doprnt@flag,7,c
 11984  000D76  D01D               	goto	i2l7882
 11985                           
 11986                           ;doprnt.c: 1253: {
 11987                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 11988  000D78  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 11989  000D7C  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 11990  000D80  CFDF F013          	movff	indf2,??i2__doprnt
 11991  000D84  0E02               	movlw	2
 11992  000D86  26DE               	addwf	postinc2,f,c
 11993  000D88  CFDF F014          	movff	indf2,??i2__doprnt+1
 11994  000D8C  0E00               	movlw	0
 11995  000D8E  22DD               	addwfc	postdec2,f,c
 11996  000D90  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11997  000D94  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11998  000D98  CFDE F01D          	movff	postinc2,i2__doprnt@val
 11999  000D9C  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 12000                           
 12001                           ;doprnt.c: 1261: if((int)val < 0) {
 12002  000DA0  AE1E               	btfss	i2__doprnt@val+1,7,c
 12003  000DA2  D052               	goto	i2l7914
 12004                           
 12005                           ;doprnt.c: 1262: flag |= 0x03;
 12006  000DA4  0E03               	movlw	3
 12007  000DA6  121F               	iorwf	i2__doprnt@flag,f,c
 12008                           
 12009                           ;doprnt.c: 1263: val = -val;
 12010  000DA8  6C1D               	negf	i2__doprnt@val,c
 12011  000DAA  1E1E               	comf	i2__doprnt@val+1,f,c
 12012  000DAC  B0D8               	btfsc	status,0,c
 12013  000DAE  2A1E               	incf	i2__doprnt@val+1,f,c
 12014                           
 12015                           ;doprnt.c: 1264: }
 12016                           ;doprnt.c: 1266: }
 12017  000DB0  D04B               	goto	i2l7914
 12018  000DB2                     i2l7882:
 12019                           
 12020                           ;doprnt.c: 1268: else
 12021                           ;doprnt.c: 1273: {
 12022                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12023  000DB2  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 12024  000DB6  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 12025  000DBA  CFDF F013          	movff	indf2,??i2__doprnt
 12026  000DBE  0E02               	movlw	2
 12027  000DC0  26DE               	addwf	postinc2,f,c
 12028  000DC2  CFDF F014          	movff	indf2,??i2__doprnt+1
 12029  000DC6  0E00               	movlw	0
 12030  000DC8  22DD               	addwfc	postdec2,f,c
 12031  000DCA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12032  000DCE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12033  000DD2  CFDE F01D          	movff	postinc2,i2__doprnt@val
 12034  000DD6  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 12035                           
 12036                           ;doprnt.c: 1287: }
 12037                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 12038  000DDA  D036               	goto	i2l7914
 12039  000DDC                     i2l7884:
 12040                           
 12041                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12042  000DDC  0E01               	movlw	1
 12043  000DDE  6E22               	movwf	i2__doprnt@c,c
 12044  000DE0                     i2l7886:
 12045  000DE0  0E05               	movlw	5
 12046  000DE2  1822               	xorwf	i2__doprnt@c,w,c
 12047  000DE4  B4D8               	btfsc	status,2,c
 12048  000DE6  D038               	goto	i2l7916
 12049                           
 12050                           ;doprnt.c: 1306: if(val < dpowers[c])
 12051  000DE8  5022               	movf	i2__doprnt@c,w,c
 12052  000DEA  0D02               	mullw	2
 12053  000DEC  0EF6               	movlw	low _dpowers
 12054  000DEE  24F3               	addwf	prodl,w,c
 12055  000DF0  6EF6               	movwf	tblptrl,c
 12056  000DF2  0EFE               	movlw	high _dpowers
 12057  000DF4  20F4               	addwfc	prodh,w,c
 12058  000DF6  6EF7               	movwf	tblptrh,c
 12059  000DF8                     	if	1	;There are 3 active tblptr bytes
 12060  000DF8  6AF8               	clrf	tblptru,c
 12061  000DFA  0E00               	movlw	low (__mediumconst shr (0+16))
 12062  000DFC  22F8               	addwfc	tblptru,f,c
 12063  000DFE                     	endif
 12064  000DFE  0009               	tblrd		*+
 12065  000E00  50F5               	movf	tablat,w,c
 12066  000E02  5C1D               	subwf	i2__doprnt@val,w,c
 12067  000E04  0009               	tblrd		*+
 12068  000E06  50F5               	movf	tablat,w,c
 12069  000E08  581E               	subwfb	i2__doprnt@val+1,w,c
 12070  000E0A  A0D8               	btfss	status,0,c
 12071  000E0C  D025               	goto	i2l7916
 12072                           
 12073                           ;doprnt.c: 1307: break;
 12074  000E0E  2A22               	incf	i2__doprnt@c,f,c
 12075  000E10  D7E7               	goto	i2l7886
 12076  000E12                     i2l7898:
 12077                           
 12078                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 12079  000E12  0E01               	movlw	1
 12080  000E14  6E22               	movwf	i2__doprnt@c,c
 12081  000E16                     i2l7900:
 12082  000E16  0E04               	movlw	4
 12083  000E18  1822               	xorwf	i2__doprnt@c,w,c
 12084  000E1A  B4D8               	btfsc	status,2,c
 12085  000E1C  D01D               	goto	i2l7916
 12086                           
 12087                           ;doprnt.c: 1317: if(val < hexpowers[c])
 12088  000E1E  5022               	movf	i2__doprnt@c,w,c
 12089  000E20  0D02               	mullw	2
 12090  000E22  0E00               	movlw	low _hexpowers
 12091  000E24  24F3               	addwf	prodl,w,c
 12092  000E26  6EF6               	movwf	tblptrl,c
 12093  000E28  0EFF               	movlw	high _hexpowers
 12094  000E2A  20F4               	addwfc	prodh,w,c
 12095  000E2C  6EF7               	movwf	tblptrh,c
 12096  000E2E                     	if	1	;There are 3 active tblptr bytes
 12097  000E2E  6AF8               	clrf	tblptru,c
 12098  000E30  0E00               	movlw	low (__mediumconst shr (0+16))
 12099  000E32  22F8               	addwfc	tblptru,f,c
 12100  000E34                     	endif
 12101  000E34  0009               	tblrd		*+
 12102  000E36  50F5               	movf	tablat,w,c
 12103  000E38  5C1D               	subwf	i2__doprnt@val,w,c
 12104  000E3A  0009               	tblrd		*+
 12105  000E3C  50F5               	movf	tablat,w,c
 12106  000E3E  581E               	subwfb	i2__doprnt@val+1,w,c
 12107  000E40  A0D8               	btfss	status,0,c
 12108  000E42  D00A               	goto	i2l7916
 12109                           
 12110                           ;doprnt.c: 1318: break;
 12111  000E44  2A22               	incf	i2__doprnt@c,f,c
 12112  000E46  D7E7               	goto	i2l7900
 12113  000E48                     i2l7914:
 12114  000E48  501F               	movf	i2__doprnt@flag,w,c
 12115  000E4A  0B80               	andlw	128
 12116                           
 12117                           ; Switch size 1, requested type "space"
 12118                           ; Number of cases is 2, Range of values is 0 to 128
 12119                           ; switch strategies available:
 12120                           ; Name         Instructions Cycles
 12121                           ; simple_byte            7     4 (average)
 12122                           ;	Chosen strategy is simple_byte
 12123  000E4C  0A00               	xorlw	0	; case 0
 12124  000E4E  B4D8               	btfsc	status,2,c
 12125  000E50  D7C5               	goto	i2l7884
 12126  000E52  0A80               	xorlw	128	; case 128
 12127  000E54  B4D8               	btfsc	status,2,c
 12128  000E56  D7DD               	goto	i2l7898
 12129  000E58                     i2l7916:
 12130                           
 12131                           ;doprnt.c: 1345: if(width && flag & 0x03)
 12132  000E58  5020               	movf	i2__doprnt@width,w,c
 12133  000E5A  1021               	iorwf	i2__doprnt@width+1,w,c
 12134  000E5C  B4D8               	btfsc	status,2,c
 12135  000E5E  D009               	goto	i2l7922
 12136  000E60  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 12137  000E64  0E03               	movlw	3
 12138  000E66  1613               	andwf	??i2__doprnt,f,c
 12139  000E68  B4D8               	btfsc	status,2,c
 12140  000E6A  D003               	goto	i2l7922
 12141                           
 12142                           ;doprnt.c: 1346: width--;
 12143  000E6C  0620               	decf	i2__doprnt@width,f,c
 12144  000E6E  A0D8               	btfss	status,0,c
 12145  000E70  0621               	decf	i2__doprnt@width+1,f,c
 12146  000E72                     i2l7922:
 12147                           
 12148                           ;doprnt.c: 1381: if(width > c)
 12149  000E72  0E80               	movlw	128
 12150  000E74  BE22               	btfsc	i2__doprnt@c,7,c
 12151  000E76  0E7F               	movlw	127
 12152  000E78  6E13               	movwf	??i2__doprnt& (0+255),c
 12153  000E7A  5020               	movf	i2__doprnt@width,w,c
 12154  000E7C  5C22               	subwf	i2__doprnt@c,w,c
 12155  000E7E  5021               	movf	i2__doprnt@width+1,w,c
 12156  000E80  0A80               	xorlw	128
 12157  000E82  5813               	subwfb	??i2__doprnt& (0+255),w,c
 12158  000E84  B0D8               	btfsc	status,0,c
 12159  000E86  D007               	goto	i2l7926
 12160                           
 12161                           ;doprnt.c: 1382: width -= c;
 12162  000E88  5022               	movf	i2__doprnt@c,w,c
 12163  000E8A  5E20               	subwf	i2__doprnt@width,f,c
 12164  000E8C  0E00               	movlw	0
 12165  000E8E  BE22               	btfsc	i2__doprnt@c,7,c
 12166  000E90  0EFF               	movlw	255
 12167  000E92  5A21               	subwfb	i2__doprnt@width+1,f,c
 12168  000E94  D004               	goto	i2l7928
 12169  000E96                     i2l7926:
 12170                           
 12171                           ;doprnt.c: 1383: else
 12172                           ;doprnt.c: 1384: width = 0;
 12173  000E96  0E00               	movlw	0
 12174  000E98  6E21               	movwf	i2__doprnt@width+1,c
 12175  000E9A  0E00               	movlw	0
 12176  000E9C  6E20               	movwf	i2__doprnt@width,c
 12177  000E9E                     i2l7928:
 12178                           
 12179                           ;doprnt.c: 1387: if(flag & 0x04) {
 12180  000E9E  A41F               	btfss	i2__doprnt@flag,2,c
 12181  000EA0  D078               	goto	i2l7952
 12182                           
 12183                           ;doprnt.c: 1392: if(flag & 0x03)
 12184  000EA2  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 12185  000EA6  0E03               	movlw	3
 12186  000EA8  1613               	andwf	??i2__doprnt,f,c
 12187  000EAA  B4D8               	btfsc	status,2,c
 12188  000EAC  D035               	goto	i2l7940
 12189                           
 12190                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 12191  000EAE  EE20 F002          	lfsr	2,2
 12192  000EB2  500D               	movf	i2__doprnt@pb,w,c
 12193  000EB4  26D9               	addwf	fsr2l,f,c
 12194  000EB6  500E               	movf	i2__doprnt@pb+1,w,c
 12195  000EB8  22DA               	addwfc	fsr2h,f,c
 12196  000EBA  50DE               	movf	postinc2,w,c
 12197  000EBC  10DE               	iorwf	postinc2,w,c
 12198  000EBE  B4D8               	btfsc	status,2,c
 12199  000EC0  D016               	goto	i2l7936
 12200  000EC2  EE20 F002          	lfsr	2,2
 12201  000EC6  500D               	movf	i2__doprnt@pb,w,c
 12202  000EC8  26D9               	addwf	fsr2l,f,c
 12203  000ECA  500E               	movf	i2__doprnt@pb+1,w,c
 12204  000ECC  22DA               	addwfc	fsr2h,f,c
 12205  000ECE  CFDE F013          	movff	postinc2,??i2__doprnt
 12206  000ED2  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12207  000ED6  D801               	call	i2u1246_48
 12208  000ED8  D01F               	goto	i2l7940
 12209  000EDA                     i2u1246_48:
 12210  000EDA  0005               	push	
 12211  000EDC  6EFA               	movwf	pclath,c
 12212  000EDE  5013               	movf	??i2__doprnt,w,c
 12213  000EE0  6EFD               	movwf	tosl,c
 12214  000EE2  5014               	movf	??i2__doprnt+1,w,c
 12215  000EE4  6EFE               	movwf	tosh,c
 12216  000EE6  6AFF               	clrf	tosu,c
 12217  000EE8  50FA               	movf	pclath,w,c
 12218  000EEA  0E2D               	movlw	45
 12219  000EEC  0012               	return		;indir
 12220  000EEE                     i2l7936:
 12221  000EEE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12222  000EF2  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12223  000EF6  CFDE F013          	movff	postinc2,??i2__doprnt
 12224  000EFA  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12225  000EFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12226  000F02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12227  000F06  0E2D               	movlw	45
 12228  000F08  6EDF               	movwf	indf2,c
 12229  000F0A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12230  000F0E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12231  000F12  2ADE               	incf	postinc2,f,c
 12232  000F14  0E00               	movlw	0
 12233  000F16  22DD               	addwfc	postdec2,f,c
 12234  000F18                     i2l7940:
 12235                           
 12236                           ;doprnt.c: 1415: if(width)
 12237  000F18  5020               	movf	i2__doprnt@width,w,c
 12238  000F1A  1021               	iorwf	i2__doprnt@width+1,w,c
 12239  000F1C  B4D8               	btfsc	status,2,c
 12240  000F1E  D0B4               	goto	i2l7974
 12241                           
 12242                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 12243                           
 12244                           ;doprnt.c: 1416: do
 12245  000F20  EE20 F002          	lfsr	2,2
 12246  000F24  500D               	movf	i2__doprnt@pb,w,c
 12247  000F26  26D9               	addwf	fsr2l,f,c
 12248  000F28  500E               	movf	i2__doprnt@pb+1,w,c
 12249  000F2A  22DA               	addwfc	fsr2h,f,c
 12250  000F2C  50DE               	movf	postinc2,w,c
 12251  000F2E  10DE               	iorwf	postinc2,w,c
 12252  000F30  B4D8               	btfsc	status,2,c
 12253  000F32  D016               	goto	i2l7946
 12254  000F34  EE20 F002          	lfsr	2,2
 12255  000F38  500D               	movf	i2__doprnt@pb,w,c
 12256  000F3A  26D9               	addwf	fsr2l,f,c
 12257  000F3C  500E               	movf	i2__doprnt@pb+1,w,c
 12258  000F3E  22DA               	addwfc	fsr2h,f,c
 12259  000F40  CFDE F013          	movff	postinc2,??i2__doprnt
 12260  000F44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12261  000F48  D801               	call	i2u1249_48
 12262  000F4A  D01F               	goto	i2l7950
 12263  000F4C                     i2u1249_48:
 12264  000F4C  0005               	push	
 12265  000F4E  6EFA               	movwf	pclath,c
 12266  000F50  5013               	movf	??i2__doprnt,w,c
 12267  000F52  6EFD               	movwf	tosl,c
 12268  000F54  5014               	movf	??i2__doprnt+1,w,c
 12269  000F56  6EFE               	movwf	tosh,c
 12270  000F58  6AFF               	clrf	tosu,c
 12271  000F5A  50FA               	movf	pclath,w,c
 12272  000F5C  0E30               	movlw	48
 12273  000F5E  0012               	return		;indir
 12274  000F60                     i2l7946:
 12275  000F60  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12276  000F64  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12277  000F68  CFDE F013          	movff	postinc2,??i2__doprnt
 12278  000F6C  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12279  000F70  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12280  000F74  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12281  000F78  0E30               	movlw	48
 12282  000F7A  6EDF               	movwf	indf2,c
 12283  000F7C  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12284  000F80  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12285  000F84  2ADE               	incf	postinc2,f,c
 12286  000F86  0E00               	movlw	0
 12287  000F88  22DD               	addwfc	postdec2,f,c
 12288  000F8A                     i2l7950:
 12289                           
 12290                           ;doprnt.c: 1418: while(--width);
 12291  000F8A  0620               	decf	i2__doprnt@width,f,c
 12292  000F8C  A0D8               	btfss	status,0,c
 12293  000F8E  0621               	decf	i2__doprnt@width+1,f,c
 12294  000F90  D7C3               	goto	i2l7940
 12295  000F92                     i2l7952:
 12296                           
 12297                           ;doprnt.c: 1422: {
 12298                           ;doprnt.c: 1424: if(width
 12299                           ;doprnt.c: 1428: )
 12300  000F92  5020               	movf	i2__doprnt@width,w,c
 12301  000F94  1021               	iorwf	i2__doprnt@width+1,w,c
 12302  000F96  B4D8               	btfsc	status,2,c
 12303  000F98  D03C               	goto	i2l7964
 12304  000F9A                     i2l7954:
 12305                           
 12306                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 12307  000F9A  EE20 F002          	lfsr	2,2
 12308  000F9E  500D               	movf	i2__doprnt@pb,w,c
 12309  000FA0  26D9               	addwf	fsr2l,f,c
 12310  000FA2  500E               	movf	i2__doprnt@pb+1,w,c
 12311  000FA4  22DA               	addwfc	fsr2h,f,c
 12312  000FA6  50DE               	movf	postinc2,w,c
 12313  000FA8  10DE               	iorwf	postinc2,w,c
 12314  000FAA  B4D8               	btfsc	status,2,c
 12315  000FAC  D016               	goto	i2l7958
 12316  000FAE  EE20 F002          	lfsr	2,2
 12317  000FB2  500D               	movf	i2__doprnt@pb,w,c
 12318  000FB4  26D9               	addwf	fsr2l,f,c
 12319  000FB6  500E               	movf	i2__doprnt@pb+1,w,c
 12320  000FB8  22DA               	addwfc	fsr2h,f,c
 12321  000FBA  CFDE F013          	movff	postinc2,??i2__doprnt
 12322  000FBE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12323  000FC2  D801               	call	i2u1253_48
 12324  000FC4  D01F               	goto	i2l7962
 12325  000FC6                     i2u1253_48:
 12326  000FC6  0005               	push	
 12327  000FC8  6EFA               	movwf	pclath,c
 12328  000FCA  5013               	movf	??i2__doprnt,w,c
 12329  000FCC  6EFD               	movwf	tosl,c
 12330  000FCE  5014               	movf	??i2__doprnt+1,w,c
 12331  000FD0  6EFE               	movwf	tosh,c
 12332  000FD2  6AFF               	clrf	tosu,c
 12333  000FD4  50FA               	movf	pclath,w,c
 12334  000FD6  0E20               	movlw	32
 12335  000FD8  0012               	return		;indir
 12336  000FDA                     i2l7958:
 12337  000FDA  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12338  000FDE  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12339  000FE2  CFDE F013          	movff	postinc2,??i2__doprnt
 12340  000FE6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12341  000FEA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12342  000FEE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12343  000FF2  0E20               	movlw	32
 12344  000FF4  6EDF               	movwf	indf2,c
 12345  000FF6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12346  000FFA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12347  000FFE  2ADE               	incf	postinc2,f,c
 12348  001000  0E00               	movlw	0
 12349  001002  22DD               	addwfc	postdec2,f,c
 12350  001004                     i2l7962:
 12351                           
 12352                           ;doprnt.c: 1431: while(--width);
 12353  001004  0620               	decf	i2__doprnt@width,f,c
 12354  001006  A0D8               	btfss	status,0,c
 12355  001008  0621               	decf	i2__doprnt@width+1,f,c
 12356  00100A  5020               	movf	i2__doprnt@width,w,c
 12357  00100C  1021               	iorwf	i2__doprnt@width+1,w,c
 12358  00100E  A4D8               	btfss	status,2,c
 12359  001010  D7C4               	goto	i2l7954
 12360  001012                     i2l7964:
 12361                           
 12362                           ;doprnt.c: 1438: if(flag & 0x03)
 12363  001012  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 12364  001016  0E03               	movlw	3
 12365  001018  1613               	andwf	??i2__doprnt,f,c
 12366  00101A  B4D8               	btfsc	status,2,c
 12367  00101C  D035               	goto	i2l7974
 12368                           
 12369                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 12370  00101E  EE20 F002          	lfsr	2,2
 12371  001022  500D               	movf	i2__doprnt@pb,w,c
 12372  001024  26D9               	addwf	fsr2l,f,c
 12373  001026  500E               	movf	i2__doprnt@pb+1,w,c
 12374  001028  22DA               	addwfc	fsr2h,f,c
 12375  00102A  50DE               	movf	postinc2,w,c
 12376  00102C  10DE               	iorwf	postinc2,w,c
 12377  00102E  B4D8               	btfsc	status,2,c
 12378  001030  D016               	goto	i2l7970
 12379  001032  EE20 F002          	lfsr	2,2
 12380  001036  500D               	movf	i2__doprnt@pb,w,c
 12381  001038  26D9               	addwf	fsr2l,f,c
 12382  00103A  500E               	movf	i2__doprnt@pb+1,w,c
 12383  00103C  22DA               	addwfc	fsr2h,f,c
 12384  00103E  CFDE F013          	movff	postinc2,??i2__doprnt
 12385  001042  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12386  001046  D801               	call	i2u1257_48
 12387  001048  D01F               	goto	i2l7974
 12388  00104A                     i2u1257_48:
 12389  00104A  0005               	push	
 12390  00104C  6EFA               	movwf	pclath,c
 12391  00104E  5013               	movf	??i2__doprnt,w,c
 12392  001050  6EFD               	movwf	tosl,c
 12393  001052  5014               	movf	??i2__doprnt+1,w,c
 12394  001054  6EFE               	movwf	tosh,c
 12395  001056  6AFF               	clrf	tosu,c
 12396  001058  50FA               	movf	pclath,w,c
 12397  00105A  0E2D               	movlw	45
 12398  00105C  0012               	return		;indir
 12399  00105E                     i2l7970:
 12400  00105E  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12401  001062  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12402  001066  CFDE F013          	movff	postinc2,??i2__doprnt
 12403  00106A  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12404  00106E  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12405  001072  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12406  001076  0E2D               	movlw	45
 12407  001078  6EDF               	movwf	indf2,c
 12408  00107A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12409  00107E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12410  001082  2ADE               	incf	postinc2,f,c
 12411  001084  0E00               	movlw	0
 12412  001086  22DD               	addwfc	postdec2,f,c
 12413  001088                     i2l7974:
 12414                           
 12415                           ;doprnt.c: 1469: }
 12416                           ;doprnt.c: 1472: prec = c;
 12417  001088  C022  F018         	movff	i2__doprnt@c,i2__doprnt@prec
 12418                           
 12419                           ;doprnt.c: 1474: while(prec--) {
 12420  00108C  D08B               	goto	i2l7994
 12421  00108E                     i2l7976:
 12422                           
 12423                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 12424  00108E  5018               	movf	i2__doprnt@prec,w,c
 12425  001090  0D02               	mullw	2
 12426  001092  0EF6               	movlw	low _dpowers
 12427  001094  24F3               	addwf	prodl,w,c
 12428  001096  6EF6               	movwf	tblptrl,c
 12429  001098  0EFE               	movlw	high _dpowers
 12430  00109A  20F4               	addwfc	prodh,w,c
 12431  00109C  6EF7               	movwf	tblptrh,c
 12432  00109E                     	if	1	;There are 3 active tblptr bytes
 12433  00109E  6AF8               	clrf	tblptru,c
 12434  0010A0  0E00               	movlw	low (__mediumconst shr (0+16))
 12435  0010A2  22F8               	addwfc	tblptru,f,c
 12436  0010A4                     	endif
 12437  0010A4  0009               	tblrd		*+
 12438  0010A6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12439  0010AA  000A               	tblrd		*-
 12440  0010AC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12441  0010B0  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 12442  0010B4  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 12443  0010B8  ECBB  F01A         	call	i2___lwdiv
 12444  0010BC  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 12445  0010C0  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 12446  0010C4  0E00               	movlw	0
 12447  0010C6  6E0B               	movwf	i2___lwmod@divisor+1,c
 12448  0010C8  0E0A               	movlw	10
 12449  0010CA  6E0A               	movwf	i2___lwmod@divisor,c
 12450  0010CC  EC2E  F01B         	call	i2___lwmod	;wreg free
 12451  0010D0  5008               	movf	?i2___lwmod,w,c
 12452  0010D2  0F30               	addlw	48
 12453  0010D4  6E22               	movwf	i2__doprnt@c,c
 12454                           
 12455                           ;doprnt.c: 1491: break;
 12456  0010D6  D031               	goto	i2l7986
 12457  0010D8                     i2l7978:
 12458                           
 12459                           ;doprnt.c: 1499: {
 12460                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 12461  0010D8  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 12462  0010DC  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 12463  0010E0  5018               	movf	i2__doprnt@prec,w,c
 12464  0010E2  0D02               	mullw	2
 12465  0010E4  0E00               	movlw	low _hexpowers
 12466  0010E6  24F3               	addwf	prodl,w,c
 12467  0010E8  6EF6               	movwf	tblptrl,c
 12468  0010EA  0EFF               	movlw	high _hexpowers
 12469  0010EC  20F4               	addwfc	prodh,w,c
 12470  0010EE  6EF7               	movwf	tblptrh,c
 12471  0010F0                     	if	1	;There are 3 active tblptr bytes
 12472  0010F0  6AF8               	clrf	tblptru,c
 12473  0010F2  0E00               	movlw	low (__mediumconst shr (0+16))
 12474  0010F4  22F8               	addwfc	tblptru,f,c
 12475  0010F6                     	endif
 12476  0010F6  0009               	tblrd		*+
 12477  0010F8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 12478  0010FC  000A               	tblrd		*-
 12479  0010FE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 12480  001102  ECBB  F01A         	call	i2___lwdiv	;wreg free
 12481  001106  5001               	movf	?i2___lwdiv,w,c
 12482  001108  0B0F               	andlw	15
 12483  00110A  6E17               	movwf	i2__doprnt@idx,c
 12484                           
 12485                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 12486  00110C  5017               	movf	i2__doprnt@idx,w,c
 12487  00110E  0D01               	mullw	1
 12488  001110  0E8E               	movlw	low STR_19
 12489  001112  24F3               	addwf	prodl,w,c
 12490  001114  6EF6               	movwf	tblptrl,c
 12491  001116  0EFF               	movlw	high STR_19
 12492  001118  20F4               	addwfc	prodh,w,c
 12493  00111A  6EF7               	movwf	tblptrh,c
 12494  00111C                     	if	1	;There are 3 active tblptr bytes
 12495  00111C  6AF8               	clrf	tblptru,c
 12496  00111E  0E00               	movlw	low (__mediumconst shr (0+16))
 12497  001120  22F8               	addwfc	tblptru,f,c
 12498  001122                     	endif
 12499  001122  0008               	tblrd		*
 12500  001124  CFF5 F022          	movff	tablat,i2__doprnt@c
 12501                           
 12502                           ;doprnt.c: 1523: }
 12503                           
 12504                           ;doprnt.c: 1508: }
 12505                           ;doprnt.c: 1510: break;
 12506  001128  D008               	goto	i2l7986
 12507  00112A                     i2l7984:
 12508  00112A  501F               	movf	i2__doprnt@flag,w,c
 12509  00112C  0B80               	andlw	128
 12510                           
 12511                           ; Switch size 1, requested type "space"
 12512                           ; Number of cases is 2, Range of values is 0 to 128
 12513                           ; switch strategies available:
 12514                           ; Name         Instructions Cycles
 12515                           ; simple_byte            7     4 (average)
 12516                           ;	Chosen strategy is simple_byte
 12517  00112E  0A00               	xorlw	0	; case 0
 12518  001130  B4D8               	btfsc	status,2,c
 12519  001132  D7AD               	goto	i2l7976
 12520  001134  0A80               	xorlw	128	; case 128
 12521  001136  B4D8               	btfsc	status,2,c
 12522  001138  D7CF               	goto	i2l7978
 12523  00113A                     i2l7986:
 12524                           
 12525                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 12526  00113A  EE20 F002          	lfsr	2,2
 12527  00113E  500D               	movf	i2__doprnt@pb,w,c
 12528  001140  26D9               	addwf	fsr2l,f,c
 12529  001142  500E               	movf	i2__doprnt@pb+1,w,c
 12530  001144  22DA               	addwfc	fsr2h,f,c
 12531  001146  50DE               	movf	postinc2,w,c
 12532  001148  10DE               	iorwf	postinc2,w,c
 12533  00114A  B4D8               	btfsc	status,2,c
 12534  00114C  D016               	goto	i2l7990
 12535  00114E  EE20 F002          	lfsr	2,2
 12536  001152  500D               	movf	i2__doprnt@pb,w,c
 12537  001154  26D9               	addwf	fsr2l,f,c
 12538  001156  500E               	movf	i2__doprnt@pb+1,w,c
 12539  001158  22DA               	addwfc	fsr2h,f,c
 12540  00115A  CFDE F013          	movff	postinc2,??i2__doprnt
 12541  00115E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12542  001162  D801               	call	i2u1259_48
 12543  001164  D01F               	goto	i2l7994
 12544  001166                     i2u1259_48:
 12545  001166  0005               	push	
 12546  001168  6EFA               	movwf	pclath,c
 12547  00116A  5013               	movf	??i2__doprnt,w,c
 12548  00116C  6EFD               	movwf	tosl,c
 12549  00116E  5014               	movf	??i2__doprnt+1,w,c
 12550  001170  6EFE               	movwf	tosh,c
 12551  001172  6AFF               	clrf	tosu,c
 12552  001174  50FA               	movf	pclath,w,c
 12553  001176  5022               	movf	i2__doprnt@c,w,c
 12554  001178  0012               	return		;indir
 12555  00117A                     i2l7990:
 12556  00117A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12557  00117E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12558  001182  CFDE F013          	movff	postinc2,??i2__doprnt
 12559  001186  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12560  00118A  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12561  00118E  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12562  001192  C022  FFDF         	movff	i2__doprnt@c,indf2
 12563  001196  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12564  00119A  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12565  00119E  2ADE               	incf	postinc2,f,c
 12566  0011A0  0E00               	movlw	0
 12567  0011A2  22DD               	addwfc	postdec2,f,c
 12568  0011A4                     i2l7994:
 12569  0011A4  0618               	decf	i2__doprnt@prec,f,c
 12570  0011A6  2818               	incf	i2__doprnt@prec,w,c
 12571  0011A8  A4D8               	btfss	status,2,c
 12572  0011AA  D7BF               	goto	i2l7984
 12573  0011AC                     i2l7996:
 12574  0011AC  500F               	movf	i2__doprnt@f,w,c
 12575  0011AE  6E13               	movwf	??i2__doprnt& (0+255),c
 12576  0011B0  5010               	movf	i2__doprnt@f+1,w,c
 12577  0011B2  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 12578  0011B4  4A0F               	infsnz	i2__doprnt@f,f,c
 12579  0011B6  2A10               	incf	i2__doprnt@f+1,f,c
 12580  0011B8  C013  FFF6         	movff	??i2__doprnt,tblptrl
 12581  0011BC  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 12582  0011C0  0E00               	movlw	low (__mediumconst shr (0+16))
 12583  0011C2  6EF8               	movwf	tblptru,c
 12584  0011C4  0E0F               	movlw	(high __ramtop+-1)
 12585  0011C6  64F7               	cpfsgt	tblptrh,c
 12586  0011C8  D003               	bra	i2u1261_47
 12587  0011CA  0008               	tblrd		*
 12588  0011CC  50F5               	movf	tablat,w,c
 12589  0011CE  D005               	bra	i2u1261_40
 12590  0011D0                     i2u1261_47:
 12591  0011D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 12592  0011D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 12593  0011D8  50EF               	movf	indf0,w,c
 12594  0011DA                     i2u1261_40:
 12595  0011DA  6E22               	movwf	i2__doprnt@c,c
 12596  0011DC  5022               	movf	i2__doprnt@c,w,c
 12597  0011DE  A4D8               	btfss	status,2,c
 12598  0011E0  EFCD  F004         	goto	i2l7790
 12599  0011E4                     i2l7998:
 12600                           
 12601                           ;doprnt.c: 1540: return 0;
 12602  0011E4  0E00               	movlw	0
 12603  0011E6  6E0E               	movwf	?i2__doprnt+1,c
 12604  0011E8  0E00               	movlw	0
 12605  0011EA  6E0D               	movwf	?i2__doprnt,c
 12606  0011EC  0012               	return	
 12607  0011EE                     __end_ofi2__doprnt:
 12608                           	opt stack 0
 12609                           tosu	equ	0xFFF
 12610                           tosh	equ	0xFFE
 12611                           tosl	equ	0xFFD
 12612                           pclatu	equ	0xFFB
 12613                           pclath	equ	0xFFA
 12614                           tblptru	equ	0xFF8
 12615                           tblptrh	equ	0xFF7
 12616                           tblptrl	equ	0xFF6
 12617                           tablat	equ	0xFF5
 12618                           prodh	equ	0xFF4
 12619                           prodl	equ	0xFF3
 12620                           intcon	equ	0xFF2
 12621                           intcon2	equ	0xFF1
 12622                           intcon3	equ	0xFF0
 12623                           indf0	equ	0xFEF
 12624                           postinc0	equ	0xFEE
 12625                           fsr0h	equ	0xFEA
 12626                           fsr0l	equ	0xFE9
 12627                           wreg	equ	0xFE8
 12628                           indf1	equ	0xFE7
 12629                           postinc1	equ	0xFE6
 12630                           postdec1	equ	0xFE5
 12631                           fsr1h	equ	0xFE2
 12632                           fsr1l	equ	0xFE1
 12633                           indf2	equ	0xFDF
 12634                           postinc2	equ	0xFDE
 12635                           postdec2	equ	0xFDD
 12636                           fsr2h	equ	0xFDA
 12637                           fsr2l	equ	0xFD9
 12638                           status	equ	0xFD8
 12639                           
 12640 ;; *************** function i2_putch *****************
 12641 ;; Defined at:
 12642 ;;		line 30 in file "lcd.c"
 12643 ;; Parameters:    Size  Location     Type
 12644 ;;  data            1    wreg     unsigned char 
 12645 ;; Auto vars:     Size  Location     Type
 12646 ;;  data            1    2[COMRAM] unsigned char 
 12647 ;; Return value:  Size  Location     Type
 12648 ;;                  1    wreg      void 
 12649 ;; Registers used:
 12650 ;;		wreg, status,2, status,0, cstack
 12651 ;; Tracked objects:
 12652 ;;		On entry : 0/0
 12653 ;;		On exit  : 0/0
 12654 ;;		Unchanged: 0/0
 12655 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12657 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12658 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12659 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12660 ;;Total ram usage:        1 bytes
 12661 ;; Hardware stack levels used:    1
 12662 ;; Hardware stack levels required when called:    1
 12663 ;; This function calls:
 12664 ;;		i2_lcdNibble
 12665 ;; This function is called by:
 12666 ;;		i2_printf
 12667 ;; This function uses a non-reentrant model
 12668 ;;
 12669                           
 12670                           	psect	text36
 12671  003858                     __ptext36:
 12672                           	opt stack 0
 12673  003858                     i2_putch:
 12674                           	opt stack 20
 12675                           
 12676                           ;incstack = 0
 12677                           ;i2putch@data stored from wreg
 12678  003858  6E03               	movwf	i2putch@data,c
 12679                           
 12680                           ;lcd.c: 31: LATDbits.LATD2 = 1;
 12681  00385A  848C               	bsf	3980,2,c	;volatile
 12682                           
 12683                           ;lcd.c: 32: lcdNibble(data);
 12684  00385C  5003               	movf	i2putch@data,w,c
 12685  00385E  EC67  F01A         	call	i2_lcdNibble
 12686  003862  0012               	return		;funcret
 12687  003864                     __end_ofi2_putch:
 12688                           	opt stack 0
 12689                           tosu	equ	0xFFF
 12690                           tosh	equ	0xFFE
 12691                           tosl	equ	0xFFD
 12692                           pclatu	equ	0xFFB
 12693                           pclath	equ	0xFFA
 12694                           tblptru	equ	0xFF8
 12695                           tblptrh	equ	0xFF7
 12696                           tblptrl	equ	0xFF6
 12697                           tablat	equ	0xFF5
 12698                           prodh	equ	0xFF4
 12699                           prodl	equ	0xFF3
 12700                           intcon	equ	0xFF2
 12701                           intcon2	equ	0xFF1
 12702                           intcon3	equ	0xFF0
 12703                           indf0	equ	0xFEF
 12704                           postinc0	equ	0xFEE
 12705                           fsr0h	equ	0xFEA
 12706                           fsr0l	equ	0xFE9
 12707                           wreg	equ	0xFE8
 12708                           indf1	equ	0xFE7
 12709                           postinc1	equ	0xFE6
 12710                           postdec1	equ	0xFE5
 12711                           fsr1h	equ	0xFE2
 12712                           fsr1l	equ	0xFE1
 12713                           indf2	equ	0xFDF
 12714                           postinc2	equ	0xFDE
 12715                           postdec2	equ	0xFDD
 12716                           fsr2h	equ	0xFDA
 12717                           fsr2l	equ	0xFD9
 12718                           status	equ	0xFD8
 12719                           
 12720 ;; *************** function i2_isdigit *****************
 12721 ;; Defined at:
 12722 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 12723 ;; Parameters:    Size  Location     Type
 12724 ;;  c               1    wreg     unsigned char 
 12725 ;; Auto vars:     Size  Location     Type
 12726 ;;  c               1    2[COMRAM] unsigned char 
 12727 ;; Return value:  Size  Location     Type
 12728 ;;		None               void
 12729 ;; Registers used:
 12730 ;;		wreg, status,2, status,0
 12731 ;; Tracked objects:
 12732 ;;		On entry : 0/0
 12733 ;;		On exit  : 0/0
 12734 ;;		Unchanged: 0/0
 12735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12737 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12738 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12739 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12740 ;;Total ram usage:        3 bytes
 12741 ;; Hardware stack levels used:    1
 12742 ;; This function calls:
 12743 ;;		Nothing
 12744 ;; This function is called by:
 12745 ;;		i2__doprnt
 12746 ;; This function uses a non-reentrant model
 12747 ;;
 12748                           
 12749                           	psect	text37
 12750  0037E6                     __ptext37:
 12751                           	opt stack 0
 12752  0037E6                     i2_isdigit:
 12753                           	opt stack 21
 12754                           
 12755                           ;incstack = 0
 12756                           ;i2isdigit@c stored from wreg
 12757  0037E6  6E03               	movwf	i2isdigit@c,c
 12758  0037E8  0E00               	movlw	0
 12759  0037EA  6E02               	movwf	i2_isdigit$760,c
 12760  0037EC  0E3A               	movlw	58
 12761  0037EE  6003               	cpfslt	i2isdigit@c,c
 12762  0037F0  D005               	goto	i2l3160
 12763  0037F2  0E2F               	movlw	47
 12764  0037F4  6403               	cpfsgt	i2isdigit@c,c
 12765  0037F6  D002               	goto	i2l3160
 12766  0037F8  0E01               	movlw	1
 12767  0037FA  6E02               	movwf	i2_isdigit$760,c
 12768  0037FC                     i2l3160:
 12769  0037FC  C002  F001         	movff	i2_isdigit$760,??i2_isdigit
 12770  003800  3001               	rrcf	??i2_isdigit,w,c
 12771  003802  0012               	return	
 12772  003804                     __end_ofi2_isdigit:
 12773                           	opt stack 0
 12774                           tosu	equ	0xFFF
 12775                           tosh	equ	0xFFE
 12776                           tosl	equ	0xFFD
 12777                           pclatu	equ	0xFFB
 12778                           pclath	equ	0xFFA
 12779                           tblptru	equ	0xFF8
 12780                           tblptrh	equ	0xFF7
 12781                           tblptrl	equ	0xFF6
 12782                           tablat	equ	0xFF5
 12783                           prodh	equ	0xFF4
 12784                           prodl	equ	0xFF3
 12785                           intcon	equ	0xFF2
 12786                           intcon2	equ	0xFF1
 12787                           intcon3	equ	0xFF0
 12788                           indf0	equ	0xFEF
 12789                           postinc0	equ	0xFEE
 12790                           fsr0h	equ	0xFEA
 12791                           fsr0l	equ	0xFE9
 12792                           wreg	equ	0xFE8
 12793                           indf1	equ	0xFE7
 12794                           postinc1	equ	0xFE6
 12795                           postdec1	equ	0xFE5
 12796                           fsr1h	equ	0xFE2
 12797                           fsr1l	equ	0xFE1
 12798                           indf2	equ	0xFDF
 12799                           postinc2	equ	0xFDE
 12800                           postdec2	equ	0xFDD
 12801                           fsr2h	equ	0xFDA
 12802                           fsr2l	equ	0xFD9
 12803                           status	equ	0xFD8
 12804                           
 12805 ;; *************** function i2___wmul *****************
 12806 ;; Defined at:
 12807 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 12808 ;; Parameters:    Size  Location     Type
 12809 ;;  multiplier      2    0[COMRAM] unsigned int 
 12810 ;;  multiplicand    2    2[COMRAM] unsigned int 
 12811 ;; Auto vars:     Size  Location     Type
 12812 ;;  __wmul          2    4[COMRAM] unsigned int 
 12813 ;; Return value:  Size  Location     Type
 12814 ;;                  2    0[COMRAM] unsigned int 
 12815 ;; Registers used:
 12816 ;;		wreg, status,2, status,0, prodl, prodh
 12817 ;; Tracked objects:
 12818 ;;		On entry : 0/0
 12819 ;;		On exit  : 0/0
 12820 ;;		Unchanged: 0/0
 12821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12822 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12823 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12824 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12825 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12826 ;;Total ram usage:        6 bytes
 12827 ;; Hardware stack levels used:    1
 12828 ;; This function calls:
 12829 ;;		Nothing
 12830 ;; This function is called by:
 12831 ;;		i2__doprnt
 12832 ;; This function uses a non-reentrant model
 12833 ;;
 12834                           
 12835                           	psect	text38
 12836  0037C0                     __ptext38:
 12837                           	opt stack 0
 12838  0037C0                     i2___wmul:
 12839                           	opt stack 21
 12840                           
 12841                           ;incstack = 0
 12842  0037C0  5001               	movf	i2___wmul@multiplier,w,c
 12843  0037C2  0203               	mulwf	i2___wmul@multiplicand,c
 12844  0037C4  CFF3 F005          	movff	prodl,i2___wmul@product
 12845  0037C8  CFF4 F006          	movff	prodh,i2___wmul@product+1
 12846  0037CC  5001               	movf	i2___wmul@multiplier,w,c
 12847  0037CE  0204               	mulwf	i2___wmul@multiplicand+1,c
 12848  0037D0  50F3               	movf	prodl,w,c
 12849  0037D2  2606               	addwf	i2___wmul@product+1,f,c
 12850  0037D4  5002               	movf	i2___wmul@multiplier+1,w,c
 12851  0037D6  0203               	mulwf	i2___wmul@multiplicand,c
 12852  0037D8  50F3               	movf	prodl,w,c
 12853  0037DA  2606               	addwf	i2___wmul@product+1,f,c
 12854  0037DC  C005  F001         	movff	i2___wmul@product,?i2___wmul
 12855  0037E0  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 12856  0037E4  0012               	return	
 12857  0037E6                     __end_ofi2___wmul:
 12858                           	opt stack 0
 12859                           tosu	equ	0xFFF
 12860                           tosh	equ	0xFFE
 12861                           tosl	equ	0xFFD
 12862                           pclatu	equ	0xFFB
 12863                           pclath	equ	0xFFA
 12864                           tblptru	equ	0xFF8
 12865                           tblptrh	equ	0xFF7
 12866                           tblptrl	equ	0xFF6
 12867                           tablat	equ	0xFF5
 12868                           prodh	equ	0xFF4
 12869                           prodl	equ	0xFF3
 12870                           intcon	equ	0xFF2
 12871                           intcon2	equ	0xFF1
 12872                           intcon3	equ	0xFF0
 12873                           indf0	equ	0xFEF
 12874                           postinc0	equ	0xFEE
 12875                           fsr0h	equ	0xFEA
 12876                           fsr0l	equ	0xFE9
 12877                           wreg	equ	0xFE8
 12878                           indf1	equ	0xFE7
 12879                           postinc1	equ	0xFE6
 12880                           postdec1	equ	0xFE5
 12881                           fsr1h	equ	0xFE2
 12882                           fsr1l	equ	0xFE1
 12883                           indf2	equ	0xFDF
 12884                           postinc2	equ	0xFDE
 12885                           postdec2	equ	0xFDD
 12886                           fsr2h	equ	0xFDA
 12887                           fsr2l	equ	0xFD9
 12888                           status	equ	0xFD8
 12889                           
 12890 ;; *************** function i2___lwmod *****************
 12891 ;; Defined at:
 12892 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 12893 ;; Parameters:    Size  Location     Type
 12894 ;;  dividend        2    7[COMRAM] unsigned int 
 12895 ;;  divisor         2    9[COMRAM] unsigned int 
 12896 ;; Auto vars:     Size  Location     Type
 12897 ;;  __lwmod         1   11[COMRAM] unsigned char 
 12898 ;; Return value:  Size  Location     Type
 12899 ;;                  2    7[COMRAM] unsigned int 
 12900 ;; Registers used:
 12901 ;;		wreg, status,2, status,0
 12902 ;; Tracked objects:
 12903 ;;		On entry : 0/0
 12904 ;;		On exit  : 0/0
 12905 ;;		Unchanged: 0/0
 12906 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12907 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12908 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12909 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12910 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12911 ;;Total ram usage:        5 bytes
 12912 ;; Hardware stack levels used:    1
 12913 ;; This function calls:
 12914 ;;		Nothing
 12915 ;; This function is called by:
 12916 ;;		i2__doprnt
 12917 ;; This function uses a non-reentrant model
 12918 ;;
 12919                           
 12920                           	psect	text39
 12921  00365C                     __ptext39:
 12922                           	opt stack 0
 12923  00365C                     i2___lwmod:
 12924                           	opt stack 21
 12925                           
 12926                           ;incstack = 0
 12927  00365C  500A               	movf	i2___lwmod@divisor,w,c
 12928  00365E  100B               	iorwf	i2___lwmod@divisor+1,w,c
 12929  003660  B4D8               	btfsc	status,2,c
 12930  003662  D018               	goto	i2l987
 12931  003664  0E01               	movlw	1
 12932  003666  6E0C               	movwf	i2___lwmod@counter,c
 12933  003668  D004               	goto	i2l3192
 12934  00366A                     i2l3190:
 12935  00366A  90D8               	bcf	status,0,c
 12936  00366C  360A               	rlcf	i2___lwmod@divisor,f,c
 12937  00366E  360B               	rlcf	i2___lwmod@divisor+1,f,c
 12938  003670  2A0C               	incf	i2___lwmod@counter,f,c
 12939  003672                     i2l3192:
 12940  003672  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 12941  003674  D7FA               	goto	i2l3190
 12942  003676                     i2l3194:
 12943  003676  500A               	movf	i2___lwmod@divisor,w,c
 12944  003678  5C08               	subwf	i2___lwmod@dividend,w,c
 12945  00367A  500B               	movf	i2___lwmod@divisor+1,w,c
 12946  00367C  5809               	subwfb	i2___lwmod@dividend+1,w,c
 12947  00367E  A0D8               	btfss	status,0,c
 12948  003680  D004               	goto	i2l3198
 12949  003682  500A               	movf	i2___lwmod@divisor,w,c
 12950  003684  5E08               	subwf	i2___lwmod@dividend,f,c
 12951  003686  500B               	movf	i2___lwmod@divisor+1,w,c
 12952  003688  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 12953  00368A                     i2l3198:
 12954  00368A  90D8               	bcf	status,0,c
 12955  00368C  320B               	rrcf	i2___lwmod@divisor+1,f,c
 12956  00368E  320A               	rrcf	i2___lwmod@divisor,f,c
 12957  003690  2E0C               	decfsz	i2___lwmod@counter,f,c
 12958  003692  D7F1               	goto	i2l3194
 12959  003694                     i2l987:
 12960  003694  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 12961  003698  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 12962  00369C  0012               	return		;funcret
 12963  00369E                     __end_ofi2___lwmod:
 12964                           	opt stack 0
 12965                           tosu	equ	0xFFF
 12966                           tosh	equ	0xFFE
 12967                           tosl	equ	0xFFD
 12968                           pclatu	equ	0xFFB
 12969                           pclath	equ	0xFFA
 12970                           tblptru	equ	0xFF8
 12971                           tblptrh	equ	0xFF7
 12972                           tblptrl	equ	0xFF6
 12973                           tablat	equ	0xFF5
 12974                           prodh	equ	0xFF4
 12975                           prodl	equ	0xFF3
 12976                           intcon	equ	0xFF2
 12977                           intcon2	equ	0xFF1
 12978                           intcon3	equ	0xFF0
 12979                           indf0	equ	0xFEF
 12980                           postinc0	equ	0xFEE
 12981                           fsr0h	equ	0xFEA
 12982                           fsr0l	equ	0xFE9
 12983                           wreg	equ	0xFE8
 12984                           indf1	equ	0xFE7
 12985                           postinc1	equ	0xFE6
 12986                           postdec1	equ	0xFE5
 12987                           fsr1h	equ	0xFE2
 12988                           fsr1l	equ	0xFE1
 12989                           indf2	equ	0xFDF
 12990                           postinc2	equ	0xFDE
 12991                           postdec2	equ	0xFDD
 12992                           fsr2h	equ	0xFDA
 12993                           fsr2l	equ	0xFD9
 12994                           status	equ	0xFD8
 12995                           
 12996 ;; *************** function i2___lwdiv *****************
 12997 ;; Defined at:
 12998 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 12999 ;; Parameters:    Size  Location     Type
 13000 ;;  dividend        2    0[COMRAM] unsigned int 
 13001 ;;  divisor         2    2[COMRAM] unsigned int 
 13002 ;; Auto vars:     Size  Location     Type
 13003 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 13004 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 13005 ;; Return value:  Size  Location     Type
 13006 ;;                  2    0[COMRAM] unsigned int 
 13007 ;; Registers used:
 13008 ;;		wreg, status,2, status,0
 13009 ;; Tracked objects:
 13010 ;;		On entry : 0/0
 13011 ;;		On exit  : 0/0
 13012 ;;		Unchanged: 0/0
 13013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13014 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13015 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13017 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13018 ;;Total ram usage:        7 bytes
 13019 ;; Hardware stack levels used:    1
 13020 ;; This function calls:
 13021 ;;		Nothing
 13022 ;; This function is called by:
 13023 ;;		i2__doprnt
 13024 ;; This function uses a non-reentrant model
 13025 ;;
 13026                           
 13027                           	psect	text40
 13028  003576                     __ptext40:
 13029                           	opt stack 0
 13030  003576                     i2___lwdiv:
 13031                           	opt stack 21
 13032                           
 13033                           ;incstack = 0
 13034  003576  0E00               	movlw	0
 13035  003578  6E06               	movwf	i2___lwdiv@quotient+1,c
 13036  00357A  0E00               	movlw	0
 13037  00357C  6E05               	movwf	i2___lwdiv@quotient,c
 13038  00357E  5003               	movf	i2___lwdiv@divisor,w,c
 13039  003580  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 13040  003582  B4D8               	btfsc	status,2,c
 13041  003584  D01C               	goto	i2l977
 13042  003586  0E01               	movlw	1
 13043  003588  6E07               	movwf	i2___lwdiv@counter,c
 13044  00358A  D004               	goto	i2l3172
 13045  00358C                     i2l3170:
 13046  00358C  90D8               	bcf	status,0,c
 13047  00358E  3603               	rlcf	i2___lwdiv@divisor,f,c
 13048  003590  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 13049  003592  2A07               	incf	i2___lwdiv@counter,f,c
 13050  003594                     i2l3172:
 13051  003594  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 13052  003596  D7FA               	goto	i2l3170
 13053  003598                     i2l3174:
 13054  003598  90D8               	bcf	status,0,c
 13055  00359A  3605               	rlcf	i2___lwdiv@quotient,f,c
 13056  00359C  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 13057  00359E  5003               	movf	i2___lwdiv@divisor,w,c
 13058  0035A0  5C01               	subwf	i2___lwdiv@dividend,w,c
 13059  0035A2  5004               	movf	i2___lwdiv@divisor+1,w,c
 13060  0035A4  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 13061  0035A6  A0D8               	btfss	status,0,c
 13062  0035A8  D005               	goto	i2l3182
 13063  0035AA  5003               	movf	i2___lwdiv@divisor,w,c
 13064  0035AC  5E01               	subwf	i2___lwdiv@dividend,f,c
 13065  0035AE  5004               	movf	i2___lwdiv@divisor+1,w,c
 13066  0035B0  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 13067  0035B2  8005               	bsf	i2___lwdiv@quotient,0,c
 13068  0035B4                     i2l3182:
 13069  0035B4  90D8               	bcf	status,0,c
 13070  0035B6  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 13071  0035B8  3203               	rrcf	i2___lwdiv@divisor,f,c
 13072  0035BA  2E07               	decfsz	i2___lwdiv@counter,f,c
 13073  0035BC  D7ED               	goto	i2l3174
 13074  0035BE                     i2l977:
 13075  0035BE  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 13076  0035C2  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 13077  0035C6  0012               	return		;funcret
 13078  0035C8                     __end_ofi2___lwdiv:
 13079                           	opt stack 0
 13080                           tosu	equ	0xFFF
 13081                           tosh	equ	0xFFE
 13082                           tosl	equ	0xFFD
 13083                           pclatu	equ	0xFFB
 13084                           pclath	equ	0xFFA
 13085                           tblptru	equ	0xFF8
 13086                           tblptrh	equ	0xFF7
 13087                           tblptrl	equ	0xFF6
 13088                           tablat	equ	0xFF5
 13089                           prodh	equ	0xFF4
 13090                           prodl	equ	0xFF3
 13091                           intcon	equ	0xFF2
 13092                           intcon2	equ	0xFF1
 13093                           intcon3	equ	0xFF0
 13094                           indf0	equ	0xFEF
 13095                           postinc0	equ	0xFEE
 13096                           fsr0h	equ	0xFEA
 13097                           fsr0l	equ	0xFE9
 13098                           wreg	equ	0xFE8
 13099                           indf1	equ	0xFE7
 13100                           postinc1	equ	0xFE6
 13101                           postdec1	equ	0xFE5
 13102                           fsr1h	equ	0xFE2
 13103                           fsr1l	equ	0xFE1
 13104                           indf2	equ	0xFDF
 13105                           postinc2	equ	0xFDE
 13106                           postdec2	equ	0xFDD
 13107                           fsr2h	equ	0xFDA
 13108                           fsr2l	equ	0xFD9
 13109                           status	equ	0xFD8
 13110                           
 13111 ;; *************** function i2_lcdInst *****************
 13112 ;; Defined at:
 13113 ;;		line 25 in file "lcd.c"
 13114 ;; Parameters:    Size  Location     Type
 13115 ;;  data            1    wreg     unsigned char 
 13116 ;; Auto vars:     Size  Location     Type
 13117 ;;  data            1    2[COMRAM] unsigned char 
 13118 ;; Return value:  Size  Location     Type
 13119 ;;                  1    wreg      void 
 13120 ;; Registers used:
 13121 ;;		wreg, status,2, status,0, cstack
 13122 ;; Tracked objects:
 13123 ;;		On entry : 0/0
 13124 ;;		On exit  : 0/0
 13125 ;;		Unchanged: 0/0
 13126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13128 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13130 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13131 ;;Total ram usage:        1 bytes
 13132 ;; Hardware stack levels used:    1
 13133 ;; Hardware stack levels required when called:    1
 13134 ;; This function calls:
 13135 ;;		i2_lcdNibble
 13136 ;; This function is called by:
 13137 ;;		_keypressed
 13138 ;; This function uses a non-reentrant model
 13139 ;;
 13140                           
 13141                           	psect	text41
 13142  003864                     __ptext41:
 13143                           	opt stack 0
 13144  003864                     i2_lcdInst:
 13145                           	opt stack 22
 13146                           
 13147                           ;incstack = 0
 13148                           ;i2lcdInst@data stored from wreg
 13149  003864  6E03               	movwf	i2lcdInst@data,c
 13150                           
 13151                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 13152  003866  948C               	bcf	3980,2,c	;volatile
 13153                           
 13154                           ;lcd.c: 27: lcdNibble(data);
 13155  003868  5003               	movf	i2lcdInst@data,w,c
 13156  00386A  EC67  F01A         	call	i2_lcdNibble
 13157  00386E  0012               	return		;funcret
 13158  003870                     __end_ofi2_lcdInst:
 13159                           	opt stack 0
 13160                           tosu	equ	0xFFF
 13161                           tosh	equ	0xFFE
 13162                           tosl	equ	0xFFD
 13163                           pclatu	equ	0xFFB
 13164                           pclath	equ	0xFFA
 13165                           tblptru	equ	0xFF8
 13166                           tblptrh	equ	0xFF7
 13167                           tblptrl	equ	0xFF6
 13168                           tablat	equ	0xFF5
 13169                           prodh	equ	0xFF4
 13170                           prodl	equ	0xFF3
 13171                           intcon	equ	0xFF2
 13172                           intcon2	equ	0xFF1
 13173                           intcon3	equ	0xFF0
 13174                           indf0	equ	0xFEF
 13175                           postinc0	equ	0xFEE
 13176                           fsr0h	equ	0xFEA
 13177                           fsr0l	equ	0xFE9
 13178                           wreg	equ	0xFE8
 13179                           indf1	equ	0xFE7
 13180                           postinc1	equ	0xFE6
 13181                           postdec1	equ	0xFE5
 13182                           fsr1h	equ	0xFE2
 13183                           fsr1l	equ	0xFE1
 13184                           indf2	equ	0xFDF
 13185                           postinc2	equ	0xFDE
 13186                           postdec2	equ	0xFDD
 13187                           fsr2h	equ	0xFDA
 13188                           fsr2l	equ	0xFD9
 13189                           status	equ	0xFD8
 13190                           
 13191 ;; *************** function i2_lcdNibble *****************
 13192 ;; Defined at:
 13193 ;;		line 35 in file "lcd.c"
 13194 ;; Parameters:    Size  Location     Type
 13195 ;;  data            1    wreg     unsigned char 
 13196 ;; Auto vars:     Size  Location     Type
 13197 ;;  data            1    1[COMRAM] unsigned char 
 13198 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 13199 ;; Return value:  Size  Location     Type
 13200 ;;                  1    wreg      void 
 13201 ;; Registers used:
 13202 ;;		wreg, status,2, status,0
 13203 ;; Tracked objects:
 13204 ;;		On entry : 0/0
 13205 ;;		On exit  : 0/0
 13206 ;;		Unchanged: 0/0
 13207 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13208 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13209 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13210 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13211 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13212 ;;Total ram usage:        2 bytes
 13213 ;; Hardware stack levels used:    1
 13214 ;; This function calls:
 13215 ;;		Nothing
 13216 ;; This function is called by:
 13217 ;;		i2_lcdInst
 13218 ;;		i2_putch
 13219 ;; This function uses a non-reentrant model
 13220 ;;
 13221                           
 13222                           	psect	text42
 13223  0034CE                     __ptext42:
 13224                           	opt stack 0
 13225  0034CE                     i2_lcdNibble:
 13226                           	opt stack 20
 13227                           
 13228                           ;incstack = 0
 13229                           ;i2lcdNibble@data stored from wreg
 13230  0034CE  6E02               	movwf	i2lcdNibble@data,c
 13231                           
 13232                           ;lcd.c: 37: char temp = data & 0xF0;
 13233  0034D0  5002               	movf	i2lcdNibble@data,w,c
 13234  0034D2  0BF0               	andlw	240
 13235  0034D4  6E01               	movwf	i2lcdNibble@temp,c
 13236                           
 13237                           ;lcd.c: 38: LATD = LATD & 0x0F;
 13238  0034D6  508C               	movf	3980,w,c	;volatile
 13239  0034D8  0B0F               	andlw	15
 13240  0034DA  6E8C               	movwf	3980,c	;volatile
 13241                           
 13242                           ;lcd.c: 39: LATD = temp | LATD;
 13243  0034DC  5001               	movf	i2lcdNibble@temp,w,c
 13244  0034DE  108C               	iorwf	3980,w,c	;volatile
 13245  0034E0  6E8C               	movwf	3980,c	;volatile
 13246                           
 13247                           ;lcd.c: 41: LATDbits.LATD3 = 0;
 13248  0034E2  968C               	bcf	3980,3,c	;volatile
 13249                           
 13250                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
 13251  0034E4  0E14               	movlw	20
 13252  0034E6                     i2u1329_47:
 13253  0034E6  2EE8               	decfsz	wreg,f,c
 13254  0034E8  D7FE               	bra	i2u1329_47
 13255  0034EA  D000               	nop2	
 13256                           
 13257                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 13258  0034EC  868C               	bsf	3980,3,c	;volatile
 13259                           
 13260                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
 13261  0034EE  0E14               	movlw	20
 13262  0034F0                     i2u1330_47:
 13263  0034F0  2EE8               	decfsz	wreg,f,c
 13264  0034F2  D7FE               	bra	i2u1330_47
 13265  0034F4  D000               	nop2	
 13266                           
 13267                           ;lcd.c: 46: data = data << 4;
 13268  0034F6  3802               	swapf	i2lcdNibble@data,w,c
 13269  0034F8  0BF0               	andlw	240
 13270  0034FA  6E02               	movwf	i2lcdNibble@data,c
 13271                           
 13272                           ;lcd.c: 48: temp = data & 0xF0;
 13273  0034FC  5002               	movf	i2lcdNibble@data,w,c
 13274  0034FE  0BF0               	andlw	240
 13275  003500  6E01               	movwf	i2lcdNibble@temp,c
 13276                           
 13277                           ;lcd.c: 49: LATD = LATD & 0x0F;
 13278  003502  508C               	movf	3980,w,c	;volatile
 13279  003504  0B0F               	andlw	15
 13280  003506  6E8C               	movwf	3980,c	;volatile
 13281                           
 13282                           ;lcd.c: 50: LATD = temp | LATD;
 13283  003508  5001               	movf	i2lcdNibble@temp,w,c
 13284  00350A  108C               	iorwf	3980,w,c	;volatile
 13285  00350C  6E8C               	movwf	3980,c	;volatile
 13286                           
 13287                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 13288  00350E  968C               	bcf	3980,3,c	;volatile
 13289                           
 13290                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
 13291  003510  0E14               	movlw	20
 13292  003512                     i2u1331_47:
 13293  003512  2EE8               	decfsz	wreg,f,c
 13294  003514  D7FE               	bra	i2u1331_47
 13295  003516  D000               	nop2	
 13296                           
 13297                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 13298  003518  868C               	bsf	3980,3,c	;volatile
 13299                           
 13300                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
 13301  00351A  0E14               	movlw	20
 13302  00351C                     i2u1332_47:
 13303  00351C  2EE8               	decfsz	wreg,f,c
 13304  00351E  D7FE               	bra	i2u1332_47
 13305  003520  D000               	nop2	
 13306  003522  0012               	return		;funcret
 13307  003524                     __end_ofi2_lcdNibble:
 13308                           	opt stack 0
 13309                           tosu	equ	0xFFF
 13310                           tosh	equ	0xFFE
 13311                           tosl	equ	0xFFD
 13312                           pclatu	equ	0xFFB
 13313                           pclath	equ	0xFFA
 13314                           tblptru	equ	0xFF8
 13315                           tblptrh	equ	0xFF7
 13316                           tblptrl	equ	0xFF6
 13317                           tablat	equ	0xFF5
 13318                           prodh	equ	0xFF4
 13319                           prodl	equ	0xFF3
 13320                           intcon	equ	0xFF2
 13321                           intcon2	equ	0xFF1
 13322                           intcon3	equ	0xFF0
 13323                           indf0	equ	0xFEF
 13324                           postinc0	equ	0xFEE
 13325                           fsr0h	equ	0xFEA
 13326                           fsr0l	equ	0xFE9
 13327                           wreg	equ	0xFE8
 13328                           indf1	equ	0xFE7
 13329                           postinc1	equ	0xFE6
 13330                           postdec1	equ	0xFE5
 13331                           fsr1h	equ	0xFE2
 13332                           fsr1l	equ	0xFE1
 13333                           indf2	equ	0xFDF
 13334                           postinc2	equ	0xFDE
 13335                           postdec2	equ	0xFDD
 13336                           fsr2h	equ	0xFDA
 13337                           fsr2l	equ	0xFD9
 13338                           status	equ	0xFD8
 13339                           
 13340 ;; *************** function i2___awmod *****************
 13341 ;; Defined at:
 13342 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 13343 ;; Parameters:    Size  Location     Type
 13344 ;;  dividend        2    0[COMRAM] int 
 13345 ;;  divisor         2    2[COMRAM] int 
 13346 ;; Auto vars:     Size  Location     Type
 13347 ;;  __awmod         1    5[COMRAM] unsigned char 
 13348 ;;  __awmod         1    4[COMRAM] unsigned char 
 13349 ;; Return value:  Size  Location     Type
 13350 ;;                  2    0[COMRAM] int 
 13351 ;; Registers used:
 13352 ;;		wreg, status,2, status,0
 13353 ;; Tracked objects:
 13354 ;;		On entry : 0/0
 13355 ;;		On exit  : 0/0
 13356 ;;		Unchanged: 0/0
 13357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13358 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13359 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13361 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13362 ;;Total ram usage:        6 bytes
 13363 ;; Hardware stack levels used:    1
 13364 ;; This function calls:
 13365 ;;		Nothing
 13366 ;; This function is called by:
 13367 ;;		_keypressed
 13368 ;; This function uses a non-reentrant model
 13369 ;;
 13370                           
 13371                           	psect	text43
 13372  00327C                     __ptext43:
 13373                           	opt stack 0
 13374  00327C                     i2___awmod:
 13375                           	opt stack 23
 13376                           
 13377                           ;incstack = 0
 13378  00327C  0E00               	movlw	0
 13379  00327E  6E06               	movwf	i2___awmod@sign,c
 13380  003280  AE02               	btfss	i2___awmod@dividend+1,7,c
 13381  003282  D006               	goto	i2l4082
 13382  003284  6C01               	negf	i2___awmod@dividend,c
 13383  003286  1E02               	comf	i2___awmod@dividend+1,f,c
 13384  003288  B0D8               	btfsc	status,0,c
 13385  00328A  2A02               	incf	i2___awmod@dividend+1,f,c
 13386  00328C  0E01               	movlw	1
 13387  00328E  6E06               	movwf	i2___awmod@sign,c
 13388  003290                     i2l4082:
 13389  003290  AE04               	btfss	i2___awmod@divisor+1,7,c
 13390  003292  D004               	goto	i2l4086
 13391  003294  6C03               	negf	i2___awmod@divisor,c
 13392  003296  1E04               	comf	i2___awmod@divisor+1,f,c
 13393  003298  B0D8               	btfsc	status,0,c
 13394  00329A  2A04               	incf	i2___awmod@divisor+1,f,c
 13395  00329C                     i2l4086:
 13396  00329C  5003               	movf	i2___awmod@divisor,w,c
 13397  00329E  1004               	iorwf	i2___awmod@divisor+1,w,c
 13398  0032A0  B4D8               	btfsc	status,2,c
 13399  0032A2  D018               	goto	i2l4102
 13400  0032A4  0E01               	movlw	1
 13401  0032A6  6E05               	movwf	i2___awmod@counter,c
 13402  0032A8  D004               	goto	i2l4092
 13403  0032AA                     i2l4090:
 13404  0032AA  90D8               	bcf	status,0,c
 13405  0032AC  3603               	rlcf	i2___awmod@divisor,f,c
 13406  0032AE  3604               	rlcf	i2___awmod@divisor+1,f,c
 13407  0032B0  2A05               	incf	i2___awmod@counter,f,c
 13408  0032B2                     i2l4092:
 13409  0032B2  AE04               	btfss	i2___awmod@divisor+1,7,c
 13410  0032B4  D7FA               	goto	i2l4090
 13411  0032B6                     i2l4094:
 13412  0032B6  5003               	movf	i2___awmod@divisor,w,c
 13413  0032B8  5C01               	subwf	i2___awmod@dividend,w,c
 13414  0032BA  5004               	movf	i2___awmod@divisor+1,w,c
 13415  0032BC  5802               	subwfb	i2___awmod@dividend+1,w,c
 13416  0032BE  A0D8               	btfss	status,0,c
 13417  0032C0  D004               	goto	i2l4098
 13418  0032C2  5003               	movf	i2___awmod@divisor,w,c
 13419  0032C4  5E01               	subwf	i2___awmod@dividend,f,c
 13420  0032C6  5004               	movf	i2___awmod@divisor+1,w,c
 13421  0032C8  5A02               	subwfb	i2___awmod@dividend+1,f,c
 13422  0032CA                     i2l4098:
 13423  0032CA  90D8               	bcf	status,0,c
 13424  0032CC  3204               	rrcf	i2___awmod@divisor+1,f,c
 13425  0032CE  3203               	rrcf	i2___awmod@divisor,f,c
 13426  0032D0  2E05               	decfsz	i2___awmod@counter,f,c
 13427  0032D2  D7F1               	goto	i2l4094
 13428  0032D4                     i2l4102:
 13429  0032D4  5006               	movf	i2___awmod@sign,w,c
 13430  0032D6  B4D8               	btfsc	status,2,c
 13431  0032D8  D004               	goto	i2l4106
 13432  0032DA  6C01               	negf	i2___awmod@dividend,c
 13433  0032DC  1E02               	comf	i2___awmod@dividend+1,f,c
 13434  0032DE  B0D8               	btfsc	status,0,c
 13435  0032E0  2A02               	incf	i2___awmod@dividend+1,f,c
 13436  0032E2                     i2l4106:
 13437  0032E2  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 13438  0032E6  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 13439  0032EA  0012               	return	
 13440  0032EC                     __end_ofi2___awmod:
 13441                           	opt stack 0
 13442                           tosu	equ	0xFFF
 13443                           tosh	equ	0xFFE
 13444                           tosl	equ	0xFFD
 13445                           pclatu	equ	0xFFB
 13446                           pclath	equ	0xFFA
 13447                           tblptru	equ	0xFF8
 13448                           tblptrh	equ	0xFF7
 13449                           tblptrl	equ	0xFF6
 13450                           tablat	equ	0xFF5
 13451                           prodh	equ	0xFF4
 13452                           prodl	equ	0xFF3
 13453                           intcon	equ	0xFF2
 13454                           intcon2	equ	0xFF1
 13455                           intcon3	equ	0xFF0
 13456                           indf0	equ	0xFEF
 13457                           postinc0	equ	0xFEE
 13458                           fsr0h	equ	0xFEA
 13459                           fsr0l	equ	0xFE9
 13460                           wreg	equ	0xFE8
 13461                           indf1	equ	0xFE7
 13462                           postinc1	equ	0xFE6
 13463                           postdec1	equ	0xFE5
 13464                           fsr1h	equ	0xFE2
 13465                           fsr1l	equ	0xFE1
 13466                           indf2	equ	0xFDF
 13467                           postinc2	equ	0xFDE
 13468                           postdec2	equ	0xFDD
 13469                           fsr2h	equ	0xFDA
 13470                           fsr2l	equ	0xFD9
 13471                           status	equ	0xFD8
 13472                           tosu	equ	0xFFF
 13473                           tosh	equ	0xFFE
 13474                           tosl	equ	0xFFD
 13475                           pclatu	equ	0xFFB
 13476                           pclath	equ	0xFFA
 13477                           tblptru	equ	0xFF8
 13478                           tblptrh	equ	0xFF7
 13479                           tblptrl	equ	0xFF6
 13480                           tablat	equ	0xFF5
 13481                           prodh	equ	0xFF4
 13482                           prodl	equ	0xFF3
 13483                           intcon	equ	0xFF2
 13484                           intcon2	equ	0xFF1
 13485                           intcon3	equ	0xFF0
 13486                           indf0	equ	0xFEF
 13487                           postinc0	equ	0xFEE
 13488                           fsr0h	equ	0xFEA
 13489                           fsr0l	equ	0xFE9
 13490                           wreg	equ	0xFE8
 13491                           indf1	equ	0xFE7
 13492                           postinc1	equ	0xFE6
 13493                           postdec1	equ	0xFE5
 13494                           fsr1h	equ	0xFE2
 13495                           fsr1l	equ	0xFE1
 13496                           indf2	equ	0xFDF
 13497                           postinc2	equ	0xFDE
 13498                           postdec2	equ	0xFDD
 13499                           fsr2h	equ	0xFDA
 13500                           fsr2l	equ	0xFD9
 13501                           status	equ	0xFD8
 13502                           
 13503                           	psect	text44
 13504  000000                     __ptext44:
 13505                           	opt stack 0
 13506                           tosu	equ	0xFFF
 13507                           tosh	equ	0xFFE
 13508                           tosl	equ	0xFFD
 13509                           pclatu	equ	0xFFB
 13510                           pclath	equ	0xFFA
 13511                           tblptru	equ	0xFF8
 13512                           tblptrh	equ	0xFF7
 13513                           tblptrl	equ	0xFF6
 13514                           tablat	equ	0xFF5
 13515                           prodh	equ	0xFF4
 13516                           prodl	equ	0xFF3
 13517                           intcon	equ	0xFF2
 13518                           intcon2	equ	0xFF1
 13519                           intcon3	equ	0xFF0
 13520                           indf0	equ	0xFEF
 13521                           postinc0	equ	0xFEE
 13522                           fsr0h	equ	0xFEA
 13523                           fsr0l	equ	0xFE9
 13524                           wreg	equ	0xFE8
 13525                           indf1	equ	0xFE7
 13526                           postinc1	equ	0xFE6
 13527                           postdec1	equ	0xFE5
 13528                           fsr1h	equ	0xFE2
 13529                           fsr1l	equ	0xFE1
 13530                           indf2	equ	0xFDF
 13531                           postinc2	equ	0xFDE
 13532                           postdec2	equ	0xFDD
 13533                           fsr2h	equ	0xFDA
 13534                           fsr2l	equ	0xFD9
 13535                           status	equ	0xFD8
 13536                           
 13537                           	psect	rparam
 13538  0000                     tosu	equ	0xFFF
 13539                           tosh	equ	0xFFE
 13540                           tosl	equ	0xFFD
 13541                           pclatu	equ	0xFFB
 13542                           pclath	equ	0xFFA
 13543                           tblptru	equ	0xFF8
 13544                           tblptrh	equ	0xFF7
 13545                           tblptrl	equ	0xFF6
 13546                           tablat	equ	0xFF5
 13547                           prodh	equ	0xFF4
 13548                           prodl	equ	0xFF3
 13549                           intcon	equ	0xFF2
 13550                           intcon2	equ	0xFF1
 13551                           intcon3	equ	0xFF0
 13552                           indf0	equ	0xFEF
 13553                           postinc0	equ	0xFEE
 13554                           fsr0h	equ	0xFEA
 13555                           fsr0l	equ	0xFE9
 13556                           wreg	equ	0xFE8
 13557                           indf1	equ	0xFE7
 13558                           postinc1	equ	0xFE6
 13559                           postdec1	equ	0xFE5
 13560                           fsr1h	equ	0xFE2
 13561                           fsr1l	equ	0xFE1
 13562                           indf2	equ	0xFDF
 13563                           postinc2	equ	0xFDE
 13564                           postdec2	equ	0xFDD
 13565                           fsr2h	equ	0xFDA
 13566                           fsr2l	equ	0xFD9
 13567                           status	equ	0xFD8
 13568                           
 13569                           	psect	temp
 13570  00007A                     btemp:
 13571                           	opt stack 0
 13572  00007A                     	ds	1
 13573  0000                     int$flags	set	btemp
 13574                           tosu	equ	0xFFF
 13575                           tosh	equ	0xFFE
 13576                           tosl	equ	0xFFD
 13577                           pclatu	equ	0xFFB
 13578                           pclath	equ	0xFFA
 13579                           tblptru	equ	0xFF8
 13580                           tblptrh	equ	0xFF7
 13581                           tblptrl	equ	0xFF6
 13582                           tablat	equ	0xFF5
 13583                           prodh	equ	0xFF4
 13584                           prodl	equ	0xFF3
 13585                           intcon	equ	0xFF2
 13586                           intcon2	equ	0xFF1
 13587                           intcon3	equ	0xFF0
 13588                           indf0	equ	0xFEF
 13589                           postinc0	equ	0xFEE
 13590                           fsr0h	equ	0xFEA
 13591                           fsr0l	equ	0xFE9
 13592                           wreg	equ	0xFE8
 13593                           indf1	equ	0xFE7
 13594                           postinc1	equ	0xFE6
 13595                           postdec1	equ	0xFE5
 13596                           fsr1h	equ	0xFE2
 13597                           fsr1l	equ	0xFE1
 13598                           indf2	equ	0xFDF
 13599                           postinc2	equ	0xFDE
 13600                           postdec2	equ	0xFDD
 13601                           fsr2h	equ	0xFDA
 13602                           fsr2l	equ	0xFD9
 13603                           status	equ	0xFD8


Data Sizes:
    Strings     240
    Constant    42
    Data        750
    BSS         195
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     61     121
    BANK0           128     56     121
    BANK1           256     10     116
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    display_menu$1147	PTR const unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[20]), STR_9(CODE[20]), STR_8(CODE[22]), STR_7(CODE[19]), 
		 -> menu(BIGRAM[720]), STR_6(CODE[15]), STR_5(CODE[6]), STR_4(CODE[14]), 
		 -> STR_3(CODE[12]), STR_2(CODE[23]), STR_1(CODE[23]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_17(CODE[14]), STR_16(CODE[15]), STR_15(CODE[8]), display1(BANK1[18]), 
		 -> display0(BANK1[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> i2_putch(), Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), NULL(NULL[0]), STR_18(CODE[7]), 
		 -> _doprnt@c(BANK0[1]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_17(CODE[14]), STR_16(CODE[15]), STR_15(CODE[8]), STR_14(CODE[5]), 
		 -> STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), STR_10(CODE[20]), 
		 -> STR_9(CODE[20]), STR_8(CODE[22]), STR_7(CODE[19]), menu(BIGRAM[720]), 
		 -> STR_6(CODE[15]), STR_5(CODE[6]), STR_4(CODE[14]), STR_3(CODE[12]), 
		 -> STR_2(CODE[23]), STR_1(CODE[23]), display1(BANK1[18]), display0(BANK1[18]), 

    S500__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S500__prbuf$ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    display_menu@menuSizePtr	PTR int  size(2) Largest target is 2
		 -> endSize(BANK0[2]), menuSize(BANK0[2]), creditSize(BANK0[2]), events(BANK0[2]), 

    display_menu@menuIndexPtr	PTR int  size(2) Largest target is 2
		 -> endIndex(BANK0[2]), creditIndex(BANK0[2]), logIndex(BANK0[2]), menuIndex(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    i2_printf->i2__doprnt
    i2__doprnt->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _update_state->_sprintf
    _update_lcd->_printf
    _printf->__doprnt
    _update_display->_display_menu
    _display_menu->_sprintf
    _sprintf->__doprnt
    __doprnt->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _update_RTC->___wmul
    _I2C_Master_Read->_I2C_Master_Wait
    _sort->__measure
    __measure->___awmod
    _set_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _read_sensors->_readADC
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    _update_display->_display_menu

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   94639
                                             55 BANK0      1     1      0
                    _I2C_Master_Init
                            _initLCD
                       _read_sensors
                           _set_time
                               _sort
                         _update_RTC
                     _update_display
                         _update_lcd
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         3     3      0   21262
                                             50 BANK0      3     3      0
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     599
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _update_lcd                                           7     7      0   15264
                                             42 BANK0      3     3      0
                            _lcdInst
                             _printf
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     417
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4     441
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     6      2   14096
                                             34 BANK0      8     6      2
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _update_display                                       0     0      0   46403
                           __measure
                       _display_menu
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _display_menu                                        25    25      0   25080
                                             50 BANK0      5     5      0
                                              0 BANK1     10    10      0
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             16     6     10   17904
                                             34 BANK0     16     6     10
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            __doprnt
                           __measure (ARG)
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             26    20      6   11868
                                             12 BANK0     22    16      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _update_RTC                                           5     5      0    3606
                                              6 BANK0      5     5      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _sort                                                 6     6      0    6405
                                             20 BANK0      6     6      0
                             ___wmul
                           __measure
 ---------------------------------------------------------------------------------
 (2) __measure                                            14    12      2    3419
                                              6 BANK0     14    12      2
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    2309
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2856
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0     592
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     493
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_sensors                                         5     5      0     409
                                              2 BANK0      5     5      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _keypressed                                          19    19      0   11412
                                             42 COMRAM    19    19      0
                          i2___awmod
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_printf                                             8     6      2    8568
                                             34 COMRAM     8     6      2
                          i2__doprnt
 ---------------------------------------------------------------------------------
 (9) i2__doprnt                                           26    20      6    8036
                                             12 COMRAM    22    16      6
                   Absolute function *
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch *
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i2___awmod                                            6     2      4     504
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _read_sensors
     _readADC
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _sort
     ___wmul
     __measure
       ___awmod
   _update_RTC
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
   _update_display
     __measure
       ___awmod
     _display_menu
       ___wmul
       _sprintf
         ___awdiv (ARG)
         ___awmod (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
         __measure (ARG)
           ___awmod
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
       __measure (ARG)
         ___awmod
   _update_lcd
     _lcdInst
       _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _strcmp
     _strcpy
   _update_state
     ___awdiv
     ___awmod
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
       __measure (ARG)
         ___awmod

 _keypressed (ROOT)
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2__doprnt
       Absolute function(Fake) *
       i2___lwdiv *
       i2___lwmod *
         i2___lwdiv (ARG)
       i2___wmul *
       i2_isdigit *
       i2_putch *
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0     2D0      37       18.1%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      A      74       7       45.3%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     38      79       5       94.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3D      79       1       96.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     166      34        0.0%
DATA                 0      0     436       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sun Feb 26 20:57:25 2017

             _update_state 2090                         l34 3834               ___awdiv@sign 0085  
      ___wmul@multiplicand 0082         i2___lwdiv@dividend 0001                __CFG_BORV$3 000000  
           _update_display 2C76               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l503 0480                        l465 2086                        l924 3010  
                      l977 3272                        l987 33AC                        _IR1 0056  
             __CFG_CPB$OFF 000000                        _IR2 00B8              ?_display_menu 0001  
                      _PEN 007E2A               __CFG_CPD$OFF 000000                        _SEN 007E28  
             ___awmod@sign 0085                        prod 000FF3                        tosl 000FFD  
                      wreg 000FE8               __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000  
                     l5000 2EF8                       l5002 2F04                       l5020 2F5C  
                     l5012 2F3A                       l5004 2F0A                       l5030 2F94  
                     l5032 2FA4                       l5016 2F48                       l5042 2FFE  
                     l5034 2FAA                       l4402 3222                       l4404 322E  
                     l5302 2B46                       l4414 3264                       l4406 3234  
                     l4430 339E                       l4422 3368                       l5400 29E6  
                     l4424 3374                       l5314 2BDE                       l5306 2B50  
                     l4426 337A                       l5404 29FC                       l5334 2822  
                     l5406 2A02                       l5440 2A50                       l5432 2A18  
                     l5290 33E6                       l4802 1C64                       l4386 37B6  
                     l4730 3486                       l8010 20B8                       l4820 1CC6  
                     l4812 1C92                       l5444 2A6C                       l5436 2A34  
                     l5372 2938                       l5364 2910                       l4716 3762  
                     l4740 3714                       l8012 20BE                       l5286 33DC  
                     l4910 1EF8                       l4902 1EC4                       l4830 1CF4  
                     l4806 1C6E                       l4734 34BE                       l4742 3720  
                     l8102 2E50                       l8006 20A4                       l5296 3412  
                     l4680 3122                       l4672 30FC                       l4920 1F38  
                     l4824 1CD0                       l5392 29BE                       l5368 2922  
                     l4728 347A                       l8016 20C8                       l4914 1F02  
                     l4842 1D32                       l4818 1CC0                       l5378 2974  
                     l4692 3168                       l4684 3146                       l4676 3110  
                     l4668 30EC                       l4932 1F76                       l4908 1EF2  
                     l4860 1DA6                       l4836 1D22                       l5396 29D2  
                     l8052 22D6                       l8028 2144                       l4678 311C  
                     l4926 1F66                       l4854 1D96                       l4838 1D28  
                     l8070 2346                       l8046 22B8                       l8038 21C8  
                     l4688 3154                       l4952 2000                       l4944 1FDA  
                     l4928 1F6C                       l4872 1E0A                       l4856 1D9C  
                     l4848 1D68                       l7512 0016                       l8080 2CE8  
                     l8056 22F2                       l8152 30A2                       l8144 308A  
                     _ADFM 007E07                       l4938 1FAC                       l4890 1E7E  
                     l4874 1E10                       l4866 1DDC                       l7522 0098  
                     l8082 2D46                       l8066 2332                       l4956 201A  
                     l4892 1E84                       l4884 1E50                       l7700 085A  
                     l7620 0532                       l7604 04C6                       l7524 00AA  
                     l8076 2C78                       l4966 207A                       l4878 1E1A  
                     l7622 0538                       l7606 04F0                       l7550 01FA  
                     l7542 01B4                       l7534 0110                       l7518 006A  
                     l8078 2CE2                       l8086 2D80                       l8158 30AE  
                     l4976 377E                       l4896 1E8E                       l7712 090E  
                     l7608 04F6                       l7560 0272                       l7552 0206  
                     l7544 01BA                       l7720 098A                       l7528 00B4  
                     l8096 2E02                       l4978 3790                       l7706 08B4  
                     l7650 05EA                       l7562 027E                       l7570 02EE  
                     l7554 020C                       l4994 2EDA                       l7708 08C6  
                     l7716 0938                       l7644 05A8                       l7636 0574  
                     l7572 0306                       l7556 024C                       l7740 17C6  
                     l4988 2EC4                       l7662 066E                       l7638 0586  
                     l7566 02C4                       l7718 0944                       l7680 0746  
                     l7672 06EA                       l7648 05E0                       l7576 036C  
                     l7584 03C4                       l7752 1806                       l7658 0644  
                     l7674 06F4                       l7586 03DC                       l7578 0374  
                     l7594 041A                       l7746 17E6                       l7692 07D8  
                     l7684 0770                       l7676 0700                       l7668 06C0  
                     l7588 0402                       l7764 1858                       _ADON 007E10  
                     l7686 0784                       l7782 1B12                       l7758 1834  
                     l7766 1872                       l7696 0802                       l7776 19D2  
                     l7698 0808                       STR_1 FF0F                       STR_2 FF26  
                     STR_3 FFD9                       STR_4 FFBD                       STR_5 FFF4  
                     STR_6 FF9F                       STR_7 FF7B                       STR_8 FF3D  
                     STR_9 FF53                       _LATB 000F8A                       _LATC 000F8B  
                     _LATD 000F8C                       _RCEN 007E2B                       u6430 1D58  
                     u6440 1D5A                       u6530 1E40                       u6290 3760  
                     u6540 1E42                       u6630 1F28                       u7415 3448  
                     u7504 28BC                       u6640 1F2A                       u6480 1DCC  
                     u7505 28B6                       u6490 1DCE                       u6580 1EB4  
                     u6590 1EB6                       u6680 1F9C                       u7640 2A2C  
                     u6690 1F9E                       u7650 2A48                       u7660 2A64  
                     u7494 2894                       u7670 2B02                       u7495 288E  
                     _RSEN 007E29                       _main 3022                i2__doprnt@c 0022  
              i2__doprnt@f 000F                       _menu 0174                       _keys FEE5  
                     _time 00C2                       fsr0h 000FEA                       fsr1h 000FE2  
       i2___lwdiv@quotient 0005                       indf0 000FEF                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf1 000FE7                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       _sort 28D2  
                     btemp 007A                       prodh 000FF4                       prodl 000FF3  
                     start 000E              __CFG_IESO$OFF 000000            __end_ofi2_putch 3864  
            __CFG_MCLRE$ON 000000               ___param_bank 000000                i2_lcdNibble 34CE  
   __end_of_update_display 2DAA         _discretize_counter 00CB           ?_I2C_Master_Init 008D  
         ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001  
           ??_display_menu 00B2                      ?_main 0001                      _ACKEN 007E2C  
                    _ACKDT 007E2D            __end_of___awdiv 2F66                      STR_10 FF67  
                    STR_11 FFFA                      STR_12 FFFA                      STR_13 FFFA  
                    STR_14 FFFA                      STR_15 FFE5                      STR_16 FFAE  
                    STR_17 FFCB                      STR_18 FFED                      STR_19 FF8E  
          __end_of___awmod 3172                      ?_sort 0001            __end_of___lldiv 3022  
                    _DIST1 004C                      u12060 097C                      u12028 07C2  
          ___awdiv@divisor 0082                      u12048 08F6                      u11610 015C  
                    u12067 0972                      u11620 01AA                      u13207 30C2  
                    u11617 0152                      u13217 2E6A                      u11730 036A  
                    u11650 0246                      u13227 3786                      u11627 01A0  
                    u11740 03AE                      u11580 00D6                      u12700 21C2  
                    u13237 361A                      u11590 00FE                      u13247 3650  
                    u11760 0452                      u11728 0336                      u13257 330C  
                    u11737 0360                      u11657 023C                      u11578 0052  
                    u13267 3316                      u11747 03A4                      u11587 00CC  
                    u13277 3342                      u11597 00F4                      u11918 062E  
                    u13287 334C                      u11767 0448                      u12760 22EC  
                    u11698 02AE                      u11948 06AA                      u11988 0730  
          __end_of___lwdiv 327C            __end_of___lwmod 33B6                      i2l503 0D74  
                    i2l348 177C                      i2l385 177E            ___awdiv@counter 0084  
                    i2l977 35BE                      i2l987 3694                      _PORTB 000F81  
                    _PROX1 0060                      _PROX2 006A            __end_of__doprnt 0996  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst 3858             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
                    _nRBPU 007F8F              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_readADC 3796            __end_of_initLCD 365C  
           __CFG_EBTRB$OFF 000000                 i2isdigit@c 0003            __end_of_dpowers FF00  
             i2__doprnt@ap 0011               i2__doprnt@cp 001B               i2__doprnt@pb 000D  
          __end_of_isdigit 37C0                      _state 00E8                      _putch 381E  
                    pclath 000FFA                      tablat 000FF5           __end_ofi2___wmul 37E6  
                    sort@i 0098                      status 000FD8            __end_of_sprintf 3576  
       __size_ofi2___awmod 0070             __CFG_PBADEN$ON 000000           __end_ofi2_printf 370A  
       __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042         __size_ofi2__doprnt 0858  
          __initialization 3172         __size_ofi2_lcdInst 000C               __end_of_main 30D0  
             __end_of_keys FEF6               __end_of_sort 2B0A                 i2printf@ap 0025  
               i2printf@pb 0027            ?_update_display 0001         __size_ofi2_isdigit 001E  
          _IR_THRESHOLD_HI 00E3                     ??_main 00B7                     ??_sort 0094  
            __activetblptr 000003          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0081  
   _latestSortedBottleTime 0100         ??_I2C_Master_Start 0081                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 0083                     _ADRESH 000FC4  
                   _ADRESL 000FC3           ___awdiv@dividend 0080            i2lcdNibble@data 0002  
                   ?_putch 0001            i2lcdNibble@temp 0001                     _INT1IE 007F83  
                   _INT1IF 007F80                     _CVRCON 000FB5                     i2l4102 32D4  
                   i2l3160 37FC                     i2l4106 32E2                     i2l3170 358C  
                   i2l3172 3594                     i2l3182 35B4                     i2l3174 3598  
                   i2l3190 366A                     i2l3192 3672                     i2l4090 32AA  
                   i2l4082 3290                     i2l3194 3676                     i2l4092 32B2  
                   i2l4094 32B6                     i2l4086 329C                     i2l3198 368A  
                   i2l4098 32CA                     i2l8200 132E                     i2l8202 1332  
                   i2l8300 1694                     i2l8212 135E                     i2l8302 1698  
                   i2l8222 139C                     i2l8216 1384                     i2l8314 171C  
                   i2l8250 146A                     i2l8234 1412                     i2l8218 138C  
                   i2l8170 123E                     i2l8322 1752                     i2l8308 16DC  
                   i2l8244 1452                     i2l8228 13CE                     i2l8180 1280  
                   i2l8318 1744                     i2l8270 1540                     i2l8262 14E0  
                   i2l8246 145A                     i2l8174 124E                     i2l7800 0A0E  
                   i2l8272 1544                     i2l8256 149C                     i2l8192 1304  
                   i2l8168 1236                     i2l7802 0A1C                     i2l8290 1610  
                   i2l8186 12C4                     i2l7900 0E16                     i2l7820 0B06  
                   i2l7812 0A7C                     i2l8284 15CC                     i2l8268 1520  
                   i2l8196 1326                     i2l7830 0B4C                     i2l7822 0B0A  
                   i2l7806 0A22                     i2l8278 1588                     i2l8198 132A  
                   i2l7840 0BA4                     i2l7832 0B50                     i2l8296 1654  
                   i2l7922 0E72                     i2l7914 0E48                     i2l7850 0C20  
                   i2l7834 0B84                     i2l7940 0F18                     i2l7916 0E58  
                   i2l7844 0BE4                     i2l7828 0B42                     i2l7950 0F8A  
                   i2l7926 0E96                     i2l7854 0C80                     i2l7862 0CD4  
                   i2l7838 0B9A                     i2l7790 099A                     i2l7936 0EEE  
                   i2l7952 0F92                     i2l7928 0E9E                     i2l7864 0CE6  
                   i2l7856 0C86                     i2l7848 0C0E                     i2l7872 0D1C  
                   i2l7970 105E                     i2l7962 1004                     i2l7954 0F9A  
                   i2l7946 0F60                     i2l7882 0DB2                     i2l7866 0D0A  
                   i2l7964 1012                     i2l7884 0DDC                     i2l7796 09E2  
                   i2l7990 117A                     i2l7958 0FDA                     i2l7974 1088  
                   i2l7886 0DE0                     i2l7976 108E                     i2l7984 112A  
                   i2l7978 10D8                     i2l7986 113A                     i2l7994 11A4  
                   i2l7898 0E12                     i2l7996 11AC                     i2l7998 11E4  
                ??i2_putch 0003                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9           __end_of__measure 2090  
           __CFG_XINST$OFF 000000                     ___wmul 369E                  ??___awdiv 0084  
           __CFG_STVREN$ON 000000                  ??___awmod 0084                  ??___lldiv 0088  
                ??___lwdiv 0084                  ??___lwmod 008B              ?_read_sensors 0001  
          _release_counter 00D3                  ??__doprnt 0092                     _events 00F1  
            i2__doprnt@idx 0017              i2__doprnt@len 0019              i2__doprnt@val 001D  
                   clear_0 31DC                     clear_1 31E8                     clear_2 31F4  
         ___awdiv@quotient 0086            ___awmod@divisor 0082                     _time_i 003E  
             __doprnt@flag 009E                     _nstate 00E7            ___awmod@counter 0084  
                ??_lcdInst 0082                     _printf 35C8               __doprnt@prec 0097  
                   _strcmp 3478                     _strcpy 370A                  ??_readADC 0080  
                ??_initLCD 0083               __pdataBIGRAM 0174               __pdataCOMRAM 0076  
                ??_isdigit 0080           __end_of_set_time 3418          __end_ofi2___awmod 32EC  
        __end_ofi2___lwdiv 35C8               __mediumconst FEE4          __end_ofi2___lwmod 369E  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
        __end_ofi2__doprnt 11EE             i2___awmod@sign 0006          __end_ofi2_lcdInst 3870  
                ??_sprintf 00AC          __end_ofi2_isdigit 3804                 __accesstop 0080  
  __end_of__initialization 31FA       __end_of_display_menu 1C54              ___rparam_used 000001  
display_menu@menuSelection 0168         i2___lwmod@dividend 0008             __pcstackCOMRAM 0001  
             __pidataBANK0 3804             ??_read_sensors 0082              __end_of_putch 3834  
                ?i2___wmul 0001         __size_of_lcdNibble 0068                i2putch@data 0003  
              keypressed@i 003B                  ?i2_printf 0023              update_state@i 00B4  
         _IR_THRESHOLD_LOW 00E5                 __doprnt@ap 0090                 __doprnt@cp 009A  
               __doprnt@pb 008C                 __measure@i 008A                    ??_putch 0082  
               __pbssBANK0 00B8                 __pbssBANK1 0100               ?i2_lcdNibble 0001  
                  ?___wmul 0080             _sorted_bottles 00D7                    ?_printf 00A2  
                  ?_strcmp 0080                    ?_strcpy 0080                 ??i2___wmul 0005  
                  _IR1_PIN 0077                    _IR2_PIN 0078                 _creditSize 00EB  
                ?__measure 0086                 _discretize 016E       __measure@measurement 0092  
               ??i2_printf 0025                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7                    i2_putch 3858          __end_of_lcdNibble 3354  
         ??_update_display 00B7                    __Hparam 0000                    __Lparam 0000  
           _manualDateTime FF08                  ?_set_time 0001                    ___awdiv 2EA8  
                  ___awmod 30D0                    ___lldiv 2F66            __size_of___wmul 0036  
                  ___lwdiv 3204                    ___lwmod 3354                  _CMCONbits 000FB4  
                  __doprnt 0012                  _DIST1_PIN 0074                    __pcinit 3172  
                  __ramtop 1000                    _endSize 00EF                    _lcdInst 3848  
                  __ptext0 3022                    __ptext1 2090                    __ptext2 2EA8  
                  __ptext3 2DAA                    __ptext4 370A                    __ptext5 3478  
                  __ptext6 35C8                    __ptext7 2C76                    __ptext8 17BA  
                  __ptext9 3524            __size_of_printf 004A            __size_of_strcmp 0056  
                  _readADC 376A            __size_of_strcpy 0032                    _initLCD 3612  
        __end_of_hexpowers FF08              i2_isdigit$760 0002                    _dpowers FEF6  
                  _measure 0170                    _isdigit 3796                 ??__measure 0088  
           i2__doprnt@flag 001F           ___awmod@dividend 0080             i2__doprnt@prec 0018  
                  _release 0172                 _keypressed 0008   __size_of_I2C_Master_Init 0060  
 __size_of_I2C_Master_Read 002E   __size_of_I2C_Master_Wait 0014   __size_of_I2C_Master_Stop 0008  
                  _runTime 00D5                    _yopWCap 00DD                    _sprintf 3524  
            __doprnt@width 009F      __size_of_display_menu 049A             __pintcode_body 11EE  
       _DIST_THRESHOLD_LOW 00E1       end_of_initialization 31FA       __end_of_read_sensors 28D2  
                  int_func 11EE        i2___wmul@multiplier 0001                  i2u1220_40 0B7E  
                i2u1300_40 1448                  i2u1220_47 0B74                  i2u1213_40 0A44  
                i2u1212_48 09CE                  i2u1213_47 0A3A                  i2u1214_40 0A6C  
                i2u1214_47 0A62                  i2u1231_40 0D4A                  i2u1231_47 0D40  
                i2u1216_40 0AC2                  i2u1216_47 0AB8                  i2u1224_48 0BD0  
                i2u1217_40 0AFC                  i2u1217_47 0AF2                  i2u1330_47 34F0  
                i2u1307_40 1516                  i2u1331_47 3512                  i2u1228_40 0C7E  
                i2u1227_48 0C4C                  i2u1332_47 351C                  i2u1228_47 0C74  
                i2u1261_40 11DA                  i2u1229_40 0CC0                  i2u1261_47 11D0  
                i2u1229_47 0CB6                  i2u1253_48 0FC6                  i2u1318_40 1712  
                i2u1246_48 0EDA                  i2u1329_47 34E6                  i2u1257_48 104A  
                i2u1249_48 0F4C                  i2u1259_48 1166                  i2u1293_40 12FA  
   __end_of_manualDateTime FF0F  __size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A  
          ___lldiv@divisor 0084            ___lldiv@counter 008C                 ??_set_time 0083  
                  printf@f 00A2           I2C_Master_Init@c 008D           I2C_Master_Read@a 0081  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE                    strcmp@r 0085  
                _PROX1_PIN 0075                  _PROX2_PIN 0079               _display_menu 17BA  
               _update_RTC 2B0A                 _update_lcd 2DAA                  i2___awmod 327C  
        i2___lwdiv@divisor 0003                  i2___lwdiv 3576                  i2___lwmod 365C  
        i2___lwdiv@counter 0007                  i2__doprnt 0996                  i2_lcdInst 3864  
                i2_isdigit 37E6              ?_update_state 0001              __pidataBIGRAM 237A  
           __end_of___wmul 36D4       __size_ofi2_lcdNibble 0056              __pidataCOMRAM 388A  
            i2lcdInst@data 0003           i2___wmul@product 0005             __end_of_printf 3612  
              update_RTC@i 008A             __end_of_strcmp 34CE             __end_of_strcpy 373C  
           update_lcd@flag 00AB        start_initialization 3172                ?_keypressed 0001  
        __size_ofi2___wmul 0026                  i2printf@f 0023                 ?i2___awmod 0001  
               ?i2___lwdiv 0001                 ?i2___lwmod 0008          __size_ofi2_printf 0036  
               ?i2__doprnt 000D          ??_I2C_Master_Init 0091          ??_I2C_Master_Read 0081  
        ??_I2C_Master_Wait 0080                 ?i2_lcdInst 0001          ??_I2C_Master_Stop 0081  
               ?i2_isdigit 0001             ??_update_state 00B2                   ??___wmul 0084  
              __doprnt@idx 0096                __doprnt@len 0098                __doprnt@val 009C  
              __pdataBANK0 00DF           __CFG_LPT1OSC$OFF 000000                   ??_printf 00A4  
                 ??_strcmp 0084                   ??_strcpy 0084                __pbssCOMRAM 003E  
              ?_update_RTC 0001      __size_of_read_sensors 0288              __pcstackBANK0 0080  
            __pcstackBANK1 0164                ?_update_lcd 0001          i2___lwmod@divisor 000A  
        __size_of__measure 043C          i2___lwmod@counter 000C                   ?i2_putch 0001  
                __doprnt@c 00A1                  __doprnt@f 008E                  __pnvBANK1 016E  
         _I2C_Master_Start 3882           _I2C_Master_Write 3870           ___lwdiv@dividend 0080  
        __CFG_CCP2MX$PORTC 000000        __size_of_keypressed 17B2                  __pintcode 0008  
            __pmediumconst FEE4                  _lcdNibble 32EC                   ?___awdiv 0080  
                 ?___awmod 0080                   ?___lldiv 0080                   ?___lwdiv 0080  
                 ?___lwmod 0087          __size_of_set_time 0062                   ?__doprnt 008C  
             _read_sensors 264A                   ?_lcdInst 0001                  _eskaNoCap 00CD  
                 ?_readADC 0001                   ?_initLCD 0001          _display_menu$1147 016A  
                 ?_isdigit 0001                  _hexpowers FF00                  _menuIndex 00F5  
         ___lwdiv@quotient 0085                ??i2___awmod 0005                   ?_sprintf 00A2  
              ??i2___lwdiv 0005                  _ndisplay0 0140                ??i2___lwmod 000C  
                _ndisplay1 0152             __size_of_putch 0016                ??i2__doprnt 0013  
              _creditIndex 00E9                ??i2_lcdInst 0003             ___wmul@product 0084  
                 _LATDbits 000F8C          _DIST_THRESHOLD_HI 00DF                ??i2_isdigit 0001  
      __size_of_update_RTC 016C           __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001  
      __size_of_update_lcd 00FE                 _ADCON0bits 000FC2          ___wmul@multiplier 0080  
                _startTime 010E                   i2___wmul 37C0              lcdNibble@data 0081  
            lcdNibble@temp 0080                   i2_printf 36D4       __end_of_update_state 237A  
      I2C_Master_Read@temp 0082                _bottle_type 00C9                  copy_data0 3186  
                copy_data1 31AA                  copy_data2 31CA         i2___awmod@dividend 0001  
         __size_ofi2_putch 000C         keypressed@keypress 003D                   __Hrparam 0000  
                 __Lrparam 0000         __CFG_BOREN$SBORDIS 000000           __size_of___awdiv 00BE  
         __size_of___awmod 00A2      i2___wmul@multiplicand 0003           __size_of___lldiv 00BC  
         __size_of___lwdiv 0078           __size_of___lwmod 0062             readADC@channel 0081  
         __size_of__doprnt 0984    __size_of_update_display 0134                _isdigit$760 0081  
          _putch$intlevel0 3824   display_menu@menuIndexPtr 016C           __size_of_lcdInst 0010  
                 __measure 1C54            _I2C_Master_Init 3418           __size_of_readADC 002C  
          _I2C_Master_Read 373C           __size_of_initLCD 004A            _I2C_Master_Wait 3834  
          _I2C_Master_Stop 387A                 _DIST1_TRIG 0076               ??_keypressed 002B  
         __size_of_isdigit 002A                   _endIndex 00ED            ___lwdiv@divisor 0082  
          ___lwdiv@counter 0084                   __ptext10 0012                   __ptext11 381E  
                 __ptext20 369E                   __ptext12 3796                   __ptext21 33B6  
                 __ptext13 3354                   __ptext30 32EC                   __ptext22 3870  
                 __ptext14 3204                   __ptext31 3418                   __ptext23 387A  
                 __ptext15 2B0A                   __ptext40 3576                   __ptext32 2F66  
                 __ptext24 3882                   __ptext16 373C                   __ptext41 3864  
                 __ptext25 3834                   __ptext17 28D2                   __ptext42 34CE  
                 __ptext34 36D4                   __ptext26 264A                   __ptext18 1C54  
                 __ptext43 327C                   __ptext35 0996                   __ptext27 376A  
                 __ptext19 30D0                   __ptext44 0000                   __ptext36 3858  
                 __ptext28 3612                   __ptext37 37E6                   __ptext29 3848  
                 __ptext38 37C0                   __ptext39 365C                   _display0 011C  
                 _eskaWCap 00CF                   _display1 012E           __size_of_sprintf 0052  
               strcpy@from 0082                   _logIndex 00F3              __size_of_main 00AE  
                 _menuSize 00F7              __size_of_sort 0238            i2__doprnt@width 0020  
                set_time@i 0083                   _timeDiff 00D9                   _set_time 33B6  
            ??i2_lcdNibble 0001                ??_lcdNibble 0080         __end_of_keypressed 17BA  
                 int$flags 007A                   _yopNoCap 00DB          i2___awmod@divisor 0003  
                putch@data 0082          i2___awmod@counter 0005   __end_of_I2C_Master_Start 388A  
 __end_of_I2C_Master_Write 387A                 _INTCONbits 000FF2               ??_update_RTC 0086  
             ??_update_lcd 00AA                   isdigit@c 0082                   intlevel2 0000  
                sprintf@ap 00AC                  sprintf@pb 00AE                  sprintf@wh 00A2  
          _measure_counter 00D1           ___lwmod@dividend 0087           ___lldiv@dividend 0080  
  display_menu@menuSizePtr 0166             __measure@i_482 008B             __measure@i_483 008C  
           __measure@i_484 008D             __measure@i_485 008E             __measure@i_486 008F  
           __measure@i_487 0090             __measure@i_488 0091         __end_of_update_RTC 2C76  
                 printf@ap 00A4                   printf@pb 00A6         __end_of_update_lcd 2EA8  
  __end_of_I2C_Master_Init 3478    __end_of_I2C_Master_Read 376A    __end_of_I2C_Master_Wait 3848  
  __end_of_I2C_Master_Stop 3882                lcdInst@data 0082        __end_ofi2_lcdNibble 3524  
                 sprintf@f 00A4      __size_of_update_state 02EA                   strcmp@s1 0080  
                 strcmp@s2 0082           ___lldiv@quotient 0088          I2C_Master_Write@d 0081  
          ___lwmod@divisor 0089                   strcpy@cp 0084                   strcpy@to 0080  
          ___lwmod@counter 008B              read_sensors@i 0086       display_menu@selector 0164  
