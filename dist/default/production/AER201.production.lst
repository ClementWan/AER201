

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Mar 07 14:29:19 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           ; Version 1.40
    72                           ; Generated 01/12/2016 GMT
    73                           ; 
    74                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F4620 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     
   106                           	psect	idataCOMRAM
   107  003DDE                     __pidataCOMRAM:
   108                           	opt stack 0
   109                           
   110                           ;initializer for _sortSize
   111  003DDE  0005               	dw	5
   112                           
   113                           ;initializer for _DIST1_TRIG
   114  003DE0  05                 	db	5
   115                           
   116                           ;initializer for _IR1_PIN
   117  003DE1  01                 	db	1
   118                           
   119                           ;initializer for _IR2_PIN
   120  003DE2  02                 	db	2
   121                           
   122                           ;initializer for _PROX2_PIN
   123  003DE3  02                 	db	2
   124                           
   125                           	psect	idataBIGRAM
   126  002B88                     __pidataBIGRAM:
   127                           	opt stack 0
   128                           
   129                           ;initializer for _menu
   130  002B88  31                 	db	49
   131  002B89  2E                 	db	46
   132  002B8A  20                 	db	32
   133  002B8B  53                 	db	83
   134  002B8C  6F                 	db	111
   135  002B8D  72                 	db	114
   136  002B8E  74                 	db	116
   137  002B8F  20                 	db	32
   138  002B90  20                 	db	32
   139  002B91  20                 	db	32
   140  002B92  20                 	db	32
   141  002B93  20                 	db	32
   142  002B94  20                 	db	32
   143  002B95  20                 	db	32
   144  002B96  20                 	db	32
   145  002B97  00                 	db	0
   146  002B98  00                 	db	0
   147  002B99  00                 	db	0
   148  002B9A  32                 	db	50
   149  002B9B  2E                 	db	46
   150  002B9C  20                 	db	32
   151  002B9D  50                 	db	80
   152  002B9E  20                 	db	32
   153  002B9F  4C                 	db	76
   154  002BA0  6F                 	db	111
   155  002BA1  67                 	db	103
   156  002BA2  73                 	db	115
   157  002BA3  20                 	db	32
   158  002BA4  20                 	db	32
   159  002BA5  20                 	db	32
   160  002BA6  20                 	db	32
   161  002BA7  20                 	db	32
   162  002BA8  20                 	db	32
   163  002BA9  00                 	db	0
   164  002BAA  00                 	db	0
   165  002BAB  00                 	db	0
   166  002BAC  33                 	db	51
   167  002BAD  2E                 	db	46
   168  002BAE  20                 	db	32
   169  002BAF  43                 	db	67
   170  002BB0  72                 	db	114
   171  002BB1  65                 	db	101
   172  002BB2  64                 	db	100
   173  002BB3  69                 	db	105
   174  002BB4  74                 	db	116
   175  002BB5  73                 	db	115
   176  002BB6  20                 	db	32
   177  002BB7  20                 	db	32
   178  002BB8  20                 	db	32
   179  002BB9  20                 	db	32
   180  002BBA  20                 	db	32
   181  002BBB  00                 	db	0
   182  002BBC  00                 	db	0
   183  002BBD  00                 	db	0
   184  002BBE  00                 	db	0
   185  002BBF  00                 	db	0
   186  002BC0  00                 	db	0
   187  002BC1  00                 	db	0
   188  002BC2  00                 	db	0
   189  002BC3  00                 	db	0
   190  002BC4  00                 	db	0
   191  002BC5  00                 	db	0
   192  002BC6  00                 	db	0
   193  002BC7  00                 	db	0
   194  002BC8  00                 	db	0
   195  002BC9  00                 	db	0
   196  002BCA  00                 	db	0
   197  002BCB  00                 	db	0
   198  002BCC  00                 	db	0
   199  002BCD  00                 	db	0
   200  002BCE  00                 	db	0
   201  002BCF  00                 	db	0
   202  002BD0  00                 	db	0
   203  002BD1  00                 	db	0
   204  002BD2  00                 	db	0
   205  002BD3  00                 	db	0
   206  002BD4  00                 	db	0
   207  002BD5  00                 	db	0
   208  002BD6  00                 	db	0
   209  002BD7  00                 	db	0
   210  002BD8  00                 	db	0
   211  002BD9  00                 	db	0
   212  002BDA  00                 	db	0
   213  002BDB  00                 	db	0
   214  002BDC  00                 	db	0
   215  002BDD  00                 	db	0
   216  002BDE  00                 	db	0
   217  002BDF  00                 	db	0
   218  002BE0  00                 	db	0
   219  002BE1  00                 	db	0
   220  002BE2  00                 	db	0
   221  002BE3  00                 	db	0
   222  002BE4  00                 	db	0
   223  002BE5  00                 	db	0
   224  002BE6  00                 	db	0
   225  002BE7  00                 	db	0
   226  002BE8  00                 	db	0
   227  002BE9  00                 	db	0
   228  002BEA  00                 	db	0
   229  002BEB  00                 	db	0
   230  002BEC  00                 	db	0
   231  002BED  00                 	db	0
   232  002BEE  00                 	db	0
   233  002BEF  00                 	db	0
   234  002BF0  00                 	db	0
   235  002BF1  00                 	db	0
   236  002BF2  00                 	db	0
   237  002BF3  00                 	db	0
   238  002BF4  00                 	db	0
   239  002BF5  00                 	db	0
   240  002BF6  00                 	db	0
   241  002BF7  00                 	db	0
   242  002BF8  00                 	db	0
   243  002BF9  00                 	db	0
   244  002BFA  00                 	db	0
   245  002BFB  00                 	db	0
   246  002BFC  00                 	db	0
   247  002BFD  00                 	db	0
   248  002BFE  00                 	db	0
   249  002BFF  00                 	db	0
   250  002C00  00                 	db	0
   251  002C01  00                 	db	0
   252  002C02  00                 	db	0
   253  002C03  00                 	db	0
   254  002C04  00                 	db	0
   255  002C05  00                 	db	0
   256  002C06  00                 	db	0
   257  002C07  00                 	db	0
   258  002C08  00                 	db	0
   259  002C09  00                 	db	0
   260  002C0A  00                 	db	0
   261  002C0B  00                 	db	0
   262  002C0C  00                 	db	0
   263  002C0D  00                 	db	0
   264  002C0E  00                 	db	0
   265  002C0F  00                 	db	0
   266  002C10  00                 	db	0
   267  002C11  00                 	db	0
   268  002C12  00                 	db	0
   269  002C13  00                 	db	0
   270  002C14  00                 	db	0
   271  002C15  00                 	db	0
   272  002C16  00                 	db	0
   273  002C17  00                 	db	0
   274  002C18  00                 	db	0
   275  002C19  00                 	db	0
   276  002C1A  00                 	db	0
   277  002C1B  00                 	db	0
   278  002C1C  00                 	db	0
   279  002C1D  00                 	db	0
   280  002C1E  00                 	db	0
   281  002C1F  00                 	db	0
   282  002C20  00                 	db	0
   283  002C21  00                 	db	0
   284  002C22  00                 	db	0
   285  002C23  00                 	db	0
   286  002C24  00                 	db	0
   287  002C25  00                 	db	0
   288  002C26  00                 	db	0
   289  002C27  00                 	db	0
   290  002C28  00                 	db	0
   291  002C29  00                 	db	0
   292  002C2A  00                 	db	0
   293  002C2B  00                 	db	0
   294  002C2C  00                 	db	0
   295  002C2D  00                 	db	0
   296  002C2E  00                 	db	0
   297  002C2F  00                 	db	0
   298  002C30  00                 	db	0
   299  002C31  00                 	db	0
   300  002C32  00                 	db	0
   301  002C33  00                 	db	0
   302  002C34  00                 	db	0
   303  002C35  00                 	db	0
   304  002C36  00                 	db	0
   305  002C37  00                 	db	0
   306  002C38  00                 	db	0
   307  002C39  00                 	db	0
   308  002C3A  00                 	db	0
   309  002C3B  00                 	db	0
   310  002C3C  65                 	db	101
   311  002C3D  76                 	db	118
   312  002C3E  65                 	db	101
   313  002C3F  6E                 	db	110
   314  002C40  74                 	db	116
   315  002C41  31                 	db	49
   316  002C42  20                 	db	32
   317  002C43  20                 	db	32
   318  002C44  20                 	db	32
   319  002C45  20                 	db	32
   320  002C46  20                 	db	32
   321  002C47  20                 	db	32
   322  002C48  20                 	db	32
   323  002C49  20                 	db	32
   324  002C4A  20                 	db	32
   325  002C4B  00                 	db	0
   326  002C4C  00                 	db	0
   327  002C4D  00                 	db	0
   328  002C4E  65                 	db	101
   329  002C4F  76                 	db	118
   330  002C50  65                 	db	101
   331  002C51  6E                 	db	110
   332  002C52  74                 	db	116
   333  002C53  32                 	db	50
   334  002C54  20                 	db	32
   335  002C55  20                 	db	32
   336  002C56  20                 	db	32
   337  002C57  20                 	db	32
   338  002C58  20                 	db	32
   339  002C59  20                 	db	32
   340  002C5A  20                 	db	32
   341  002C5B  20                 	db	32
   342  002C5C  20                 	db	32
   343  002C5D  00                 	db	0
   344  002C5E  00                 	db	0
   345  002C5F  00                 	db	0
   346  002C60  65                 	db	101
   347  002C61  76                 	db	118
   348  002C62  65                 	db	101
   349  002C63  6E                 	db	110
   350  002C64  74                 	db	116
   351  002C65  33                 	db	51
   352  002C66  20                 	db	32
   353  002C67  20                 	db	32
   354  002C68  20                 	db	32
   355  002C69  20                 	db	32
   356  002C6A  20                 	db	32
   357  002C6B  20                 	db	32
   358  002C6C  20                 	db	32
   359  002C6D  20                 	db	32
   360  002C6E  20                 	db	32
   361  002C6F  00                 	db	0
   362  002C70  00                 	db	0
   363  002C71  00                 	db	0
   364  002C72  00                 	db	0
   365  002C73  00                 	db	0
   366  002C74  00                 	db	0
   367  002C75  00                 	db	0
   368  002C76  00                 	db	0
   369  002C77  00                 	db	0
   370  002C78  00                 	db	0
   371  002C79  00                 	db	0
   372  002C7A  00                 	db	0
   373  002C7B  00                 	db	0
   374  002C7C  00                 	db	0
   375  002C7D  00                 	db	0
   376  002C7E  00                 	db	0
   377  002C7F  00                 	db	0
   378  002C80  00                 	db	0
   379  002C81  00                 	db	0
   380  002C82  00                 	db	0
   381  002C83  00                 	db	0
   382  002C84  00                 	db	0
   383  002C85  00                 	db	0
   384  002C86  00                 	db	0
   385  002C87  00                 	db	0
   386  002C88  00                 	db	0
   387  002C89  00                 	db	0
   388  002C8A  00                 	db	0
   389  002C8B  00                 	db	0
   390  002C8C  00                 	db	0
   391  002C8D  00                 	db	0
   392  002C8E  00                 	db	0
   393  002C8F  00                 	db	0
   394  002C90  00                 	db	0
   395  002C91  00                 	db	0
   396  002C92  00                 	db	0
   397  002C93  00                 	db	0
   398  002C94  00                 	db	0
   399  002C95  00                 	db	0
   400  002C96  00                 	db	0
   401  002C97  00                 	db	0
   402  002C98  00                 	db	0
   403  002C99  00                 	db	0
   404  002C9A  00                 	db	0
   405  002C9B  00                 	db	0
   406  002C9C  00                 	db	0
   407  002C9D  00                 	db	0
   408  002C9E  00                 	db	0
   409  002C9F  00                 	db	0
   410  002CA0  00                 	db	0
   411  002CA1  00                 	db	0
   412  002CA2  00                 	db	0
   413  002CA3  00                 	db	0
   414  002CA4  00                 	db	0
   415  002CA5  00                 	db	0
   416  002CA6  00                 	db	0
   417  002CA7  00                 	db	0
   418  002CA8  00                 	db	0
   419  002CA9  00                 	db	0
   420  002CAA  00                 	db	0
   421  002CAB  00                 	db	0
   422  002CAC  00                 	db	0
   423  002CAD  00                 	db	0
   424  002CAE  00                 	db	0
   425  002CAF  00                 	db	0
   426  002CB0  00                 	db	0
   427  002CB1  00                 	db	0
   428  002CB2  00                 	db	0
   429  002CB3  00                 	db	0
   430  002CB4  00                 	db	0
   431  002CB5  00                 	db	0
   432  002CB6  00                 	db	0
   433  002CB7  00                 	db	0
   434  002CB8  00                 	db	0
   435  002CB9  00                 	db	0
   436  002CBA  00                 	db	0
   437  002CBB  00                 	db	0
   438  002CBC  00                 	db	0
   439  002CBD  00                 	db	0
   440  002CBE  00                 	db	0
   441  002CBF  00                 	db	0
   442  002CC0  00                 	db	0
   443  002CC1  00                 	db	0
   444  002CC2  00                 	db	0
   445  002CC3  00                 	db	0
   446  002CC4  00                 	db	0
   447  002CC5  00                 	db	0
   448  002CC6  00                 	db	0
   449  002CC7  00                 	db	0
   450  002CC8  00                 	db	0
   451  002CC9  00                 	db	0
   452  002CCA  00                 	db	0
   453  002CCB  00                 	db	0
   454  002CCC  00                 	db	0
   455  002CCD  00                 	db	0
   456  002CCE  00                 	db	0
   457  002CCF  00                 	db	0
   458  002CD0  00                 	db	0
   459  002CD1  00                 	db	0
   460  002CD2  00                 	db	0
   461  002CD3  00                 	db	0
   462  002CD4  00                 	db	0
   463  002CD5  00                 	db	0
   464  002CD6  00                 	db	0
   465  002CD7  00                 	db	0
   466  002CD8  00                 	db	0
   467  002CD9  00                 	db	0
   468  002CDA  00                 	db	0
   469  002CDB  00                 	db	0
   470  002CDC  00                 	db	0
   471  002CDD  00                 	db	0
   472  002CDE  00                 	db	0
   473  002CDF  00                 	db	0
   474  002CE0  00                 	db	0
   475  002CE1  00                 	db	0
   476  002CE2  00                 	db	0
   477  002CE3  00                 	db	0
   478  002CE4  00                 	db	0
   479  002CE5  00                 	db	0
   480  002CE6  00                 	db	0
   481  002CE7  00                 	db	0
   482  002CE8  00                 	db	0
   483  002CE9  00                 	db	0
   484  002CEA  00                 	db	0
   485  002CEB  00                 	db	0
   486  002CEC  00                 	db	0
   487  002CED  00                 	db	0
   488  002CEE  00                 	db	0
   489  002CEF  00                 	db	0
   490  002CF0  4D                 	db	77
   491  002CF1  69                 	db	105
   492  002CF2  63                 	db	99
   493  002CF3  72                 	db	114
   494  002CF4  6F                 	db	111
   495  002CF5  63                 	db	99
   496  002CF6  6F                 	db	111
   497  002CF7  6E                 	db	110
   498  002CF8  74                 	db	116
   499  002CF9  72                 	db	114
   500  002CFA  6F                 	db	111
   501  002CFB  6C                 	db	108
   502  002CFC  3A                 	db	58
   503  002CFD  20                 	db	32
   504  002CFE  20                 	db	32
   505  002CFF  00                 	db	0
   506  002D00  00                 	db	0
   507  002D01  00                 	db	0
   508  002D02  43                 	db	67
   509  002D03  6C                 	db	108
   510  002D04  65                 	db	101
   511  002D05  6D                 	db	109
   512  002D06  65                 	db	101
   513  002D07  6E                 	db	110
   514  002D08  74                 	db	116
   515  002D09  20                 	db	32
   516  002D0A  57                 	db	87
   517  002D0B  61                 	db	97
   518  002D0C  6E                 	db	110
   519  002D0D  20                 	db	32
   520  002D0E  20                 	db	32
   521  002D0F  20                 	db	32
   522  002D10  20                 	db	32
   523  002D11  00                 	db	0
   524  002D12  00                 	db	0
   525  002D13  00                 	db	0
   526  002D14  43                 	db	67
   527  002D15  69                 	db	105
   528  002D16  72                 	db	114
   529  002D17  63                 	db	99
   530  002D18  75                 	db	117
   531  002D19  69                 	db	105
   532  002D1A  74                 	db	116
   533  002D1B  73                 	db	115
   534  002D1C  3A                 	db	58
   535  002D1D  20                 	db	32
   536  002D1E  20                 	db	32
   537  002D1F  20                 	db	32
   538  002D20  20                 	db	32
   539  002D21  20                 	db	32
   540  002D22  20                 	db	32
   541  002D23  00                 	db	0
   542  002D24  00                 	db	0
   543  002D25  00                 	db	0
   544  002D26  4A                 	db	74
   545  002D27  75                 	db	117
   546  002D28  73                 	db	115
   547  002D29  74                 	db	116
   548  002D2A  69                 	db	105
   549  002D2B  6E                 	db	110
   550  002D2C  20                 	db	32
   551  002D2D  51                 	db	81
   552  002D2E  75                 	db	117
   553  002D2F  20                 	db	32
   554  002D30  20                 	db	32
   555  002D31  20                 	db	32
   556  002D32  20                 	db	32
   557  002D33  20                 	db	32
   558  002D34  20                 	db	32
   559  002D35  00                 	db	0
   560  002D36  00                 	db	0
   561  002D37  00                 	db	0
   562  002D38  45                 	db	69
   563  002D39  6C                 	db	108
   564  002D3A  65                 	db	101
   565  002D3B  63                 	db	99
   566  002D3C  74                 	db	116
   567  002D3D  72                 	db	114
   568  002D3E  6F                 	db	111
   569  002D3F  6D                 	db	109
   570  002D40  65                 	db	101
   571  002D41  63                 	db	99
   572  002D42  68                 	db	104
   573  002D43  3A                 	db	58
   574  002D44  20                 	db	32
   575  002D45  20                 	db	32
   576  002D46  20                 	db	32
   577  002D47  00                 	db	0
   578  002D48  00                 	db	0
   579  002D49  00                 	db	0
   580  002D4A  50                 	db	80
   581  002D4B  65                 	db	101
   582  002D4C  74                 	db	116
   583  002D4D  65                 	db	101
   584  002D4E  72                 	db	114
   585  002D4F  20                 	db	32
   586  002D50  46                 	db	70
   587  002D51  65                 	db	101
   588  002D52  6E                 	db	110
   589  002D53  67                 	db	103
   590  002D54  20                 	db	32
   591  002D55  20                 	db	32
   592  002D56  20                 	db	32
   593  002D57  20                 	db	32
   594  002D58  20                 	db	32
   595  002D59  00                 	db	0
   596  002D5A  00                 	db	0
   597  002D5B  00                 	db	0
   598  002D5C  00                 	db	0
   599  002D5D  00                 	db	0
   600  002D5E  00                 	db	0
   601  002D5F  00                 	db	0
   602  002D60  00                 	db	0
   603  002D61  00                 	db	0
   604  002D62  00                 	db	0
   605  002D63  00                 	db	0
   606  002D64  00                 	db	0
   607  002D65  00                 	db	0
   608  002D66  00                 	db	0
   609  002D67  00                 	db	0
   610  002D68  00                 	db	0
   611  002D69  00                 	db	0
   612  002D6A  00                 	db	0
   613  002D6B  00                 	db	0
   614  002D6C  00                 	db	0
   615  002D6D  00                 	db	0
   616  002D6E  00                 	db	0
   617  002D6F  00                 	db	0
   618  002D70  00                 	db	0
   619  002D71  00                 	db	0
   620  002D72  00                 	db	0
   621  002D73  00                 	db	0
   622  002D74  00                 	db	0
   623  002D75  00                 	db	0
   624  002D76  00                 	db	0
   625  002D77  00                 	db	0
   626  002D78  00                 	db	0
   627  002D79  00                 	db	0
   628  002D7A  00                 	db	0
   629  002D7B  00                 	db	0
   630  002D7C  00                 	db	0
   631  002D7D  00                 	db	0
   632  002D7E  00                 	db	0
   633  002D7F  00                 	db	0
   634  002D80  00                 	db	0
   635  002D81  00                 	db	0
   636  002D82  00                 	db	0
   637  002D83  00                 	db	0
   638  002D84  00                 	db	0
   639  002D85  00                 	db	0
   640  002D86  00                 	db	0
   641  002D87  00                 	db	0
   642  002D88  00                 	db	0
   643  002D89  00                 	db	0
   644  002D8A  00                 	db	0
   645  002D8B  00                 	db	0
   646  002D8C  00                 	db	0
   647  002D8D  00                 	db	0
   648  002D8E  00                 	db	0
   649  002D8F  00                 	db	0
   650  002D90  00                 	db	0
   651  002D91  00                 	db	0
   652  002D92  00                 	db	0
   653  002D93  00                 	db	0
   654  002D94  00                 	db	0
   655  002D95  00                 	db	0
   656  002D96  00                 	db	0
   657  002D97  00                 	db	0
   658  002D98  00                 	db	0
   659  002D99  00                 	db	0
   660  002D9A  00                 	db	0
   661  002D9B  00                 	db	0
   662  002D9C  00                 	db	0
   663  002D9D  00                 	db	0
   664  002D9E  00                 	db	0
   665  002D9F  00                 	db	0
   666  002DA0  00                 	db	0
   667  002DA1  00                 	db	0
   668  002DA2  00                 	db	0
   669  002DA3  00                 	db	0
   670  002DA4  00                 	db	0
   671  002DA5  00                 	db	0
   672  002DA6  00                 	db	0
   673  002DA7  00                 	db	0
   674  002DA8  00                 	db	0
   675  002DA9  00                 	db	0
   676  002DAA  00                 	db	0
   677  002DAB  00                 	db	0
   678  002DAC  00                 	db	0
   679  002DAD  00                 	db	0
   680  002DAE  00                 	db	0
   681  002DAF  00                 	db	0
   682  002DB0  00                 	db	0
   683  002DB1  00                 	db	0
   684  002DB2  00                 	db	0
   685  002DB3  00                 	db	0
   686  002DB4  00                 	db	0
   687  002DB5  00                 	db	0
   688  002DB6  00                 	db	0
   689  002DB7  00                 	db	0
   690  002DB8  00                 	db	0
   691  002DB9  00                 	db	0
   692  002DBA  00                 	db	0
   693  002DBB  00                 	db	0
   694  002DBC  00                 	db	0
   695  002DBD  00                 	db	0
   696  002DBE  00                 	db	0
   697  002DBF  00                 	db	0
   698  002DC0  00                 	db	0
   699  002DC1  00                 	db	0
   700  002DC2  00                 	db	0
   701  002DC3  00                 	db	0
   702  002DC4  00                 	db	0
   703  002DC5  00                 	db	0
   704  002DC6  00                 	db	0
   705  002DC7  00                 	db	0
   706  002DC8  00                 	db	0
   707  002DC9  00                 	db	0
   708  002DCA  00                 	db	0
   709  002DCB  00                 	db	0
   710  002DCC  00                 	db	0
   711  002DCD  00                 	db	0
   712  002DCE  00                 	db	0
   713  002DCF  00                 	db	0
   714  002DD0  00                 	db	0
   715  002DD1  00                 	db	0
   716  002DD2  00                 	db	0
   717  002DD3  00                 	db	0
   718  002DD4  00                 	db	0
   719  002DD5  00                 	db	0
   720  002DD6  00                 	db	0
   721  002DD7  00                 	db	0
   722  002DD8  00                 	db	0
   723  002DD9  00                 	db	0
   724  002DDA  00                 	db	0
   725  002DDB  00                 	db	0
   726  002DDC  00                 	db	0
   727  002DDD  00                 	db	0
   728  002DDE  00                 	db	0
   729  002DDF  00                 	db	0
   730  002DE0  00                 	db	0
   731  002DE1  00                 	db	0
   732  002DE2  00                 	db	0
   733  002DE3  00                 	db	0
   734  002DE4  00                 	db	0
   735  002DE5  00                 	db	0
   736  002DE6  00                 	db	0
   737  002DE7  00                 	db	0
   738  002DE8  00                 	db	0
   739  002DE9  00                 	db	0
   740  002DEA  00                 	db	0
   741  002DEB  00                 	db	0
   742  002DEC  00                 	db	0
   743  002DED  00                 	db	0
   744  002DEE  00                 	db	0
   745  002DEF  00                 	db	0
   746  002DF0  00                 	db	0
   747  002DF1  00                 	db	0
   748  002DF2  00                 	db	0
   749  002DF3  00                 	db	0
   750  002DF4  00                 	db	0
   751  002DF5  00                 	db	0
   752  002DF6  00                 	db	0
   753  002DF7  00                 	db	0
   754  002DF8  00                 	db	0
   755  002DF9  00                 	db	0
   756  002DFA  00                 	db	0
   757  002DFB  00                 	db	0
   758  002DFC  00                 	db	0
   759  002DFD  00                 	db	0
   760  002DFE  00                 	db	0
   761  002DFF  00                 	db	0
   762  002E00  00                 	db	0
   763  002E01  00                 	db	0
   764  002E02  00                 	db	0
   765  002E03  00                 	db	0
   766  002E04  00                 	db	0
   767  002E05  00                 	db	0
   768  002E06  00                 	db	0
   769  002E07  00                 	db	0
   770  002E08  00                 	db	0
   771  002E09  00                 	db	0
   772  002E0A  00                 	db	0
   773  002E0B  00                 	db	0
   774  002E0C  00                 	db	0
   775  002E0D  00                 	db	0
   776  002E0E  00                 	db	0
   777  002E0F  00                 	db	0
   778  002E10  00                 	db	0
   779  002E11  00                 	db	0
   780  002E12  00                 	db	0
   781  002E13  00                 	db	0
   782  002E14  00                 	db	0
   783  002E15  00                 	db	0
   784  002E16  00                 	db	0
   785  002E17  00                 	db	0
   786  002E18  00                 	db	0
   787  002E19  00                 	db	0
   788  002E1A  00                 	db	0
   789  002E1B  00                 	db	0
   790  002E1C  00                 	db	0
   791  002E1D  00                 	db	0
   792  002E1E  00                 	db	0
   793  002E1F  00                 	db	0
   794  002E20  00                 	db	0
   795  002E21  00                 	db	0
   796  002E22  00                 	db	0
   797  002E23  00                 	db	0
   798  002E24  00                 	db	0
   799  002E25  00                 	db	0
   800  002E26  00                 	db	0
   801  002E27  00                 	db	0
   802  002E28  00                 	db	0
   803  002E29  00                 	db	0
   804  002E2A  00                 	db	0
   805  002E2B  00                 	db	0
   806  002E2C  00                 	db	0
   807  002E2D  00                 	db	0
   808  002E2E  00                 	db	0
   809  002E2F  00                 	db	0
   810  002E30  00                 	db	0
   811  002E31  00                 	db	0
   812  002E32  00                 	db	0
   813  002E33  00                 	db	0
   814  002E34  00                 	db	0
   815  002E35  00                 	db	0
   816  002E36  00                 	db	0
   817  002E37  00                 	db	0
   818  002E38  00                 	db	0
   819  002E39  00                 	db	0
   820  002E3A  00                 	db	0
   821  002E3B  00                 	db	0
   822  002E3C  00                 	db	0
   823  002E3D  00                 	db	0
   824  002E3E  00                 	db	0
   825  002E3F  00                 	db	0
   826  002E40  00                 	db	0
   827  002E41  00                 	db	0
   828  002E42  00                 	db	0
   829  002E43  00                 	db	0
   830  002E44  00                 	db	0
   831  002E45  00                 	db	0
   832  002E46  00                 	db	0
   833  002E47  00                 	db	0
   834  002E48  00                 	db	0
   835  002E49  00                 	db	0
   836  002E4A  00                 	db	0
   837  002E4B  00                 	db	0
   838  002E4C  00                 	db	0
   839  002E4D  00                 	db	0
   840  002E4E  00                 	db	0
   841  002E4F  00                 	db	0
   842  002E50  00                 	db	0
   843  002E51  00                 	db	0
   844  002E52  00                 	db	0
   845  002E53  00                 	db	0
   846  002E54  00                 	db	0
   847  002E55  00                 	db	0
   848  002E56  00                 	db	0
   849  002E57  00                 	db	0
   850                           
   851                           	psect	idataBANK0
   852  003D56                     __pidataBANK0:
   853                           	opt stack 0
   854                           
   855                           ;initializer for _DIST_THRESHOLD_HI
   856  003D56  02FF               	dw	767
   857                           
   858                           ;initializer for _DIST_THRESHOLD_LOW
   859  003D58  00FF               	dw	255
   860                           
   861                           ;initializer for _IR_THRESHOLD_HI
   862  003D5A  0028               	dw	40
   863                           
   864                           ;initializer for _IR_THRESHOLD_LOW
   865  003D5C  0023               	dw	35
   866                           
   867                           ;initializer for _sortIndex
   868  003D5E  0001               	dw	1
   869                           
   870                           ;initializer for _nstate
   871  003D60  72                 	db	114
   872                           
   873                           ;initializer for _state
   874  003D61  72                 	db	114
   875                           
   876                           ;initializer for _creditIndex
   877  003D62  0001               	dw	1
   878                           
   879                           ;initializer for _creditSize
   880  003D64  0005               	dw	5
   881                           
   882                           ;initializer for _endIndex
   883  003D66  0001               	dw	1
   884                           
   885                           ;initializer for _endSize
   886  003D68  0003               	dw	3
   887                           
   888                           ;initializer for _events
   889  003D6A  0002               	dw	2
   890                           
   891                           ;initializer for _logIndex
   892  003D6C  0001               	dw	1
   893                           
   894                           ;initializer for _menuIndex
   895  003D6E  0001               	dw	1
   896                           
   897                           ;initializer for _menuSize
   898  003D70  0003               	dw	3
   899                           
   900                           	psect	mediumconst
   901  00FE56                     __pmediumconst:
   902                           	opt stack 0
   903  00FE56  00                 	db	0
   904  00FE57                     _keys:
   905                           	opt stack 0
   906  00FE57  31                 	db	49
   907  00FE58  32                 	db	50
   908  00FE59  33                 	db	51
   909  00FE5A  41                 	db	65
   910  00FE5B  34                 	db	52
   911  00FE5C  35                 	db	53
   912  00FE5D  36                 	db	54
   913  00FE5E  42                 	db	66
   914  00FE5F  37                 	db	55
   915  00FE60  38                 	db	56
   916  00FE61  39                 	db	57
   917  00FE62  43                 	db	67
   918  00FE63  2A                 	db	42
   919  00FE64  30                 	db	48
   920  00FE65  23                 	db	35
   921  00FE66  44                 	db	68
   922  00FE67  00                 	db	0
   923  00FE68                     __end_of_keys:
   924                           	opt stack 0
   925  00FE68                     _dpowers:
   926                           	opt stack 0
   927  00FE68  0001               	dw	1
   928  00FE6A  000A               	dw	10
   929  00FE6C  0064               	dw	100
   930  00FE6E  03E8               	dw	1000
   931  00FE70  2710               	dw	10000
   932  00FE72                     __end_of_dpowers:
   933                           	opt stack 0
   934  00FE72                     _hexpowers:
   935                           	opt stack 0
   936  00FE72  0001               	dw	1
   937  00FE74  0010               	dw	16
   938  00FE76  0100               	dw	256
   939  00FE78  1000               	dw	4096
   940  00FE7A                     __end_of_hexpowers:
   941                           	opt stack 0
   942  00FE7A                     _manualDateTime:
   943                           	opt stack 0
   944  00FE7A  00                 	db	0
   945  00FE7B  00                 	db	0
   946  00FE7C  00                 	db	0
   947  00FE7D  00                 	db	0
   948  00FE7E  01                 	db	1
   949  00FE7F  00                 	db	0
   950  00FE80  17                 	db	23
   951  00FE81                     __end_of_manualDateTime:
   952                           	opt stack 0
   953  00FE81                     STR_4:
   954  00FE81  25                 	db	37
   955  00FE82  64                 	db	100	;'d'
   956  00FE83  3A                 	db	58	;':'
   957  00FE84  25                 	db	37
   958  00FE85  30                 	db	48	;'0'
   959  00FE86  32                 	db	50	;'2'
   960  00FE87  64                 	db	100	;'d'
   961  00FE88  20                 	db	32
   962  00FE89  65                 	db	101	;'e'
   963  00FE8A  6E                 	db	110	;'n'
   964  00FE8B  3A                 	db	58	;':'
   965  00FE8C  25                 	db	37
   966  00FE8D  30                 	db	48	;'0'
   967  00FE8E  32                 	db	50	;'2'
   968  00FE8F  64                 	db	100	;'d'
   969  00FE90  20                 	db	32
   970  00FE91  65                 	db	101	;'e'
   971  00FE92  63                 	db	99	;'c'
   972  00FE93  3A                 	db	58	;':'
   973  00FE94  25                 	db	37
   974  00FE95  30                 	db	48	;'0'
   975  00FE96  32                 	db	50	;'2'
   976  00FE97  64                 	db	100	;'d'
   977  00FE98  20                 	db	32
   978  00FE99  00                 	db	0
   979  00FE9A                     STR_2:
   980  00FE9A  25                 	db	37
   981  00FE9B  30                 	db	48	;'0'
   982  00FE9C  32                 	db	50	;'2'
   983  00FE9D  78                 	db	120	;'x'
   984  00FE9E  2F                 	db	47
   985  00FE9F  25                 	db	37
   986  00FEA0  30                 	db	48	;'0'
   987  00FEA1  32                 	db	50	;'2'
   988  00FEA2  78                 	db	120	;'x'
   989  00FEA3  2F                 	db	47
   990  00FEA4  25                 	db	37
   991  00FEA5  30                 	db	48	;'0'
   992  00FEA6  32                 	db	50	;'2'
   993  00FEA7  78                 	db	120	;'x'
   994  00FEA8  20                 	db	32
   995  00FEA9  50                 	db	80	;'P'
   996  00FEAA  55                 	db	85	;'U'
   997  00FEAB  53                 	db	83	;'S'
   998  00FEAC  48                 	db	72	;'H'
   999  00FEAD  20                 	db	32
  1000  00FEAE  54                 	db	84	;'T'
  1001  00FEAF  4F                 	db	79	;'O'
  1002  00FEB0  00                 	db	0
  1003  00FEB1                     STR_3:
  1004  00FEB1  25                 	db	37
  1005  00FEB2  30                 	db	48	;'0'
  1006  00FEB3  32                 	db	50	;'2'
  1007  00FEB4  78                 	db	120	;'x'
  1008  00FEB5  3A                 	db	58	;':'
  1009  00FEB6  25                 	db	37
  1010  00FEB7  30                 	db	48	;'0'
  1011  00FEB8  32                 	db	50	;'2'
  1012  00FEB9  78                 	db	120	;'x'
  1013  00FEBA  3A                 	db	58	;':'
  1014  00FEBB  25                 	db	37
  1015  00FEBC  30                 	db	48	;'0'
  1016  00FEBD  32                 	db	50	;'2'
  1017  00FEBE  78                 	db	120	;'x'
  1018  00FEBF  20                 	db	32
  1019  00FEC0  20                 	db	32
  1020  00FEC1  20                 	db	32
  1021  00FEC2  53                 	db	83	;'S'
  1022  00FEC3  54                 	db	84	;'T'
  1023  00FEC4  41                 	db	65	;'A'
  1024  00FEC5  52                 	db	82	;'R'
  1025  00FEC6  54                 	db	84	;'T'
  1026  00FEC7  00                 	db	0
  1027  00FEC8                     STR_17:
  1028  00FEC8  72                 	db	114	;'r'
  1029  00FEC9  75                 	db	117	;'u'
  1030  00FECA  6E                 	db	110	;'n'
  1031  00FECB  20                 	db	32
  1032  00FECC  74                 	db	116	;'t'
  1033  00FECD  69                 	db	105	;'i'
  1034  00FECE  6D                 	db	109	;'m'
  1035  00FECF  65                 	db	101	;'e'
  1036  00FED0  3A                 	db	58	;':'
  1037  00FED1  20                 	db	32
  1038  00FED2  25                 	db	37
  1039  00FED3  30                 	db	48	;'0'
  1040  00FED4  31                 	db	49	;'1'
  1041  00FED5  64                 	db	100	;'d'
  1042  00FED6  3A                 	db	58	;':'
  1043  00FED7  25                 	db	37
  1044  00FED8  30                 	db	48	;'0'
  1045  00FED9  32                 	db	50	;'2'
  1046  00FEDA  64                 	db	100	;'d'
  1047  00FEDB  20                 	db	32
  1048  00FEDC  00                 	db	0
  1049  00FEDD  00                 	db	0
  1050  00FEDE                     STR_18:
  1051  00FEDE  65                 	db	101	;'e'
  1052  00FEDF  6E                 	db	110	;'n'
  1053  00FEE0  3A                 	db	58	;':'
  1054  00FEE1  25                 	db	37
  1055  00FEE2  30                 	db	48	;'0'
  1056  00FEE3  32                 	db	50	;'2'
  1057  00FEE4  64                 	db	100	;'d'
  1058  00FEE5  20                 	db	32
  1059  00FEE6  65                 	db	101	;'e'
  1060  00FEE7  63                 	db	99	;'c'
  1061  00FEE8  3A                 	db	58	;':'
  1062  00FEE9  25                 	db	37
  1063  00FEEA  30                 	db	48	;'0'
  1064  00FEEB  32                 	db	50	;'2'
  1065  00FEEC  64                 	db	100	;'d'
  1066  00FEED  20                 	db	32
  1067  00FEEE  20                 	db	32
  1068  00FEEF  20                 	db	32
  1069  00FEF0  20                 	db	32
  1070  00FEF1  00                 	db	0
  1071  00FEF2                     STR_19:
  1072  00FEF2  79                 	db	121	;'y'
  1073  00FEF3  6E                 	db	110	;'n'
  1074  00FEF4  3A                 	db	58	;':'
  1075  00FEF5  25                 	db	37
  1076  00FEF6  30                 	db	48	;'0'
  1077  00FEF7  32                 	db	50	;'2'
  1078  00FEF8  64                 	db	100	;'d'
  1079  00FEF9  20                 	db	32
  1080  00FEFA  79                 	db	121	;'y'
  1081  00FEFB  63                 	db	99	;'c'
  1082  00FEFC  3A                 	db	58	;':'
  1083  00FEFD  25                 	db	37
  1084  00FEFE  30                 	db	48	;'0'
  1085  00FEFF  32                 	db	50	;'2'
  1086  00FF00  64                 	db	100	;'d'
  1087  00FF01  20                 	db	32
  1088  00FF02  20                 	db	32
  1089  00FF03  20                 	db	32
  1090  00FF04  20                 	db	32
  1091  00FF05  00                 	db	0
  1092  00FF06                     STR_16:
  1093  00FF06  62                 	db	98	;'b'
  1094  00FF07  6F                 	db	111	;'o'
  1095  00FF08  74                 	db	116	;'t'
  1096  00FF09  74                 	db	116	;'t'
  1097  00FF0A  6C                 	db	108	;'l'
  1098  00FF0B  65                 	db	101	;'e'
  1099  00FF0C  73                 	db	115	;'s'
  1100  00FF0D  3A                 	db	58	;':'
  1101  00FF0E  20                 	db	32
  1102  00FF0F  25                 	db	37
  1103  00FF10  30                 	db	48	;'0'
  1104  00FF11  32                 	db	50	;'2'
  1105  00FF12  64                 	db	100	;'d'
  1106  00FF13  20                 	db	32
  1107  00FF14  20                 	db	32
  1108  00FF15  20                 	db	32
  1109  00FF16  20                 	db	32
  1110  00FF17  00                 	db	0
  1111  00FF18  00                 	db	0
  1112  00FF19                     STR_9:
  1113  00FF19  50                 	db	80	;'P'
  1114  00FF1A  32                 	db	50	;'2'
  1115  00FF1B  5B                 	db	91	;'['
  1116  00FF1C  30                 	db	48	;'0'
  1117  00FF1D  2D                 	db	45
  1118  00FF1E  31                 	db	49	;'1'
  1119  00FF1F  5D                 	db	93	;']'
  1120  00FF20  3A                 	db	58	;':'
  1121  00FF21  25                 	db	37
  1122  00FF22  64                 	db	100	;'d'
  1123  00FF23  2C                 	db	44
  1124  00FF24  25                 	db	37
  1125  00FF25  64                 	db	100	;'d'
  1126  00FF26  20                 	db	32
  1127  00FF27  4D                 	db	77	;'M'
  1128  00FF28  3A                 	db	58	;':'
  1129  00FF29  25                 	db	37
  1130  00FF2A  64                 	db	100	;'d'
  1131  00FF2B  00                 	db	0
  1132  00FF2C                     STR_12:
  1133  00FF2C  50                 	db	80	;'P'
  1134  00FF2D  49                 	db	73	;'I'
  1135  00FF2E  52                 	db	82	;'R'
  1136  00FF2F  3A                 	db	58	;':'
  1137  00FF30  25                 	db	37
  1138  00FF31  64                 	db	100	;'d'
  1139  00FF32  25                 	db	37
  1140  00FF33  64                 	db	100	;'d'
  1141  00FF34  2C                 	db	44
  1142  00FF35  25                 	db	37
  1143  00FF36  30                 	db	48	;'0'
  1144  00FF37  34                 	db	52	;'4'
  1145  00FF38  64                 	db	100	;'d'
  1146  00FF39  2C                 	db	44
  1147  00FF3A  25                 	db	37
  1148  00FF3B  30                 	db	48	;'0'
  1149  00FF3C  34                 	db	52	;'4'
  1150  00FF3D  64                 	db	100	;'d'
  1151  00FF3E  00                 	db	0
  1152  00FF3F                     STR_13:
  1153  00FF3F  44                 	db	68	;'D'
  1154  00FF40  49                 	db	73	;'I'
  1155  00FF41  53                 	db	83	;'S'
  1156  00FF42  54                 	db	84	;'T'
  1157  00FF43  5B                 	db	91	;'['
  1158  00FF44  30                 	db	48	;'0'
  1159  00FF45  5D                 	db	93	;']'
  1160  00FF46  3A                 	db	58	;':'
  1161  00FF47  25                 	db	37
  1162  00FF48  30                 	db	48	;'0'
  1163  00FF49  34                 	db	52	;'4'
  1164  00FF4A  64                 	db	100	;'d'
  1165  00FF4B  20                 	db	32
  1166  00FF4C  4D                 	db	77	;'M'
  1167  00FF4D  3A                 	db	58	;':'
  1168  00FF4E  25                 	db	37
  1169  00FF4F  64                 	db	100	;'d'
  1170  00FF50  00                 	db	0
  1171  00FF51                     STR_28:
  1172  00FF51  30                 	db	48	;'0'
  1173  00FF52  31                 	db	49	;'1'
  1174  00FF53  32                 	db	50	;'2'
  1175  00FF54  33                 	db	51	;'3'
  1176  00FF55  34                 	db	52	;'4'
  1177  00FF56  35                 	db	53	;'5'
  1178  00FF57  36                 	db	54	;'6'
  1179  00FF58  37                 	db	55	;'7'
  1180  00FF59  38                 	db	56	;'8'
  1181  00FF5A  39                 	db	57	;'9'
  1182  00FF5B  61                 	db	97	;'a'
  1183  00FF5C  62                 	db	98	;'b'
  1184  00FF5D  63                 	db	99	;'c'
  1185  00FF5E  64                 	db	100	;'d'
  1186  00FF5F  65                 	db	101	;'e'
  1187  00FF60  66                 	db	102	;'f'
  1188  00FF61  00                 	db	0
  1189  00FF62                     STR_8:
  1190  00FF62  50                 	db	80	;'P'
  1191  00FF63  31                 	db	49	;'1'
  1192  00FF64  5B                 	db	91	;'['
  1193  00FF65  30                 	db	48	;'0'
  1194  00FF66  2D                 	db	45
  1195  00FF67  32                 	db	50	;'2'
  1196  00FF68  5D                 	db	93	;']'
  1197  00FF69  3A                 	db	58	;':'
  1198  00FF6A  25                 	db	37
  1199  00FF6B  64                 	db	100	;'d'
  1200  00FF6C  2C                 	db	44
  1201  00FF6D  25                 	db	37
  1202  00FF6E  64                 	db	100	;'d'
  1203  00FF6F  2C                 	db	44
  1204  00FF70  25                 	db	37
  1205  00FF71  64                 	db	100	;'d'
  1206  00FF72  00                 	db	0
  1207  00FF73                     STR_11:
  1208  00FF73  49                 	db	73	;'I'
  1209  00FF74  52                 	db	82	;'R'
  1210  00FF75  32                 	db	50	;'2'
  1211  00FF76  5B                 	db	91	;'['
  1212  00FF77  30                 	db	48	;'0'
  1213  00FF78  5D                 	db	93	;']'
  1214  00FF79  3A                 	db	58	;':'
  1215  00FF7A  25                 	db	37
  1216  00FF7B  30                 	db	48	;'0'
  1217  00FF7C  34                 	db	52	;'4'
  1218  00FF7D  64                 	db	100	;'d'
  1219  00FF7E  4D                 	db	77	;'M'
  1220  00FF7F  3A                 	db	58	;':'
  1221  00FF80  25                 	db	37
  1222  00FF81  64                 	db	100	;'d'
  1223  00FF82  00                 	db	0
  1224  00FF83                     STR_5:
  1225  00FF83  79                 	db	121	;'y'
  1226  00FF84  6E                 	db	110	;'n'
  1227  00FF85  3A                 	db	58	;':'
  1228  00FF86  25                 	db	37
  1229  00FF87  30                 	db	48	;'0'
  1230  00FF88  32                 	db	50	;'2'
  1231  00FF89  64                 	db	100	;'d'
  1232  00FF8A  20                 	db	32
  1233  00FF8B  79                 	db	121	;'y'
  1234  00FF8C  63                 	db	99	;'c'
  1235  00FF8D  3A                 	db	58	;':'
  1236  00FF8E  25                 	db	37
  1237  00FF8F  30                 	db	48	;'0'
  1238  00FF90  32                 	db	50	;'2'
  1239  00FF91  64                 	db	100	;'d'
  1240  00FF92  00                 	db	0
  1241  00FF93                     STR_15:
  1242  00FF93  45                 	db	69	;'E'
  1243  00FF94  4D                 	db	77	;'M'
  1244  00FF95  45                 	db	69	;'E'
  1245  00FF96  52                 	db	82	;'R'
  1246  00FF97  47                 	db	71	;'G'
  1247  00FF98  45                 	db	69	;'E'
  1248  00FF99  4E                 	db	78	;'N'
  1249  00FF9A  43                 	db	67	;'C'
  1250  00FF9B  59                 	db	89	;'Y'
  1251  00FF9C  20                 	db	32
  1252  00FF9D  53                 	db	83	;'S'
  1253  00FF9E  54                 	db	84	;'T'
  1254  00FF9F  4F                 	db	79	;'O'
  1255  00FFA0  50                 	db	80	;'P'
  1256  00FFA1  00                 	db	0
  1257  00FFA2                     STR_25:
  1258  00FFA2  6D                 	db	109	;'m'
  1259  00FFA3  65                 	db	101	;'e'
  1260  00FFA4  6E                 	db	110	;'n'
  1261  00FFA5  75                 	db	117	;'u'
  1262  00FFA6  20                 	db	32
  1263  00FFA7  73                 	db	115	;'s'
  1264  00FFA8  65                 	db	101	;'e'
  1265  00FFA9  6C                 	db	108	;'l'
  1266  00FFAA  65                 	db	101	;'e'
  1267  00FFAB  63                 	db	99	;'c'
  1268  00FFAC  74                 	db	116	;'t'
  1269  00FFAD  69                 	db	105	;'i'
  1270  00FFAE  6F                 	db	111	;'o'
  1271  00FFAF  6E                 	db	110	;'n'
  1272  00FFB0  00                 	db	0
  1273  00FFB1                     STR_7:
  1274  00FFB1  44                 	db	68	;'D'
  1275  00FFB2  43                 	db	67	;'C'
  1276  00FFB3  3A                 	db	58	;':'
  1277  00FFB4  25                 	db	37
  1278  00FFB5  64                 	db	100	;'d'
  1279  00FFB6  20                 	db	32
  1280  00FFB7  4D                 	db	77	;'M'
  1281  00FFB8  45                 	db	69	;'E'
  1282  00FFB9  41                 	db	65	;'A'
  1283  00FFBA  53                 	db	83	;'S'
  1284  00FFBB  3A                 	db	58	;':'
  1285  00FFBC  25                 	db	37
  1286  00FFBD  64                 	db	100	;'d'
  1287  00FFBE  00                 	db	0
  1288  00FFBF                     STR_26:
  1289  00FFBF  6E                 	db	110	;'n'
  1290  00FFC0  6F                 	db	111	;'o'
  1291  00FFC1  20                 	db	32
  1292  00FFC2  70                 	db	112	;'p'
  1293  00FFC3  61                 	db	97	;'a'
  1294  00FFC4  67                 	db	103	;'g'
  1295  00FFC5  65                 	db	101	;'e'
  1296  00FFC6  20                 	db	32
  1297  00FFC7  66                 	db	102	;'f'
  1298  00FFC8  6F                 	db	111	;'o'
  1299  00FFC9  75                 	db	117	;'u'
  1300  00FFCA  6E                 	db	110	;'n'
  1301  00FFCB  64                 	db	100	;'d'
  1302  00FFCC  00                 	db	0
  1303  00FFCD                     STR_6:
  1304  00FFCD  52                 	db	82	;'R'
  1305  00FFCE  43                 	db	67	;'C'
  1306  00FFCF  3A                 	db	58	;':'
  1307  00FFD0  25                 	db	37
  1308  00FFD1  64                 	db	100	;'d'
  1309  00FFD2  20                 	db	32
  1310  00FFD3  4D                 	db	77	;'M'
  1311  00FFD4  43                 	db	67	;'C'
  1312  00FFD5  3A                 	db	58	;':'
  1313  00FFD6  25                 	db	37
  1314  00FFD7  64                 	db	100	;'d'
  1315  00FFD8  00                 	db	0
  1316  00FFD9                     STR_10:
  1317  00FFD9  49                 	db	73	;'I'
  1318  00FFDA  52                 	db	82	;'R'
  1319  00FFDB  31                 	db	49	;'1'
  1320  00FFDC  5B                 	db	91	;'['
  1321  00FFDD  30                 	db	48	;'0'
  1322  00FFDE  5D                 	db	93	;']'
  1323  00FFDF  3A                 	db	58	;':'
  1324  00FFE0  25                 	db	37
  1325  00FFE1  30                 	db	48	;'0'
  1326  00FFE2  34                 	db	52	;'4'
  1327  00FFE3  64                 	db	100	;'d'
  1328  00FFE4  00                 	db	0
  1329  00FFE5                     STR_24:
  1330  00FFE5  69                 	db	105	;'i'
  1331  00FFE6  6E                 	db	110	;'n'
  1332  00FFE7  76                 	db	118	;'v'
  1333  00FFE8  61                 	db	97	;'a'
  1334  00FFE9  6C                 	db	108	;'l'
  1335  00FFEA  69                 	db	105	;'i'
  1336  00FFEB  64                 	db	100	;'d'
  1337  00FFEC  00                 	db	0
  1338  00FFED                     STR_27:
  1339  00FFED  28                 	db	40
  1340  00FFEE  6E                 	db	110	;'n'
  1341  00FFEF  75                 	db	117	;'u'
  1342  00FFF0  6C                 	db	108	;'l'
  1343  00FFF1  6C                 	db	108	;'l'
  1344  00FFF2  29                 	db	41
  1345  00FFF3  00                 	db	0
  1346  00FFF4                     STR_14:
  1347  00FFF4  45                 	db	69	;'E'
  1348  00FFF5  52                 	db	82	;'R'
  1349  00FFF6  52                 	db	82	;'R'
  1350  00FFF7  4F                 	db	79	;'O'
  1351  00FFF8  52                 	db	82	;'R'
  1352  00FFF9  00                 	db	0
  1353  00FFFA                     STR_20:
  1354  00FFFA  25                 	db	37
  1355  00FFFB  73                 	db	115	;'s'
  1356  00FFFC  25                 	db	37
  1357  00FFFD  63                 	db	99	;'c'
  1358  00FFFE  00                 	db	0
  1359  0000                     
  1360                           ; #config settings
  1361  00FFFF  00                 	db	0	; dummy byte at the end
  1362  0000                     
  1363                           	psect	nvCOMRAM
  1364  000072                     __pnvCOMRAM:
  1365                           	opt stack 0
  1366  000072                     _measure:
  1367                           	opt stack 0
  1368  000072                     	ds	2
  1369  000074                     _release:
  1370                           	opt stack 0
  1371  000074                     	ds	2
  1372                           
  1373                           	psect	nvBANK0
  1374  0000F7                     __pnvBANK0:
  1375                           	opt stack 0
  1376  0000F7                     _discretize:
  1377                           	opt stack 0
  1378  0000F7                     	ds	2
  1379  0000                     _ADCON0	set	4034
  1380  0000                     _ADCON0bits	set	4034
  1381  0000                     _ADCON1	set	4033
  1382  0000                     _ADRESL	set	4035
  1383  0000                     _CMCONbits	set	4020
  1384  0000                     _CVRCON	set	4021
  1385  0000                     _INTCONbits	set	4082
  1386  0000                     _LATA	set	3977
  1387  0000                     _LATB	set	3978
  1388  0000                     _LATC	set	3979
  1389  0000                     _LATD	set	3980
  1390  0000                     _LATDbits	set	3980
  1391  0000                     _LATE	set	3981
  1392  0000                     _PORTB	set	3969
  1393  0000                     _SSPADD	set	4040
  1394  0000                     _SSPBUF	set	4041
  1395  0000                     _SSPCON1	set	4038
  1396  0000                     _SSPCON2	set	4037
  1397  0000                     _SSPSTAT	set	4039
  1398  0000                     _TRISA	set	3986
  1399  0000                     _TRISB	set	3987
  1400  0000                     _TRISC	set	3988
  1401  0000                     _TRISD	set	3989
  1402  0000                     _TRISE	set	3990
  1403  0000                     _ADRESH	set	4036
  1404  0000                     _ACKDT	set	32301
  1405  0000                     _ACKEN	set	32300
  1406  0000                     _ADFM	set	32263
  1407  0000                     _ADON	set	32272
  1408  0000                     _INT1IE	set	32643
  1409  0000                     _INT1IF	set	32640
  1410  0000                     _PEN	set	32298
  1411  0000                     _RCEN	set	32299
  1412  0000                     _RSEN	set	32297
  1413  0000                     _SEN	set	32296
  1414  0000                     _TRISC3	set	31907
  1415  0000                     _TRISC4	set	31908
  1416  0000                     _nRBPU	set	32655
  1417                           
  1418                           	psect	cinit
  1419  0036C4                     __pcinit:
  1420                           	opt stack 0
  1421  0036C4                     start_initialization:
  1422                           	opt stack 0
  1423  0036C4                     __initialization:
  1424                           	opt stack 0
  1425                           
  1426                           ; Initialize objects allocated to BIGRAM (720 bytes)
  1427                           ; load TBLPTR registers with __pidataBIGRAM
  1428  0036C4  0E88               	movlw	low __pidataBIGRAM
  1429  0036C6  6EF6               	movwf	tblptrl,c
  1430  0036C8  0E2B               	movlw	high __pidataBIGRAM
  1431  0036CA  6EF7               	movwf	tblptrh,c
  1432  0036CC  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
  1433  0036CE  6EF8               	movwf	tblptru,c
  1434  0036D0  EE01  F082         	lfsr	0,__pdataBIGRAM
  1435  0036D4  EE12 F0D0          	lfsr	1,720
  1436  0036D8                     copy_data0:
  1437  0036D8  0009               	tblrd		*+
  1438  0036DA  CFF5 FFEE          	movff	tablat,postinc0
  1439  0036DE  50E5               	movf	postdec1,w,c
  1440  0036E0  50E1               	movf	fsr1l,w,c
  1441  0036E2  E1FA               	bnz	copy_data0
  1442  0036E4  50E2               	movf	fsr1h,w,c
  1443  0036E6  E1F8               	bnz	copy_data0
  1444                           
  1445                           ; Initialize objects allocated to BANK0 (28 bytes)
  1446                           ; load TBLPTR registers with __pidataBANK0
  1447  0036E8  0E56               	movlw	low __pidataBANK0
  1448  0036EA  6EF6               	movwf	tblptrl,c
  1449  0036EC  0E3D               	movlw	high __pidataBANK0
  1450  0036EE  6EF7               	movwf	tblptrh,c
  1451  0036F0  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1452  0036F2  6EF8               	movwf	tblptru,c
  1453  0036F4  EE00  F0DB         	lfsr	0,__pdataBANK0
  1454  0036F8  EE10 F01C          	lfsr	1,28
  1455  0036FC                     copy_data1:
  1456  0036FC  0009               	tblrd		*+
  1457  0036FE  CFF5 FFEE          	movff	tablat,postinc0
  1458  003702  50E5               	movf	postdec1,w,c
  1459  003704  50E1               	movf	fsr1l,w,c
  1460  003706  E1FA               	bnz	copy_data1
  1461                           
  1462                           ; Initialize objects allocated to COMRAM (6 bytes)
  1463                           ; load TBLPTR registers with __pidataCOMRAM
  1464  003708  0EDE               	movlw	low __pidataCOMRAM
  1465  00370A  6EF6               	movwf	tblptrl,c
  1466  00370C  0E3D               	movlw	high __pidataCOMRAM
  1467  00370E  6EF7               	movwf	tblptrh,c
  1468  003710  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1469  003712  6EF8               	movwf	tblptru,c
  1470  003714  EE00  F06C         	lfsr	0,__pdataCOMRAM
  1471  003718  EE10 F006          	lfsr	1,6
  1472  00371C                     copy_data2:
  1473  00371C  0009               	tblrd		*+
  1474  00371E  CFF5 FFEE          	movff	tablat,postinc0
  1475  003722  50E5               	movf	postdec1,w,c
  1476  003724  50E1               	movf	fsr1l,w,c
  1477  003726  E1FA               	bnz	copy_data2
  1478                           
  1479                           ; Clear objects allocated to BANK1 (120 bytes)
  1480  003728  EE01  F000         	lfsr	0,__pbssBANK1
  1481  00372C  0E78               	movlw	120
  1482  00372E                     clear_0:
  1483  00372E  6AEE               	clrf	postinc0,c
  1484  003730  06E8               	decf	wreg,f,c
  1485  003732  E1FD               	bnz	clear_0
  1486                           
  1487                           ; Clear objects allocated to BANK0 (33 bytes)
  1488  003734  EE00  F0BA         	lfsr	0,__pbssBANK0
  1489  003738  0E21               	movlw	33
  1490  00373A                     clear_1:
  1491  00373A  6AEE               	clrf	postinc0,c
  1492  00373C  06E8               	decf	wreg,f,c
  1493  00373E  E1FD               	bnz	clear_1
  1494                           
  1495                           ; Clear objects allocated to COMRAM (46 bytes)
  1496  003740  EE00  F03E         	lfsr	0,__pbssCOMRAM
  1497  003744  0E2E               	movlw	46
  1498  003746                     clear_2:
  1499  003746  6AEE               	clrf	postinc0,c
  1500  003748  06E8               	decf	wreg,f,c
  1501  00374A  E1FD               	bnz	clear_2
  1502  00374C                     end_of_initialization:
  1503                           	opt stack 0
  1504  00374C                     __end_of__initialization:
  1505                           	opt stack 0
  1506  00374C  9076               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1507  00374E  9276               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1508  003750  0100               	movlb	0
  1509  003752  EFBB  F01A         	goto	_main	;jump to C main() function
  1510                           tblptru	equ	0xFF8
  1511                           tblptrh	equ	0xFF7
  1512                           tblptrl	equ	0xFF6
  1513                           tablat	equ	0xFF5
  1514                           postinc0	equ	0xFEE
  1515                           wreg	equ	0xFE8
  1516                           postdec1	equ	0xFE5
  1517                           fsr1h	equ	0xFE2
  1518                           fsr1l	equ	0xFE1
  1519                           
  1520                           	psect	bssCOMRAM
  1521  00003E                     __pbssCOMRAM:
  1522                           	opt stack 0
  1523  00003E                     _time_i:
  1524                           	opt stack 0
  1525  00003E                     	ds	14
  1526  00004C                     _IR1:
  1527                           	opt stack 0
  1528  00004C                     	ds	10
  1529  000056                     _PROX1:
  1530                           	opt stack 0
  1531  000056                     	ds	10
  1532  000060                     _PROX2:
  1533                           	opt stack 0
  1534  000060                     	ds	10
  1535  00006A                     _DIST1_PIN:
  1536                           	opt stack 0
  1537  00006A                     	ds	1
  1538  00006B                     _PROX1_PIN:
  1539                           	opt stack 0
  1540  00006B                     	ds	1
  1541                           tblptru	equ	0xFF8
  1542                           tblptrh	equ	0xFF7
  1543                           tblptrl	equ	0xFF6
  1544                           tablat	equ	0xFF5
  1545                           postinc0	equ	0xFEE
  1546                           wreg	equ	0xFE8
  1547                           postdec1	equ	0xFE5
  1548                           fsr1h	equ	0xFE2
  1549                           fsr1l	equ	0xFE1
  1550                           
  1551                           	psect	dataCOMRAM
  1552  00006C                     __pdataCOMRAM:
  1553                           	opt stack 0
  1554  00006C                     _sortSize:
  1555                           	opt stack 0
  1556  00006C                     	ds	2
  1557  00006E                     _DIST1_TRIG:
  1558                           	opt stack 0
  1559  00006E                     	ds	1
  1560  00006F                     _IR1_PIN:
  1561                           	opt stack 0
  1562  00006F                     	ds	1
  1563  000070                     _IR2_PIN:
  1564                           	opt stack 0
  1565  000070                     	ds	1
  1566  000071                     _PROX2_PIN:
  1567                           	opt stack 0
  1568  000071                     	ds	1
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           postinc0	equ	0xFEE
  1574                           wreg	equ	0xFE8
  1575                           postdec1	equ	0xFE5
  1576                           fsr1h	equ	0xFE2
  1577                           fsr1l	equ	0xFE1
  1578                           
  1579                           	psect	bssBANK0
  1580  0000BA                     __pbssBANK0:
  1581                           	opt stack 0
  1582  0000BA                     _time:
  1583                           	opt stack 0
  1584  0000BA                     	ds	7
  1585  0000C1                     _bottle_type:
  1586                           	opt stack 0
  1587  0000C1                     	ds	2
  1588  0000C3                     _cycle_time1:
  1589                           	opt stack 0
  1590  0000C3                     	ds	2
  1591  0000C5                     _cycle_time2:
  1592                           	opt stack 0
  1593  0000C5                     	ds	2
  1594  0000C7                     _discretize_counter:
  1595                           	opt stack 0
  1596  0000C7                     	ds	2
  1597  0000C9                     _eskaNoCap:
  1598                           	opt stack 0
  1599  0000C9                     	ds	2
  1600  0000CB                     _eskaWCap:
  1601                           	opt stack 0
  1602  0000CB                     	ds	2
  1603  0000CD                     _measure_counter:
  1604                           	opt stack 0
  1605  0000CD                     	ds	2
  1606  0000CF                     _release_counter:
  1607                           	opt stack 0
  1608  0000CF                     	ds	2
  1609  0000D1                     _runTime:
  1610                           	opt stack 0
  1611  0000D1                     	ds	2
  1612  0000D3                     _sorted_bottles:
  1613                           	opt stack 0
  1614  0000D3                     	ds	2
  1615  0000D5                     _timeDiff:
  1616                           	opt stack 0
  1617  0000D5                     	ds	2
  1618  0000D7                     _yopNoCap:
  1619                           	opt stack 0
  1620  0000D7                     	ds	2
  1621  0000D9                     _yopWCap:
  1622                           	opt stack 0
  1623  0000D9                     	ds	2
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           postinc0	equ	0xFEE
  1629                           wreg	equ	0xFE8
  1630                           postdec1	equ	0xFE5
  1631                           fsr1h	equ	0xFE2
  1632                           fsr1l	equ	0xFE1
  1633                           
  1634                           	psect	dataBANK0
  1635  0000DB                     __pdataBANK0:
  1636                           	opt stack 0
  1637  0000DB                     _DIST_THRESHOLD_HI:
  1638                           	opt stack 0
  1639  0000DB                     	ds	2
  1640  0000DD                     _DIST_THRESHOLD_LOW:
  1641                           	opt stack 0
  1642  0000DD                     	ds	2
  1643  0000DF                     _IR_THRESHOLD_HI:
  1644                           	opt stack 0
  1645  0000DF                     	ds	2
  1646  0000E1                     _IR_THRESHOLD_LOW:
  1647                           	opt stack 0
  1648  0000E1                     	ds	2
  1649  0000E3                     _sortIndex:
  1650                           	opt stack 0
  1651  0000E3                     	ds	2
  1652  0000E5                     _nstate:
  1653                           	opt stack 0
  1654  0000E5                     	ds	1
  1655  0000E6                     _state:
  1656                           	opt stack 0
  1657  0000E6                     	ds	1
  1658  0000E7                     _creditIndex:
  1659                           	opt stack 0
  1660  0000E7                     	ds	2
  1661  0000E9                     _creditSize:
  1662                           	opt stack 0
  1663  0000E9                     	ds	2
  1664  0000EB                     _endIndex:
  1665                           	opt stack 0
  1666  0000EB                     	ds	2
  1667  0000ED                     _endSize:
  1668                           	opt stack 0
  1669  0000ED                     	ds	2
  1670  0000EF                     _events:
  1671                           	opt stack 0
  1672  0000EF                     	ds	2
  1673  0000F1                     _logIndex:
  1674                           	opt stack 0
  1675  0000F1                     	ds	2
  1676  0000F3                     _menuIndex:
  1677                           	opt stack 0
  1678  0000F3                     	ds	2
  1679  0000F5                     _menuSize:
  1680                           	opt stack 0
  1681  0000F5                     	ds	2
  1682                           tblptru	equ	0xFF8
  1683                           tblptrh	equ	0xFF7
  1684                           tblptrl	equ	0xFF6
  1685                           tablat	equ	0xFF5
  1686                           postinc0	equ	0xFEE
  1687                           wreg	equ	0xFE8
  1688                           postdec1	equ	0xFE5
  1689                           fsr1h	equ	0xFE2
  1690                           fsr1l	equ	0xFE1
  1691                           
  1692                           	psect	bssBANK1
  1693  000100                     __pbssBANK1:
  1694                           	opt stack 0
  1695  000100                     _latestSortedBottleTime:
  1696                           	opt stack 0
  1697  000100                     	ds	14
  1698  00010E                     _startTime:
  1699                           	opt stack 0
  1700  00010E                     	ds	14
  1701  00011C                     _DIST1:
  1702                           	opt stack 0
  1703  00011C                     	ds	10
  1704  000126                     _IR2:
  1705                           	opt stack 0
  1706  000126                     	ds	10
  1707  000130                     _display0:
  1708                           	opt stack 0
  1709  000130                     	ds	18
  1710  000142                     _display1:
  1711                           	opt stack 0
  1712  000142                     	ds	18
  1713  000154                     _ndisplay0:
  1714                           	opt stack 0
  1715  000154                     	ds	18
  1716  000166                     _ndisplay1:
  1717                           	opt stack 0
  1718  000166                     	ds	18
  1719                           tblptru	equ	0xFF8
  1720                           tblptrh	equ	0xFF7
  1721                           tblptrl	equ	0xFF6
  1722                           tablat	equ	0xFF5
  1723                           postinc0	equ	0xFEE
  1724                           wreg	equ	0xFE8
  1725                           postdec1	equ	0xFE5
  1726                           fsr1h	equ	0xFE2
  1727                           fsr1l	equ	0xFE1
  1728                           
  1729                           	psect	dataBIGRAM
  1730  000182                     __pdataBIGRAM:
  1731                           	opt stack 0
  1732  000182                     _menu:
  1733                           	opt stack 0
  1734  000182                     	ds	720
  1735                           tblptru	equ	0xFF8
  1736                           tblptrh	equ	0xFF7
  1737                           tblptrl	equ	0xFF6
  1738                           tablat	equ	0xFF5
  1739                           postinc0	equ	0xFEE
  1740                           wreg	equ	0xFE8
  1741                           postdec1	equ	0xFE5
  1742                           fsr1h	equ	0xFE2
  1743                           fsr1l	equ	0xFE1
  1744                           
  1745                           	psect	cstackBANK1
  1746  000178                     __pcstackBANK1:
  1747                           	opt stack 0
  1748  000178                     display_menu@selector:
  1749                           	opt stack 0
  1750                           
  1751                           ; 2 bytes @ 0x0
  1752  000178                     	ds	2
  1753  00017A                     display_menu@menuSizePtr:
  1754                           	opt stack 0
  1755                           
  1756                           ; 2 bytes @ 0x2
  1757  00017A                     	ds	2
  1758  00017C                     display_menu@menuSelection:
  1759                           	opt stack 0
  1760                           
  1761                           ; 2 bytes @ 0x4
  1762  00017C                     	ds	2
  1763  00017E                     _display_menu$1164:
  1764                           	opt stack 0
  1765                           
  1766                           ; 2 bytes @ 0x6
  1767  00017E                     	ds	2
  1768  000180                     display_menu@menuIndexPtr:
  1769                           	opt stack 0
  1770                           
  1771                           ; 2 bytes @ 0x8
  1772  000180                     	ds	2
  1773                           tblptru	equ	0xFF8
  1774                           tblptrh	equ	0xFF7
  1775                           tblptrl	equ	0xFF6
  1776                           tablat	equ	0xFF5
  1777                           postinc0	equ	0xFEE
  1778                           wreg	equ	0xFE8
  1779                           postdec1	equ	0xFE5
  1780                           fsr1h	equ	0xFE2
  1781                           fsr1l	equ	0xFE1
  1782                           
  1783                           	psect	cstackBANK0
  1784  000080                     __pcstackBANK0:
  1785                           	opt stack 0
  1786  000080                     ??_readADC:
  1787  000080                     ??_isdigit:
  1788  000080                     ??_I2C_Master_Wait:
  1789  000080                     ?_strcmp:
  1790                           	opt stack 0
  1791  000080                     ?___wmul:
  1792                           	opt stack 0
  1793  000080                     ?___awdiv:
  1794                           	opt stack 0
  1795  000080                     ?___awmod:
  1796                           	opt stack 0
  1797  000080                     ?___lwdiv:
  1798                           	opt stack 0
  1799  000080                     ?___lldiv:
  1800                           	opt stack 0
  1801  000080                     lcdNibble@temp:
  1802                           	opt stack 0
  1803  000080                     ___wmul@multiplier:
  1804                           	opt stack 0
  1805  000080                     ___awdiv@dividend:
  1806                           	opt stack 0
  1807  000080                     ___awmod@dividend:
  1808                           	opt stack 0
  1809  000080                     ___lwdiv@dividend:
  1810                           	opt stack 0
  1811  000080                     strcmp@s1:
  1812                           	opt stack 0
  1813  000080                     strcpy@to:
  1814                           	opt stack 0
  1815  000080                     ___lldiv@dividend:
  1816                           	opt stack 0
  1817                           
  1818                           ; 4 bytes @ 0x0
  1819  000080                     	ds	1
  1820  000081                     I2C_Master_Read@a:
  1821                           	opt stack 0
  1822  000081                     lcdNibble@data:
  1823                           	opt stack 0
  1824  000081                     readADC@channel:
  1825                           	opt stack 0
  1826  000081                     _isdigit$777:
  1827                           	opt stack 0
  1828  000081                     I2C_Master_Write@d:
  1829                           	opt stack 0
  1830                           
  1831                           ; 2 bytes @ 0x1
  1832  000081                     	ds	1
  1833  000082                     ??_read_sensors:
  1834  000082                     I2C_Master_Read@temp:
  1835                           	opt stack 0
  1836  000082                     lcdInst@data:
  1837                           	opt stack 0
  1838  000082                     putch@data:
  1839                           	opt stack 0
  1840  000082                     isdigit@c:
  1841                           	opt stack 0
  1842  000082                     ___wmul@multiplicand:
  1843                           	opt stack 0
  1844  000082                     ___awdiv@divisor:
  1845                           	opt stack 0
  1846  000082                     ___awmod@divisor:
  1847                           	opt stack 0
  1848  000082                     ___lwdiv@divisor:
  1849                           	opt stack 0
  1850  000082                     strcmp@s2:
  1851                           	opt stack 0
  1852  000082                     strcpy@from:
  1853                           	opt stack 0
  1854                           
  1855                           ; 2 bytes @ 0x2
  1856  000082                     	ds	1
  1857  000083                     ??_initLCD:
  1858  000083                     set_time@i:
  1859                           	opt stack 0
  1860                           
  1861                           ; 1 bytes @ 0x3
  1862  000083                     	ds	1
  1863  000084                     ??_strcmp:
  1864  000084                     ___awdiv@counter:
  1865                           	opt stack 0
  1866  000084                     ___awmod@counter:
  1867                           	opt stack 0
  1868  000084                     ___lwdiv@counter:
  1869                           	opt stack 0
  1870  000084                     ___wmul@product:
  1871                           	opt stack 0
  1872  000084                     strcpy@cp:
  1873                           	opt stack 0
  1874  000084                     ___lldiv@divisor:
  1875                           	opt stack 0
  1876                           
  1877                           ; 4 bytes @ 0x4
  1878  000084                     	ds	1
  1879  000085                     ___awdiv@sign:
  1880                           	opt stack 0
  1881  000085                     ___awmod@sign:
  1882                           	opt stack 0
  1883  000085                     strcmp@r:
  1884                           	opt stack 0
  1885  000085                     ___lwdiv@quotient:
  1886                           	opt stack 0
  1887                           
  1888                           ; 2 bytes @ 0x5
  1889  000085                     	ds	1
  1890  000086                     ??_update_RTC:
  1891  000086                     ?__measure:
  1892                           	opt stack 0
  1893  000086                     read_sensors@i:
  1894                           	opt stack 0
  1895  000086                     ___awdiv@quotient:
  1896                           	opt stack 0
  1897                           
  1898                           ; 2 bytes @ 0x6
  1899  000086                     	ds	1
  1900  000087                     ?___lwmod:
  1901                           	opt stack 0
  1902  000087                     ___lwmod@dividend:
  1903                           	opt stack 0
  1904                           
  1905                           ; 2 bytes @ 0x7
  1906  000087                     	ds	1
  1907  000088                     ___lldiv@quotient:
  1908                           	opt stack 0
  1909                           
  1910                           ; 4 bytes @ 0x8
  1911  000088                     	ds	1
  1912  000089                     ___lwmod@divisor:
  1913                           	opt stack 0
  1914                           
  1915                           ; 2 bytes @ 0x9
  1916  000089                     	ds	1
  1917  00008A                     __measure@i:
  1918                           	opt stack 0
  1919                           
  1920                           ; 1 bytes @ 0xA
  1921  00008A                     	ds	1
  1922  00008B                     update_RTC@i:
  1923                           	opt stack 0
  1924  00008B                     __measure@i_499:
  1925                           	opt stack 0
  1926  00008B                     ___lwmod@counter:
  1927                           	opt stack 0
  1928                           
  1929                           ; 1 bytes @ 0xB
  1930  00008B                     	ds	1
  1931  00008C                     ?__doprnt:
  1932                           	opt stack 0
  1933  00008C                     __measure@i_500:
  1934                           	opt stack 0
  1935  00008C                     ___lldiv@counter:
  1936                           	opt stack 0
  1937  00008C                     __doprnt@pb:
  1938                           	opt stack 0
  1939                           
  1940                           ; 2 bytes @ 0xC
  1941  00008C                     	ds	1
  1942  00008D                     __measure@i_501:
  1943                           	opt stack 0
  1944  00008D                     I2C_Master_Init@c:
  1945                           	opt stack 0
  1946                           
  1947                           ; 4 bytes @ 0xD
  1948  00008D                     	ds	1
  1949  00008E                     __measure@i_502:
  1950                           	opt stack 0
  1951  00008E                     __doprnt@f:
  1952                           	opt stack 0
  1953                           
  1954                           ; 2 bytes @ 0xE
  1955  00008E                     	ds	1
  1956  00008F                     __measure@i_503:
  1957                           	opt stack 0
  1958                           
  1959                           ; 1 bytes @ 0xF
  1960  00008F                     	ds	1
  1961  000090                     __measure@i_504:
  1962                           	opt stack 0
  1963  000090                     __doprnt@ap:
  1964                           	opt stack 0
  1965                           
  1966                           ; 2 bytes @ 0x10
  1967  000090                     	ds	1
  1968  000091                     ??_I2C_Master_Init:
  1969  000091                     __measure@i_505:
  1970                           	opt stack 0
  1971                           
  1972                           ; 1 bytes @ 0x11
  1973  000091                     	ds	1
  1974  000092                     ??__doprnt:
  1975  000092                     __measure@measurement:
  1976                           	opt stack 0
  1977                           
  1978                           ; 2 bytes @ 0x12
  1979  000092                     	ds	2
  1980  000094                     ??_sort:
  1981                           
  1982                           ; 1 bytes @ 0x14
  1983  000094                     	ds	2
  1984  000096                     __doprnt@idx:
  1985                           	opt stack 0
  1986                           
  1987                           ; 1 bytes @ 0x16
  1988  000096                     	ds	1
  1989  000097                     __doprnt@prec:
  1990                           	opt stack 0
  1991                           
  1992                           ; 1 bytes @ 0x17
  1993  000097                     	ds	1
  1994  000098                     sort@i:
  1995                           	opt stack 0
  1996  000098                     __doprnt@len:
  1997                           	opt stack 0
  1998                           
  1999                           ; 2 bytes @ 0x18
  2000  000098                     	ds	2
  2001  00009A                     __doprnt@cp:
  2002                           	opt stack 0
  2003                           
  2004                           ; 2 bytes @ 0x1A
  2005  00009A                     	ds	2
  2006  00009C                     __doprnt@val:
  2007                           	opt stack 0
  2008                           
  2009                           ; 2 bytes @ 0x1C
  2010  00009C                     	ds	2
  2011  00009E                     __doprnt@flag:
  2012                           	opt stack 0
  2013                           
  2014                           ; 1 bytes @ 0x1E
  2015  00009E                     	ds	1
  2016  00009F                     __doprnt@width:
  2017                           	opt stack 0
  2018                           
  2019                           ; 2 bytes @ 0x1F
  2020  00009F                     	ds	2
  2021  0000A1                     __doprnt@c:
  2022                           	opt stack 0
  2023                           
  2024                           ; 1 bytes @ 0x21
  2025  0000A1                     	ds	1
  2026  0000A2                     ?_printf:
  2027                           	opt stack 0
  2028  0000A2                     ?_sprintf:
  2029                           	opt stack 0
  2030  0000A2                     printf@f:
  2031                           	opt stack 0
  2032  0000A2                     sprintf@wh:
  2033                           	opt stack 0
  2034                           
  2035                           ; 2 bytes @ 0x22
  2036  0000A2                     	ds	2
  2037  0000A4                     sprintf@f:
  2038                           	opt stack 0
  2039                           
  2040                           ; 2 bytes @ 0x24
  2041  0000A4                     	ds	2
  2042  0000A6                     printf@ap:
  2043                           	opt stack 0
  2044                           
  2045                           ; 2 bytes @ 0x26
  2046  0000A6                     	ds	2
  2047  0000A8                     printf@pb:
  2048                           	opt stack 0
  2049                           
  2050                           ; 4 bytes @ 0x28
  2051  0000A8                     	ds	4
  2052  0000AC                     ??_update_lcd:
  2053                           
  2054                           ; 1 bytes @ 0x2C
  2055  0000AC                     	ds	1
  2056  0000AD                     update_lcd@flag:
  2057                           	opt stack 0
  2058                           
  2059                           ; 2 bytes @ 0x2D
  2060  0000AD                     	ds	1
  2061  0000AE                     sprintf@ap:
  2062                           	opt stack 0
  2063                           
  2064                           ; 2 bytes @ 0x2E
  2065  0000AE                     	ds	2
  2066  0000B0                     sprintf@pb:
  2067                           	opt stack 0
  2068                           
  2069                           ; 4 bytes @ 0x30
  2070  0000B0                     	ds	4
  2071  0000B4                     ??_update_state:
  2072  0000B4                     ??_display_menu:
  2073                           
  2074                           ; 1 bytes @ 0x34
  2075  0000B4                     	ds	2
  2076  0000B6                     update_state@i:
  2077                           	opt stack 0
  2078                           
  2079                           ; 1 bytes @ 0x36
  2080  0000B6                     	ds	3
  2081  0000B9                     ??_main:
  2082                           
  2083                           ; 1 bytes @ 0x39
  2084  0000B9                     	ds	1
  2085                           tblptru	equ	0xFF8
  2086                           tblptrh	equ	0xFF7
  2087                           tblptrl	equ	0xFF6
  2088                           tablat	equ	0xFF5
  2089                           postinc0	equ	0xFEE
  2090                           wreg	equ	0xFE8
  2091                           postdec1	equ	0xFE5
  2092                           fsr1h	equ	0xFE2
  2093                           fsr1l	equ	0xFE1
  2094                           
  2095                           	psect	cstackCOMRAM
  2096  000001                     __pcstackCOMRAM:
  2097                           	opt stack 0
  2098  000001                     ??i2_isdigit:
  2099  000001                     ?i2___wmul:
  2100                           	opt stack 0
  2101  000001                     ?i2___awmod:
  2102                           	opt stack 0
  2103  000001                     ?i2___lwdiv:
  2104                           	opt stack 0
  2105  000001                     i2lcdNibble@temp:
  2106                           	opt stack 0
  2107  000001                     i2___wmul@multiplier:
  2108                           	opt stack 0
  2109  000001                     i2___awmod@dividend:
  2110                           	opt stack 0
  2111  000001                     i2___lwdiv@dividend:
  2112                           	opt stack 0
  2113                           
  2114                           ; 2 bytes @ 0x0
  2115  000001                     	ds	1
  2116  000002                     i2lcdNibble@data:
  2117                           	opt stack 0
  2118  000002                     i2_isdigit$777:
  2119                           	opt stack 0
  2120                           
  2121                           ; 1 bytes @ 0x1
  2122  000002                     	ds	1
  2123  000003                     i2lcdInst@data:
  2124                           	opt stack 0
  2125  000003                     i2putch@data:
  2126                           	opt stack 0
  2127  000003                     i2isdigit@c:
  2128                           	opt stack 0
  2129  000003                     i2___wmul@multiplicand:
  2130                           	opt stack 0
  2131  000003                     i2___awmod@divisor:
  2132                           	opt stack 0
  2133  000003                     i2___lwdiv@divisor:
  2134                           	opt stack 0
  2135                           
  2136                           ; 2 bytes @ 0x2
  2137  000003                     	ds	2
  2138  000005                     i2___awmod@counter:
  2139                           	opt stack 0
  2140  000005                     i2___wmul@product:
  2141                           	opt stack 0
  2142  000005                     i2___lwdiv@quotient:
  2143                           	opt stack 0
  2144                           
  2145                           ; 2 bytes @ 0x4
  2146  000005                     	ds	1
  2147  000006                     i2___awmod@sign:
  2148                           	opt stack 0
  2149                           
  2150                           ; 1 bytes @ 0x5
  2151  000006                     	ds	1
  2152  000007                     i2___lwdiv@counter:
  2153                           	opt stack 0
  2154                           
  2155                           ; 1 bytes @ 0x6
  2156  000007                     	ds	1
  2157  000008                     ?i2___lwmod:
  2158                           	opt stack 0
  2159  000008                     i2___lwmod@dividend:
  2160                           	opt stack 0
  2161                           
  2162                           ; 2 bytes @ 0x7
  2163  000008                     	ds	2
  2164  00000A                     i2___lwmod@divisor:
  2165                           	opt stack 0
  2166                           
  2167                           ; 2 bytes @ 0x9
  2168  00000A                     	ds	2
  2169  00000C                     i2___lwmod@counter:
  2170                           	opt stack 0
  2171                           
  2172                           ; 1 bytes @ 0xB
  2173  00000C                     	ds	1
  2174  00000D                     ?i2__doprnt:
  2175                           	opt stack 0
  2176  00000D                     i2__doprnt@pb:
  2177                           	opt stack 0
  2178                           
  2179                           ; 2 bytes @ 0xC
  2180  00000D                     	ds	2
  2181  00000F                     i2__doprnt@f:
  2182                           	opt stack 0
  2183                           
  2184                           ; 2 bytes @ 0xE
  2185  00000F                     	ds	2
  2186  000011                     i2__doprnt@ap:
  2187                           	opt stack 0
  2188                           
  2189                           ; 2 bytes @ 0x10
  2190  000011                     	ds	2
  2191  000013                     ??i2__doprnt:
  2192                           
  2193                           ; 1 bytes @ 0x12
  2194  000013                     	ds	4
  2195  000017                     i2__doprnt@idx:
  2196                           	opt stack 0
  2197                           
  2198                           ; 1 bytes @ 0x16
  2199  000017                     	ds	1
  2200  000018                     i2__doprnt@prec:
  2201                           	opt stack 0
  2202                           
  2203                           ; 1 bytes @ 0x17
  2204  000018                     	ds	1
  2205  000019                     i2__doprnt@len:
  2206                           	opt stack 0
  2207                           
  2208                           ; 2 bytes @ 0x18
  2209  000019                     	ds	2
  2210  00001B                     i2__doprnt@cp:
  2211                           	opt stack 0
  2212                           
  2213                           ; 2 bytes @ 0x1A
  2214  00001B                     	ds	2
  2215  00001D                     i2__doprnt@val:
  2216                           	opt stack 0
  2217                           
  2218                           ; 2 bytes @ 0x1C
  2219  00001D                     	ds	2
  2220  00001F                     i2__doprnt@flag:
  2221                           	opt stack 0
  2222                           
  2223                           ; 1 bytes @ 0x1E
  2224  00001F                     	ds	1
  2225  000020                     i2__doprnt@width:
  2226                           	opt stack 0
  2227                           
  2228                           ; 2 bytes @ 0x1F
  2229  000020                     	ds	2
  2230  000022                     i2__doprnt@c:
  2231                           	opt stack 0
  2232                           
  2233                           ; 1 bytes @ 0x21
  2234  000022                     	ds	1
  2235  000023                     ?i2_printf:
  2236                           	opt stack 0
  2237  000023                     i2printf@f:
  2238                           	opt stack 0
  2239                           
  2240                           ; 2 bytes @ 0x22
  2241  000023                     	ds	2
  2242  000025                     i2printf@ap:
  2243                           	opt stack 0
  2244                           
  2245                           ; 2 bytes @ 0x24
  2246  000025                     	ds	2
  2247  000027                     i2printf@pb:
  2248                           	opt stack 0
  2249                           
  2250                           ; 4 bytes @ 0x26
  2251  000027                     	ds	4
  2252  00002B                     ??_keypressed:
  2253                           
  2254                           ; 1 bytes @ 0x2A
  2255  00002B                     	ds	16
  2256  00003B                     keypressed@i:
  2257                           	opt stack 0
  2258                           
  2259                           ; 2 bytes @ 0x3A
  2260  00003B                     	ds	2
  2261  00003D                     keypressed@keypress:
  2262                           	opt stack 0
  2263                           
  2264                           ; 1 bytes @ 0x3C
  2265  00003D                     	ds	1
  2266                           tblptru	equ	0xFF8
  2267                           tblptrh	equ	0xFF7
  2268                           tblptrl	equ	0xFF6
  2269                           tablat	equ	0xFF5
  2270                           postinc0	equ	0xFEE
  2271                           wreg	equ	0xFE8
  2272                           postdec1	equ	0xFE5
  2273                           fsr1h	equ	0xFE2
  2274                           fsr1l	equ	0xFE1
  2275                           
  2276 ;;
  2277 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2278 ;;
  2279 ;; *************** function _main *****************
  2280 ;; Defined at:
  2281 ;;		line 108 in file "main.c"
  2282 ;; Parameters:    Size  Location     Type
  2283 ;;		None
  2284 ;; Auto vars:     Size  Location     Type
  2285 ;;		None
  2286 ;; Return value:  Size  Location     Type
  2287 ;;                  1    wreg      void 
  2288 ;; Registers used:
  2289 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2290 ;; Tracked objects:
  2291 ;;		On entry : 0/0
  2292 ;;		On exit  : 0/0
  2293 ;;		Unchanged: 0/0
  2294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2295 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2297 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2298 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2299 ;;Total ram usage:        1 bytes
  2300 ;; Hardware stack levels required when called:   11
  2301 ;; This function calls:
  2302 ;;		_I2C_Master_Init
  2303 ;;		_initLCD
  2304 ;;		_read_sensors
  2305 ;;		_set_time
  2306 ;;		_sort
  2307 ;;		_update_RTC
  2308 ;;		_update_display
  2309 ;;		_update_lcd
  2310 ;;		_update_state
  2311 ;; This function is called by:
  2312 ;;		Startup code after reset
  2313 ;; This function uses a non-reentrant model
  2314 ;;
  2315                           
  2316                           	psect	text0
  2317  003576                     __ptext0:
  2318                           	opt stack 0
  2319  003576                     _main:
  2320                           	opt stack 20
  2321                           
  2322                           ;main.c: 110: discretize=3000/(40);
  2323                           
  2324                           ;incstack = 0
  2325  003576  0E00               	movlw	0
  2326  003578  0100               	movlb	0	; () banked
  2327  00357A  6FF8               	movwf	(_discretize+1)& (0+255),b
  2328  00357C  0E4B               	movlw	75
  2329  00357E  6FF7               	movwf	_discretize& (0+255),b
  2330                           
  2331                           ;main.c: 111: release=(4000)/(40);
  2332  003580  0E00               	movlw	0
  2333  003582  6E75               	movwf	_release+1,c
  2334  003584  0E64               	movlw	100
  2335  003586  6E74               	movwf	_release,c
  2336                           
  2337                           ;main.c: 112: measure=5+500/(40);
  2338  003588  0E00               	movlw	0
  2339  00358A  6E73               	movwf	_measure+1,c
  2340  00358C  0E11               	movlw	17
  2341  00358E  6E72               	movwf	_measure,c
  2342                           
  2343                           ;main.c: 117: TRISA = 0xE7;
  2344  003590  0EE7               	movlw	231
  2345  003592  6E92               	movwf	3986,c	;volatile
  2346                           
  2347                           ;main.c: 118: TRISC = 0x00;
  2348  003594  0E00               	movlw	0
  2349  003596  6E94               	movwf	3988,c	;volatile
  2350                           
  2351                           ;main.c: 119: TRISD = 0x00;
  2352  003598  0E00               	movlw	0
  2353  00359A  6E95               	movwf	3989,c	;volatile
  2354                           
  2355                           ; BSR set to: 0
  2356                           ;main.c: 120: TRISB = 0xFF;
  2357  00359C  6893               	setf	3987,c	;volatile
  2358                           
  2359                           ; BSR set to: 0
  2360                           ;main.c: 121: TRISE = 0xFF;
  2361  00359E  6896               	setf	3990,c	;volatile
  2362                           
  2363                           ;main.c: 122: LATB = 0x00;
  2364  0035A0  0E00               	movlw	0
  2365  0035A2  6E8A               	movwf	3978,c	;volatile
  2366                           
  2367                           ;main.c: 124: LATE= 0x00;
  2368  0035A4  0E00               	movlw	0
  2369  0035A6  6E8D               	movwf	3981,c	;volatile
  2370                           
  2371                           ;main.c: 126: ADCON0 = 0x00;
  2372  0035A8  0E00               	movlw	0
  2373  0035AA  6EC2               	movwf	4034,c	;volatile
  2374                           
  2375                           ;main.c: 127: ADCON1 = 0x0B;
  2376  0035AC  0E0B               	movlw	11
  2377  0035AE  6EC1               	movwf	4033,c	;volatile
  2378                           
  2379                           ;main.c: 128: CVRCON = 0x00;
  2380  0035B0  0E00               	movlw	0
  2381  0035B2  6EB5               	movwf	4021,c	;volatile
  2382                           
  2383                           ; BSR set to: 0
  2384                           ;main.c: 129: CMCONbits.CIS = 0;
  2385  0035B4  96B4               	bcf	4020,3,c	;volatile
  2386                           
  2387                           ; BSR set to: 0
  2388                           ;main.c: 130: ADFM = 1;
  2389  0035B6  8EC0               	bsf	4032,7,c	;volatile
  2390                           
  2391                           ; BSR set to: 0
  2392                           ;main.c: 132: initLCD();
  2393  0035B8  ECB2  F01D         	call	_initLCD	;wreg free
  2394                           
  2395                           ;main.c: 133: INT1IE = 1;
  2396  0035BC  86F0               	bsf	intcon3,3,c	;volatile
  2397                           
  2398                           ;main.c: 134: nRBPU = 0;
  2399  0035BE  9EF1               	bcf	intcon2,7,c	;volatile
  2400                           
  2401                           ;main.c: 135: I2C_Master_Init(10000);
  2402  0035C0  0E10               	movlw	16
  2403  0035C2  0100               	movlb	0	; () banked
  2404  0035C4  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2405  0035C6  0E27               	movlw	39
  2406  0035C8  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2407  0035CA  0E00               	movlw	0
  2408  0035CC  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2409  0035CE  0E00               	movlw	0
  2410  0035D0  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2411  0035D2  ECB5  F01C         	call	_I2C_Master_Init	;wreg free
  2412                           
  2413                           ;main.c: 137: (INTCONbits.GIE = 0);
  2414  0035D6  9EF2               	bcf	intcon,7,c	;volatile
  2415                           
  2416                           ;main.c: 138: set_time();
  2417  0035D8  EC84  F01C         	call	_set_time	;wreg free
  2418  0035DC                     l8501:
  2419                           
  2420                           ;main.c: 140: (INTCONbits.GIE = 0);
  2421  0035DC  9EF2               	bcf	intcon,7,c	;volatile
  2422                           
  2423                           ;main.c: 141: update_RTC();
  2424  0035DE  EC72  F018         	call	_update_RTC	;wreg free
  2425                           
  2426                           ;main.c: 142: if (state=='s'){
  2427  0035E2  0E73               	movlw	115
  2428  0035E4  0100               	movlb	0	; () banked
  2429  0035E6  19E6               	xorwf	_state& (0+255),w,b
  2430  0035E8  A4D8               	btfss	status,2,c
  2431  0035EA  D004               	goto	l8509
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;main.c: 143: read_sensors();
  2435  0035EC  EC2C  F017         	call	_read_sensors	;wreg free
  2436                           
  2437                           ;main.c: 144: sort();
  2438  0035F0  EC8C  F010         	call	_sort	;wreg free
  2439  0035F4                     l8509:
  2440                           
  2441                           ;main.c: 145: }
  2442                           ;main.c: 146: update_state();
  2443  0035F4  EC45  F014         	call	_update_state	;wreg free
  2444                           
  2445                           ;main.c: 147: update_display();
  2446  0035F8  ECA5  F012         	call	_update_display	;wreg free
  2447                           
  2448                           ;main.c: 148: update_lcd();
  2449  0035FC  EC70  F019         	call	_update_lcd	;wreg free
  2450  003600                     l8515:
  2451  003600  0E78               	movlw	120
  2452  003602  0100               	movlb	0	; () banked
  2453  003604  19E6               	xorwf	_state& (0+255),w,b
  2454  003606  B4D8               	btfsc	status,2,c
  2455  003608  D7FB               	goto	l8515
  2456                           
  2457                           ; BSR set to: 0
  2458                           ;main.c: 150: (INTCONbits.GIE = 1);
  2459  00360A  8EF2               	bsf	intcon,7,c	;volatile
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;main.c: 151: _delay((unsigned long)((40-10)*(10000000/4000.0)));
  2463  00360C  0E62               	movlw	98
  2464  00360E  0100               	movlb	0	; () banked
  2465  003610  6FB9               	movwf	??_main& (0+255),b
  2466  003612  0E65               	movlw	101
  2467  003614                     u14287:
  2468  003614  2EE8               	decfsz	wreg,f,c
  2469  003616  D7FE               	bra	u14287
  2470  003618  2FB9               	decfsz	??_main& (0+255),f,b
  2471  00361A  D7FC               	bra	u14287
  2472  00361C  D000               	nop2	
  2473                           
  2474                           ;main.c: 152: (INTCONbits.GIE = 0);
  2475  00361E  9EF2               	bcf	intcon,7,c	;volatile
  2476  003620  D7DD               	goto	l8501
  2477  003622                     __end_of_main:
  2478                           	opt stack 0
  2479                           tblptru	equ	0xFF8
  2480                           tblptrh	equ	0xFF7
  2481                           tblptrl	equ	0xFF6
  2482                           tablat	equ	0xFF5
  2483                           intcon	equ	0xFF2
  2484                           intcon2	equ	0xFF1
  2485                           intcon3	equ	0xFF0
  2486                           postinc0	equ	0xFEE
  2487                           wreg	equ	0xFE8
  2488                           postdec1	equ	0xFE5
  2489                           fsr1h	equ	0xFE2
  2490                           fsr1l	equ	0xFE1
  2491                           status	equ	0xFD8
  2492                           
  2493 ;; *************** function _update_state *****************
  2494 ;; Defined at:
  2495 ;;		line 275 in file "main.c"
  2496 ;; Parameters:    Size  Location     Type
  2497 ;;		None
  2498 ;; Auto vars:     Size  Location     Type
  2499 ;;  i               1   54[BANK0 ] unsigned char 
  2500 ;; Return value:  Size  Location     Type
  2501 ;;                  1    wreg      void 
  2502 ;; Registers used:
  2503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2504 ;; Tracked objects:
  2505 ;;		On entry : 0/0
  2506 ;;		On exit  : 0/0
  2507 ;;		Unchanged: 0/0
  2508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2510 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2511 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2512 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2513 ;;Total ram usage:        3 bytes
  2514 ;; Hardware stack levels used:    1
  2515 ;; Hardware stack levels required when called:    9
  2516 ;; This function calls:
  2517 ;;		___awdiv
  2518 ;;		___awmod
  2519 ;;		_sprintf
  2520 ;; This function is called by:
  2521 ;;		_main
  2522 ;; This function uses a non-reentrant model
  2523 ;;
  2524                           
  2525                           	psect	text1
  2526  00288A                     __ptext1:
  2527                           	opt stack 0
  2528  00288A                     _update_state:
  2529                           	opt stack 21
  2530                           
  2531                           ;main.c: 276: if ((nstate=='s'&&state!='s')||(nstate=='m'&&state!='m')){
  2532                           
  2533                           ;incstack = 0
  2534  00288A  0E73               	movlw	115
  2535  00288C  0100               	movlb	0	; () banked
  2536  00288E  19E5               	xorwf	_nstate& (0+255),w,b
  2537  002890  A4D8               	btfss	status,2,c
  2538  002892  D005               	goto	l8335
  2539                           
  2540                           ; BSR set to: 0
  2541  002894  0E73               	movlw	115
  2542  002896  0100               	movlb	0	; () banked
  2543  002898  19E6               	xorwf	_state& (0+255),w,b
  2544  00289A  A4D8               	btfss	status,2,c
  2545  00289C  D00A               	goto	l8339
  2546  00289E                     l8335:
  2547                           
  2548                           ; BSR set to: 0
  2549  00289E  0E6D               	movlw	109
  2550  0028A0  0100               	movlb	0	; () banked
  2551  0028A2  19E5               	xorwf	_nstate& (0+255),w,b
  2552  0028A4  A4D8               	btfss	status,2,c
  2553  0028A6  D04B               	goto	l8357
  2554                           
  2555                           ; BSR set to: 0
  2556  0028A8  0E6D               	movlw	109
  2557  0028AA  0100               	movlb	0	; () banked
  2558  0028AC  19E6               	xorwf	_state& (0+255),w,b
  2559  0028AE  B4D8               	btfsc	status,2,c
  2560  0028B0  D046               	goto	l8357
  2561  0028B2                     l8339:
  2562                           
  2563                           ; BSR set to: 0
  2564                           ;main.c: 277: for (char i=0;i<7;i++){
  2565  0028B2  0E00               	movlw	0
  2566  0028B4  0100               	movlb	0	; () banked
  2567  0028B6  6FB6               	movwf	update_state@i& (0+255),b
  2568  0028B8                     l8341:
  2569                           
  2570                           ; BSR set to: 0
  2571  0028B8  0E06               	movlw	6
  2572  0028BA  0100               	movlb	0	; () banked
  2573  0028BC  65B6               	cpfsgt	update_state@i& (0+255),b
  2574  0028BE  D001               	goto	l8345
  2575  0028C0  D03E               	goto	l8357
  2576  0028C2                     l8345:
  2577                           
  2578                           ; BSR set to: 0
  2579                           ;main.c: 278: startTime[i]=time_i[i];
  2580  0028C2  0100               	movlb	0	; () banked
  2581  0028C4  51B6               	movf	update_state@i& (0+255),w,b
  2582  0028C6  0D02               	mullw	2
  2583  0028C8  0E3E               	movlw	low _time_i
  2584  0028CA  24F3               	addwf	prodl,w,c
  2585  0028CC  6ED9               	movwf	fsr2l,c
  2586  0028CE  0E00               	movlw	high _time_i
  2587  0028D0  20F4               	addwfc	prodh,w,c
  2588  0028D2  6EDA               	movwf	fsr2h,c
  2589  0028D4  0100               	movlb	0	; () banked
  2590  0028D6  51B6               	movf	update_state@i& (0+255),w,b
  2591  0028D8  0D02               	mullw	2
  2592  0028DA  0E0E               	movlw	low _startTime
  2593  0028DC  24F3               	addwf	prodl,w,c
  2594  0028DE  6EE1               	movwf	fsr1l,c
  2595  0028E0  0E01               	movlw	high _startTime
  2596  0028E2  20F4               	addwfc	prodh,w,c
  2597  0028E4  6EE2               	movwf	fsr1h,c
  2598  0028E6  CFDE FFE6          	movff	postinc2,postinc1
  2599  0028EA  CFDD FFE5          	movff	postdec2,postdec1
  2600                           
  2601                           ;main.c: 279: latestSortedBottleTime[i]=time_i[i];
  2602  0028EE  0100               	movlb	0	; () banked
  2603  0028F0  51B6               	movf	update_state@i& (0+255),w,b
  2604  0028F2  0D02               	mullw	2
  2605  0028F4  0E3E               	movlw	low _time_i
  2606  0028F6  24F3               	addwf	prodl,w,c
  2607  0028F8  6ED9               	movwf	fsr2l,c
  2608  0028FA  0E00               	movlw	high _time_i
  2609  0028FC  20F4               	addwfc	prodh,w,c
  2610  0028FE  6EDA               	movwf	fsr2h,c
  2611  002900  0100               	movlb	0	; () banked
  2612  002902  51B6               	movf	update_state@i& (0+255),w,b
  2613  002904  0D02               	mullw	2
  2614  002906  0E00               	movlw	low _latestSortedBottleTime
  2615  002908  24F3               	addwf	prodl,w,c
  2616  00290A  6EE1               	movwf	fsr1l,c
  2617  00290C  0E01               	movlw	high _latestSortedBottleTime
  2618  00290E  20F4               	addwfc	prodh,w,c
  2619  002910  6EE2               	movwf	fsr1h,c
  2620  002912  CFDE FFE6          	movff	postinc2,postinc1
  2621  002916  CFDD FFE5          	movff	postdec2,postdec1
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;main.c: 280: discretize_counter=3000/40;
  2625  00291A  0E00               	movlw	0
  2626  00291C  0100               	movlb	0	; () banked
  2627  00291E  6FC8               	movwf	(_discretize_counter+1)& (0+255),b
  2628  002920  0E4B               	movlw	75
  2629  002922  6FC7               	movwf	_discretize_counter& (0+255),b
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;main.c: 281: measure_counter=0;
  2633  002924  0E00               	movlw	0
  2634  002926  0100               	movlb	0	; () banked
  2635  002928  6FCE               	movwf	(_measure_counter+1)& (0+255),b
  2636  00292A  0E00               	movlw	0
  2637  00292C  6FCD               	movwf	_measure_counter& (0+255),b
  2638                           
  2639                           ; BSR set to: 0
  2640                           ;main.c: 282: release_counter=0;
  2641  00292E  0E00               	movlw	0
  2642  002930  0100               	movlb	0	; () banked
  2643  002932  6FD0               	movwf	(_release_counter+1)& (0+255),b
  2644  002934  0E00               	movlw	0
  2645  002936  6FCF               	movwf	_release_counter& (0+255),b
  2646                           
  2647                           ; BSR set to: 0
  2648  002938  0100               	movlb	0	; () banked
  2649  00293A  2BB6               	incf	update_state@i& (0+255),f,b
  2650  00293C  D7BD               	goto	l8341
  2651  00293E                     l8357:
  2652                           
  2653                           ; BSR set to: 0
  2654                           ;main.c: 283: }
  2655                           ;main.c: 284: }
  2656                           ;main.c: 285: sorted_bottles=eskaNoCap+eskaWCap+yopNoCap+yopWCap;
  2657  00293E  0100               	movlb	0	; () banked
  2658  002940  51CB               	movf	_eskaWCap& (0+255),w,b
  2659  002942  0100               	movlb	0	; () banked
  2660  002944  25C9               	addwf	_eskaNoCap& (0+255),w,b
  2661  002946  0100               	movlb	0	; () banked
  2662  002948  6FB4               	movwf	??_update_state& (0+255),b
  2663  00294A  0100               	movlb	0	; () banked
  2664  00294C  51CC               	movf	(_eskaWCap+1)& (0+255),w,b
  2665  00294E  0100               	movlb	0	; () banked
  2666  002950  21CA               	addwfc	(_eskaNoCap+1)& (0+255),w,b
  2667  002952  0100               	movlb	0	; () banked
  2668  002954  6FB5               	movwf	(??_update_state+1)& (0+255),b
  2669  002956  0100               	movlb	0	; () banked
  2670  002958  51D7               	movf	_yopNoCap& (0+255),w,b
  2671  00295A  0100               	movlb	0	; () banked
  2672  00295C  27B4               	addwf	??_update_state& (0+255),f,b
  2673  00295E  0100               	movlb	0	; () banked
  2674  002960  51D8               	movf	(_yopNoCap+1)& (0+255),w,b
  2675  002962  0100               	movlb	0	; () banked
  2676  002964  23B5               	addwfc	(??_update_state+1)& (0+255),f,b
  2677  002966  0100               	movlb	0	; () banked
  2678  002968  51D9               	movf	_yopWCap& (0+255),w,b
  2679  00296A  0100               	movlb	0	; () banked
  2680  00296C  25B4               	addwf	??_update_state& (0+255),w,b
  2681  00296E  0100               	movlb	0	; () banked
  2682  002970  6FD3               	movwf	_sorted_bottles& (0+255),b
  2683  002972  0100               	movlb	0	; () banked
  2684  002974  51DA               	movf	(_yopWCap+1)& (0+255),w,b
  2685  002976  0100               	movlb	0	; () banked
  2686  002978  21B5               	addwfc	(??_update_state+1)& (0+255),w,b
  2687  00297A  0100               	movlb	0	; () banked
  2688  00297C  6FD4               	movwf	(_sorted_bottles+1)& (0+255),b
  2689                           
  2690                           ; BSR set to: 0
  2691                           ;main.c: 286: sorted_bottles%=100;
  2692  00297E  C0D3  F080         	movff	_sorted_bottles,___awmod@dividend
  2693  002982  C0D4  F081         	movff	_sorted_bottles+1,___awmod@dividend+1
  2694  002986  0E00               	movlw	0
  2695  002988  0100               	movlb	0	; () banked
  2696  00298A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2697  00298C  0E64               	movlw	100
  2698  00298E  6F82               	movwf	___awmod@divisor& (0+255),b
  2699  002990  EC11  F01B         	call	___awmod	;wreg free
  2700  002994  C080  F0D3         	movff	?___awmod,_sorted_bottles
  2701  002998  C081  F0D4         	movff	?___awmod+1,_sorted_bottles+1
  2702                           
  2703                           ;main.c: 287: if (state=='s'&&timeDiff>=180){
  2704  00299C  0E73               	movlw	115
  2705  00299E  0100               	movlb	0	; () banked
  2706  0029A0  19E6               	xorwf	_state& (0+255),w,b
  2707  0029A2  A4D8               	btfss	status,2,c
  2708  0029A4  D00E               	goto	l8367
  2709                           
  2710                           ; BSR set to: 0
  2711  0029A6  0100               	movlb	0	; () banked
  2712  0029A8  BFD6               	btfsc	(_timeDiff+1)& (0+255),7,b
  2713  0029AA  D00B               	goto	l8367
  2714  0029AC  0100               	movlb	0	; () banked
  2715  0029AE  51D6               	movf	(_timeDiff+1)& (0+255),w,b
  2716  0029B0  E105               	bnz	u13680
  2717  0029B2  0EB4               	movlw	180
  2718  0029B4  0100               	movlb	0	; () banked
  2719  0029B6  5DD5               	subwf	_timeDiff& (0+255),w,b
  2720  0029B8  A0D8               	btfss	status,0,c
  2721  0029BA  D003               	goto	l8367
  2722  0029BC                     u13680:
  2723                           
  2724                           ; BSR set to: 0
  2725                           ;main.c: 288: nstate='e';
  2726  0029BC  0E65               	movlw	101
  2727  0029BE  0100               	movlb	0	; () banked
  2728  0029C0  6FE5               	movwf	_nstate& (0+255),b
  2729  0029C2                     l8367:
  2730                           
  2731                           ; BSR set to: 0
  2732                           ;main.c: 289: }
  2733                           ;main.c: 290: if (nstate=='e'&&state!='e'){
  2734  0029C2  0E65               	movlw	101
  2735  0029C4  0100               	movlb	0	; () banked
  2736  0029C6  19E5               	xorwf	_nstate& (0+255),w,b
  2737  0029C8  A4D8               	btfss	status,2,c
  2738  0029CA  D073               	goto	l8375
  2739                           
  2740                           ; BSR set to: 0
  2741  0029CC  0E65               	movlw	101
  2742  0029CE  0100               	movlb	0	; () banked
  2743  0029D0  19E6               	xorwf	_state& (0+255),w,b
  2744  0029D2  B4D8               	btfsc	status,2,c
  2745  0029D4  D06E               	goto	l8375
  2746                           
  2747                           ; BSR set to: 0
  2748                           ;main.c: 291: runTime=timeDiff;
  2749  0029D6  C0D5  F0D1         	movff	_timeDiff,_runTime
  2750  0029DA  C0D6  F0D2         	movff	_timeDiff+1,_runTime+1
  2751                           
  2752                           ; BSR set to: 0
  2753                           ;main.c: 292: sprintf(menu[3][0],"bottles: %02d    \0", sorted_bottles);
  2754  0029DE  0E9E               	movlw	low (_menu+540)
  2755  0029E0  0100               	movlb	0	; () banked
  2756  0029E2  6FA2               	movwf	sprintf@wh& (0+255),b
  2757  0029E4  0E03               	movlw	high (_menu+540)
  2758  0029E6  0100               	movlb	0	; () banked
  2759  0029E8  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2760  0029EA  0E06               	movlw	low STR_16
  2761  0029EC  0100               	movlb	0	; () banked
  2762  0029EE  6FA4               	movwf	sprintf@f& (0+255),b
  2763  0029F0  0EFF               	movlw	high STR_16
  2764  0029F2  0100               	movlb	0	; () banked
  2765  0029F4  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2766  0029F6  C0D3  F0A6         	movff	_sorted_bottles,?_sprintf+4
  2767  0029FA  C0D4  F0A7         	movff	_sorted_bottles+1,?_sprintf+5
  2768  0029FE  EC3B  F01D         	call	_sprintf	;wreg free
  2769                           
  2770                           ;main.c: 293: sprintf(menu[3][1],"run time: %01d:%02d \0",(runTime/60),timeDiff%60);
  2771  002A02  0EB0               	movlw	low (_menu+558)
  2772  002A04  0100               	movlb	0	; () banked
  2773  002A06  6FA2               	movwf	sprintf@wh& (0+255),b
  2774  002A08  0E03               	movlw	high (_menu+558)
  2775  002A0A  0100               	movlb	0	; () banked
  2776  002A0C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2777  002A0E  0EC8               	movlw	low STR_17
  2778  002A10  0100               	movlb	0	; () banked
  2779  002A12  6FA4               	movwf	sprintf@f& (0+255),b
  2780  002A14  0EFE               	movlw	high STR_17
  2781  002A16  0100               	movlb	0	; () banked
  2782  002A18  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2783  002A1A  C0D1  F080         	movff	_runTime,___awdiv@dividend
  2784  002A1E  C0D2  F081         	movff	_runTime+1,___awdiv@dividend+1
  2785  002A22  0E00               	movlw	0
  2786  002A24  0100               	movlb	0	; () banked
  2787  002A26  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2788  002A28  0E3C               	movlw	60
  2789  002A2A  6F82               	movwf	___awdiv@divisor& (0+255),b
  2790  002A2C  ECFE  F019         	call	___awdiv	;wreg free
  2791  002A30  C080  F0A6         	movff	?___awdiv,?_sprintf+4
  2792  002A34  C081  F0A7         	movff	?___awdiv+1,?_sprintf+5
  2793  002A38  C0D5  F080         	movff	_timeDiff,___awmod@dividend
  2794  002A3C  C0D6  F081         	movff	_timeDiff+1,___awmod@dividend+1
  2795  002A40  0E00               	movlw	0
  2796  002A42  0100               	movlb	0	; () banked
  2797  002A44  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2798  002A46  0E3C               	movlw	60
  2799  002A48  6F82               	movwf	___awmod@divisor& (0+255),b
  2800  002A4A  EC11  F01B         	call	___awmod	;wreg free
  2801  002A4E  C080  F0A8         	movff	?___awmod,?_sprintf+6
  2802  002A52  C081  F0A9         	movff	?___awmod+1,?_sprintf+7
  2803  002A56  EC3B  F01D         	call	_sprintf	;wreg free
  2804                           
  2805                           ;main.c: 294: sprintf(menu[3][2],"en:%02d ec:%02d    ", eskaNoCap,eskaWCap);
  2806  002A5A  0EC2               	movlw	low (_menu+576)
  2807  002A5C  0100               	movlb	0	; () banked
  2808  002A5E  6FA2               	movwf	sprintf@wh& (0+255),b
  2809  002A60  0E03               	movlw	high (_menu+576)
  2810  002A62  0100               	movlb	0	; () banked
  2811  002A64  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2812  002A66  0EDE               	movlw	low STR_18
  2813  002A68  0100               	movlb	0	; () banked
  2814  002A6A  6FA4               	movwf	sprintf@f& (0+255),b
  2815  002A6C  0EFE               	movlw	high STR_18
  2816  002A6E  0100               	movlb	0	; () banked
  2817  002A70  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2818  002A72  C0C9  F0A6         	movff	_eskaNoCap,?_sprintf+4
  2819  002A76  C0CA  F0A7         	movff	_eskaNoCap+1,?_sprintf+5
  2820  002A7A  C0CB  F0A8         	movff	_eskaWCap,?_sprintf+6
  2821  002A7E  C0CC  F0A9         	movff	_eskaWCap+1,?_sprintf+7
  2822  002A82  EC3B  F01D         	call	_sprintf	;wreg free
  2823                           
  2824                           ;main.c: 295: sprintf(menu[3][3],"yn:%02d yc:%02d    ", yopNoCap, yopWCap);
  2825  002A86  0ED4               	movlw	low (_menu+594)
  2826  002A88  0100               	movlb	0	; () banked
  2827  002A8A  6FA2               	movwf	sprintf@wh& (0+255),b
  2828  002A8C  0E03               	movlw	high (_menu+594)
  2829  002A8E  0100               	movlb	0	; () banked
  2830  002A90  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2831  002A92  0EF2               	movlw	low STR_19
  2832  002A94  0100               	movlb	0	; () banked
  2833  002A96  6FA4               	movwf	sprintf@f& (0+255),b
  2834  002A98  0EFE               	movlw	high STR_19
  2835  002A9A  0100               	movlb	0	; () banked
  2836  002A9C  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2837  002A9E  C0D7  F0A6         	movff	_yopNoCap,?_sprintf+4
  2838  002AA2  C0D8  F0A7         	movff	_yopNoCap+1,?_sprintf+5
  2839  002AA6  C0D9  F0A8         	movff	_yopWCap,?_sprintf+6
  2840  002AAA  C0DA  F0A9         	movff	_yopWCap+1,?_sprintf+7
  2841  002AAE  EC3B  F01D         	call	_sprintf	;wreg free
  2842  002AB2                     l8375:
  2843                           
  2844                           ;main.c: 296: }
  2845                           ;main.c: 297: if ((state=='m'||state=='l'||state=='c')&&timeDiff>=10){
  2846  002AB2  0E6D               	movlw	109
  2847  002AB4  0100               	movlb	0	; () banked
  2848  002AB6  19E6               	xorwf	_state& (0+255),w,b
  2849  002AB8  B4D8               	btfsc	status,2,c
  2850  002ABA  D00A               	goto	l8381
  2851                           
  2852                           ; BSR set to: 0
  2853  002ABC  0E6C               	movlw	108
  2854  002ABE  0100               	movlb	0	; () banked
  2855  002AC0  19E6               	xorwf	_state& (0+255),w,b
  2856  002AC2  B4D8               	btfsc	status,2,c
  2857  002AC4  D005               	goto	l8381
  2858                           
  2859                           ; BSR set to: 0
  2860  002AC6  0E63               	movlw	99
  2861  002AC8  0100               	movlb	0	; () banked
  2862  002ACA  19E6               	xorwf	_state& (0+255),w,b
  2863  002ACC  A4D8               	btfss	status,2,c
  2864  002ACE  D00E               	goto	l8385
  2865  002AD0                     l8381:
  2866                           
  2867                           ; BSR set to: 0
  2868  002AD0  0100               	movlb	0	; () banked
  2869  002AD2  BFD6               	btfsc	(_timeDiff+1)& (0+255),7,b
  2870  002AD4  D00B               	goto	l8385
  2871  002AD6  0100               	movlb	0	; () banked
  2872  002AD8  51D6               	movf	(_timeDiff+1)& (0+255),w,b
  2873  002ADA  E105               	bnz	u13740
  2874  002ADC  0E0A               	movlw	10
  2875  002ADE  0100               	movlb	0	; () banked
  2876  002AE0  5DD5               	subwf	_timeDiff& (0+255),w,b
  2877  002AE2  A0D8               	btfss	status,0,c
  2878  002AE4  D003               	goto	l8385
  2879  002AE6                     u13740:
  2880                           
  2881                           ; BSR set to: 0
  2882                           ;main.c: 298: nstate='r';
  2883  002AE6  0E72               	movlw	114
  2884  002AE8  0100               	movlb	0	; () banked
  2885  002AEA  6FE5               	movwf	_nstate& (0+255),b
  2886  002AEC                     l8385:
  2887                           
  2888                           ; BSR set to: 0
  2889                           ;main.c: 299: }
  2890                           ;main.c: 301: if (nstate!='m'&&nstate!='l'&&nstate!='c')
  2891  002AEC  0E6D               	movlw	109
  2892  002AEE  0100               	movlb	0	; () banked
  2893  002AF0  19E5               	xorwf	_nstate& (0+255),w,b
  2894  002AF2  B4D8               	btfsc	status,2,c
  2895  002AF4  D019               	goto	l8393
  2896                           
  2897                           ; BSR set to: 0
  2898  002AF6  0E6C               	movlw	108
  2899  002AF8  0100               	movlb	0	; () banked
  2900  002AFA  19E5               	xorwf	_nstate& (0+255),w,b
  2901  002AFC  B4D8               	btfsc	status,2,c
  2902  002AFE  D014               	goto	l8393
  2903                           
  2904                           ; BSR set to: 0
  2905  002B00  0E63               	movlw	99
  2906  002B02  0100               	movlb	0	; () banked
  2907  002B04  19E5               	xorwf	_nstate& (0+255),w,b
  2908  002B06  B4D8               	btfsc	status,2,c
  2909  002B08  D00F               	goto	l8393
  2910                           
  2911                           ; BSR set to: 0
  2912                           ;main.c: 302: {
  2913                           ;main.c: 303: menuIndex=1;
  2914  002B0A  0E00               	movlw	0
  2915  002B0C  0100               	movlb	0	; () banked
  2916  002B0E  6FF4               	movwf	(_menuIndex+1)& (0+255),b
  2917  002B10  0E01               	movlw	1
  2918  002B12  6FF3               	movwf	_menuIndex& (0+255),b
  2919                           
  2920                           ;main.c: 304: logIndex=1;
  2921  002B14  0E00               	movlw	0
  2922  002B16  0100               	movlb	0	; () banked
  2923  002B18  6FF2               	movwf	(_logIndex+1)& (0+255),b
  2924  002B1A  0E01               	movlw	1
  2925  002B1C  6FF1               	movwf	_logIndex& (0+255),b
  2926                           
  2927                           ;main.c: 305: creditIndex=1;
  2928  002B1E  0E00               	movlw	0
  2929  002B20  0100               	movlb	0	; () banked
  2930  002B22  6FE8               	movwf	(_creditIndex+1)& (0+255),b
  2931  002B24  0E01               	movlw	1
  2932  002B26  6FE7               	movwf	_creditIndex& (0+255),b
  2933  002B28                     l8393:
  2934                           
  2935                           ; BSR set to: 0
  2936                           ;main.c: 306: }
  2937                           ;main.c: 307: if (nstate!='s')
  2938  002B28  0E73               	movlw	115
  2939  002B2A  0100               	movlb	0	; () banked
  2940  002B2C  19E5               	xorwf	_nstate& (0+255),w,b
  2941  002B2E  B4D8               	btfsc	status,2,c
  2942  002B30  D005               	goto	l8397
  2943                           
  2944                           ; BSR set to: 0
  2945                           ;main.c: 308: sortIndex=1;
  2946  002B32  0E00               	movlw	0
  2947  002B34  0100               	movlb	0	; () banked
  2948  002B36  6FE4               	movwf	(_sortIndex+1)& (0+255),b
  2949  002B38  0E01               	movlw	1
  2950  002B3A  6FE3               	movwf	_sortIndex& (0+255),b
  2951  002B3C                     l8397:
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;main.c: 309: if (nstate!='e')
  2955  002B3C  0E65               	movlw	101
  2956  002B3E  0100               	movlb	0	; () banked
  2957  002B40  19E5               	xorwf	_nstate& (0+255),w,b
  2958  002B42  B4D8               	btfsc	status,2,c
  2959  002B44  D005               	goto	l8401
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;main.c: 310: endIndex=1;
  2963  002B46  0E00               	movlw	0
  2964  002B48  0100               	movlb	0	; () banked
  2965  002B4A  6FEC               	movwf	(_endIndex+1)& (0+255),b
  2966  002B4C  0E01               	movlw	1
  2967  002B4E  6FEB               	movwf	_endIndex& (0+255),b
  2968  002B50                     l8401:
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;main.c: 312: state=nstate;
  2972  002B50  C0E5  F0E6         	movff	_nstate,_state
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;main.c: 320: if (state=='r'){
  2976  002B54  0E72               	movlw	114
  2977  002B56  0100               	movlb	0	; () banked
  2978  002B58  19E6               	xorwf	_state& (0+255),w,b
  2979  002B5A  A4D8               	btfss	status,2,c
  2980  002B5C  0012               	return	
  2981                           
  2982                           ; BSR set to: 0
  2983                           ;main.c: 321: eskaNoCap=0;
  2984  002B5E  0E00               	movlw	0
  2985  002B60  0100               	movlb	0	; () banked
  2986  002B62  6FCA               	movwf	(_eskaNoCap+1)& (0+255),b
  2987  002B64  0E00               	movlw	0
  2988  002B66  6FC9               	movwf	_eskaNoCap& (0+255),b
  2989                           
  2990                           ;main.c: 322: eskaWCap=0;
  2991  002B68  0E00               	movlw	0
  2992  002B6A  0100               	movlb	0	; () banked
  2993  002B6C  6FCC               	movwf	(_eskaWCap+1)& (0+255),b
  2994  002B6E  0E00               	movlw	0
  2995  002B70  6FCB               	movwf	_eskaWCap& (0+255),b
  2996                           
  2997                           ;main.c: 323: yopNoCap=0;
  2998  002B72  0E00               	movlw	0
  2999  002B74  0100               	movlb	0	; () banked
  3000  002B76  6FD8               	movwf	(_yopNoCap+1)& (0+255),b
  3001  002B78  0E00               	movlw	0
  3002  002B7A  6FD7               	movwf	_yopNoCap& (0+255),b
  3003                           
  3004                           ;main.c: 324: yopWCap=0;
  3005  002B7C  0E00               	movlw	0
  3006  002B7E  0100               	movlb	0	; () banked
  3007  002B80  6FDA               	movwf	(_yopWCap+1)& (0+255),b
  3008  002B82  0E00               	movlw	0
  3009  002B84  6FD9               	movwf	_yopWCap& (0+255),b
  3010  002B86  0012               	return	
  3011  002B88                     __end_of_update_state:
  3012                           	opt stack 0
  3013                           tblptru	equ	0xFF8
  3014                           tblptrh	equ	0xFF7
  3015                           tblptrl	equ	0xFF6
  3016                           tablat	equ	0xFF5
  3017                           prodh	equ	0xFF4
  3018                           prodl	equ	0xFF3
  3019                           intcon	equ	0xFF2
  3020                           intcon2	equ	0xFF1
  3021                           intcon3	equ	0xFF0
  3022                           postinc0	equ	0xFEE
  3023                           wreg	equ	0xFE8
  3024                           postinc1	equ	0xFE6
  3025                           postdec1	equ	0xFE5
  3026                           fsr1h	equ	0xFE2
  3027                           fsr1l	equ	0xFE1
  3028                           postinc2	equ	0xFDE
  3029                           postdec2	equ	0xFDD
  3030                           fsr2h	equ	0xFDA
  3031                           fsr2l	equ	0xFD9
  3032                           status	equ	0xFD8
  3033                           
  3034 ;; *************** function _update_lcd *****************
  3035 ;; Defined at:
  3036 ;;		line 164 in file "main.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;  flag            2   45[BANK0 ] int 
  3041 ;;  j               2    0        int 
  3042 ;;  i               2    0        int 
  3043 ;; Return value:  Size  Location     Type
  3044 ;;                  1    wreg      void 
  3045 ;; Registers used:
  3046 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3047 ;; Tracked objects:
  3048 ;;		On entry : 0/0
  3049 ;;		On exit  : 0/0
  3050 ;;		Unchanged: 0/0
  3051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3055 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3056 ;;Total ram usage:        3 bytes
  3057 ;; Hardware stack levels used:    1
  3058 ;; Hardware stack levels required when called:    9
  3059 ;; This function calls:
  3060 ;;		_lcdInst
  3061 ;;		_printf
  3062 ;;		_strcmp
  3063 ;;		_strcpy
  3064 ;; This function is called by:
  3065 ;;		_main
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           	psect	text2
  3070  0032E0                     __ptext2:
  3071                           	opt stack 0
  3072  0032E0                     _update_lcd:
  3073                           	opt stack 21
  3074                           
  3075                           ;main.c: 165: int flag=0;
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;incstack = 0
  3079  0032E0  0E00               	movlw	0
  3080  0032E2  0100               	movlb	0	; () banked
  3081  0032E4  6FAE               	movwf	(update_lcd@flag+1)& (0+255),b
  3082  0032E6  0E00               	movlw	0
  3083  0032E8  6FAD               	movwf	update_lcd@flag& (0+255),b
  3084                           
  3085                           ; BSR set to: 0
  3086                           ;main.c: 166: int i,j;
  3087                           ;main.c: 168: if (strcmp(display0, ndisplay0)!=0){
  3088  0032EA  0E30               	movlw	low _display0
  3089  0032EC  0100               	movlb	0	; () banked
  3090  0032EE  6F80               	movwf	strcmp@s1& (0+255),b
  3091  0032F0  0E01               	movlw	high _display0
  3092  0032F2  0100               	movlb	0	; () banked
  3093  0032F4  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  3094  0032F6  0E54               	movlw	low _ndisplay0
  3095  0032F8  0100               	movlb	0	; () banked
  3096  0032FA  6F82               	movwf	strcmp@s2& (0+255),b
  3097  0032FC  0E01               	movlw	high _ndisplay0
  3098  0032FE  0100               	movlb	0	; () banked
  3099  003300  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  3100  003302  ECE5  F01C         	call	_strcmp	;wreg free
  3101  003306  0100               	movlb	0	; () banked
  3102  003308  5180               	movf	?_strcmp& (0+255),w,b
  3103  00330A  0100               	movlb	0	; () banked
  3104  00330C  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  3105  00330E  B4D8               	btfsc	status,2,c
  3106  003310  D013               	goto	l8447
  3107                           
  3108                           ; BSR set to: 0
  3109                           ;main.c: 169: strcpy(display0,ndisplay0);
  3110  003312  0E30               	movlw	low _display0
  3111  003314  0100               	movlb	0	; () banked
  3112  003316  6F80               	movwf	strcpy@to& (0+255),b
  3113  003318  0E01               	movlw	high _display0
  3114  00331A  0100               	movlb	0	; () banked
  3115  00331C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  3116  00331E  0E54               	movlw	low _ndisplay0
  3117  003320  0100               	movlb	0	; () banked
  3118  003322  6F82               	movwf	strcpy@from& (0+255),b
  3119  003324  0E01               	movlw	high _ndisplay0
  3120  003326  0100               	movlb	0	; () banked
  3121  003328  6F83               	movwf	(strcpy@from+1)& (0+255),b
  3122  00332A  EC2E  F01E         	call	_strcpy	;wreg free
  3123                           
  3124                           ;main.c: 170: flag=1;
  3125  00332E  0E00               	movlw	0
  3126  003330  0100               	movlb	0	; () banked
  3127  003332  6FAE               	movwf	(update_lcd@flag+1)& (0+255),b
  3128  003334  0E01               	movlw	1
  3129  003336  6FAD               	movwf	update_lcd@flag& (0+255),b
  3130  003338                     l8447:
  3131                           
  3132                           ; BSR set to: 0
  3133                           ;main.c: 171: }
  3134                           ;main.c: 172: if (strcmp(display1, ndisplay1)!=0){
  3135  003338  0E42               	movlw	low _display1
  3136  00333A  0100               	movlb	0	; () banked
  3137  00333C  6F80               	movwf	strcmp@s1& (0+255),b
  3138  00333E  0E01               	movlw	high _display1
  3139  003340  0100               	movlb	0	; () banked
  3140  003342  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  3141  003344  0E66               	movlw	low _ndisplay1
  3142  003346  0100               	movlb	0	; () banked
  3143  003348  6F82               	movwf	strcmp@s2& (0+255),b
  3144  00334A  0E01               	movlw	high _ndisplay1
  3145  00334C  0100               	movlb	0	; () banked
  3146  00334E  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  3147  003350  ECE5  F01C         	call	_strcmp	;wreg free
  3148  003354  0100               	movlb	0	; () banked
  3149  003356  5180               	movf	?_strcmp& (0+255),w,b
  3150  003358  0100               	movlb	0	; () banked
  3151  00335A  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  3152  00335C  B4D8               	btfsc	status,2,c
  3153  00335E  D013               	goto	l8453
  3154                           
  3155                           ; BSR set to: 0
  3156                           ;main.c: 173: strcpy(display1,ndisplay1);
  3157  003360  0E42               	movlw	low _display1
  3158  003362  0100               	movlb	0	; () banked
  3159  003364  6F80               	movwf	strcpy@to& (0+255),b
  3160  003366  0E01               	movlw	high _display1
  3161  003368  0100               	movlb	0	; () banked
  3162  00336A  6F81               	movwf	(strcpy@to+1)& (0+255),b
  3163  00336C  0E66               	movlw	low _ndisplay1
  3164  00336E  0100               	movlb	0	; () banked
  3165  003370  6F82               	movwf	strcpy@from& (0+255),b
  3166  003372  0E01               	movlw	high _ndisplay1
  3167  003374  0100               	movlb	0	; () banked
  3168  003376  6F83               	movwf	(strcpy@from+1)& (0+255),b
  3169  003378  EC2E  F01E         	call	_strcpy	;wreg free
  3170                           
  3171                           ;main.c: 174: flag=1;
  3172  00337C  0E00               	movlw	0
  3173  00337E  0100               	movlb	0	; () banked
  3174  003380  6FAE               	movwf	(update_lcd@flag+1)& (0+255),b
  3175  003382  0E01               	movlw	1
  3176  003384  6FAD               	movwf	update_lcd@flag& (0+255),b
  3177  003386                     l8453:
  3178                           
  3179                           ; BSR set to: 0
  3180                           ;main.c: 175: }
  3181                           ;main.c: 176: if (flag){
  3182  003386  0100               	movlb	0	; () banked
  3183  003388  51AD               	movf	update_lcd@flag& (0+255),w,b
  3184  00338A  0100               	movlb	0	; () banked
  3185  00338C  11AE               	iorwf	(update_lcd@flag+1)& (0+255),w,b
  3186  00338E  B4D8               	btfsc	status,2,c
  3187  003390  0012               	return	
  3188                           
  3189                           ; BSR set to: 0
  3190                           ;main.c: 177: lcdInst(0x01);_delay((unsigned long)((10)*(10000000/4000.0)));;
  3191  003392  0E01               	movlw	1
  3192  003394  ECCE  F01E         	call	_lcdInst
  3193  003398  0E21               	movlw	33
  3194  00339A  0100               	movlb	0	; () banked
  3195  00339C  6FAC               	movwf	??_update_lcd& (0+255),b
  3196  00339E  0E76               	movlw	118
  3197  0033A0                     u14297:
  3198  0033A0  2EE8               	decfsz	wreg,f,c
  3199  0033A2  D7FE               	bra	u14297
  3200  0033A4  2FAC               	decfsz	??_update_lcd& (0+255),f,b
  3201  0033A6  D7FC               	bra	u14297
  3202  0033A8  F000               	nop	
  3203                           
  3204                           ;main.c: 178: lcdInst(0b10000000);;
  3205  0033AA  0E80               	movlw	128
  3206  0033AC  ECCE  F01E         	call	_lcdInst
  3207                           
  3208                           ;main.c: 179: printf(display0);
  3209  0033B0  0E30               	movlw	low _display0
  3210  0033B2  0100               	movlb	0	; () banked
  3211  0033B4  6FA2               	movwf	printf@f& (0+255),b
  3212  0033B6  0E01               	movlw	high _display0
  3213  0033B8  0100               	movlb	0	; () banked
  3214  0033BA  6FA3               	movwf	(printf@f+1)& (0+255),b
  3215  0033BC  EC8D  F01D         	call	_printf	;wreg free
  3216                           
  3217                           ;main.c: 180: lcdInst(0b10000000);;
  3218  0033C0  0E80               	movlw	128
  3219  0033C2  ECCE  F01E         	call	_lcdInst
  3220                           
  3221                           ;main.c: 181: printf("%04d",cycle_time2);
  3222  0033C6  0E3A               	movlw	low (STR_12+14)
  3223  0033C8  0100               	movlb	0	; () banked
  3224  0033CA  6FA2               	movwf	printf@f& (0+255),b
  3225  0033CC  0EFF               	movlw	high (STR_12+14)
  3226  0033CE  0100               	movlb	0	; () banked
  3227  0033D0  6FA3               	movwf	(printf@f+1)& (0+255),b
  3228  0033D2  C0C5  F0A4         	movff	_cycle_time2,?_printf+2
  3229  0033D6  C0C6  F0A5         	movff	_cycle_time2+1,?_printf+3
  3230  0033DA  EC8D  F01D         	call	_printf	;wreg free
  3231                           
  3232                           ;main.c: 182: lcdInst(0b11000000);;
  3233  0033DE  0EC0               	movlw	192
  3234  0033E0  ECCE  F01E         	call	_lcdInst
  3235                           
  3236                           ;main.c: 183: printf(display1);
  3237  0033E4  0E42               	movlw	low _display1
  3238  0033E6  0100               	movlb	0	; () banked
  3239  0033E8  6FA2               	movwf	printf@f& (0+255),b
  3240  0033EA  0E01               	movlw	high _display1
  3241  0033EC  0100               	movlb	0	; () banked
  3242  0033EE  6FA3               	movwf	(printf@f+1)& (0+255),b
  3243  0033F0  EC8D  F01D         	call	_printf	;wreg free
  3244                           
  3245                           ;main.c: 184: lcdInst(0b10010000);;
  3246  0033F4  0E90               	movlw	144
  3247  0033F6  ECCE  F01E         	call	_lcdInst
  3248  0033FA  0012               	return	
  3249  0033FC                     __end_of_update_lcd:
  3250                           	opt stack 0
  3251                           tblptru	equ	0xFF8
  3252                           tblptrh	equ	0xFF7
  3253                           tblptrl	equ	0xFF6
  3254                           tablat	equ	0xFF5
  3255                           prodh	equ	0xFF4
  3256                           prodl	equ	0xFF3
  3257                           intcon	equ	0xFF2
  3258                           intcon2	equ	0xFF1
  3259                           intcon3	equ	0xFF0
  3260                           postinc0	equ	0xFEE
  3261                           wreg	equ	0xFE8
  3262                           postinc1	equ	0xFE6
  3263                           postdec1	equ	0xFE5
  3264                           fsr1h	equ	0xFE2
  3265                           fsr1l	equ	0xFE1
  3266                           postinc2	equ	0xFDE
  3267                           postdec2	equ	0xFDD
  3268                           fsr2h	equ	0xFDA
  3269                           fsr2l	equ	0xFD9
  3270                           status	equ	0xFD8
  3271                           
  3272 ;; *************** function _strcpy *****************
  3273 ;; Defined at:
  3274 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;  to              2    0[BANK0 ] PTR unsigned char 
  3277 ;;		 -> display1(18), display0(18), 
  3278 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  3279 ;;		 -> ndisplay1(18), ndisplay0(18), 
  3280 ;; Auto vars:     Size  Location     Type
  3281 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  3282 ;;		 -> display1(18), display0(18), 
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  2    0[BANK0 ] PTR unsigned char 
  3285 ;; Registers used:
  3286 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3287 ;; Tracked objects:
  3288 ;;		On entry : 0/0
  3289 ;;		On exit  : 0/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3292 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3293 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3295 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3296 ;;Total ram usage:        6 bytes
  3297 ;; Hardware stack levels used:    1
  3298 ;; Hardware stack levels required when called:    5
  3299 ;; This function calls:
  3300 ;;		Nothing
  3301 ;; This function is called by:
  3302 ;;		_update_lcd
  3303 ;; This function uses a non-reentrant model
  3304 ;;
  3305                           
  3306                           	psect	text3
  3307  003C5C                     __ptext3:
  3308                           	opt stack 0
  3309  003C5C                     _strcpy:
  3310                           	opt stack 24
  3311                           
  3312                           ;incstack = 0
  3313  003C5C  C080  F084         	movff	strcpy@to,strcpy@cp
  3314  003C60  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  3315  003C64  D006               	goto	l4919
  3316  003C66                     l4917:
  3317  003C66  0100               	movlb	0	; () banked
  3318  003C68  4B84               	infsnz	strcpy@cp& (0+255),f,b
  3319  003C6A  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  3320  003C6C  0100               	movlb	0	; () banked
  3321  003C6E  4B82               	infsnz	strcpy@from& (0+255),f,b
  3322  003C70  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  3323  003C72                     l4919:
  3324  003C72  C082  FFD9         	movff	strcpy@from,fsr2l
  3325  003C76  C083  FFDA         	movff	strcpy@from+1,fsr2h
  3326  003C7A  C084  FFE1         	movff	strcpy@cp,fsr1l
  3327  003C7E  C085  FFE2         	movff	strcpy@cp+1,fsr1h
  3328  003C82  CFDF FFE7          	movff	indf2,indf1
  3329  003C86  50E7               	movf	indf1,w,c
  3330  003C88  B4D8               	btfsc	status,2,c
  3331  003C8A  0012               	return	
  3332  003C8C  D7EC               	goto	l4917
  3333  003C8E                     __end_of_strcpy:
  3334                           	opt stack 0
  3335                           tblptru	equ	0xFF8
  3336                           tblptrh	equ	0xFF7
  3337                           tblptrl	equ	0xFF6
  3338                           tablat	equ	0xFF5
  3339                           prodh	equ	0xFF4
  3340                           prodl	equ	0xFF3
  3341                           intcon	equ	0xFF2
  3342                           intcon2	equ	0xFF1
  3343                           intcon3	equ	0xFF0
  3344                           postinc0	equ	0xFEE
  3345                           wreg	equ	0xFE8
  3346                           indf1	equ	0xFE7
  3347                           postinc1	equ	0xFE6
  3348                           postdec1	equ	0xFE5
  3349                           fsr1h	equ	0xFE2
  3350                           fsr1l	equ	0xFE1
  3351                           indf2	equ	0xFDF
  3352                           postinc2	equ	0xFDE
  3353                           postdec2	equ	0xFDD
  3354                           fsr2h	equ	0xFDA
  3355                           fsr2l	equ	0xFD9
  3356                           status	equ	0xFD8
  3357                           
  3358 ;; *************** function _strcmp *****************
  3359 ;; Defined at:
  3360 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
  3361 ;; Parameters:    Size  Location     Type
  3362 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3363 ;;		 -> display1(18), display0(18), 
  3364 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  3365 ;;		 -> ndisplay1(18), ndisplay0(18), 
  3366 ;; Auto vars:     Size  Location     Type
  3367 ;;  r               1    5[BANK0 ] char 
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  2    0[BANK0 ] int 
  3370 ;; Registers used:
  3371 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3377 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3378 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3379 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3380 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3381 ;;Total ram usage:        6 bytes
  3382 ;; Hardware stack levels used:    1
  3383 ;; Hardware stack levels required when called:    5
  3384 ;; This function calls:
  3385 ;;		Nothing
  3386 ;; This function is called by:
  3387 ;;		_update_lcd
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           
  3391                           	psect	text4
  3392  0039CA                     __ptext4:
  3393                           	opt stack 0
  3394  0039CA                     _strcmp:
  3395                           	opt stack 24
  3396                           
  3397                           ;incstack = 0
  3398  0039CA  D006               	goto	l4907
  3399  0039CC                     l4905:
  3400  0039CC  0100               	movlb	0	; () banked
  3401  0039CE  4B80               	infsnz	strcmp@s1& (0+255),f,b
  3402  0039D0  2B81               	incf	(strcmp@s1+1)& (0+255),f,b
  3403  0039D2  0100               	movlb	0	; () banked
  3404  0039D4  4B82               	infsnz	strcmp@s2& (0+255),f,b
  3405  0039D6  2B83               	incf	(strcmp@s2+1)& (0+255),f,b
  3406  0039D8                     l4907:
  3407  0039D8  C080  FFD9         	movff	strcmp@s1,fsr2l
  3408  0039DC  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3409  0039E0  50DF               	movf	indf2,w,c
  3410  0039E2  0100               	movlb	0	; () banked
  3411  0039E4  6F84               	movwf	??_strcmp& (0+255),b
  3412  0039E6  C082  FFD9         	movff	strcmp@s2,fsr2l
  3413  0039EA  C083  FFDA         	movff	strcmp@s2+1,fsr2h
  3414  0039EE  50DF               	movf	indf2,w,c
  3415  0039F0  0800               	sublw	0
  3416  0039F2  0100               	movlb	0	; () banked
  3417  0039F4  2584               	addwf	??_strcmp& (0+255),w,b
  3418  0039F6  0100               	movlb	0	; () banked
  3419  0039F8  6F85               	movwf	strcmp@r& (0+255),b
  3420  0039FA  0100               	movlb	0	; () banked
  3421  0039FC  5185               	movf	strcmp@r& (0+255),w,b
  3422  0039FE  A4D8               	btfss	status,2,c
  3423  003A00  D007               	goto	l4911
  3424                           
  3425                           ; BSR set to: 0
  3426  003A02  C080  FFD9         	movff	strcmp@s1,fsr2l
  3427  003A06  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3428  003A0A  50DF               	movf	indf2,w,c
  3429  003A0C  A4D8               	btfss	status,2,c
  3430  003A0E  D7DE               	goto	l4905
  3431  003A10                     l4911:
  3432                           
  3433                           ; BSR set to: 0
  3434  003A10  0100               	movlb	0	; () banked
  3435  003A12  5185               	movf	strcmp@r& (0+255),w,b
  3436  003A14  0100               	movlb	0	; () banked
  3437  003A16  6F80               	movwf	?_strcmp& (0+255),b
  3438  003A18  6B81               	clrf	(?_strcmp+1)& (0+255),b
  3439  003A1A  BF80               	btfsc	?_strcmp& (0+255),7,b
  3440  003A1C  0781               	decf	(?_strcmp+1)& (0+255),f,b
  3441  003A1E  0012               	return	
  3442  003A20                     __end_of_strcmp:
  3443                           	opt stack 0
  3444                           tblptru	equ	0xFF8
  3445                           tblptrh	equ	0xFF7
  3446                           tblptrl	equ	0xFF6
  3447                           tablat	equ	0xFF5
  3448                           prodh	equ	0xFF4
  3449                           prodl	equ	0xFF3
  3450                           intcon	equ	0xFF2
  3451                           intcon2	equ	0xFF1
  3452                           intcon3	equ	0xFF0
  3453                           postinc0	equ	0xFEE
  3454                           wreg	equ	0xFE8
  3455                           indf1	equ	0xFE7
  3456                           postinc1	equ	0xFE6
  3457                           postdec1	equ	0xFE5
  3458                           fsr1h	equ	0xFE2
  3459                           fsr1l	equ	0xFE1
  3460                           indf2	equ	0xFDF
  3461                           postinc2	equ	0xFDE
  3462                           postdec2	equ	0xFDD
  3463                           fsr2h	equ	0xFDA
  3464                           fsr2l	equ	0xFD9
  3465                           status	equ	0xFD8
  3466                           
  3467 ;; *************** function _printf *****************
  3468 ;; Defined at:
  3469 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  f               2   34[BANK0 ] PTR const unsigned char 
  3472 ;;		 -> STR_26(14), STR_25(15), STR_24(8), STR_1(5), 
  3473 ;;		 -> display1(18), display0(18), 
  3474 ;; Auto vars:     Size  Location     Type
  3475 ;;  pb              4   40[BANK0 ] struct __prbuf
  3476 ;;  ap              2   38[BANK0 ] PTR void [1]
  3477 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
  3478 ;; Return value:  Size  Location     Type
  3479 ;;                  2   34[BANK0 ] int 
  3480 ;; Registers used:
  3481 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3482 ;; Tracked objects:
  3483 ;;		On entry : 0/0
  3484 ;;		On exit  : 0/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3487 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3488 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3490 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;Total ram usage:       10 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; Hardware stack levels required when called:    8
  3494 ;; This function calls:
  3495 ;;		__doprnt
  3496 ;; This function is called by:
  3497 ;;		_update_lcd
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           	psect	text5
  3502  003B1A                     __ptext5:
  3503                           	opt stack 0
  3504  003B1A                     _printf:
  3505                           	opt stack 21
  3506                           
  3507                           ; BSR set to: 0
  3508                           ;incstack = 0
  3509  003B1A  0E00               	movlw	0
  3510  003B1C  0100               	movlb	0	; () banked
  3511  003B1E  6FA8               	movwf	printf@pb& (0+255),b
  3512  003B20  0E00               	movlw	0
  3513  003B22  0100               	movlb	0	; () banked
  3514  003B24  6FA9               	movwf	(printf@pb+1)& (0+255),b
  3515  003B26  0E72               	movlw	low _putch
  3516  003B28  0100               	movlb	0	; () banked
  3517  003B2A  6FAA               	movwf	(printf@pb+2)& (0+255),b
  3518  003B2C  0E3D               	movlw	high _putch
  3519  003B2E  0100               	movlb	0	; () banked
  3520  003B30  6FAB               	movwf	(printf@pb+3)& (0+255),b
  3521  003B32  0EA4               	movlw	low (?_printf+2)
  3522  003B34  0100               	movlb	0	; () banked
  3523  003B36  6FA6               	movwf	printf@ap& (0+255),b
  3524  003B38  0E00               	movlw	high (?_printf+2)
  3525  003B3A  0100               	movlb	0	; () banked
  3526  003B3C  6FA7               	movwf	(printf@ap+1)& (0+255),b
  3527                           
  3528                           ; BSR set to: 0
  3529                           ;	Return value of _printf is never used
  3530  003B3E  0EA8               	movlw	low printf@pb
  3531  003B40  0100               	movlb	0	; () banked
  3532  003B42  6F8C               	movwf	__doprnt@pb& (0+255),b
  3533  003B44  0E00               	movlw	high printf@pb
  3534  003B46  0100               	movlb	0	; () banked
  3535  003B48  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  3536  003B4A  C0A2  F08E         	movff	printf@f,__doprnt@f
  3537  003B4E  C0A3  F08F         	movff	printf@f+1,__doprnt@f+1
  3538  003B52  0EA6               	movlw	low printf@ap
  3539  003B54  0100               	movlb	0	; () banked
  3540  003B56  6F90               	movwf	__doprnt@ap& (0+255),b
  3541  003B58  0E00               	movlw	high printf@ap
  3542  003B5A  0100               	movlb	0	; () banked
  3543  003B5C  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  3544  003B5E  EC09  F000         	call	__doprnt	;wreg free
  3545  003B62  0012               	return	
  3546  003B64                     __end_of_printf:
  3547                           	opt stack 0
  3548                           tblptru	equ	0xFF8
  3549                           tblptrh	equ	0xFF7
  3550                           tblptrl	equ	0xFF6
  3551                           tablat	equ	0xFF5
  3552                           prodh	equ	0xFF4
  3553                           prodl	equ	0xFF3
  3554                           intcon	equ	0xFF2
  3555                           intcon2	equ	0xFF1
  3556                           intcon3	equ	0xFF0
  3557                           postinc0	equ	0xFEE
  3558                           wreg	equ	0xFE8
  3559                           indf1	equ	0xFE7
  3560                           postinc1	equ	0xFE6
  3561                           postdec1	equ	0xFE5
  3562                           fsr1h	equ	0xFE2
  3563                           fsr1l	equ	0xFE1
  3564                           indf2	equ	0xFDF
  3565                           postinc2	equ	0xFDE
  3566                           postdec2	equ	0xFDD
  3567                           fsr2h	equ	0xFDA
  3568                           fsr2l	equ	0xFD9
  3569                           status	equ	0xFD8
  3570                           
  3571 ;; *************** function _update_display *****************
  3572 ;; Defined at:
  3573 ;;		line 210 in file "main.c"
  3574 ;; Parameters:    Size  Location     Type
  3575 ;;		None
  3576 ;; Auto vars:     Size  Location     Type
  3577 ;;		None
  3578 ;; Return value:  Size  Location     Type
  3579 ;;                  1    wreg      void 
  3580 ;; Registers used:
  3581 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3582 ;; Tracked objects:
  3583 ;;		On entry : 0/0
  3584 ;;		On exit  : 0/0
  3585 ;;		Unchanged: 0/0
  3586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3591 ;;Total ram usage:        0 bytes
  3592 ;; Hardware stack levels used:    1
  3593 ;; Hardware stack levels required when called:   10
  3594 ;; This function calls:
  3595 ;;		___awdiv
  3596 ;;		___awmod
  3597 ;;		__measure
  3598 ;;		_display_menu
  3599 ;;		_sprintf
  3600 ;; This function is called by:
  3601 ;;		_main
  3602 ;; This function uses a non-reentrant model
  3603 ;;
  3604                           
  3605                           	psect	text6
  3606  00254A                     __ptext6:
  3607                           	opt stack 0
  3608  00254A                     _update_display:
  3609                           	opt stack 20
  3610                           
  3611                           ;main.c: 211: switch(state)
  3612                           
  3613                           ;incstack = 0
  3614  00254A  D18A               	goto	l8437
  3615  00254C                     l8409:
  3616                           
  3617                           ;main.c: 214: sprintf(ndisplay0,"%02x/%02x/%02x PUSH TO", time[6],time[5],time[4]);
  3618  00254C  0E54               	movlw	low _ndisplay0
  3619  00254E  0100               	movlb	0	; () banked
  3620  002550  6FA2               	movwf	sprintf@wh& (0+255),b
  3621  002552  0E01               	movlw	high _ndisplay0
  3622  002554  0100               	movlb	0	; () banked
  3623  002556  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3624  002558  0E9A               	movlw	low STR_2
  3625  00255A  0100               	movlb	0	; () banked
  3626  00255C  6FA4               	movwf	sprintf@f& (0+255),b
  3627  00255E  0EFE               	movlw	high STR_2
  3628  002560  0100               	movlb	0	; () banked
  3629  002562  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3630  002564  C0C0  F0A6         	movff	_time+6,?_sprintf+4
  3631  002568  0100               	movlb	0	; () banked
  3632  00256A  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3633  00256C  C0BF  F0A8         	movff	_time+5,?_sprintf+6
  3634  002570  0100               	movlb	0	; () banked
  3635  002572  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3636  002574  C0BE  F0AA         	movff	_time+4,?_sprintf+8
  3637  002578  0100               	movlb	0	; () banked
  3638  00257A  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3639  00257C  EC3B  F01D         	call	_sprintf	;wreg free
  3640                           
  3641                           ;main.c: 215: sprintf(ndisplay1,"%02x:%02x:%02x   START", time[2],time[1],time[0]);
  3642  002580  0E66               	movlw	low _ndisplay1
  3643  002582  0100               	movlb	0	; () banked
  3644  002584  6FA2               	movwf	sprintf@wh& (0+255),b
  3645  002586  0E01               	movlw	high _ndisplay1
  3646  002588  0100               	movlb	0	; () banked
  3647  00258A  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3648  00258C  0EB1               	movlw	low STR_3
  3649  00258E  0100               	movlb	0	; () banked
  3650  002590  6FA4               	movwf	sprintf@f& (0+255),b
  3651  002592  0EFE               	movlw	high STR_3
  3652  002594  0100               	movlb	0	; () banked
  3653  002596  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3654  002598  C0BC  F0A6         	movff	_time+2,?_sprintf+4
  3655  00259C  0100               	movlb	0	; () banked
  3656  00259E  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3657  0025A0  C0BB  F0A8         	movff	_time+1,?_sprintf+6
  3658  0025A4  0100               	movlb	0	; () banked
  3659  0025A6  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3660  0025A8  C0BA  F0AA         	movff	_time,?_sprintf+8
  3661  0025AC  0100               	movlb	0	; () banked
  3662  0025AE  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3663  0025B0  EC3B  F01D         	call	_sprintf	;wreg free
  3664                           
  3665                           ;main.c: 216: break;
  3666  0025B4  0012               	return	
  3667  0025B6                     l8411:
  3668                           
  3669                           ;main.c: 218: case 'l':
  3670                           ;main.c: 219: case 'c':
  3671                           ;main.c: 220: case 'e':
  3672                           ;main.c: 221: display_menu();
  3673  0025B6  EC1D  F00C         	call	_display_menu	;wreg free
  3674                           
  3675                           ;main.c: 222: break;
  3676  0025BA  0012               	return	
  3677  0025BC                     l8413:
  3678                           
  3679                           ;main.c: 225: if (sortIndex==1){
  3680  0025BC  0100               	movlb	0	; () banked
  3681  0025BE  05E3               	decf	_sortIndex& (0+255),w,b
  3682  0025C0  0100               	movlb	0	; () banked
  3683  0025C2  11E4               	iorwf	(_sortIndex+1)& (0+255),w,b
  3684  0025C4  A4D8               	btfss	status,2,c
  3685  0025C6  D04B               	goto	l8417
  3686                           
  3687                           ; BSR set to: 0
  3688                           ;main.c: 226: sprintf(ndisplay0,"%d:%02d en:%02d ec:%02d ",(timeDiff/60),timeDiff%60, es
      +                          kaNoCap,eskaWCap);
  3689  0025C8  0E54               	movlw	low _ndisplay0
  3690  0025CA  0100               	movlb	0	; () banked
  3691  0025CC  6FA2               	movwf	sprintf@wh& (0+255),b
  3692  0025CE  0E01               	movlw	high _ndisplay0
  3693  0025D0  0100               	movlb	0	; () banked
  3694  0025D2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3695  0025D4  0E81               	movlw	low STR_4
  3696  0025D6  0100               	movlb	0	; () banked
  3697  0025D8  6FA4               	movwf	sprintf@f& (0+255),b
  3698  0025DA  0EFE               	movlw	high STR_4
  3699  0025DC  0100               	movlb	0	; () banked
  3700  0025DE  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3701  0025E0  C0D5  F080         	movff	_timeDiff,___awdiv@dividend
  3702  0025E4  C0D6  F081         	movff	_timeDiff+1,___awdiv@dividend+1
  3703  0025E8  0E00               	movlw	0
  3704  0025EA  0100               	movlb	0	; () banked
  3705  0025EC  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  3706  0025EE  0E3C               	movlw	60
  3707  0025F0  6F82               	movwf	___awdiv@divisor& (0+255),b
  3708  0025F2  ECFE  F019         	call	___awdiv	;wreg free
  3709  0025F6  C080  F0A6         	movff	?___awdiv,?_sprintf+4
  3710  0025FA  C081  F0A7         	movff	?___awdiv+1,?_sprintf+5
  3711  0025FE  C0D5  F080         	movff	_timeDiff,___awmod@dividend
  3712  002602  C0D6  F081         	movff	_timeDiff+1,___awmod@dividend+1
  3713  002606  0E00               	movlw	0
  3714  002608  0100               	movlb	0	; () banked
  3715  00260A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3716  00260C  0E3C               	movlw	60
  3717  00260E  6F82               	movwf	___awmod@divisor& (0+255),b
  3718  002610  EC11  F01B         	call	___awmod	;wreg free
  3719  002614  C080  F0A8         	movff	?___awmod,?_sprintf+6
  3720  002618  C081  F0A9         	movff	?___awmod+1,?_sprintf+7
  3721  00261C  C0C9  F0AA         	movff	_eskaNoCap,?_sprintf+8
  3722  002620  C0CA  F0AB         	movff	_eskaNoCap+1,?_sprintf+9
  3723  002624  C0CB  F0AC         	movff	_eskaWCap,?_sprintf+10
  3724  002628  C0CC  F0AD         	movff	_eskaWCap+1,?_sprintf+11
  3725  00262C  EC3B  F01D         	call	_sprintf	;wreg free
  3726                           
  3727                           ;main.c: 227: sprintf(ndisplay1,"yn:%02d yc:%02d", yopNoCap, yopWCap);
  3728  002630  0E66               	movlw	low _ndisplay1
  3729  002632  0100               	movlb	0	; () banked
  3730  002634  6FA2               	movwf	sprintf@wh& (0+255),b
  3731  002636  0E01               	movlw	high _ndisplay1
  3732  002638  0100               	movlb	0	; () banked
  3733  00263A  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3734  00263C  0E83               	movlw	low STR_5
  3735  00263E  0100               	movlb	0	; () banked
  3736  002640  6FA4               	movwf	sprintf@f& (0+255),b
  3737  002642  0EFF               	movlw	high STR_5
  3738  002644  0100               	movlb	0	; () banked
  3739  002646  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3740  002648  C0D7  F0A6         	movff	_yopNoCap,?_sprintf+4
  3741  00264C  C0D8  F0A7         	movff	_yopNoCap+1,?_sprintf+5
  3742  002650  C0D9  F0A8         	movff	_yopWCap,?_sprintf+6
  3743  002654  C0DA  F0A9         	movff	_yopWCap+1,?_sprintf+7
  3744  002658  EC3B  F01D         	call	_sprintf	;wreg free
  3745                           
  3746                           ;main.c: 228: }
  3747  00265C  0012               	return	
  3748  00265E                     l8417:
  3749                           
  3750                           ;main.c: 230: else if (sortIndex==2){
  3751  00265E  0E02               	movlw	2
  3752  002660  0100               	movlb	0	; () banked
  3753  002662  19E3               	xorwf	_sortIndex& (0+255),w,b
  3754  002664  0100               	movlb	0	; () banked
  3755  002666  11E4               	iorwf	(_sortIndex+1)& (0+255),w,b
  3756  002668  A4D8               	btfss	status,2,c
  3757  00266A  D02F               	goto	l8421
  3758                           
  3759                           ; BSR set to: 0
  3760                           ;main.c: 231: sprintf(ndisplay0, "RC:%d MC:%d", release_counter, measure_counter);
  3761  00266C  0E54               	movlw	low _ndisplay0
  3762  00266E  0100               	movlb	0	; () banked
  3763  002670  6FA2               	movwf	sprintf@wh& (0+255),b
  3764  002672  0E01               	movlw	high _ndisplay0
  3765  002674  0100               	movlb	0	; () banked
  3766  002676  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3767  002678  0ECD               	movlw	low STR_6
  3768  00267A  0100               	movlb	0	; () banked
  3769  00267C  6FA4               	movwf	sprintf@f& (0+255),b
  3770  00267E  0EFF               	movlw	high STR_6
  3771  002680  0100               	movlb	0	; () banked
  3772  002682  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3773  002684  C0CF  F0A6         	movff	_release_counter,?_sprintf+4
  3774  002688  C0D0  F0A7         	movff	_release_counter+1,?_sprintf+5
  3775  00268C  C0CD  F0A8         	movff	_measure_counter,?_sprintf+6
  3776  002690  C0CE  F0A9         	movff	_measure_counter+1,?_sprintf+7
  3777  002694  EC3B  F01D         	call	_sprintf	;wreg free
  3778                           
  3779                           ;main.c: 232: sprintf(ndisplay1, "DC:%d MEAS:%d", discretize_counter, _measure());
  3780  002698  0E66               	movlw	low _ndisplay1
  3781  00269A  0100               	movlb	0	; () banked
  3782  00269C  6FA2               	movwf	sprintf@wh& (0+255),b
  3783  00269E  0E01               	movlw	high _ndisplay1
  3784  0026A0  0100               	movlb	0	; () banked
  3785  0026A2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3786  0026A4  0EB1               	movlw	low STR_7
  3787  0026A6  0100               	movlb	0	; () banked
  3788  0026A8  6FA4               	movwf	sprintf@f& (0+255),b
  3789  0026AA  0EFF               	movlw	high STR_7
  3790  0026AC  0100               	movlb	0	; () banked
  3791  0026AE  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3792  0026B0  C0C7  F0A6         	movff	_discretize_counter,?_sprintf+4
  3793  0026B4  C0C8  F0A7         	movff	_discretize_counter+1,?_sprintf+5
  3794  0026B8  EC6A  F00E         	call	__measure	;wreg free
  3795  0026BC  C086  F0A8         	movff	?__measure,?_sprintf+6
  3796  0026C0  C087  F0A9         	movff	?__measure+1,?_sprintf+7
  3797  0026C4  EC3B  F01D         	call	_sprintf	;wreg free
  3798                           
  3799                           ;main.c: 233: }
  3800  0026C8  0012               	return	
  3801  0026CA                     l8421:
  3802                           
  3803                           ;main.c: 249: else if (sortIndex==3){
  3804  0026CA  0E03               	movlw	3
  3805  0026CC  0100               	movlb	0	; () banked
  3806  0026CE  19E3               	xorwf	_sortIndex& (0+255),w,b
  3807  0026D0  0100               	movlb	0	; () banked
  3808  0026D2  11E4               	iorwf	(_sortIndex+1)& (0+255),w,b
  3809  0026D4  A4D8               	btfss	status,2,c
  3810  0026D6  D037               	goto	l8425
  3811                           
  3812                           ; BSR set to: 0
  3813                           ;main.c: 251: sprintf(ndisplay0, "P1[0-2]:%d,%d,%d", PROX1[0], PROX1[1], PROX1[2]);
  3814  0026D8  0E54               	movlw	low _ndisplay0
  3815  0026DA  0100               	movlb	0	; () banked
  3816  0026DC  6FA2               	movwf	sprintf@wh& (0+255),b
  3817  0026DE  0E01               	movlw	high _ndisplay0
  3818  0026E0  0100               	movlb	0	; () banked
  3819  0026E2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3820  0026E4  0E62               	movlw	low STR_8
  3821  0026E6  0100               	movlb	0	; () banked
  3822  0026E8  6FA4               	movwf	sprintf@f& (0+255),b
  3823  0026EA  0EFF               	movlw	high STR_8
  3824  0026EC  0100               	movlb	0	; () banked
  3825  0026EE  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3826  0026F0  C056  F0A6         	movff	_PROX1,?_sprintf+4
  3827  0026F4  C057  F0A7         	movff	_PROX1+1,?_sprintf+5
  3828  0026F8  C058  F0A8         	movff	_PROX1+2,?_sprintf+6
  3829  0026FC  C059  F0A9         	movff	_PROX1+3,?_sprintf+7
  3830  002700  C05A  F0AA         	movff	_PROX1+4,?_sprintf+8
  3831  002704  C05B  F0AB         	movff	_PROX1+5,?_sprintf+9
  3832  002708  EC3B  F01D         	call	_sprintf	;wreg free
  3833                           
  3834                           ;main.c: 252: sprintf(ndisplay1, "P2[0-1]:%d,%d M:%d",PROX2[0],PROX2[1], _measure());
  3835  00270C  0E66               	movlw	low _ndisplay1
  3836  00270E  0100               	movlb	0	; () banked
  3837  002710  6FA2               	movwf	sprintf@wh& (0+255),b
  3838  002712  0E01               	movlw	high _ndisplay1
  3839  002714  0100               	movlb	0	; () banked
  3840  002716  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3841  002718  0E19               	movlw	low STR_9
  3842  00271A  0100               	movlb	0	; () banked
  3843  00271C  6FA4               	movwf	sprintf@f& (0+255),b
  3844  00271E  0EFF               	movlw	high STR_9
  3845  002720  0100               	movlb	0	; () banked
  3846  002722  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3847  002724  C060  F0A6         	movff	_PROX2,?_sprintf+4
  3848  002728  C061  F0A7         	movff	_PROX2+1,?_sprintf+5
  3849  00272C  C062  F0A8         	movff	_PROX2+2,?_sprintf+6
  3850  002730  C063  F0A9         	movff	_PROX2+3,?_sprintf+7
  3851  002734  EC6A  F00E         	call	__measure	;wreg free
  3852  002738  C086  F0AA         	movff	?__measure,?_sprintf+8
  3853  00273C  C087  F0AB         	movff	?__measure+1,?_sprintf+9
  3854  002740  EC3B  F01D         	call	_sprintf	;wreg free
  3855                           
  3856                           ;main.c: 253: }
  3857  002744  0012               	return	
  3858  002746                     l8425:
  3859                           
  3860                           ;main.c: 254: else if (sortIndex==4){
  3861  002746  0E04               	movlw	4
  3862  002748  0100               	movlb	0	; () banked
  3863  00274A  19E3               	xorwf	_sortIndex& (0+255),w,b
  3864  00274C  0100               	movlb	0	; () banked
  3865  00274E  11E4               	iorwf	(_sortIndex+1)& (0+255),w,b
  3866  002750  A4D8               	btfss	status,2,c
  3867  002752  D02B               	goto	l8429
  3868                           
  3869                           ; BSR set to: 0
  3870                           ;main.c: 256: sprintf(ndisplay0, "IR1[0]:%04d", IR1[0]);
  3871  002754  0E54               	movlw	low _ndisplay0
  3872  002756  0100               	movlb	0	; () banked
  3873  002758  6FA2               	movwf	sprintf@wh& (0+255),b
  3874  00275A  0E01               	movlw	high _ndisplay0
  3875  00275C  0100               	movlb	0	; () banked
  3876  00275E  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3877  002760  0ED9               	movlw	low STR_10
  3878  002762  0100               	movlb	0	; () banked
  3879  002764  6FA4               	movwf	sprintf@f& (0+255),b
  3880  002766  0EFF               	movlw	high STR_10
  3881  002768  0100               	movlb	0	; () banked
  3882  00276A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3883  00276C  C04C  F0A6         	movff	_IR1,?_sprintf+4
  3884  002770  C04D  F0A7         	movff	_IR1+1,?_sprintf+5
  3885  002774  EC3B  F01D         	call	_sprintf	;wreg free
  3886                           
  3887                           ;main.c: 257: sprintf(ndisplay1, "IR2[0]:%04dM:%d",IR2[0], _measure());
  3888  002778  0E66               	movlw	low _ndisplay1
  3889  00277A  0100               	movlb	0	; () banked
  3890  00277C  6FA2               	movwf	sprintf@wh& (0+255),b
  3891  00277E  0E01               	movlw	high _ndisplay1
  3892  002780  0100               	movlb	0	; () banked
  3893  002782  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3894  002784  0E73               	movlw	low STR_11
  3895  002786  0100               	movlb	0	; () banked
  3896  002788  6FA4               	movwf	sprintf@f& (0+255),b
  3897  00278A  0EFF               	movlw	high STR_11
  3898  00278C  0100               	movlb	0	; () banked
  3899  00278E  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3900  002790  C126  F0A6         	movff	_IR2,?_sprintf+4
  3901  002794  C127  F0A7         	movff	_IR2+1,?_sprintf+5
  3902  002798  EC6A  F00E         	call	__measure	;wreg free
  3903  00279C  C086  F0A8         	movff	?__measure,?_sprintf+6
  3904  0027A0  C087  F0A9         	movff	?__measure+1,?_sprintf+7
  3905  0027A4  EC3B  F01D         	call	_sprintf	;wreg free
  3906                           
  3907                           ;main.c: 258: }
  3908  0027A8  0012               	return	
  3909  0027AA                     l8429:
  3910                           
  3911                           ;main.c: 259: else if (sortIndex==5){
  3912  0027AA  0E05               	movlw	5
  3913  0027AC  0100               	movlb	0	; () banked
  3914  0027AE  19E3               	xorwf	_sortIndex& (0+255),w,b
  3915  0027B0  0100               	movlb	0	; () banked
  3916  0027B2  11E4               	iorwf	(_sortIndex+1)& (0+255),w,b
  3917  0027B4  A4D8               	btfss	status,2,c
  3918  0027B6  0012               	return	
  3919                           
  3920                           ; BSR set to: 0
  3921                           ;main.c: 261: sprintf(ndisplay0, "PIR:%d%d,%04d,%04d",PROX1[0], PROX2[0], IR1[0], IR2[0]
      +                          );
  3922  0027B8  0E54               	movlw	low _ndisplay0
  3923  0027BA  0100               	movlb	0	; () banked
  3924  0027BC  6FA2               	movwf	sprintf@wh& (0+255),b
  3925  0027BE  0E01               	movlw	high _ndisplay0
  3926  0027C0  0100               	movlb	0	; () banked
  3927  0027C2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3928  0027C4  0E2C               	movlw	low STR_12
  3929  0027C6  0100               	movlb	0	; () banked
  3930  0027C8  6FA4               	movwf	sprintf@f& (0+255),b
  3931  0027CA  0EFF               	movlw	high STR_12
  3932  0027CC  0100               	movlb	0	; () banked
  3933  0027CE  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3934  0027D0  C056  F0A6         	movff	_PROX1,?_sprintf+4
  3935  0027D4  C057  F0A7         	movff	_PROX1+1,?_sprintf+5
  3936  0027D8  C060  F0A8         	movff	_PROX2,?_sprintf+6
  3937  0027DC  C061  F0A9         	movff	_PROX2+1,?_sprintf+7
  3938  0027E0  C04C  F0AA         	movff	_IR1,?_sprintf+8
  3939  0027E4  C04D  F0AB         	movff	_IR1+1,?_sprintf+9
  3940  0027E8  C126  F0AC         	movff	_IR2,?_sprintf+10
  3941  0027EC  C127  F0AD         	movff	_IR2+1,?_sprintf+11
  3942  0027F0  EC3B  F01D         	call	_sprintf	;wreg free
  3943                           
  3944                           ;main.c: 262: sprintf(ndisplay1, "DIST[0]:%04d M:%d",DIST1[0], _measure());
  3945  0027F4  0E66               	movlw	low _ndisplay1
  3946  0027F6  0100               	movlb	0	; () banked
  3947  0027F8  6FA2               	movwf	sprintf@wh& (0+255),b
  3948  0027FA  0E01               	movlw	high _ndisplay1
  3949  0027FC  0100               	movlb	0	; () banked
  3950  0027FE  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3951  002800  0E3F               	movlw	low STR_13
  3952  002802  0100               	movlb	0	; () banked
  3953  002804  6FA4               	movwf	sprintf@f& (0+255),b
  3954  002806  0EFF               	movlw	high STR_13
  3955  002808  0100               	movlb	0	; () banked
  3956  00280A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3957  00280C  C11C  F0A6         	movff	_DIST1,?_sprintf+4
  3958  002810  C11D  F0A7         	movff	_DIST1+1,?_sprintf+5
  3959  002814  EC6A  F00E         	call	__measure	;wreg free
  3960  002818  C086  F0A8         	movff	?__measure,?_sprintf+6
  3961  00281C  C087  F0A9         	movff	?__measure+1,?_sprintf+7
  3962  002820  EC3B  F01D         	call	_sprintf	;wreg free
  3963                           
  3964                           ;main.c: 263: }
  3965                           ;main.c: 267: break;
  3966  002824  0012               	return	
  3967  002826                     l8433:
  3968                           
  3969                           ;main.c: 269: sprintf(ndisplay0, "ERROR");
  3970  002826  0E54               	movlw	low _ndisplay0
  3971  002828  0100               	movlb	0	; () banked
  3972  00282A  6FA2               	movwf	sprintf@wh& (0+255),b
  3973  00282C  0E01               	movlw	high _ndisplay0
  3974  00282E  0100               	movlb	0	; () banked
  3975  002830  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3976  002832  0EF4               	movlw	low STR_14
  3977  002834  0100               	movlb	0	; () banked
  3978  002836  6FA4               	movwf	sprintf@f& (0+255),b
  3979  002838  0EFF               	movlw	high STR_14
  3980  00283A  0100               	movlb	0	; () banked
  3981  00283C  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3982  00283E  EC3B  F01D         	call	_sprintf	;wreg free
  3983                           
  3984                           ;main.c: 270: sprintf(ndisplay1, "EMERGENCY STOP");
  3985  002842  0E66               	movlw	low _ndisplay1
  3986  002844  0100               	movlb	0	; () banked
  3987  002846  6FA2               	movwf	sprintf@wh& (0+255),b
  3988  002848  0E01               	movlw	high _ndisplay1
  3989  00284A  0100               	movlb	0	; () banked
  3990  00284C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3991  00284E  0E93               	movlw	low STR_15
  3992  002850  0100               	movlb	0	; () banked
  3993  002852  6FA4               	movwf	sprintf@f& (0+255),b
  3994  002854  0EFF               	movlw	high STR_15
  3995  002856  0100               	movlb	0	; () banked
  3996  002858  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3997  00285A  EC3B  F01D         	call	_sprintf	;wreg free
  3998                           
  3999                           ;main.c: 273: }
  4000                           
  4001                           ;main.c: 271: break;
  4002  00285E  0012               	return	
  4003  002860                     l8437:
  4004  002860  0100               	movlb	0	; () banked
  4005  002862  51E6               	movf	_state& (0+255),w,b
  4006                           
  4007                           ; Switch size 1, requested type "space"
  4008                           ; Number of cases is 6, Range of values is 99 to 115
  4009                           ; switch strategies available:
  4010                           ; Name         Instructions Cycles
  4011                           ; simple_byte           19    10 (average)
  4012                           ;	Chosen strategy is simple_byte
  4013  002864  0A63               	xorlw	99	; case 99
  4014  002866  B4D8               	btfsc	status,2,c
  4015  002868  D6A6               	goto	l8411
  4016  00286A  0A06               	xorlw	6	; case 101
  4017  00286C  B4D8               	btfsc	status,2,c
  4018  00286E  D6A3               	goto	l8411
  4019  002870  0A09               	xorlw	9	; case 108
  4020  002872  B4D8               	btfsc	status,2,c
  4021  002874  D6A0               	goto	l8411
  4022  002876  0A01               	xorlw	1	; case 109
  4023  002878  B4D8               	btfsc	status,2,c
  4024  00287A  D69D               	goto	l8411
  4025  00287C  0A1F               	xorlw	31	; case 114
  4026  00287E  B4D8               	btfsc	status,2,c
  4027  002880  D665               	goto	l8409
  4028  002882  0A01               	xorlw	1	; case 115
  4029  002884  B4D8               	btfsc	status,2,c
  4030  002886  D69A               	goto	l8413
  4031  002888  D7CE               	goto	l8433
  4032  00288A                     __end_of_update_display:
  4033                           	opt stack 0
  4034                           tblptru	equ	0xFF8
  4035                           tblptrh	equ	0xFF7
  4036                           tblptrl	equ	0xFF6
  4037                           tablat	equ	0xFF5
  4038                           prodh	equ	0xFF4
  4039                           prodl	equ	0xFF3
  4040                           intcon	equ	0xFF2
  4041                           intcon2	equ	0xFF1
  4042                           intcon3	equ	0xFF0
  4043                           postinc0	equ	0xFEE
  4044                           wreg	equ	0xFE8
  4045                           indf1	equ	0xFE7
  4046                           postinc1	equ	0xFE6
  4047                           postdec1	equ	0xFE5
  4048                           fsr1h	equ	0xFE2
  4049                           fsr1l	equ	0xFE1
  4050                           indf2	equ	0xFDF
  4051                           postinc2	equ	0xFDE
  4052                           postdec2	equ	0xFDD
  4053                           fsr2h	equ	0xFDA
  4054                           fsr2l	equ	0xFD9
  4055                           status	equ	0xFD8
  4056                           
  4057 ;; *************** function _display_menu *****************
  4058 ;; Defined at:
  4059 ;;		line 327 in file "main.c"
  4060 ;; Parameters:    Size  Location     Type
  4061 ;;		None
  4062 ;; Auto vars:     Size  Location     Type
  4063 ;;  menuIndexPtr    2    8[BANK1 ] PTR int 
  4064 ;;		 -> endIndex(2), creditIndex(2), logIndex(2), menuIndex(2), 
  4065 ;;  menuSelectio    2    4[BANK1 ] int 
  4066 ;;  menuSizePtr     2    2[BANK1 ] PTR int 
  4067 ;;		 -> endSize(2), menuSize(2), creditSize(2), events(2), 
  4068 ;;  selector        2    0[BANK1 ] int 
  4069 ;; Return value:  Size  Location     Type
  4070 ;;                  1    wreg      void 
  4071 ;; Registers used:
  4072 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4073 ;; Tracked objects:
  4074 ;;		On entry : 0/0
  4075 ;;		On exit  : 0/0
  4076 ;;		Unchanged: 0/0
  4077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4079 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4080 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;      Totals:         0       5      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;Total ram usage:       15 bytes
  4083 ;; Hardware stack levels used:    1
  4084 ;; Hardware stack levels required when called:    9
  4085 ;; This function calls:
  4086 ;;		___wmul
  4087 ;;		_sprintf
  4088 ;; This function is called by:
  4089 ;;		_update_display
  4090 ;; This function uses a non-reentrant model
  4091 ;;
  4092                           
  4093                           	psect	text7
  4094  00183A                     __ptext7:
  4095                           	opt stack 0
  4096  00183A                     _display_menu:
  4097                           	opt stack 20
  4098                           
  4099                           ;main.c: 328: int menuSelection;
  4100                           ;main.c: 329: int* menuIndexPtr;
  4101                           ;main.c: 330: int* menuSizePtr;
  4102                           ;main.c: 331: int selector=0;
  4103                           
  4104                           ;incstack = 0
  4105  00183A  0E00               	movlw	0
  4106  00183C  0101               	movlb	1	; () banked
  4107  00183E  6F79               	movwf	(display_menu@selector+1)& (0+255),b
  4108  001840  0E00               	movlw	0
  4109  001842  6F78               	movwf	display_menu@selector& (0+255),b
  4110                           
  4111                           ;main.c: 332: switch(state)
  4112  001844  D049               	goto	l8093
  4113  001846                     l8069:
  4114                           
  4115                           ;main.c: 335: menuSelection=1;
  4116  001846  0E00               	movlw	0
  4117  001848  0101               	movlb	1	; () banked
  4118  00184A  6F7D               	movwf	(display_menu@menuSelection+1)& (0+255),b
  4119  00184C  0E01               	movlw	1
  4120  00184E  6F7C               	movwf	display_menu@menuSelection& (0+255),b
  4121                           
  4122                           ; BSR set to: 1
  4123                           ;main.c: 336: menuIndexPtr=&logIndex;
  4124  001850  0EF1               	movlw	low _logIndex
  4125  001852  0101               	movlb	1	; () banked
  4126  001854  6F80               	movwf	display_menu@menuIndexPtr& (0+255),b
  4127  001856  0E00               	movlw	high _logIndex
  4128  001858  0101               	movlb	1	; () banked
  4129  00185A  6F81               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  4130                           
  4131                           ; BSR set to: 1
  4132                           ;main.c: 337: menuSizePtr=&events;
  4133  00185C  0EEF               	movlw	low _events
  4134  00185E  0101               	movlb	1	; () banked
  4135  001860  6F7A               	movwf	display_menu@menuSizePtr& (0+255),b
  4136  001862  0E00               	movlw	high _events
  4137  001864  D036               	goto	L2
  4138  001866                     l8075:
  4139                           
  4140                           ;main.c: 340: menuSelection=2;
  4141  001866  0E00               	movlw	0
  4142  001868  0101               	movlb	1	; () banked
  4143  00186A  6F7D               	movwf	(display_menu@menuSelection+1)& (0+255),b
  4144  00186C  0E02               	movlw	2
  4145  00186E  6F7C               	movwf	display_menu@menuSelection& (0+255),b
  4146                           
  4147                           ; BSR set to: 1
  4148                           ;main.c: 341: menuIndexPtr=&creditIndex;
  4149  001870  0EE7               	movlw	low _creditIndex
  4150  001872  0101               	movlb	1	; () banked
  4151  001874  6F80               	movwf	display_menu@menuIndexPtr& (0+255),b
  4152  001876  0E00               	movlw	high _creditIndex
  4153  001878  0101               	movlb	1	; () banked
  4154  00187A  6F81               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  4155                           
  4156                           ; BSR set to: 1
  4157                           ;main.c: 342: menuSizePtr=&creditSize;
  4158  00187C  0EE9               	movlw	low _creditSize
  4159  00187E  0101               	movlb	1	; () banked
  4160  001880  6F7A               	movwf	display_menu@menuSizePtr& (0+255),b
  4161  001882  0E00               	movlw	high _creditSize
  4162  001884  D026               	goto	L2
  4163  001886                     l8081:
  4164                           
  4165                           ;main.c: 346: menuSelection=0;
  4166  001886  0E00               	movlw	0
  4167  001888  0101               	movlb	1	; () banked
  4168  00188A  6F7D               	movwf	(display_menu@menuSelection+1)& (0+255),b
  4169  00188C  0E00               	movlw	0
  4170  00188E  6F7C               	movwf	display_menu@menuSelection& (0+255),b
  4171                           
  4172                           ; BSR set to: 1
  4173                           ;main.c: 347: menuIndexPtr=&menuIndex;
  4174  001890  0EF3               	movlw	low _menuIndex
  4175  001892  0101               	movlb	1	; () banked
  4176  001894  6F80               	movwf	display_menu@menuIndexPtr& (0+255),b
  4177  001896  0E00               	movlw	high _menuIndex
  4178  001898  0101               	movlb	1	; () banked
  4179  00189A  6F81               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  4180                           
  4181                           ; BSR set to: 1
  4182                           ;main.c: 348: menuSizePtr=&menuSize;
  4183  00189C  0EF5               	movlw	low _menuSize
  4184  00189E  0101               	movlb	1	; () banked
  4185  0018A0  6F7A               	movwf	display_menu@menuSizePtr& (0+255),b
  4186  0018A2  0E00               	movlw	high _menuSize
  4187  0018A4  0101               	movlb	1	; () banked
  4188  0018A6  6F7B               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  4189                           
  4190                           ;main.c: 349: selector=1;
  4191  0018A8  0E00               	movlw	0
  4192  0018AA  0101               	movlb	1	; () banked
  4193  0018AC  6F79               	movwf	(display_menu@selector+1)& (0+255),b
  4194  0018AE  0E01               	movlw	1
  4195  0018B0  6F78               	movwf	display_menu@selector& (0+255),b
  4196                           
  4197                           ;main.c: 350: break;
  4198  0018B2  D01F               	goto	l8095
  4199  0018B4                     l8087:
  4200                           
  4201                           ;main.c: 352: menuSelection=3;
  4202  0018B4  0E00               	movlw	0
  4203  0018B6  0101               	movlb	1	; () banked
  4204  0018B8  6F7D               	movwf	(display_menu@menuSelection+1)& (0+255),b
  4205  0018BA  0E03               	movlw	3
  4206  0018BC  6F7C               	movwf	display_menu@menuSelection& (0+255),b
  4207                           
  4208                           ; BSR set to: 1
  4209                           ;main.c: 353: menuIndexPtr=&endIndex;
  4210  0018BE  0EEB               	movlw	low _endIndex
  4211  0018C0  0101               	movlb	1	; () banked
  4212  0018C2  6F80               	movwf	display_menu@menuIndexPtr& (0+255),b
  4213  0018C4  0E00               	movlw	high _endIndex
  4214  0018C6  0101               	movlb	1	; () banked
  4215  0018C8  6F81               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  4216                           
  4217                           ; BSR set to: 1
  4218                           ;main.c: 354: menuSizePtr=&endSize;
  4219  0018CA  0EED               	movlw	low _endSize
  4220  0018CC  0101               	movlb	1	; () banked
  4221  0018CE  6F7A               	movwf	display_menu@menuSizePtr& (0+255),b
  4222  0018D0  0E00               	movlw	high _endSize
  4223  0018D2                     L2:
  4224  0018D2  0101               	movlb	1	; () banked
  4225  0018D4  6F7B               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  4226                           
  4227                           ;main.c: 355: }
  4228  0018D6  D00D               	goto	l8095
  4229  0018D8                     l8093:
  4230                           
  4231                           ; BSR set to: 1
  4232  0018D8  0100               	movlb	0	; () banked
  4233  0018DA  51E6               	movf	_state& (0+255),w,b
  4234                           
  4235                           ; Switch size 1, requested type "space"
  4236                           ; Number of cases is 4, Range of values is 99 to 109
  4237                           ; switch strategies available:
  4238                           ; Name         Instructions Cycles
  4239                           ; simple_byte           13     7 (average)
  4240                           ;	Chosen strategy is simple_byte
  4241  0018DC  0A63               	xorlw	99	; case 99
  4242  0018DE  B4D8               	btfsc	status,2,c
  4243  0018E0  D7C2               	goto	l8075
  4244  0018E2  0A06               	xorlw	6	; case 101
  4245  0018E4  B4D8               	btfsc	status,2,c
  4246  0018E6  D7E6               	goto	l8087
  4247  0018E8  0A09               	xorlw	9	; case 108
  4248  0018EA  B4D8               	btfsc	status,2,c
  4249  0018EC  D7AC               	goto	l8069
  4250  0018EE  0A01               	xorlw	1	; case 109
  4251  0018F0  D7CA               	goto	l8081
  4252  0018F2                     l8095:
  4253                           
  4254                           ;main.c: 356: if (selector){
  4255  0018F2  0101               	movlb	1	; () banked
  4256  0018F4  5178               	movf	display_menu@selector& (0+255),w,b
  4257  0018F6  0101               	movlb	1	; () banked
  4258  0018F8  1179               	iorwf	(display_menu@selector+1)& (0+255),w,b
  4259  0018FA  B4D8               	btfsc	status,2,c
  4260  0018FC  D14A               	goto	l8111
  4261                           
  4262                           ; BSR set to: 1
  4263                           ;main.c: 357: if (*menuIndexPtr<*menuSizePtr){
  4264  0018FE  C17A  FFD9         	movff	display_menu@menuSizePtr,fsr2l
  4265  001902  C17B  FFDA         	movff	display_menu@menuSizePtr+1,fsr2h
  4266  001906  C180  FFE1         	movff	display_menu@menuIndexPtr,fsr1l
  4267  00190A  C181  FFE2         	movff	display_menu@menuIndexPtr+1,fsr1h
  4268  00190E  50DE               	movf	postinc2,w,c
  4269  001910  5CE6               	subwf	postinc1,w,c
  4270  001912  50E6               	movf	postinc1,w,c
  4271  001914  0A80               	xorlw	128
  4272  001916  0100               	movlb	0	; () banked
  4273  001918  6FB8               	movwf	(??_display_menu+4)& (0+255),b
  4274  00191A  50DE               	movf	postinc2,w,c
  4275  00191C  0A80               	xorlw	128
  4276  00191E  0100               	movlb	0	; () banked
  4277  001920  59B8               	subwfb	(??_display_menu+4)& (0+255),w,b
  4278  001922  B0D8               	btfsc	status,0,c
  4279  001924  D096               	goto	l8105
  4280                           
  4281                           ; BSR set to: 0
  4282                           ;main.c: 358: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4283  001926  C17C  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4284  00192A  C17D  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4285  00192E  0E00               	movlw	0
  4286  001930  0100               	movlb	0	; () banked
  4287  001932  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4288  001934  0EB4               	movlw	180
  4289  001936  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4290  001938  ECF8  F01D         	call	___wmul	;wreg free
  4291  00193C  0E82               	movlw	low _menu
  4292  00193E  0100               	movlb	0	; () banked
  4293  001940  6FB4               	movwf	??_display_menu& (0+255),b
  4294  001942  0E01               	movlw	high _menu
  4295  001944  0100               	movlb	0	; () banked
  4296  001946  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4297  001948  0100               	movlb	0	; () banked
  4298  00194A  5180               	movf	?___wmul& (0+255),w,b
  4299  00194C  0100               	movlb	0	; () banked
  4300  00194E  27B4               	addwf	??_display_menu& (0+255),f,b
  4301  001950  0100               	movlb	0	; () banked
  4302  001952  5181               	movf	(?___wmul+1)& (0+255),w,b
  4303  001954  0100               	movlb	0	; () banked
  4304  001956  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4305  001958  C180  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4306  00195C  C181  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4307  001960  CFDE F0B6          	movff	postinc2,??_display_menu+2
  4308  001964  CFDD F0B7          	movff	postdec2,??_display_menu+3
  4309  001968  0EFF               	movlw	255
  4310  00196A  0100               	movlb	0	; () banked
  4311  00196C  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  4312  00196E  0100               	movlb	0	; () banked
  4313  001970  6F80               	movwf	___wmul@multiplier& (0+255),b
  4314  001972  0EFF               	movlw	255
  4315  001974  0100               	movlb	0	; () banked
  4316  001976  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  4317  001978  0100               	movlb	0	; () banked
  4318  00197A  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4319  00197C  0E00               	movlw	0
  4320  00197E  0100               	movlb	0	; () banked
  4321  001980  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4322  001982  0E12               	movlw	18
  4323  001984  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4324  001986  ECF8  F01D         	call	___wmul	;wreg free
  4325  00198A  0100               	movlb	0	; () banked
  4326  00198C  5180               	movf	?___wmul& (0+255),w,b
  4327  00198E  0100               	movlb	0	; () banked
  4328  001990  25B4               	addwf	??_display_menu& (0+255),w,b
  4329  001992  0101               	movlb	1	; () banked
  4330  001994  6F7E               	movwf	_display_menu$1164& (0+255),b
  4331  001996  0100               	movlb	0	; () banked
  4332  001998  5181               	movf	(?___wmul+1)& (0+255),w,b
  4333  00199A  0100               	movlb	0	; () banked
  4334  00199C  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4335  00199E  0101               	movlb	1	; () banked
  4336  0019A0  6F7F               	movwf	(_display_menu$1164+1)& (0+255),b
  4337                           
  4338                           ; BSR set to: 1
  4339                           ;main.c: 358: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4340  0019A2  0E54               	movlw	low _ndisplay0
  4341  0019A4  0100               	movlb	0	; () banked
  4342  0019A6  6FA2               	movwf	sprintf@wh& (0+255),b
  4343  0019A8  0E01               	movlw	high _ndisplay0
  4344  0019AA  0100               	movlb	0	; () banked
  4345  0019AC  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4346  0019AE  0EFA               	movlw	low STR_20
  4347  0019B0  0100               	movlb	0	; () banked
  4348  0019B2  6FA4               	movwf	sprintf@f& (0+255),b
  4349  0019B4  0EFF               	movlw	high STR_20
  4350  0019B6  0100               	movlb	0	; () banked
  4351  0019B8  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4352  0019BA  C17E  F0A6         	movff	_display_menu$1164,?_sprintf+4
  4353  0019BE  C17F  F0A7         	movff	_display_menu$1164+1,?_sprintf+5
  4354  0019C2  0E00               	movlw	0
  4355  0019C4  0100               	movlb	0	; () banked
  4356  0019C6  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4357  0019C8  0E3C               	movlw	60
  4358  0019CA  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4359  0019CC  EC3B  F01D         	call	_sprintf	;wreg free
  4360                           
  4361                           ;main.c: 359: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  4362  0019D0  C17C  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4363  0019D4  C17D  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4364  0019D8  0E00               	movlw	0
  4365  0019DA  0100               	movlb	0	; () banked
  4366  0019DC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4367  0019DE  0EB4               	movlw	180
  4368  0019E0  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4369  0019E2  ECF8  F01D         	call	___wmul	;wreg free
  4370  0019E6  0E82               	movlw	low _menu
  4371  0019E8  0100               	movlb	0	; () banked
  4372  0019EA  6FB4               	movwf	??_display_menu& (0+255),b
  4373  0019EC  0E01               	movlw	high _menu
  4374  0019EE  0100               	movlb	0	; () banked
  4375  0019F0  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4376  0019F2  0100               	movlb	0	; () banked
  4377  0019F4  5180               	movf	?___wmul& (0+255),w,b
  4378  0019F6  0100               	movlb	0	; () banked
  4379  0019F8  27B4               	addwf	??_display_menu& (0+255),f,b
  4380  0019FA  0100               	movlb	0	; () banked
  4381  0019FC  5181               	movf	(?___wmul+1)& (0+255),w,b
  4382  0019FE  0100               	movlb	0	; () banked
  4383  001A00  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4384  001A02  C180  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4385  001A06  C181  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4386  001A0A  CFDE F080          	movff	postinc2,___wmul@multiplier
  4387  001A0E  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  4388  001A12  0E00               	movlw	0
  4389  001A14  0100               	movlb	0	; () banked
  4390  001A16  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4391  001A18  0E12               	movlw	18
  4392  001A1A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4393  001A1C  ECF8  F01D         	call	___wmul	;wreg free
  4394  001A20  0100               	movlb	0	; () banked
  4395  001A22  5180               	movf	?___wmul& (0+255),w,b
  4396  001A24  0100               	movlb	0	; () banked
  4397  001A26  25B4               	addwf	??_display_menu& (0+255),w,b
  4398  001A28  0101               	movlb	1	; () banked
  4399  001A2A  6F7E               	movwf	_display_menu$1164& (0+255),b
  4400  001A2C  0100               	movlb	0	; () banked
  4401  001A2E  5181               	movf	(?___wmul+1)& (0+255),w,b
  4402  001A30  0100               	movlb	0	; () banked
  4403  001A32  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4404  001A34  0101               	movlb	1	; () banked
  4405  001A36  6F7F               	movwf	(_display_menu$1164+1)& (0+255),b
  4406                           
  4407                           ;main.c: 359: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  4408  001A38  0E66               	movlw	low _ndisplay1
  4409  001A3A  0100               	movlb	0	; () banked
  4410  001A3C  6FA2               	movwf	sprintf@wh& (0+255),b
  4411  001A3E  0E01               	movlw	high _ndisplay1
  4412  001A40  0100               	movlb	0	; () banked
  4413  001A42  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4414  001A44  C17E  F0A4         	movff	_display_menu$1164,sprintf@f
  4415  001A48  C17F  F0A5         	movff	_display_menu$1164+1,sprintf@f+1
  4416  001A4C  EC3B  F01D         	call	_sprintf	;wreg free
  4417                           
  4418                           ;main.c: 360: }
  4419  001A50  0012               	return	
  4420  001A52                     l8105:
  4421                           
  4422                           ;main.c: 361: else{
  4423                           ;main.c: 362: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  4424  001A52  C17C  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4425  001A56  C17D  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4426  001A5A  0E00               	movlw	0
  4427  001A5C  0100               	movlb	0	; () banked
  4428  001A5E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4429  001A60  0EB4               	movlw	180
  4430  001A62  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4431  001A64  ECF8  F01D         	call	___wmul	;wreg free
  4432  001A68  0E82               	movlw	low _menu
  4433  001A6A  0100               	movlb	0	; () banked
  4434  001A6C  6FB4               	movwf	??_display_menu& (0+255),b
  4435  001A6E  0E01               	movlw	high _menu
  4436  001A70  0100               	movlb	0	; () banked
  4437  001A72  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4438  001A74  0100               	movlb	0	; () banked
  4439  001A76  5180               	movf	?___wmul& (0+255),w,b
  4440  001A78  0100               	movlb	0	; () banked
  4441  001A7A  27B4               	addwf	??_display_menu& (0+255),f,b
  4442  001A7C  0100               	movlb	0	; () banked
  4443  001A7E  5181               	movf	(?___wmul+1)& (0+255),w,b
  4444  001A80  0100               	movlb	0	; () banked
  4445  001A82  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4446  001A84  C180  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4447  001A88  C181  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4448  001A8C  CFDE F0B6          	movff	postinc2,??_display_menu+2
  4449  001A90  CFDD F0B7          	movff	postdec2,??_display_menu+3
  4450  001A94  0EFE               	movlw	254
  4451  001A96  0100               	movlb	0	; () banked
  4452  001A98  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  4453  001A9A  0100               	movlb	0	; () banked
  4454  001A9C  6F80               	movwf	___wmul@multiplier& (0+255),b
  4455  001A9E  0EFF               	movlw	255
  4456  001AA0  0100               	movlb	0	; () banked
  4457  001AA2  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  4458  001AA4  0100               	movlb	0	; () banked
  4459  001AA6  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4460  001AA8  0E00               	movlw	0
  4461  001AAA  0100               	movlb	0	; () banked
  4462  001AAC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4463  001AAE  0E12               	movlw	18
  4464  001AB0  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4465  001AB2  ECF8  F01D         	call	___wmul	;wreg free
  4466  001AB6  0100               	movlb	0	; () banked
  4467  001AB8  5180               	movf	?___wmul& (0+255),w,b
  4468  001ABA  0100               	movlb	0	; () banked
  4469  001ABC  25B4               	addwf	??_display_menu& (0+255),w,b
  4470  001ABE  0101               	movlb	1	; () banked
  4471  001AC0  6F7E               	movwf	_display_menu$1164& (0+255),b
  4472  001AC2  0100               	movlb	0	; () banked
  4473  001AC4  5181               	movf	(?___wmul+1)& (0+255),w,b
  4474  001AC6  0100               	movlb	0	; () banked
  4475  001AC8  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4476  001ACA  0101               	movlb	1	; () banked
  4477  001ACC  6F7F               	movwf	(_display_menu$1164+1)& (0+255),b
  4478                           
  4479                           ; BSR set to: 1
  4480                           ;main.c: 361: else{
  4481                           ;main.c: 362: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  4482  001ACE  0E54               	movlw	low _ndisplay0
  4483  001AD0  0100               	movlb	0	; () banked
  4484  001AD2  6FA2               	movwf	sprintf@wh& (0+255),b
  4485  001AD4  0E01               	movlw	high _ndisplay0
  4486  001AD6  0100               	movlb	0	; () banked
  4487  001AD8  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4488  001ADA  C17E  F0A4         	movff	_display_menu$1164,sprintf@f
  4489  001ADE  C17F  F0A5         	movff	_display_menu$1164+1,sprintf@f+1
  4490  001AE2  EC3B  F01D         	call	_sprintf	;wreg free
  4491                           
  4492                           ;main.c: 363: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4493  001AE6  C17C  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4494  001AEA  C17D  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4495  001AEE  0E00               	movlw	0
  4496  001AF0  0100               	movlb	0	; () banked
  4497  001AF2  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4498  001AF4  0EB4               	movlw	180
  4499  001AF6  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4500  001AF8  ECF8  F01D         	call	___wmul	;wreg free
  4501  001AFC  0E82               	movlw	low _menu
  4502  001AFE  0100               	movlb	0	; () banked
  4503  001B00  6FB4               	movwf	??_display_menu& (0+255),b
  4504  001B02  0E01               	movlw	high _menu
  4505  001B04  0100               	movlb	0	; () banked
  4506  001B06  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4507  001B08  0100               	movlb	0	; () banked
  4508  001B0A  5180               	movf	?___wmul& (0+255),w,b
  4509  001B0C  0100               	movlb	0	; () banked
  4510  001B0E  27B4               	addwf	??_display_menu& (0+255),f,b
  4511  001B10  0100               	movlb	0	; () banked
  4512  001B12  5181               	movf	(?___wmul+1)& (0+255),w,b
  4513  001B14  0100               	movlb	0	; () banked
  4514  001B16  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4515  001B18  C180  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4516  001B1C  C181  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4517  001B20  CFDE F0B6          	movff	postinc2,??_display_menu+2
  4518  001B24  CFDD F0B7          	movff	postdec2,??_display_menu+3
  4519  001B28  0EFF               	movlw	255
  4520  001B2A  0100               	movlb	0	; () banked
  4521  001B2C  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  4522  001B2E  0100               	movlb	0	; () banked
  4523  001B30  6F80               	movwf	___wmul@multiplier& (0+255),b
  4524  001B32  0EFF               	movlw	255
  4525  001B34  0100               	movlb	0	; () banked
  4526  001B36  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  4527  001B38  0100               	movlb	0	; () banked
  4528  001B3A  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4529  001B3C  0E00               	movlw	0
  4530  001B3E  0100               	movlb	0	; () banked
  4531  001B40  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4532  001B42  0E12               	movlw	18
  4533  001B44  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4534  001B46  ECF8  F01D         	call	___wmul	;wreg free
  4535  001B4A  0100               	movlb	0	; () banked
  4536  001B4C  5180               	movf	?___wmul& (0+255),w,b
  4537  001B4E  0100               	movlb	0	; () banked
  4538  001B50  25B4               	addwf	??_display_menu& (0+255),w,b
  4539  001B52  0101               	movlb	1	; () banked
  4540  001B54  6F7E               	movwf	_display_menu$1164& (0+255),b
  4541  001B56  0100               	movlb	0	; () banked
  4542  001B58  5181               	movf	(?___wmul+1)& (0+255),w,b
  4543  001B5A  0100               	movlb	0	; () banked
  4544  001B5C  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4545  001B5E  0101               	movlb	1	; () banked
  4546  001B60  6F7F               	movwf	(_display_menu$1164+1)& (0+255),b
  4547                           
  4548                           ;main.c: 363: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4549  001B62  0E66               	movlw	low _ndisplay1
  4550  001B64  0100               	movlb	0	; () banked
  4551  001B66  6FA2               	movwf	sprintf@wh& (0+255),b
  4552  001B68  0E01               	movlw	high _ndisplay1
  4553  001B6A  0100               	movlb	0	; () banked
  4554  001B6C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4555  001B6E  0EFA               	movlw	low STR_20
  4556  001B70  0100               	movlb	0	; () banked
  4557  001B72  6FA4               	movwf	sprintf@f& (0+255),b
  4558  001B74  0EFF               	movlw	high STR_20
  4559  001B76  0100               	movlb	0	; () banked
  4560  001B78  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4561  001B7A  C17E  F0A6         	movff	_display_menu$1164,?_sprintf+4
  4562  001B7E  C17F  F0A7         	movff	_display_menu$1164+1,?_sprintf+5
  4563  001B82  0E00               	movlw	0
  4564  001B84  0100               	movlb	0	; () banked
  4565  001B86  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4566  001B88  0E3C               	movlw	60
  4567  001B8A  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4568  001B8C  EC3B  F01D         	call	_sprintf	;wreg free
  4569                           
  4570                           ;main.c: 364: }
  4571                           ;main.c: 365: }
  4572  001B90  0012               	return	
  4573  001B92                     l8111:
  4574                           
  4575                           ;main.c: 366: else{
  4576                           ;main.c: 367: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  4577  001B92  C17C  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4578  001B96  C17D  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4579  001B9A  0E00               	movlw	0
  4580  001B9C  0100               	movlb	0	; () banked
  4581  001B9E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4582  001BA0  0EB4               	movlw	180
  4583  001BA2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4584  001BA4  ECF8  F01D         	call	___wmul	;wreg free
  4585  001BA8  0E82               	movlw	low _menu
  4586  001BAA  0100               	movlb	0	; () banked
  4587  001BAC  6FB4               	movwf	??_display_menu& (0+255),b
  4588  001BAE  0E01               	movlw	high _menu
  4589  001BB0  0100               	movlb	0	; () banked
  4590  001BB2  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4591  001BB4  0100               	movlb	0	; () banked
  4592  001BB6  5180               	movf	?___wmul& (0+255),w,b
  4593  001BB8  0100               	movlb	0	; () banked
  4594  001BBA  27B4               	addwf	??_display_menu& (0+255),f,b
  4595  001BBC  0100               	movlb	0	; () banked
  4596  001BBE  5181               	movf	(?___wmul+1)& (0+255),w,b
  4597  001BC0  0100               	movlb	0	; () banked
  4598  001BC2  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4599  001BC4  C180  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4600  001BC8  C181  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4601  001BCC  CFDE F0B6          	movff	postinc2,??_display_menu+2
  4602  001BD0  CFDD F0B7          	movff	postdec2,??_display_menu+3
  4603  001BD4  0EFF               	movlw	255
  4604  001BD6  0100               	movlb	0	; () banked
  4605  001BD8  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  4606  001BDA  0100               	movlb	0	; () banked
  4607  001BDC  6F80               	movwf	___wmul@multiplier& (0+255),b
  4608  001BDE  0EFF               	movlw	255
  4609  001BE0  0100               	movlb	0	; () banked
  4610  001BE2  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  4611  001BE4  0100               	movlb	0	; () banked
  4612  001BE6  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4613  001BE8  0E00               	movlw	0
  4614  001BEA  0100               	movlb	0	; () banked
  4615  001BEC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4616  001BEE  0E12               	movlw	18
  4617  001BF0  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4618  001BF2  ECF8  F01D         	call	___wmul	;wreg free
  4619  001BF6  0100               	movlb	0	; () banked
  4620  001BF8  5180               	movf	?___wmul& (0+255),w,b
  4621  001BFA  0100               	movlb	0	; () banked
  4622  001BFC  25B4               	addwf	??_display_menu& (0+255),w,b
  4623  001BFE  0101               	movlb	1	; () banked
  4624  001C00  6F7E               	movwf	_display_menu$1164& (0+255),b
  4625  001C02  0100               	movlb	0	; () banked
  4626  001C04  5181               	movf	(?___wmul+1)& (0+255),w,b
  4627  001C06  0100               	movlb	0	; () banked
  4628  001C08  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4629  001C0A  0101               	movlb	1	; () banked
  4630  001C0C  6F7F               	movwf	(_display_menu$1164+1)& (0+255),b
  4631                           
  4632                           ; BSR set to: 1
  4633                           ;main.c: 366: else{
  4634                           ;main.c: 367: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  4635  001C0E  0E54               	movlw	low _ndisplay0
  4636  001C10  0100               	movlb	0	; () banked
  4637  001C12  6FA2               	movwf	sprintf@wh& (0+255),b
  4638  001C14  0E01               	movlw	high _ndisplay0
  4639  001C16  0100               	movlb	0	; () banked
  4640  001C18  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4641  001C1A  0EFA               	movlw	low STR_20
  4642  001C1C  0100               	movlb	0	; () banked
  4643  001C1E  6FA4               	movwf	sprintf@f& (0+255),b
  4644  001C20  0EFF               	movlw	high STR_20
  4645  001C22  0100               	movlb	0	; () banked
  4646  001C24  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4647  001C26  C17E  F0A6         	movff	_display_menu$1164,?_sprintf+4
  4648  001C2A  C17F  F0A7         	movff	_display_menu$1164+1,?_sprintf+5
  4649  001C2E  0E00               	movlw	0
  4650  001C30  0100               	movlb	0	; () banked
  4651  001C32  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4652  001C34  0E5E               	movlw	94
  4653  001C36  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4654  001C38  EC3B  F01D         	call	_sprintf	;wreg free
  4655                           
  4656                           ;main.c: 368: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4657  001C3C  C17C  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4658  001C40  C17D  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4659  001C44  0E00               	movlw	0
  4660  001C46  0100               	movlb	0	; () banked
  4661  001C48  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4662  001C4A  0EB4               	movlw	180
  4663  001C4C  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4664  001C4E  ECF8  F01D         	call	___wmul	;wreg free
  4665  001C52  0E82               	movlw	low _menu
  4666  001C54  0100               	movlb	0	; () banked
  4667  001C56  6FB4               	movwf	??_display_menu& (0+255),b
  4668  001C58  0E01               	movlw	high _menu
  4669  001C5A  0100               	movlb	0	; () banked
  4670  001C5C  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4671  001C5E  0100               	movlb	0	; () banked
  4672  001C60  5180               	movf	?___wmul& (0+255),w,b
  4673  001C62  0100               	movlb	0	; () banked
  4674  001C64  27B4               	addwf	??_display_menu& (0+255),f,b
  4675  001C66  0100               	movlb	0	; () banked
  4676  001C68  5181               	movf	(?___wmul+1)& (0+255),w,b
  4677  001C6A  0100               	movlb	0	; () banked
  4678  001C6C  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4679  001C6E  C180  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4680  001C72  C181  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4681  001C76  CFDE F080          	movff	postinc2,___wmul@multiplier
  4682  001C7A  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  4683  001C7E  0E00               	movlw	0
  4684  001C80  0100               	movlb	0	; () banked
  4685  001C82  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4686  001C84  0E12               	movlw	18
  4687  001C86  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4688  001C88  ECF8  F01D         	call	___wmul	;wreg free
  4689  001C8C  0100               	movlb	0	; () banked
  4690  001C8E  5180               	movf	?___wmul& (0+255),w,b
  4691  001C90  0100               	movlb	0	; () banked
  4692  001C92  25B4               	addwf	??_display_menu& (0+255),w,b
  4693  001C94  0101               	movlb	1	; () banked
  4694  001C96  6F7E               	movwf	_display_menu$1164& (0+255),b
  4695  001C98  0100               	movlb	0	; () banked
  4696  001C9A  5181               	movf	(?___wmul+1)& (0+255),w,b
  4697  001C9C  0100               	movlb	0	; () banked
  4698  001C9E  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4699  001CA0  0101               	movlb	1	; () banked
  4700  001CA2  6F7F               	movwf	(_display_menu$1164+1)& (0+255),b
  4701                           
  4702                           ;main.c: 368: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4703  001CA4  0E66               	movlw	low _ndisplay1
  4704  001CA6  0100               	movlb	0	; () banked
  4705  001CA8  6FA2               	movwf	sprintf@wh& (0+255),b
  4706  001CAA  0E01               	movlw	high _ndisplay1
  4707  001CAC  0100               	movlb	0	; () banked
  4708  001CAE  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4709  001CB0  0EFA               	movlw	low STR_20
  4710  001CB2  0100               	movlb	0	; () banked
  4711  001CB4  6FA4               	movwf	sprintf@f& (0+255),b
  4712  001CB6  0EFF               	movlw	high STR_20
  4713  001CB8  0100               	movlb	0	; () banked
  4714  001CBA  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4715  001CBC  C17E  F0A6         	movff	_display_menu$1164,?_sprintf+4
  4716  001CC0  C17F  F0A7         	movff	_display_menu$1164+1,?_sprintf+5
  4717  001CC4  0E00               	movlw	0
  4718  001CC6  0100               	movlb	0	; () banked
  4719  001CC8  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4720  001CCA  0E5E               	movlw	94
  4721  001CCC  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4722  001CCE  EC3B  F01D         	call	_sprintf	;wreg free
  4723  001CD2  0012               	return	
  4724  001CD4                     __end_of_display_menu:
  4725                           	opt stack 0
  4726                           tblptru	equ	0xFF8
  4727                           tblptrh	equ	0xFF7
  4728                           tblptrl	equ	0xFF6
  4729                           tablat	equ	0xFF5
  4730                           prodh	equ	0xFF4
  4731                           prodl	equ	0xFF3
  4732                           intcon	equ	0xFF2
  4733                           intcon2	equ	0xFF1
  4734                           intcon3	equ	0xFF0
  4735                           postinc0	equ	0xFEE
  4736                           wreg	equ	0xFE8
  4737                           indf1	equ	0xFE7
  4738                           postinc1	equ	0xFE6
  4739                           postdec1	equ	0xFE5
  4740                           fsr1h	equ	0xFE2
  4741                           fsr1l	equ	0xFE1
  4742                           indf2	equ	0xFDF
  4743                           postinc2	equ	0xFDE
  4744                           postdec2	equ	0xFDD
  4745                           fsr2h	equ	0xFDA
  4746                           fsr2l	equ	0xFD9
  4747                           status	equ	0xFD8
  4748                           
  4749 ;; *************** function _sprintf *****************
  4750 ;; Defined at:
  4751 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  4752 ;; Parameters:    Size  Location     Type
  4753 ;;  wh              2   34[BANK0 ] PTR unsigned char 
  4754 ;;		 -> menu(720), ndisplay1(18), ndisplay0(18), 
  4755 ;;  f               2   36[BANK0 ] PTR const unsigned char 
  4756 ;;		 -> STR_23(5), STR_22(5), STR_21(5), STR_20(5), 
  4757 ;;		 -> STR_19(20), STR_18(20), STR_17(22), STR_16(19), 
  4758 ;;		 -> menu(720), STR_15(15), STR_14(6), STR_13(18), 
  4759 ;;		 -> STR_12(19), STR_11(16), STR_10(12), STR_9(19), 
  4760 ;;		 -> STR_8(17), STR_7(14), STR_6(12), STR_5(16), 
  4761 ;;		 -> STR_4(25), STR_3(23), STR_2(23), 
  4762 ;; Auto vars:     Size  Location     Type
  4763 ;;  pb              4   48[BANK0 ] struct __prbuf
  4764 ;;  ap              2   46[BANK0 ] PTR void [1]
  4765 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4766 ;; Return value:  Size  Location     Type
  4767 ;;                  2   34[BANK0 ] int 
  4768 ;; Registers used:
  4769 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4770 ;; Tracked objects:
  4771 ;;		On entry : 0/0
  4772 ;;		On exit  : 0/0
  4773 ;;		Unchanged: 0/0
  4774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4775 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4776 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4778 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4779 ;;Total ram usage:       18 bytes
  4780 ;; Hardware stack levels used:    1
  4781 ;; Hardware stack levels required when called:    8
  4782 ;; This function calls:
  4783 ;;		__doprnt
  4784 ;; This function is called by:
  4785 ;;		_update_display
  4786 ;;		_update_state
  4787 ;;		_display_menu
  4788 ;; This function uses a non-reentrant model
  4789 ;;
  4790                           
  4791                           	psect	text8
  4792  003A76                     __ptext8:
  4793                           	opt stack 0
  4794  003A76                     _sprintf:
  4795                           	opt stack 21
  4796                           
  4797                           ;incstack = 0
  4798  003A76  C0A2  F0B0         	movff	sprintf@wh,sprintf@pb
  4799  003A7A  C0A3  F0B1         	movff	sprintf@wh+1,sprintf@pb+1
  4800  003A7E  0E00               	movlw	0
  4801  003A80  0100               	movlb	0	; () banked
  4802  003A82  6FB2               	movwf	(sprintf@pb+2)& (0+255),b
  4803  003A84  0E00               	movlw	0
  4804  003A86  0100               	movlb	0	; () banked
  4805  003A88  6FB3               	movwf	(sprintf@pb+3)& (0+255),b
  4806  003A8A  0EA6               	movlw	low (?_sprintf+4)
  4807  003A8C  0100               	movlb	0	; () banked
  4808  003A8E  6FAE               	movwf	sprintf@ap& (0+255),b
  4809  003A90  0E00               	movlw	high (?_sprintf+4)
  4810  003A92  0100               	movlb	0	; () banked
  4811  003A94  6FAF               	movwf	(sprintf@ap+1)& (0+255),b
  4812                           
  4813                           ; BSR set to: 0
  4814  003A96  0EB0               	movlw	low sprintf@pb
  4815  003A98  0100               	movlb	0	; () banked
  4816  003A9A  6F8C               	movwf	__doprnt@pb& (0+255),b
  4817  003A9C  0E00               	movlw	high sprintf@pb
  4818  003A9E  0100               	movlb	0	; () banked
  4819  003AA0  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  4820  003AA2  C0A4  F08E         	movff	sprintf@f,__doprnt@f
  4821  003AA6  C0A5  F08F         	movff	sprintf@f+1,__doprnt@f+1
  4822  003AAA  0EAE               	movlw	low sprintf@ap
  4823  003AAC  0100               	movlb	0	; () banked
  4824  003AAE  6F90               	movwf	__doprnt@ap& (0+255),b
  4825  003AB0  0E00               	movlw	high sprintf@ap
  4826  003AB2  0100               	movlb	0	; () banked
  4827  003AB4  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  4828  003AB6  EC09  F000         	call	__doprnt	;wreg free
  4829  003ABA  C0B0  FFD9         	movff	sprintf@pb,fsr2l
  4830  003ABE  C0B1  FFDA         	movff	sprintf@pb+1,fsr2h
  4831  003AC2  0E00               	movlw	0
  4832  003AC4  6EDF               	movwf	indf2,c
  4833  003AC6  0012               	return	
  4834  003AC8                     __end_of_sprintf:
  4835                           	opt stack 0
  4836                           tblptru	equ	0xFF8
  4837                           tblptrh	equ	0xFF7
  4838                           tblptrl	equ	0xFF6
  4839                           tablat	equ	0xFF5
  4840                           prodh	equ	0xFF4
  4841                           prodl	equ	0xFF3
  4842                           intcon	equ	0xFF2
  4843                           intcon2	equ	0xFF1
  4844                           intcon3	equ	0xFF0
  4845                           postinc0	equ	0xFEE
  4846                           wreg	equ	0xFE8
  4847                           indf1	equ	0xFE7
  4848                           postinc1	equ	0xFE6
  4849                           postdec1	equ	0xFE5
  4850                           fsr1h	equ	0xFE2
  4851                           fsr1l	equ	0xFE1
  4852                           indf2	equ	0xFDF
  4853                           postinc2	equ	0xFDE
  4854                           postdec2	equ	0xFDD
  4855                           fsr2h	equ	0xFDA
  4856                           fsr2l	equ	0xFD9
  4857                           status	equ	0xFD8
  4858                           
  4859 ;; *************** function __doprnt *****************
  4860 ;; Defined at:
  4861 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4862 ;; Parameters:    Size  Location     Type
  4863 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
  4864 ;;		 -> sprintf@pb(4), printf@pb(4), 
  4865 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4866 ;;		 -> STR_26(14), STR_25(15), STR_24(8), STR_23(5), 
  4867 ;;		 -> STR_22(5), STR_21(5), STR_20(5), STR_19(20), 
  4868 ;;		 -> STR_18(20), STR_17(22), STR_16(19), menu(720), 
  4869 ;;		 -> STR_15(15), STR_14(6), STR_13(18), STR_12(19), 
  4870 ;;		 -> STR_11(16), STR_10(12), STR_9(19), STR_8(17), 
  4871 ;;		 -> STR_7(14), STR_6(12), STR_5(16), STR_4(25), 
  4872 ;;		 -> STR_3(23), STR_2(23), STR_1(5), display1(18), 
  4873 ;;		 -> display0(18), 
  4874 ;;  ap              2   16[BANK0 ] PTR PTR void 
  4875 ;;		 -> sprintf@ap(2), printf@ap(2), 
  4876 ;; Auto vars:     Size  Location     Type
  4877 ;;  idx             1   22[BANK0 ] unsigned char 
  4878 ;;  tmpval          4    0        struct .
  4879 ;;  width           2   31[BANK0 ] int 
  4880 ;;  val             2   28[BANK0 ] unsigned int 
  4881 ;;  cp              2   26[BANK0 ] PTR const unsigned char 
  4882 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_27(7), 
  4883 ;;		 -> _doprnt@c(1), ADRESH(1), menu(720), ndisplay1(18), 
  4884 ;;		 -> ndisplay0(18), 
  4885 ;;  len             2   24[BANK0 ] unsigned int 
  4886 ;;  c               1   33[BANK0 ] char 
  4887 ;;  flag            1   30[BANK0 ] unsigned char 
  4888 ;;  prec            1   23[BANK0 ] char 
  4889 ;; Return value:  Size  Location     Type
  4890 ;;                  2   12[BANK0 ] int 
  4891 ;; Registers used:
  4892 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4893 ;; Tracked objects:
  4894 ;;		On entry : 0/0
  4895 ;;		On exit  : 0/0
  4896 ;;		Unchanged: 0/0
  4897 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4898 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4899 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4900 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4901 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4902 ;;Total ram usage:       22 bytes
  4903 ;; Hardware stack levels used:    1
  4904 ;; Hardware stack levels required when called:    7
  4905 ;; This function calls:
  4906 ;;		Absolute function
  4907 ;;		___lwdiv
  4908 ;;		___lwmod
  4909 ;;		___wmul
  4910 ;;		_isdigit
  4911 ;;		_putch
  4912 ;; This function is called by:
  4913 ;;		_printf
  4914 ;;		_sprintf
  4915 ;; This function uses a non-reentrant model
  4916 ;;
  4917                           
  4918                           	psect	text9
  4919  000012                     __ptext9:
  4920                           	opt stack 0
  4921  000012                     __doprnt:
  4922                           	opt stack 21
  4923                           
  4924                           ;doprnt.c: 499: signed char c;
  4925                           ;doprnt.c: 501: int width;
  4926                           ;doprnt.c: 506: signed char prec;
  4927                           ;doprnt.c: 508: unsigned char flag;
  4928                           ;doprnt.c: 523: union {
  4929                           ;doprnt.c: 524: unsigned long vd;
  4930                           ;doprnt.c: 525: double integ;
  4931                           ;doprnt.c: 526: } tmpval;
  4932                           ;doprnt.c: 528: unsigned int val;
  4933                           ;doprnt.c: 529: unsigned len;
  4934                           ;doprnt.c: 530: const char * cp;
  4935                           ;doprnt.c: 536: while(c = *f++) {
  4936                           
  4937                           ;incstack = 0
  4938  000012  EFA2  F004         	goto	l8047
  4939  000016                     l7841:
  4940                           
  4941                           ;doprnt.c: 538: if(c != '%')
  4942  000016  0E25               	movlw	37
  4943  000018  0100               	movlb	0	; () banked
  4944  00001A  19A1               	xorwf	__doprnt@c& (0+255),w,b
  4945  00001C  B4D8               	btfsc	status,2,c
  4946  00001E  D03C               	goto	l7851
  4947                           
  4948                           ; BSR set to: 0
  4949                           ;doprnt.c: 540: {
  4950                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4951  000020  0100               	movlb	0	; () banked
  4952  000022  EE20 F002          	lfsr	2,2
  4953  000026  518C               	movf	__doprnt@pb& (0+255),w,b
  4954  000028  26D9               	addwf	fsr2l,f,c
  4955  00002A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4956  00002C  22DA               	addwfc	fsr2h,f,c
  4957  00002E  50DE               	movf	postinc2,w,c
  4958  000030  10DE               	iorwf	postinc2,w,c
  4959  000032  B4D8               	btfsc	status,2,c
  4960  000034  D01A               	goto	l7847
  4961                           
  4962                           ; BSR set to: 0
  4963  000036  0100               	movlb	0	; () banked
  4964  000038  EE20 F002          	lfsr	2,2
  4965  00003C  518C               	movf	__doprnt@pb& (0+255),w,b
  4966  00003E  26D9               	addwf	fsr2l,f,c
  4967  000040  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4968  000042  22DA               	addwfc	fsr2h,f,c
  4969  000044  CFDE F092          	movff	postinc2,??__doprnt
  4970  000048  CFDD F093          	movff	postdec2,??__doprnt+1
  4971  00004C  D802               	call	u12558
  4972  00004E  EFA2  F004         	goto	l8047
  4973  000052                     u12558:
  4974  000052  0005               	push	
  4975  000054  6EFA               	movwf	pclath,c
  4976  000056  0100               	movlb	0	; () banked
  4977  000058  5192               	movf	??__doprnt& (0+255),w,b
  4978  00005A  6EFD               	movwf	tosl,c
  4979  00005C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4980  00005E  6EFE               	movwf	tosh,c
  4981  000060  6AFF               	clrf	tosu,c
  4982  000062  50FA               	movf	pclath,w,c
  4983  000064  0100               	movlb	0	; () banked
  4984  000066  51A1               	movf	__doprnt@c& (0+255),w,b
  4985  000068  0012               	return		;indir
  4986  00006A                     l7847:
  4987  00006A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4988  00006E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4989  000072  CFDE F092          	movff	postinc2,??__doprnt
  4990  000076  CFDD F093          	movff	postdec2,??__doprnt+1
  4991  00007A  C092  FFD9         	movff	??__doprnt,fsr2l
  4992  00007E  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4993  000082  C0A1  FFDF         	movff	__doprnt@c,indf2
  4994  000086  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4995  00008A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4996  00008E  2ADE               	incf	postinc2,f,c
  4997  000090  0E00               	movlw	0
  4998  000092  22DD               	addwfc	postdec2,f,c
  4999                           
  5000                           ;doprnt.c: 542: continue;
  5001  000094  EFA2  F004         	goto	l8047
  5002  000098                     l7851:
  5003                           
  5004                           ;doprnt.c: 543: }
  5005                           ;doprnt.c: 546: width = 0;
  5006  000098  0E00               	movlw	0
  5007  00009A  0100               	movlb	0	; () banked
  5008  00009C  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5009  00009E  0E00               	movlw	0
  5010  0000A0  6F9F               	movwf	__doprnt@width& (0+255),b
  5011                           
  5012                           ;doprnt.c: 548: flag = 0;
  5013  0000A2  0E00               	movlw	0
  5014  0000A4  0100               	movlb	0	; () banked
  5015  0000A6  6F9E               	movwf	__doprnt@flag& (0+255),b
  5016                           
  5017                           ; BSR set to: 0
  5018                           ;doprnt.c: 551: switch(*f) {
  5019                           
  5020                           ;doprnt.c: 550: for(;;) {
  5021  0000A8  D005               	goto	l7857
  5022  0000AA                     l7853:
  5023                           
  5024                           ;doprnt.c: 580: flag |= 0x04;
  5025  0000AA  0100               	movlb	0	; () banked
  5026  0000AC  859E               	bsf	__doprnt@flag& (0+255),2,b
  5027                           
  5028                           ;doprnt.c: 581: f++;
  5029  0000AE  0100               	movlb	0	; () banked
  5030  0000B0  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5031  0000B2  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5032  0000B4                     l7857:
  5033  0000B4  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5034  0000B8  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5035  0000BC  0E00               	movlw	low (__mediumconst shr (0+16))
  5036  0000BE  6EF8               	movwf	tblptru,c
  5037  0000C0  0E0F               	movlw	(high __ramtop+-1)
  5038  0000C2  64F7               	cpfsgt	tblptrh,c
  5039  0000C4  D003               	bra	u12567
  5040  0000C6  0008               	tblrd		*
  5041  0000C8  50F5               	movf	tablat,w,c
  5042  0000CA  D005               	bra	u12560
  5043  0000CC                     u12567:
  5044  0000CC  CFF6 FFE9          	movff	tblptrl,fsr0l
  5045  0000D0  CFF7 FFEA          	movff	tblptrh,fsr0h
  5046  0000D4  50EF               	movf	indf0,w,c
  5047  0000D6                     u12560:
  5048                           
  5049                           ; Switch size 1, requested type "space"
  5050                           ; Number of cases is 1, Range of values is 48 to 48
  5051                           ; switch strategies available:
  5052                           ; Name         Instructions Cycles
  5053                           ; simple_byte            4     3 (average)
  5054                           ;	Chosen strategy is simple_byte
  5055  0000D6  0A30               	xorlw	48	; case 48
  5056  0000D8  B4D8               	btfsc	status,2,c
  5057  0000DA  D7E7               	goto	l7853
  5058                           
  5059                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5060                           
  5061                           ;doprnt.c: 586: }
  5062                           
  5063                           ;doprnt.c: 585: break;
  5064  0000DC  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5065  0000E0  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5066  0000E4  0E00               	movlw	low (__mediumconst shr (0+16))
  5067  0000E6  6EF8               	movwf	tblptru,c
  5068  0000E8  0E0F               	movlw	(high __ramtop+-1)
  5069  0000EA  64F7               	cpfsgt	tblptrh,c
  5070  0000EC  D003               	bra	u12577
  5071  0000EE  0008               	tblrd		*
  5072  0000F0  50F5               	movf	tablat,w,c
  5073  0000F2  D005               	bra	u12570
  5074  0000F4                     u12577:
  5075  0000F4  CFF6 FFE9          	movff	tblptrl,fsr0l
  5076  0000F8  CFF7 FFEA          	movff	tblptrh,fsr0h
  5077  0000FC  50EF               	movf	indf0,w,c
  5078  0000FE                     u12570:
  5079  0000FE  EC74  F01E         	call	_isdigit
  5080  000102  A0D8               	btfss	status,0,c
  5081  000104  D18A               	goto	l7923
  5082                           
  5083                           ;doprnt.c: 598: width = 0;
  5084  000106  0E00               	movlw	0
  5085  000108  0100               	movlb	0	; () banked
  5086  00010A  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5087  00010C  0E00               	movlw	0
  5088  00010E  6F9F               	movwf	__doprnt@width& (0+255),b
  5089  000110                     l7863:
  5090                           
  5091                           ;doprnt.c: 600: width *= 10;
  5092  000110  C09F  F080         	movff	__doprnt@width,___wmul@multiplier
  5093  000114  C0A0  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
  5094  000118  0E00               	movlw	0
  5095  00011A  0100               	movlb	0	; () banked
  5096  00011C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5097  00011E  0E0A               	movlw	10
  5098  000120  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5099  000122  ECF8  F01D         	call	___wmul	;wreg free
  5100  000126  C080  F09F         	movff	?___wmul,__doprnt@width
  5101  00012A  C081  F0A0         	movff	?___wmul+1,__doprnt@width+1
  5102                           
  5103                           ;doprnt.c: 601: width += *f++ - '0';
  5104  00012E  0ED0               	movlw	208
  5105  000130  0100               	movlb	0	; () banked
  5106  000132  6F92               	movwf	??__doprnt& (0+255),b
  5107  000134  0EFF               	movlw	255
  5108  000136  0100               	movlb	0	; () banked
  5109  000138  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5110  00013A  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5111  00013E  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5112  000142  0E00               	movlw	low (__mediumconst shr (0+16))
  5113  000144  6EF8               	movwf	tblptru,c
  5114  000146  0E0F               	movlw	(high __ramtop+-1)
  5115  000148  64F7               	cpfsgt	tblptrh,c
  5116  00014A  D003               	bra	u12597
  5117  00014C  0008               	tblrd		*
  5118  00014E  50F5               	movf	tablat,w,c
  5119  000150  D005               	bra	u12590
  5120  000152                     u12597:
  5121  000152  CFF6 FFE9          	movff	tblptrl,fsr0l
  5122  000156  CFF7 FFEA          	movff	tblptrh,fsr0h
  5123  00015A  50EF               	movf	indf0,w,c
  5124  00015C                     u12590:
  5125  00015C  0100               	movlb	0	; () banked
  5126  00015E  6F94               	movwf	(??__doprnt+2)& (0+255),b
  5127  000160  6B95               	clrf	(??__doprnt+3)& (0+255),b
  5128  000162  0100               	movlb	0	; () banked
  5129  000164  5192               	movf	??__doprnt& (0+255),w,b
  5130  000166  0100               	movlb	0	; () banked
  5131  000168  2794               	addwf	(??__doprnt+2)& (0+255),f,b
  5132  00016A  0100               	movlb	0	; () banked
  5133  00016C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5134  00016E  0100               	movlb	0	; () banked
  5135  000170  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
  5136  000172  0100               	movlb	0	; () banked
  5137  000174  5194               	movf	(??__doprnt+2)& (0+255),w,b
  5138  000176  0100               	movlb	0	; () banked
  5139  000178  279F               	addwf	__doprnt@width& (0+255),f,b
  5140  00017A  0100               	movlb	0	; () banked
  5141  00017C  5195               	movf	(??__doprnt+3)& (0+255),w,b
  5142  00017E  0100               	movlb	0	; () banked
  5143  000180  23A0               	addwfc	(__doprnt@width+1)& (0+255),f,b
  5144                           
  5145                           ; BSR set to: 0
  5146  000182  0100               	movlb	0	; () banked
  5147  000184  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5148  000186  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5149                           
  5150                           ; BSR set to: 0
  5151                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5152  000188  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5153  00018C  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5154  000190  0E00               	movlw	low (__mediumconst shr (0+16))
  5155  000192  6EF8               	movwf	tblptru,c
  5156  000194  0E0F               	movlw	(high __ramtop+-1)
  5157  000196  64F7               	cpfsgt	tblptrh,c
  5158  000198  D003               	bra	u12607
  5159  00019A  0008               	tblrd		*
  5160  00019C  50F5               	movf	tablat,w,c
  5161  00019E  D005               	bra	u12600
  5162  0001A0                     u12607:
  5163  0001A0  CFF6 FFE9          	movff	tblptrl,fsr0l
  5164  0001A4  CFF7 FFEA          	movff	tblptrh,fsr0h
  5165  0001A8  50EF               	movf	indf0,w,c
  5166  0001AA                     u12600:
  5167  0001AA  EC74  F01E         	call	_isdigit
  5168  0001AE  A0D8               	btfss	status,0,c
  5169  0001B0  D134               	goto	l7923
  5170  0001B2  D7AE               	goto	l7863
  5171  0001B4                     l7871:
  5172                           
  5173                           ;doprnt.c: 721: flag |= 0x80;
  5174  0001B4  0100               	movlb	0	; () banked
  5175  0001B6  8F9E               	bsf	__doprnt@flag& (0+255),7,b
  5176                           
  5177                           ;doprnt.c: 723: break;
  5178  0001B8  D163               	goto	l536
  5179  0001BA                     l7873:
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5183  0001BA  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5184  0001BE  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5185  0001C2  CFDF F092          	movff	indf2,??__doprnt
  5186  0001C6  0E02               	movlw	2
  5187  0001C8  26DE               	addwf	postinc2,f,c
  5188  0001CA  CFDF F093          	movff	indf2,??__doprnt+1
  5189  0001CE  0E00               	movlw	0
  5190  0001D0  22DD               	addwfc	postdec2,f,c
  5191  0001D2  C092  FFD9         	movff	??__doprnt,fsr2l
  5192  0001D6  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5193  0001DA  CFDE F09A          	movff	postinc2,__doprnt@cp
  5194  0001DE  CFDD F09B          	movff	postdec2,__doprnt@cp+1
  5195                           
  5196                           ; BSR set to: 0
  5197                           ;doprnt.c: 740: if(!cp)
  5198  0001E2  0100               	movlb	0	; () banked
  5199  0001E4  519A               	movf	__doprnt@cp& (0+255),w,b
  5200  0001E6  0100               	movlb	0	; () banked
  5201  0001E8  119B               	iorwf	(__doprnt@cp+1)& (0+255),w,b
  5202  0001EA  A4D8               	btfss	status,2,c
  5203  0001EC  D006               	goto	l7879
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;doprnt.c: 741: cp = "(null)";
  5207  0001EE  0EED               	movlw	low STR_27
  5208  0001F0  0100               	movlb	0	; () banked
  5209  0001F2  6F9A               	movwf	__doprnt@cp& (0+255),b
  5210  0001F4  0EFF               	movlw	high STR_27
  5211  0001F6  0100               	movlb	0	; () banked
  5212  0001F8  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  5213  0001FA                     l7879:
  5214                           
  5215                           ; BSR set to: 0
  5216                           ;doprnt.c: 745: len = 0;
  5217  0001FA  0E00               	movlw	0
  5218  0001FC  0100               	movlb	0	; () banked
  5219  0001FE  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  5220  000200  0E00               	movlw	0
  5221  000202  6F98               	movwf	__doprnt@len& (0+255),b
  5222                           
  5223                           ;doprnt.c: 746: while(cp[len])
  5224  000204  D003               	goto	l7883
  5225  000206                     l7881:
  5226                           
  5227                           ;doprnt.c: 747: len++;
  5228  000206  0100               	movlb	0	; () banked
  5229  000208  4B98               	infsnz	__doprnt@len& (0+255),f,b
  5230  00020A  2B99               	incf	(__doprnt@len+1)& (0+255),f,b
  5231  00020C                     l7883:
  5232                           
  5233                           ; BSR set to: 0
  5234  00020C  0100               	movlb	0	; () banked
  5235  00020E  5198               	movf	__doprnt@len& (0+255),w,b
  5236  000210  0100               	movlb	0	; () banked
  5237  000212  259A               	addwf	__doprnt@cp& (0+255),w,b
  5238  000214  0100               	movlb	0	; () banked
  5239  000216  6F92               	movwf	??__doprnt& (0+255),b
  5240  000218  0100               	movlb	0	; () banked
  5241  00021A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  5242  00021C  0100               	movlb	0	; () banked
  5243  00021E  219B               	addwfc	(__doprnt@cp+1)& (0+255),w,b
  5244  000220  0100               	movlb	0	; () banked
  5245  000222  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5246  000224  C092  FFF6         	movff	??__doprnt,tblptrl
  5247  000228  C093  FFF7         	movff	??__doprnt+1,tblptrh
  5248  00022C  0E00               	movlw	low (__mediumconst shr (0+16))
  5249  00022E  6EF8               	movwf	tblptru,c
  5250  000230  0E0F               	movlw	(high __ramtop+-1)
  5251  000232  64F7               	cpfsgt	tblptrh,c
  5252  000234  D003               	bra	u12637
  5253  000236  0008               	tblrd		*
  5254  000238  50F5               	movf	tablat,w,c
  5255  00023A  D005               	bra	u12630
  5256  00023C                     u12637:
  5257  00023C  CFF6 FFE9          	movff	tblptrl,fsr0l
  5258  000240  CFF7 FFEA          	movff	tblptrh,fsr0h
  5259  000244  50EF               	movf	indf0,w,c
  5260  000246                     u12630:
  5261  000246  0900               	iorlw	0
  5262  000248  A4D8               	btfss	status,2,c
  5263  00024A  D7DD               	goto	l7881
  5264  00024C                     l7885:
  5265                           
  5266                           ;doprnt.c: 757: if(width > len)
  5267  00024C  0100               	movlb	0	; () banked
  5268  00024E  519F               	movf	__doprnt@width& (0+255),w,b
  5269  000250  0100               	movlb	0	; () banked
  5270  000252  5D98               	subwf	__doprnt@len& (0+255),w,b
  5271  000254  0100               	movlb	0	; () banked
  5272  000256  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  5273  000258  0100               	movlb	0	; () banked
  5274  00025A  5999               	subwfb	(__doprnt@len+1)& (0+255),w,b
  5275  00025C  B0D8               	btfsc	status,0,c
  5276  00025E  D009               	goto	l7889
  5277                           
  5278                           ; BSR set to: 0
  5279                           ;doprnt.c: 758: width -= len;
  5280  000260  0100               	movlb	0	; () banked
  5281  000262  5198               	movf	__doprnt@len& (0+255),w,b
  5282  000264  0100               	movlb	0	; () banked
  5283  000266  5F9F               	subwf	__doprnt@width& (0+255),f,b
  5284  000268  0100               	movlb	0	; () banked
  5285  00026A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  5286  00026C  0100               	movlb	0	; () banked
  5287  00026E  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5288  000270  D03E               	goto	l7899
  5289  000272                     l7889:
  5290                           
  5291                           ; BSR set to: 0
  5292                           ;doprnt.c: 759: else
  5293                           ;doprnt.c: 760: width = 0;
  5294  000272  0E00               	movlw	0
  5295  000274  0100               	movlb	0	; () banked
  5296  000276  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5297  000278  0E00               	movlw	0
  5298  00027A  6F9F               	movwf	__doprnt@width& (0+255),b
  5299                           
  5300                           ; BSR set to: 0
  5301                           ;doprnt.c: 764: while(width--)
  5302  00027C  D038               	goto	l7899
  5303  00027E                     l7891:
  5304                           
  5305                           ; BSR set to: 0
  5306                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5307  00027E  0100               	movlb	0	; () banked
  5308  000280  EE20 F002          	lfsr	2,2
  5309  000284  518C               	movf	__doprnt@pb& (0+255),w,b
  5310  000286  26D9               	addwf	fsr2l,f,c
  5311  000288  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5312  00028A  22DA               	addwfc	fsr2h,f,c
  5313  00028C  50DE               	movf	postinc2,w,c
  5314  00028E  10DE               	iorwf	postinc2,w,c
  5315  000290  B4D8               	btfsc	status,2,c
  5316  000292  D018               	goto	l7895
  5317                           
  5318                           ; BSR set to: 0
  5319  000294  0100               	movlb	0	; () banked
  5320  000296  EE20 F002          	lfsr	2,2
  5321  00029A  518C               	movf	__doprnt@pb& (0+255),w,b
  5322  00029C  26D9               	addwf	fsr2l,f,c
  5323  00029E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5324  0002A0  22DA               	addwfc	fsr2h,f,c
  5325  0002A2  CFDE F092          	movff	postinc2,??__doprnt
  5326  0002A6  CFDD F093          	movff	postdec2,??__doprnt+1
  5327  0002AA  D801               	call	u12678
  5328  0002AC  D020               	goto	l7899
  5329  0002AE                     u12678:
  5330  0002AE  0005               	push	
  5331  0002B0  6EFA               	movwf	pclath,c
  5332  0002B2  0100               	movlb	0	; () banked
  5333  0002B4  5192               	movf	??__doprnt& (0+255),w,b
  5334  0002B6  6EFD               	movwf	tosl,c
  5335  0002B8  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5336  0002BA  6EFE               	movwf	tosh,c
  5337  0002BC  6AFF               	clrf	tosu,c
  5338  0002BE  50FA               	movf	pclath,w,c
  5339  0002C0  0E20               	movlw	32
  5340  0002C2  0012               	return		;indir
  5341  0002C4                     l7895:
  5342  0002C4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5343  0002C8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5344  0002CC  CFDE F092          	movff	postinc2,??__doprnt
  5345  0002D0  CFDD F093          	movff	postdec2,??__doprnt+1
  5346  0002D4  C092  FFD9         	movff	??__doprnt,fsr2l
  5347  0002D8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5348  0002DC  0E20               	movlw	32
  5349  0002DE  6EDF               	movwf	indf2,c
  5350  0002E0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5351  0002E4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5352  0002E8  2ADE               	incf	postinc2,f,c
  5353  0002EA  0E00               	movlw	0
  5354  0002EC  22DD               	addwfc	postdec2,f,c
  5355  0002EE                     l7899:
  5356  0002EE  0100               	movlb	0	; () banked
  5357  0002F0  079F               	decf	__doprnt@width& (0+255),f,b
  5358  0002F2  A0D8               	btfss	status,0,c
  5359  0002F4  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5360  0002F6  0100               	movlb	0	; () banked
  5361  0002F8  299F               	incf	__doprnt@width& (0+255),w,b
  5362  0002FA  E1C1               	bnz	l7891
  5363  0002FC  0100               	movlb	0	; () banked
  5364  0002FE  29A0               	incf	(__doprnt@width+1)& (0+255),w,b
  5365  000300  B4D8               	btfsc	status,2,c
  5366  000302  D060               	goto	l7913
  5367  000304  D7BC               	goto	l7891
  5368  000306                     l7901:
  5369                           
  5370                           ; BSR set to: 0
  5371                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  5372  000306  0100               	movlb	0	; () banked
  5373  000308  EE20 F002          	lfsr	2,2
  5374  00030C  518C               	movf	__doprnt@pb& (0+255),w,b
  5375  00030E  26D9               	addwf	fsr2l,f,c
  5376  000310  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5377  000312  22DA               	addwfc	fsr2h,f,c
  5378  000314  50DE               	movf	postinc2,w,c
  5379  000316  10DE               	iorwf	postinc2,w,c
  5380  000318  B4D8               	btfsc	status,2,c
  5381  00031A  D02C               	goto	l7907
  5382                           
  5383                           ; BSR set to: 0
  5384  00031C  0100               	movlb	0	; () banked
  5385  00031E  EE20 F002          	lfsr	2,2
  5386  000322  518C               	movf	__doprnt@pb& (0+255),w,b
  5387  000324  26D9               	addwf	fsr2l,f,c
  5388  000326  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5389  000328  22DA               	addwfc	fsr2h,f,c
  5390  00032A  CFDE F092          	movff	postinc2,??__doprnt
  5391  00032E  CFDD F093          	movff	postdec2,??__doprnt+1
  5392  000332  D801               	call	u12708
  5393  000334  D01B               	goto	l7905
  5394  000336                     u12708:
  5395  000336  0005               	push	
  5396  000338  6EFA               	movwf	pclath,c
  5397  00033A  0100               	movlb	0	; () banked
  5398  00033C  5192               	movf	??__doprnt& (0+255),w,b
  5399  00033E  6EFD               	movwf	tosl,c
  5400  000340  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5401  000342  6EFE               	movwf	tosh,c
  5402  000344  6AFF               	clrf	tosu,c
  5403  000346  50FA               	movf	pclath,w,c
  5404  000348  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  5405  00034C  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  5406  000350  0E00               	movlw	low (__mediumconst shr (0+16))
  5407  000352  6EF8               	movwf	tblptru,c
  5408  000354  0E0F               	movlw	(high __ramtop+-1)
  5409  000356  64F7               	cpfsgt	tblptrh,c
  5410  000358  D003               	bra	u12717
  5411  00035A  0008               	tblrd		*
  5412  00035C  50F5               	movf	tablat,w,c
  5413  00035E  D005               	bra	u12710
  5414  000360                     u12717:
  5415  000360  CFF6 FFE9          	movff	tblptrl,fsr0l
  5416  000364  CFF7 FFEA          	movff	tblptrh,fsr0h
  5417  000368  50EF               	movf	indf0,w,c
  5418  00036A                     u12710:
  5419  00036A  0012               	return		;indir
  5420  00036C                     l7905:
  5421  00036C  0100               	movlb	0	; () banked
  5422  00036E  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  5423  000370  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  5424  000372  D028               	goto	l7913
  5425  000374                     l7907:
  5426                           
  5427                           ; BSR set to: 0
  5428  000374  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  5429  000378  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  5430  00037C  0E00               	movlw	low (__mediumconst shr (0+16))
  5431  00037E  6EF8               	movwf	tblptru,c
  5432  000380  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5433  000384  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5434  000388  CFDE F092          	movff	postinc2,??__doprnt
  5435  00038C  CFDD F093          	movff	postdec2,??__doprnt+1
  5436  000390  C092  FFD9         	movff	??__doprnt,fsr2l
  5437  000394  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5438  000398  0E0F               	movlw	(high __ramtop+-1)
  5439  00039A  64F7               	cpfsgt	tblptrh,c
  5440  00039C  D003               	bra	u12727
  5441  00039E  0008               	tblrd		*
  5442  0003A0  50F5               	movf	tablat,w,c
  5443  0003A2  D005               	bra	u12720
  5444  0003A4                     u12727:
  5445  0003A4  CFF6 FFE9          	movff	tblptrl,fsr0l
  5446  0003A8  CFF7 FFEA          	movff	tblptrh,fsr0h
  5447  0003AC  50EF               	movf	indf0,w,c
  5448  0003AE                     u12720:
  5449  0003AE  6EDF               	movwf	indf2,c
  5450  0003B0  0100               	movlb	0	; () banked
  5451  0003B2  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  5452  0003B4  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  5453                           
  5454                           ; BSR set to: 0
  5455  0003B6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5456  0003BA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5457  0003BE  2ADE               	incf	postinc2,f,c
  5458  0003C0  0E00               	movlw	0
  5459  0003C2  22DD               	addwfc	postdec2,f,c
  5460  0003C4                     l7913:
  5461                           
  5462                           ; BSR set to: 0
  5463  0003C4  0100               	movlb	0	; () banked
  5464  0003C6  0798               	decf	__doprnt@len& (0+255),f,b
  5465  0003C8  A0D8               	btfss	status,0,c
  5466  0003CA  0799               	decf	(__doprnt@len+1)& (0+255),f,b
  5467  0003CC  0100               	movlb	0	; () banked
  5468  0003CE  2998               	incf	__doprnt@len& (0+255),w,b
  5469  0003D0  E19A               	bnz	l7901
  5470  0003D2  0100               	movlb	0	; () banked
  5471  0003D4  2999               	incf	(__doprnt@len+1)& (0+255),w,b
  5472  0003D6  B4D8               	btfsc	status,2,c
  5473  0003D8  D2B5               	goto	l8047
  5474  0003DA  D795               	goto	l7901
  5475  0003DC                     l7915:
  5476                           
  5477                           ; BSR set to: 0
  5478                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5479  0003DC  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5480  0003E0  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5481  0003E4  CFDF F092          	movff	indf2,??__doprnt
  5482  0003E8  0E02               	movlw	2
  5483  0003EA  26DE               	addwf	postinc2,f,c
  5484  0003EC  CFDF F093          	movff	indf2,??__doprnt+1
  5485  0003F0  0E00               	movlw	0
  5486  0003F2  22DD               	addwfc	postdec2,f,c
  5487  0003F4  C092  FFD9         	movff	??__doprnt,fsr2l
  5488  0003F8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5489  0003FC  50DF               	movf	indf2,w,c
  5490  0003FE  0100               	movlb	0	; () banked
  5491  000400  6FA1               	movwf	__doprnt@c& (0+255),b
  5492  000402                     l7917:
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;doprnt.c: 805: cp = (char *)&c;
  5496  000402  0EA1               	movlw	low __doprnt@c
  5497  000404  0100               	movlb	0	; () banked
  5498  000406  6F9A               	movwf	__doprnt@cp& (0+255),b
  5499  000408  0E00               	movlw	high __doprnt@c
  5500  00040A  0100               	movlb	0	; () banked
  5501  00040C  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;doprnt.c: 806: len = 1;
  5505  00040E  0E00               	movlw	0
  5506  000410  0100               	movlb	0	; () banked
  5507  000412  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  5508  000414  0E01               	movlw	1
  5509  000416  6F98               	movwf	__doprnt@len& (0+255),b
  5510                           
  5511                           ;doprnt.c: 807: goto dostring;
  5512  000418  D719               	goto	l7885
  5513  00041A                     l7923:
  5514  00041A  0100               	movlb	0	; () banked
  5515  00041C  518E               	movf	__doprnt@f& (0+255),w,b
  5516  00041E  0100               	movlb	0	; () banked
  5517  000420  6F92               	movwf	??__doprnt& (0+255),b
  5518  000422  0100               	movlb	0	; () banked
  5519  000424  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  5520  000426  0100               	movlb	0	; () banked
  5521  000428  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5522  00042A  0100               	movlb	0	; () banked
  5523  00042C  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5524  00042E  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5525  000430  C092  FFF6         	movff	??__doprnt,tblptrl
  5526  000434  C093  FFF7         	movff	??__doprnt+1,tblptrh
  5527  000438  0E00               	movlw	low (__mediumconst shr (0+16))
  5528  00043A  6EF8               	movwf	tblptru,c
  5529  00043C  0E0F               	movlw	(high __ramtop+-1)
  5530  00043E  64F7               	cpfsgt	tblptrh,c
  5531  000440  D003               	bra	u12747
  5532  000442  0008               	tblrd		*
  5533  000444  50F5               	movf	tablat,w,c
  5534  000446  D005               	bra	u12740
  5535  000448                     u12747:
  5536  000448  CFF6 FFE9          	movff	tblptrl,fsr0l
  5537  00044C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5538  000450  50EF               	movf	indf0,w,c
  5539  000452                     u12740:
  5540  000452  0100               	movlb	0	; () banked
  5541  000454  6FA1               	movwf	__doprnt@c& (0+255),b
  5542  000456  0100               	movlb	0	; () banked
  5543  000458  51A1               	movf	__doprnt@c& (0+255),w,b
  5544                           
  5545                           ; Switch size 1, requested type "space"
  5546                           ; Number of cases is 6, Range of values is 0 to 120
  5547                           ; switch strategies available:
  5548                           ; Name         Instructions Cycles
  5549                           ; simple_byte           19    10 (average)
  5550                           ;	Chosen strategy is simple_byte
  5551  00045A  0A00               	xorlw	0	; case 0
  5552  00045C  B4D8               	btfsc	status,2,c
  5553  00045E  D295               	goto	l8049
  5554  000460  0A63               	xorlw	99	; case 99
  5555  000462  B4D8               	btfsc	status,2,c
  5556  000464  D7BB               	goto	l7915
  5557  000466  0A07               	xorlw	7	; case 100
  5558  000468  B4D8               	btfsc	status,2,c
  5559  00046A  D00A               	goto	l536
  5560  00046C  0A0D               	xorlw	13	; case 105
  5561  00046E  B4D8               	btfsc	status,2,c
  5562  000470  D007               	goto	l536
  5563  000472  0A1A               	xorlw	26	; case 115
  5564  000474  B4D8               	btfsc	status,2,c
  5565  000476  D6A1               	goto	l7873
  5566  000478  0A0B               	xorlw	11	; case 120
  5567  00047A  B4D8               	btfsc	status,2,c
  5568  00047C  D69B               	goto	l7871
  5569  00047E  D7C1               	goto	l7917
  5570  000480                     l536:
  5571                           
  5572                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5573  000480  0100               	movlb	0	; () banked
  5574  000482  BF9E               	btfsc	__doprnt@flag& (0+255),7,b
  5575  000484  D020               	goto	l7933
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;doprnt.c: 1253: {
  5579                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5580  000486  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5581  00048A  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5582  00048E  CFDF F092          	movff	indf2,??__doprnt
  5583  000492  0E02               	movlw	2
  5584  000494  26DE               	addwf	postinc2,f,c
  5585  000496  CFDF F093          	movff	indf2,??__doprnt+1
  5586  00049A  0E00               	movlw	0
  5587  00049C  22DD               	addwfc	postdec2,f,c
  5588  00049E  C092  FFD9         	movff	??__doprnt,fsr2l
  5589  0004A2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5590  0004A6  CFDE F09C          	movff	postinc2,__doprnt@val
  5591  0004AA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;doprnt.c: 1261: if((int)val < 0) {
  5595  0004AE  0100               	movlb	0	; () banked
  5596  0004B0  AF9D               	btfss	(__doprnt@val+1)& (0+255),7,b
  5597  0004B2  D060               	goto	l7965
  5598                           
  5599                           ; BSR set to: 0
  5600                           ;doprnt.c: 1262: flag |= 0x03;
  5601  0004B4  0E03               	movlw	3
  5602  0004B6  0100               	movlb	0	; () banked
  5603  0004B8  139E               	iorwf	__doprnt@flag& (0+255),f,b
  5604                           
  5605                           ; BSR set to: 0
  5606                           ;doprnt.c: 1263: val = -val;
  5607  0004BA  0100               	movlb	0	; () banked
  5608  0004BC  6D9C               	negf	__doprnt@val& (0+255),b
  5609  0004BE  1F9D               	comf	(__doprnt@val+1)& (0+255),f,b
  5610  0004C0  B0D8               	btfsc	status,0,c
  5611  0004C2  2B9D               	incf	(__doprnt@val+1)& (0+255),f,b
  5612                           
  5613                           ; BSR set to: 0
  5614                           ;doprnt.c: 1264: }
  5615                           ;doprnt.c: 1266: }
  5616  0004C4  D057               	goto	l7965
  5617  0004C6                     l7933:
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;doprnt.c: 1268: else
  5621                           ;doprnt.c: 1273: {
  5622                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5623  0004C6  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5624  0004CA  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5625  0004CE  CFDF F092          	movff	indf2,??__doprnt
  5626  0004D2  0E02               	movlw	2
  5627  0004D4  26DE               	addwf	postinc2,f,c
  5628  0004D6  CFDF F093          	movff	indf2,??__doprnt+1
  5629  0004DA  0E00               	movlw	0
  5630  0004DC  22DD               	addwfc	postdec2,f,c
  5631  0004DE  C092  FFD9         	movff	??__doprnt,fsr2l
  5632  0004E2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5633  0004E6  CFDE F09C          	movff	postinc2,__doprnt@val
  5634  0004EA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;doprnt.c: 1287: }
  5638                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5639  0004EE  D042               	goto	l7965
  5640  0004F0                     l7935:
  5641                           
  5642                           ; BSR set to: 0
  5643                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5644  0004F0  0E01               	movlw	1
  5645  0004F2  0100               	movlb	0	; () banked
  5646  0004F4  6FA1               	movwf	__doprnt@c& (0+255),b
  5647  0004F6                     l7937:
  5648                           
  5649                           ; BSR set to: 0
  5650  0004F6  0E05               	movlw	5
  5651  0004F8  0100               	movlb	0	; () banked
  5652  0004FA  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5653  0004FC  B4D8               	btfsc	status,2,c
  5654  0004FE  D043               	goto	l7967
  5655                           
  5656                           ; BSR set to: 0
  5657                           ;doprnt.c: 1306: if(val < dpowers[c])
  5658                           
  5659                           ; BSR set to: 0
  5660                           
  5661                           ; BSR set to: 0
  5662  000500  0100               	movlb	0	; () banked
  5663  000502  51A1               	movf	__doprnt@c& (0+255),w,b
  5664  000504  0D02               	mullw	2
  5665  000506  0E68               	movlw	low _dpowers
  5666  000508  24F3               	addwf	prodl,w,c
  5667  00050A  6EF6               	movwf	tblptrl,c
  5668  00050C  0EFE               	movlw	high _dpowers
  5669  00050E  20F4               	addwfc	prodh,w,c
  5670  000510  6EF7               	movwf	tblptrh,c
  5671  000512                     	if	1	;There are 3 active tblptr bytes
  5672  000512  6AF8               	clrf	tblptru,c
  5673  000514  0E00               	movlw	low (__mediumconst shr (0+16))
  5674  000516  22F8               	addwfc	tblptru,f,c
  5675  000518                     	endif
  5676  000518  0009               	tblrd		*+
  5677  00051A  50F5               	movf	tablat,w,c
  5678  00051C  0100               	movlb	0	; () banked
  5679  00051E  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5680  000520  0009               	tblrd		*+
  5681  000522  50F5               	movf	tablat,w,c
  5682  000524  0100               	movlb	0	; () banked
  5683  000526  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5684  000528  A0D8               	btfss	status,0,c
  5685  00052A  D02D               	goto	l7967
  5686                           
  5687                           ; BSR set to: 0
  5688                           
  5689                           ; BSR set to: 0
  5690                           
  5691                           ; BSR set to: 0
  5692                           ;doprnt.c: 1307: break;
  5693  00052C  0100               	movlb	0	; () banked
  5694  00052E  2BA1               	incf	__doprnt@c& (0+255),f,b
  5695  000530  D7E2               	goto	l7937
  5696  000532                     l7949:
  5697                           
  5698                           ; BSR set to: 0
  5699                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5700  000532  0E01               	movlw	1
  5701  000534  0100               	movlb	0	; () banked
  5702  000536  6FA1               	movwf	__doprnt@c& (0+255),b
  5703  000538                     l7951:
  5704                           
  5705                           ; BSR set to: 0
  5706  000538  0E04               	movlw	4
  5707  00053A  0100               	movlb	0	; () banked
  5708  00053C  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5709  00053E  B4D8               	btfsc	status,2,c
  5710  000540  D022               	goto	l7967
  5711                           
  5712                           ; BSR set to: 0
  5713                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5714                           
  5715                           ; BSR set to: 0
  5716                           
  5717                           ; BSR set to: 0
  5718  000542  0100               	movlb	0	; () banked
  5719  000544  51A1               	movf	__doprnt@c& (0+255),w,b
  5720  000546  0D02               	mullw	2
  5721  000548  0E72               	movlw	low _hexpowers
  5722  00054A  24F3               	addwf	prodl,w,c
  5723  00054C  6EF6               	movwf	tblptrl,c
  5724  00054E  0EFE               	movlw	high _hexpowers
  5725  000550  20F4               	addwfc	prodh,w,c
  5726  000552  6EF7               	movwf	tblptrh,c
  5727  000554                     	if	1	;There are 3 active tblptr bytes
  5728  000554  6AF8               	clrf	tblptru,c
  5729  000556  0E00               	movlw	low (__mediumconst shr (0+16))
  5730  000558  22F8               	addwfc	tblptru,f,c
  5731  00055A                     	endif
  5732  00055A  0009               	tblrd		*+
  5733  00055C  50F5               	movf	tablat,w,c
  5734  00055E  0100               	movlb	0	; () banked
  5735  000560  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5736  000562  0009               	tblrd		*+
  5737  000564  50F5               	movf	tablat,w,c
  5738  000566  0100               	movlb	0	; () banked
  5739  000568  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5740  00056A  A0D8               	btfss	status,0,c
  5741  00056C  D00C               	goto	l7967
  5742                           
  5743                           ; BSR set to: 0
  5744                           
  5745                           ; BSR set to: 0
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;doprnt.c: 1318: break;
  5749  00056E  0100               	movlb	0	; () banked
  5750  000570  2BA1               	incf	__doprnt@c& (0+255),f,b
  5751  000572  D7E2               	goto	l7951
  5752  000574                     l7965:
  5753                           
  5754                           ; BSR set to: 0
  5755  000574  0100               	movlb	0	; () banked
  5756  000576  519E               	movf	__doprnt@flag& (0+255),w,b
  5757  000578  0B80               	andlw	128
  5758                           
  5759                           ; Switch size 1, requested type "space"
  5760                           ; Number of cases is 2, Range of values is 0 to 128
  5761                           ; switch strategies available:
  5762                           ; Name         Instructions Cycles
  5763                           ; simple_byte            7     4 (average)
  5764                           ;	Chosen strategy is simple_byte
  5765  00057A  0A00               	xorlw	0	; case 0
  5766  00057C  B4D8               	btfsc	status,2,c
  5767  00057E  D7B8               	goto	l7935
  5768  000580  0A80               	xorlw	128	; case 128
  5769  000582  B4D8               	btfsc	status,2,c
  5770  000584  D7D6               	goto	l7949
  5771  000586                     l7967:
  5772                           
  5773                           ; BSR set to: 0
  5774                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5775  000586  0100               	movlb	0	; () banked
  5776  000588  519F               	movf	__doprnt@width& (0+255),w,b
  5777  00058A  0100               	movlb	0	; () banked
  5778  00058C  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5779  00058E  B4D8               	btfsc	status,2,c
  5780  000590  D00B               	goto	l7973
  5781                           
  5782                           ; BSR set to: 0
  5783  000592  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5784  000596  0E03               	movlw	3
  5785  000598  0100               	movlb	0	; () banked
  5786  00059A  1792               	andwf	??__doprnt& (0+255),f,b
  5787  00059C  B4D8               	btfsc	status,2,c
  5788  00059E  D004               	goto	l7973
  5789                           
  5790                           ; BSR set to: 0
  5791                           ;doprnt.c: 1346: width--;
  5792  0005A0  0100               	movlb	0	; () banked
  5793  0005A2  079F               	decf	__doprnt@width& (0+255),f,b
  5794  0005A4  A0D8               	btfss	status,0,c
  5795  0005A6  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5796  0005A8                     l7973:
  5797                           
  5798                           ; BSR set to: 0
  5799                           ;doprnt.c: 1381: if(width > c)
  5800  0005A8  0E80               	movlw	128
  5801  0005AA  0100               	movlb	0	; () banked
  5802  0005AC  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  5803  0005AE  0E7F               	movlw	127
  5804  0005B0  0100               	movlb	0	; () banked
  5805  0005B2  6F92               	movwf	??__doprnt& (0+255),b
  5806  0005B4  0100               	movlb	0	; () banked
  5807  0005B6  519F               	movf	__doprnt@width& (0+255),w,b
  5808  0005B8  0100               	movlb	0	; () banked
  5809  0005BA  5DA1               	subwf	__doprnt@c& (0+255),w,b
  5810  0005BC  0100               	movlb	0	; () banked
  5811  0005BE  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  5812  0005C0  0A80               	xorlw	128
  5813  0005C2  0100               	movlb	0	; () banked
  5814  0005C4  5992               	subwfb	??__doprnt& (0+255),w,b
  5815  0005C6  B0D8               	btfsc	status,0,c
  5816  0005C8  D00B               	goto	l7977
  5817                           
  5818                           ; BSR set to: 0
  5819                           ;doprnt.c: 1382: width -= c;
  5820  0005CA  0100               	movlb	0	; () banked
  5821  0005CC  51A1               	movf	__doprnt@c& (0+255),w,b
  5822  0005CE  0100               	movlb	0	; () banked
  5823  0005D0  5F9F               	subwf	__doprnt@width& (0+255),f,b
  5824  0005D2  0E00               	movlw	0
  5825  0005D4  0100               	movlb	0	; () banked
  5826  0005D6  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  5827  0005D8  0EFF               	movlw	255
  5828  0005DA  0100               	movlb	0	; () banked
  5829  0005DC  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5830  0005DE  D005               	goto	l7979
  5831  0005E0                     l7977:
  5832                           
  5833                           ; BSR set to: 0
  5834                           ;doprnt.c: 1383: else
  5835                           ;doprnt.c: 1384: width = 0;
  5836  0005E0  0E00               	movlw	0
  5837  0005E2  0100               	movlb	0	; () banked
  5838  0005E4  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5839  0005E6  0E00               	movlw	0
  5840  0005E8  6F9F               	movwf	__doprnt@width& (0+255),b
  5841  0005EA                     l7979:
  5842                           
  5843                           ; BSR set to: 0
  5844                           ;doprnt.c: 1387: if(flag & 0x04) {
  5845  0005EA  0100               	movlb	0	; () banked
  5846  0005EC  A59E               	btfss	__doprnt@flag& (0+255),2,b
  5847  0005EE  D082               	goto	l8003
  5848                           
  5849                           ; BSR set to: 0
  5850                           ;doprnt.c: 1392: if(flag & 0x03)
  5851  0005F0  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5852  0005F4  0E03               	movlw	3
  5853  0005F6  0100               	movlb	0	; () banked
  5854  0005F8  1792               	andwf	??__doprnt& (0+255),f,b
  5855  0005FA  B4D8               	btfsc	status,2,c
  5856  0005FC  D038               	goto	l7991
  5857                           
  5858                           ; BSR set to: 0
  5859                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5860  0005FE  0100               	movlb	0	; () banked
  5861  000600  EE20 F002          	lfsr	2,2
  5862  000604  518C               	movf	__doprnt@pb& (0+255),w,b
  5863  000606  26D9               	addwf	fsr2l,f,c
  5864  000608  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5865  00060A  22DA               	addwfc	fsr2h,f,c
  5866  00060C  50DE               	movf	postinc2,w,c
  5867  00060E  10DE               	iorwf	postinc2,w,c
  5868  000610  B4D8               	btfsc	status,2,c
  5869  000612  D018               	goto	l7987
  5870                           
  5871                           ; BSR set to: 0
  5872  000614  0100               	movlb	0	; () banked
  5873  000616  EE20 F002          	lfsr	2,2
  5874  00061A  518C               	movf	__doprnt@pb& (0+255),w,b
  5875  00061C  26D9               	addwf	fsr2l,f,c
  5876  00061E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5877  000620  22DA               	addwfc	fsr2h,f,c
  5878  000622  CFDE F092          	movff	postinc2,??__doprnt
  5879  000626  CFDD F093          	movff	postdec2,??__doprnt+1
  5880  00062A  D801               	call	u12898
  5881  00062C  D020               	goto	l7991
  5882  00062E                     u12898:
  5883  00062E  0005               	push	
  5884  000630  6EFA               	movwf	pclath,c
  5885  000632  0100               	movlb	0	; () banked
  5886  000634  5192               	movf	??__doprnt& (0+255),w,b
  5887  000636  6EFD               	movwf	tosl,c
  5888  000638  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5889  00063A  6EFE               	movwf	tosh,c
  5890  00063C  6AFF               	clrf	tosu,c
  5891  00063E  50FA               	movf	pclath,w,c
  5892  000640  0E2D               	movlw	45
  5893  000642  0012               	return		;indir
  5894  000644                     l7987:
  5895  000644  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5896  000648  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5897  00064C  CFDE F092          	movff	postinc2,??__doprnt
  5898  000650  CFDD F093          	movff	postdec2,??__doprnt+1
  5899  000654  C092  FFD9         	movff	??__doprnt,fsr2l
  5900  000658  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5901  00065C  0E2D               	movlw	45
  5902  00065E  6EDF               	movwf	indf2,c
  5903  000660  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5904  000664  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5905  000668  2ADE               	incf	postinc2,f,c
  5906  00066A  0E00               	movlw	0
  5907  00066C  22DD               	addwfc	postdec2,f,c
  5908  00066E                     l7991:
  5909                           
  5910                           ;doprnt.c: 1415: if(width)
  5911  00066E  0100               	movlb	0	; () banked
  5912  000670  519F               	movf	__doprnt@width& (0+255),w,b
  5913  000672  0100               	movlb	0	; () banked
  5914  000674  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5915  000676  B4D8               	btfsc	status,2,c
  5916  000678  D0C4               	goto	l8025
  5917                           
  5918                           ; BSR set to: 0
  5919                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  5920                           
  5921                           ; BSR set to: 0
  5922                           
  5923                           ;doprnt.c: 1416: do
  5924  00067A  0100               	movlb	0	; () banked
  5925  00067C  EE20 F002          	lfsr	2,2
  5926  000680  518C               	movf	__doprnt@pb& (0+255),w,b
  5927  000682  26D9               	addwf	fsr2l,f,c
  5928  000684  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5929  000686  22DA               	addwfc	fsr2h,f,c
  5930  000688  50DE               	movf	postinc2,w,c
  5931  00068A  10DE               	iorwf	postinc2,w,c
  5932  00068C  B4D8               	btfsc	status,2,c
  5933  00068E  D018               	goto	l7997
  5934                           
  5935                           ; BSR set to: 0
  5936  000690  0100               	movlb	0	; () banked
  5937  000692  EE20 F002          	lfsr	2,2
  5938  000696  518C               	movf	__doprnt@pb& (0+255),w,b
  5939  000698  26D9               	addwf	fsr2l,f,c
  5940  00069A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5941  00069C  22DA               	addwfc	fsr2h,f,c
  5942  00069E  CFDE F092          	movff	postinc2,??__doprnt
  5943  0006A2  CFDD F093          	movff	postdec2,??__doprnt+1
  5944  0006A6  D801               	call	u12928
  5945  0006A8  D020               	goto	l8001
  5946  0006AA                     u12928:
  5947  0006AA  0005               	push	
  5948  0006AC  6EFA               	movwf	pclath,c
  5949  0006AE  0100               	movlb	0	; () banked
  5950  0006B0  5192               	movf	??__doprnt& (0+255),w,b
  5951  0006B2  6EFD               	movwf	tosl,c
  5952  0006B4  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5953  0006B6  6EFE               	movwf	tosh,c
  5954  0006B8  6AFF               	clrf	tosu,c
  5955  0006BA  50FA               	movf	pclath,w,c
  5956  0006BC  0E30               	movlw	48
  5957  0006BE  0012               	return		;indir
  5958  0006C0                     l7997:
  5959  0006C0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5960  0006C4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5961  0006C8  CFDE F092          	movff	postinc2,??__doprnt
  5962  0006CC  CFDD F093          	movff	postdec2,??__doprnt+1
  5963  0006D0  C092  FFD9         	movff	??__doprnt,fsr2l
  5964  0006D4  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5965  0006D8  0E30               	movlw	48
  5966  0006DA  6EDF               	movwf	indf2,c
  5967  0006DC  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5968  0006E0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5969  0006E4  2ADE               	incf	postinc2,f,c
  5970  0006E6  0E00               	movlw	0
  5971  0006E8  22DD               	addwfc	postdec2,f,c
  5972  0006EA                     l8001:
  5973                           
  5974                           ;doprnt.c: 1418: while(--width);
  5975  0006EA  0100               	movlb	0	; () banked
  5976  0006EC  079F               	decf	__doprnt@width& (0+255),f,b
  5977  0006EE  A0D8               	btfss	status,0,c
  5978  0006F0  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5979  0006F2  D7BD               	goto	l7991
  5980  0006F4                     l8003:
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;doprnt.c: 1422: {
  5984                           ;doprnt.c: 1424: if(width
  5985                           ;doprnt.c: 1428: )
  5986  0006F4  0100               	movlb	0	; () banked
  5987  0006F6  519F               	movf	__doprnt@width& (0+255),w,b
  5988  0006F8  0100               	movlb	0	; () banked
  5989  0006FA  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5990  0006FC  B4D8               	btfsc	status,2,c
  5991  0006FE  D042               	goto	l8015
  5992  000700                     l8005:
  5993                           
  5994                           ; BSR set to: 0
  5995                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5996  000700  0100               	movlb	0	; () banked
  5997  000702  EE20 F002          	lfsr	2,2
  5998  000706  518C               	movf	__doprnt@pb& (0+255),w,b
  5999  000708  26D9               	addwf	fsr2l,f,c
  6000  00070A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6001  00070C  22DA               	addwfc	fsr2h,f,c
  6002  00070E  50DE               	movf	postinc2,w,c
  6003  000710  10DE               	iorwf	postinc2,w,c
  6004  000712  B4D8               	btfsc	status,2,c
  6005  000714  D018               	goto	l8009
  6006                           
  6007                           ; BSR set to: 0
  6008  000716  0100               	movlb	0	; () banked
  6009  000718  EE20 F002          	lfsr	2,2
  6010  00071C  518C               	movf	__doprnt@pb& (0+255),w,b
  6011  00071E  26D9               	addwf	fsr2l,f,c
  6012  000720  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6013  000722  22DA               	addwfc	fsr2h,f,c
  6014  000724  CFDE F092          	movff	postinc2,??__doprnt
  6015  000728  CFDD F093          	movff	postdec2,??__doprnt+1
  6016  00072C  D801               	call	u12968
  6017  00072E  D020               	goto	l8013
  6018  000730                     u12968:
  6019  000730  0005               	push	
  6020  000732  6EFA               	movwf	pclath,c
  6021  000734  0100               	movlb	0	; () banked
  6022  000736  5192               	movf	??__doprnt& (0+255),w,b
  6023  000738  6EFD               	movwf	tosl,c
  6024  00073A  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6025  00073C  6EFE               	movwf	tosh,c
  6026  00073E  6AFF               	clrf	tosu,c
  6027  000740  50FA               	movf	pclath,w,c
  6028  000742  0E20               	movlw	32
  6029  000744  0012               	return		;indir
  6030  000746                     l8009:
  6031  000746  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6032  00074A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6033  00074E  CFDE F092          	movff	postinc2,??__doprnt
  6034  000752  CFDD F093          	movff	postdec2,??__doprnt+1
  6035  000756  C092  FFD9         	movff	??__doprnt,fsr2l
  6036  00075A  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6037  00075E  0E20               	movlw	32
  6038  000760  6EDF               	movwf	indf2,c
  6039  000762  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6040  000766  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6041  00076A  2ADE               	incf	postinc2,f,c
  6042  00076C  0E00               	movlw	0
  6043  00076E  22DD               	addwfc	postdec2,f,c
  6044  000770                     l8013:
  6045                           
  6046                           ;doprnt.c: 1431: while(--width);
  6047  000770  0100               	movlb	0	; () banked
  6048  000772  079F               	decf	__doprnt@width& (0+255),f,b
  6049  000774  A0D8               	btfss	status,0,c
  6050  000776  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  6051  000778  0100               	movlb	0	; () banked
  6052  00077A  519F               	movf	__doprnt@width& (0+255),w,b
  6053  00077C  0100               	movlb	0	; () banked
  6054  00077E  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  6055  000780  A4D8               	btfss	status,2,c
  6056  000782  D7BE               	goto	l8005
  6057  000784                     l8015:
  6058                           
  6059                           ; BSR set to: 0
  6060                           ;doprnt.c: 1438: if(flag & 0x03)
  6061  000784  C09E  F092         	movff	__doprnt@flag,??__doprnt
  6062  000788  0E03               	movlw	3
  6063  00078A  0100               	movlb	0	; () banked
  6064  00078C  1792               	andwf	??__doprnt& (0+255),f,b
  6065  00078E  B4D8               	btfsc	status,2,c
  6066  000790  D038               	goto	l8025
  6067                           
  6068                           ; BSR set to: 0
  6069                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  6070  000792  0100               	movlb	0	; () banked
  6071  000794  EE20 F002          	lfsr	2,2
  6072  000798  518C               	movf	__doprnt@pb& (0+255),w,b
  6073  00079A  26D9               	addwf	fsr2l,f,c
  6074  00079C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6075  00079E  22DA               	addwfc	fsr2h,f,c
  6076  0007A0  50DE               	movf	postinc2,w,c
  6077  0007A2  10DE               	iorwf	postinc2,w,c
  6078  0007A4  B4D8               	btfsc	status,2,c
  6079  0007A6  D018               	goto	l8021
  6080                           
  6081                           ; BSR set to: 0
  6082  0007A8  0100               	movlb	0	; () banked
  6083  0007AA  EE20 F002          	lfsr	2,2
  6084  0007AE  518C               	movf	__doprnt@pb& (0+255),w,b
  6085  0007B0  26D9               	addwf	fsr2l,f,c
  6086  0007B2  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6087  0007B4  22DA               	addwfc	fsr2h,f,c
  6088  0007B6  CFDE F092          	movff	postinc2,??__doprnt
  6089  0007BA  CFDD F093          	movff	postdec2,??__doprnt+1
  6090  0007BE  D801               	call	u13008
  6091  0007C0  D020               	goto	l8025
  6092  0007C2                     u13008:
  6093  0007C2  0005               	push	
  6094  0007C4  6EFA               	movwf	pclath,c
  6095  0007C6  0100               	movlb	0	; () banked
  6096  0007C8  5192               	movf	??__doprnt& (0+255),w,b
  6097  0007CA  6EFD               	movwf	tosl,c
  6098  0007CC  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6099  0007CE  6EFE               	movwf	tosh,c
  6100  0007D0  6AFF               	clrf	tosu,c
  6101  0007D2  50FA               	movf	pclath,w,c
  6102  0007D4  0E2D               	movlw	45
  6103  0007D6  0012               	return		;indir
  6104  0007D8                     l8021:
  6105  0007D8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6106  0007DC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6107  0007E0  CFDE F092          	movff	postinc2,??__doprnt
  6108  0007E4  CFDD F093          	movff	postdec2,??__doprnt+1
  6109  0007E8  C092  FFD9         	movff	??__doprnt,fsr2l
  6110  0007EC  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6111  0007F0  0E2D               	movlw	45
  6112  0007F2  6EDF               	movwf	indf2,c
  6113  0007F4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6114  0007F8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6115  0007FC  2ADE               	incf	postinc2,f,c
  6116  0007FE  0E00               	movlw	0
  6117  000800  22DD               	addwfc	postdec2,f,c
  6118  000802                     l8025:
  6119                           
  6120                           ;doprnt.c: 1469: }
  6121                           ;doprnt.c: 1472: prec = c;
  6122  000802  C0A1  F097         	movff	__doprnt@c,__doprnt@prec
  6123                           
  6124                           ;doprnt.c: 1474: while(prec--) {
  6125  000806  D098               	goto	l8045
  6126  000808                     l8027:
  6127                           
  6128                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6129  000808  0100               	movlb	0	; () banked
  6130  00080A  5197               	movf	__doprnt@prec& (0+255),w,b
  6131  00080C  0D02               	mullw	2
  6132  00080E  0E68               	movlw	low _dpowers
  6133  000810  24F3               	addwf	prodl,w,c
  6134  000812  6EF6               	movwf	tblptrl,c
  6135  000814  0EFE               	movlw	high _dpowers
  6136  000816  20F4               	addwfc	prodh,w,c
  6137  000818  6EF7               	movwf	tblptrh,c
  6138  00081A                     	if	1	;There are 3 active tblptr bytes
  6139  00081A  6AF8               	clrf	tblptru,c
  6140  00081C  0E00               	movlw	low (__mediumconst shr (0+16))
  6141  00081E  22F8               	addwfc	tblptru,f,c
  6142  000820                     	endif
  6143  000820  0009               	tblrd		*+
  6144  000822  CFF5 F082          	movff	tablat,___lwdiv@divisor
  6145  000826  000A               	tblrd		*-
  6146  000828  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  6147  00082C  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  6148  000830  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  6149  000834  ECAB  F01B         	call	___lwdiv
  6150  000838  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  6151  00083C  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  6152  000840  0E00               	movlw	0
  6153  000842  0100               	movlb	0	; () banked
  6154  000844  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  6155  000846  0E0A               	movlw	10
  6156  000848  6F89               	movwf	___lwmod@divisor& (0+255),b
  6157  00084A  EC53  F01C         	call	___lwmod	;wreg free
  6158  00084E  0100               	movlb	0	; () banked
  6159  000850  5187               	movf	?___lwmod& (0+255),w,b
  6160  000852  0F30               	addlw	48
  6161  000854  0100               	movlb	0	; () banked
  6162  000856  6FA1               	movwf	__doprnt@c& (0+255),b
  6163                           
  6164                           ;doprnt.c: 1491: break;
  6165  000858  D036               	goto	l8037
  6166  00085A                     l8029:
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;doprnt.c: 1499: {
  6170                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6171  00085A  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  6172  00085E  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  6173  000862  0100               	movlb	0	; () banked
  6174  000864  5197               	movf	__doprnt@prec& (0+255),w,b
  6175  000866  0D02               	mullw	2
  6176  000868  0E72               	movlw	low _hexpowers
  6177  00086A  24F3               	addwf	prodl,w,c
  6178  00086C  6EF6               	movwf	tblptrl,c
  6179  00086E  0EFE               	movlw	high _hexpowers
  6180  000870  20F4               	addwfc	prodh,w,c
  6181  000872  6EF7               	movwf	tblptrh,c
  6182  000874                     	if	1	;There are 3 active tblptr bytes
  6183  000874  6AF8               	clrf	tblptru,c
  6184  000876  0E00               	movlw	low (__mediumconst shr (0+16))
  6185  000878  22F8               	addwfc	tblptru,f,c
  6186  00087A                     	endif
  6187  00087A  0009               	tblrd		*+
  6188  00087C  CFF5 F082          	movff	tablat,___lwdiv@divisor
  6189  000880  000A               	tblrd		*-
  6190  000882  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  6191  000886  ECAB  F01B         	call	___lwdiv	;wreg free
  6192  00088A  0100               	movlb	0	; () banked
  6193  00088C  5180               	movf	?___lwdiv& (0+255),w,b
  6194  00088E  0B0F               	andlw	15
  6195  000890  0100               	movlb	0	; () banked
  6196  000892  6F96               	movwf	__doprnt@idx& (0+255),b
  6197                           
  6198                           ; BSR set to: 0
  6199                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6200  000894  0100               	movlb	0	; () banked
  6201  000896  5196               	movf	__doprnt@idx& (0+255),w,b
  6202  000898  0D01               	mullw	1
  6203  00089A  0E51               	movlw	low STR_28
  6204  00089C  24F3               	addwf	prodl,w,c
  6205  00089E  6EF6               	movwf	tblptrl,c
  6206  0008A0  0EFF               	movlw	high STR_28
  6207  0008A2  20F4               	addwfc	prodh,w,c
  6208  0008A4  6EF7               	movwf	tblptrh,c
  6209  0008A6                     	if	1	;There are 3 active tblptr bytes
  6210  0008A6  6AF8               	clrf	tblptru,c
  6211  0008A8  0E00               	movlw	low (__mediumconst shr (0+16))
  6212  0008AA  22F8               	addwfc	tblptru,f,c
  6213  0008AC                     	endif
  6214  0008AC  0008               	tblrd		*
  6215  0008AE  CFF5 F0A1          	movff	tablat,__doprnt@c
  6216                           
  6217                           ; BSR set to: 0
  6218                           ;doprnt.c: 1523: }
  6219                           
  6220                           ;doprnt.c: 1508: }
  6221                           ;doprnt.c: 1510: break;
  6222  0008B2  D009               	goto	l8037
  6223  0008B4                     l8035:
  6224  0008B4  0100               	movlb	0	; () banked
  6225  0008B6  519E               	movf	__doprnt@flag& (0+255),w,b
  6226  0008B8  0B80               	andlw	128
  6227                           
  6228                           ; Switch size 1, requested type "space"
  6229                           ; Number of cases is 2, Range of values is 0 to 128
  6230                           ; switch strategies available:
  6231                           ; Name         Instructions Cycles
  6232                           ; simple_byte            7     4 (average)
  6233                           ;	Chosen strategy is simple_byte
  6234  0008BA  0A00               	xorlw	0	; case 0
  6235  0008BC  B4D8               	btfsc	status,2,c
  6236  0008BE  D7A4               	goto	l8027
  6237  0008C0  0A80               	xorlw	128	; case 128
  6238  0008C2  B4D8               	btfsc	status,2,c
  6239  0008C4  D7CA               	goto	l8029
  6240  0008C6                     l8037:
  6241                           
  6242                           ; BSR set to: 0
  6243                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  6244  0008C6  0100               	movlb	0	; () banked
  6245  0008C8  EE20 F002          	lfsr	2,2
  6246  0008CC  518C               	movf	__doprnt@pb& (0+255),w,b
  6247  0008CE  26D9               	addwf	fsr2l,f,c
  6248  0008D0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6249  0008D2  22DA               	addwfc	fsr2h,f,c
  6250  0008D4  50DE               	movf	postinc2,w,c
  6251  0008D6  10DE               	iorwf	postinc2,w,c
  6252  0008D8  B4D8               	btfsc	status,2,c
  6253  0008DA  D019               	goto	l8041
  6254                           
  6255                           ; BSR set to: 0
  6256  0008DC  0100               	movlb	0	; () banked
  6257  0008DE  EE20 F002          	lfsr	2,2
  6258  0008E2  518C               	movf	__doprnt@pb& (0+255),w,b
  6259  0008E4  26D9               	addwf	fsr2l,f,c
  6260  0008E6  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6261  0008E8  22DA               	addwfc	fsr2h,f,c
  6262  0008EA  CFDE F092          	movff	postinc2,??__doprnt
  6263  0008EE  CFDD F093          	movff	postdec2,??__doprnt+1
  6264  0008F2  D801               	call	u13028
  6265  0008F4  D021               	goto	l8045
  6266  0008F6                     u13028:
  6267  0008F6  0005               	push	
  6268  0008F8  6EFA               	movwf	pclath,c
  6269  0008FA  0100               	movlb	0	; () banked
  6270  0008FC  5192               	movf	??__doprnt& (0+255),w,b
  6271  0008FE  6EFD               	movwf	tosl,c
  6272  000900  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6273  000902  6EFE               	movwf	tosh,c
  6274  000904  6AFF               	clrf	tosu,c
  6275  000906  50FA               	movf	pclath,w,c
  6276  000908  0100               	movlb	0	; () banked
  6277  00090A  51A1               	movf	__doprnt@c& (0+255),w,b
  6278  00090C  0012               	return		;indir
  6279  00090E                     l8041:
  6280  00090E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6281  000912  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6282  000916  CFDE F092          	movff	postinc2,??__doprnt
  6283  00091A  CFDD F093          	movff	postdec2,??__doprnt+1
  6284  00091E  C092  FFD9         	movff	??__doprnt,fsr2l
  6285  000922  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6286  000926  C0A1  FFDF         	movff	__doprnt@c,indf2
  6287  00092A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6288  00092E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6289  000932  2ADE               	incf	postinc2,f,c
  6290  000934  0E00               	movlw	0
  6291  000936  22DD               	addwfc	postdec2,f,c
  6292  000938                     l8045:
  6293  000938  0100               	movlb	0	; () banked
  6294  00093A  0797               	decf	__doprnt@prec& (0+255),f,b
  6295  00093C  0100               	movlb	0	; () banked
  6296  00093E  2997               	incf	__doprnt@prec& (0+255),w,b
  6297  000940  A4D8               	btfss	status,2,c
  6298  000942  D7B8               	goto	l8035
  6299  000944                     l8047:
  6300  000944  0100               	movlb	0	; () banked
  6301  000946  518E               	movf	__doprnt@f& (0+255),w,b
  6302  000948  0100               	movlb	0	; () banked
  6303  00094A  6F92               	movwf	??__doprnt& (0+255),b
  6304  00094C  0100               	movlb	0	; () banked
  6305  00094E  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  6306  000950  0100               	movlb	0	; () banked
  6307  000952  6F93               	movwf	(??__doprnt+1)& (0+255),b
  6308  000954  0100               	movlb	0	; () banked
  6309  000956  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  6310  000958  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  6311  00095A  C092  FFF6         	movff	??__doprnt,tblptrl
  6312  00095E  C093  FFF7         	movff	??__doprnt+1,tblptrh
  6313  000962  0E00               	movlw	low (__mediumconst shr (0+16))
  6314  000964  6EF8               	movwf	tblptru,c
  6315  000966  0E0F               	movlw	(high __ramtop+-1)
  6316  000968  64F7               	cpfsgt	tblptrh,c
  6317  00096A  D003               	bra	u13047
  6318  00096C  0008               	tblrd		*
  6319  00096E  50F5               	movf	tablat,w,c
  6320  000970  D005               	bra	u13040
  6321  000972                     u13047:
  6322  000972  CFF6 FFE9          	movff	tblptrl,fsr0l
  6323  000976  CFF7 FFEA          	movff	tblptrh,fsr0h
  6324  00097A  50EF               	movf	indf0,w,c
  6325  00097C                     u13040:
  6326  00097C  0100               	movlb	0	; () banked
  6327  00097E  6FA1               	movwf	__doprnt@c& (0+255),b
  6328  000980  0100               	movlb	0	; () banked
  6329  000982  51A1               	movf	__doprnt@c& (0+255),w,b
  6330  000984  A4D8               	btfss	status,2,c
  6331  000986  EF0B  F000         	goto	l7841
  6332  00098A                     l8049:
  6333                           
  6334                           ;doprnt.c: 1540: return 0;
  6335  00098A  0E00               	movlw	0
  6336  00098C  0100               	movlb	0	; () banked
  6337  00098E  6F8D               	movwf	(?__doprnt+1)& (0+255),b
  6338  000990  0E00               	movlw	0
  6339  000992  6F8C               	movwf	?__doprnt& (0+255),b
  6340  000994  0012               	return	
  6341  000996                     __end_of__doprnt:
  6342                           	opt stack 0
  6343                           tosu	equ	0xFFF
  6344                           tosh	equ	0xFFE
  6345                           tosl	equ	0xFFD
  6346                           pclath	equ	0xFFA
  6347                           tblptru	equ	0xFF8
  6348                           tblptrh	equ	0xFF7
  6349                           tblptrl	equ	0xFF6
  6350                           tablat	equ	0xFF5
  6351                           prodh	equ	0xFF4
  6352                           prodl	equ	0xFF3
  6353                           intcon	equ	0xFF2
  6354                           intcon2	equ	0xFF1
  6355                           intcon3	equ	0xFF0
  6356                           indf0	equ	0xFEF
  6357                           postinc0	equ	0xFEE
  6358                           fsr0h	equ	0xFEA
  6359                           fsr0l	equ	0xFE9
  6360                           wreg	equ	0xFE8
  6361                           indf1	equ	0xFE7
  6362                           postinc1	equ	0xFE6
  6363                           postdec1	equ	0xFE5
  6364                           fsr1h	equ	0xFE2
  6365                           fsr1l	equ	0xFE1
  6366                           indf2	equ	0xFDF
  6367                           postinc2	equ	0xFDE
  6368                           postdec2	equ	0xFDD
  6369                           fsr2h	equ	0xFDA
  6370                           fsr2l	equ	0xFD9
  6371                           status	equ	0xFD8
  6372                           
  6373 ;; *************** function _putch *****************
  6374 ;; Defined at:
  6375 ;;		line 30 in file "lcd.c"
  6376 ;; Parameters:    Size  Location     Type
  6377 ;;  data            1    wreg     unsigned char 
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;  data            1    2[BANK0 ] unsigned char 
  6380 ;; Return value:  Size  Location     Type
  6381 ;;                  1    wreg      void 
  6382 ;; Registers used:
  6383 ;;		wreg, status,2, status,0, cstack
  6384 ;; Tracked objects:
  6385 ;;		On entry : 0/0
  6386 ;;		On exit  : 0/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6390 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6392 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6393 ;;Total ram usage:        1 bytes
  6394 ;; Hardware stack levels used:    1
  6395 ;; Hardware stack levels required when called:    6
  6396 ;; This function calls:
  6397 ;;		_lcdNibble
  6398 ;; This function is called by:
  6399 ;;		_printf
  6400 ;;		__doprnt
  6401 ;;		i2__doprnt
  6402 ;; This function uses a non-reentrant model
  6403 ;;
  6404                           
  6405                           	psect	text10
  6406  003D72                     __ptext10:
  6407                           	opt stack 0
  6408  003D72                     _putch:
  6409                           	opt stack 0
  6410                           
  6411                           ; BSR set to: 0
  6412                           ;Skip over the trampoline to the duplicate function for level 2
  6413  003D72  B276               	btfsc	btemp,1,c
  6414  003D74  EFD6  F01E         	goto	i2_putch
  6415  003D78                     _putch$intlevel0:
  6416                           	opt stack 21
  6417                           
  6418                           ;incstack = 0
  6419                           ;putch@data stored from wreg
  6420  003D78  0100               	movlb	0	; () banked
  6421  003D7A  6F82               	movwf	putch@data& (0+255),b
  6422                           
  6423                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  6424  003D7C  848C               	bsf	3980,2,c	;volatile
  6425                           
  6426                           ;lcd.c: 32: lcdNibble(data);
  6427  003D7E  0100               	movlb	0	; () banked
  6428  003D80  5182               	movf	putch@data& (0+255),w,b
  6429  003D82  EC1F  F01C         	call	_lcdNibble
  6430  003D86  0012               	return		;funcret
  6431  003D88                     __end_of_putch:
  6432                           	opt stack 0
  6433                           tosu	equ	0xFFF
  6434                           tosh	equ	0xFFE
  6435                           tosl	equ	0xFFD
  6436                           pclath	equ	0xFFA
  6437                           tblptru	equ	0xFF8
  6438                           tblptrh	equ	0xFF7
  6439                           tblptrl	equ	0xFF6
  6440                           tablat	equ	0xFF5
  6441                           prodh	equ	0xFF4
  6442                           prodl	equ	0xFF3
  6443                           intcon	equ	0xFF2
  6444                           intcon2	equ	0xFF1
  6445                           intcon3	equ	0xFF0
  6446                           indf0	equ	0xFEF
  6447                           postinc0	equ	0xFEE
  6448                           fsr0h	equ	0xFEA
  6449                           fsr0l	equ	0xFE9
  6450                           wreg	equ	0xFE8
  6451                           indf1	equ	0xFE7
  6452                           postinc1	equ	0xFE6
  6453                           postdec1	equ	0xFE5
  6454                           fsr1h	equ	0xFE2
  6455                           fsr1l	equ	0xFE1
  6456                           indf2	equ	0xFDF
  6457                           postinc2	equ	0xFDE
  6458                           postdec2	equ	0xFDD
  6459                           fsr2h	equ	0xFDA
  6460                           fsr2l	equ	0xFD9
  6461                           status	equ	0xFD8
  6462                           
  6463 ;; *************** function _isdigit *****************
  6464 ;; Defined at:
  6465 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6466 ;; Parameters:    Size  Location     Type
  6467 ;;  c               1    wreg     unsigned char 
  6468 ;; Auto vars:     Size  Location     Type
  6469 ;;  c               1    2[BANK0 ] unsigned char 
  6470 ;; Return value:  Size  Location     Type
  6471 ;;		None               void
  6472 ;; Registers used:
  6473 ;;		wreg, status,2, status,0
  6474 ;; Tracked objects:
  6475 ;;		On entry : 0/0
  6476 ;;		On exit  : 0/0
  6477 ;;		Unchanged: 0/0
  6478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6480 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6481 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6482 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6483 ;;Total ram usage:        3 bytes
  6484 ;; Hardware stack levels used:    1
  6485 ;; Hardware stack levels required when called:    5
  6486 ;; This function calls:
  6487 ;;		Nothing
  6488 ;; This function is called by:
  6489 ;;		__doprnt
  6490 ;; This function uses a non-reentrant model
  6491 ;;
  6492                           
  6493                           	psect	text11
  6494  003CE8                     __ptext11:
  6495                           	opt stack 0
  6496  003CE8                     _isdigit:
  6497                           	opt stack 22
  6498                           
  6499                           ;incstack = 0
  6500                           ;isdigit@c stored from wreg
  6501  003CE8  0100               	movlb	0	; () banked
  6502  003CEA  6F82               	movwf	isdigit@c& (0+255),b
  6503  003CEC  0E00               	movlw	0
  6504  003CEE  0100               	movlb	0	; () banked
  6505  003CF0  6F81               	movwf	_isdigit$777& (0+255),b
  6506                           
  6507                           ; BSR set to: 0
  6508  003CF2  0E3A               	movlw	58
  6509  003CF4  0100               	movlb	0	; () banked
  6510  003CF6  6182               	cpfslt	isdigit@c& (0+255),b
  6511  003CF8  D007               	goto	l4563
  6512                           
  6513                           ; BSR set to: 0
  6514  003CFA  0E2F               	movlw	47
  6515  003CFC  0100               	movlb	0	; () banked
  6516  003CFE  6582               	cpfsgt	isdigit@c& (0+255),b
  6517  003D00  D003               	goto	l4563
  6518                           
  6519                           ; BSR set to: 0
  6520  003D02  0E01               	movlw	1
  6521  003D04  0100               	movlb	0	; () banked
  6522  003D06  6F81               	movwf	_isdigit$777& (0+255),b
  6523  003D08                     l4563:
  6524                           
  6525                           ; BSR set to: 0
  6526  003D08  C081  F080         	movff	_isdigit$777,??_isdigit
  6527  003D0C  0100               	movlb	0	; () banked
  6528  003D0E  3180               	rrcf	??_isdigit& (0+255),w,b
  6529  003D10  0012               	return	
  6530  003D12                     __end_of_isdigit:
  6531                           	opt stack 0
  6532                           tosu	equ	0xFFF
  6533                           tosh	equ	0xFFE
  6534                           tosl	equ	0xFFD
  6535                           pclath	equ	0xFFA
  6536                           tblptru	equ	0xFF8
  6537                           tblptrh	equ	0xFF7
  6538                           tblptrl	equ	0xFF6
  6539                           tablat	equ	0xFF5
  6540                           prodh	equ	0xFF4
  6541                           prodl	equ	0xFF3
  6542                           intcon	equ	0xFF2
  6543                           intcon2	equ	0xFF1
  6544                           intcon3	equ	0xFF0
  6545                           indf0	equ	0xFEF
  6546                           postinc0	equ	0xFEE
  6547                           fsr0h	equ	0xFEA
  6548                           fsr0l	equ	0xFE9
  6549                           wreg	equ	0xFE8
  6550                           indf1	equ	0xFE7
  6551                           postinc1	equ	0xFE6
  6552                           postdec1	equ	0xFE5
  6553                           fsr1h	equ	0xFE2
  6554                           fsr1l	equ	0xFE1
  6555                           indf2	equ	0xFDF
  6556                           postinc2	equ	0xFDE
  6557                           postdec2	equ	0xFDD
  6558                           fsr2h	equ	0xFDA
  6559                           fsr2l	equ	0xFD9
  6560                           status	equ	0xFD8
  6561                           
  6562 ;; *************** function ___lwmod *****************
  6563 ;; Defined at:
  6564 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6565 ;; Parameters:    Size  Location     Type
  6566 ;;  dividend        2    7[BANK0 ] unsigned int 
  6567 ;;  divisor         2    9[BANK0 ] unsigned int 
  6568 ;; Auto vars:     Size  Location     Type
  6569 ;;  counter         1   11[BANK0 ] unsigned char 
  6570 ;; Return value:  Size  Location     Type
  6571 ;;                  2    7[BANK0 ] unsigned int 
  6572 ;; Registers used:
  6573 ;;		wreg, status,2, status,0
  6574 ;; Tracked objects:
  6575 ;;		On entry : 0/0
  6576 ;;		On exit  : 0/0
  6577 ;;		Unchanged: 0/0
  6578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6579 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6580 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6582 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6583 ;;Total ram usage:        5 bytes
  6584 ;; Hardware stack levels used:    1
  6585 ;; Hardware stack levels required when called:    5
  6586 ;; This function calls:
  6587 ;;		Nothing
  6588 ;; This function is called by:
  6589 ;;		__doprnt
  6590 ;; This function uses a non-reentrant model
  6591 ;;
  6592                           
  6593                           	psect	text12
  6594  0038A6                     __ptext12:
  6595                           	opt stack 0
  6596  0038A6                     ___lwmod:
  6597                           	opt stack 22
  6598                           
  6599                           ; BSR set to: 0
  6600                           ;incstack = 0
  6601  0038A6  0100               	movlb	0	; () banked
  6602  0038A8  5189               	movf	___lwmod@divisor& (0+255),w,b
  6603  0038AA  0100               	movlb	0	; () banked
  6604  0038AC  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6605  0038AE  B4D8               	btfsc	status,2,c
  6606  0038B0  D026               	goto	l1020
  6607                           
  6608                           ; BSR set to: 0
  6609  0038B2  0E01               	movlw	1
  6610  0038B4  0100               	movlb	0	; () banked
  6611  0038B6  6F8B               	movwf	___lwmod@counter& (0+255),b
  6612  0038B8  D006               	goto	l4601
  6613  0038BA                     l4599:
  6614                           
  6615                           ; BSR set to: 0
  6616  0038BA  0100               	movlb	0	; () banked
  6617  0038BC  90D8               	bcf	status,0,c
  6618  0038BE  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  6619  0038C0  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6620  0038C2  0100               	movlb	0	; () banked
  6621  0038C4  2B8B               	incf	___lwmod@counter& (0+255),f,b
  6622  0038C6                     l4601:
  6623                           
  6624                           ; BSR set to: 0
  6625  0038C6  0100               	movlb	0	; () banked
  6626  0038C8  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6627  0038CA  D7F7               	goto	l4599
  6628  0038CC                     l4603:
  6629                           
  6630                           ; BSR set to: 0
  6631  0038CC  0100               	movlb	0	; () banked
  6632  0038CE  5189               	movf	___lwmod@divisor& (0+255),w,b
  6633  0038D0  0100               	movlb	0	; () banked
  6634  0038D2  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  6635  0038D4  0100               	movlb	0	; () banked
  6636  0038D6  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6637  0038D8  0100               	movlb	0	; () banked
  6638  0038DA  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6639  0038DC  A0D8               	btfss	status,0,c
  6640  0038DE  D008               	goto	l4607
  6641                           
  6642                           ; BSR set to: 0
  6643  0038E0  0100               	movlb	0	; () banked
  6644  0038E2  5189               	movf	___lwmod@divisor& (0+255),w,b
  6645  0038E4  0100               	movlb	0	; () banked
  6646  0038E6  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  6647  0038E8  0100               	movlb	0	; () banked
  6648  0038EA  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6649  0038EC  0100               	movlb	0	; () banked
  6650  0038EE  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6651  0038F0                     l4607:
  6652                           
  6653                           ; BSR set to: 0
  6654  0038F0  0100               	movlb	0	; () banked
  6655  0038F2  90D8               	bcf	status,0,c
  6656  0038F4  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6657  0038F6  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  6658                           
  6659                           ; BSR set to: 0
  6660  0038F8  0100               	movlb	0	; () banked
  6661  0038FA  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  6662  0038FC  D7E7               	goto	l4603
  6663  0038FE                     l1020:
  6664                           
  6665                           ; BSR set to: 0
  6666  0038FE  C087  F087         	movff	___lwmod@dividend,?___lwmod
  6667  003902  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  6668                           
  6669                           ; BSR set to: 0
  6670  003906  0012               	return		;funcret
  6671  003908                     __end_of___lwmod:
  6672                           	opt stack 0
  6673                           tosu	equ	0xFFF
  6674                           tosh	equ	0xFFE
  6675                           tosl	equ	0xFFD
  6676                           pclath	equ	0xFFA
  6677                           tblptru	equ	0xFF8
  6678                           tblptrh	equ	0xFF7
  6679                           tblptrl	equ	0xFF6
  6680                           tablat	equ	0xFF5
  6681                           prodh	equ	0xFF4
  6682                           prodl	equ	0xFF3
  6683                           intcon	equ	0xFF2
  6684                           intcon2	equ	0xFF1
  6685                           intcon3	equ	0xFF0
  6686                           indf0	equ	0xFEF
  6687                           postinc0	equ	0xFEE
  6688                           fsr0h	equ	0xFEA
  6689                           fsr0l	equ	0xFE9
  6690                           wreg	equ	0xFE8
  6691                           indf1	equ	0xFE7
  6692                           postinc1	equ	0xFE6
  6693                           postdec1	equ	0xFE5
  6694                           fsr1h	equ	0xFE2
  6695                           fsr1l	equ	0xFE1
  6696                           indf2	equ	0xFDF
  6697                           postinc2	equ	0xFDE
  6698                           postdec2	equ	0xFDD
  6699                           fsr2h	equ	0xFDA
  6700                           fsr2l	equ	0xFD9
  6701                           status	equ	0xFD8
  6702                           
  6703 ;; *************** function ___lwdiv *****************
  6704 ;; Defined at:
  6705 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6706 ;; Parameters:    Size  Location     Type
  6707 ;;  dividend        2    0[BANK0 ] unsigned int 
  6708 ;;  divisor         2    2[BANK0 ] unsigned int 
  6709 ;; Auto vars:     Size  Location     Type
  6710 ;;  quotient        2    5[BANK0 ] unsigned int 
  6711 ;;  counter         1    4[BANK0 ] unsigned char 
  6712 ;; Return value:  Size  Location     Type
  6713 ;;                  2    0[BANK0 ] unsigned int 
  6714 ;; Registers used:
  6715 ;;		wreg, status,2, status,0
  6716 ;; Tracked objects:
  6717 ;;		On entry : 0/0
  6718 ;;		On exit  : 0/0
  6719 ;;		Unchanged: 0/0
  6720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6721 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6722 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6724 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6725 ;;Total ram usage:        7 bytes
  6726 ;; Hardware stack levels used:    1
  6727 ;; Hardware stack levels required when called:    5
  6728 ;; This function calls:
  6729 ;;		Nothing
  6730 ;; This function is called by:
  6731 ;;		__doprnt
  6732 ;; This function uses a non-reentrant model
  6733 ;;
  6734                           
  6735                           	psect	text13
  6736  003756                     __ptext13:
  6737                           	opt stack 0
  6738  003756                     ___lwdiv:
  6739                           	opt stack 22
  6740                           
  6741                           ; BSR set to: 0
  6742                           ;incstack = 0
  6743  003756  0E00               	movlw	0
  6744  003758  0100               	movlb	0	; () banked
  6745  00375A  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6746  00375C  0E00               	movlw	0
  6747  00375E  6F85               	movwf	___lwdiv@quotient& (0+255),b
  6748                           
  6749                           ; BSR set to: 0
  6750  003760  0100               	movlb	0	; () banked
  6751  003762  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6752  003764  0100               	movlb	0	; () banked
  6753  003766  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6754  003768  B4D8               	btfsc	status,2,c
  6755  00376A  D02C               	goto	l1010
  6756                           
  6757                           ; BSR set to: 0
  6758  00376C  0E01               	movlw	1
  6759  00376E  0100               	movlb	0	; () banked
  6760  003770  6F84               	movwf	___lwdiv@counter& (0+255),b
  6761  003772  D006               	goto	l4581
  6762  003774                     l4579:
  6763                           
  6764                           ; BSR set to: 0
  6765  003774  0100               	movlb	0	; () banked
  6766  003776  90D8               	bcf	status,0,c
  6767  003778  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  6768  00377A  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6769  00377C  0100               	movlb	0	; () banked
  6770  00377E  2B84               	incf	___lwdiv@counter& (0+255),f,b
  6771  003780                     l4581:
  6772                           
  6773                           ; BSR set to: 0
  6774  003780  0100               	movlb	0	; () banked
  6775  003782  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6776  003784  D7F7               	goto	l4579
  6777  003786                     l4583:
  6778                           
  6779                           ; BSR set to: 0
  6780  003786  0100               	movlb	0	; () banked
  6781  003788  90D8               	bcf	status,0,c
  6782  00378A  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  6783  00378C  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6784                           
  6785                           ; BSR set to: 0
  6786  00378E  0100               	movlb	0	; () banked
  6787  003790  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6788  003792  0100               	movlb	0	; () banked
  6789  003794  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  6790  003796  0100               	movlb	0	; () banked
  6791  003798  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6792  00379A  0100               	movlb	0	; () banked
  6793  00379C  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6794  00379E  A0D8               	btfss	status,0,c
  6795  0037A0  D00A               	goto	l4591
  6796                           
  6797                           ; BSR set to: 0
  6798  0037A2  0100               	movlb	0	; () banked
  6799  0037A4  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6800  0037A6  0100               	movlb	0	; () banked
  6801  0037A8  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  6802  0037AA  0100               	movlb	0	; () banked
  6803  0037AC  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6804  0037AE  0100               	movlb	0	; () banked
  6805  0037B0  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6806                           
  6807                           ; BSR set to: 0
  6808  0037B2  0100               	movlb	0	; () banked
  6809  0037B4  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  6810  0037B6                     l4591:
  6811                           
  6812                           ; BSR set to: 0
  6813  0037B6  0100               	movlb	0	; () banked
  6814  0037B8  90D8               	bcf	status,0,c
  6815  0037BA  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6816  0037BC  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  6817                           
  6818                           ; BSR set to: 0
  6819  0037BE  0100               	movlb	0	; () banked
  6820  0037C0  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  6821  0037C2  D7E1               	goto	l4583
  6822  0037C4                     l1010:
  6823                           
  6824                           ; BSR set to: 0
  6825  0037C4  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  6826  0037C8  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6827                           
  6828                           ; BSR set to: 0
  6829  0037CC  0012               	return		;funcret
  6830  0037CE                     __end_of___lwdiv:
  6831                           	opt stack 0
  6832                           tosu	equ	0xFFF
  6833                           tosh	equ	0xFFE
  6834                           tosl	equ	0xFFD
  6835                           pclath	equ	0xFFA
  6836                           tblptru	equ	0xFF8
  6837                           tblptrh	equ	0xFF7
  6838                           tblptrl	equ	0xFF6
  6839                           tablat	equ	0xFF5
  6840                           prodh	equ	0xFF4
  6841                           prodl	equ	0xFF3
  6842                           intcon	equ	0xFF2
  6843                           intcon2	equ	0xFF1
  6844                           intcon3	equ	0xFF0
  6845                           indf0	equ	0xFEF
  6846                           postinc0	equ	0xFEE
  6847                           fsr0h	equ	0xFEA
  6848                           fsr0l	equ	0xFE9
  6849                           wreg	equ	0xFE8
  6850                           indf1	equ	0xFE7
  6851                           postinc1	equ	0xFE6
  6852                           postdec1	equ	0xFE5
  6853                           fsr1h	equ	0xFE2
  6854                           fsr1l	equ	0xFE1
  6855                           indf2	equ	0xFDF
  6856                           postinc2	equ	0xFDE
  6857                           postdec2	equ	0xFDD
  6858                           fsr2h	equ	0xFDA
  6859                           fsr2l	equ	0xFD9
  6860                           status	equ	0xFD8
  6861                           
  6862 ;; *************** function ___awdiv *****************
  6863 ;; Defined at:
  6864 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6865 ;; Parameters:    Size  Location     Type
  6866 ;;  dividend        2    0[BANK0 ] int 
  6867 ;;  divisor         2    2[BANK0 ] int 
  6868 ;; Auto vars:     Size  Location     Type
  6869 ;;  quotient        2    6[BANK0 ] int 
  6870 ;;  sign            1    5[BANK0 ] unsigned char 
  6871 ;;  counter         1    4[BANK0 ] unsigned char 
  6872 ;; Return value:  Size  Location     Type
  6873 ;;                  2    0[BANK0 ] int 
  6874 ;; Registers used:
  6875 ;;		wreg, status,2, status,0
  6876 ;; Tracked objects:
  6877 ;;		On entry : 0/0
  6878 ;;		On exit  : 0/0
  6879 ;;		Unchanged: 0/0
  6880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6881 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6882 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6884 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6885 ;;Total ram usage:        8 bytes
  6886 ;; Hardware stack levels used:    1
  6887 ;; Hardware stack levels required when called:    5
  6888 ;; This function calls:
  6889 ;;		Nothing
  6890 ;; This function is called by:
  6891 ;;		_update_display
  6892 ;;		_update_state
  6893 ;; This function uses a non-reentrant model
  6894 ;;
  6895                           
  6896                           	psect	text14
  6897  0033FC                     __ptext14:
  6898                           	opt stack 0
  6899  0033FC                     ___awdiv:
  6900                           	opt stack 24
  6901                           
  6902                           ; BSR set to: 0
  6903                           ;incstack = 0
  6904  0033FC  0E00               	movlw	0
  6905  0033FE  0100               	movlb	0	; () banked
  6906  003400  6F85               	movwf	___awdiv@sign& (0+255),b
  6907                           
  6908                           ; BSR set to: 0
  6909  003402  0100               	movlb	0	; () banked
  6910  003404  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6911  003406  D008               	goto	l5165
  6912                           
  6913                           ; BSR set to: 0
  6914  003408  0100               	movlb	0	; () banked
  6915  00340A  6D82               	negf	___awdiv@divisor& (0+255),b
  6916  00340C  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6917  00340E  B0D8               	btfsc	status,0,c
  6918  003410  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6919                           
  6920                           ; BSR set to: 0
  6921  003412  0E01               	movlw	1
  6922  003414  0100               	movlb	0	; () banked
  6923  003416  6F85               	movwf	___awdiv@sign& (0+255),b
  6924  003418                     l5165:
  6925                           
  6926                           ; BSR set to: 0
  6927  003418  0100               	movlb	0	; () banked
  6928  00341A  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6929  00341C  D008               	goto	l5171
  6930                           
  6931                           ; BSR set to: 0
  6932  00341E  0100               	movlb	0	; () banked
  6933  003420  6D80               	negf	___awdiv@dividend& (0+255),b
  6934  003422  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6935  003424  B0D8               	btfsc	status,0,c
  6936  003426  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6937                           
  6938                           ; BSR set to: 0
  6939  003428  0E01               	movlw	1
  6940  00342A  0100               	movlb	0	; () banked
  6941  00342C  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  6942  00342E                     l5171:
  6943                           
  6944                           ; BSR set to: 0
  6945  00342E  0E00               	movlw	0
  6946  003430  0100               	movlb	0	; () banked
  6947  003432  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  6948  003434  0E00               	movlw	0
  6949  003436  6F86               	movwf	___awdiv@quotient& (0+255),b
  6950                           
  6951                           ; BSR set to: 0
  6952  003438  0100               	movlb	0	; () banked
  6953  00343A  5182               	movf	___awdiv@divisor& (0+255),w,b
  6954  00343C  0100               	movlb	0	; () banked
  6955  00343E  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6956  003440  B4D8               	btfsc	status,2,c
  6957  003442  D02C               	goto	l5193
  6958                           
  6959                           ; BSR set to: 0
  6960  003444  0E01               	movlw	1
  6961  003446  0100               	movlb	0	; () banked
  6962  003448  6F84               	movwf	___awdiv@counter& (0+255),b
  6963  00344A  D006               	goto	l5179
  6964  00344C                     l5177:
  6965                           
  6966                           ; BSR set to: 0
  6967  00344C  0100               	movlb	0	; () banked
  6968  00344E  90D8               	bcf	status,0,c
  6969  003450  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  6970  003452  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6971  003454  0100               	movlb	0	; () banked
  6972  003456  2B84               	incf	___awdiv@counter& (0+255),f,b
  6973  003458                     l5179:
  6974                           
  6975                           ; BSR set to: 0
  6976  003458  0100               	movlb	0	; () banked
  6977  00345A  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6978  00345C  D7F7               	goto	l5177
  6979  00345E                     l5181:
  6980                           
  6981                           ; BSR set to: 0
  6982  00345E  0100               	movlb	0	; () banked
  6983  003460  90D8               	bcf	status,0,c
  6984  003462  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  6985  003464  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6986                           
  6987                           ; BSR set to: 0
  6988  003466  0100               	movlb	0	; () banked
  6989  003468  5182               	movf	___awdiv@divisor& (0+255),w,b
  6990  00346A  0100               	movlb	0	; () banked
  6991  00346C  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  6992  00346E  0100               	movlb	0	; () banked
  6993  003470  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6994  003472  0100               	movlb	0	; () banked
  6995  003474  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6996  003476  A0D8               	btfss	status,0,c
  6997  003478  D00A               	goto	l5189
  6998                           
  6999                           ; BSR set to: 0
  7000  00347A  0100               	movlb	0	; () banked
  7001  00347C  5182               	movf	___awdiv@divisor& (0+255),w,b
  7002  00347E  0100               	movlb	0	; () banked
  7003  003480  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  7004  003482  0100               	movlb	0	; () banked
  7005  003484  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7006  003486  0100               	movlb	0	; () banked
  7007  003488  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7008                           
  7009                           ; BSR set to: 0
  7010  00348A  0100               	movlb	0	; () banked
  7011  00348C  8186               	bsf	___awdiv@quotient& (0+255),0,b
  7012  00348E                     l5189:
  7013                           
  7014                           ; BSR set to: 0
  7015  00348E  0100               	movlb	0	; () banked
  7016  003490  90D8               	bcf	status,0,c
  7017  003492  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7018  003494  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  7019                           
  7020                           ; BSR set to: 0
  7021  003496  0100               	movlb	0	; () banked
  7022  003498  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  7023  00349A  D7E1               	goto	l5181
  7024  00349C                     l5193:
  7025                           
  7026                           ; BSR set to: 0
  7027  00349C  0100               	movlb	0	; () banked
  7028  00349E  5185               	movf	___awdiv@sign& (0+255),w,b
  7029  0034A0  0100               	movlb	0	; () banked
  7030  0034A2  B4D8               	btfsc	status,2,c
  7031  0034A4  D005               	goto	l5197
  7032                           
  7033                           ; BSR set to: 0
  7034  0034A6  0100               	movlb	0	; () banked
  7035  0034A8  6D86               	negf	___awdiv@quotient& (0+255),b
  7036  0034AA  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7037  0034AC  B0D8               	btfsc	status,0,c
  7038  0034AE  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7039  0034B0                     l5197:
  7040                           
  7041                           ; BSR set to: 0
  7042  0034B0  C086  F080         	movff	___awdiv@quotient,?___awdiv
  7043  0034B4  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  7044  0034B8  0012               	return	
  7045  0034BA                     __end_of___awdiv:
  7046                           	opt stack 0
  7047                           tosu	equ	0xFFF
  7048                           tosh	equ	0xFFE
  7049                           tosl	equ	0xFFD
  7050                           pclath	equ	0xFFA
  7051                           tblptru	equ	0xFF8
  7052                           tblptrh	equ	0xFF7
  7053                           tblptrl	equ	0xFF6
  7054                           tablat	equ	0xFF5
  7055                           prodh	equ	0xFF4
  7056                           prodl	equ	0xFF3
  7057                           intcon	equ	0xFF2
  7058                           intcon2	equ	0xFF1
  7059                           intcon3	equ	0xFF0
  7060                           indf0	equ	0xFEF
  7061                           postinc0	equ	0xFEE
  7062                           fsr0h	equ	0xFEA
  7063                           fsr0l	equ	0xFE9
  7064                           wreg	equ	0xFE8
  7065                           indf1	equ	0xFE7
  7066                           postinc1	equ	0xFE6
  7067                           postdec1	equ	0xFE5
  7068                           fsr1h	equ	0xFE2
  7069                           fsr1l	equ	0xFE1
  7070                           indf2	equ	0xFDF
  7071                           postinc2	equ	0xFDE
  7072                           postdec2	equ	0xFDD
  7073                           fsr2h	equ	0xFDA
  7074                           fsr2l	equ	0xFD9
  7075                           status	equ	0xFD8
  7076                           
  7077 ;; *************** function _update_RTC *****************
  7078 ;; Defined at:
  7079 ;;		line 187 in file "main.c"
  7080 ;; Parameters:    Size  Location     Type
  7081 ;;		None
  7082 ;; Auto vars:     Size  Location     Type
  7083 ;;  i               1   11[BANK0 ] unsigned char 
  7084 ;; Return value:  Size  Location     Type
  7085 ;;                  1    wreg      void 
  7086 ;; Registers used:
  7087 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7088 ;; Tracked objects:
  7089 ;;		On entry : 0/0
  7090 ;;		On exit  : 0/0
  7091 ;;		Unchanged: 0/0
  7092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7093 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7094 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7095 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7096 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7097 ;;Total ram usage:        6 bytes
  7098 ;; Hardware stack levels used:    1
  7099 ;; Hardware stack levels required when called:    7
  7100 ;; This function calls:
  7101 ;;		_I2C_Master_Read
  7102 ;;		_I2C_Master_Start
  7103 ;;		_I2C_Master_Stop
  7104 ;;		_I2C_Master_Write
  7105 ;;		___wmul
  7106 ;; This function is called by:
  7107 ;;		_main
  7108 ;; This function uses a non-reentrant model
  7109 ;;
  7110                           
  7111                           	psect	text15
  7112  0030E4                     __ptext15:
  7113                           	opt stack 0
  7114  0030E4                     _update_RTC:
  7115                           	opt stack 23
  7116                           
  7117                           ;main.c: 188: cycle_time1++;
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;incstack = 0
  7121  0030E4  0100               	movlb	0	; () banked
  7122  0030E6  4BC3               	infsnz	_cycle_time1& (0+255),f,b
  7123  0030E8  2BC4               	incf	(_cycle_time1+1)& (0+255),f,b
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;main.c: 190: I2C_Master_Start();
  7127  0030EA  ECEB  F01E         	call	_I2C_Master_Start	;wreg free
  7128                           
  7129                           ;main.c: 191: I2C_Master_Write(0b11010000);
  7130  0030EE  0E00               	movlw	0
  7131  0030F0  0100               	movlb	0	; () banked
  7132  0030F2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7133  0030F4  0ED0               	movlw	208
  7134  0030F6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7135  0030F8  ECE2  F01E         	call	_I2C_Master_Write	;wreg free
  7136                           
  7137                           ;main.c: 192: I2C_Master_Write(0x00);
  7138  0030FC  0E00               	movlw	0
  7139  0030FE  0100               	movlb	0	; () banked
  7140  003100  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7141  003102  0E00               	movlw	0
  7142  003104  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7143  003106  ECE2  F01E         	call	_I2C_Master_Write	;wreg free
  7144                           
  7145                           ;main.c: 193: I2C_Master_Stop();
  7146  00310A  ECE7  F01E         	call	_I2C_Master_Stop	;wreg free
  7147                           
  7148                           ;main.c: 196: I2C_Master_Start();
  7149  00310E  ECEB  F01E         	call	_I2C_Master_Start	;wreg free
  7150                           
  7151                           ;main.c: 197: I2C_Master_Write(0b11010001);
  7152  003112  0E00               	movlw	0
  7153  003114  0100               	movlb	0	; () banked
  7154  003116  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7155  003118  0ED1               	movlw	209
  7156  00311A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7157  00311C  ECE2  F01E         	call	_I2C_Master_Write	;wreg free
  7158                           
  7159                           ;main.c: 198: for(unsigned char i=0;i<0x06;i++){
  7160  003120  0E00               	movlw	0
  7161  003122  0100               	movlb	0	; () banked
  7162  003124  6F8B               	movwf	update_RTC@i& (0+255),b
  7163  003126                     l5491:
  7164                           
  7165                           ; BSR set to: 0
  7166  003126  0E05               	movlw	5
  7167  003128  0100               	movlb	0	; () banked
  7168  00312A  658B               	cpfsgt	update_RTC@i& (0+255),b
  7169  00312C  D001               	goto	l5495
  7170  00312E  D08C               	goto	l5509
  7171  003130                     l5495:
  7172                           
  7173                           ; BSR set to: 0
  7174                           ;main.c: 199: time[i] = I2C_Master_Read(1);
  7175  003130  0100               	movlb	0	; () banked
  7176  003132  518B               	movf	update_RTC@i& (0+255),w,b
  7177  003134  0D01               	mullw	1
  7178  003136  0EBA               	movlw	low _time
  7179  003138  24F3               	addwf	prodl,w,c
  7180  00313A  6ED9               	movwf	fsr2l,c
  7181  00313C  0E00               	movlw	high _time
  7182  00313E  20F4               	addwfc	prodh,w,c
  7183  003140  6EDA               	movwf	fsr2h,c
  7184  003142  0E01               	movlw	1
  7185  003144  EC47  F01E         	call	_I2C_Master_Read
  7186  003148  6EDF               	movwf	indf2,c
  7187                           
  7188                           ;main.c: 200: if (time_i[i]!=(time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10){
  7189  00314A  0100               	movlb	0	; () banked
  7190  00314C  518B               	movf	update_RTC@i& (0+255),w,b
  7191  00314E  0D02               	mullw	2
  7192  003150  0E3E               	movlw	low _time_i
  7193  003152  24F3               	addwf	prodl,w,c
  7194  003154  6ED9               	movwf	fsr2l,c
  7195  003156  0E00               	movlw	high _time_i
  7196  003158  20F4               	addwfc	prodh,w,c
  7197  00315A  6EDA               	movwf	fsr2h,c
  7198  00315C  0100               	movlb	0	; () banked
  7199  00315E  518B               	movf	update_RTC@i& (0+255),w,b
  7200  003160  0D01               	mullw	1
  7201  003162  0EBA               	movlw	low _time
  7202  003164  24F3               	addwf	prodl,w,c
  7203  003166  6EE1               	movwf	fsr1l,c
  7204  003168  0E00               	movlw	high _time
  7205  00316A  20F4               	addwfc	prodh,w,c
  7206  00316C  6EE2               	movwf	fsr1h,c
  7207  00316E  50E7               	movf	indf1,w,c
  7208  003170  0B0F               	andlw	15
  7209  003172  0100               	movlb	0	; () banked
  7210  003174  6F88               	movwf	(??_update_RTC+2)& (0+255),b
  7211  003176  6B89               	clrf	(??_update_RTC+3)& (0+255),b
  7212  003178  0100               	movlb	0	; () banked
  7213  00317A  518B               	movf	update_RTC@i& (0+255),w,b
  7214  00317C  0D01               	mullw	1
  7215  00317E  0EBA               	movlw	low _time
  7216  003180  24F3               	addwf	prodl,w,c
  7217  003182  6EE1               	movwf	fsr1l,c
  7218  003184  0E00               	movlw	high _time
  7219  003186  20F4               	addwfc	prodh,w,c
  7220  003188  6EE2               	movwf	fsr1h,c
  7221  00318A  50E7               	movf	indf1,w,c
  7222  00318C  0100               	movlb	0	; () banked
  7223  00318E  6F8A               	movwf	(??_update_RTC+4)& (0+255),b
  7224  003190  0100               	movlb	0	; () banked
  7225  003192  3B8A               	swapf	(??_update_RTC+4)& (0+255),f,b
  7226  003194  0E0F               	movlw	15
  7227  003196  178A               	andwf	(??_update_RTC+4)& (0+255),f,b
  7228  003198  0E0F               	movlw	15
  7229  00319A  0100               	movlb	0	; () banked
  7230  00319C  178A               	andwf	(??_update_RTC+4)& (0+255),f,b
  7231  00319E  0100               	movlb	0	; () banked
  7232  0031A0  518A               	movf	(??_update_RTC+4)& (0+255),w,b
  7233  0031A2  0D0A               	mullw	10
  7234  0031A4  50F3               	movf	prodl,w,c
  7235  0031A6  0100               	movlb	0	; () banked
  7236  0031A8  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  7237  0031AA  50F4               	movf	prodh,w,c
  7238  0031AC  0100               	movlb	0	; () banked
  7239  0031AE  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  7240  0031B0  50DE               	movf	postinc2,w,c
  7241  0031B2  0100               	movlb	0	; () banked
  7242  0031B4  1988               	xorwf	(??_update_RTC+2)& (0+255),w,b
  7243  0031B6  E105               	bnz	u7970
  7244  0031B8  50DE               	movf	postinc2,w,c
  7245  0031BA  0100               	movlb	0	; () banked
  7246  0031BC  1989               	xorwf	(??_update_RTC+3)& (0+255),w,b
  7247  0031BE  B4D8               	btfsc	status,2,c
  7248  0031C0  D040               	goto	l5505
  7249  0031C2                     u7970:
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;main.c: 201: cycle_time2=cycle_time1;
  7253  0031C2  C0C3  F0C5         	movff	_cycle_time1,_cycle_time2
  7254  0031C6  C0C4  F0C6         	movff	_cycle_time1+1,_cycle_time2+1
  7255                           
  7256                           ; BSR set to: 0
  7257                           ;main.c: 202: cycle_time1=0;
  7258  0031CA  0E00               	movlw	0
  7259  0031CC  0100               	movlb	0	; () banked
  7260  0031CE  6FC4               	movwf	(_cycle_time1+1)& (0+255),b
  7261  0031D0  0E00               	movlw	0
  7262  0031D2  6FC3               	movwf	_cycle_time1& (0+255),b
  7263                           
  7264                           ; BSR set to: 0
  7265                           ;main.c: 203: time_i[i]=(time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7266  0031D4  0100               	movlb	0	; () banked
  7267  0031D6  518B               	movf	update_RTC@i& (0+255),w,b
  7268  0031D8  0D01               	mullw	1
  7269  0031DA  0EBA               	movlw	low _time
  7270  0031DC  24F3               	addwf	prodl,w,c
  7271  0031DE  6ED9               	movwf	fsr2l,c
  7272  0031E0  0E00               	movlw	high _time
  7273  0031E2  20F4               	addwfc	prodh,w,c
  7274  0031E4  6EDA               	movwf	fsr2h,c
  7275  0031E6  50DF               	movf	indf2,w,c
  7276  0031E8  0B0F               	andlw	15
  7277  0031EA  0100               	movlb	0	; () banked
  7278  0031EC  6F86               	movwf	??_update_RTC& (0+255),b
  7279  0031EE  6B87               	clrf	(??_update_RTC+1)& (0+255),b
  7280  0031F0  0100               	movlb	0	; () banked
  7281  0031F2  518B               	movf	update_RTC@i& (0+255),w,b
  7282  0031F4  0D01               	mullw	1
  7283  0031F6  0EBA               	movlw	low _time
  7284  0031F8  24F3               	addwf	prodl,w,c
  7285  0031FA  6ED9               	movwf	fsr2l,c
  7286  0031FC  0E00               	movlw	high _time
  7287  0031FE  20F4               	addwfc	prodh,w,c
  7288  003200  6EDA               	movwf	fsr2h,c
  7289  003202  50DF               	movf	indf2,w,c
  7290  003204  0100               	movlb	0	; () banked
  7291  003206  6F88               	movwf	(??_update_RTC+2)& (0+255),b
  7292  003208  0100               	movlb	0	; () banked
  7293  00320A  3B88               	swapf	(??_update_RTC+2)& (0+255),f,b
  7294  00320C  0E0F               	movlw	15
  7295  00320E  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  7296  003210  0E0F               	movlw	15
  7297  003212  0100               	movlb	0	; () banked
  7298  003214  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  7299  003216  0100               	movlb	0	; () banked
  7300  003218  5188               	movf	(??_update_RTC+2)& (0+255),w,b
  7301  00321A  0D0A               	mullw	10
  7302  00321C  50F3               	movf	prodl,w,c
  7303  00321E  0100               	movlb	0	; () banked
  7304  003220  2786               	addwf	??_update_RTC& (0+255),f,b
  7305  003222  50F4               	movf	prodh,w,c
  7306  003224  0100               	movlb	0	; () banked
  7307  003226  2387               	addwfc	(??_update_RTC+1)& (0+255),f,b
  7308  003228  0100               	movlb	0	; () banked
  7309  00322A  518B               	movf	update_RTC@i& (0+255),w,b
  7310  00322C  0D02               	mullw	2
  7311  00322E  0E3E               	movlw	low _time_i
  7312  003230  24F3               	addwf	prodl,w,c
  7313  003232  6ED9               	movwf	fsr2l,c
  7314  003234  0E00               	movlw	high _time_i
  7315  003236  20F4               	addwfc	prodh,w,c
  7316  003238  6EDA               	movwf	fsr2h,c
  7317  00323A  C086  FFDE         	movff	??_update_RTC,postinc2
  7318  00323E  C087  FFDD         	movff	??_update_RTC+1,postdec2
  7319  003242                     l5505:
  7320                           
  7321                           ; BSR set to: 0
  7322  003242  0100               	movlb	0	; () banked
  7323  003244  2B8B               	incf	update_RTC@i& (0+255),f,b
  7324  003246  D76F               	goto	l5491
  7325  003248                     l5509:
  7326                           
  7327                           ; BSR set to: 0
  7328                           ;main.c: 204: }
  7329                           ;main.c: 205: }
  7330                           ;main.c: 206: timeDiff=time_i[1]*60-startTime[1]*60+time_i[0]-startTime[0];
  7331  003248  C10E  F086         	movff	_startTime,??_update_RTC
  7332  00324C  C10F  F087         	movff	_startTime+1,??_update_RTC+1
  7333  003250  0100               	movlb	0	; () banked
  7334  003252  1F86               	comf	??_update_RTC& (0+255),f,b
  7335  003254  1F87               	comf	(??_update_RTC+1)& (0+255),f,b
  7336  003256  4B86               	infsnz	??_update_RTC& (0+255),f,b
  7337  003258  2B87               	incf	(??_update_RTC+1)& (0+255),f,b
  7338  00325A  C040  F080         	movff	_time_i+2,___wmul@multiplier
  7339  00325E  C041  F081         	movff	_time_i+3,___wmul@multiplier+1
  7340  003262  0E00               	movlw	0
  7341  003264  0100               	movlb	0	; () banked
  7342  003266  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7343  003268  0E3C               	movlw	60
  7344  00326A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7345  00326C  ECF8  F01D         	call	___wmul	;wreg free
  7346  003270  C080  F088         	movff	?___wmul,??_update_RTC+2
  7347  003274  C081  F089         	movff	?___wmul+1,??_update_RTC+3
  7348  003278  C110  F080         	movff	_startTime+2,___wmul@multiplier
  7349  00327C  C111  F081         	movff	_startTime+3,___wmul@multiplier+1
  7350  003280  0E00               	movlw	0
  7351  003282  0100               	movlb	0	; () banked
  7352  003284  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7353  003286  0E3C               	movlw	60
  7354  003288  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7355  00328A  ECF8  F01D         	call	___wmul	;wreg free
  7356  00328E  0100               	movlb	0	; () banked
  7357  003290  1F80               	comf	?___wmul& (0+255),f,b
  7358  003292  0100               	movlb	0	; () banked
  7359  003294  1F81               	comf	(?___wmul+1)& (0+255),f,b
  7360  003296  0100               	movlb	0	; () banked
  7361  003298  4B80               	infsnz	?___wmul& (0+255),f,b
  7362  00329A  2B81               	incf	(?___wmul+1)& (0+255),f,b
  7363  00329C  0100               	movlb	0	; () banked
  7364  00329E  5180               	movf	?___wmul& (0+255),w,b
  7365  0032A0  0100               	movlb	0	; () banked
  7366  0032A2  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  7367  0032A4  0100               	movlb	0	; () banked
  7368  0032A6  5181               	movf	(?___wmul+1)& (0+255),w,b
  7369  0032A8  0100               	movlb	0	; () banked
  7370  0032AA  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  7371  0032AC  0100               	movlb	0	; () banked
  7372  0032AE  5186               	movf	??_update_RTC& (0+255),w,b
  7373  0032B0  0100               	movlb	0	; () banked
  7374  0032B2  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  7375  0032B4  0100               	movlb	0	; () banked
  7376  0032B6  5187               	movf	(??_update_RTC+1)& (0+255),w,b
  7377  0032B8  0100               	movlb	0	; () banked
  7378  0032BA  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  7379  0032BC  503E               	movf	_time_i,w,c
  7380  0032BE  0100               	movlb	0	; () banked
  7381  0032C0  2588               	addwf	(??_update_RTC+2)& (0+255),w,b
  7382  0032C2  0100               	movlb	0	; () banked
  7383  0032C4  6FD5               	movwf	_timeDiff& (0+255),b
  7384  0032C6  503F               	movf	_time_i+1,w,c
  7385  0032C8  0100               	movlb	0	; () banked
  7386  0032CA  2189               	addwfc	(??_update_RTC+3)& (0+255),w,b
  7387  0032CC  0100               	movlb	0	; () banked
  7388  0032CE  6FD6               	movwf	(_timeDiff+1)& (0+255),b
  7389                           
  7390                           ; BSR set to: 0
  7391                           ;main.c: 207: time[6] = I2C_Master_Read(0);
  7392  0032D0  0E00               	movlw	0
  7393  0032D2  EC47  F01E         	call	_I2C_Master_Read
  7394  0032D6  0100               	movlb	0	; () banked
  7395  0032D8  6FC0               	movwf	(_time+6)& (0+255),b
  7396                           
  7397                           ; BSR set to: 0
  7398                           ;main.c: 208: I2C_Master_Stop();
  7399  0032DA  ECE7  F01E         	call	_I2C_Master_Stop	;wreg free
  7400  0032DE  0012               	return		;funcret
  7401  0032E0                     __end_of_update_RTC:
  7402                           	opt stack 0
  7403                           tosu	equ	0xFFF
  7404                           tosh	equ	0xFFE
  7405                           tosl	equ	0xFFD
  7406                           pclath	equ	0xFFA
  7407                           tblptru	equ	0xFF8
  7408                           tblptrh	equ	0xFF7
  7409                           tblptrl	equ	0xFF6
  7410                           tablat	equ	0xFF5
  7411                           prodh	equ	0xFF4
  7412                           prodl	equ	0xFF3
  7413                           intcon	equ	0xFF2
  7414                           intcon2	equ	0xFF1
  7415                           intcon3	equ	0xFF0
  7416                           indf0	equ	0xFEF
  7417                           postinc0	equ	0xFEE
  7418                           fsr0h	equ	0xFEA
  7419                           fsr0l	equ	0xFE9
  7420                           wreg	equ	0xFE8
  7421                           indf1	equ	0xFE7
  7422                           postinc1	equ	0xFE6
  7423                           postdec1	equ	0xFE5
  7424                           fsr1h	equ	0xFE2
  7425                           fsr1l	equ	0xFE1
  7426                           indf2	equ	0xFDF
  7427                           postinc2	equ	0xFDE
  7428                           postdec2	equ	0xFDD
  7429                           fsr2h	equ	0xFDA
  7430                           fsr2l	equ	0xFD9
  7431                           status	equ	0xFD8
  7432                           
  7433 ;; *************** function _I2C_Master_Read *****************
  7434 ;; Defined at:
  7435 ;;		line 53 in file "I2C.c"
  7436 ;; Parameters:    Size  Location     Type
  7437 ;;  a               1    wreg     unsigned char 
  7438 ;; Auto vars:     Size  Location     Type
  7439 ;;  a               1    1[BANK0 ] unsigned char 
  7440 ;;  temp            1    2[BANK0 ] unsigned char 
  7441 ;; Return value:  Size  Location     Type
  7442 ;;                  1    wreg      unsigned char 
  7443 ;; Registers used:
  7444 ;;		wreg, status,2, status,0, cstack
  7445 ;; Tracked objects:
  7446 ;;		On entry : 0/0
  7447 ;;		On exit  : 0/0
  7448 ;;		Unchanged: 0/0
  7449 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7450 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7452 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7453 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7454 ;;Total ram usage:        2 bytes
  7455 ;; Hardware stack levels used:    1
  7456 ;; Hardware stack levels required when called:    6
  7457 ;; This function calls:
  7458 ;;		_I2C_Master_Wait
  7459 ;; This function is called by:
  7460 ;;		_update_RTC
  7461 ;; This function uses a non-reentrant model
  7462 ;;
  7463                           
  7464                           	psect	text16
  7465  003C8E                     __ptext16:
  7466                           	opt stack 0
  7467  003C8E                     _I2C_Master_Read:
  7468                           	opt stack 23
  7469                           
  7470                           ;incstack = 0
  7471                           ;I2C_Master_Read@a stored from wreg
  7472  003C8E  0100               	movlb	0	; () banked
  7473  003C90  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7474                           
  7475                           ;I2C.c: 55: unsigned char temp;
  7476                           ;I2C.c: 56: I2C_Master_Wait();
  7477  003C92  ECC4  F01E         	call	_I2C_Master_Wait	;wreg free
  7478                           
  7479                           ;I2C.c: 57: RCEN = 1;
  7480  003C96  86C5               	bsf	4037,3,c	;volatile
  7481                           
  7482                           ;I2C.c: 58: I2C_Master_Wait();
  7483  003C98  ECC4  F01E         	call	_I2C_Master_Wait	;wreg free
  7484                           
  7485                           ;I2C.c: 59: temp = SSPBUF;
  7486  003C9C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7487                           
  7488                           ;I2C.c: 60: I2C_Master_Wait();
  7489  003CA0  ECC4  F01E         	call	_I2C_Master_Wait	;wreg free
  7490                           
  7491                           ;I2C.c: 61: ACKDT = (a)?0:1;
  7492  003CA4  0100               	movlb	0	; () banked
  7493  003CA6  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7494  003CA8  0100               	movlb	0	; () banked
  7495  003CAA  A4D8               	btfss	status,2,c
  7496  003CAC  D002               	goto	u6810
  7497  003CAE  8AC5               	bsf	4037,5,c	;volatile
  7498  003CB0  D001               	goto	l4893
  7499  003CB2                     u6810:
  7500  003CB2  9AC5               	bcf	4037,5,c	;volatile
  7501  003CB4                     l4893:
  7502                           
  7503                           ;I2C.c: 62: ACKEN = 1;
  7504  003CB4  88C5               	bsf	4037,4,c	;volatile
  7505                           
  7506                           ;I2C.c: 63: return temp;
  7507  003CB6  0100               	movlb	0	; () banked
  7508  003CB8  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7509  003CBA  0012               	return	
  7510  003CBC                     __end_of_I2C_Master_Read:
  7511                           	opt stack 0
  7512                           tosu	equ	0xFFF
  7513                           tosh	equ	0xFFE
  7514                           tosl	equ	0xFFD
  7515                           pclath	equ	0xFFA
  7516                           tblptru	equ	0xFF8
  7517                           tblptrh	equ	0xFF7
  7518                           tblptrl	equ	0xFF6
  7519                           tablat	equ	0xFF5
  7520                           prodh	equ	0xFF4
  7521                           prodl	equ	0xFF3
  7522                           intcon	equ	0xFF2
  7523                           intcon2	equ	0xFF1
  7524                           intcon3	equ	0xFF0
  7525                           indf0	equ	0xFEF
  7526                           postinc0	equ	0xFEE
  7527                           fsr0h	equ	0xFEA
  7528                           fsr0l	equ	0xFE9
  7529                           wreg	equ	0xFE8
  7530                           indf1	equ	0xFE7
  7531                           postinc1	equ	0xFE6
  7532                           postdec1	equ	0xFE5
  7533                           fsr1h	equ	0xFE2
  7534                           fsr1l	equ	0xFE1
  7535                           indf2	equ	0xFDF
  7536                           postinc2	equ	0xFDE
  7537                           postdec2	equ	0xFDD
  7538                           fsr2h	equ	0xFDA
  7539                           fsr2l	equ	0xFD9
  7540                           status	equ	0xFD8
  7541                           
  7542 ;; *************** function _sort *****************
  7543 ;; Defined at:
  7544 ;;		line 531 in file "main.c"
  7545 ;; Parameters:    Size  Location     Type
  7546 ;;		None
  7547 ;; Auto vars:     Size  Location     Type
  7548 ;;  i               2   24[BANK0 ] int 
  7549 ;; Return value:  Size  Location     Type
  7550 ;;                  1    wreg      void 
  7551 ;; Registers used:
  7552 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7553 ;; Tracked objects:
  7554 ;;		On entry : 0/0
  7555 ;;		On exit  : 0/0
  7556 ;;		Unchanged: 0/0
  7557 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7558 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7559 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7560 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7561 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7562 ;;Total ram usage:        6 bytes
  7563 ;; Hardware stack levels used:    1
  7564 ;; Hardware stack levels required when called:    7
  7565 ;; This function calls:
  7566 ;;		___awmod
  7567 ;;		___wmul
  7568 ;;		__measure
  7569 ;; This function is called by:
  7570 ;;		_main
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574                           	psect	text17
  7575  002118                     __ptext17:
  7576                           	opt stack 0
  7577  002118                     _sort:
  7578                           	opt stack 23
  7579                           
  7580                           ;main.c: 533: if (discretize_counter>2000/40)
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;incstack = 0
  7584  002118  0100               	movlb	0	; () banked
  7585  00211A  BFC8               	btfsc	(_discretize_counter+1)& (0+255),7,b
  7586  00211C  D00A               	goto	l5547
  7587  00211E  0100               	movlb	0	; () banked
  7588  002120  51C8               	movf	(_discretize_counter+1)& (0+255),w,b
  7589  002122  E105               	bnz	u8040
  7590  002124  0E33               	movlw	51
  7591  002126  0100               	movlb	0	; () banked
  7592  002128  5DC7               	subwf	_discretize_counter& (0+255),w,b
  7593  00212A  A0D8               	btfss	status,0,c
  7594  00212C  D002               	goto	l5547
  7595  00212E                     u8040:
  7596                           
  7597                           ; BSR set to: 0
  7598                           ;main.c: 534: LATA|=1<<3;
  7599  00212E  8689               	bsf	3977,3,c	;volatile
  7600  002130  D01E               	goto	l5559
  7601  002132                     l5547:
  7602                           
  7603                           ; BSR set to: 0
  7604                           ;main.c: 535: else if (discretize_counter>1000/40)
  7605  002132  0100               	movlb	0	; () banked
  7606  002134  BFC8               	btfsc	(_discretize_counter+1)& (0+255),7,b
  7607  002136  D00A               	goto	l5551
  7608  002138  0100               	movlb	0	; () banked
  7609  00213A  51C8               	movf	(_discretize_counter+1)& (0+255),w,b
  7610  00213C  E105               	bnz	u8050
  7611  00213E  0E1A               	movlw	26
  7612  002140  0100               	movlb	0	; () banked
  7613  002142  5DC7               	subwf	_discretize_counter& (0+255),w,b
  7614  002144  A0D8               	btfss	status,0,c
  7615  002146  D002               	goto	l5551
  7616  002148                     u8050:
  7617                           
  7618                           ; BSR set to: 0
  7619                           ;main.c: 536: LATA&=~(1<<3);
  7620  002148  9689               	bcf	3977,3,c	;volatile
  7621  00214A  D011               	goto	l5559
  7622  00214C                     l5551:
  7623                           
  7624                           ; BSR set to: 0
  7625                           ;main.c: 537: else if (discretize_counter>0){
  7626  00214C  0100               	movlb	0	; () banked
  7627  00214E  BFC8               	btfsc	(_discretize_counter+1)& (0+255),7,b
  7628  002150  D00E               	goto	l5559
  7629  002152  0100               	movlb	0	; () banked
  7630  002154  51C8               	movf	(_discretize_counter+1)& (0+255),w,b
  7631  002156  E104               	bnz	u8060
  7632  002158  0100               	movlb	0	; () banked
  7633  00215A  05C7               	decf	_discretize_counter& (0+255),w,b
  7634  00215C  A0D8               	btfss	status,0,c
  7635  00215E  D007               	goto	l5559
  7636  002160                     u8060:
  7637                           
  7638                           ; BSR set to: 0
  7639                           ;main.c: 538: LATA|=1<<4;
  7640  002160  8889               	bsf	3977,4,c	;volatile
  7641                           
  7642                           ; BSR set to: 0
  7643                           ;main.c: 539: if (discretize_counter==1)
  7644  002162  0100               	movlb	0	; () banked
  7645  002164  05C7               	decf	_discretize_counter& (0+255),w,b
  7646  002166  0100               	movlb	0	; () banked
  7647  002168  11C8               	iorwf	(_discretize_counter+1)& (0+255),w,b
  7648  00216A  B4D8               	btfsc	status,2,c
  7649                           
  7650                           ; BSR set to: 0
  7651                           ;main.c: 540: LATA&=~(1<<4);
  7652  00216C  9889               	bcf	3977,4,c	;volatile
  7653  00216E                     l5559:
  7654                           
  7655                           ; BSR set to: 0
  7656                           ;main.c: 541: }
  7657                           ;main.c: 546: if ((PROX1[0]+PROX2[0])&&measure_counter==0&&release_counter<=1000/40){
  7658  00216E  5060               	movf	_PROX2,w,c
  7659  002170  2456               	addwf	_PROX1,w,c
  7660  002172  0100               	movlb	0	; () banked
  7661  002174  6F94               	movwf	??_sort& (0+255),b
  7662  002176  5061               	movf	_PROX2+1,w,c
  7663  002178  2057               	addwfc	_PROX1+1,w,c
  7664  00217A  0100               	movlb	0	; () banked
  7665  00217C  6F95               	movwf	(??_sort+1)& (0+255),b
  7666  00217E  0100               	movlb	0	; () banked
  7667  002180  5194               	movf	??_sort& (0+255),w,b
  7668  002182  0100               	movlb	0	; () banked
  7669  002184  1195               	iorwf	(??_sort+1)& (0+255),w,b
  7670  002186  B4D8               	btfsc	status,2,c
  7671  002188  D043               	goto	l5579
  7672                           
  7673                           ; BSR set to: 0
  7674  00218A  0100               	movlb	0	; () banked
  7675  00218C  51CD               	movf	_measure_counter& (0+255),w,b
  7676  00218E  0100               	movlb	0	; () banked
  7677  002190  11CE               	iorwf	(_measure_counter+1)& (0+255),w,b
  7678  002192  A4D8               	btfss	status,2,c
  7679  002194  D03D               	goto	l5579
  7680                           
  7681                           ; BSR set to: 0
  7682  002196  0100               	movlb	0	; () banked
  7683  002198  BFD0               	btfsc	(_release_counter+1)& (0+255),7,b
  7684  00219A  D008               	goto	l5565
  7685  00219C  0100               	movlb	0	; () banked
  7686  00219E  51D0               	movf	(_release_counter+1)& (0+255),w,b
  7687  0021A0  E137               	bnz	l5579
  7688  0021A2  0E1A               	movlw	26
  7689  0021A4  0100               	movlb	0	; () banked
  7690  0021A6  5DCF               	subwf	_release_counter& (0+255),w,b
  7691  0021A8  B0D8               	btfsc	status,0,c
  7692  0021AA  D032               	goto	l5579
  7693  0021AC                     l5565:
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;main.c: 547: measure_counter=measure;
  7697  0021AC  C072  F0CD         	movff	_measure,_measure_counter
  7698  0021B0  C073  F0CE         	movff	_measure+1,_measure_counter+1
  7699                           
  7700                           ; BSR set to: 0
  7701                           ;main.c: 548: int i;
  7702                           ;main.c: 549: for (i=0;i<7;i++)
  7703  0021B4  0E00               	movlw	0
  7704  0021B6  0100               	movlb	0	; () banked
  7705  0021B8  6F99               	movwf	(sort@i+1)& (0+255),b
  7706  0021BA  0E00               	movlw	0
  7707  0021BC  6F98               	movwf	sort@i& (0+255),b
  7708  0021BE                     l5569:
  7709                           
  7710                           ; BSR set to: 0
  7711  0021BE  0100               	movlb	0	; () banked
  7712  0021C0  BF99               	btfsc	(sort@i+1)& (0+255),7,b
  7713  0021C2  D008               	goto	l5573
  7714  0021C4  0100               	movlb	0	; () banked
  7715  0021C6  5199               	movf	(sort@i+1)& (0+255),w,b
  7716  0021C8  E123               	bnz	l5579
  7717  0021CA  0E07               	movlw	7
  7718  0021CC  0100               	movlb	0	; () banked
  7719  0021CE  5D98               	subwf	sort@i& (0+255),w,b
  7720  0021D0  B0D8               	btfsc	status,0,c
  7721  0021D2  D01E               	goto	l5579
  7722  0021D4                     l5573:
  7723                           
  7724                           ; BSR set to: 0
  7725                           ;main.c: 550: latestSortedBottleTime[i]=time_i[i];
  7726  0021D4  90D8               	bcf	status,0,c
  7727  0021D6  0100               	movlb	0	; () banked
  7728  0021D8  3598               	rlcf	sort@i& (0+255),w,b
  7729  0021DA  6ED9               	movwf	fsr2l,c
  7730  0021DC  0100               	movlb	0	; () banked
  7731  0021DE  3599               	rlcf	(sort@i+1)& (0+255),w,b
  7732  0021E0  6EDA               	movwf	fsr2h,c
  7733  0021E2  0E3E               	movlw	low _time_i
  7734  0021E4  26D9               	addwf	fsr2l,f,c
  7735  0021E6  0E00               	movlw	high _time_i
  7736  0021E8  22DA               	addwfc	fsr2h,f,c
  7737  0021EA  90D8               	bcf	status,0,c
  7738  0021EC  0100               	movlb	0	; () banked
  7739  0021EE  3598               	rlcf	sort@i& (0+255),w,b
  7740  0021F0  6EE1               	movwf	fsr1l,c
  7741  0021F2  0100               	movlb	0	; () banked
  7742  0021F4  3599               	rlcf	(sort@i+1)& (0+255),w,b
  7743  0021F6  6EE2               	movwf	fsr1h,c
  7744  0021F8  0E00               	movlw	low _latestSortedBottleTime
  7745  0021FA  26E1               	addwf	fsr1l,f,c
  7746  0021FC  0E01               	movlw	high _latestSortedBottleTime
  7747  0021FE  22E2               	addwfc	fsr1h,f,c
  7748  002200  CFDE FFE6          	movff	postinc2,postinc1
  7749  002204  CFDD FFE5          	movff	postdec2,postdec1
  7750                           
  7751                           ; BSR set to: 0
  7752  002208  0100               	movlb	0	; () banked
  7753  00220A  4B98               	infsnz	sort@i& (0+255),f,b
  7754  00220C  2B99               	incf	(sort@i+1)& (0+255),f,b
  7755  00220E  D7D7               	goto	l5569
  7756  002210                     l5579:
  7757                           
  7758                           ; BSR set to: 0
  7759                           ;main.c: 551: }
  7760                           ;main.c: 552: if (measure_counter==1){
  7761  002210  0100               	movlb	0	; () banked
  7762  002212  05CD               	decf	_measure_counter& (0+255),w,b
  7763  002214  0100               	movlb	0	; () banked
  7764  002216  11CE               	iorwf	(_measure_counter+1)& (0+255),w,b
  7765  002218  A4D8               	btfss	status,2,c
  7766  00221A  D041               	goto	l5607
  7767                           
  7768                           ; BSR set to: 0
  7769                           ;main.c: 553: bottle_type=_measure();
  7770  00221C  EC6A  F00E         	call	__measure	;wreg free
  7771  002220  C086  F0C1         	movff	?__measure,_bottle_type
  7772  002224  C087  F0C2         	movff	?__measure+1,_bottle_type+1
  7773                           
  7774                           ;main.c: 555: if (bottle_type!=0&&release_counter==0){
  7775  002228  0100               	movlb	0	; () banked
  7776  00222A  51C1               	movf	_bottle_type& (0+255),w,b
  7777  00222C  0100               	movlb	0	; () banked
  7778  00222E  11C2               	iorwf	(_bottle_type+1)& (0+255),w,b
  7779  002230  B4D8               	btfsc	status,2,c
  7780  002232  D032               	goto	l5605
  7781                           
  7782                           ; BSR set to: 0
  7783  002234  0100               	movlb	0	; () banked
  7784  002236  51CF               	movf	_release_counter& (0+255),w,b
  7785  002238  0100               	movlb	0	; () banked
  7786  00223A  11D0               	iorwf	(_release_counter+1)& (0+255),w,b
  7787  00223C  A4D8               	btfss	status,2,c
  7788  00223E  D02C               	goto	l5605
  7789                           
  7790                           ; BSR set to: 0
  7791                           ;main.c: 556: release_counter=release;
  7792  002240  C074  F0CF         	movff	_release,_release_counter
  7793  002244  C075  F0D0         	movff	_release+1,_release_counter+1
  7794                           
  7795                           ; BSR set to: 0
  7796                           ;main.c: 557: if (bottle_type==1)
  7797  002248  0100               	movlb	0	; () banked
  7798  00224A  05C1               	decf	_bottle_type& (0+255),w,b
  7799  00224C  0100               	movlb	0	; () banked
  7800  00224E  11C2               	iorwf	(_bottle_type+1)& (0+255),w,b
  7801  002250  A4D8               	btfss	status,2,c
  7802  002252  D003               	goto	l5593
  7803                           
  7804                           ; BSR set to: 0
  7805                           ;main.c: 558: eskaNoCap++;
  7806  002254  0100               	movlb	0	; () banked
  7807  002256  4BC9               	infsnz	_eskaNoCap& (0+255),f,b
  7808  002258  2BCA               	incf	(_eskaNoCap+1)& (0+255),f,b
  7809  00225A                     l5593:
  7810                           
  7811                           ; BSR set to: 0
  7812                           ;main.c: 559: if (bottle_type==2)
  7813  00225A  0E02               	movlw	2
  7814  00225C  0100               	movlb	0	; () banked
  7815  00225E  19C1               	xorwf	_bottle_type& (0+255),w,b
  7816  002260  0100               	movlb	0	; () banked
  7817  002262  11C2               	iorwf	(_bottle_type+1)& (0+255),w,b
  7818  002264  A4D8               	btfss	status,2,c
  7819  002266  D003               	goto	l5597
  7820                           
  7821                           ; BSR set to: 0
  7822                           ;main.c: 560: eskaWCap++;
  7823  002268  0100               	movlb	0	; () banked
  7824  00226A  4BCB               	infsnz	_eskaWCap& (0+255),f,b
  7825  00226C  2BCC               	incf	(_eskaWCap+1)& (0+255),f,b
  7826  00226E                     l5597:
  7827                           
  7828                           ; BSR set to: 0
  7829                           ;main.c: 561: if (bottle_type==3)
  7830  00226E  0E03               	movlw	3
  7831  002270  0100               	movlb	0	; () banked
  7832  002272  19C1               	xorwf	_bottle_type& (0+255),w,b
  7833  002274  0100               	movlb	0	; () banked
  7834  002276  11C2               	iorwf	(_bottle_type+1)& (0+255),w,b
  7835  002278  A4D8               	btfss	status,2,c
  7836  00227A  D003               	goto	l5601
  7837                           
  7838                           ; BSR set to: 0
  7839                           ;main.c: 562: yopNoCap++;
  7840  00227C  0100               	movlb	0	; () banked
  7841  00227E  4BD7               	infsnz	_yopNoCap& (0+255),f,b
  7842  002280  2BD8               	incf	(_yopNoCap+1)& (0+255),f,b
  7843  002282                     l5601:
  7844                           
  7845                           ; BSR set to: 0
  7846                           ;main.c: 563: if (bottle_type==4)
  7847  002282  0E04               	movlw	4
  7848  002284  0100               	movlb	0	; () banked
  7849  002286  19C1               	xorwf	_bottle_type& (0+255),w,b
  7850  002288  0100               	movlb	0	; () banked
  7851  00228A  11C2               	iorwf	(_bottle_type+1)& (0+255),w,b
  7852  00228C  A4D8               	btfss	status,2,c
  7853  00228E  D007               	goto	l5607
  7854                           
  7855                           ; BSR set to: 0
  7856                           ;main.c: 564: yopWCap++;
  7857  002290  0100               	movlb	0	; () banked
  7858  002292  4BD9               	infsnz	_yopWCap& (0+255),f,b
  7859  002294  2BDA               	incf	(_yopWCap+1)& (0+255),f,b
  7860                           
  7861                           ; BSR set to: 0
  7862                           ;main.c: 565: }
  7863  002296  D003               	goto	l5607
  7864  002298                     l5605:
  7865                           
  7866                           ; BSR set to: 0
  7867                           ;main.c: 566: else
  7868                           ;main.c: 567: measure_counter+=1;
  7869  002298  0100               	movlb	0	; () banked
  7870  00229A  4BCD               	infsnz	_measure_counter& (0+255),f,b
  7871  00229C  2BCE               	incf	(_measure_counter+1)& (0+255),f,b
  7872  00229E                     l5607:
  7873                           
  7874                           ; BSR set to: 0
  7875                           ;main.c: 568: }
  7876                           ;main.c: 573: if (release_counter==1000/40)
  7877  00229E  0E19               	movlw	25
  7878  0022A0  0100               	movlb	0	; () banked
  7879  0022A2  19CF               	xorwf	_release_counter& (0+255),w,b
  7880  0022A4  0100               	movlb	0	; () banked
  7881  0022A6  11D0               	iorwf	(_release_counter+1)& (0+255),w,b
  7882  0022A8  A4D8               	btfss	status,2,c
  7883  0022AA  D005               	goto	l5611
  7884                           
  7885                           ; BSR set to: 0
  7886                           ;main.c: 574: discretize_counter=discretize;
  7887  0022AC  C0F7  F0C7         	movff	_discretize,_discretize_counter
  7888  0022B0  C0F8  F0C8         	movff	_discretize+1,_discretize_counter+1
  7889  0022B4  D0D1               	goto	l5641
  7890  0022B6                     l5611:
  7891                           
  7892                           ; BSR set to: 0
  7893                           ;main.c: 575: else if (release_counter>3500/40){
  7894  0022B6  0100               	movlb	0	; () banked
  7895  0022B8  BFD0               	btfsc	(_release_counter+1)& (0+255),7,b
  7896  0022BA  D029               	goto	l5615
  7897  0022BC  0100               	movlb	0	; () banked
  7898  0022BE  51D0               	movf	(_release_counter+1)& (0+255),w,b
  7899  0022C0  E105               	bnz	u8210
  7900  0022C2  0E58               	movlw	88
  7901  0022C4  0100               	movlb	0	; () banked
  7902  0022C6  5DCF               	subwf	_release_counter& (0+255),w,b
  7903  0022C8  A0D8               	btfss	status,0,c
  7904  0022CA  D021               	goto	l5615
  7905  0022CC                     u8210:
  7906                           
  7907                           ; BSR set to: 0
  7908                           ;main.c: 576: LATC|=1<<(bottle_type-1)%3;
  7909  0022CC  0EFF               	movlw	255
  7910  0022CE  0100               	movlb	0	; () banked
  7911  0022D0  25C1               	addwf	_bottle_type& (0+255),w,b
  7912  0022D2  0100               	movlb	0	; () banked
  7913  0022D4  6F80               	movwf	___awmod@dividend& (0+255),b
  7914  0022D6  0EFF               	movlw	255
  7915  0022D8  0100               	movlb	0	; () banked
  7916  0022DA  21C2               	addwfc	(_bottle_type+1)& (0+255),w,b
  7917  0022DC  0100               	movlb	0	; () banked
  7918  0022DE  6F81               	movwf	(___awmod@dividend+1)& (0+255),b
  7919  0022E0  0E00               	movlw	0
  7920  0022E2  0100               	movlb	0	; () banked
  7921  0022E4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7922  0022E6  0E03               	movlw	3
  7923  0022E8  6F82               	movwf	___awmod@divisor& (0+255),b
  7924  0022EA  EC11  F01B         	call	___awmod	;wreg free
  7925  0022EE  0E01               	movlw	1
  7926  0022F0  0100               	movlb	0	; () banked
  7927  0022F2  6F94               	movwf	??_sort& (0+255),b
  7928  0022F4  0100               	movlb	0	; () banked
  7929  0022F6  2B80               	incf	?___awmod& (0+255),f,b
  7930  0022F8  D003               	goto	u8224
  7931  0022FA                     u8225:
  7932  0022FA  0100               	movlb	0	; () banked
  7933  0022FC  90D8               	bcf	status,0,c
  7934  0022FE  3794               	rlcf	??_sort& (0+255),f,b
  7935  002300                     u8224:
  7936  002300  0100               	movlb	0	; () banked
  7937  002302  2F80               	decfsz	?___awmod& (0+255),f,b
  7938  002304  D7FA               	goto	u8225
  7939  002306  0100               	movlb	0	; () banked
  7940  002308  5194               	movf	??_sort& (0+255),w,b
  7941  00230A  128B               	iorwf	3979,f,c	;volatile
  7942                           
  7943                           ;main.c: 577: }
  7944  00230C  D0A5               	goto	l5641
  7945  00230E                     l5615:
  7946                           
  7947                           ; BSR set to: 0
  7948                           ;main.c: 578: else if (release_counter>3000/40){
  7949  00230E  0100               	movlb	0	; () banked
  7950  002310  BFD0               	btfsc	(_release_counter+1)& (0+255),7,b
  7951  002312  D02B               	goto	l5621
  7952  002314  0100               	movlb	0	; () banked
  7953  002316  51D0               	movf	(_release_counter+1)& (0+255),w,b
  7954  002318  E105               	bnz	u8230
  7955  00231A  0E4C               	movlw	76
  7956  00231C  0100               	movlb	0	; () banked
  7957  00231E  5DCF               	subwf	_release_counter& (0+255),w,b
  7958  002320  A0D8               	btfss	status,0,c
  7959  002322  D023               	goto	l5621
  7960  002324                     u8230:
  7961                           
  7962                           ; BSR set to: 0
  7963                           ;main.c: 579: LATC&=~(1<<(bottle_type-1)%3);
  7964  002324  0EFF               	movlw	255
  7965  002326  0100               	movlb	0	; () banked
  7966  002328  25C1               	addwf	_bottle_type& (0+255),w,b
  7967  00232A  0100               	movlb	0	; () banked
  7968  00232C  6F80               	movwf	___awmod@dividend& (0+255),b
  7969  00232E  0EFF               	movlw	255
  7970  002330  0100               	movlb	0	; () banked
  7971  002332  21C2               	addwfc	(_bottle_type+1)& (0+255),w,b
  7972  002334  0100               	movlb	0	; () banked
  7973  002336  6F81               	movwf	(___awmod@dividend+1)& (0+255),b
  7974  002338  0E00               	movlw	0
  7975  00233A  0100               	movlb	0	; () banked
  7976  00233C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7977  00233E  0E03               	movlw	3
  7978  002340  6F82               	movwf	___awmod@divisor& (0+255),b
  7979  002342  EC11  F01B         	call	___awmod	;wreg free
  7980  002346  0E01               	movlw	1
  7981  002348  0100               	movlb	0	; () banked
  7982  00234A  6F94               	movwf	??_sort& (0+255),b
  7983  00234C  0100               	movlb	0	; () banked
  7984  00234E  2B80               	incf	?___awmod& (0+255),f,b
  7985  002350  D003               	goto	u8244
  7986  002352                     u8245:
  7987  002352  0100               	movlb	0	; () banked
  7988  002354  90D8               	bcf	status,0,c
  7989  002356  3794               	rlcf	??_sort& (0+255),f,b
  7990  002358                     u8244:
  7991  002358  0100               	movlb	0	; () banked
  7992  00235A  2F80               	decfsz	?___awmod& (0+255),f,b
  7993  00235C  D7FA               	goto	u8245
  7994  00235E  0100               	movlb	0	; () banked
  7995  002360  5194               	movf	??_sort& (0+255),w,b
  7996  002362  0AFF               	xorlw	255
  7997  002364  168B               	andwf	3979,f,c	;volatile
  7998                           
  7999                           ; BSR set to: 0
  8000                           ;main.c: 580: LATD|=0x01;
  8001  002366  808C               	bsf	3980,0,c	;volatile
  8002                           
  8003                           ;main.c: 581: }
  8004  002368  D077               	goto	l5641
  8005  00236A                     l5621:
  8006                           
  8007                           ; BSR set to: 0
  8008                           ;main.c: 582: else if (release_counter>2500/40){
  8009  00236A  0100               	movlb	0	; () banked
  8010  00236C  BFD0               	btfsc	(_release_counter+1)& (0+255),7,b
  8011  00236E  D00B               	goto	l5625
  8012  002370  0100               	movlb	0	; () banked
  8013  002372  51D0               	movf	(_release_counter+1)& (0+255),w,b
  8014  002374  E105               	bnz	u8250
  8015  002376  0E3F               	movlw	63
  8016  002378  0100               	movlb	0	; () banked
  8017  00237A  5DCF               	subwf	_release_counter& (0+255),w,b
  8018  00237C  A0D8               	btfss	status,0,c
  8019  00237E  D003               	goto	l5625
  8020  002380                     u8250:
  8021                           
  8022                           ; BSR set to: 0
  8023                           ;main.c: 583: LATD&=~(0x01);
  8024  002380  908C               	bcf	3980,0,c	;volatile
  8025                           
  8026                           ;main.c: 584: LATC|=0x20;
  8027  002382  8A8B               	bsf	3979,5,c	;volatile
  8028                           
  8029                           ;main.c: 585: }
  8030  002384  D069               	goto	l5641
  8031  002386                     l5625:
  8032                           
  8033                           ; BSR set to: 0
  8034                           ;main.c: 586: else if (release_counter>2000/40){
  8035  002386  0100               	movlb	0	; () banked
  8036  002388  BFD0               	btfsc	(_release_counter+1)& (0+255),7,b
  8037  00238A  D00A               	goto	l5629
  8038  00238C  0100               	movlb	0	; () banked
  8039  00238E  51D0               	movf	(_release_counter+1)& (0+255),w,b
  8040  002390  E105               	bnz	u8260
  8041  002392  0E33               	movlw	51
  8042  002394  0100               	movlb	0	; () banked
  8043  002396  5DCF               	subwf	_release_counter& (0+255),w,b
  8044  002398  A0D8               	btfss	status,0,c
  8045  00239A  D002               	goto	l5629
  8046  00239C                     u8260:
  8047                           
  8048                           ; BSR set to: 0
  8049                           ;main.c: 587: LATC&=~(0x20);
  8050  00239C  9A8B               	bcf	3979,5,c	;volatile
  8051                           
  8052                           ;main.c: 588: }
  8053  00239E  D05C               	goto	l5641
  8054  0023A0                     l5629:
  8055                           
  8056                           ; BSR set to: 0
  8057                           ;main.c: 589: else if (release_counter>1000/40){
  8058  0023A0  0100               	movlb	0	; () banked
  8059  0023A2  BFD0               	btfsc	(_release_counter+1)& (0+255),7,b
  8060  0023A4  D008               	goto	l5633
  8061  0023A6  0100               	movlb	0	; () banked
  8062  0023A8  51D0               	movf	(_release_counter+1)& (0+255),w,b
  8063  0023AA  E156               	bnz	l5641
  8064  0023AC  0E1A               	movlw	26
  8065  0023AE  0100               	movlb	0	; () banked
  8066  0023B0  5DCF               	subwf	_release_counter& (0+255),w,b
  8067  0023B2  B0D8               	btfsc	status,0,c
  8068  0023B4  D051               	goto	l5641
  8069  0023B6                     l5633:
  8070                           
  8071                           ; BSR set to: 0
  8072                           ;main.c: 592: else if (release_counter>0){
  8073  0023B6  0100               	movlb	0	; () banked
  8074  0023B8  BFD0               	btfsc	(_release_counter+1)& (0+255),7,b
  8075  0023BA  D04E               	goto	l5641
  8076  0023BC  0100               	movlb	0	; () banked
  8077  0023BE  51D0               	movf	(_release_counter+1)& (0+255),w,b
  8078  0023C0  E104               	bnz	u8280
  8079  0023C2  0100               	movlb	0	; () banked
  8080  0023C4  05CF               	decf	_release_counter& (0+255),w,b
  8081  0023C6  A0D8               	btfss	status,0,c
  8082  0023C8  D047               	goto	l5641
  8083  0023CA                     u8280:
  8084                           
  8085                           ; BSR set to: 0
  8086                           ;main.c: 593: LATE|=1<<(bottle_type-1)%3;
  8087  0023CA  0EFF               	movlw	255
  8088  0023CC  0100               	movlb	0	; () banked
  8089  0023CE  25C1               	addwf	_bottle_type& (0+255),w,b
  8090  0023D0  0100               	movlb	0	; () banked
  8091  0023D2  6F80               	movwf	___awmod@dividend& (0+255),b
  8092  0023D4  0EFF               	movlw	255
  8093  0023D6  0100               	movlb	0	; () banked
  8094  0023D8  21C2               	addwfc	(_bottle_type+1)& (0+255),w,b
  8095  0023DA  0100               	movlb	0	; () banked
  8096  0023DC  6F81               	movwf	(___awmod@dividend+1)& (0+255),b
  8097  0023DE  0E00               	movlw	0
  8098  0023E0  0100               	movlb	0	; () banked
  8099  0023E2  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8100  0023E4  0E03               	movlw	3
  8101  0023E6  6F82               	movwf	___awmod@divisor& (0+255),b
  8102  0023E8  EC11  F01B         	call	___awmod	;wreg free
  8103  0023EC  0E01               	movlw	1
  8104  0023EE  0100               	movlb	0	; () banked
  8105  0023F0  6F94               	movwf	??_sort& (0+255),b
  8106  0023F2  0100               	movlb	0	; () banked
  8107  0023F4  2B80               	incf	?___awmod& (0+255),f,b
  8108  0023F6  D003               	goto	u8294
  8109  0023F8                     u8295:
  8110  0023F8  0100               	movlb	0	; () banked
  8111  0023FA  90D8               	bcf	status,0,c
  8112  0023FC  3794               	rlcf	??_sort& (0+255),f,b
  8113  0023FE                     u8294:
  8114  0023FE  0100               	movlb	0	; () banked
  8115  002400  2F80               	decfsz	?___awmod& (0+255),f,b
  8116  002402  D7FA               	goto	u8295
  8117  002404  0100               	movlb	0	; () banked
  8118  002406  5194               	movf	??_sort& (0+255),w,b
  8119  002408  128D               	iorwf	3981,f,c	;volatile
  8120                           
  8121                           ; BSR set to: 0
  8122                           ;main.c: 594: if (release_counter==1)
  8123  00240A  0100               	movlb	0	; () banked
  8124  00240C  05CF               	decf	_release_counter& (0+255),w,b
  8125  00240E  0100               	movlb	0	; () banked
  8126  002410  11D0               	iorwf	(_release_counter+1)& (0+255),w,b
  8127  002412  A4D8               	btfss	status,2,c
  8128  002414  D021               	goto	l5641
  8129                           
  8130                           ; BSR set to: 0
  8131                           ;main.c: 595: LATE&=~(1<<(bottle_type-1)%3);
  8132  002416  0EFF               	movlw	255
  8133  002418  0100               	movlb	0	; () banked
  8134  00241A  25C1               	addwf	_bottle_type& (0+255),w,b
  8135  00241C  0100               	movlb	0	; () banked
  8136  00241E  6F80               	movwf	___awmod@dividend& (0+255),b
  8137  002420  0EFF               	movlw	255
  8138  002422  0100               	movlb	0	; () banked
  8139  002424  21C2               	addwfc	(_bottle_type+1)& (0+255),w,b
  8140  002426  0100               	movlb	0	; () banked
  8141  002428  6F81               	movwf	(___awmod@dividend+1)& (0+255),b
  8142  00242A  0E00               	movlw	0
  8143  00242C  0100               	movlb	0	; () banked
  8144  00242E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8145  002430  0E03               	movlw	3
  8146  002432  6F82               	movwf	___awmod@divisor& (0+255),b
  8147  002434  EC11  F01B         	call	___awmod	;wreg free
  8148  002438  0E01               	movlw	1
  8149  00243A  0100               	movlb	0	; () banked
  8150  00243C  6F94               	movwf	??_sort& (0+255),b
  8151  00243E  0100               	movlb	0	; () banked
  8152  002440  2B80               	incf	?___awmod& (0+255),f,b
  8153  002442  D003               	goto	u8314
  8154  002444                     u8315:
  8155  002444  0100               	movlb	0	; () banked
  8156  002446  90D8               	bcf	status,0,c
  8157  002448  3794               	rlcf	??_sort& (0+255),f,b
  8158  00244A                     u8314:
  8159  00244A  0100               	movlb	0	; () banked
  8160  00244C  2F80               	decfsz	?___awmod& (0+255),f,b
  8161  00244E  D7FA               	goto	u8315
  8162  002450  0100               	movlb	0	; () banked
  8163  002452  5194               	movf	??_sort& (0+255),w,b
  8164  002454  0AFF               	xorlw	255
  8165  002456  168D               	andwf	3981,f,c	;volatile
  8166  002458                     l5641:
  8167                           
  8168                           ; BSR set to: 0
  8169                           ;main.c: 596: }
  8170                           ;main.c: 599: if (discretize_counter>0)
  8171  002458  0100               	movlb	0	; () banked
  8172  00245A  BFC8               	btfsc	(_discretize_counter+1)& (0+255),7,b
  8173  00245C  D00B               	goto	l5645
  8174  00245E  0100               	movlb	0	; () banked
  8175  002460  51C8               	movf	(_discretize_counter+1)& (0+255),w,b
  8176  002462  E104               	bnz	u8320
  8177  002464  0100               	movlb	0	; () banked
  8178  002466  05C7               	decf	_discretize_counter& (0+255),w,b
  8179  002468  A0D8               	btfss	status,0,c
  8180  00246A  D004               	goto	l5645
  8181  00246C                     u8320:
  8182                           
  8183                           ; BSR set to: 0
  8184                           ;main.c: 600: discretize_counter--;
  8185  00246C  0100               	movlb	0	; () banked
  8186  00246E  07C7               	decf	_discretize_counter& (0+255),f,b
  8187  002470  A0D8               	btfss	status,0,c
  8188  002472  07C8               	decf	(_discretize_counter+1)& (0+255),f,b
  8189  002474                     l5645:
  8190                           
  8191                           ; BSR set to: 0
  8192                           ;main.c: 601: if (measure_counter>0)
  8193  002474  0100               	movlb	0	; () banked
  8194  002476  BFCE               	btfsc	(_measure_counter+1)& (0+255),7,b
  8195  002478  D00B               	goto	l5649
  8196  00247A  0100               	movlb	0	; () banked
  8197  00247C  51CE               	movf	(_measure_counter+1)& (0+255),w,b
  8198  00247E  E104               	bnz	u8330
  8199  002480  0100               	movlb	0	; () banked
  8200  002482  05CD               	decf	_measure_counter& (0+255),w,b
  8201  002484  A0D8               	btfss	status,0,c
  8202  002486  D004               	goto	l5649
  8203  002488                     u8330:
  8204                           
  8205                           ; BSR set to: 0
  8206                           ;main.c: 602: measure_counter--;
  8207  002488  0100               	movlb	0	; () banked
  8208  00248A  07CD               	decf	_measure_counter& (0+255),f,b
  8209  00248C  A0D8               	btfss	status,0,c
  8210  00248E  07CE               	decf	(_measure_counter+1)& (0+255),f,b
  8211  002490                     l5649:
  8212                           
  8213                           ; BSR set to: 0
  8214                           ;main.c: 603: if (release_counter>0)
  8215  002490  0100               	movlb	0	; () banked
  8216  002492  BFD0               	btfsc	(_release_counter+1)& (0+255),7,b
  8217  002494  D00B               	goto	l5653
  8218  002496  0100               	movlb	0	; () banked
  8219  002498  51D0               	movf	(_release_counter+1)& (0+255),w,b
  8220  00249A  E104               	bnz	u8340
  8221  00249C  0100               	movlb	0	; () banked
  8222  00249E  05CF               	decf	_release_counter& (0+255),w,b
  8223  0024A0  A0D8               	btfss	status,0,c
  8224  0024A2  D004               	goto	l5653
  8225  0024A4                     u8340:
  8226                           
  8227                           ; BSR set to: 0
  8228                           ;main.c: 604: release_counter--;
  8229  0024A4  0100               	movlb	0	; () banked
  8230  0024A6  07CF               	decf	_release_counter& (0+255),f,b
  8231  0024A8  A0D8               	btfss	status,0,c
  8232  0024AA  07D0               	decf	(_release_counter+1)& (0+255),f,b
  8233  0024AC                     l5653:
  8234                           
  8235                           ; BSR set to: 0
  8236                           ;main.c: 607: if (time_i[1]*60-latestSortedBottleTime[1]*60+time_i[0]-latestSortedBottle
      +                          Time[0]>=15)
  8237  0024AC  C100  F094         	movff	_latestSortedBottleTime,??_sort
  8238  0024B0  C101  F095         	movff	_latestSortedBottleTime+1,??_sort+1
  8239  0024B4  0100               	movlb	0	; () banked
  8240  0024B6  1F94               	comf	??_sort& (0+255),f,b
  8241  0024B8  1F95               	comf	(??_sort+1)& (0+255),f,b
  8242  0024BA  4B94               	infsnz	??_sort& (0+255),f,b
  8243  0024BC  2B95               	incf	(??_sort+1)& (0+255),f,b
  8244  0024BE  C040  F080         	movff	_time_i+2,___wmul@multiplier
  8245  0024C2  C041  F081         	movff	_time_i+3,___wmul@multiplier+1
  8246  0024C6  0E00               	movlw	0
  8247  0024C8  0100               	movlb	0	; () banked
  8248  0024CA  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8249  0024CC  0E3C               	movlw	60
  8250  0024CE  6F82               	movwf	___wmul@multiplicand& (0+255),b
  8251  0024D0  ECF8  F01D         	call	___wmul	;wreg free
  8252  0024D4  C080  F096         	movff	?___wmul,??_sort+2
  8253  0024D8  C081  F097         	movff	?___wmul+1,??_sort+3
  8254  0024DC  C102  F080         	movff	_latestSortedBottleTime+2,___wmul@multiplier
  8255  0024E0  C103  F081         	movff	_latestSortedBottleTime+3,___wmul@multiplier+1
  8256  0024E4  0E00               	movlw	0
  8257  0024E6  0100               	movlb	0	; () banked
  8258  0024E8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8259  0024EA  0E3C               	movlw	60
  8260  0024EC  6F82               	movwf	___wmul@multiplicand& (0+255),b
  8261  0024EE  ECF8  F01D         	call	___wmul	;wreg free
  8262  0024F2  0100               	movlb	0	; () banked
  8263  0024F4  1F80               	comf	?___wmul& (0+255),f,b
  8264  0024F6  0100               	movlb	0	; () banked
  8265  0024F8  1F81               	comf	(?___wmul+1)& (0+255),f,b
  8266  0024FA  0100               	movlb	0	; () banked
  8267  0024FC  4B80               	infsnz	?___wmul& (0+255),f,b
  8268  0024FE  2B81               	incf	(?___wmul+1)& (0+255),f,b
  8269  002500  0100               	movlb	0	; () banked
  8270  002502  5180               	movf	?___wmul& (0+255),w,b
  8271  002504  0100               	movlb	0	; () banked
  8272  002506  2796               	addwf	(??_sort+2)& (0+255),f,b
  8273  002508  0100               	movlb	0	; () banked
  8274  00250A  5181               	movf	(?___wmul+1)& (0+255),w,b
  8275  00250C  0100               	movlb	0	; () banked
  8276  00250E  2397               	addwfc	(??_sort+3)& (0+255),f,b
  8277  002510  0100               	movlb	0	; () banked
  8278  002512  5194               	movf	??_sort& (0+255),w,b
  8279  002514  0100               	movlb	0	; () banked
  8280  002516  2796               	addwf	(??_sort+2)& (0+255),f,b
  8281  002518  0100               	movlb	0	; () banked
  8282  00251A  5195               	movf	(??_sort+1)& (0+255),w,b
  8283  00251C  0100               	movlb	0	; () banked
  8284  00251E  2397               	addwfc	(??_sort+3)& (0+255),f,b
  8285  002520  503E               	movf	_time_i,w,c
  8286  002522  0100               	movlb	0	; () banked
  8287  002524  2796               	addwf	(??_sort+2)& (0+255),f,b
  8288  002526  503F               	movf	_time_i+1,w,c
  8289  002528  0100               	movlb	0	; () banked
  8290  00252A  2397               	addwfc	(??_sort+3)& (0+255),f,b
  8291  00252C  0100               	movlb	0	; () banked
  8292  00252E  BF97               	btfsc	(??_sort+3)& (0+255),7,b
  8293  002530  0012               	return	
  8294  002532  0100               	movlb	0	; () banked
  8295  002534  5197               	movf	(??_sort+3)& (0+255),w,b
  8296  002536  E105               	bnz	u8350
  8297  002538  0E0F               	movlw	15
  8298  00253A  0100               	movlb	0	; () banked
  8299  00253C  5D96               	subwf	(??_sort+2)& (0+255),w,b
  8300  00253E  A0D8               	btfss	status,0,c
  8301  002540  0012               	return	
  8302  002542                     u8350:
  8303                           
  8304                           ; BSR set to: 0
  8305                           ;main.c: 608: nstate='e';
  8306  002542  0E65               	movlw	101
  8307  002544  0100               	movlb	0	; () banked
  8308  002546  6FE5               	movwf	_nstate& (0+255),b
  8309  002548  0012               	return	
  8310  00254A                     __end_of_sort:
  8311                           	opt stack 0
  8312                           tosu	equ	0xFFF
  8313                           tosh	equ	0xFFE
  8314                           tosl	equ	0xFFD
  8315                           pclath	equ	0xFFA
  8316                           tblptru	equ	0xFF8
  8317                           tblptrh	equ	0xFF7
  8318                           tblptrl	equ	0xFF6
  8319                           tablat	equ	0xFF5
  8320                           prodh	equ	0xFF4
  8321                           prodl	equ	0xFF3
  8322                           intcon	equ	0xFF2
  8323                           intcon2	equ	0xFF1
  8324                           intcon3	equ	0xFF0
  8325                           indf0	equ	0xFEF
  8326                           postinc0	equ	0xFEE
  8327                           fsr0h	equ	0xFEA
  8328                           fsr0l	equ	0xFE9
  8329                           wreg	equ	0xFE8
  8330                           indf1	equ	0xFE7
  8331                           postinc1	equ	0xFE6
  8332                           postdec1	equ	0xFE5
  8333                           fsr1h	equ	0xFE2
  8334                           fsr1l	equ	0xFE1
  8335                           indf2	equ	0xFDF
  8336                           postinc2	equ	0xFDE
  8337                           postdec2	equ	0xFDD
  8338                           fsr2h	equ	0xFDA
  8339                           fsr2l	equ	0xFD9
  8340                           status	equ	0xFD8
  8341                           
  8342 ;; *************** function __measure *****************
  8343 ;; Defined at:
  8344 ;;		line 639 in file "main.c"
  8345 ;; Parameters:    Size  Location     Type
  8346 ;;		None
  8347 ;; Auto vars:     Size  Location     Type
  8348 ;;  i               1   17[BANK0 ] unsigned char 
  8349 ;;  i               1   16[BANK0 ] unsigned char 
  8350 ;;  i               1   15[BANK0 ] unsigned char 
  8351 ;;  i               1   14[BANK0 ] unsigned char 
  8352 ;;  i               1   13[BANK0 ] unsigned char 
  8353 ;;  i               1   12[BANK0 ] unsigned char 
  8354 ;;  i               1   11[BANK0 ] unsigned char 
  8355 ;;  i               1   10[BANK0 ] unsigned char 
  8356 ;;  measurement     2   18[BANK0 ] int 
  8357 ;; Return value:  Size  Location     Type
  8358 ;;                  2    6[BANK0 ] int 
  8359 ;; Registers used:
  8360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8361 ;; Tracked objects:
  8362 ;;		On entry : 0/0
  8363 ;;		On exit  : 0/0
  8364 ;;		Unchanged: 0/0
  8365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8366 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8367 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8368 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8369 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8370 ;;Total ram usage:       14 bytes
  8371 ;; Hardware stack levels used:    1
  8372 ;; Hardware stack levels required when called:    6
  8373 ;; This function calls:
  8374 ;;		___awmod
  8375 ;; This function is called by:
  8376 ;;		_update_display
  8377 ;;		_sort
  8378 ;; This function uses a non-reentrant model
  8379 ;;
  8380                           
  8381                           	psect	text18
  8382  001CD4                     __ptext18:
  8383                           	opt stack 0
  8384  001CD4                     __measure:
  8385                           	opt stack 23
  8386                           
  8387                           ;main.c: 651: int measurement=0;
  8388                           
  8389                           ; BSR set to: 0
  8390                           ;incstack = 0
  8391  001CD4  0E00               	movlw	0
  8392  001CD6  0100               	movlb	0	; () banked
  8393  001CD8  6F93               	movwf	(__measure@measurement+1)& (0+255),b
  8394  001CDA  0E00               	movlw	0
  8395  001CDC  6F92               	movwf	__measure@measurement& (0+255),b
  8396                           
  8397                           ;main.c: 654: for (char i=0;i<5;i++)
  8398  001CDE  0E00               	movlw	0
  8399  001CE0  0100               	movlb	0	; () banked
  8400  001CE2  6F8A               	movwf	__measure@i& (0+255),b
  8401  001CE4                     l4979:
  8402                           
  8403                           ; BSR set to: 0
  8404  001CE4  0E04               	movlw	4
  8405  001CE6  0100               	movlb	0	; () banked
  8406  001CE8  658A               	cpfsgt	__measure@i& (0+255),b
  8407  001CEA  D001               	goto	l4983
  8408  001CEC  D012               	goto	l4989
  8409  001CEE                     l4983:
  8410                           
  8411                           ; BSR set to: 0
  8412                           ;main.c: 655: measurement+=PROX1[i];
  8413  001CEE  0100               	movlb	0	; () banked
  8414  001CF0  518A               	movf	__measure@i& (0+255),w,b
  8415  001CF2  0D02               	mullw	2
  8416  001CF4  0E56               	movlw	low _PROX1
  8417  001CF6  24F3               	addwf	prodl,w,c
  8418  001CF8  6ED9               	movwf	fsr2l,c
  8419  001CFA  0E00               	movlw	high _PROX1
  8420  001CFC  20F4               	addwfc	prodh,w,c
  8421  001CFE  6EDA               	movwf	fsr2h,c
  8422  001D00  50DE               	movf	postinc2,w,c
  8423  001D02  0100               	movlb	0	; () banked
  8424  001D04  2792               	addwf	__measure@measurement& (0+255),f,b
  8425  001D06  50DD               	movf	postdec2,w,c
  8426  001D08  0100               	movlb	0	; () banked
  8427  001D0A  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8428                           
  8429                           ; BSR set to: 0
  8430  001D0C  0100               	movlb	0	; () banked
  8431  001D0E  2B8A               	incf	__measure@i& (0+255),f,b
  8432  001D10  D7E9               	goto	l4979
  8433  001D12                     l4989:
  8434                           
  8435                           ; BSR set to: 0
  8436                           ;main.c: 656: if (measurement%5!=0)
  8437  001D12  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8438  001D16  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8439  001D1A  0E00               	movlw	0
  8440  001D1C  0100               	movlb	0	; () banked
  8441  001D1E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8442  001D20  0E05               	movlw	5
  8443  001D22  6F82               	movwf	___awmod@divisor& (0+255),b
  8444  001D24  EC11  F01B         	call	___awmod	;wreg free
  8445  001D28  0100               	movlb	0	; () banked
  8446  001D2A  5180               	movf	?___awmod& (0+255),w,b
  8447  001D2C  0100               	movlb	0	; () banked
  8448  001D2E  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8449  001D30  B4D8               	btfsc	status,2,c
  8450  001D32  D006               	goto	l4995
  8451                           
  8452                           ; BSR set to: 0
  8453                           ;main.c: 657: return 0;
  8454  001D34  0E00               	movlw	0
  8455  001D36  0100               	movlb	0	; () banked
  8456  001D38  6F87               	movwf	(?__measure+1)& (0+255),b
  8457  001D3A  0E00               	movlw	0
  8458  001D3C  6F86               	movwf	?__measure& (0+255),b
  8459                           
  8460                           ; BSR set to: 0
  8461  001D3E  0012               	return	
  8462  001D40                     l4995:
  8463                           
  8464                           ; BSR set to: 0
  8465                           ;main.c: 658: for (char i=0;i<5;i++)
  8466  001D40  0E00               	movlw	0
  8467  001D42  0100               	movlb	0	; () banked
  8468  001D44  6F8B               	movwf	__measure@i_499& (0+255),b
  8469  001D46                     l4997:
  8470                           
  8471                           ; BSR set to: 0
  8472  001D46  0E04               	movlw	4
  8473  001D48  0100               	movlb	0	; () banked
  8474  001D4A  658B               	cpfsgt	__measure@i_499& (0+255),b
  8475  001D4C  D001               	goto	l5001
  8476  001D4E  D012               	goto	l5007
  8477  001D50                     l5001:
  8478                           
  8479                           ; BSR set to: 0
  8480                           ;main.c: 659: measurement+=PROX2[i];
  8481  001D50  0100               	movlb	0	; () banked
  8482  001D52  518B               	movf	__measure@i_499& (0+255),w,b
  8483  001D54  0D02               	mullw	2
  8484  001D56  0E60               	movlw	low _PROX2
  8485  001D58  24F3               	addwf	prodl,w,c
  8486  001D5A  6ED9               	movwf	fsr2l,c
  8487  001D5C  0E00               	movlw	high _PROX2
  8488  001D5E  20F4               	addwfc	prodh,w,c
  8489  001D60  6EDA               	movwf	fsr2h,c
  8490  001D62  50DE               	movf	postinc2,w,c
  8491  001D64  0100               	movlb	0	; () banked
  8492  001D66  2792               	addwf	__measure@measurement& (0+255),f,b
  8493  001D68  50DD               	movf	postdec2,w,c
  8494  001D6A  0100               	movlb	0	; () banked
  8495  001D6C  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8496                           
  8497                           ; BSR set to: 0
  8498  001D6E  0100               	movlb	0	; () banked
  8499  001D70  2B8B               	incf	__measure@i_499& (0+255),f,b
  8500  001D72  D7E9               	goto	l4997
  8501  001D74                     l5007:
  8502                           
  8503                           ; BSR set to: 0
  8504                           ;main.c: 660: if (measurement%5!=0)
  8505  001D74  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8506  001D78  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8507  001D7C  0E00               	movlw	0
  8508  001D7E  0100               	movlb	0	; () banked
  8509  001D80  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8510  001D82  0E05               	movlw	5
  8511  001D84  6F82               	movwf	___awmod@divisor& (0+255),b
  8512  001D86  EC11  F01B         	call	___awmod	;wreg free
  8513  001D8A  0100               	movlb	0	; () banked
  8514  001D8C  5180               	movf	?___awmod& (0+255),w,b
  8515  001D8E  0100               	movlb	0	; () banked
  8516  001D90  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8517  001D92  B4D8               	btfsc	status,2,c
  8518  001D94  D006               	goto	l5013
  8519                           
  8520                           ; BSR set to: 0
  8521                           ;main.c: 661: return 0;
  8522  001D96  0E00               	movlw	0
  8523  001D98  0100               	movlb	0	; () banked
  8524  001D9A  6F87               	movwf	(?__measure+1)& (0+255),b
  8525  001D9C  0E00               	movlw	0
  8526  001D9E  6F86               	movwf	?__measure& (0+255),b
  8527                           
  8528                           ; BSR set to: 0
  8529  001DA0  0012               	return	
  8530  001DA2                     l5013:
  8531                           
  8532                           ; BSR set to: 0
  8533                           ;main.c: 664: for (char i=0;i<5;i++)
  8534  001DA2  0E00               	movlw	0
  8535  001DA4  0100               	movlb	0	; () banked
  8536  001DA6  6F8C               	movwf	__measure@i_500& (0+255),b
  8537  001DA8                     l5015:
  8538                           
  8539                           ; BSR set to: 0
  8540  001DA8  0E04               	movlw	4
  8541  001DAA  0100               	movlb	0	; () banked
  8542  001DAC  658C               	cpfsgt	__measure@i_500& (0+255),b
  8543  001DAE  D001               	goto	l5019
  8544  001DB0  D01B               	goto	l5025
  8545  001DB2                     l5019:
  8546                           
  8547                           ; BSR set to: 0
  8548                           ;main.c: 665: measurement+=(DIST1[i]<DIST_THRESHOLD_LOW);
  8549  001DB2  0100               	movlb	0	; () banked
  8550  001DB4  518C               	movf	__measure@i_500& (0+255),w,b
  8551  001DB6  0D02               	mullw	2
  8552  001DB8  0E1C               	movlw	low _DIST1
  8553  001DBA  24F3               	addwf	prodl,w,c
  8554  001DBC  6ED9               	movwf	fsr2l,c
  8555  001DBE  0E01               	movlw	high _DIST1
  8556  001DC0  20F4               	addwfc	prodh,w,c
  8557  001DC2  6EDA               	movwf	fsr2h,c
  8558  001DC4  0100               	movlb	0	; () banked
  8559  001DC6  51DD               	movf	_DIST_THRESHOLD_LOW& (0+255),w,b
  8560  001DC8  5CDE               	subwf	postinc2,w,c
  8561  001DCA  0100               	movlb	0	; () banked
  8562  001DCC  51DE               	movf	(_DIST_THRESHOLD_LOW+1)& (0+255),w,b
  8563  001DCE  58DE               	subwfb	postinc2,w,c
  8564  001DD0  B0D8               	btfsc	status,0,c
  8565  001DD2  D002               	goto	u6950
  8566  001DD4  0E01               	movlw	1
  8567  001DD6  D001               	goto	u6960
  8568  001DD8                     u6950:
  8569  001DD8  0E00               	movlw	0
  8570  001DDA                     u6960:
  8571  001DDA  0100               	movlb	0	; () banked
  8572  001DDC  2792               	addwf	__measure@measurement& (0+255),f,b
  8573  001DDE  0E00               	movlw	0
  8574  001DE0  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8575                           
  8576                           ; BSR set to: 0
  8577  001DE2  0100               	movlb	0	; () banked
  8578  001DE4  2B8C               	incf	__measure@i_500& (0+255),f,b
  8579  001DE6  D7E0               	goto	l5015
  8580  001DE8                     l5025:
  8581                           
  8582                           ; BSR set to: 0
  8583                           ;main.c: 666: if (measurement%5!=0)
  8584  001DE8  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8585  001DEC  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8586  001DF0  0E00               	movlw	0
  8587  001DF2  0100               	movlb	0	; () banked
  8588  001DF4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8589  001DF6  0E05               	movlw	5
  8590  001DF8  6F82               	movwf	___awmod@divisor& (0+255),b
  8591  001DFA  EC11  F01B         	call	___awmod	;wreg free
  8592  001DFE  0100               	movlb	0	; () banked
  8593  001E00  5180               	movf	?___awmod& (0+255),w,b
  8594  001E02  0100               	movlb	0	; () banked
  8595  001E04  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8596  001E06  B4D8               	btfsc	status,2,c
  8597  001E08  D006               	goto	l5031
  8598                           
  8599                           ; BSR set to: 0
  8600                           ;main.c: 667: return 0;
  8601  001E0A  0E00               	movlw	0
  8602  001E0C  0100               	movlb	0	; () banked
  8603  001E0E  6F87               	movwf	(?__measure+1)& (0+255),b
  8604  001E10  0E00               	movlw	0
  8605  001E12  6F86               	movwf	?__measure& (0+255),b
  8606                           
  8607                           ; BSR set to: 0
  8608  001E14  0012               	return	
  8609  001E16                     l5031:
  8610                           
  8611                           ; BSR set to: 0
  8612                           ;main.c: 668: for (char i=0;i<5;i++)
  8613  001E16  0E00               	movlw	0
  8614  001E18  0100               	movlb	0	; () banked
  8615  001E1A  6F8D               	movwf	__measure@i_501& (0+255),b
  8616  001E1C                     l5033:
  8617                           
  8618                           ; BSR set to: 0
  8619  001E1C  0E04               	movlw	4
  8620  001E1E  0100               	movlb	0	; () banked
  8621  001E20  658D               	cpfsgt	__measure@i_501& (0+255),b
  8622  001E22  D001               	goto	l5037
  8623  001E24  D01B               	goto	l5043
  8624  001E26                     l5037:
  8625                           
  8626                           ; BSR set to: 0
  8627                           ;main.c: 669: measurement+=(DIST1[i]<DIST_THRESHOLD_HI);
  8628  001E26  0100               	movlb	0	; () banked
  8629  001E28  518D               	movf	__measure@i_501& (0+255),w,b
  8630  001E2A  0D02               	mullw	2
  8631  001E2C  0E1C               	movlw	low _DIST1
  8632  001E2E  24F3               	addwf	prodl,w,c
  8633  001E30  6ED9               	movwf	fsr2l,c
  8634  001E32  0E01               	movlw	high _DIST1
  8635  001E34  20F4               	addwfc	prodh,w,c
  8636  001E36  6EDA               	movwf	fsr2h,c
  8637  001E38  0100               	movlb	0	; () banked
  8638  001E3A  51DB               	movf	_DIST_THRESHOLD_HI& (0+255),w,b
  8639  001E3C  5CDE               	subwf	postinc2,w,c
  8640  001E3E  0100               	movlb	0	; () banked
  8641  001E40  51DC               	movf	(_DIST_THRESHOLD_HI+1)& (0+255),w,b
  8642  001E42  58DE               	subwfb	postinc2,w,c
  8643  001E44  B0D8               	btfsc	status,0,c
  8644  001E46  D002               	goto	u7000
  8645  001E48  0E01               	movlw	1
  8646  001E4A  D001               	goto	u7010
  8647  001E4C                     u7000:
  8648  001E4C  0E00               	movlw	0
  8649  001E4E                     u7010:
  8650  001E4E  0100               	movlb	0	; () banked
  8651  001E50  2792               	addwf	__measure@measurement& (0+255),f,b
  8652  001E52  0E00               	movlw	0
  8653  001E54  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8654                           
  8655                           ; BSR set to: 0
  8656  001E56  0100               	movlb	0	; () banked
  8657  001E58  2B8D               	incf	__measure@i_501& (0+255),f,b
  8658  001E5A  D7E0               	goto	l5033
  8659  001E5C                     l5043:
  8660                           
  8661                           ; BSR set to: 0
  8662                           ;main.c: 670: if (measurement%5!=0)
  8663  001E5C  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8664  001E60  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8665  001E64  0E00               	movlw	0
  8666  001E66  0100               	movlb	0	; () banked
  8667  001E68  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8668  001E6A  0E05               	movlw	5
  8669  001E6C  6F82               	movwf	___awmod@divisor& (0+255),b
  8670  001E6E  EC11  F01B         	call	___awmod	;wreg free
  8671  001E72  0100               	movlb	0	; () banked
  8672  001E74  5180               	movf	?___awmod& (0+255),w,b
  8673  001E76  0100               	movlb	0	; () banked
  8674  001E78  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8675  001E7A  B4D8               	btfsc	status,2,c
  8676  001E7C  D006               	goto	l5049
  8677                           
  8678                           ; BSR set to: 0
  8679                           ;main.c: 671: return 0;
  8680  001E7E  0E00               	movlw	0
  8681  001E80  0100               	movlb	0	; () banked
  8682  001E82  6F87               	movwf	(?__measure+1)& (0+255),b
  8683  001E84  0E00               	movlw	0
  8684  001E86  6F86               	movwf	?__measure& (0+255),b
  8685                           
  8686                           ; BSR set to: 0
  8687  001E88  0012               	return	
  8688  001E8A                     l5049:
  8689                           
  8690                           ; BSR set to: 0
  8691                           ;main.c: 674: for (char i=0;i<5;i++)
  8692  001E8A  0E00               	movlw	0
  8693  001E8C  0100               	movlb	0	; () banked
  8694  001E8E  6F8E               	movwf	__measure@i_502& (0+255),b
  8695  001E90                     l5051:
  8696                           
  8697                           ; BSR set to: 0
  8698  001E90  0E04               	movlw	4
  8699  001E92  0100               	movlb	0	; () banked
  8700  001E94  658E               	cpfsgt	__measure@i_502& (0+255),b
  8701  001E96  D001               	goto	l5055
  8702  001E98  D01B               	goto	l5061
  8703  001E9A                     l5055:
  8704                           
  8705                           ; BSR set to: 0
  8706                           ;main.c: 675: measurement+=(IR1[i]<IR_THRESHOLD_LOW);
  8707  001E9A  0100               	movlb	0	; () banked
  8708  001E9C  518E               	movf	__measure@i_502& (0+255),w,b
  8709  001E9E  0D02               	mullw	2
  8710  001EA0  0E4C               	movlw	low _IR1
  8711  001EA2  24F3               	addwf	prodl,w,c
  8712  001EA4  6ED9               	movwf	fsr2l,c
  8713  001EA6  0E00               	movlw	high _IR1
  8714  001EA8  20F4               	addwfc	prodh,w,c
  8715  001EAA  6EDA               	movwf	fsr2h,c
  8716  001EAC  0100               	movlb	0	; () banked
  8717  001EAE  51E1               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  8718  001EB0  5CDE               	subwf	postinc2,w,c
  8719  001EB2  0100               	movlb	0	; () banked
  8720  001EB4  51E2               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  8721  001EB6  58DE               	subwfb	postinc2,w,c
  8722  001EB8  B0D8               	btfsc	status,0,c
  8723  001EBA  D002               	goto	u7050
  8724  001EBC  0E01               	movlw	1
  8725  001EBE  D001               	goto	u7060
  8726  001EC0                     u7050:
  8727  001EC0  0E00               	movlw	0
  8728  001EC2                     u7060:
  8729  001EC2  0100               	movlb	0	; () banked
  8730  001EC4  2792               	addwf	__measure@measurement& (0+255),f,b
  8731  001EC6  0E00               	movlw	0
  8732  001EC8  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8733                           
  8734                           ; BSR set to: 0
  8735  001ECA  0100               	movlb	0	; () banked
  8736  001ECC  2B8E               	incf	__measure@i_502& (0+255),f,b
  8737  001ECE  D7E0               	goto	l5051
  8738  001ED0                     l5061:
  8739                           
  8740                           ; BSR set to: 0
  8741                           ;main.c: 676: if (measurement%5!=0)
  8742  001ED0  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8743  001ED4  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8744  001ED8  0E00               	movlw	0
  8745  001EDA  0100               	movlb	0	; () banked
  8746  001EDC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8747  001EDE  0E05               	movlw	5
  8748  001EE0  6F82               	movwf	___awmod@divisor& (0+255),b
  8749  001EE2  EC11  F01B         	call	___awmod	;wreg free
  8750  001EE6  0100               	movlb	0	; () banked
  8751  001EE8  5180               	movf	?___awmod& (0+255),w,b
  8752  001EEA  0100               	movlb	0	; () banked
  8753  001EEC  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8754  001EEE  B4D8               	btfsc	status,2,c
  8755  001EF0  D006               	goto	l5067
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;main.c: 677: return 0;
  8759  001EF2  0E00               	movlw	0
  8760  001EF4  0100               	movlb	0	; () banked
  8761  001EF6  6F87               	movwf	(?__measure+1)& (0+255),b
  8762  001EF8  0E00               	movlw	0
  8763  001EFA  6F86               	movwf	?__measure& (0+255),b
  8764                           
  8765                           ; BSR set to: 0
  8766  001EFC  0012               	return	
  8767  001EFE                     l5067:
  8768                           
  8769                           ; BSR set to: 0
  8770                           ;main.c: 679: for (char i=0;i<5;i++)
  8771  001EFE  0E00               	movlw	0
  8772  001F00  0100               	movlb	0	; () banked
  8773  001F02  6F8F               	movwf	__measure@i_503& (0+255),b
  8774  001F04                     l5069:
  8775                           
  8776                           ; BSR set to: 0
  8777  001F04  0E04               	movlw	4
  8778  001F06  0100               	movlb	0	; () banked
  8779  001F08  658F               	cpfsgt	__measure@i_503& (0+255),b
  8780  001F0A  D001               	goto	l5073
  8781  001F0C  D01B               	goto	l5079
  8782  001F0E                     l5073:
  8783                           
  8784                           ; BSR set to: 0
  8785                           ;main.c: 680: measurement+=(IR1[i]<IR_THRESHOLD_HI);
  8786  001F0E  0100               	movlb	0	; () banked
  8787  001F10  518F               	movf	__measure@i_503& (0+255),w,b
  8788  001F12  0D02               	mullw	2
  8789  001F14  0E4C               	movlw	low _IR1
  8790  001F16  24F3               	addwf	prodl,w,c
  8791  001F18  6ED9               	movwf	fsr2l,c
  8792  001F1A  0E00               	movlw	high _IR1
  8793  001F1C  20F4               	addwfc	prodh,w,c
  8794  001F1E  6EDA               	movwf	fsr2h,c
  8795  001F20  0100               	movlb	0	; () banked
  8796  001F22  51DF               	movf	_IR_THRESHOLD_HI& (0+255),w,b
  8797  001F24  5CDE               	subwf	postinc2,w,c
  8798  001F26  0100               	movlb	0	; () banked
  8799  001F28  51E0               	movf	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  8800  001F2A  58DE               	subwfb	postinc2,w,c
  8801  001F2C  B0D8               	btfsc	status,0,c
  8802  001F2E  D002               	goto	u7100
  8803  001F30  0E01               	movlw	1
  8804  001F32  D001               	goto	u7110
  8805  001F34                     u7100:
  8806  001F34  0E00               	movlw	0
  8807  001F36                     u7110:
  8808  001F36  0100               	movlb	0	; () banked
  8809  001F38  2792               	addwf	__measure@measurement& (0+255),f,b
  8810  001F3A  0E00               	movlw	0
  8811  001F3C  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8812                           
  8813                           ; BSR set to: 0
  8814  001F3E  0100               	movlb	0	; () banked
  8815  001F40  2B8F               	incf	__measure@i_503& (0+255),f,b
  8816  001F42  D7E0               	goto	l5069
  8817  001F44                     l5079:
  8818                           
  8819                           ; BSR set to: 0
  8820                           ;main.c: 681: if (measurement%5!=0)
  8821  001F44  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8822  001F48  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8823  001F4C  0E00               	movlw	0
  8824  001F4E  0100               	movlb	0	; () banked
  8825  001F50  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8826  001F52  0E05               	movlw	5
  8827  001F54  6F82               	movwf	___awmod@divisor& (0+255),b
  8828  001F56  EC11  F01B         	call	___awmod	;wreg free
  8829  001F5A  0100               	movlb	0	; () banked
  8830  001F5C  5180               	movf	?___awmod& (0+255),w,b
  8831  001F5E  0100               	movlb	0	; () banked
  8832  001F60  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8833  001F62  B4D8               	btfsc	status,2,c
  8834  001F64  D006               	goto	l5085
  8835                           
  8836                           ; BSR set to: 0
  8837                           ;main.c: 682: return 0;
  8838  001F66  0E00               	movlw	0
  8839  001F68  0100               	movlb	0	; () banked
  8840  001F6A  6F87               	movwf	(?__measure+1)& (0+255),b
  8841  001F6C  0E00               	movlw	0
  8842  001F6E  6F86               	movwf	?__measure& (0+255),b
  8843                           
  8844                           ; BSR set to: 0
  8845  001F70  0012               	return	
  8846  001F72                     l5085:
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;main.c: 684: for (char i=0;i<5;i++)
  8850  001F72  0E00               	movlw	0
  8851  001F74  0100               	movlb	0	; () banked
  8852  001F76  6F90               	movwf	__measure@i_504& (0+255),b
  8853  001F78                     l5087:
  8854                           
  8855                           ; BSR set to: 0
  8856  001F78  0E04               	movlw	4
  8857  001F7A  0100               	movlb	0	; () banked
  8858  001F7C  6590               	cpfsgt	__measure@i_504& (0+255),b
  8859  001F7E  D001               	goto	l5091
  8860  001F80  D01B               	goto	l5097
  8861  001F82                     l5091:
  8862                           
  8863                           ; BSR set to: 0
  8864                           ;main.c: 685: measurement+=(IR2[i]<IR_THRESHOLD_LOW);
  8865  001F82  0100               	movlb	0	; () banked
  8866  001F84  5190               	movf	__measure@i_504& (0+255),w,b
  8867  001F86  0D02               	mullw	2
  8868  001F88  0E26               	movlw	low _IR2
  8869  001F8A  24F3               	addwf	prodl,w,c
  8870  001F8C  6ED9               	movwf	fsr2l,c
  8871  001F8E  0E01               	movlw	high _IR2
  8872  001F90  20F4               	addwfc	prodh,w,c
  8873  001F92  6EDA               	movwf	fsr2h,c
  8874  001F94  0100               	movlb	0	; () banked
  8875  001F96  51E1               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  8876  001F98  5CDE               	subwf	postinc2,w,c
  8877  001F9A  0100               	movlb	0	; () banked
  8878  001F9C  51E2               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  8879  001F9E  58DE               	subwfb	postinc2,w,c
  8880  001FA0  B0D8               	btfsc	status,0,c
  8881  001FA2  D002               	goto	u7150
  8882  001FA4  0E01               	movlw	1
  8883  001FA6  D001               	goto	u7160
  8884  001FA8                     u7150:
  8885  001FA8  0E00               	movlw	0
  8886  001FAA                     u7160:
  8887  001FAA  0100               	movlb	0	; () banked
  8888  001FAC  2792               	addwf	__measure@measurement& (0+255),f,b
  8889  001FAE  0E00               	movlw	0
  8890  001FB0  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8891                           
  8892                           ; BSR set to: 0
  8893  001FB2  0100               	movlb	0	; () banked
  8894  001FB4  2B90               	incf	__measure@i_504& (0+255),f,b
  8895  001FB6  D7E0               	goto	l5087
  8896  001FB8                     l5097:
  8897                           
  8898                           ; BSR set to: 0
  8899                           ;main.c: 686: if (measurement%5!=0)
  8900  001FB8  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8901  001FBC  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8902  001FC0  0E00               	movlw	0
  8903  001FC2  0100               	movlb	0	; () banked
  8904  001FC4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8905  001FC6  0E05               	movlw	5
  8906  001FC8  6F82               	movwf	___awmod@divisor& (0+255),b
  8907  001FCA  EC11  F01B         	call	___awmod	;wreg free
  8908  001FCE  0100               	movlb	0	; () banked
  8909  001FD0  5180               	movf	?___awmod& (0+255),w,b
  8910  001FD2  0100               	movlb	0	; () banked
  8911  001FD4  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8912  001FD6  B4D8               	btfsc	status,2,c
  8913  001FD8  D006               	goto	l5103
  8914                           
  8915                           ; BSR set to: 0
  8916                           ;main.c: 687: return 0;
  8917  001FDA  0E00               	movlw	0
  8918  001FDC  0100               	movlb	0	; () banked
  8919  001FDE  6F87               	movwf	(?__measure+1)& (0+255),b
  8920  001FE0  0E00               	movlw	0
  8921  001FE2  6F86               	movwf	?__measure& (0+255),b
  8922                           
  8923                           ; BSR set to: 0
  8924  001FE4  0012               	return	
  8925  001FE6                     l5103:
  8926                           
  8927                           ; BSR set to: 0
  8928                           ;main.c: 689: for (char i=0;i<5;i++)
  8929  001FE6  0E00               	movlw	0
  8930  001FE8  0100               	movlb	0	; () banked
  8931  001FEA  6F91               	movwf	__measure@i_505& (0+255),b
  8932  001FEC                     l5105:
  8933                           
  8934                           ; BSR set to: 0
  8935  001FEC  0E04               	movlw	4
  8936  001FEE  0100               	movlb	0	; () banked
  8937  001FF0  6591               	cpfsgt	__measure@i_505& (0+255),b
  8938  001FF2  D001               	goto	l5109
  8939  001FF4  D01B               	goto	l5115
  8940  001FF6                     l5109:
  8941                           
  8942                           ; BSR set to: 0
  8943                           ;main.c: 690: measurement+=(IR1[i]<IR_THRESHOLD_HI);
  8944  001FF6  0100               	movlb	0	; () banked
  8945  001FF8  5191               	movf	__measure@i_505& (0+255),w,b
  8946  001FFA  0D02               	mullw	2
  8947  001FFC  0E4C               	movlw	low _IR1
  8948  001FFE  24F3               	addwf	prodl,w,c
  8949  002000  6ED9               	movwf	fsr2l,c
  8950  002002  0E00               	movlw	high _IR1
  8951  002004  20F4               	addwfc	prodh,w,c
  8952  002006  6EDA               	movwf	fsr2h,c
  8953  002008  0100               	movlb	0	; () banked
  8954  00200A  51DF               	movf	_IR_THRESHOLD_HI& (0+255),w,b
  8955  00200C  5CDE               	subwf	postinc2,w,c
  8956  00200E  0100               	movlb	0	; () banked
  8957  002010  51E0               	movf	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  8958  002012  58DE               	subwfb	postinc2,w,c
  8959  002014  B0D8               	btfsc	status,0,c
  8960  002016  D002               	goto	u7200
  8961  002018  0E01               	movlw	1
  8962  00201A  D001               	goto	u7210
  8963  00201C                     u7200:
  8964  00201C  0E00               	movlw	0
  8965  00201E                     u7210:
  8966  00201E  0100               	movlb	0	; () banked
  8967  002020  2792               	addwf	__measure@measurement& (0+255),f,b
  8968  002022  0E00               	movlw	0
  8969  002024  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8970                           
  8971                           ; BSR set to: 0
  8972  002026  0100               	movlb	0	; () banked
  8973  002028  2B91               	incf	__measure@i_505& (0+255),f,b
  8974  00202A  D7E0               	goto	l5105
  8975  00202C                     l5115:
  8976                           
  8977                           ; BSR set to: 0
  8978                           ;main.c: 691: if (measurement%5!=0)
  8979  00202C  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8980  002030  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8981  002034  0E00               	movlw	0
  8982  002036  0100               	movlb	0	; () banked
  8983  002038  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8984  00203A  0E05               	movlw	5
  8985  00203C  6F82               	movwf	___awmod@divisor& (0+255),b
  8986  00203E  EC11  F01B         	call	___awmod	;wreg free
  8987  002042  0100               	movlb	0	; () banked
  8988  002044  5180               	movf	?___awmod& (0+255),w,b
  8989  002046  0100               	movlb	0	; () banked
  8990  002048  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8991  00204A  B4D8               	btfsc	status,2,c
  8992  00204C  D006               	goto	l5121
  8993                           
  8994                           ; BSR set to: 0
  8995                           ;main.c: 692: return 0;
  8996  00204E  0E00               	movlw	0
  8997  002050  0100               	movlb	0	; () banked
  8998  002052  6F87               	movwf	(?__measure+1)& (0+255),b
  8999  002054  0E00               	movlw	0
  9000  002056  6F86               	movwf	?__measure& (0+255),b
  9001                           
  9002                           ; BSR set to: 0
  9003  002058  0012               	return	
  9004  00205A                     l5121:
  9005                           
  9006                           ; BSR set to: 0
  9007                           ;main.c: 695: measurement=2;
  9008  00205A  0E00               	movlw	0
  9009  00205C  0100               	movlb	0	; () banked
  9010  00205E  6F93               	movwf	(__measure@measurement+1)& (0+255),b
  9011  002060  0E02               	movlw	2
  9012  002062  6F92               	movwf	__measure@measurement& (0+255),b
  9013                           
  9014                           ; BSR set to: 0
  9015                           ;main.c: 697: if (DIST1[0]>DIST_THRESHOLD_HI)
  9016  002064  0101               	movlb	1	; () banked
  9017  002066  511C               	movf	_DIST1& (0+255),w,b
  9018  002068  0100               	movlb	0	; () banked
  9019  00206A  5DDB               	subwf	_DIST_THRESHOLD_HI& (0+255),w,b
  9020  00206C  0101               	movlb	1	; () banked
  9021  00206E  511D               	movf	(_DIST1+1)& (0+255),w,b
  9022  002070  0100               	movlb	0	; () banked
  9023  002072  59DC               	subwfb	(_DIST_THRESHOLD_HI+1)& (0+255),w,b
  9024  002074  B0D8               	btfsc	status,0,c
  9025  002076  D006               	goto	l5129
  9026                           
  9027                           ; BSR set to: 0
  9028                           ;main.c: 698: return 0;
  9029  002078  0E00               	movlw	0
  9030  00207A  0100               	movlb	0	; () banked
  9031  00207C  6F87               	movwf	(?__measure+1)& (0+255),b
  9032  00207E  0E00               	movlw	0
  9033  002080  6F86               	movwf	?__measure& (0+255),b
  9034                           
  9035                           ; BSR set to: 0
  9036  002082  0012               	return	
  9037  002084                     l5129:
  9038                           
  9039                           ; BSR set to: 0
  9040                           ;main.c: 699: if (DIST1[0]>DIST_THRESHOLD_LOW){
  9041  002084  0101               	movlb	1	; () banked
  9042  002086  511C               	movf	_DIST1& (0+255),w,b
  9043  002088  0100               	movlb	0	; () banked
  9044  00208A  5DDD               	subwf	_DIST_THRESHOLD_LOW& (0+255),w,b
  9045  00208C  0101               	movlb	1	; () banked
  9046  00208E  511D               	movf	(_DIST1+1)& (0+255),w,b
  9047  002090  0100               	movlb	0	; () banked
  9048  002092  59DE               	subwfb	(_DIST_THRESHOLD_LOW+1)& (0+255),w,b
  9049  002094  B0D8               	btfsc	status,0,c
  9050  002096  D005               	goto	l5133
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;main.c: 700: measurement-=PROX2[0];
  9054  002098  5060               	movf	_PROX2,w,c
  9055  00209A  0100               	movlb	0	; () banked
  9056  00209C  5F92               	subwf	__measure@measurement& (0+255),f,b
  9057  00209E  5061               	movf	_PROX2+1,w,c
  9058  0020A0  D004               	goto	L3
  9059  0020A2                     l5133:
  9060                           
  9061                           ; BSR set to: 0
  9062                           ;main.c: 702: else
  9063                           ;main.c: 703: measurement-=PROX1[0];
  9064  0020A2  5056               	movf	_PROX1,w,c
  9065  0020A4  0100               	movlb	0	; () banked
  9066  0020A6  5F92               	subwf	__measure@measurement& (0+255),f,b
  9067  0020A8  5057               	movf	_PROX1+1,w,c
  9068  0020AA                     L3:
  9069  0020AA  0100               	movlb	0	; () banked
  9070  0020AC  5B93               	subwfb	(__measure@measurement+1)& (0+255),f,b
  9071                           
  9072                           ; BSR set to: 0
  9073                           ;main.c: 706: if (IR1[0]>IR_THRESHOLD_HI||IR2[0]>IR_THRESHOLD_HI);
  9074  0020AE  504C               	movf	_IR1,w,c
  9075  0020B0  0100               	movlb	0	; () banked
  9076  0020B2  5DDF               	subwf	_IR_THRESHOLD_HI& (0+255),w,b
  9077  0020B4  504D               	movf	_IR1+1,w,c
  9078  0020B6  0100               	movlb	0	; () banked
  9079  0020B8  59E0               	subwfb	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  9080  0020BA  A0D8               	btfss	status,0,c
  9081  0020BC  D028               	goto	l498
  9082                           
  9083                           ; BSR set to: 0
  9084  0020BE  0101               	movlb	1	; () banked
  9085  0020C0  5126               	movf	_IR2& (0+255),w,b
  9086  0020C2  0100               	movlb	0	; () banked
  9087  0020C4  5DDF               	subwf	_IR_THRESHOLD_HI& (0+255),w,b
  9088  0020C6  0101               	movlb	1	; () banked
  9089  0020C8  5127               	movf	(_IR2+1)& (0+255),w,b
  9090  0020CA  0100               	movlb	0	; () banked
  9091  0020CC  59E0               	subwfb	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  9092  0020CE  A0D8               	btfss	status,0,c
  9093  0020D0  D01E               	goto	l498
  9094                           
  9095                           ; BSR set to: 0
  9096                           ;main.c: 707: else if (IR1[0]<IR_THRESHOLD_LOW&&IR2[0]<IR_THRESHOLD_LOW)
  9097                           
  9098                           ; BSR set to: 0
  9099                           
  9100                           ; BSR set to: 0
  9101  0020D2  0100               	movlb	0	; () banked
  9102  0020D4  51E1               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  9103  0020D6  5C4C               	subwf	_IR1,w,c
  9104  0020D8  0100               	movlb	0	; () banked
  9105  0020DA  51E2               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  9106  0020DC  584D               	subwfb	_IR1+1,w,c
  9107  0020DE  B0D8               	btfsc	status,0,c
  9108  0020E0  D010               	goto	l5143
  9109                           
  9110                           ; BSR set to: 0
  9111  0020E2  0100               	movlb	0	; () banked
  9112  0020E4  51E1               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  9113  0020E6  0101               	movlb	1	; () banked
  9114  0020E8  5D26               	subwf	_IR2& (0+255),w,b
  9115  0020EA  0100               	movlb	0	; () banked
  9116  0020EC  51E2               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  9117  0020EE  0101               	movlb	1	; () banked
  9118  0020F0  5927               	subwfb	(_IR2+1)& (0+255),w,b
  9119  0020F2  B0D8               	btfsc	status,0,c
  9120  0020F4  D006               	goto	l5143
  9121                           
  9122                           ; BSR set to: 1
  9123                           ;main.c: 708: measurement+=2;
  9124  0020F6  0E02               	movlw	2
  9125  0020F8  0100               	movlb	0	; () banked
  9126  0020FA  2792               	addwf	__measure@measurement& (0+255),f,b
  9127  0020FC  0E00               	movlw	0
  9128  0020FE  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  9129  002100  D006               	goto	l498
  9130  002102                     l5143:
  9131                           
  9132                           ;main.c: 709: else
  9133                           ;main.c: 710: return 0;
  9134  002102  0E00               	movlw	0
  9135  002104  0100               	movlb	0	; () banked
  9136  002106  6F87               	movwf	(?__measure+1)& (0+255),b
  9137  002108  0E00               	movlw	0
  9138  00210A  6F86               	movwf	?__measure& (0+255),b
  9139                           
  9140                           ; BSR set to: 0
  9141  00210C  0012               	return	
  9142  00210E                     l498:
  9143                           
  9144                           ; BSR set to: 0
  9145                           ;main.c: 712: return measurement;
  9146  00210E  C092  F086         	movff	__measure@measurement,?__measure
  9147  002112  C093  F087         	movff	__measure@measurement+1,?__measure+1
  9148                           
  9149                           ; BSR set to: 0
  9150  002116  0012               	return		;funcret
  9151  002118                     __end_of__measure:
  9152                           	opt stack 0
  9153                           tosu	equ	0xFFF
  9154                           tosh	equ	0xFFE
  9155                           tosl	equ	0xFFD
  9156                           pclath	equ	0xFFA
  9157                           tblptru	equ	0xFF8
  9158                           tblptrh	equ	0xFF7
  9159                           tblptrl	equ	0xFF6
  9160                           tablat	equ	0xFF5
  9161                           prodh	equ	0xFF4
  9162                           prodl	equ	0xFF3
  9163                           intcon	equ	0xFF2
  9164                           intcon2	equ	0xFF1
  9165                           intcon3	equ	0xFF0
  9166                           indf0	equ	0xFEF
  9167                           postinc0	equ	0xFEE
  9168                           fsr0h	equ	0xFEA
  9169                           fsr0l	equ	0xFE9
  9170                           wreg	equ	0xFE8
  9171                           indf1	equ	0xFE7
  9172                           postinc1	equ	0xFE6
  9173                           postdec1	equ	0xFE5
  9174                           fsr1h	equ	0xFE2
  9175                           fsr1l	equ	0xFE1
  9176                           indf2	equ	0xFDF
  9177                           postinc2	equ	0xFDE
  9178                           postdec2	equ	0xFDD
  9179                           fsr2h	equ	0xFDA
  9180                           fsr2l	equ	0xFD9
  9181                           status	equ	0xFD8
  9182                           
  9183 ;; *************** function ___awmod *****************
  9184 ;; Defined at:
  9185 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9186 ;; Parameters:    Size  Location     Type
  9187 ;;  dividend        2    0[BANK0 ] int 
  9188 ;;  divisor         2    2[BANK0 ] int 
  9189 ;; Auto vars:     Size  Location     Type
  9190 ;;  sign            1    5[BANK0 ] unsigned char 
  9191 ;;  counter         1    4[BANK0 ] unsigned char 
  9192 ;; Return value:  Size  Location     Type
  9193 ;;                  2    0[BANK0 ] int 
  9194 ;; Registers used:
  9195 ;;		wreg, status,2, status,0
  9196 ;; Tracked objects:
  9197 ;;		On entry : 0/0
  9198 ;;		On exit  : 0/0
  9199 ;;		Unchanged: 0/0
  9200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9201 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9202 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9204 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9205 ;;Total ram usage:        6 bytes
  9206 ;; Hardware stack levels used:    1
  9207 ;; Hardware stack levels required when called:    5
  9208 ;; This function calls:
  9209 ;;		Nothing
  9210 ;; This function is called by:
  9211 ;;		_update_display
  9212 ;;		_update_state
  9213 ;;		_sort
  9214 ;;		__measure
  9215 ;; This function uses a non-reentrant model
  9216 ;;
  9217                           
  9218                           	psect	text19
  9219  003622                     __ptext19:
  9220                           	opt stack 0
  9221  003622                     ___awmod:
  9222                           	opt stack 24
  9223                           
  9224                           ; BSR set to: 0
  9225                           ;incstack = 0
  9226  003622  0E00               	movlw	0
  9227  003624  0100               	movlb	0	; () banked
  9228  003626  6F85               	movwf	___awmod@sign& (0+255),b
  9229                           
  9230                           ; BSR set to: 0
  9231  003628  0100               	movlb	0	; () banked
  9232  00362A  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9233  00362C  D008               	goto	l4845
  9234                           
  9235                           ; BSR set to: 0
  9236  00362E  0100               	movlb	0	; () banked
  9237  003630  6D80               	negf	___awmod@dividend& (0+255),b
  9238  003632  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9239  003634  B0D8               	btfsc	status,0,c
  9240  003636  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9241                           
  9242                           ; BSR set to: 0
  9243  003638  0E01               	movlw	1
  9244  00363A  0100               	movlb	0	; () banked
  9245  00363C  6F85               	movwf	___awmod@sign& (0+255),b
  9246  00363E                     l4845:
  9247                           
  9248                           ; BSR set to: 0
  9249  00363E  0100               	movlb	0	; () banked
  9250  003640  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9251  003642  D005               	goto	l4849
  9252                           
  9253                           ; BSR set to: 0
  9254  003644  0100               	movlb	0	; () banked
  9255  003646  6D82               	negf	___awmod@divisor& (0+255),b
  9256  003648  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9257  00364A  B0D8               	btfsc	status,0,c
  9258  00364C  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9259  00364E                     l4849:
  9260                           
  9261                           ; BSR set to: 0
  9262  00364E  0100               	movlb	0	; () banked
  9263  003650  5182               	movf	___awmod@divisor& (0+255),w,b
  9264  003652  0100               	movlb	0	; () banked
  9265  003654  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9266  003656  B4D8               	btfsc	status,2,c
  9267  003658  D026               	goto	l4865
  9268                           
  9269                           ; BSR set to: 0
  9270  00365A  0E01               	movlw	1
  9271  00365C  0100               	movlb	0	; () banked
  9272  00365E  6F84               	movwf	___awmod@counter& (0+255),b
  9273  003660  D006               	goto	l4855
  9274  003662                     l4853:
  9275                           
  9276                           ; BSR set to: 0
  9277  003662  0100               	movlb	0	; () banked
  9278  003664  90D8               	bcf	status,0,c
  9279  003666  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9280  003668  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9281  00366A  0100               	movlb	0	; () banked
  9282  00366C  2B84               	incf	___awmod@counter& (0+255),f,b
  9283  00366E                     l4855:
  9284                           
  9285                           ; BSR set to: 0
  9286  00366E  0100               	movlb	0	; () banked
  9287  003670  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9288  003672  D7F7               	goto	l4853
  9289  003674                     l4857:
  9290                           
  9291                           ; BSR set to: 0
  9292  003674  0100               	movlb	0	; () banked
  9293  003676  5182               	movf	___awmod@divisor& (0+255),w,b
  9294  003678  0100               	movlb	0	; () banked
  9295  00367A  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9296  00367C  0100               	movlb	0	; () banked
  9297  00367E  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9298  003680  0100               	movlb	0	; () banked
  9299  003682  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9300  003684  A0D8               	btfss	status,0,c
  9301  003686  D008               	goto	l4861
  9302                           
  9303                           ; BSR set to: 0
  9304  003688  0100               	movlb	0	; () banked
  9305  00368A  5182               	movf	___awmod@divisor& (0+255),w,b
  9306  00368C  0100               	movlb	0	; () banked
  9307  00368E  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9308  003690  0100               	movlb	0	; () banked
  9309  003692  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9310  003694  0100               	movlb	0	; () banked
  9311  003696  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9312  003698                     l4861:
  9313                           
  9314                           ; BSR set to: 0
  9315  003698  0100               	movlb	0	; () banked
  9316  00369A  90D8               	bcf	status,0,c
  9317  00369C  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9318  00369E  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9319                           
  9320                           ; BSR set to: 0
  9321  0036A0  0100               	movlb	0	; () banked
  9322  0036A2  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9323  0036A4  D7E7               	goto	l4857
  9324  0036A6                     l4865:
  9325                           
  9326                           ; BSR set to: 0
  9327  0036A6  0100               	movlb	0	; () banked
  9328  0036A8  5185               	movf	___awmod@sign& (0+255),w,b
  9329  0036AA  0100               	movlb	0	; () banked
  9330  0036AC  B4D8               	btfsc	status,2,c
  9331  0036AE  D005               	goto	l4869
  9332                           
  9333                           ; BSR set to: 0
  9334  0036B0  0100               	movlb	0	; () banked
  9335  0036B2  6D80               	negf	___awmod@dividend& (0+255),b
  9336  0036B4  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9337  0036B6  B0D8               	btfsc	status,0,c
  9338  0036B8  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9339  0036BA                     l4869:
  9340                           
  9341                           ; BSR set to: 0
  9342  0036BA  C080  F080         	movff	___awmod@dividend,?___awmod
  9343  0036BE  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9344  0036C2  0012               	return	
  9345  0036C4                     __end_of___awmod:
  9346                           	opt stack 0
  9347                           tosu	equ	0xFFF
  9348                           tosh	equ	0xFFE
  9349                           tosl	equ	0xFFD
  9350                           pclath	equ	0xFFA
  9351                           tblptru	equ	0xFF8
  9352                           tblptrh	equ	0xFF7
  9353                           tblptrl	equ	0xFF6
  9354                           tablat	equ	0xFF5
  9355                           prodh	equ	0xFF4
  9356                           prodl	equ	0xFF3
  9357                           intcon	equ	0xFF2
  9358                           intcon2	equ	0xFF1
  9359                           intcon3	equ	0xFF0
  9360                           indf0	equ	0xFEF
  9361                           postinc0	equ	0xFEE
  9362                           fsr0h	equ	0xFEA
  9363                           fsr0l	equ	0xFE9
  9364                           wreg	equ	0xFE8
  9365                           indf1	equ	0xFE7
  9366                           postinc1	equ	0xFE6
  9367                           postdec1	equ	0xFE5
  9368                           fsr1h	equ	0xFE2
  9369                           fsr1l	equ	0xFE1
  9370                           indf2	equ	0xFDF
  9371                           postinc2	equ	0xFDE
  9372                           postdec2	equ	0xFDD
  9373                           fsr2h	equ	0xFDA
  9374                           fsr2l	equ	0xFD9
  9375                           status	equ	0xFD8
  9376                           
  9377 ;; *************** function ___wmul *****************
  9378 ;; Defined at:
  9379 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  9380 ;; Parameters:    Size  Location     Type
  9381 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9382 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9383 ;; Auto vars:     Size  Location     Type
  9384 ;;  product         2    4[BANK0 ] unsigned int 
  9385 ;; Return value:  Size  Location     Type
  9386 ;;                  2    0[BANK0 ] unsigned int 
  9387 ;; Registers used:
  9388 ;;		wreg, status,2, status,0, prodl, prodh
  9389 ;; Tracked objects:
  9390 ;;		On entry : 0/0
  9391 ;;		On exit  : 0/0
  9392 ;;		Unchanged: 0/0
  9393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9394 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9395 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9397 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9398 ;;Total ram usage:        6 bytes
  9399 ;; Hardware stack levels used:    1
  9400 ;; Hardware stack levels required when called:    5
  9401 ;; This function calls:
  9402 ;;		Nothing
  9403 ;; This function is called by:
  9404 ;;		_update_RTC
  9405 ;;		_display_menu
  9406 ;;		_sort
  9407 ;;		__doprnt
  9408 ;; This function uses a non-reentrant model
  9409 ;;
  9410                           
  9411                           	psect	text20
  9412  003BF0                     __ptext20:
  9413                           	opt stack 0
  9414  003BF0                     ___wmul:
  9415                           	opt stack 22
  9416                           
  9417                           ; BSR set to: 0
  9418                           ;incstack = 0
  9419  003BF0  0100               	movlb	0	; () banked
  9420  003BF2  5180               	movf	___wmul@multiplier& (0+255),w,b
  9421  003BF4  0100               	movlb	0	; () banked
  9422  003BF6  0382               	mulwf	___wmul@multiplicand& (0+255),b
  9423  003BF8  CFF3 F084          	movff	prodl,___wmul@product
  9424  003BFC  CFF4 F085          	movff	prodh,___wmul@product+1
  9425  003C00  0100               	movlb	0	; () banked
  9426  003C02  5180               	movf	___wmul@multiplier& (0+255),w,b
  9427  003C04  0100               	movlb	0	; () banked
  9428  003C06  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9429  003C08  50F3               	movf	prodl,w,c
  9430  003C0A  0100               	movlb	0	; () banked
  9431  003C0C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  9432  003C0E  0100               	movlb	0	; () banked
  9433  003C10  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9434  003C12  0100               	movlb	0	; () banked
  9435  003C14  0382               	mulwf	___wmul@multiplicand& (0+255),b
  9436  003C16  50F3               	movf	prodl,w,c
  9437  003C18  0100               	movlb	0	; () banked
  9438  003C1A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  9439                           
  9440                           ; BSR set to: 0
  9441  003C1C  C084  F080         	movff	___wmul@product,?___wmul
  9442  003C20  C085  F081         	movff	___wmul@product+1,?___wmul+1
  9443  003C24  0012               	return	
  9444  003C26                     __end_of___wmul:
  9445                           	opt stack 0
  9446                           tosu	equ	0xFFF
  9447                           tosh	equ	0xFFE
  9448                           tosl	equ	0xFFD
  9449                           pclath	equ	0xFFA
  9450                           tblptru	equ	0xFF8
  9451                           tblptrh	equ	0xFF7
  9452                           tblptrl	equ	0xFF6
  9453                           tablat	equ	0xFF5
  9454                           prodh	equ	0xFF4
  9455                           prodl	equ	0xFF3
  9456                           intcon	equ	0xFF2
  9457                           intcon2	equ	0xFF1
  9458                           intcon3	equ	0xFF0
  9459                           indf0	equ	0xFEF
  9460                           postinc0	equ	0xFEE
  9461                           fsr0h	equ	0xFEA
  9462                           fsr0l	equ	0xFE9
  9463                           wreg	equ	0xFE8
  9464                           indf1	equ	0xFE7
  9465                           postinc1	equ	0xFE6
  9466                           postdec1	equ	0xFE5
  9467                           fsr1h	equ	0xFE2
  9468                           fsr1l	equ	0xFE1
  9469                           indf2	equ	0xFDF
  9470                           postinc2	equ	0xFDE
  9471                           postdec2	equ	0xFDD
  9472                           fsr2h	equ	0xFDA
  9473                           fsr2l	equ	0xFD9
  9474                           status	equ	0xFD8
  9475                           
  9476 ;; *************** function _set_time *****************
  9477 ;; Defined at:
  9478 ;;		line 480 in file "main.c"
  9479 ;; Parameters:    Size  Location     Type
  9480 ;;		None
  9481 ;; Auto vars:     Size  Location     Type
  9482 ;;  i               1    3[BANK0 ] unsigned char 
  9483 ;; Return value:  Size  Location     Type
  9484 ;;                  1    wreg      void 
  9485 ;; Registers used:
  9486 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9487 ;; Tracked objects:
  9488 ;;		On entry : 0/0
  9489 ;;		On exit  : 0/0
  9490 ;;		Unchanged: 0/0
  9491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9492 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9493 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9495 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9496 ;;Total ram usage:        1 bytes
  9497 ;; Hardware stack levels used:    1
  9498 ;; Hardware stack levels required when called:    7
  9499 ;; This function calls:
  9500 ;;		_I2C_Master_Start
  9501 ;;		_I2C_Master_Stop
  9502 ;;		_I2C_Master_Write
  9503 ;; This function is called by:
  9504 ;;		_main
  9505 ;; This function uses a non-reentrant model
  9506 ;;
  9507                           
  9508                           	psect	text21
  9509  003908                     __ptext21:
  9510                           	opt stack 0
  9511  003908                     _set_time:
  9512                           	opt stack 23
  9513                           
  9514                           ;main.c: 481: I2C_Master_Start();
  9515                           
  9516                           ; BSR set to: 0
  9517                           ;incstack = 0
  9518  003908  ECEB  F01E         	call	_I2C_Master_Start	;wreg free
  9519                           
  9520                           ;main.c: 482: I2C_Master_Write(0b11010000);
  9521  00390C  0E00               	movlw	0
  9522  00390E  0100               	movlb	0	; () banked
  9523  003910  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9524  003912  0ED0               	movlw	208
  9525  003914  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9526  003916  ECE2  F01E         	call	_I2C_Master_Write	;wreg free
  9527                           
  9528                           ;main.c: 483: I2C_Master_Write(0x00);
  9529  00391A  0E00               	movlw	0
  9530  00391C  0100               	movlb	0	; () banked
  9531  00391E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9532  003920  0E00               	movlw	0
  9533  003922  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9534  003924  ECE2  F01E         	call	_I2C_Master_Write	;wreg free
  9535                           
  9536                           ;main.c: 484: for(char i=0; i<7; i++){
  9537  003928  0E00               	movlw	0
  9538  00392A  0100               	movlb	0	; () banked
  9539  00392C  6F83               	movwf	set_time@i& (0+255),b
  9540  00392E                     l5463:
  9541                           
  9542                           ; BSR set to: 0
  9543  00392E  0E06               	movlw	6
  9544  003930  0100               	movlb	0	; () banked
  9545  003932  6583               	cpfsgt	set_time@i& (0+255),b
  9546  003934  D001               	goto	l5467
  9547  003936  D016               	goto	l5473
  9548  003938                     l5467:
  9549                           
  9550                           ; BSR set to: 0
  9551                           ;main.c: 485: I2C_Master_Write(manualDateTime[i]);
  9552  003938  0100               	movlb	0	; () banked
  9553  00393A  5183               	movf	set_time@i& (0+255),w,b
  9554  00393C  0D01               	mullw	1
  9555  00393E  0E7A               	movlw	low _manualDateTime
  9556  003940  24F3               	addwf	prodl,w,c
  9557  003942  6EF6               	movwf	tblptrl,c
  9558  003944  0EFE               	movlw	high _manualDateTime
  9559  003946  20F4               	addwfc	prodh,w,c
  9560  003948  6EF7               	movwf	tblptrh,c
  9561  00394A                     	if	1	;There are 3 active tblptr bytes
  9562  00394A  6AF8               	clrf	tblptru,c
  9563  00394C  0E00               	movlw	low (__mediumconst shr (0+16))
  9564  00394E  22F8               	addwfc	tblptru,f,c
  9565  003950                     	endif
  9566  003950  0008               	tblrd		*
  9567  003952  50F5               	movf	tablat,w,c
  9568  003954  0100               	movlb	0	; () banked
  9569  003956  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9570  003958  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9571  00395A  ECE2  F01E         	call	_I2C_Master_Write	;wreg free
  9572  00395E  0100               	movlb	0	; () banked
  9573  003960  2B83               	incf	set_time@i& (0+255),f,b
  9574  003962  D7E5               	goto	l5463
  9575  003964                     l5473:
  9576                           
  9577                           ; BSR set to: 0
  9578                           ;main.c: 486: }
  9579                           ;main.c: 487: I2C_Master_Stop();
  9580  003964  ECE7  F01E         	call	_I2C_Master_Stop	;wreg free
  9581  003968  0012               	return		;funcret
  9582  00396A                     __end_of_set_time:
  9583                           	opt stack 0
  9584                           tosu	equ	0xFFF
  9585                           tosh	equ	0xFFE
  9586                           tosl	equ	0xFFD
  9587                           pclath	equ	0xFFA
  9588                           tblptru	equ	0xFF8
  9589                           tblptrh	equ	0xFF7
  9590                           tblptrl	equ	0xFF6
  9591                           tablat	equ	0xFF5
  9592                           prodh	equ	0xFF4
  9593                           prodl	equ	0xFF3
  9594                           intcon	equ	0xFF2
  9595                           intcon2	equ	0xFF1
  9596                           intcon3	equ	0xFF0
  9597                           indf0	equ	0xFEF
  9598                           postinc0	equ	0xFEE
  9599                           fsr0h	equ	0xFEA
  9600                           fsr0l	equ	0xFE9
  9601                           wreg	equ	0xFE8
  9602                           indf1	equ	0xFE7
  9603                           postinc1	equ	0xFE6
  9604                           postdec1	equ	0xFE5
  9605                           fsr1h	equ	0xFE2
  9606                           fsr1l	equ	0xFE1
  9607                           indf2	equ	0xFDF
  9608                           postinc2	equ	0xFDE
  9609                           postdec2	equ	0xFDD
  9610                           fsr2h	equ	0xFDA
  9611                           fsr2l	equ	0xFD9
  9612                           status	equ	0xFD8
  9613                           
  9614 ;; *************** function _I2C_Master_Write *****************
  9615 ;; Defined at:
  9616 ;;		line 47 in file "I2C.c"
  9617 ;; Parameters:    Size  Location     Type
  9618 ;;  d               2    1[BANK0 ] unsigned int 
  9619 ;; Auto vars:     Size  Location     Type
  9620 ;;		None
  9621 ;; Return value:  Size  Location     Type
  9622 ;;                  1    wreg      void 
  9623 ;; Registers used:
  9624 ;;		wreg, status,2, status,0, cstack
  9625 ;; Tracked objects:
  9626 ;;		On entry : 0/0
  9627 ;;		On exit  : 0/0
  9628 ;;		Unchanged: 0/0
  9629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9630 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9631 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9633 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9634 ;;Total ram usage:        2 bytes
  9635 ;; Hardware stack levels used:    1
  9636 ;; Hardware stack levels required when called:    6
  9637 ;; This function calls:
  9638 ;;		_I2C_Master_Wait
  9639 ;; This function is called by:
  9640 ;;		_update_RTC
  9641 ;;		_set_time
  9642 ;; This function uses a non-reentrant model
  9643 ;;
  9644                           
  9645                           	psect	text22
  9646  003DC4                     __ptext22:
  9647                           	opt stack 0
  9648  003DC4                     _I2C_Master_Write:
  9649                           	opt stack 23
  9650                           
  9651                           ;I2C.c: 49: I2C_Master_Wait();
  9652                           
  9653                           ;incstack = 0
  9654  003DC4  ECC4  F01E         	call	_I2C_Master_Wait	;wreg free
  9655                           
  9656                           ;I2C.c: 50: SSPBUF = d;
  9657  003DC8  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9658  003DCC  0012               	return		;funcret
  9659  003DCE                     __end_of_I2C_Master_Write:
  9660                           	opt stack 0
  9661                           tosu	equ	0xFFF
  9662                           tosh	equ	0xFFE
  9663                           tosl	equ	0xFFD
  9664                           pclath	equ	0xFFA
  9665                           tblptru	equ	0xFF8
  9666                           tblptrh	equ	0xFF7
  9667                           tblptrl	equ	0xFF6
  9668                           tablat	equ	0xFF5
  9669                           prodh	equ	0xFF4
  9670                           prodl	equ	0xFF3
  9671                           intcon	equ	0xFF2
  9672                           intcon2	equ	0xFF1
  9673                           intcon3	equ	0xFF0
  9674                           indf0	equ	0xFEF
  9675                           postinc0	equ	0xFEE
  9676                           fsr0h	equ	0xFEA
  9677                           fsr0l	equ	0xFE9
  9678                           wreg	equ	0xFE8
  9679                           indf1	equ	0xFE7
  9680                           postinc1	equ	0xFE6
  9681                           postdec1	equ	0xFE5
  9682                           fsr1h	equ	0xFE2
  9683                           fsr1l	equ	0xFE1
  9684                           indf2	equ	0xFDF
  9685                           postinc2	equ	0xFDE
  9686                           postdec2	equ	0xFDD
  9687                           fsr2h	equ	0xFDA
  9688                           fsr2l	equ	0xFD9
  9689                           status	equ	0xFD8
  9690                           
  9691 ;; *************** function _I2C_Master_Stop *****************
  9692 ;; Defined at:
  9693 ;;		line 41 in file "I2C.c"
  9694 ;; Parameters:    Size  Location     Type
  9695 ;;		None
  9696 ;; Auto vars:     Size  Location     Type
  9697 ;;		None
  9698 ;; Return value:  Size  Location     Type
  9699 ;;                  1    wreg      void 
  9700 ;; Registers used:
  9701 ;;		wreg, status,2, status,0, cstack
  9702 ;; Tracked objects:
  9703 ;;		On entry : 0/0
  9704 ;;		On exit  : 0/0
  9705 ;;		Unchanged: 0/0
  9706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9711 ;;Total ram usage:        0 bytes
  9712 ;; Hardware stack levels used:    1
  9713 ;; Hardware stack levels required when called:    6
  9714 ;; This function calls:
  9715 ;;		_I2C_Master_Wait
  9716 ;; This function is called by:
  9717 ;;		_update_RTC
  9718 ;;		_set_time
  9719 ;; This function uses a non-reentrant model
  9720 ;;
  9721                           
  9722                           	psect	text23
  9723  003DCE                     __ptext23:
  9724                           	opt stack 0
  9725  003DCE                     _I2C_Master_Stop:
  9726                           	opt stack 23
  9727                           
  9728                           ;I2C.c: 43: I2C_Master_Wait();
  9729                           
  9730                           ;incstack = 0
  9731  003DCE  ECC4  F01E         	call	_I2C_Master_Wait	;wreg free
  9732                           
  9733                           ;I2C.c: 44: PEN = 1;
  9734  003DD2  84C5               	bsf	4037,2,c	;volatile
  9735  003DD4  0012               	return		;funcret
  9736  003DD6                     __end_of_I2C_Master_Stop:
  9737                           	opt stack 0
  9738                           tosu	equ	0xFFF
  9739                           tosh	equ	0xFFE
  9740                           tosl	equ	0xFFD
  9741                           pclath	equ	0xFFA
  9742                           tblptru	equ	0xFF8
  9743                           tblptrh	equ	0xFF7
  9744                           tblptrl	equ	0xFF6
  9745                           tablat	equ	0xFF5
  9746                           prodh	equ	0xFF4
  9747                           prodl	equ	0xFF3
  9748                           intcon	equ	0xFF2
  9749                           intcon2	equ	0xFF1
  9750                           intcon3	equ	0xFF0
  9751                           indf0	equ	0xFEF
  9752                           postinc0	equ	0xFEE
  9753                           fsr0h	equ	0xFEA
  9754                           fsr0l	equ	0xFE9
  9755                           wreg	equ	0xFE8
  9756                           indf1	equ	0xFE7
  9757                           postinc1	equ	0xFE6
  9758                           postdec1	equ	0xFE5
  9759                           fsr1h	equ	0xFE2
  9760                           fsr1l	equ	0xFE1
  9761                           indf2	equ	0xFDF
  9762                           postinc2	equ	0xFDE
  9763                           postdec2	equ	0xFDD
  9764                           fsr2h	equ	0xFDA
  9765                           fsr2l	equ	0xFD9
  9766                           status	equ	0xFD8
  9767                           
  9768 ;; *************** function _I2C_Master_Start *****************
  9769 ;; Defined at:
  9770 ;;		line 29 in file "I2C.c"
  9771 ;; Parameters:    Size  Location     Type
  9772 ;;		None
  9773 ;; Auto vars:     Size  Location     Type
  9774 ;;		None
  9775 ;; Return value:  Size  Location     Type
  9776 ;;                  1    wreg      void 
  9777 ;; Registers used:
  9778 ;;		wreg, status,2, status,0, cstack
  9779 ;; Tracked objects:
  9780 ;;		On entry : 0/0
  9781 ;;		On exit  : 0/0
  9782 ;;		Unchanged: 0/0
  9783 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9784 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9785 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9786 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9787 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9788 ;;Total ram usage:        0 bytes
  9789 ;; Hardware stack levels used:    1
  9790 ;; Hardware stack levels required when called:    6
  9791 ;; This function calls:
  9792 ;;		_I2C_Master_Wait
  9793 ;; This function is called by:
  9794 ;;		_update_RTC
  9795 ;;		_set_time
  9796 ;; This function uses a non-reentrant model
  9797 ;;
  9798                           
  9799                           	psect	text24
  9800  003DD6                     __ptext24:
  9801                           	opt stack 0
  9802  003DD6                     _I2C_Master_Start:
  9803                           	opt stack 23
  9804                           
  9805                           ;I2C.c: 31: I2C_Master_Wait();
  9806                           
  9807                           ;incstack = 0
  9808  003DD6  ECC4  F01E         	call	_I2C_Master_Wait	;wreg free
  9809                           
  9810                           ;I2C.c: 32: SEN = 1;
  9811  003DDA  80C5               	bsf	4037,0,c	;volatile
  9812  003DDC  0012               	return		;funcret
  9813  003DDE                     __end_of_I2C_Master_Start:
  9814                           	opt stack 0
  9815                           tosu	equ	0xFFF
  9816                           tosh	equ	0xFFE
  9817                           tosl	equ	0xFFD
  9818                           pclath	equ	0xFFA
  9819                           tblptru	equ	0xFF8
  9820                           tblptrh	equ	0xFF7
  9821                           tblptrl	equ	0xFF6
  9822                           tablat	equ	0xFF5
  9823                           prodh	equ	0xFF4
  9824                           prodl	equ	0xFF3
  9825                           intcon	equ	0xFF2
  9826                           intcon2	equ	0xFF1
  9827                           intcon3	equ	0xFF0
  9828                           indf0	equ	0xFEF
  9829                           postinc0	equ	0xFEE
  9830                           fsr0h	equ	0xFEA
  9831                           fsr0l	equ	0xFE9
  9832                           wreg	equ	0xFE8
  9833                           indf1	equ	0xFE7
  9834                           postinc1	equ	0xFE6
  9835                           postdec1	equ	0xFE5
  9836                           fsr1h	equ	0xFE2
  9837                           fsr1l	equ	0xFE1
  9838                           indf2	equ	0xFDF
  9839                           postinc2	equ	0xFDE
  9840                           postdec2	equ	0xFDD
  9841                           fsr2h	equ	0xFDA
  9842                           fsr2l	equ	0xFD9
  9843                           status	equ	0xFD8
  9844                           
  9845 ;; *************** function _I2C_Master_Wait *****************
  9846 ;; Defined at:
  9847 ;;		line 24 in file "I2C.c"
  9848 ;; Parameters:    Size  Location     Type
  9849 ;;		None
  9850 ;; Auto vars:     Size  Location     Type
  9851 ;;		None
  9852 ;; Return value:  Size  Location     Type
  9853 ;;                  1    wreg      void 
  9854 ;; Registers used:
  9855 ;;		wreg, status,2, status,0
  9856 ;; Tracked objects:
  9857 ;;		On entry : 0/0
  9858 ;;		On exit  : 0/0
  9859 ;;		Unchanged: 0/0
  9860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9861 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9862 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9863 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9864 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9865 ;;Total ram usage:        1 bytes
  9866 ;; Hardware stack levels used:    1
  9867 ;; Hardware stack levels required when called:    5
  9868 ;; This function calls:
  9869 ;;		Nothing
  9870 ;; This function is called by:
  9871 ;;		_I2C_Master_Start
  9872 ;;		_I2C_Master_Stop
  9873 ;;		_I2C_Master_Write
  9874 ;;		_I2C_Master_Read
  9875 ;;		_I2C_Master_RepeatedStart
  9876 ;; This function uses a non-reentrant model
  9877 ;;
  9878                           
  9879                           	psect	text25
  9880  003D88                     __ptext25:
  9881                           	opt stack 0
  9882  003D88                     _I2C_Master_Wait:
  9883                           	opt stack 23
  9884  003D88                     l34:
  9885  003D88  B4C7               	btfsc	4039,2,c	;volatile
  9886  003D8A  D7FE               	goto	l34
  9887  003D8C  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9888  003D90  0E1F               	movlw	31
  9889  003D92  0100               	movlb	0	; () banked
  9890  003D94  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9891  003D96  B4D8               	btfsc	status,2,c
  9892  003D98  0012               	return	
  9893  003D9A  D7F6               	goto	l34
  9894  003D9C                     __end_of_I2C_Master_Wait:
  9895                           	opt stack 0
  9896                           tosu	equ	0xFFF
  9897                           tosh	equ	0xFFE
  9898                           tosl	equ	0xFFD
  9899                           pclath	equ	0xFFA
  9900                           tblptru	equ	0xFF8
  9901                           tblptrh	equ	0xFF7
  9902                           tblptrl	equ	0xFF6
  9903                           tablat	equ	0xFF5
  9904                           prodh	equ	0xFF4
  9905                           prodl	equ	0xFF3
  9906                           intcon	equ	0xFF2
  9907                           intcon2	equ	0xFF1
  9908                           intcon3	equ	0xFF0
  9909                           indf0	equ	0xFEF
  9910                           postinc0	equ	0xFEE
  9911                           fsr0h	equ	0xFEA
  9912                           fsr0l	equ	0xFE9
  9913                           wreg	equ	0xFE8
  9914                           indf1	equ	0xFE7
  9915                           postinc1	equ	0xFE6
  9916                           postdec1	equ	0xFE5
  9917                           fsr1h	equ	0xFE2
  9918                           fsr1l	equ	0xFE1
  9919                           indf2	equ	0xFDF
  9920                           postinc2	equ	0xFDE
  9921                           postdec2	equ	0xFDD
  9922                           fsr2h	equ	0xFDA
  9923                           fsr2l	equ	0xFD9
  9924                           status	equ	0xFD8
  9925                           
  9926 ;; *************** function _read_sensors *****************
  9927 ;; Defined at:
  9928 ;;		line 491 in file "main.c"
  9929 ;; Parameters:    Size  Location     Type
  9930 ;;		None
  9931 ;; Auto vars:     Size  Location     Type
  9932 ;;  i               1    6[BANK0 ] unsigned char 
  9933 ;; Return value:  Size  Location     Type
  9934 ;;                  1    wreg      void 
  9935 ;; Registers used:
  9936 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9937 ;; Tracked objects:
  9938 ;;		On entry : 0/0
  9939 ;;		On exit  : 0/0
  9940 ;;		Unchanged: 0/0
  9941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9942 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9943 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9944 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9945 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9946 ;;Total ram usage:        5 bytes
  9947 ;; Hardware stack levels used:    1
  9948 ;; Hardware stack levels required when called:    6
  9949 ;; This function calls:
  9950 ;;		_readADC
  9951 ;; This function is called by:
  9952 ;;		_main
  9953 ;; This function uses a non-reentrant model
  9954 ;;
  9955                           
  9956                           	psect	text26
  9957  002E58                     __ptext26:
  9958                           	opt stack 0
  9959  002E58                     _read_sensors:
  9960                           	opt stack 24
  9961                           
  9962                           ;main.c: 492: if (state!='s'){
  9963                           
  9964                           ; BSR set to: 0
  9965                           ;incstack = 0
  9966  002E58  0E73               	movlw	115
  9967  002E5A  0100               	movlb	0	; () banked
  9968  002E5C  19E6               	xorwf	_state& (0+255),w,b
  9969  002E5E  A4D8               	btfss	status,2,c
  9970  002E60  0012               	return	
  9971                           
  9972                           ; BSR set to: 0
  9973                           ;main.c: 494: }
  9974                           ;main.c: 496: for(char i=5-1;i>0;i--){
  9975                           
  9976                           ; BSR set to: 0
  9977                           
  9978                           ; BSR set to: 0
  9979                           ;main.c: 493: return;
  9980  002E62  0E04               	movlw	4
  9981  002E64  0100               	movlb	0	; () banked
  9982  002E66  6F86               	movwf	read_sensors@i& (0+255),b
  9983  002E68  0100               	movlb	0	; () banked
  9984  002E6A  5186               	movf	read_sensors@i& (0+255),w,b
  9985  002E6C  0100               	movlb	0	; () banked
  9986  002E6E  B4D8               	btfsc	status,2,c
  9987  002E70  D0DF               	goto	l5529
  9988                           
  9989                           ; BSR set to: 0
  9990                           ;main.c: 497: PROX1[i]=PROX1[i-1];
  9991                           
  9992                           ; BSR set to: 0
  9993                           
  9994                           ; BSR set to: 0
  9995  002E72  0EFE               	movlw	254
  9996  002E74  0100               	movlb	0	; () banked
  9997  002E76  6F82               	movwf	??_read_sensors& (0+255),b
  9998  002E78  0EFF               	movlw	255
  9999  002E7A  0100               	movlb	0	; () banked
 10000  002E7C  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10001  002E7E  0100               	movlb	0	; () banked
 10002  002E80  5186               	movf	read_sensors@i& (0+255),w,b
 10003  002E82  0100               	movlb	0	; () banked
 10004  002E84  6F84               	movwf	(??_read_sensors+2)& (0+255),b
 10005  002E86  6B85               	clrf	(??_read_sensors+3)& (0+255),b
 10006  002E88  90D8               	bcf	status,0,c
 10007  002E8A  0100               	movlb	0	; () banked
 10008  002E8C  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
 10009  002E8E  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
 10010  002E90  0100               	movlb	0	; () banked
 10011  002E92  5182               	movf	??_read_sensors& (0+255),w,b
 10012  002E94  0100               	movlb	0	; () banked
 10013  002E96  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
 10014  002E98  0100               	movlb	0	; () banked
 10015  002E9A  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10016  002E9C  0100               	movlb	0	; () banked
 10017  002E9E  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
 10018  002EA0  0E56               	movlw	low _PROX1
 10019  002EA2  0100               	movlb	0	; () banked
 10020  002EA4  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
 10021  002EA6  6ED9               	movwf	fsr2l,c
 10022  002EA8  0E00               	movlw	high _PROX1
 10023  002EAA  0100               	movlb	0	; () banked
 10024  002EAC  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
 10025  002EAE  6EDA               	movwf	fsr2h,c
 10026  002EB0  0100               	movlb	0	; () banked
 10027  002EB2  5186               	movf	read_sensors@i& (0+255),w,b
 10028  002EB4  0D02               	mullw	2
 10029  002EB6  0E56               	movlw	low _PROX1
 10030  002EB8  24F3               	addwf	prodl,w,c
 10031  002EBA  6EE1               	movwf	fsr1l,c
 10032  002EBC  0E00               	movlw	high _PROX1
 10033  002EBE  20F4               	addwfc	prodh,w,c
 10034  002EC0  6EE2               	movwf	fsr1h,c
 10035  002EC2  CFDE FFE6          	movff	postinc2,postinc1
 10036  002EC6  CFDD FFE5          	movff	postdec2,postdec1
 10037                           
 10038                           ;main.c: 498: PROX2[i]=PROX2[i-1];
 10039  002ECA  0EFE               	movlw	254
 10040  002ECC  0100               	movlb	0	; () banked
 10041  002ECE  6F82               	movwf	??_read_sensors& (0+255),b
 10042  002ED0  0EFF               	movlw	255
 10043  002ED2  0100               	movlb	0	; () banked
 10044  002ED4  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10045  002ED6  0100               	movlb	0	; () banked
 10046  002ED8  5186               	movf	read_sensors@i& (0+255),w,b
 10047  002EDA  0100               	movlb	0	; () banked
 10048  002EDC  6F84               	movwf	(??_read_sensors+2)& (0+255),b
 10049  002EDE  6B85               	clrf	(??_read_sensors+3)& (0+255),b
 10050  002EE0  90D8               	bcf	status,0,c
 10051  002EE2  0100               	movlb	0	; () banked
 10052  002EE4  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
 10053  002EE6  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
 10054  002EE8  0100               	movlb	0	; () banked
 10055  002EEA  5182               	movf	??_read_sensors& (0+255),w,b
 10056  002EEC  0100               	movlb	0	; () banked
 10057  002EEE  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
 10058  002EF0  0100               	movlb	0	; () banked
 10059  002EF2  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10060  002EF4  0100               	movlb	0	; () banked
 10061  002EF6  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
 10062  002EF8  0E60               	movlw	low _PROX2
 10063  002EFA  0100               	movlb	0	; () banked
 10064  002EFC  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
 10065  002EFE  6ED9               	movwf	fsr2l,c
 10066  002F00  0E00               	movlw	high _PROX2
 10067  002F02  0100               	movlb	0	; () banked
 10068  002F04  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
 10069  002F06  6EDA               	movwf	fsr2h,c
 10070  002F08  0100               	movlb	0	; () banked
 10071  002F0A  5186               	movf	read_sensors@i& (0+255),w,b
 10072  002F0C  0D02               	mullw	2
 10073  002F0E  0E60               	movlw	low _PROX2
 10074  002F10  24F3               	addwf	prodl,w,c
 10075  002F12  6EE1               	movwf	fsr1l,c
 10076  002F14  0E00               	movlw	high _PROX2
 10077  002F16  20F4               	addwfc	prodh,w,c
 10078  002F18  6EE2               	movwf	fsr1h,c
 10079  002F1A  CFDE FFE6          	movff	postinc2,postinc1
 10080  002F1E  CFDD FFE5          	movff	postdec2,postdec1
 10081                           
 10082                           ;main.c: 499: DIST1[i]=DIST1[i-1];
 10083  002F22  0EFE               	movlw	254
 10084  002F24  0100               	movlb	0	; () banked
 10085  002F26  6F82               	movwf	??_read_sensors& (0+255),b
 10086  002F28  0EFF               	movlw	255
 10087  002F2A  0100               	movlb	0	; () banked
 10088  002F2C  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10089  002F2E  0100               	movlb	0	; () banked
 10090  002F30  5186               	movf	read_sensors@i& (0+255),w,b
 10091  002F32  0100               	movlb	0	; () banked
 10092  002F34  6F84               	movwf	(??_read_sensors+2)& (0+255),b
 10093  002F36  6B85               	clrf	(??_read_sensors+3)& (0+255),b
 10094  002F38  90D8               	bcf	status,0,c
 10095  002F3A  0100               	movlb	0	; () banked
 10096  002F3C  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
 10097  002F3E  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
 10098  002F40  0100               	movlb	0	; () banked
 10099  002F42  5182               	movf	??_read_sensors& (0+255),w,b
 10100  002F44  0100               	movlb	0	; () banked
 10101  002F46  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
 10102  002F48  0100               	movlb	0	; () banked
 10103  002F4A  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10104  002F4C  0100               	movlb	0	; () banked
 10105  002F4E  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
 10106  002F50  0E1C               	movlw	low _DIST1
 10107  002F52  0100               	movlb	0	; () banked
 10108  002F54  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
 10109  002F56  6ED9               	movwf	fsr2l,c
 10110  002F58  0E01               	movlw	high _DIST1
 10111  002F5A  0100               	movlb	0	; () banked
 10112  002F5C  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
 10113  002F5E  6EDA               	movwf	fsr2h,c
 10114  002F60  0100               	movlb	0	; () banked
 10115  002F62  5186               	movf	read_sensors@i& (0+255),w,b
 10116  002F64  0D02               	mullw	2
 10117  002F66  0E1C               	movlw	low _DIST1
 10118  002F68  24F3               	addwf	prodl,w,c
 10119  002F6A  6EE1               	movwf	fsr1l,c
 10120  002F6C  0E01               	movlw	high _DIST1
 10121  002F6E  20F4               	addwfc	prodh,w,c
 10122  002F70  6EE2               	movwf	fsr1h,c
 10123  002F72  CFDE FFE6          	movff	postinc2,postinc1
 10124  002F76  CFDD FFE5          	movff	postdec2,postdec1
 10125                           
 10126                           ;main.c: 500: IR1[i]=IR1[i-1];
 10127  002F7A  0EFE               	movlw	254
 10128  002F7C  0100               	movlb	0	; () banked
 10129  002F7E  6F82               	movwf	??_read_sensors& (0+255),b
 10130  002F80  0EFF               	movlw	255
 10131  002F82  0100               	movlb	0	; () banked
 10132  002F84  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10133  002F86  0100               	movlb	0	; () banked
 10134  002F88  5186               	movf	read_sensors@i& (0+255),w,b
 10135  002F8A  0100               	movlb	0	; () banked
 10136  002F8C  6F84               	movwf	(??_read_sensors+2)& (0+255),b
 10137  002F8E  6B85               	clrf	(??_read_sensors+3)& (0+255),b
 10138  002F90  90D8               	bcf	status,0,c
 10139  002F92  0100               	movlb	0	; () banked
 10140  002F94  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
 10141  002F96  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
 10142  002F98  0100               	movlb	0	; () banked
 10143  002F9A  5182               	movf	??_read_sensors& (0+255),w,b
 10144  002F9C  0100               	movlb	0	; () banked
 10145  002F9E  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
 10146  002FA0  0100               	movlb	0	; () banked
 10147  002FA2  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10148  002FA4  0100               	movlb	0	; () banked
 10149  002FA6  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
 10150  002FA8  0E4C               	movlw	low _IR1
 10151  002FAA  0100               	movlb	0	; () banked
 10152  002FAC  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
 10153  002FAE  6ED9               	movwf	fsr2l,c
 10154  002FB0  0E00               	movlw	high _IR1
 10155  002FB2  0100               	movlb	0	; () banked
 10156  002FB4  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
 10157  002FB6  6EDA               	movwf	fsr2h,c
 10158  002FB8  0100               	movlb	0	; () banked
 10159  002FBA  5186               	movf	read_sensors@i& (0+255),w,b
 10160  002FBC  0D02               	mullw	2
 10161  002FBE  0E4C               	movlw	low _IR1
 10162  002FC0  24F3               	addwf	prodl,w,c
 10163  002FC2  6EE1               	movwf	fsr1l,c
 10164  002FC4  0E00               	movlw	high _IR1
 10165  002FC6  20F4               	addwfc	prodh,w,c
 10166  002FC8  6EE2               	movwf	fsr1h,c
 10167  002FCA  CFDE FFE6          	movff	postinc2,postinc1
 10168  002FCE  CFDD FFE5          	movff	postdec2,postdec1
 10169                           
 10170                           ;main.c: 501: IR2[i]=IR2[i-1];
 10171  002FD2  0EFE               	movlw	254
 10172  002FD4  0100               	movlb	0	; () banked
 10173  002FD6  6F82               	movwf	??_read_sensors& (0+255),b
 10174  002FD8  0EFF               	movlw	255
 10175  002FDA  0100               	movlb	0	; () banked
 10176  002FDC  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10177  002FDE  0100               	movlb	0	; () banked
 10178  002FE0  5186               	movf	read_sensors@i& (0+255),w,b
 10179  002FE2  0100               	movlb	0	; () banked
 10180  002FE4  6F84               	movwf	(??_read_sensors+2)& (0+255),b
 10181  002FE6  6B85               	clrf	(??_read_sensors+3)& (0+255),b
 10182  002FE8  90D8               	bcf	status,0,c
 10183  002FEA  0100               	movlb	0	; () banked
 10184  002FEC  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
 10185  002FEE  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
 10186  002FF0  0100               	movlb	0	; () banked
 10187  002FF2  5182               	movf	??_read_sensors& (0+255),w,b
 10188  002FF4  0100               	movlb	0	; () banked
 10189  002FF6  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
 10190  002FF8  0100               	movlb	0	; () banked
 10191  002FFA  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10192  002FFC  0100               	movlb	0	; () banked
 10193  002FFE  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
 10194  003000  0E26               	movlw	low _IR2
 10195  003002  0100               	movlb	0	; () banked
 10196  003004  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
 10197  003006  6ED9               	movwf	fsr2l,c
 10198  003008  0E01               	movlw	high _IR2
 10199  00300A  0100               	movlb	0	; () banked
 10200  00300C  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
 10201  00300E  6EDA               	movwf	fsr2h,c
 10202  003010  0100               	movlb	0	; () banked
 10203  003012  5186               	movf	read_sensors@i& (0+255),w,b
 10204  003014  0D02               	mullw	2
 10205  003016  0E26               	movlw	low _IR2
 10206  003018  24F3               	addwf	prodl,w,c
 10207  00301A  6EE1               	movwf	fsr1l,c
 10208  00301C  0E01               	movlw	high _IR2
 10209  00301E  20F4               	addwfc	prodh,w,c
 10210  003020  6EE2               	movwf	fsr1h,c
 10211  003022  CFDE FFE6          	movff	postinc2,postinc1
 10212  003026  CFDD FFE5          	movff	postdec2,postdec1
 10213                           
 10214                           ; BSR set to: 0
 10215  00302A  0100               	movlb	0	; () banked
 10216  00302C  0786               	decf	read_sensors@i& (0+255),f,b
 10217  00302E  D71C               	goto	L4
 10218  003030                     l5529:
 10219                           
 10220                           ; BSR set to: 0
 10221                           ;main.c: 502: }
 10222                           ;main.c: 507: readADC(DIST1_PIN);
 10223  003030  506A               	movf	_DIST1_PIN,w,c
 10224  003032  EC5E  F01E         	call	_readADC
 10225                           
 10226                           ;main.c: 508: DIST1[0]=16*16*ADRESH+ADRESL;
 10227  003036  50C4               	movf	4036,w,c	;volatile
 10228  003038  0100               	movlb	0	; () banked
 10229  00303A  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10230  00303C  6B82               	clrf	??_read_sensors& (0+255),b
 10231  00303E  50C3               	movf	4035,w,c	;volatile
 10232  003040  0100               	movlb	0	; () banked
 10233  003042  2582               	addwf	??_read_sensors& (0+255),w,b
 10234  003044  0101               	movlb	1	; () banked
 10235  003046  6F1C               	movwf	_DIST1& (0+255),b
 10236  003048  0E00               	movlw	0
 10237  00304A  0100               	movlb	0	; () banked
 10238  00304C  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
 10239  00304E  0101               	movlb	1	; () banked
 10240  003050  6F1D               	movwf	(_DIST1+1)& (0+255),b
 10241                           
 10242                           ; BSR set to: 1
 10243                           ;main.c: 509: readADC(IR1_PIN);
 10244  003052  506F               	movf	_IR1_PIN,w,c
 10245  003054  EC5E  F01E         	call	_readADC
 10246                           
 10247                           ;main.c: 510: IR1[0]=16*16*ADRESH+ADRESL;
 10248  003058  50C4               	movf	4036,w,c	;volatile
 10249  00305A  0100               	movlb	0	; () banked
 10250  00305C  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10251  00305E  6B82               	clrf	??_read_sensors& (0+255),b
 10252  003060  50C3               	movf	4035,w,c	;volatile
 10253  003062  0100               	movlb	0	; () banked
 10254  003064  2582               	addwf	??_read_sensors& (0+255),w,b
 10255  003066  6E4C               	movwf	_IR1,c
 10256  003068  0E00               	movlw	0
 10257  00306A  0100               	movlb	0	; () banked
 10258  00306C  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
 10259  00306E  6E4D               	movwf	_IR1+1,c
 10260                           
 10261                           ; BSR set to: 0
 10262                           ;main.c: 511: readADC(IR2_PIN);
 10263  003070  5070               	movf	_IR2_PIN,w,c
 10264  003072  EC5E  F01E         	call	_readADC
 10265                           
 10266                           ;main.c: 512: IR2[0]=16*16*ADRESH+ADRESL;
 10267  003076  50C4               	movf	4036,w,c	;volatile
 10268  003078  0100               	movlb	0	; () banked
 10269  00307A  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10270  00307C  6B82               	clrf	??_read_sensors& (0+255),b
 10271  00307E  50C3               	movf	4035,w,c	;volatile
 10272  003080  0100               	movlb	0	; () banked
 10273  003082  2582               	addwf	??_read_sensors& (0+255),w,b
 10274  003084  0101               	movlb	1	; () banked
 10275  003086  6F26               	movwf	_IR2& (0+255),b
 10276  003088  0E00               	movlw	0
 10277  00308A  0100               	movlb	0	; () banked
 10278  00308C  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
 10279  00308E  0101               	movlb	1	; () banked
 10280  003090  6F27               	movwf	(_IR2+1)& (0+255),b
 10281                           
 10282                           ; BSR set to: 1
 10283                           ;main.c: 514: PROX1[0]=(PORTB>>PROX1_PIN)&1;
 10284  003092  C06B  F082         	movff	_PROX1_PIN,??_read_sensors
 10285  003096  CF81 F083          	movff	3969,??_read_sensors+1	;volatile
 10286  00309A  0100               	movlb	0	; () banked
 10287  00309C  2B82               	incf	??_read_sensors& (0+255),f,b
 10288  00309E  D003               	goto	u8024
 10289  0030A0                     u8025:
 10290  0030A0  0100               	movlb	0	; () banked
 10291  0030A2  90D8               	bcf	status,0,c
 10292  0030A4  3383               	rrcf	(??_read_sensors+1)& (0+255),f,b
 10293  0030A6                     u8024:
 10294  0030A6  0100               	movlb	0	; () banked
 10295  0030A8  2F82               	decfsz	??_read_sensors& (0+255),f,b
 10296  0030AA  D7FA               	goto	u8025
 10297  0030AC  0E01               	movlw	1
 10298  0030AE  0100               	movlb	0	; () banked
 10299  0030B0  1783               	andwf	(??_read_sensors+1)& (0+255),f,b
 10300  0030B2  0100               	movlb	0	; () banked
 10301  0030B4  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10302  0030B6  6E56               	movwf	_PROX1,c
 10303  0030B8  6A57               	clrf	_PROX1+1,c
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;main.c: 515: PROX2[0]=(PORTB>>PROX2_PIN)&1;
 10307  0030BA  C071  F082         	movff	_PROX2_PIN,??_read_sensors
 10308  0030BE  CF81 F083          	movff	3969,??_read_sensors+1	;volatile
 10309  0030C2  0100               	movlb	0	; () banked
 10310  0030C4  2B82               	incf	??_read_sensors& (0+255),f,b
 10311  0030C6  D003               	goto	u8034
 10312  0030C8                     u8035:
 10313  0030C8  0100               	movlb	0	; () banked
 10314  0030CA  90D8               	bcf	status,0,c
 10315  0030CC  3383               	rrcf	(??_read_sensors+1)& (0+255),f,b
 10316  0030CE                     u8034:
 10317  0030CE  0100               	movlb	0	; () banked
 10318  0030D0  2F82               	decfsz	??_read_sensors& (0+255),f,b
 10319  0030D2  D7FA               	goto	u8035
 10320  0030D4  0E01               	movlw	1
 10321  0030D6  0100               	movlb	0	; () banked
 10322  0030D8  1783               	andwf	(??_read_sensors+1)& (0+255),f,b
 10323  0030DA  0100               	movlb	0	; () banked
 10324  0030DC  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10325  0030DE  6E60               	movwf	_PROX2,c
 10326  0030E0  6A61               	clrf	_PROX2+1,c
 10327                           
 10328                           ; BSR set to: 0
 10329  0030E2  0012               	return		;funcret
 10330  0030E4                     __end_of_read_sensors:
 10331                           	opt stack 0
 10332                           tosu	equ	0xFFF
 10333                           tosh	equ	0xFFE
 10334                           tosl	equ	0xFFD
 10335                           pclath	equ	0xFFA
 10336                           tblptru	equ	0xFF8
 10337                           tblptrh	equ	0xFF7
 10338                           tblptrl	equ	0xFF6
 10339                           tablat	equ	0xFF5
 10340                           prodh	equ	0xFF4
 10341                           prodl	equ	0xFF3
 10342                           intcon	equ	0xFF2
 10343                           intcon2	equ	0xFF1
 10344                           intcon3	equ	0xFF0
 10345                           indf0	equ	0xFEF
 10346                           postinc0	equ	0xFEE
 10347                           fsr0h	equ	0xFEA
 10348                           fsr0l	equ	0xFE9
 10349                           wreg	equ	0xFE8
 10350                           indf1	equ	0xFE7
 10351                           postinc1	equ	0xFE6
 10352                           postdec1	equ	0xFE5
 10353                           fsr1h	equ	0xFE2
 10354                           fsr1l	equ	0xFE1
 10355                           indf2	equ	0xFDF
 10356                           postinc2	equ	0xFDE
 10357                           postdec2	equ	0xFDD
 10358                           fsr2h	equ	0xFDA
 10359                           fsr2l	equ	0xFD9
 10360                           status	equ	0xFD8
 10361                           
 10362 ;; *************** function _readADC *****************
 10363 ;; Defined at:
 10364 ;;		line 714 in file "main.c"
 10365 ;; Parameters:    Size  Location     Type
 10366 ;;  channel         1    wreg     unsigned char 
 10367 ;; Auto vars:     Size  Location     Type
 10368 ;;  channel         1    1[BANK0 ] unsigned char 
 10369 ;; Return value:  Size  Location     Type
 10370 ;;                  1    wreg      void 
 10371 ;; Registers used:
 10372 ;;		wreg, status,2, status,0, cstack
 10373 ;; Tracked objects:
 10374 ;;		On entry : 0/0
 10375 ;;		On exit  : 0/0
 10376 ;;		Unchanged: 0/0
 10377 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10378 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10379 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10380 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10381 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10382 ;;Total ram usage:        2 bytes
 10383 ;; Hardware stack levels used:    1
 10384 ;; Hardware stack levels required when called:    5
 10385 ;; This function calls:
 10386 ;;		Nothing
 10387 ;; This function is called by:
 10388 ;;		_read_sensors
 10389 ;; This function uses a non-reentrant model
 10390 ;;
 10391                           
 10392                           	psect	text27
 10393  003CBC                     __ptext27:
 10394                           	opt stack 0
 10395  003CBC                     _readADC:
 10396                           	opt stack 24
 10397                           
 10398                           ; BSR set to: 0
 10399                           ;incstack = 0
 10400                           ;readADC@channel stored from wreg
 10401  003CBC  0100               	movlb	0	; () banked
 10402  003CBE  6F81               	movwf	readADC@channel& (0+255),b
 10403                           
 10404                           ;main.c: 716: ADCON0 = ((channel <<2));
 10405  003CC0  0100               	movlb	0	; () banked
 10406  003CC2  4581               	rlncf	readADC@channel& (0+255),w,b
 10407  003CC4  46E8               	rlncf	wreg,f,c
 10408  003CC6  0BFC               	andlw	252
 10409  003CC8  6EC2               	movwf	4034,c	;volatile
 10410                           
 10411                           ; BSR set to: 0
 10412                           ;main.c: 717: ADON = 1;
 10413  003CCA  80C2               	bsf	4034,0,c	;volatile
 10414                           
 10415                           ; BSR set to: 0
 10416                           ;main.c: 718: ADCON0bits.GO = 1;
 10417  003CCC  82C2               	bsf	4034,1,c	;volatile
 10418                           
 10419                           ;main.c: 719: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(10000000/4000.0)
      +                          ));}
 10420  003CCE  D009               	goto	l5155
 10421  003CD0                     l5153:
 10422  003CD0  0E11               	movlw	17
 10423  003CD2  0100               	movlb	0	; () banked
 10424  003CD4  6F80               	movwf	??_readADC& (0+255),b
 10425  003CD6  0E3A               	movlw	58
 10426  003CD8                     u14307:
 10427  003CD8  2EE8               	decfsz	wreg,f,c
 10428  003CDA  D7FE               	bra	u14307
 10429  003CDC  2F80               	decfsz	??_readADC& (0+255),f,b
 10430  003CDE  D7FC               	bra	u14307
 10431  003CE0  F000               	nop	
 10432  003CE2                     l5155:
 10433  003CE2  A2C2               	btfss	4034,1,c	;volatile
 10434  003CE4  0012               	return	
 10435  003CE6  D7F4               	goto	l5153
 10436  003CE8                     __end_of_readADC:
 10437                           	opt stack 0
 10438                           tosu	equ	0xFFF
 10439                           tosh	equ	0xFFE
 10440                           tosl	equ	0xFFD
 10441                           pclath	equ	0xFFA
 10442                           tblptru	equ	0xFF8
 10443                           tblptrh	equ	0xFF7
 10444                           tblptrl	equ	0xFF6
 10445                           tablat	equ	0xFF5
 10446                           prodh	equ	0xFF4
 10447                           prodl	equ	0xFF3
 10448                           intcon	equ	0xFF2
 10449                           intcon2	equ	0xFF1
 10450                           intcon3	equ	0xFF0
 10451                           indf0	equ	0xFEF
 10452                           postinc0	equ	0xFEE
 10453                           fsr0h	equ	0xFEA
 10454                           fsr0l	equ	0xFE9
 10455                           wreg	equ	0xFE8
 10456                           indf1	equ	0xFE7
 10457                           postinc1	equ	0xFE6
 10458                           postdec1	equ	0xFE5
 10459                           fsr1h	equ	0xFE2
 10460                           fsr1l	equ	0xFE1
 10461                           indf2	equ	0xFDF
 10462                           postinc2	equ	0xFDE
 10463                           postdec2	equ	0xFDD
 10464                           fsr2h	equ	0xFDA
 10465                           fsr2l	equ	0xFD9
 10466                           status	equ	0xFD8
 10467                           
 10468 ;; *************** function _initLCD *****************
 10469 ;; Defined at:
 10470 ;;		line 14 in file "lcd.c"
 10471 ;; Parameters:    Size  Location     Type
 10472 ;;		None
 10473 ;; Auto vars:     Size  Location     Type
 10474 ;;		None
 10475 ;; Return value:  Size  Location     Type
 10476 ;;                  1    wreg      void 
 10477 ;; Registers used:
 10478 ;;		wreg, status,2, status,0, cstack
 10479 ;; Tracked objects:
 10480 ;;		On entry : 0/0
 10481 ;;		On exit  : 0/0
 10482 ;;		Unchanged: 0/0
 10483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10485 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10486 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10487 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10488 ;;Total ram usage:        1 bytes
 10489 ;; Hardware stack levels used:    1
 10490 ;; Hardware stack levels required when called:    7
 10491 ;; This function calls:
 10492 ;;		_lcdInst
 10493 ;; This function is called by:
 10494 ;;		_main
 10495 ;; This function uses a non-reentrant model
 10496 ;;
 10497                           
 10498                           	psect	text28
 10499  003B64                     __ptext28:
 10500                           	opt stack 0
 10501  003B64                     _initLCD:
 10502                           	opt stack 23
 10503                           
 10504                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
 10505                           
 10506                           ;incstack = 0
 10507  003B64  0E31               	movlw	49
 10508  003B66  0100               	movlb	0	; () banked
 10509  003B68  6F83               	movwf	??_initLCD& (0+255),b
 10510  003B6A  0EB2               	movlw	178
 10511  003B6C                     u14317:
 10512  003B6C  2EE8               	decfsz	wreg,f,c
 10513  003B6E  D7FE               	bra	u14317
 10514  003B70  2F83               	decfsz	??_initLCD& (0+255),f,b
 10515  003B72  D7FC               	bra	u14317
 10516  003B74  F000               	nop	
 10517                           
 10518                           ;lcd.c: 16: lcdInst(0b00110011);
 10519  003B76  0E33               	movlw	51
 10520  003B78  ECCE  F01E         	call	_lcdInst
 10521                           
 10522                           ;lcd.c: 17: lcdInst(0b00110010);
 10523  003B7C  0E32               	movlw	50
 10524  003B7E  ECCE  F01E         	call	_lcdInst
 10525                           
 10526                           ;lcd.c: 18: lcdInst(0b00101000);
 10527  003B82  0E28               	movlw	40
 10528  003B84  ECCE  F01E         	call	_lcdInst
 10529                           
 10530                           ;lcd.c: 19: lcdInst(0b00001111);
 10531  003B88  0E0F               	movlw	15
 10532  003B8A  ECCE  F01E         	call	_lcdInst
 10533                           
 10534                           ;lcd.c: 20: lcdInst(0b00000110);
 10535  003B8E  0E06               	movlw	6
 10536  003B90  ECCE  F01E         	call	_lcdInst
 10537                           
 10538                           ;lcd.c: 21: lcdInst(0b00000001);
 10539  003B94  0E01               	movlw	1
 10540  003B96  ECCE  F01E         	call	_lcdInst
 10541                           
 10542                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
 10543  003B9A  0E31               	movlw	49
 10544  003B9C  0100               	movlb	0	; () banked
 10545  003B9E  6F83               	movwf	??_initLCD& (0+255),b
 10546  003BA0  0EB2               	movlw	178
 10547  003BA2                     u14327:
 10548  003BA2  2EE8               	decfsz	wreg,f,c
 10549  003BA4  D7FE               	bra	u14327
 10550  003BA6  2F83               	decfsz	??_initLCD& (0+255),f,b
 10551  003BA8  D7FC               	bra	u14327
 10552  003BAA  F000               	nop	
 10553  003BAC  0012               	return		;funcret
 10554  003BAE                     __end_of_initLCD:
 10555                           	opt stack 0
 10556                           tosu	equ	0xFFF
 10557                           tosh	equ	0xFFE
 10558                           tosl	equ	0xFFD
 10559                           pclath	equ	0xFFA
 10560                           tblptru	equ	0xFF8
 10561                           tblptrh	equ	0xFF7
 10562                           tblptrl	equ	0xFF6
 10563                           tablat	equ	0xFF5
 10564                           prodh	equ	0xFF4
 10565                           prodl	equ	0xFF3
 10566                           intcon	equ	0xFF2
 10567                           intcon2	equ	0xFF1
 10568                           intcon3	equ	0xFF0
 10569                           indf0	equ	0xFEF
 10570                           postinc0	equ	0xFEE
 10571                           fsr0h	equ	0xFEA
 10572                           fsr0l	equ	0xFE9
 10573                           wreg	equ	0xFE8
 10574                           indf1	equ	0xFE7
 10575                           postinc1	equ	0xFE6
 10576                           postdec1	equ	0xFE5
 10577                           fsr1h	equ	0xFE2
 10578                           fsr1l	equ	0xFE1
 10579                           indf2	equ	0xFDF
 10580                           postinc2	equ	0xFDE
 10581                           postdec2	equ	0xFDD
 10582                           fsr2h	equ	0xFDA
 10583                           fsr2l	equ	0xFD9
 10584                           status	equ	0xFD8
 10585                           
 10586 ;; *************** function _lcdInst *****************
 10587 ;; Defined at:
 10588 ;;		line 25 in file "lcd.c"
 10589 ;; Parameters:    Size  Location     Type
 10590 ;;  data            1    wreg     unsigned char 
 10591 ;; Auto vars:     Size  Location     Type
 10592 ;;  data            1    2[BANK0 ] unsigned char 
 10593 ;; Return value:  Size  Location     Type
 10594 ;;                  1    wreg      void 
 10595 ;; Registers used:
 10596 ;;		wreg, status,2, status,0, cstack
 10597 ;; Tracked objects:
 10598 ;;		On entry : 0/0
 10599 ;;		On exit  : 0/0
 10600 ;;		Unchanged: 0/0
 10601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10605 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10606 ;;Total ram usage:        1 bytes
 10607 ;; Hardware stack levels used:    1
 10608 ;; Hardware stack levels required when called:    6
 10609 ;; This function calls:
 10610 ;;		_lcdNibble
 10611 ;; This function is called by:
 10612 ;;		_initLCD
 10613 ;;		_update_lcd
 10614 ;; This function uses a non-reentrant model
 10615 ;;
 10616                           
 10617                           	psect	text29
 10618  003D9C                     __ptext29:
 10619                           	opt stack 0
 10620  003D9C                     _lcdInst:
 10621                           	opt stack 23
 10622                           
 10623                           ;incstack = 0
 10624                           ;lcdInst@data stored from wreg
 10625  003D9C  0100               	movlb	0	; () banked
 10626  003D9E  6F82               	movwf	lcdInst@data& (0+255),b
 10627                           
 10628                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 10629  003DA0  948C               	bcf	3980,2,c	;volatile
 10630                           
 10631                           ;lcd.c: 27: lcdNibble(data);
 10632  003DA2  0100               	movlb	0	; () banked
 10633  003DA4  5182               	movf	lcdInst@data& (0+255),w,b
 10634  003DA6  EC1F  F01C         	call	_lcdNibble
 10635  003DAA  0012               	return		;funcret
 10636  003DAC                     __end_of_lcdInst:
 10637                           	opt stack 0
 10638                           tosu	equ	0xFFF
 10639                           tosh	equ	0xFFE
 10640                           tosl	equ	0xFFD
 10641                           pclath	equ	0xFFA
 10642                           tblptru	equ	0xFF8
 10643                           tblptrh	equ	0xFF7
 10644                           tblptrl	equ	0xFF6
 10645                           tablat	equ	0xFF5
 10646                           prodh	equ	0xFF4
 10647                           prodl	equ	0xFF3
 10648                           intcon	equ	0xFF2
 10649                           intcon2	equ	0xFF1
 10650                           intcon3	equ	0xFF0
 10651                           indf0	equ	0xFEF
 10652                           postinc0	equ	0xFEE
 10653                           fsr0h	equ	0xFEA
 10654                           fsr0l	equ	0xFE9
 10655                           wreg	equ	0xFE8
 10656                           indf1	equ	0xFE7
 10657                           postinc1	equ	0xFE6
 10658                           postdec1	equ	0xFE5
 10659                           fsr1h	equ	0xFE2
 10660                           fsr1l	equ	0xFE1
 10661                           indf2	equ	0xFDF
 10662                           postinc2	equ	0xFDE
 10663                           postdec2	equ	0xFDD
 10664                           fsr2h	equ	0xFDA
 10665                           fsr2l	equ	0xFD9
 10666                           status	equ	0xFD8
 10667                           
 10668 ;; *************** function _lcdNibble *****************
 10669 ;; Defined at:
 10670 ;;		line 35 in file "lcd.c"
 10671 ;; Parameters:    Size  Location     Type
 10672 ;;  data            1    wreg     unsigned char 
 10673 ;; Auto vars:     Size  Location     Type
 10674 ;;  data            1    1[BANK0 ] unsigned char 
 10675 ;;  temp            1    0[BANK0 ] unsigned char 
 10676 ;; Return value:  Size  Location     Type
 10677 ;;                  1    wreg      void 
 10678 ;; Registers used:
 10679 ;;		wreg, status,2, status,0
 10680 ;; Tracked objects:
 10681 ;;		On entry : 0/0
 10682 ;;		On exit  : 0/0
 10683 ;;		Unchanged: 0/0
 10684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10685 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10686 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10688 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10689 ;;Total ram usage:        2 bytes
 10690 ;; Hardware stack levels used:    1
 10691 ;; Hardware stack levels required when called:    5
 10692 ;; This function calls:
 10693 ;;		Nothing
 10694 ;; This function is called by:
 10695 ;;		_lcdInst
 10696 ;;		_putch
 10697 ;; This function uses a non-reentrant model
 10698 ;;
 10699                           
 10700                           	psect	text30
 10701  00383E                     __ptext30:
 10702                           	opt stack 0
 10703  00383E                     _lcdNibble:
 10704                           	opt stack 21
 10705                           
 10706                           ;incstack = 0
 10707                           ;lcdNibble@data stored from wreg
 10708  00383E  0100               	movlb	0	; () banked
 10709  003840  6F81               	movwf	lcdNibble@data& (0+255),b
 10710                           
 10711                           ;lcd.c: 37: char temp = data & 0xF0;
 10712  003842  0100               	movlb	0	; () banked
 10713  003844  5181               	movf	lcdNibble@data& (0+255),w,b
 10714  003846  0BF0               	andlw	240
 10715  003848  0100               	movlb	0	; () banked
 10716  00384A  6F80               	movwf	lcdNibble@temp& (0+255),b
 10717                           
 10718                           ;lcd.c: 38: LATD = LATD & 0x0F;
 10719  00384C  508C               	movf	3980,w,c	;volatile
 10720  00384E  0B0F               	andlw	15
 10721  003850  6E8C               	movwf	3980,c	;volatile
 10722                           
 10723                           ;lcd.c: 39: LATD = temp | LATD;
 10724  003852  0100               	movlb	0	; () banked
 10725  003854  5180               	movf	lcdNibble@temp& (0+255),w,b
 10726  003856  108C               	iorwf	3980,w,c	;volatile
 10727  003858  6E8C               	movwf	3980,c	;volatile
 10728                           
 10729                           ; BSR set to: 0
 10730                           ;lcd.c: 41: LATDbits.LATD3 = 0;
 10731  00385A  968C               	bcf	3980,3,c	;volatile
 10732                           
 10733                           ; BSR set to: 0
 10734                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
 10735  00385C  0E14               	movlw	20
 10736  00385E                     u14337:
 10737  00385E  2EE8               	decfsz	wreg,f,c
 10738  003860  D7FE               	bra	u14337
 10739  003862  D000               	nop2	
 10740                           
 10741                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 10742  003864  868C               	bsf	3980,3,c	;volatile
 10743                           
 10744                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
 10745  003866  0E14               	movlw	20
 10746  003868                     u14347:
 10747  003868  2EE8               	decfsz	wreg,f,c
 10748  00386A  D7FE               	bra	u14347
 10749  00386C  D000               	nop2	
 10750                           
 10751                           ;lcd.c: 46: data = data << 4;
 10752  00386E  0100               	movlb	0	; () banked
 10753  003870  3981               	swapf	lcdNibble@data& (0+255),w,b
 10754  003872  0BF0               	andlw	240
 10755  003874  0100               	movlb	0	; () banked
 10756  003876  6F81               	movwf	lcdNibble@data& (0+255),b
 10757                           
 10758                           ;lcd.c: 48: temp = data & 0xF0;
 10759  003878  0100               	movlb	0	; () banked
 10760  00387A  5181               	movf	lcdNibble@data& (0+255),w,b
 10761  00387C  0BF0               	andlw	240
 10762  00387E  0100               	movlb	0	; () banked
 10763  003880  6F80               	movwf	lcdNibble@temp& (0+255),b
 10764                           
 10765                           ;lcd.c: 49: LATD = LATD & 0x0F;
 10766  003882  508C               	movf	3980,w,c	;volatile
 10767  003884  0B0F               	andlw	15
 10768  003886  6E8C               	movwf	3980,c	;volatile
 10769                           
 10770                           ;lcd.c: 50: LATD = temp | LATD;
 10771  003888  0100               	movlb	0	; () banked
 10772  00388A  5180               	movf	lcdNibble@temp& (0+255),w,b
 10773  00388C  108C               	iorwf	3980,w,c	;volatile
 10774  00388E  6E8C               	movwf	3980,c	;volatile
 10775                           
 10776                           ; BSR set to: 0
 10777                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 10778  003890  968C               	bcf	3980,3,c	;volatile
 10779                           
 10780                           ; BSR set to: 0
 10781                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
 10782  003892  0E14               	movlw	20
 10783  003894                     u14357:
 10784  003894  2EE8               	decfsz	wreg,f,c
 10785  003896  D7FE               	bra	u14357
 10786  003898  D000               	nop2	
 10787                           
 10788                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 10789  00389A  868C               	bsf	3980,3,c	;volatile
 10790                           
 10791                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
 10792  00389C  0E14               	movlw	20
 10793  00389E                     u14367:
 10794  00389E  2EE8               	decfsz	wreg,f,c
 10795  0038A0  D7FE               	bra	u14367
 10796  0038A2  D000               	nop2	
 10797  0038A4  0012               	return		;funcret
 10798  0038A6                     __end_of_lcdNibble:
 10799                           	opt stack 0
 10800                           tosu	equ	0xFFF
 10801                           tosh	equ	0xFFE
 10802                           tosl	equ	0xFFD
 10803                           pclath	equ	0xFFA
 10804                           tblptru	equ	0xFF8
 10805                           tblptrh	equ	0xFF7
 10806                           tblptrl	equ	0xFF6
 10807                           tablat	equ	0xFF5
 10808                           prodh	equ	0xFF4
 10809                           prodl	equ	0xFF3
 10810                           intcon	equ	0xFF2
 10811                           intcon2	equ	0xFF1
 10812                           intcon3	equ	0xFF0
 10813                           indf0	equ	0xFEF
 10814                           postinc0	equ	0xFEE
 10815                           fsr0h	equ	0xFEA
 10816                           fsr0l	equ	0xFE9
 10817                           wreg	equ	0xFE8
 10818                           indf1	equ	0xFE7
 10819                           postinc1	equ	0xFE6
 10820                           postdec1	equ	0xFE5
 10821                           fsr1h	equ	0xFE2
 10822                           fsr1l	equ	0xFE1
 10823                           indf2	equ	0xFDF
 10824                           postinc2	equ	0xFDE
 10825                           postdec2	equ	0xFDD
 10826                           fsr2h	equ	0xFDA
 10827                           fsr2l	equ	0xFD9
 10828                           status	equ	0xFD8
 10829                           
 10830 ;; *************** function _I2C_Master_Init *****************
 10831 ;; Defined at:
 10832 ;;		line 13 in file "I2C.c"
 10833 ;; Parameters:    Size  Location     Type
 10834 ;;  c               4   13[BANK0 ] const unsigned long 
 10835 ;; Auto vars:     Size  Location     Type
 10836 ;;		None
 10837 ;; Return value:  Size  Location     Type
 10838 ;;                  1    wreg      void 
 10839 ;; Registers used:
 10840 ;;		wreg, status,2, status,0, cstack
 10841 ;; Tracked objects:
 10842 ;;		On entry : 0/0
 10843 ;;		On exit  : 0/0
 10844 ;;		Unchanged: 0/0
 10845 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10846 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10847 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10848 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10849 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10850 ;;Total ram usage:        8 bytes
 10851 ;; Hardware stack levels used:    1
 10852 ;; Hardware stack levels required when called:    6
 10853 ;; This function calls:
 10854 ;;		___lldiv
 10855 ;; This function is called by:
 10856 ;;		_main
 10857 ;; This function uses a non-reentrant model
 10858 ;;
 10859                           
 10860                           	psect	text31
 10861  00396A                     __ptext31:
 10862                           	opt stack 0
 10863  00396A                     _I2C_Master_Init:
 10864                           	opt stack 24
 10865                           
 10866                           ;I2C.c: 16: SSPSTAT = 0b00000000;
 10867                           
 10868                           ;incstack = 0
 10869  00396A  0E00               	movlw	0
 10870  00396C  6EC7               	movwf	4039,c	;volatile
 10871                           
 10872                           ;I2C.c: 17: SSPCON1 = 0b00101000;
 10873  00396E  0E28               	movlw	40
 10874  003970  6EC6               	movwf	4038,c	;volatile
 10875                           
 10876                           ;I2C.c: 18: SSPCON2 = 0b00000000;
 10877  003972  0E00               	movlw	0
 10878  003974  6EC5               	movwf	4037,c	;volatile
 10879                           
 10880                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
 10881  003976  0E80               	movlw	128
 10882  003978  0100               	movlb	0	; () banked
 10883  00397A  6F80               	movwf	___lldiv@dividend& (0+255),b
 10884  00397C  0E96               	movlw	150
 10885  00397E  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 10886  003980  0E98               	movlw	152
 10887  003982  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 10888  003984  0E00               	movlw	0
 10889  003986  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 10890  003988  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 10891  00398C  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 10892  003990  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 10893  003994  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 10894  003998  0E02               	movlw	2
 10895  00399A                     u7935:
 10896  00399A  90D8               	bcf	status,0,c
 10897  00399C  0100               	movlb	0	; () banked
 10898  00399E  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 10899  0039A0  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 10900  0039A2  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 10901  0039A4  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 10902  0039A6  2EE8               	decfsz	wreg,f,c
 10903  0039A8  D7F8               	goto	u7935
 10904  0039AA  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 10905  0039AE  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 10906  0039B2  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 10907  0039B6  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 10908  0039BA  EC5D  F01A         	call	___lldiv	;wreg free
 10909  0039BE  0100               	movlb	0	; () banked
 10910  0039C0  0580               	decf	?___lldiv& (0+255),w,b
 10911  0039C2  6EC8               	movwf	4040,c	;volatile
 10912                           
 10913                           ; BSR set to: 0
 10914                           ;I2C.c: 20: TRISC3 = 1;
 10915  0039C4  8694               	bsf	3988,3,c	;volatile
 10916                           
 10917                           ; BSR set to: 0
 10918                           ;I2C.c: 21: TRISC4 = 1;
 10919  0039C6  8894               	bsf	3988,4,c	;volatile
 10920                           
 10921                           ; BSR set to: 0
 10922  0039C8  0012               	return		;funcret
 10923  0039CA                     __end_of_I2C_Master_Init:
 10924                           	opt stack 0
 10925                           tosu	equ	0xFFF
 10926                           tosh	equ	0xFFE
 10927                           tosl	equ	0xFFD
 10928                           pclath	equ	0xFFA
 10929                           tblptru	equ	0xFF8
 10930                           tblptrh	equ	0xFF7
 10931                           tblptrl	equ	0xFF6
 10932                           tablat	equ	0xFF5
 10933                           prodh	equ	0xFF4
 10934                           prodl	equ	0xFF3
 10935                           intcon	equ	0xFF2
 10936                           intcon2	equ	0xFF1
 10937                           intcon3	equ	0xFF0
 10938                           indf0	equ	0xFEF
 10939                           postinc0	equ	0xFEE
 10940                           fsr0h	equ	0xFEA
 10941                           fsr0l	equ	0xFE9
 10942                           wreg	equ	0xFE8
 10943                           indf1	equ	0xFE7
 10944                           postinc1	equ	0xFE6
 10945                           postdec1	equ	0xFE5
 10946                           fsr1h	equ	0xFE2
 10947                           fsr1l	equ	0xFE1
 10948                           indf2	equ	0xFDF
 10949                           postinc2	equ	0xFDE
 10950                           postdec2	equ	0xFDD
 10951                           fsr2h	equ	0xFDA
 10952                           fsr2l	equ	0xFD9
 10953                           status	equ	0xFD8
 10954                           
 10955 ;; *************** function ___lldiv *****************
 10956 ;; Defined at:
 10957 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 10958 ;; Parameters:    Size  Location     Type
 10959 ;;  dividend        4    0[BANK0 ] unsigned long 
 10960 ;;  divisor         4    4[BANK0 ] unsigned long 
 10961 ;; Auto vars:     Size  Location     Type
 10962 ;;  quotient        4    8[BANK0 ] unsigned long 
 10963 ;;  counter         1   12[BANK0 ] unsigned char 
 10964 ;; Return value:  Size  Location     Type
 10965 ;;                  4    0[BANK0 ] unsigned long 
 10966 ;; Registers used:
 10967 ;;		wreg, status,2, status,0
 10968 ;; Tracked objects:
 10969 ;;		On entry : 0/0
 10970 ;;		On exit  : 0/0
 10971 ;;		Unchanged: 0/0
 10972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10973 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10974 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10975 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10976 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10977 ;;Total ram usage:       13 bytes
 10978 ;; Hardware stack levels used:    1
 10979 ;; Hardware stack levels required when called:    5
 10980 ;; This function calls:
 10981 ;;		Nothing
 10982 ;; This function is called by:
 10983 ;;		_I2C_Master_Init
 10984 ;; This function uses a non-reentrant model
 10985 ;;
 10986                           
 10987                           	psect	text32
 10988  0034BA                     __ptext32:
 10989                           	opt stack 0
 10990  0034BA                     ___lldiv:
 10991                           	opt stack 24
 10992                           
 10993                           ; BSR set to: 0
 10994                           ;incstack = 0
 10995  0034BA  0E00               	movlw	0
 10996  0034BC  0100               	movlb	0	; () banked
 10997  0034BE  6F88               	movwf	___lldiv@quotient& (0+255),b
 10998  0034C0  0E00               	movlw	0
 10999  0034C2  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 11000  0034C4  0E00               	movlw	0
 11001  0034C6  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 11002  0034C8  0E00               	movlw	0
 11003  0034CA  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 11004                           
 11005                           ; BSR set to: 0
 11006  0034CC  0100               	movlb	0	; () banked
 11007  0034CE  5184               	movf	___lldiv@divisor& (0+255),w,b
 11008  0034D0  0100               	movlb	0	; () banked
 11009  0034D2  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 11010  0034D4  0100               	movlb	0	; () banked
 11011  0034D6  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 11012  0034D8  0100               	movlb	0	; () banked
 11013  0034DA  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 11014  0034DC  B4D8               	btfsc	status,2,c
 11015  0034DE  D042               	goto	l957
 11016                           
 11017                           ; BSR set to: 0
 11018  0034E0  0E01               	movlw	1
 11019  0034E2  0100               	movlb	0	; () banked
 11020  0034E4  6F8C               	movwf	___lldiv@counter& (0+255),b
 11021  0034E6  D008               	goto	l5209
 11022  0034E8                     l5207:
 11023                           
 11024                           ; BSR set to: 0
 11025  0034E8  0100               	movlb	0	; () banked
 11026  0034EA  90D8               	bcf	status,0,c
 11027  0034EC  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 11028  0034EE  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 11029  0034F0  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 11030  0034F2  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 11031  0034F4  0100               	movlb	0	; () banked
 11032  0034F6  2B8C               	incf	___lldiv@counter& (0+255),f,b
 11033  0034F8                     l5209:
 11034                           
 11035                           ; BSR set to: 0
 11036  0034F8  0100               	movlb	0	; () banked
 11037  0034FA  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 11038  0034FC  D7F5               	goto	l5207
 11039  0034FE                     l5211:
 11040                           
 11041                           ; BSR set to: 0
 11042  0034FE  0100               	movlb	0	; () banked
 11043  003500  90D8               	bcf	status,0,c
 11044  003502  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 11045  003504  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 11046  003506  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 11047  003508  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 11048                           
 11049                           ; BSR set to: 0
 11050  00350A  0100               	movlb	0	; () banked
 11051  00350C  5184               	movf	___lldiv@divisor& (0+255),w,b
 11052  00350E  0100               	movlb	0	; () banked
 11053  003510  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 11054  003512  0100               	movlb	0	; () banked
 11055  003514  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11056  003516  0100               	movlb	0	; () banked
 11057  003518  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 11058  00351A  0100               	movlb	0	; () banked
 11059  00351C  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11060  00351E  0100               	movlb	0	; () banked
 11061  003520  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 11062  003522  0100               	movlb	0	; () banked
 11063  003524  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11064  003526  0100               	movlb	0	; () banked
 11065  003528  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 11066  00352A  A0D8               	btfss	status,0,c
 11067  00352C  D012               	goto	l5219
 11068                           
 11069                           ; BSR set to: 0
 11070  00352E  0100               	movlb	0	; () banked
 11071  003530  5184               	movf	___lldiv@divisor& (0+255),w,b
 11072  003532  0100               	movlb	0	; () banked
 11073  003534  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 11074  003536  0100               	movlb	0	; () banked
 11075  003538  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11076  00353A  0100               	movlb	0	; () banked
 11077  00353C  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 11078  00353E  0100               	movlb	0	; () banked
 11079  003540  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11080  003542  0100               	movlb	0	; () banked
 11081  003544  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 11082  003546  0100               	movlb	0	; () banked
 11083  003548  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11084  00354A  0100               	movlb	0	; () banked
 11085  00354C  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 11086                           
 11087                           ; BSR set to: 0
 11088  00354E  0100               	movlb	0	; () banked
 11089  003550  8188               	bsf	___lldiv@quotient& (0+255),0,b
 11090  003552                     l5219:
 11091                           
 11092                           ; BSR set to: 0
 11093  003552  0100               	movlb	0	; () banked
 11094  003554  90D8               	bcf	status,0,c
 11095  003556  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 11096  003558  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 11097  00355A  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 11098  00355C  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 11099                           
 11100                           ; BSR set to: 0
 11101  00355E  0100               	movlb	0	; () banked
 11102  003560  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 11103  003562  D7CD               	goto	l5211
 11104  003564                     l957:
 11105                           
 11106                           ; BSR set to: 0
 11107  003564  C088  F080         	movff	___lldiv@quotient,?___lldiv
 11108  003568  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 11109  00356C  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 11110  003570  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 11111                           
 11112                           ; BSR set to: 0
 11113  003574  0012               	return		;funcret
 11114  003576                     __end_of___lldiv:
 11115                           	opt stack 0
 11116                           tosu	equ	0xFFF
 11117                           tosh	equ	0xFFE
 11118                           tosl	equ	0xFFD
 11119                           pclath	equ	0xFFA
 11120                           tblptru	equ	0xFF8
 11121                           tblptrh	equ	0xFF7
 11122                           tblptrl	equ	0xFF6
 11123                           tablat	equ	0xFF5
 11124                           prodh	equ	0xFF4
 11125                           prodl	equ	0xFF3
 11126                           intcon	equ	0xFF2
 11127                           intcon2	equ	0xFF1
 11128                           intcon3	equ	0xFF0
 11129                           indf0	equ	0xFEF
 11130                           postinc0	equ	0xFEE
 11131                           fsr0h	equ	0xFEA
 11132                           fsr0l	equ	0xFE9
 11133                           wreg	equ	0xFE8
 11134                           indf1	equ	0xFE7
 11135                           postinc1	equ	0xFE6
 11136                           postdec1	equ	0xFE5
 11137                           fsr1h	equ	0xFE2
 11138                           fsr1l	equ	0xFE1
 11139                           indf2	equ	0xFDF
 11140                           postinc2	equ	0xFDE
 11141                           postdec2	equ	0xFDD
 11142                           fsr2h	equ	0xFDA
 11143                           fsr2l	equ	0xFD9
 11144                           status	equ	0xFD8
 11145                           
 11146 ;; *************** function _keypressed *****************
 11147 ;; Defined at:
 11148 ;;		line 373 in file "main.c"
 11149 ;; Parameters:    Size  Location     Type
 11150 ;;		None
 11151 ;; Auto vars:     Size  Location     Type
 11152 ;;  i               2   58[COMRAM] int 
 11153 ;;  keypress        1   60[COMRAM] unsigned char 
 11154 ;; Return value:  Size  Location     Type
 11155 ;;                  1    wreg      void 
 11156 ;; Registers used:
 11157 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 11158 ;; Tracked objects:
 11159 ;;		On entry : 0/0
 11160 ;;		On exit  : 0/0
 11161 ;;		Unchanged: 0/0
 11162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11164 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11165 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11166 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11167 ;;Total ram usage:       19 bytes
 11168 ;; Hardware stack levels used:    1
 11169 ;; Hardware stack levels required when called:    4
 11170 ;; This function calls:
 11171 ;;		i2___awmod
 11172 ;;		i2_lcdInst
 11173 ;;		i2_printf
 11174 ;; This function is called by:
 11175 ;;		Interrupt level 2
 11176 ;; This function uses a non-reentrant model
 11177 ;;
 11178                           
 11179                           	psect	intcode
 11180  000008                     __pintcode:
 11181                           	opt stack 0
 11182  000008                     _keypressed:
 11183                           	opt stack 20
 11184                           
 11185                           ; BSR set to: 0
 11186                           ;incstack = 0
 11187  000008  8276               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11188  00000A  EDF7  F008         	call	int_func,f	;refresh shadow registers
 11189                           tosu	equ	0xFFF
 11190                           tosh	equ	0xFFE
 11191                           tosl	equ	0xFFD
 11192                           pclath	equ	0xFFA
 11193                           tblptru	equ	0xFF8
 11194                           tblptrh	equ	0xFF7
 11195                           tblptrl	equ	0xFF6
 11196                           tablat	equ	0xFF5
 11197                           prodh	equ	0xFF4
 11198                           prodl	equ	0xFF3
 11199                           intcon	equ	0xFF2
 11200                           intcon2	equ	0xFF1
 11201                           intcon3	equ	0xFF0
 11202                           indf0	equ	0xFEF
 11203                           postinc0	equ	0xFEE
 11204                           fsr0h	equ	0xFEA
 11205                           fsr0l	equ	0xFE9
 11206                           wreg	equ	0xFE8
 11207                           indf1	equ	0xFE7
 11208                           postinc1	equ	0xFE6
 11209                           postdec1	equ	0xFE5
 11210                           fsr1h	equ	0xFE2
 11211                           fsr1l	equ	0xFE1
 11212                           indf2	equ	0xFDF
 11213                           postinc2	equ	0xFDE
 11214                           postdec2	equ	0xFDD
 11215                           fsr2h	equ	0xFDA
 11216                           fsr2l	equ	0xFD9
 11217                           status	equ	0xFD8
 11218                           
 11219                           	psect	intcode_body
 11220  0011EE                     __pintcode_body:
 11221                           	opt stack 20
 11222  0011EE                     int_func:
 11223                           	opt stack 20
 11224  0011EE  0006               	pop		; remove dummy address from shadow register refresh
 11225  0011F0  CFFA F02D          	movff	pclath,??_keypressed+2
 11226  0011F4  CFFB F02E          	movff	pclatu,??_keypressed+3
 11227  0011F8  CFE9 F02F          	movff	fsr0l,??_keypressed+4
 11228  0011FC  CFEA F030          	movff	fsr0h,??_keypressed+5
 11229  001200  CFE1 F031          	movff	fsr1l,??_keypressed+6
 11230  001204  CFE2 F032          	movff	fsr1h,??_keypressed+7
 11231  001208  CFD9 F033          	movff	fsr2l,??_keypressed+8
 11232  00120C  CFDA F034          	movff	fsr2h,??_keypressed+9
 11233  001210  CFF3 F035          	movff	prodl,??_keypressed+10
 11234  001214  CFF4 F036          	movff	prodh,??_keypressed+11
 11235  001218  CFF6 F037          	movff	tblptrl,??_keypressed+12
 11236  00121C  CFF7 F038          	movff	tblptrh,??_keypressed+13
 11237  001220  CFF8 F039          	movff	tblptru,??_keypressed+14
 11238  001224  CFF5 F03A          	movff	tablat,??_keypressed+15
 11239                           
 11240                           ;main.c: 375: if(INT1IF){
 11241  001228  A0F0               	btfss	intcon3,0,c	;volatile
 11242  00122A  D2E9               	goto	i2l416
 11243                           
 11244                           ;main.c: 376: int i;
 11245                           ;main.c: 377: unsigned char keypress = (PORTB & 0xF0) >> 4;
 11246  00122C  3881               	swapf	3969,w,c	;volatile
 11247  00122E  0B0F               	andlw	15
 11248  001230  0B0F               	andlw	15
 11249  001232  6E3D               	movwf	keypressed@keypress,c
 11250                           
 11251                           ;main.c: 378: switch(state)
 11252  001234  D2CE               	goto	i2l8691
 11253  001236                     i2l8525:
 11254                           
 11255                           ;main.c: 380: for (i=0;i<7;i++)
 11256  001236  0E00               	movlw	0
 11257  001238  6E3C               	movwf	keypressed@i+1,c
 11258  00123A  0E00               	movlw	0
 11259  00123C  6E3B               	movwf	keypressed@i,c
 11260  00123E                     i2l8527:
 11261  00123E  BE3C               	btfsc	keypressed@i+1,7,c
 11262  001240  D006               	goto	i2l8531
 11263  001242  503C               	movf	keypressed@i+1,w,c
 11264  001244  E11D               	bnz	i2l8537
 11265  001246  0E07               	movlw	7
 11266  001248  5C3B               	subwf	keypressed@i,w,c
 11267  00124A  B0D8               	btfsc	status,0,c
 11268  00124C  D019               	goto	i2l8537
 11269  00124E                     i2l8531:
 11270                           
 11271                           ;main.c: 381: startTime[i]=time_i[i];
 11272  00124E  90D8               	bcf	status,0,c
 11273  001250  343B               	rlcf	keypressed@i,w,c
 11274  001252  6ED9               	movwf	fsr2l,c
 11275  001254  343C               	rlcf	keypressed@i+1,w,c
 11276  001256  6EDA               	movwf	fsr2h,c
 11277  001258  0E3E               	movlw	low _time_i
 11278  00125A  26D9               	addwf	fsr2l,f,c
 11279  00125C  0E00               	movlw	high _time_i
 11280  00125E  22DA               	addwfc	fsr2h,f,c
 11281  001260  90D8               	bcf	status,0,c
 11282  001262  343B               	rlcf	keypressed@i,w,c
 11283  001264  6EE1               	movwf	fsr1l,c
 11284  001266  343C               	rlcf	keypressed@i+1,w,c
 11285  001268  6EE2               	movwf	fsr1h,c
 11286  00126A  0E0E               	movlw	low _startTime
 11287  00126C  26E1               	addwf	fsr1l,f,c
 11288  00126E  0E01               	movlw	high _startTime
 11289  001270  22E2               	addwfc	fsr1h,f,c
 11290  001272  CFDE FFE6          	movff	postinc2,postinc1
 11291  001276  CFDD FFE5          	movff	postdec2,postdec1
 11292  00127A  4A3B               	infsnz	keypressed@i,f,c
 11293  00127C  2A3C               	incf	keypressed@i+1,f,c
 11294  00127E  D7DF               	goto	i2l8527
 11295  001280                     i2l8537:
 11296                           
 11297                           ;main.c: 382: if (keys[keypress]=='B'&&menuIndex<menuSize)
 11298  001280  503D               	movf	keypressed@keypress,w,c
 11299  001282  0D01               	mullw	1
 11300  001284  0E57               	movlw	low _keys
 11301  001286  24F3               	addwf	prodl,w,c
 11302  001288  6EF6               	movwf	tblptrl,c
 11303  00128A  0EFE               	movlw	high _keys
 11304  00128C  20F4               	addwfc	prodh,w,c
 11305  00128E  6EF7               	movwf	tblptrh,c
 11306  001290                     	if	1	;There are 3 active tblptr bytes
 11307  001290  6AF8               	clrf	tblptru,c
 11308  001292  0E00               	movlw	low (__mediumconst shr (0+16))
 11309  001294  22F8               	addwfc	tblptru,f,c
 11310  001296                     	endif
 11311  001296  0008               	tblrd		*
 11312  001298  50F5               	movf	tablat,w,c
 11313  00129A  0A42               	xorlw	66
 11314  00129C  A4D8               	btfss	status,2,c
 11315  00129E  D012               	goto	i2l8543
 11316  0012A0  0100               	movlb	0	; () banked
 11317  0012A2  51F5               	movf	_menuSize& (0+255),w,b
 11318  0012A4  0100               	movlb	0	; () banked
 11319  0012A6  5DF3               	subwf	_menuIndex& (0+255),w,b
 11320  0012A8  0100               	movlb	0	; () banked
 11321  0012AA  51F4               	movf	(_menuIndex+1)& (0+255),w,b
 11322  0012AC  0A80               	xorlw	128
 11323  0012AE  6E2B               	movwf	??_keypressed& (0+255),c
 11324  0012B0  0100               	movlb	0	; () banked
 11325  0012B2  51F6               	movf	(_menuSize+1)& (0+255),w,b
 11326  0012B4  0A80               	xorlw	128
 11327  0012B6  582B               	subwfb	??_keypressed& (0+255),w,c
 11328  0012B8  B0D8               	btfsc	status,0,c
 11329  0012BA  D004               	goto	i2l8543
 11330                           
 11331                           ; BSR set to: 0
 11332                           ;main.c: 383: menuIndex++;
 11333  0012BC  0100               	movlb	0	; () banked
 11334  0012BE  4BF3               	infsnz	_menuIndex& (0+255),f,b
 11335  0012C0  2BF4               	incf	(_menuIndex+1)& (0+255),f,b
 11336  0012C2  D29C               	goto	i2l375
 11337  0012C4                     i2l8543:
 11338                           
 11339                           ;main.c: 384: else if (keys[keypress]=='A'&&menuIndex>1)
 11340  0012C4  503D               	movf	keypressed@keypress,w,c
 11341  0012C6  0D01               	mullw	1
 11342  0012C8  0E57               	movlw	low _keys
 11343  0012CA  24F3               	addwf	prodl,w,c
 11344  0012CC  6EF6               	movwf	tblptrl,c
 11345  0012CE  0EFE               	movlw	high _keys
 11346  0012D0  20F4               	addwfc	prodh,w,c
 11347  0012D2  6EF7               	movwf	tblptrh,c
 11348  0012D4                     	if	1	;There are 3 active tblptr bytes
 11349  0012D4  6AF8               	clrf	tblptru,c
 11350  0012D6  0E00               	movlw	low (__mediumconst shr (0+16))
 11351  0012D8  22F8               	addwfc	tblptru,f,c
 11352  0012DA                     	endif
 11353  0012DA  0008               	tblrd		*
 11354  0012DC  50F5               	movf	tablat,w,c
 11355  0012DE  0A41               	xorlw	65
 11356  0012E0  A4D8               	btfss	status,2,c
 11357  0012E2  D010               	goto	i2l8549
 11358  0012E4  0100               	movlb	0	; () banked
 11359  0012E6  BFF4               	btfsc	(_menuIndex+1)& (0+255),7,b
 11360  0012E8  D00D               	goto	i2l8549
 11361  0012EA  0100               	movlb	0	; () banked
 11362  0012EC  51F4               	movf	(_menuIndex+1)& (0+255),w,b
 11363  0012EE  E105               	bnz	i2u1397_40
 11364  0012F0  0E02               	movlw	2
 11365  0012F2  0100               	movlb	0	; () banked
 11366  0012F4  5DF3               	subwf	_menuIndex& (0+255),w,b
 11367  0012F6  A0D8               	btfss	status,0,c
 11368  0012F8  D005               	goto	i2l8549
 11369  0012FA                     i2u1397_40:
 11370                           
 11371                           ; BSR set to: 0
 11372                           ;main.c: 385: menuIndex--;
 11373  0012FA  0100               	movlb	0	; () banked
 11374  0012FC  07F3               	decf	_menuIndex& (0+255),f,b
 11375  0012FE  A0D8               	btfss	status,0,c
 11376  001300  07F4               	decf	(_menuIndex+1)& (0+255),f,b
 11377  001302  D27C               	goto	i2l375
 11378  001304                     i2l8549:
 11379                           
 11380                           ;main.c: 386: else if (keys[keypress]=='C'){
 11381  001304  503D               	movf	keypressed@keypress,w,c
 11382  001306  0D01               	mullw	1
 11383  001308  0E57               	movlw	low _keys
 11384  00130A  24F3               	addwf	prodl,w,c
 11385  00130C  6EF6               	movwf	tblptrl,c
 11386  00130E  0EFE               	movlw	high _keys
 11387  001310  20F4               	addwfc	prodh,w,c
 11388  001312  6EF7               	movwf	tblptrh,c
 11389  001314                     	if	1	;There are 3 active tblptr bytes
 11390  001314  6AF8               	clrf	tblptru,c
 11391  001316  0E00               	movlw	low (__mediumconst shr (0+16))
 11392  001318  22F8               	addwfc	tblptru,f,c
 11393  00131A                     	endif
 11394  00131A  0008               	tblrd		*
 11395  00131C  50F5               	movf	tablat,w,c
 11396  00131E  0A43               	xorlw	67
 11397  001320  B4D8               	btfsc	status,2,c
 11398  001322  D01D               	goto	i2l8569
 11399  001324  D26B               	goto	i2l375
 11400  001326                     i2l8553:
 11401  001326  0E73               	movlw	115
 11402  001328  D24A               	goto	L9
 11403  00132A                     i2l8555:
 11404  00132A  0E6C               	movlw	108
 11405  00132C  D248               	goto	L9
 11406  00132E                     i2l8557:
 11407  00132E  0E63               	movlw	99
 11408  001330  D246               	goto	L9
 11409  001332                     i2l8559:
 11410                           
 11411                           ;main.c: 395: lcdInst(0b10000000);;
 11412  001332  0E80               	movlw	128
 11413  001334  ECDC  F01E         	call	i2_lcdInst
 11414                           
 11415                           ;main.c: 396: printf("invalid");
 11416  001338  0EE5               	movlw	low STR_24
 11417  00133A  6E23               	movwf	i2printf@f,c
 11418  00133C  0EFF               	movlw	high STR_24
 11419  00133E  6E24               	movwf	i2printf@f+1,c
 11420  001340  EC13  F01E         	call	i2_printf	;wreg free
 11421                           
 11422                           ;main.c: 397: lcdInst(0b11000000);;
 11423  001344  0EC0               	movlw	192
 11424  001346  ECDC  F01E         	call	i2_lcdInst
 11425                           
 11426                           ;main.c: 398: printf("menu selection");
 11427  00134A  0EA2               	movlw	low STR_25
 11428  00134C  6E23               	movwf	i2printf@f,c
 11429  00134E  0EFF               	movlw	high STR_25
 11430  001350  6E24               	movwf	i2printf@f+1,c
 11431  001352  EC13  F01E         	call	i2_printf	;wreg free
 11432                           
 11433                           ;main.c: 399: lcdInst(0b10010000);;
 11434  001356  0E90               	movlw	144
 11435  001358  ECDC  F01E         	call	i2_lcdInst
 11436                           
 11437                           ;main.c: 401: }
 11438                           
 11439                           ;main.c: 400: break;
 11440  00135C  D24F               	goto	i2l375
 11441  00135E                     i2l8569:
 11442  00135E  C0F3  F02B         	movff	_menuIndex,??_keypressed
 11443  001362  C0F4  F02C         	movff	_menuIndex+1,??_keypressed+1
 11444                           
 11445                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11446                           ; Switch size 1, requested type "space"
 11447                           ; Number of cases is 1, Range of values is 0 to 0
 11448                           ; switch strategies available:
 11449                           ; Name         Instructions Cycles
 11450                           ; simple_byte            4     3 (average)
 11451                           ;	Chosen strategy is simple_byte
 11452  001366  502C               	movf	??_keypressed+1,w,c
 11453  001368  0A00               	xorlw	0	; case 0
 11454  00136A  A4D8               	btfss	status,2,c
 11455  00136C  D7E2               	goto	i2l8559
 11456                           
 11457                           ; Switch size 1, requested type "space"
 11458                           ; Number of cases is 3, Range of values is 1 to 3
 11459                           ; switch strategies available:
 11460                           ; Name         Instructions Cycles
 11461                           ; simple_byte           10     6 (average)
 11462                           ;	Chosen strategy is simple_byte
 11463  00136E  502B               	movf	??_keypressed,w,c
 11464  001370  0A01               	xorlw	1	; case 1
 11465  001372  B4D8               	btfsc	status,2,c
 11466  001374  D7D8               	goto	i2l8553
 11467  001376  0A03               	xorlw	3	; case 2
 11468  001378  B4D8               	btfsc	status,2,c
 11469  00137A  D7D7               	goto	i2l8555
 11470  00137C  0A01               	xorlw	1	; case 3
 11471  00137E  B4D8               	btfsc	status,2,c
 11472  001380  D7D6               	goto	i2l8557
 11473  001382  D7D7               	goto	i2l8559
 11474  001384                     i2l8573:
 11475                           
 11476                           ; BSR set to: 0
 11477                           ;main.c: 409: for (i=0;i<7;i++)
 11478  001384  0E00               	movlw	0
 11479  001386  6E3C               	movwf	keypressed@i+1,c
 11480  001388  0E00               	movlw	0
 11481  00138A  6E3B               	movwf	keypressed@i,c
 11482  00138C                     i2l8575:
 11483                           
 11484                           ; BSR set to: 0
 11485  00138C  BE3C               	btfsc	keypressed@i+1,7,c
 11486  00138E  D006               	goto	i2l8579
 11487  001390  503C               	movf	keypressed@i+1,w,c
 11488  001392  E11D               	bnz	i2l8585
 11489  001394  0E07               	movlw	7
 11490  001396  5C3B               	subwf	keypressed@i,w,c
 11491  001398  B0D8               	btfsc	status,0,c
 11492  00139A  D019               	goto	i2l8585
 11493  00139C                     i2l8579:
 11494                           
 11495                           ;main.c: 410: startTime[i]=time_i[i];
 11496  00139C  90D8               	bcf	status,0,c
 11497  00139E  343B               	rlcf	keypressed@i,w,c
 11498  0013A0  6ED9               	movwf	fsr2l,c
 11499  0013A2  343C               	rlcf	keypressed@i+1,w,c
 11500  0013A4  6EDA               	movwf	fsr2h,c
 11501  0013A6  0E3E               	movlw	low _time_i
 11502  0013A8  26D9               	addwf	fsr2l,f,c
 11503  0013AA  0E00               	movlw	high _time_i
 11504  0013AC  22DA               	addwfc	fsr2h,f,c
 11505  0013AE  90D8               	bcf	status,0,c
 11506  0013B0  343B               	rlcf	keypressed@i,w,c
 11507  0013B2  6EE1               	movwf	fsr1l,c
 11508  0013B4  343C               	rlcf	keypressed@i+1,w,c
 11509  0013B6  6EE2               	movwf	fsr1h,c
 11510  0013B8  0E0E               	movlw	low _startTime
 11511  0013BA  26E1               	addwf	fsr1l,f,c
 11512  0013BC  0E01               	movlw	high _startTime
 11513  0013BE  22E2               	addwfc	fsr1h,f,c
 11514  0013C0  CFDE FFE6          	movff	postinc2,postinc1
 11515  0013C4  CFDD FFE5          	movff	postdec2,postdec1
 11516  0013C8  4A3B               	infsnz	keypressed@i,f,c
 11517  0013CA  2A3C               	incf	keypressed@i+1,f,c
 11518  0013CC  D7DF               	goto	i2l8575
 11519  0013CE                     i2l8585:
 11520                           
 11521                           ;main.c: 412: if (keys[keypress]=='B'&&logIndex<events){
 11522  0013CE  503D               	movf	keypressed@keypress,w,c
 11523  0013D0  0D01               	mullw	1
 11524  0013D2  0E57               	movlw	low _keys
 11525  0013D4  24F3               	addwf	prodl,w,c
 11526  0013D6  6EF6               	movwf	tblptrl,c
 11527  0013D8  0EFE               	movlw	high _keys
 11528  0013DA  20F4               	addwfc	prodh,w,c
 11529  0013DC  6EF7               	movwf	tblptrh,c
 11530  0013DE                     	if	1	;There are 3 active tblptr bytes
 11531  0013DE  6AF8               	clrf	tblptru,c
 11532  0013E0  0E00               	movlw	low (__mediumconst shr (0+16))
 11533  0013E2  22F8               	addwfc	tblptru,f,c
 11534  0013E4                     	endif
 11535  0013E4  0008               	tblrd		*
 11536  0013E6  50F5               	movf	tablat,w,c
 11537  0013E8  0A42               	xorlw	66
 11538  0013EA  A4D8               	btfss	status,2,c
 11539  0013EC  D012               	goto	i2l8591
 11540  0013EE  0100               	movlb	0	; () banked
 11541  0013F0  51EF               	movf	_events& (0+255),w,b
 11542  0013F2  0100               	movlb	0	; () banked
 11543  0013F4  5DF1               	subwf	_logIndex& (0+255),w,b
 11544  0013F6  0100               	movlb	0	; () banked
 11545  0013F8  51F2               	movf	(_logIndex+1)& (0+255),w,b
 11546  0013FA  0A80               	xorlw	128
 11547  0013FC  6E2B               	movwf	??_keypressed& (0+255),c
 11548  0013FE  0100               	movlb	0	; () banked
 11549  001400  51F0               	movf	(_events+1)& (0+255),w,b
 11550  001402  0A80               	xorlw	128
 11551  001404  582B               	subwfb	??_keypressed& (0+255),w,c
 11552  001406  B0D8               	btfsc	status,0,c
 11553  001408  D004               	goto	i2l8591
 11554                           
 11555                           ; BSR set to: 0
 11556                           ;main.c: 416: logIndex++;
 11557  00140A  0100               	movlb	0	; () banked
 11558  00140C  4BF1               	infsnz	_logIndex& (0+255),f,b
 11559  00140E  2BF2               	incf	(_logIndex+1)& (0+255),f,b
 11560                           
 11561                           ;main.c: 417: }
 11562  001410  D1F5               	goto	i2l375
 11563  001412                     i2l8591:
 11564                           
 11565                           ;main.c: 418: else if (keys[keypress]=='A'&&logIndex>1)
 11566  001412  503D               	movf	keypressed@keypress,w,c
 11567  001414  0D01               	mullw	1
 11568  001416  0E57               	movlw	low _keys
 11569  001418  24F3               	addwf	prodl,w,c
 11570  00141A  6EF6               	movwf	tblptrl,c
 11571  00141C  0EFE               	movlw	high _keys
 11572  00141E  20F4               	addwfc	prodh,w,c
 11573  001420  6EF7               	movwf	tblptrh,c
 11574  001422                     	if	1	;There are 3 active tblptr bytes
 11575  001422  6AF8               	clrf	tblptru,c
 11576  001424  0E00               	movlw	low (__mediumconst shr (0+16))
 11577  001426  22F8               	addwfc	tblptru,f,c
 11578  001428                     	endif
 11579  001428  0008               	tblrd		*
 11580  00142A  50F5               	movf	tablat,w,c
 11581  00142C  0A41               	xorlw	65
 11582  00142E  A4D8               	btfss	status,2,c
 11583  001430  D077               	goto	i2l8625
 11584  001432  0100               	movlb	0	; () banked
 11585  001434  BFF2               	btfsc	(_logIndex+1)& (0+255),7,b
 11586  001436  D074               	goto	i2l8625
 11587  001438  0100               	movlb	0	; () banked
 11588  00143A  51F2               	movf	(_logIndex+1)& (0+255),w,b
 11589  00143C  E105               	bnz	i2u1404_40
 11590  00143E  0E02               	movlw	2
 11591  001440  0100               	movlb	0	; () banked
 11592  001442  5DF1               	subwf	_logIndex& (0+255),w,b
 11593  001444  A0D8               	btfss	status,0,c
 11594  001446  D06C               	goto	i2l8625
 11595  001448                     i2u1404_40:
 11596                           
 11597                           ; BSR set to: 0
 11598                           ;main.c: 419: logIndex--;
 11599  001448  0100               	movlb	0	; () banked
 11600  00144A  07F1               	decf	_logIndex& (0+255),f,b
 11601  00144C  A0D8               	btfss	status,0,c
 11602  00144E  07F2               	decf	(_logIndex+1)& (0+255),f,b
 11603  001450  D1D5               	goto	i2l375
 11604  001452                     i2l8601:
 11605                           
 11606                           ; BSR set to: 0
 11607                           ;main.c: 424: for (i=0;i<7;i++)
 11608  001452  0E00               	movlw	0
 11609  001454  6E3C               	movwf	keypressed@i+1,c
 11610  001456  0E00               	movlw	0
 11611  001458  6E3B               	movwf	keypressed@i,c
 11612  00145A                     i2l8603:
 11613                           
 11614                           ; BSR set to: 0
 11615  00145A  BE3C               	btfsc	keypressed@i+1,7,c
 11616  00145C  D006               	goto	i2l8607
 11617  00145E  503C               	movf	keypressed@i+1,w,c
 11618  001460  E11D               	bnz	i2l8613
 11619  001462  0E07               	movlw	7
 11620  001464  5C3B               	subwf	keypressed@i,w,c
 11621  001466  B0D8               	btfsc	status,0,c
 11622  001468  D019               	goto	i2l8613
 11623  00146A                     i2l8607:
 11624                           
 11625                           ;main.c: 425: startTime[i]=time_i[i];
 11626  00146A  90D8               	bcf	status,0,c
 11627  00146C  343B               	rlcf	keypressed@i,w,c
 11628  00146E  6ED9               	movwf	fsr2l,c
 11629  001470  343C               	rlcf	keypressed@i+1,w,c
 11630  001472  6EDA               	movwf	fsr2h,c
 11631  001474  0E3E               	movlw	low _time_i
 11632  001476  26D9               	addwf	fsr2l,f,c
 11633  001478  0E00               	movlw	high _time_i
 11634  00147A  22DA               	addwfc	fsr2h,f,c
 11635  00147C  90D8               	bcf	status,0,c
 11636  00147E  343B               	rlcf	keypressed@i,w,c
 11637  001480  6EE1               	movwf	fsr1l,c
 11638  001482  343C               	rlcf	keypressed@i+1,w,c
 11639  001484  6EE2               	movwf	fsr1h,c
 11640  001486  0E0E               	movlw	low _startTime
 11641  001488  26E1               	addwf	fsr1l,f,c
 11642  00148A  0E01               	movlw	high _startTime
 11643  00148C  22E2               	addwfc	fsr1h,f,c
 11644  00148E  CFDE FFE6          	movff	postinc2,postinc1
 11645  001492  CFDD FFE5          	movff	postdec2,postdec1
 11646  001496  4A3B               	infsnz	keypressed@i,f,c
 11647  001498  2A3C               	incf	keypressed@i+1,f,c
 11648  00149A  D7DF               	goto	i2l8603
 11649  00149C                     i2l8613:
 11650                           
 11651                           ;main.c: 427: if (keys[keypress]=='B'&&creditIndex<creditSize)
 11652  00149C  503D               	movf	keypressed@keypress,w,c
 11653  00149E  0D01               	mullw	1
 11654  0014A0  0E57               	movlw	low _keys
 11655  0014A2  24F3               	addwf	prodl,w,c
 11656  0014A4  6EF6               	movwf	tblptrl,c
 11657  0014A6  0EFE               	movlw	high _keys
 11658  0014A8  20F4               	addwfc	prodh,w,c
 11659  0014AA  6EF7               	movwf	tblptrh,c
 11660  0014AC                     	if	1	;There are 3 active tblptr bytes
 11661  0014AC  6AF8               	clrf	tblptru,c
 11662  0014AE  0E00               	movlw	low (__mediumconst shr (0+16))
 11663  0014B0  22F8               	addwfc	tblptru,f,c
 11664  0014B2                     	endif
 11665  0014B2  0008               	tblrd		*
 11666  0014B4  50F5               	movf	tablat,w,c
 11667  0014B6  0A42               	xorlw	66
 11668  0014B8  A4D8               	btfss	status,2,c
 11669  0014BA  D012               	goto	i2l8619
 11670  0014BC  0100               	movlb	0	; () banked
 11671  0014BE  51E9               	movf	_creditSize& (0+255),w,b
 11672  0014C0  0100               	movlb	0	; () banked
 11673  0014C2  5DE7               	subwf	_creditIndex& (0+255),w,b
 11674  0014C4  0100               	movlb	0	; () banked
 11675  0014C6  51E8               	movf	(_creditIndex+1)& (0+255),w,b
 11676  0014C8  0A80               	xorlw	128
 11677  0014CA  6E2B               	movwf	??_keypressed& (0+255),c
 11678  0014CC  0100               	movlb	0	; () banked
 11679  0014CE  51EA               	movf	(_creditSize+1)& (0+255),w,b
 11680  0014D0  0A80               	xorlw	128
 11681  0014D2  582B               	subwfb	??_keypressed& (0+255),w,c
 11682  0014D4  B0D8               	btfsc	status,0,c
 11683  0014D6  D004               	goto	i2l8619
 11684                           
 11685                           ; BSR set to: 0
 11686                           ;main.c: 428: creditIndex++;
 11687  0014D8  0100               	movlb	0	; () banked
 11688  0014DA  4BE7               	infsnz	_creditIndex& (0+255),f,b
 11689  0014DC  2BE8               	incf	(_creditIndex+1)& (0+255),f,b
 11690  0014DE  D18E               	goto	i2l375
 11691  0014E0                     i2l8619:
 11692                           
 11693                           ;main.c: 429: else if (keys[keypress]=='A'&&creditIndex>1)
 11694  0014E0  503D               	movf	keypressed@keypress,w,c
 11695  0014E2  0D01               	mullw	1
 11696  0014E4  0E57               	movlw	low _keys
 11697  0014E6  24F3               	addwf	prodl,w,c
 11698  0014E8  6EF6               	movwf	tblptrl,c
 11699  0014EA  0EFE               	movlw	high _keys
 11700  0014EC  20F4               	addwfc	prodh,w,c
 11701  0014EE  6EF7               	movwf	tblptrh,c
 11702  0014F0                     	if	1	;There are 3 active tblptr bytes
 11703  0014F0  6AF8               	clrf	tblptru,c
 11704  0014F2  0E00               	movlw	low (__mediumconst shr (0+16))
 11705  0014F4  22F8               	addwfc	tblptru,f,c
 11706  0014F6                     	endif
 11707  0014F6  0008               	tblrd		*
 11708  0014F8  50F5               	movf	tablat,w,c
 11709  0014FA  0A41               	xorlw	65
 11710  0014FC  A4D8               	btfss	status,2,c
 11711  0014FE  D010               	goto	i2l8625
 11712  001500  0100               	movlb	0	; () banked
 11713  001502  BFE8               	btfsc	(_creditIndex+1)& (0+255),7,b
 11714  001504  D00D               	goto	i2l8625
 11715  001506  0100               	movlb	0	; () banked
 11716  001508  51E8               	movf	(_creditIndex+1)& (0+255),w,b
 11717  00150A  E105               	bnz	i2u1411_40
 11718  00150C  0E02               	movlw	2
 11719  00150E  0100               	movlb	0	; () banked
 11720  001510  5DE7               	subwf	_creditIndex& (0+255),w,b
 11721  001512  A0D8               	btfss	status,0,c
 11722  001514  D005               	goto	i2l8625
 11723  001516                     i2u1411_40:
 11724                           
 11725                           ; BSR set to: 0
 11726                           ;main.c: 430: creditIndex--;
 11727  001516  0100               	movlb	0	; () banked
 11728  001518  07E7               	decf	_creditIndex& (0+255),f,b
 11729  00151A  A0D8               	btfss	status,0,c
 11730  00151C  07E8               	decf	(_creditIndex+1)& (0+255),f,b
 11731  00151E  D16E               	goto	i2l375
 11732  001520                     i2l8625:
 11733                           
 11734                           ;main.c: 431: else if(keys[keypress]=='D')
 11735  001520  503D               	movf	keypressed@keypress,w,c
 11736  001522  0D01               	mullw	1
 11737  001524  0E57               	movlw	low _keys
 11738  001526  24F3               	addwf	prodl,w,c
 11739  001528  6EF6               	movwf	tblptrl,c
 11740  00152A  0EFE               	movlw	high _keys
 11741  00152C  20F4               	addwfc	prodh,w,c
 11742  00152E  6EF7               	movwf	tblptrh,c
 11743  001530                     	if	1	;There are 3 active tblptr bytes
 11744  001530  6AF8               	clrf	tblptru,c
 11745  001532  0E00               	movlw	low (__mediumconst shr (0+16))
 11746  001534  22F8               	addwfc	tblptru,f,c
 11747  001536                     	endif
 11748  001536  0008               	tblrd		*
 11749  001538  50F5               	movf	tablat,w,c
 11750  00153A  0A44               	xorlw	68
 11751  00153C  A4D8               	btfss	status,2,c
 11752  00153E  D15E               	goto	i2l375
 11753  001540                     i2l8627:
 11754                           
 11755                           ;main.c: 432: nstate='m';
 11756  001540  0E6D               	movlw	109
 11757  001542  D13D               	goto	L9
 11758  001544                     i2l8629:
 11759                           
 11760                           ; BSR set to: 0
 11761                           ;main.c: 435: if (keys[keypress]=='1'){
 11762  001544  503D               	movf	keypressed@keypress,w,c
 11763  001546  0D01               	mullw	1
 11764  001548  0E57               	movlw	low _keys
 11765  00154A  24F3               	addwf	prodl,w,c
 11766  00154C  6EF6               	movwf	tblptrl,c
 11767  00154E  0EFE               	movlw	high _keys
 11768  001550  20F4               	addwfc	prodh,w,c
 11769  001552  6EF7               	movwf	tblptrh,c
 11770  001554                     	if	1	;There are 3 active tblptr bytes
 11771  001554  6AF8               	clrf	tblptru,c
 11772  001556  0E00               	movlw	low (__mediumconst shr (0+16))
 11773  001558  22F8               	addwfc	tblptru,f,c
 11774  00155A                     	endif
 11775  00155A  0008               	tblrd		*
 11776  00155C  50F5               	movf	tablat,w,c
 11777  00155E  0A31               	xorlw	49
 11778  001560  A4D8               	btfss	status,2,c
 11779  001562  D012               	goto	i2l8635
 11780                           
 11781                           ; BSR set to: 0
 11782                           ;main.c: 436: eskaNoCap++;
 11783  001564  0100               	movlb	0	; () banked
 11784  001566  4BC9               	infsnz	_eskaNoCap& (0+255),f,b
 11785  001568  2BCA               	incf	(_eskaNoCap+1)& (0+255),f,b
 11786                           
 11787                           ; BSR set to: 0
 11788                           ;main.c: 437: eskaNoCap%=100;
 11789  00156A  C0C9  F001         	movff	_eskaNoCap,i2___awmod@dividend
 11790  00156E  C0CA  F002         	movff	_eskaNoCap+1,i2___awmod@dividend+1
 11791  001572  0E00               	movlw	0
 11792  001574  6E04               	movwf	i2___awmod@divisor+1,c
 11793  001576  0E64               	movlw	100
 11794  001578  6E03               	movwf	i2___awmod@divisor,c
 11795  00157A  ECE7  F01B         	call	i2___awmod	;wreg free
 11796  00157E  C001  F0C9         	movff	?i2___awmod,_eskaNoCap
 11797  001582  C002  F0CA         	movff	?i2___awmod+1,_eskaNoCap+1
 11798                           
 11799                           ;main.c: 438: }
 11800  001586  D13A               	goto	i2l375
 11801  001588                     i2l8635:
 11802                           
 11803                           ;main.c: 439: else if (keys[keypress]=='2'){
 11804  001588  503D               	movf	keypressed@keypress,w,c
 11805  00158A  0D01               	mullw	1
 11806  00158C  0E57               	movlw	low _keys
 11807  00158E  24F3               	addwf	prodl,w,c
 11808  001590  6EF6               	movwf	tblptrl,c
 11809  001592  0EFE               	movlw	high _keys
 11810  001594  20F4               	addwfc	prodh,w,c
 11811  001596  6EF7               	movwf	tblptrh,c
 11812  001598                     	if	1	;There are 3 active tblptr bytes
 11813  001598  6AF8               	clrf	tblptru,c
 11814  00159A  0E00               	movlw	low (__mediumconst shr (0+16))
 11815  00159C  22F8               	addwfc	tblptru,f,c
 11816  00159E                     	endif
 11817  00159E  0008               	tblrd		*
 11818  0015A0  50F5               	movf	tablat,w,c
 11819  0015A2  0A32               	xorlw	50
 11820  0015A4  A4D8               	btfss	status,2,c
 11821  0015A6  D012               	goto	i2l8641
 11822                           
 11823                           ;main.c: 440: eskaWCap++;
 11824  0015A8  0100               	movlb	0	; () banked
 11825  0015AA  4BCB               	infsnz	_eskaWCap& (0+255),f,b
 11826  0015AC  2BCC               	incf	(_eskaWCap+1)& (0+255),f,b
 11827                           
 11828                           ; BSR set to: 0
 11829                           ;main.c: 441: eskaWCap%=100;
 11830  0015AE  C0CB  F001         	movff	_eskaWCap,i2___awmod@dividend
 11831  0015B2  C0CC  F002         	movff	_eskaWCap+1,i2___awmod@dividend+1
 11832  0015B6  0E00               	movlw	0
 11833  0015B8  6E04               	movwf	i2___awmod@divisor+1,c
 11834  0015BA  0E64               	movlw	100
 11835  0015BC  6E03               	movwf	i2___awmod@divisor,c
 11836  0015BE  ECE7  F01B         	call	i2___awmod	;wreg free
 11837  0015C2  C001  F0CB         	movff	?i2___awmod,_eskaWCap
 11838  0015C6  C002  F0CC         	movff	?i2___awmod+1,_eskaWCap+1
 11839                           
 11840                           ;main.c: 442: }
 11841  0015CA  D118               	goto	i2l375
 11842  0015CC                     i2l8641:
 11843                           
 11844                           ;main.c: 443: else if (keys[keypress]=='4'){
 11845  0015CC  503D               	movf	keypressed@keypress,w,c
 11846  0015CE  0D01               	mullw	1
 11847  0015D0  0E57               	movlw	low _keys
 11848  0015D2  24F3               	addwf	prodl,w,c
 11849  0015D4  6EF6               	movwf	tblptrl,c
 11850  0015D6  0EFE               	movlw	high _keys
 11851  0015D8  20F4               	addwfc	prodh,w,c
 11852  0015DA  6EF7               	movwf	tblptrh,c
 11853  0015DC                     	if	1	;There are 3 active tblptr bytes
 11854  0015DC  6AF8               	clrf	tblptru,c
 11855  0015DE  0E00               	movlw	low (__mediumconst shr (0+16))
 11856  0015E0  22F8               	addwfc	tblptru,f,c
 11857  0015E2                     	endif
 11858  0015E2  0008               	tblrd		*
 11859  0015E4  50F5               	movf	tablat,w,c
 11860  0015E6  0A34               	xorlw	52
 11861  0015E8  A4D8               	btfss	status,2,c
 11862  0015EA  D012               	goto	i2l8647
 11863                           
 11864                           ;main.c: 444: yopNoCap++;
 11865  0015EC  0100               	movlb	0	; () banked
 11866  0015EE  4BD7               	infsnz	_yopNoCap& (0+255),f,b
 11867  0015F0  2BD8               	incf	(_yopNoCap+1)& (0+255),f,b
 11868                           
 11869                           ; BSR set to: 0
 11870                           ;main.c: 445: yopNoCap%=100;
 11871  0015F2  C0D7  F001         	movff	_yopNoCap,i2___awmod@dividend
 11872  0015F6  C0D8  F002         	movff	_yopNoCap+1,i2___awmod@dividend+1
 11873  0015FA  0E00               	movlw	0
 11874  0015FC  6E04               	movwf	i2___awmod@divisor+1,c
 11875  0015FE  0E64               	movlw	100
 11876  001600  6E03               	movwf	i2___awmod@divisor,c
 11877  001602  ECE7  F01B         	call	i2___awmod	;wreg free
 11878  001606  C001  F0D7         	movff	?i2___awmod,_yopNoCap
 11879  00160A  C002  F0D8         	movff	?i2___awmod+1,_yopNoCap+1
 11880                           
 11881                           ;main.c: 446: }
 11882  00160E  D0F6               	goto	i2l375
 11883  001610                     i2l8647:
 11884                           
 11885                           ;main.c: 447: else if (keys[keypress]=='5'){
 11886  001610  503D               	movf	keypressed@keypress,w,c
 11887  001612  0D01               	mullw	1
 11888  001614  0E57               	movlw	low _keys
 11889  001616  24F3               	addwf	prodl,w,c
 11890  001618  6EF6               	movwf	tblptrl,c
 11891  00161A  0EFE               	movlw	high _keys
 11892  00161C  20F4               	addwfc	prodh,w,c
 11893  00161E  6EF7               	movwf	tblptrh,c
 11894  001620                     	if	1	;There are 3 active tblptr bytes
 11895  001620  6AF8               	clrf	tblptru,c
 11896  001622  0E00               	movlw	low (__mediumconst shr (0+16))
 11897  001624  22F8               	addwfc	tblptru,f,c
 11898  001626                     	endif
 11899  001626  0008               	tblrd		*
 11900  001628  50F5               	movf	tablat,w,c
 11901  00162A  0A35               	xorlw	53
 11902  00162C  A4D8               	btfss	status,2,c
 11903  00162E  D012               	goto	i2l8653
 11904                           
 11905                           ;main.c: 448: yopWCap++;
 11906  001630  0100               	movlb	0	; () banked
 11907  001632  4BD9               	infsnz	_yopWCap& (0+255),f,b
 11908  001634  2BDA               	incf	(_yopWCap+1)& (0+255),f,b
 11909                           
 11910                           ; BSR set to: 0
 11911                           ;main.c: 449: yopWCap%=100;
 11912  001636  C0D9  F001         	movff	_yopWCap,i2___awmod@dividend
 11913  00163A  C0DA  F002         	movff	_yopWCap+1,i2___awmod@dividend+1
 11914  00163E  0E00               	movlw	0
 11915  001640  6E04               	movwf	i2___awmod@divisor+1,c
 11916  001642  0E64               	movlw	100
 11917  001644  6E03               	movwf	i2___awmod@divisor,c
 11918  001646  ECE7  F01B         	call	i2___awmod	;wreg free
 11919  00164A  C001  F0D9         	movff	?i2___awmod,_yopWCap
 11920  00164E  C002  F0DA         	movff	?i2___awmod+1,_yopWCap+1
 11921                           
 11922                           ;main.c: 450: }
 11923  001652  D0D4               	goto	i2l375
 11924  001654                     i2l8653:
 11925                           
 11926                           ;main.c: 451: else if (keys[keypress]=='7'||keys[keypress]=='8')
 11927  001654  503D               	movf	keypressed@keypress,w,c
 11928  001656  0D01               	mullw	1
 11929  001658  0E57               	movlw	low _keys
 11930  00165A  24F3               	addwf	prodl,w,c
 11931  00165C  6EF6               	movwf	tblptrl,c
 11932  00165E  0EFE               	movlw	high _keys
 11933  001660  20F4               	addwfc	prodh,w,c
 11934  001662  6EF7               	movwf	tblptrh,c
 11935  001664                     	if	1	;There are 3 active tblptr bytes
 11936  001664  6AF8               	clrf	tblptru,c
 11937  001666  0E00               	movlw	low (__mediumconst shr (0+16))
 11938  001668  22F8               	addwfc	tblptru,f,c
 11939  00166A                     	endif
 11940  00166A  0008               	tblrd		*
 11941  00166C  50F5               	movf	tablat,w,c
 11942  00166E  0A37               	xorlw	55
 11943  001670  B4D8               	btfsc	status,2,c
 11944  001672  D010               	goto	i2l8657
 11945  001674  503D               	movf	keypressed@keypress,w,c
 11946  001676  0D01               	mullw	1
 11947  001678  0E57               	movlw	low _keys
 11948  00167A  24F3               	addwf	prodl,w,c
 11949  00167C  6EF6               	movwf	tblptrl,c
 11950  00167E  0EFE               	movlw	high _keys
 11951  001680  20F4               	addwfc	prodh,w,c
 11952  001682  6EF7               	movwf	tblptrh,c
 11953  001684                     	if	1	;There are 3 active tblptr bytes
 11954  001684  6AF8               	clrf	tblptru,c
 11955  001686  0E00               	movlw	low (__mediumconst shr (0+16))
 11956  001688  22F8               	addwfc	tblptru,f,c
 11957  00168A                     	endif
 11958  00168A  0008               	tblrd		*
 11959  00168C  50F5               	movf	tablat,w,c
 11960  00168E  0A38               	xorlw	56
 11961  001690  A4D8               	btfss	status,2,c
 11962  001692  D002               	goto	i2l8659
 11963  001694                     i2l8657:
 11964                           
 11965                           ;main.c: 452: nstate='e';
 11966  001694  0E65               	movlw	101
 11967  001696  D093               	goto	L9
 11968  001698                     i2l8659:
 11969                           
 11970                           ;main.c: 453: else if (keys[keypress]=='B'&&sortIndex<sortSize)
 11971  001698  503D               	movf	keypressed@keypress,w,c
 11972  00169A  0D01               	mullw	1
 11973  00169C  0E57               	movlw	low _keys
 11974  00169E  24F3               	addwf	prodl,w,c
 11975  0016A0  6EF6               	movwf	tblptrl,c
 11976  0016A2  0EFE               	movlw	high _keys
 11977  0016A4  20F4               	addwfc	prodh,w,c
 11978  0016A6  6EF7               	movwf	tblptrh,c
 11979  0016A8                     	if	1	;There are 3 active tblptr bytes
 11980  0016A8  6AF8               	clrf	tblptru,c
 11981  0016AA  0E00               	movlw	low (__mediumconst shr (0+16))
 11982  0016AC  22F8               	addwfc	tblptru,f,c
 11983  0016AE                     	endif
 11984  0016AE  0008               	tblrd		*
 11985  0016B0  50F5               	movf	tablat,w,c
 11986  0016B2  0A42               	xorlw	66
 11987  0016B4  A4D8               	btfss	status,2,c
 11988  0016B6  D010               	goto	i2l8665
 11989  0016B8  506C               	movf	_sortSize,w,c
 11990  0016BA  0100               	movlb	0	; () banked
 11991  0016BC  5DE3               	subwf	_sortIndex& (0+255),w,b
 11992  0016BE  0100               	movlb	0	; () banked
 11993  0016C0  51E4               	movf	(_sortIndex+1)& (0+255),w,b
 11994  0016C2  0A80               	xorlw	128
 11995  0016C4  6E2B               	movwf	??_keypressed& (0+255),c
 11996  0016C6  506D               	movf	_sortSize+1,w,c
 11997  0016C8  0A80               	xorlw	128
 11998  0016CA  582B               	subwfb	??_keypressed& (0+255),w,c
 11999  0016CC  B0D8               	btfsc	status,0,c
 12000  0016CE  D004               	goto	i2l8665
 12001                           
 12002                           ; BSR set to: 0
 12003                           ;main.c: 454: sortIndex++;
 12004  0016D0  0100               	movlb	0	; () banked
 12005  0016D2  4BE3               	infsnz	_sortIndex& (0+255),f,b
 12006  0016D4  2BE4               	incf	(_sortIndex+1)& (0+255),f,b
 12007  0016D6  D092               	goto	i2l375
 12008  0016D8                     i2l8665:
 12009                           
 12010                           ;main.c: 455: else if (keys[keypress]=='A'&&sortIndex>1)
 12011  0016D8  503D               	movf	keypressed@keypress,w,c
 12012  0016DA  0D01               	mullw	1
 12013  0016DC  0E57               	movlw	low _keys
 12014  0016DE  24F3               	addwf	prodl,w,c
 12015  0016E0  6EF6               	movwf	tblptrl,c
 12016  0016E2  0EFE               	movlw	high _keys
 12017  0016E4  20F4               	addwfc	prodh,w,c
 12018  0016E6  6EF7               	movwf	tblptrh,c
 12019  0016E8                     	if	1	;There are 3 active tblptr bytes
 12020  0016E8  6AF8               	clrf	tblptru,c
 12021  0016EA  0E00               	movlw	low (__mediumconst shr (0+16))
 12022  0016EC  22F8               	addwfc	tblptru,f,c
 12023  0016EE                     	endif
 12024  0016EE  0008               	tblrd		*
 12025  0016F0  50F5               	movf	tablat,w,c
 12026  0016F2  0A41               	xorlw	65
 12027  0016F4  A4D8               	btfss	status,2,c
 12028  0016F6  D082               	goto	i2l375
 12029  0016F8  0100               	movlb	0	; () banked
 12030  0016FA  BFE4               	btfsc	(_sortIndex+1)& (0+255),7,b
 12031  0016FC  D07F               	goto	i2l375
 12032  0016FE  0100               	movlb	0	; () banked
 12033  001700  51E4               	movf	(_sortIndex+1)& (0+255),w,b
 12034  001702  E105               	bnz	i2u1422_40
 12035  001704  0E02               	movlw	2
 12036  001706  0100               	movlb	0	; () banked
 12037  001708  5DE3               	subwf	_sortIndex& (0+255),w,b
 12038  00170A  A0D8               	btfss	status,0,c
 12039  00170C  D077               	goto	i2l375
 12040  00170E                     i2u1422_40:
 12041                           
 12042                           ; BSR set to: 0
 12043                           ;main.c: 456: sortIndex--;
 12044  00170E  0100               	movlb	0	; () banked
 12045  001710  07E3               	decf	_sortIndex& (0+255),f,b
 12046  001712  A0D8               	btfss	status,0,c
 12047  001714  07E4               	decf	(_sortIndex+1)& (0+255),f,b
 12048                           
 12049                           ; BSR set to: 0
 12050                           ;main.c: 457: break;
 12051                           
 12052                           ; BSR set to: 0
 12053                           
 12054                           ; BSR set to: 0
 12055                           
 12056                           ; BSR set to: 0
 12057                           
 12058                           ; BSR set to: 0
 12059                           
 12060                           ; BSR set to: 0
 12061                           
 12062                           ; BSR set to: 0
 12063  001716  D072               	goto	i2l375
 12064  001718                     i2l8671:
 12065                           
 12066                           ; BSR set to: 0
 12067                           ;main.c: 459: if (keys[keypress]=='B'&&endIndex<endSize)
 12068  001718  503D               	movf	keypressed@keypress,w,c
 12069  00171A  0D01               	mullw	1
 12070  00171C  0E57               	movlw	low _keys
 12071  00171E  24F3               	addwf	prodl,w,c
 12072  001720  6EF6               	movwf	tblptrl,c
 12073  001722  0EFE               	movlw	high _keys
 12074  001724  20F4               	addwfc	prodh,w,c
 12075  001726  6EF7               	movwf	tblptrh,c
 12076  001728                     	if	1	;There are 3 active tblptr bytes
 12077  001728  6AF8               	clrf	tblptru,c
 12078  00172A  0E00               	movlw	low (__mediumconst shr (0+16))
 12079  00172C  22F8               	addwfc	tblptru,f,c
 12080  00172E                     	endif
 12081  00172E  0008               	tblrd		*
 12082  001730  50F5               	movf	tablat,w,c
 12083  001732  0A42               	xorlw	66
 12084  001734  A4D8               	btfss	status,2,c
 12085  001736  D012               	goto	i2l8677
 12086                           
 12087                           ; BSR set to: 0
 12088  001738  0100               	movlb	0	; () banked
 12089  00173A  51ED               	movf	_endSize& (0+255),w,b
 12090  00173C  0100               	movlb	0	; () banked
 12091  00173E  5DEB               	subwf	_endIndex& (0+255),w,b
 12092  001740  0100               	movlb	0	; () banked
 12093  001742  51EC               	movf	(_endIndex+1)& (0+255),w,b
 12094  001744  0A80               	xorlw	128
 12095  001746  6E2B               	movwf	??_keypressed& (0+255),c
 12096  001748  0100               	movlb	0	; () banked
 12097  00174A  51EE               	movf	(_endSize+1)& (0+255),w,b
 12098  00174C  0A80               	xorlw	128
 12099  00174E  582B               	subwfb	??_keypressed& (0+255),w,c
 12100  001750  B0D8               	btfsc	status,0,c
 12101  001752  D004               	goto	i2l8677
 12102                           
 12103                           ; BSR set to: 0
 12104                           ;main.c: 460: endIndex++;
 12105  001754  0100               	movlb	0	; () banked
 12106  001756  4BEB               	infsnz	_endIndex& (0+255),f,b
 12107  001758  2BEC               	incf	(_endIndex+1)& (0+255),f,b
 12108  00175A  D050               	goto	i2l375
 12109  00175C                     i2l8677:
 12110                           
 12111                           ; BSR set to: 0
 12112                           ;main.c: 461: else if (keys[keypress]=='A'&&endIndex>1)
 12113  00175C  503D               	movf	keypressed@keypress,w,c
 12114  00175E  0D01               	mullw	1
 12115  001760  0E57               	movlw	low _keys
 12116  001762  24F3               	addwf	prodl,w,c
 12117  001764  6EF6               	movwf	tblptrl,c
 12118  001766  0EFE               	movlw	high _keys
 12119  001768  20F4               	addwfc	prodh,w,c
 12120  00176A  6EF7               	movwf	tblptrh,c
 12121  00176C                     	if	1	;There are 3 active tblptr bytes
 12122  00176C  6AF8               	clrf	tblptru,c
 12123  00176E  0E00               	movlw	low (__mediumconst shr (0+16))
 12124  001770  22F8               	addwfc	tblptru,f,c
 12125  001772                     	endif
 12126  001772  0008               	tblrd		*
 12127  001774  50F5               	movf	tablat,w,c
 12128  001776  0A41               	xorlw	65
 12129  001778  A4D8               	btfss	status,2,c
 12130  00177A  D010               	goto	i2l8683
 12131                           
 12132                           ; BSR set to: 0
 12133  00177C  0100               	movlb	0	; () banked
 12134  00177E  BFEC               	btfsc	(_endIndex+1)& (0+255),7,b
 12135  001780  D00D               	goto	i2l8683
 12136  001782  0100               	movlb	0	; () banked
 12137  001784  51EC               	movf	(_endIndex+1)& (0+255),w,b
 12138  001786  E105               	bnz	i2u1426_40
 12139  001788  0E02               	movlw	2
 12140  00178A  0100               	movlb	0	; () banked
 12141  00178C  5DEB               	subwf	_endIndex& (0+255),w,b
 12142  00178E  A0D8               	btfss	status,0,c
 12143  001790  D005               	goto	i2l8683
 12144  001792                     i2u1426_40:
 12145                           
 12146                           ; BSR set to: 0
 12147                           ;main.c: 462: endIndex--;
 12148  001792  0100               	movlb	0	; () banked
 12149  001794  07EB               	decf	_endIndex& (0+255),f,b
 12150  001796  A0D8               	btfss	status,0,c
 12151  001798  07EC               	decf	(_endIndex+1)& (0+255),f,b
 12152  00179A  D030               	goto	i2l375
 12153  00179C                     i2l8683:
 12154                           
 12155                           ; BSR set to: 0
 12156                           ;main.c: 463: else if (keys[keypress]=='C')
 12157  00179C  503D               	movf	keypressed@keypress,w,c
 12158  00179E  0D01               	mullw	1
 12159  0017A0  0E57               	movlw	low _keys
 12160  0017A2  24F3               	addwf	prodl,w,c
 12161  0017A4  6EF6               	movwf	tblptrl,c
 12162  0017A6  0EFE               	movlw	high _keys
 12163  0017A8  20F4               	addwfc	prodh,w,c
 12164  0017AA  6EF7               	movwf	tblptrh,c
 12165  0017AC                     	if	1	;There are 3 active tblptr bytes
 12166  0017AC  6AF8               	clrf	tblptru,c
 12167  0017AE  0E00               	movlw	low (__mediumconst shr (0+16))
 12168  0017B0  22F8               	addwfc	tblptru,f,c
 12169  0017B2                     	endif
 12170  0017B2  0008               	tblrd		*
 12171  0017B4  50F5               	movf	tablat,w,c
 12172  0017B6  0A43               	xorlw	67
 12173  0017B8  A4D8               	btfss	status,2,c
 12174  0017BA  D020               	goto	i2l375
 12175                           
 12176                           ; BSR set to: 0
 12177                           ;main.c: 464: nstate='r';
 12178  0017BC  0E72               	movlw	114
 12179  0017BE                     L9:
 12180  0017BE  0100               	movlb	0	; () banked
 12181  0017C0  6FE5               	movwf	_nstate& (0+255),b
 12182                           
 12183                           ; BSR set to: 0
 12184                           ;main.c: 465: break;
 12185                           
 12186                           ; BSR set to: 0
 12187                           
 12188                           ; BSR set to: 0
 12189  0017C2  D01C               	goto	i2l375
 12190  0017C4                     i2l8687:
 12191                           
 12192                           ; BSR set to: 0
 12193                           ;main.c: 467: printf("no page found");
 12194  0017C4  0EBF               	movlw	low STR_26
 12195  0017C6  6E23               	movwf	i2printf@f,c
 12196  0017C8  0EFF               	movlw	high STR_26
 12197  0017CA  6E24               	movwf	i2printf@f+1,c
 12198  0017CC  EC13  F01E         	call	i2_printf	;wreg free
 12199                           
 12200                           ;main.c: 469: }
 12201                           
 12202                           ;main.c: 468: break;
 12203  0017D0  D015               	goto	i2l375
 12204  0017D2                     i2l8691:
 12205  0017D2  0100               	movlb	0	; () banked
 12206  0017D4  51E6               	movf	_state& (0+255),w,b
 12207                           
 12208                           ; Switch size 1, requested type "space"
 12209                           ; Number of cases is 6, Range of values is 99 to 115
 12210                           ; switch strategies available:
 12211                           ; Name         Instructions Cycles
 12212                           ; simple_byte           19    10 (average)
 12213                           ;	Chosen strategy is simple_byte
 12214  0017D6  0A63               	xorlw	99	; case 99
 12215  0017D8  B4D8               	btfsc	status,2,c
 12216  0017DA  D63B               	goto	i2l8601
 12217  0017DC  0A06               	xorlw	6	; case 101
 12218  0017DE  B4D8               	btfsc	status,2,c
 12219  0017E0  D79B               	goto	i2l8671
 12220  0017E2  0A09               	xorlw	9	; case 108
 12221  0017E4  B4D8               	btfsc	status,2,c
 12222  0017E6  D5CE               	goto	i2l8573
 12223  0017E8  0A01               	xorlw	1	; case 109
 12224  0017EA  B4D8               	btfsc	status,2,c
 12225  0017EC  D524               	goto	i2l8525
 12226  0017EE  0A1F               	xorlw	31	; case 114
 12227  0017F0  B4D8               	btfsc	status,2,c
 12228  0017F2  D6A6               	goto	i2l8627
 12229  0017F4  0A01               	xorlw	1	; case 115
 12230  0017F6  B4D8               	btfsc	status,2,c
 12231  0017F8  D6A5               	goto	i2l8629
 12232  0017FA  D7E4               	goto	i2l8687
 12233  0017FC                     i2l375:
 12234                           
 12235                           ;main.c: 470: INT1IF = 0;
 12236  0017FC  90F0               	bcf	intcon3,0,c	;volatile
 12237  0017FE                     i2l416:
 12238  0017FE  C03A  FFF5         	movff	??_keypressed+15,tablat
 12239  001802  C039  FFF8         	movff	??_keypressed+14,tblptru
 12240  001806  C038  FFF7         	movff	??_keypressed+13,tblptrh
 12241  00180A  C037  FFF6         	movff	??_keypressed+12,tblptrl
 12242  00180E  C036  FFF4         	movff	??_keypressed+11,prodh
 12243  001812  C035  FFF3         	movff	??_keypressed+10,prodl
 12244  001816  C034  FFDA         	movff	??_keypressed+9,fsr2h
 12245  00181A  C033  FFD9         	movff	??_keypressed+8,fsr2l
 12246  00181E  C032  FFE2         	movff	??_keypressed+7,fsr1h
 12247  001822  C031  FFE1         	movff	??_keypressed+6,fsr1l
 12248  001826  C030  FFEA         	movff	??_keypressed+5,fsr0h
 12249  00182A  C02F  FFE9         	movff	??_keypressed+4,fsr0l
 12250  00182E  C02E  FFFB         	movff	??_keypressed+3,pclatu
 12251  001832  C02D  FFFA         	movff	??_keypressed+2,pclath
 12252  001836  9276               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12253  001838  0011               	retfie		f
 12254  00183A                     __end_of_keypressed:
 12255                           	opt stack 0
 12256                           tosu	equ	0xFFF
 12257                           tosh	equ	0xFFE
 12258                           tosl	equ	0xFFD
 12259                           pclatu	equ	0xFFB
 12260                           pclath	equ	0xFFA
 12261                           tblptru	equ	0xFF8
 12262                           tblptrh	equ	0xFF7
 12263                           tblptrl	equ	0xFF6
 12264                           tablat	equ	0xFF5
 12265                           prodh	equ	0xFF4
 12266                           prodl	equ	0xFF3
 12267                           intcon	equ	0xFF2
 12268                           intcon2	equ	0xFF1
 12269                           intcon3	equ	0xFF0
 12270                           indf0	equ	0xFEF
 12271                           postinc0	equ	0xFEE
 12272                           fsr0h	equ	0xFEA
 12273                           fsr0l	equ	0xFE9
 12274                           wreg	equ	0xFE8
 12275                           indf1	equ	0xFE7
 12276                           postinc1	equ	0xFE6
 12277                           postdec1	equ	0xFE5
 12278                           fsr1h	equ	0xFE2
 12279                           fsr1l	equ	0xFE1
 12280                           indf2	equ	0xFDF
 12281                           postinc2	equ	0xFDE
 12282                           postdec2	equ	0xFDD
 12283                           fsr2h	equ	0xFDA
 12284                           fsr2l	equ	0xFD9
 12285                           status	equ	0xFD8
 12286                           
 12287 ;; *************** function i2_printf *****************
 12288 ;; Defined at:
 12289 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
 12290 ;; Parameters:    Size  Location     Type
 12291 ;;  f               2   34[COMRAM] PTR const unsigned char 
 12292 ;;		 -> STR_26(14), STR_25(15), STR_24(8), STR_1(5), 
 12293 ;;		 -> display1(18), display0(18), 
 12294 ;; Auto vars:     Size  Location     Type
 12295 ;;  printf          4   38[COMRAM] struct __prbuf
 12296 ;;  printf          2   36[COMRAM] PTR void [1]
 12297 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
 12298 ;; Return value:  Size  Location     Type
 12299 ;;                  2   34[COMRAM] int 
 12300 ;; Registers used:
 12301 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12302 ;; Tracked objects:
 12303 ;;		On entry : 0/0
 12304 ;;		On exit  : 0/0
 12305 ;;		Unchanged: 0/0
 12306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12307 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12308 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12310 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12311 ;;Total ram usage:        8 bytes
 12312 ;; Hardware stack levels used:    1
 12313 ;; Hardware stack levels required when called:    3
 12314 ;; This function calls:
 12315 ;;		i2__doprnt
 12316 ;; This function is called by:
 12317 ;;		_keypressed
 12318 ;; This function uses a non-reentrant model
 12319 ;;
 12320                           
 12321                           	psect	text34
 12322  003C26                     __ptext34:
 12323                           	opt stack 0
 12324  003C26                     i2_printf:
 12325                           	opt stack 20
 12326                           
 12327                           ;incstack = 0
 12328  003C26  0E00               	movlw	0
 12329  003C28  6E27               	movwf	i2printf@pb,c
 12330  003C2A  0E00               	movlw	0
 12331  003C2C  6E28               	movwf	i2printf@pb+1,c
 12332  003C2E  0EAC               	movlw	low i2_putch
 12333  003C30  6E29               	movwf	i2printf@pb+2,c
 12334  003C32  0E3D               	movlw	high i2_putch
 12335  003C34  6E2A               	movwf	i2printf@pb+3,c
 12336  003C36  0E25               	movlw	low (?i2_printf+2)
 12337  003C38  6E25               	movwf	i2printf@ap,c
 12338  003C3A  0E00               	movlw	high (?i2_printf+2)
 12339  003C3C  6E26               	movwf	i2printf@ap+1,c
 12340                           
 12341                           ;	Return value of i2_printf is never used
 12342  003C3E  0E27               	movlw	low i2printf@pb
 12343  003C40  6E0D               	movwf	i2__doprnt@pb,c
 12344  003C42  0E00               	movlw	high i2printf@pb
 12345  003C44  6E0E               	movwf	i2__doprnt@pb+1,c
 12346  003C46  C023  F00F         	movff	i2printf@f,i2__doprnt@f
 12347  003C4A  C024  F010         	movff	i2printf@f+1,i2__doprnt@f+1
 12348  003C4E  0E25               	movlw	low i2printf@ap
 12349  003C50  6E11               	movwf	i2__doprnt@ap,c
 12350  003C52  0E00               	movlw	high i2printf@ap
 12351  003C54  6E12               	movwf	i2__doprnt@ap+1,c
 12352  003C56  ECCB  F004         	call	i2__doprnt	;wreg free
 12353  003C5A  0012               	return	
 12354  003C5C                     __end_ofi2_printf:
 12355                           	opt stack 0
 12356                           tosu	equ	0xFFF
 12357                           tosh	equ	0xFFE
 12358                           tosl	equ	0xFFD
 12359                           pclatu	equ	0xFFB
 12360                           pclath	equ	0xFFA
 12361                           tblptru	equ	0xFF8
 12362                           tblptrh	equ	0xFF7
 12363                           tblptrl	equ	0xFF6
 12364                           tablat	equ	0xFF5
 12365                           prodh	equ	0xFF4
 12366                           prodl	equ	0xFF3
 12367                           intcon	equ	0xFF2
 12368                           intcon2	equ	0xFF1
 12369                           intcon3	equ	0xFF0
 12370                           indf0	equ	0xFEF
 12371                           postinc0	equ	0xFEE
 12372                           fsr0h	equ	0xFEA
 12373                           fsr0l	equ	0xFE9
 12374                           wreg	equ	0xFE8
 12375                           indf1	equ	0xFE7
 12376                           postinc1	equ	0xFE6
 12377                           postdec1	equ	0xFE5
 12378                           fsr1h	equ	0xFE2
 12379                           fsr1l	equ	0xFE1
 12380                           indf2	equ	0xFDF
 12381                           postinc2	equ	0xFDE
 12382                           postdec2	equ	0xFDD
 12383                           fsr2h	equ	0xFDA
 12384                           fsr2l	equ	0xFD9
 12385                           status	equ	0xFD8
 12386                           
 12387 ;; *************** function i2__doprnt *****************
 12388 ;; Defined at:
 12389 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12390 ;; Parameters:    Size  Location     Type
 12391 ;;  pb              2   12[COMRAM] PTR struct __prbuf
 12392 ;;		 -> sprintf@pb(4), printf@pb(4), 
 12393 ;;  f               2   14[COMRAM] PTR const unsigned char 
 12394 ;;		 -> STR_26(14), STR_25(15), STR_24(8), STR_23(5), 
 12395 ;;		 -> STR_22(5), STR_21(5), STR_20(5), STR_19(20), 
 12396 ;;		 -> STR_18(20), STR_17(22), STR_16(19), menu(720), 
 12397 ;;		 -> STR_15(15), STR_14(6), STR_13(18), STR_12(19), 
 12398 ;;		 -> STR_11(16), STR_10(12), STR_9(19), STR_8(17), 
 12399 ;;		 -> STR_7(14), STR_6(12), STR_5(16), STR_4(25), 
 12400 ;;		 -> STR_3(23), STR_2(23), STR_1(5), display1(18), 
 12401 ;;		 -> display0(18), 
 12402 ;;  ap              2   16[COMRAM] PTR PTR void 
 12403 ;;		 -> sprintf@ap(2), printf@ap(2), 
 12404 ;; Auto vars:     Size  Location     Type
 12405 ;;  _doprnt         4    0        struct .
 12406 ;;  _doprnt         2   31[COMRAM] int 
 12407 ;;  _doprnt         2   28[COMRAM] unsigned int 
 12408 ;;  _doprnt         2   26[COMRAM] PTR const unsigned char 
 12409 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_27(7), 
 12410 ;;		 -> _doprnt@c(1), ADRESH(1), menu(720), ndisplay1(18), 
 12411 ;;		 -> ndisplay0(18), 
 12412 ;;  _doprnt         2   24[COMRAM] unsigned int 
 12413 ;;  _doprnt         1   33[COMRAM] char 
 12414 ;;  _doprnt         1   30[COMRAM] unsigned char 
 12415 ;;  _doprnt         1   23[COMRAM] char 
 12416 ;;  _doprnt         1   22[COMRAM] unsigned char 
 12417 ;; Return value:  Size  Location     Type
 12418 ;;                  2   12[COMRAM] int 
 12419 ;; Registers used:
 12420 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12421 ;; Tracked objects:
 12422 ;;		On entry : 0/0
 12423 ;;		On exit  : 0/0
 12424 ;;		Unchanged: 0/0
 12425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12426 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12427 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12428 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12429 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12430 ;;Total ram usage:       22 bytes
 12431 ;; Hardware stack levels used:    1
 12432 ;; Hardware stack levels required when called:    2
 12433 ;; This function calls:
 12434 ;;		Absolute function
 12435 ;;		i2___lwdiv
 12436 ;;		i2___lwmod
 12437 ;;		i2___wmul
 12438 ;;		i2_isdigit
 12439 ;;		i2_putch
 12440 ;; This function is called by:
 12441 ;;		i2_printf
 12442 ;; This function uses a non-reentrant model
 12443 ;;
 12444                           
 12445                           	psect	text35
 12446  000996                     __ptext35:
 12447                           	opt stack 0
 12448  000996                     i2__doprnt:
 12449                           	opt stack 20
 12450                           
 12451                           ;doprnt.c: 499: signed char c;
 12452                           ;doprnt.c: 501: int width;
 12453                           ;doprnt.c: 506: signed char prec;
 12454                           ;doprnt.c: 508: unsigned char flag;
 12455                           ;doprnt.c: 523: union {
 12456                           ;doprnt.c: 524: unsigned long vd;
 12457                           ;doprnt.c: 525: double integ;
 12458                           ;doprnt.c: 526: } tmpval;
 12459                           ;doprnt.c: 528: unsigned int val;
 12460                           ;doprnt.c: 529: unsigned len;
 12461                           ;doprnt.c: 530: const char * cp;
 12462                           ;doprnt.c: 536: while(c = *f++) {
 12463                           
 12464                           ;incstack = 0
 12465  000996  EFD6  F008         	goto	i2l8325
 12466  00099A                     i2l8119:
 12467                           
 12468                           ;doprnt.c: 538: if(c != '%')
 12469  00099A  0E25               	movlw	37
 12470  00099C  1822               	xorwf	i2__doprnt@c,w,c
 12471  00099E  B4D8               	btfsc	status,2,c
 12472  0009A0  D036               	goto	i2l8129
 12473                           
 12474                           ;doprnt.c: 540: {
 12475                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 12476  0009A2  EE20 F002          	lfsr	2,2
 12477  0009A6  500D               	movf	i2__doprnt@pb,w,c
 12478  0009A8  26D9               	addwf	fsr2l,f,c
 12479  0009AA  500E               	movf	i2__doprnt@pb+1,w,c
 12480  0009AC  22DA               	addwfc	fsr2h,f,c
 12481  0009AE  50DE               	movf	postinc2,w,c
 12482  0009B0  10DE               	iorwf	postinc2,w,c
 12483  0009B2  B4D8               	btfsc	status,2,c
 12484  0009B4  D016               	goto	i2l8125
 12485  0009B6  EE20 F002          	lfsr	2,2
 12486  0009BA  500D               	movf	i2__doprnt@pb,w,c
 12487  0009BC  26D9               	addwf	fsr2l,f,c
 12488  0009BE  500E               	movf	i2__doprnt@pb+1,w,c
 12489  0009C0  22DA               	addwfc	fsr2h,f,c
 12490  0009C2  CFDE F013          	movff	postinc2,??i2__doprnt
 12491  0009C6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12492  0009CA  D801               	call	i2u1310_48
 12493  0009CC  D3EF               	goto	i2l8325
 12494  0009CE                     i2u1310_48:
 12495  0009CE  0005               	push	
 12496  0009D0  6EFA               	movwf	pclath,c
 12497  0009D2  5013               	movf	??i2__doprnt,w,c
 12498  0009D4  6EFD               	movwf	tosl,c
 12499  0009D6  5014               	movf	??i2__doprnt+1,w,c
 12500  0009D8  6EFE               	movwf	tosh,c
 12501  0009DA  6AFF               	clrf	tosu,c
 12502  0009DC  50FA               	movf	pclath,w,c
 12503  0009DE  5022               	movf	i2__doprnt@c,w,c
 12504  0009E0  0012               	return		;indir
 12505  0009E2                     i2l8125:
 12506  0009E2  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12507  0009E6  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12508  0009EA  CFDE F013          	movff	postinc2,??i2__doprnt
 12509  0009EE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12510  0009F2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12511  0009F6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12512  0009FA  C022  FFDF         	movff	i2__doprnt@c,indf2
 12513  0009FE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12514  000A02  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12515  000A06  2ADE               	incf	postinc2,f,c
 12516  000A08  0E00               	movlw	0
 12517  000A0A  22DD               	addwfc	postdec2,f,c
 12518                           
 12519                           ;doprnt.c: 542: continue;
 12520  000A0C  D3CF               	goto	i2l8325
 12521  000A0E                     i2l8129:
 12522                           
 12523                           ;doprnt.c: 543: }
 12524                           ;doprnt.c: 546: width = 0;
 12525  000A0E  0E00               	movlw	0
 12526  000A10  6E21               	movwf	i2__doprnt@width+1,c
 12527  000A12  0E00               	movlw	0
 12528  000A14  6E20               	movwf	i2__doprnt@width,c
 12529                           
 12530                           ;doprnt.c: 548: flag = 0;
 12531  000A16  0E00               	movlw	0
 12532  000A18  6E1F               	movwf	i2__doprnt@flag,c
 12533                           
 12534                           ;doprnt.c: 551: switch(*f) {
 12535                           
 12536                           ;doprnt.c: 550: for(;;) {
 12537  000A1A  D003               	goto	i2l8135
 12538  000A1C                     i2l8131:
 12539                           
 12540                           ;doprnt.c: 580: flag |= 0x04;
 12541  000A1C  841F               	bsf	i2__doprnt@flag,2,c
 12542                           
 12543                           ;doprnt.c: 581: f++;
 12544  000A1E  4A0F               	infsnz	i2__doprnt@f,f,c
 12545  000A20  2A10               	incf	i2__doprnt@f+1,f,c
 12546  000A22                     i2l8135:
 12547  000A22  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 12548  000A26  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 12549  000A2A  0E00               	movlw	low (__mediumconst shr (0+16))
 12550  000A2C  6EF8               	movwf	tblptru,c
 12551  000A2E  0E0F               	movlw	(high __ramtop+-1)
 12552  000A30  64F7               	cpfsgt	tblptrh,c
 12553  000A32  D003               	bra	i2u1311_47
 12554  000A34  0008               	tblrd		*
 12555  000A36  50F5               	movf	tablat,w,c
 12556  000A38  D005               	bra	i2u1311_40
 12557  000A3A                     i2u1311_47:
 12558  000A3A  CFF6 FFE9          	movff	tblptrl,fsr0l
 12559  000A3E  CFF7 FFEA          	movff	tblptrh,fsr0h
 12560  000A42  50EF               	movf	indf0,w,c
 12561  000A44                     i2u1311_40:
 12562                           
 12563                           ; Switch size 1, requested type "space"
 12564                           ; Number of cases is 1, Range of values is 48 to 48
 12565                           ; switch strategies available:
 12566                           ; Name         Instructions Cycles
 12567                           ; simple_byte            4     3 (average)
 12568                           ;	Chosen strategy is simple_byte
 12569  000A44  0A30               	xorlw	48	; case 48
 12570  000A46  B4D8               	btfsc	status,2,c
 12571  000A48  D7E9               	goto	i2l8131
 12572                           
 12573                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12574                           
 12575                           ;doprnt.c: 586: }
 12576                           
 12577                           ;doprnt.c: 585: break;
 12578  000A4A  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 12579  000A4E  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 12580  000A52  0E00               	movlw	low (__mediumconst shr (0+16))
 12581  000A54  6EF8               	movwf	tblptru,c
 12582  000A56  0E0F               	movlw	(high __ramtop+-1)
 12583  000A58  64F7               	cpfsgt	tblptrh,c
 12584  000A5A  D003               	bra	i2u1312_47
 12585  000A5C  0008               	tblrd		*
 12586  000A5E  50F5               	movf	tablat,w,c
 12587  000A60  D005               	bra	i2u1312_40
 12588  000A62                     i2u1312_47:
 12589  000A62  CFF6 FFE9          	movff	tblptrl,fsr0l
 12590  000A66  CFF7 FFEA          	movff	tblptrh,fsr0h
 12591  000A6A  50EF               	movf	indf0,w,c
 12592  000A6C                     i2u1312_40:
 12593  000A6C  EC9C  F01E         	call	i2_isdigit
 12594  000A70  A0D8               	btfss	status,0,c
 12595  000A72  D154               	goto	i2l8201
 12596                           
 12597                           ;doprnt.c: 598: width = 0;
 12598  000A74  0E00               	movlw	0
 12599  000A76  6E21               	movwf	i2__doprnt@width+1,c
 12600  000A78  0E00               	movlw	0
 12601  000A7A  6E20               	movwf	i2__doprnt@width,c
 12602  000A7C                     i2l8141:
 12603                           
 12604                           ;doprnt.c: 600: width *= 10;
 12605  000A7C  C020  F001         	movff	i2__doprnt@width,i2___wmul@multiplier
 12606  000A80  C021  F002         	movff	i2__doprnt@width+1,i2___wmul@multiplier+1
 12607  000A84  0E00               	movlw	0
 12608  000A86  6E04               	movwf	i2___wmul@multiplicand+1,c
 12609  000A88  0E0A               	movlw	10
 12610  000A8A  6E03               	movwf	i2___wmul@multiplicand,c
 12611  000A8C  EC89  F01E         	call	i2___wmul	;wreg free
 12612  000A90  C001  F020         	movff	?i2___wmul,i2__doprnt@width
 12613  000A94  C002  F021         	movff	?i2___wmul+1,i2__doprnt@width+1
 12614                           
 12615                           ;doprnt.c: 601: width += *f++ - '0';
 12616  000A98  0ED0               	movlw	208
 12617  000A9A  6E13               	movwf	??i2__doprnt& (0+255),c
 12618  000A9C  0EFF               	movlw	255
 12619  000A9E  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 12620  000AA0  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 12621  000AA4  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 12622  000AA8  0E00               	movlw	low (__mediumconst shr (0+16))
 12623  000AAA  6EF8               	movwf	tblptru,c
 12624  000AAC  0E0F               	movlw	(high __ramtop+-1)
 12625  000AAE  64F7               	cpfsgt	tblptrh,c
 12626  000AB0  D003               	bra	i2u1314_47
 12627  000AB2  0008               	tblrd		*
 12628  000AB4  50F5               	movf	tablat,w,c
 12629  000AB6  D005               	bra	i2u1314_40
 12630  000AB8                     i2u1314_47:
 12631  000AB8  CFF6 FFE9          	movff	tblptrl,fsr0l
 12632  000ABC  CFF7 FFEA          	movff	tblptrh,fsr0h
 12633  000AC0  50EF               	movf	indf0,w,c
 12634  000AC2                     i2u1314_40:
 12635  000AC2  6E15               	movwf	(??i2__doprnt+2)& (0+255),c
 12636  000AC4  6A16               	clrf	(??i2__doprnt+3)& (0+255),c
 12637  000AC6  5013               	movf	??i2__doprnt,w,c
 12638  000AC8  2615               	addwf	??i2__doprnt+2,f,c
 12639  000ACA  5014               	movf	??i2__doprnt+1,w,c
 12640  000ACC  2216               	addwfc	??i2__doprnt+3,f,c
 12641  000ACE  5015               	movf	??i2__doprnt+2,w,c
 12642  000AD0  2620               	addwf	i2__doprnt@width,f,c
 12643  000AD2  5016               	movf	??i2__doprnt+3,w,c
 12644  000AD4  2221               	addwfc	i2__doprnt@width+1,f,c
 12645  000AD6  4A0F               	infsnz	i2__doprnt@f,f,c
 12646  000AD8  2A10               	incf	i2__doprnt@f+1,f,c
 12647                           
 12648                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12649  000ADA  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 12650  000ADE  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 12651  000AE2  0E00               	movlw	low (__mediumconst shr (0+16))
 12652  000AE4  6EF8               	movwf	tblptru,c
 12653  000AE6  0E0F               	movlw	(high __ramtop+-1)
 12654  000AE8  64F7               	cpfsgt	tblptrh,c
 12655  000AEA  D003               	bra	i2u1315_47
 12656  000AEC  0008               	tblrd		*
 12657  000AEE  50F5               	movf	tablat,w,c
 12658  000AF0  D005               	bra	i2u1315_40
 12659  000AF2                     i2u1315_47:
 12660  000AF2  CFF6 FFE9          	movff	tblptrl,fsr0l
 12661  000AF6  CFF7 FFEA          	movff	tblptrh,fsr0h
 12662  000AFA  50EF               	movf	indf0,w,c
 12663  000AFC                     i2u1315_40:
 12664  000AFC  EC9C  F01E         	call	i2_isdigit
 12665  000B00  A0D8               	btfss	status,0,c
 12666  000B02  D10C               	goto	i2l8201
 12667  000B04  D7BB               	goto	i2l8141
 12668  000B06                     i2l8149:
 12669                           
 12670                           ;doprnt.c: 721: flag |= 0x80;
 12671  000B06  8E1F               	bsf	i2__doprnt@flag,7,c
 12672                           
 12673                           ;doprnt.c: 723: break;
 12674  000B08  D135               	goto	i2l536
 12675  000B0A                     i2l8151:
 12676                           
 12677                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12678  000B0A  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 12679  000B0E  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 12680  000B12  CFDF F013          	movff	indf2,??i2__doprnt
 12681  000B16  0E02               	movlw	2
 12682  000B18  26DE               	addwf	postinc2,f,c
 12683  000B1A  CFDF F014          	movff	indf2,??i2__doprnt+1
 12684  000B1E  0E00               	movlw	0
 12685  000B20  22DD               	addwfc	postdec2,f,c
 12686  000B22  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12687  000B26  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12688  000B2A  CFDE F01B          	movff	postinc2,i2__doprnt@cp
 12689  000B2E  CFDD F01C          	movff	postdec2,i2__doprnt@cp+1
 12690                           
 12691                           ;doprnt.c: 740: if(!cp)
 12692  000B32  501B               	movf	i2__doprnt@cp,w,c
 12693  000B34  101C               	iorwf	i2__doprnt@cp+1,w,c
 12694  000B36  A4D8               	btfss	status,2,c
 12695  000B38  D004               	goto	i2l8157
 12696                           
 12697                           ;doprnt.c: 741: cp = "(null)";
 12698  000B3A  0EED               	movlw	low STR_27
 12699  000B3C  6E1B               	movwf	i2__doprnt@cp,c
 12700  000B3E  0EFF               	movlw	high STR_27
 12701  000B40  6E1C               	movwf	i2__doprnt@cp+1,c
 12702  000B42                     i2l8157:
 12703                           
 12704                           ;doprnt.c: 745: len = 0;
 12705  000B42  0E00               	movlw	0
 12706  000B44  6E1A               	movwf	i2__doprnt@len+1,c
 12707  000B46  0E00               	movlw	0
 12708  000B48  6E19               	movwf	i2__doprnt@len,c
 12709                           
 12710                           ;doprnt.c: 746: while(cp[len])
 12711  000B4A  D002               	goto	i2l8161
 12712  000B4C                     i2l8159:
 12713                           
 12714                           ;doprnt.c: 747: len++;
 12715  000B4C  4A19               	infsnz	i2__doprnt@len,f,c
 12716  000B4E  2A1A               	incf	i2__doprnt@len+1,f,c
 12717  000B50                     i2l8161:
 12718  000B50  5019               	movf	i2__doprnt@len,w,c
 12719  000B52  241B               	addwf	i2__doprnt@cp,w,c
 12720  000B54  6E13               	movwf	??i2__doprnt& (0+255),c
 12721  000B56  501A               	movf	i2__doprnt@len+1,w,c
 12722  000B58  201C               	addwfc	i2__doprnt@cp+1,w,c
 12723  000B5A  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 12724  000B5C  C013  FFF6         	movff	??i2__doprnt,tblptrl
 12725  000B60  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 12726  000B64  0E00               	movlw	low (__mediumconst shr (0+16))
 12727  000B66  6EF8               	movwf	tblptru,c
 12728  000B68  0E0F               	movlw	(high __ramtop+-1)
 12729  000B6A  64F7               	cpfsgt	tblptrh,c
 12730  000B6C  D003               	bra	i2u1318_47
 12731  000B6E  0008               	tblrd		*
 12732  000B70  50F5               	movf	tablat,w,c
 12733  000B72  D005               	bra	i2u1318_40
 12734  000B74                     i2u1318_47:
 12735  000B74  CFF6 FFE9          	movff	tblptrl,fsr0l
 12736  000B78  CFF7 FFEA          	movff	tblptrh,fsr0h
 12737  000B7C  50EF               	movf	indf0,w,c
 12738  000B7E                     i2u1318_40:
 12739  000B7E  0900               	iorlw	0
 12740  000B80  A4D8               	btfss	status,2,c
 12741  000B82  D7E4               	goto	i2l8159
 12742  000B84                     i2l8163:
 12743                           
 12744                           ;doprnt.c: 757: if(width > len)
 12745  000B84  5020               	movf	i2__doprnt@width,w,c
 12746  000B86  5C19               	subwf	i2__doprnt@len,w,c
 12747  000B88  5021               	movf	i2__doprnt@width+1,w,c
 12748  000B8A  581A               	subwfb	i2__doprnt@len+1,w,c
 12749  000B8C  B0D8               	btfsc	status,0,c
 12750  000B8E  D005               	goto	i2l8167
 12751                           
 12752                           ;doprnt.c: 758: width -= len;
 12753  000B90  5019               	movf	i2__doprnt@len,w,c
 12754  000B92  5E20               	subwf	i2__doprnt@width,f,c
 12755  000B94  501A               	movf	i2__doprnt@len+1,w,c
 12756  000B96  5A21               	subwfb	i2__doprnt@width+1,f,c
 12757  000B98  D03A               	goto	i2l8177
 12758  000B9A                     i2l8167:
 12759                           
 12760                           ;doprnt.c: 759: else
 12761                           ;doprnt.c: 760: width = 0;
 12762  000B9A  0E00               	movlw	0
 12763  000B9C  6E21               	movwf	i2__doprnt@width+1,c
 12764  000B9E  0E00               	movlw	0
 12765  000BA0  6E20               	movwf	i2__doprnt@width,c
 12766                           
 12767                           ;doprnt.c: 764: while(width--)
 12768  000BA2  D035               	goto	i2l8177
 12769  000BA4                     i2l8169:
 12770                           
 12771                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 12772  000BA4  EE20 F002          	lfsr	2,2
 12773  000BA8  500D               	movf	i2__doprnt@pb,w,c
 12774  000BAA  26D9               	addwf	fsr2l,f,c
 12775  000BAC  500E               	movf	i2__doprnt@pb+1,w,c
 12776  000BAE  22DA               	addwfc	fsr2h,f,c
 12777  000BB0  50DE               	movf	postinc2,w,c
 12778  000BB2  10DE               	iorwf	postinc2,w,c
 12779  000BB4  B4D8               	btfsc	status,2,c
 12780  000BB6  D016               	goto	i2l8173
 12781  000BB8  EE20 F002          	lfsr	2,2
 12782  000BBC  500D               	movf	i2__doprnt@pb,w,c
 12783  000BBE  26D9               	addwf	fsr2l,f,c
 12784  000BC0  500E               	movf	i2__doprnt@pb+1,w,c
 12785  000BC2  22DA               	addwfc	fsr2h,f,c
 12786  000BC4  CFDE F013          	movff	postinc2,??i2__doprnt
 12787  000BC8  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12788  000BCC  D801               	call	i2u1322_48
 12789  000BCE  D01F               	goto	i2l8177
 12790  000BD0                     i2u1322_48:
 12791  000BD0  0005               	push	
 12792  000BD2  6EFA               	movwf	pclath,c
 12793  000BD4  5013               	movf	??i2__doprnt,w,c
 12794  000BD6  6EFD               	movwf	tosl,c
 12795  000BD8  5014               	movf	??i2__doprnt+1,w,c
 12796  000BDA  6EFE               	movwf	tosh,c
 12797  000BDC  6AFF               	clrf	tosu,c
 12798  000BDE  50FA               	movf	pclath,w,c
 12799  000BE0  0E20               	movlw	32
 12800  000BE2  0012               	return		;indir
 12801  000BE4                     i2l8173:
 12802  000BE4  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12803  000BE8  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12804  000BEC  CFDE F013          	movff	postinc2,??i2__doprnt
 12805  000BF0  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12806  000BF4  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12807  000BF8  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12808  000BFC  0E20               	movlw	32
 12809  000BFE  6EDF               	movwf	indf2,c
 12810  000C00  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12811  000C04  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12812  000C08  2ADE               	incf	postinc2,f,c
 12813  000C0A  0E00               	movlw	0
 12814  000C0C  22DD               	addwfc	postdec2,f,c
 12815  000C0E                     i2l8177:
 12816  000C0E  0620               	decf	i2__doprnt@width,f,c
 12817  000C10  A0D8               	btfss	status,0,c
 12818  000C12  0621               	decf	i2__doprnt@width+1,f,c
 12819  000C14  2820               	incf	i2__doprnt@width,w,c
 12820  000C16  E1C6               	bnz	i2l8169
 12821  000C18  2821               	incf	i2__doprnt@width+1,w,c
 12822  000C1A  B4D8               	btfsc	status,2,c
 12823  000C1C  D05B               	goto	i2l8191
 12824  000C1E  D7C2               	goto	i2l8169
 12825  000C20                     i2l8179:
 12826                           
 12827                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 12828  000C20  EE20 F002          	lfsr	2,2
 12829  000C24  500D               	movf	i2__doprnt@pb,w,c
 12830  000C26  26D9               	addwf	fsr2l,f,c
 12831  000C28  500E               	movf	i2__doprnt@pb+1,w,c
 12832  000C2A  22DA               	addwfc	fsr2h,f,c
 12833  000C2C  50DE               	movf	postinc2,w,c
 12834  000C2E  10DE               	iorwf	postinc2,w,c
 12835  000C30  B4D8               	btfsc	status,2,c
 12836  000C32  D029               	goto	i2l8185
 12837  000C34  EE20 F002          	lfsr	2,2
 12838  000C38  500D               	movf	i2__doprnt@pb,w,c
 12839  000C3A  26D9               	addwf	fsr2l,f,c
 12840  000C3C  500E               	movf	i2__doprnt@pb+1,w,c
 12841  000C3E  22DA               	addwfc	fsr2h,f,c
 12842  000C40  CFDE F013          	movff	postinc2,??i2__doprnt
 12843  000C44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12844  000C48  D801               	call	i2u1325_48
 12845  000C4A  D01A               	goto	i2l8183
 12846  000C4C                     i2u1325_48:
 12847  000C4C  0005               	push	
 12848  000C4E  6EFA               	movwf	pclath,c
 12849  000C50  5013               	movf	??i2__doprnt,w,c
 12850  000C52  6EFD               	movwf	tosl,c
 12851  000C54  5014               	movf	??i2__doprnt+1,w,c
 12852  000C56  6EFE               	movwf	tosh,c
 12853  000C58  6AFF               	clrf	tosu,c
 12854  000C5A  50FA               	movf	pclath,w,c
 12855  000C5C  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 12856  000C60  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 12857  000C64  0E00               	movlw	low (__mediumconst shr (0+16))
 12858  000C66  6EF8               	movwf	tblptru,c
 12859  000C68  0E0F               	movlw	(high __ramtop+-1)
 12860  000C6A  64F7               	cpfsgt	tblptrh,c
 12861  000C6C  D003               	bra	i2u1326_47
 12862  000C6E  0008               	tblrd		*
 12863  000C70  50F5               	movf	tablat,w,c
 12864  000C72  D005               	bra	i2u1326_40
 12865  000C74                     i2u1326_47:
 12866  000C74  CFF6 FFE9          	movff	tblptrl,fsr0l
 12867  000C78  CFF7 FFEA          	movff	tblptrh,fsr0h
 12868  000C7C  50EF               	movf	indf0,w,c
 12869  000C7E                     i2u1326_40:
 12870  000C7E  0012               	return		;indir
 12871  000C80                     i2l8183:
 12872  000C80  4A1B               	infsnz	i2__doprnt@cp,f,c
 12873  000C82  2A1C               	incf	i2__doprnt@cp+1,f,c
 12874  000C84  D027               	goto	i2l8191
 12875  000C86                     i2l8185:
 12876  000C86  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 12877  000C8A  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 12878  000C8E  0E00               	movlw	low (__mediumconst shr (0+16))
 12879  000C90  6EF8               	movwf	tblptru,c
 12880  000C92  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12881  000C96  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12882  000C9A  CFDE F013          	movff	postinc2,??i2__doprnt
 12883  000C9E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12884  000CA2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12885  000CA6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12886  000CAA  0E0F               	movlw	(high __ramtop+-1)
 12887  000CAC  64F7               	cpfsgt	tblptrh,c
 12888  000CAE  D003               	bra	i2u1327_47
 12889  000CB0  0008               	tblrd		*
 12890  000CB2  50F5               	movf	tablat,w,c
 12891  000CB4  D005               	bra	i2u1327_40
 12892  000CB6                     i2u1327_47:
 12893  000CB6  CFF6 FFE9          	movff	tblptrl,fsr0l
 12894  000CBA  CFF7 FFEA          	movff	tblptrh,fsr0h
 12895  000CBE  50EF               	movf	indf0,w,c
 12896  000CC0                     i2u1327_40:
 12897  000CC0  6EDF               	movwf	indf2,c
 12898  000CC2  4A1B               	infsnz	i2__doprnt@cp,f,c
 12899  000CC4  2A1C               	incf	i2__doprnt@cp+1,f,c
 12900  000CC6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12901  000CCA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12902  000CCE  2ADE               	incf	postinc2,f,c
 12903  000CD0  0E00               	movlw	0
 12904  000CD2  22DD               	addwfc	postdec2,f,c
 12905  000CD4                     i2l8191:
 12906  000CD4  0619               	decf	i2__doprnt@len,f,c
 12907  000CD6  A0D8               	btfss	status,0,c
 12908  000CD8  061A               	decf	i2__doprnt@len+1,f,c
 12909  000CDA  2819               	incf	i2__doprnt@len,w,c
 12910  000CDC  E1A1               	bnz	i2l8179
 12911  000CDE  281A               	incf	i2__doprnt@len+1,w,c
 12912  000CE0  B4D8               	btfsc	status,2,c
 12913  000CE2  D264               	goto	i2l8325
 12914  000CE4  D79D               	goto	i2l8179
 12915  000CE6                     i2l8193:
 12916                           
 12917                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 12918  000CE6  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 12919  000CEA  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 12920  000CEE  CFDF F013          	movff	indf2,??i2__doprnt
 12921  000CF2  0E02               	movlw	2
 12922  000CF4  26DE               	addwf	postinc2,f,c
 12923  000CF6  CFDF F014          	movff	indf2,??i2__doprnt+1
 12924  000CFA  0E00               	movlw	0
 12925  000CFC  22DD               	addwfc	postdec2,f,c
 12926  000CFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12927  000D02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12928  000D06  50DF               	movf	indf2,w,c
 12929  000D08  6E22               	movwf	i2__doprnt@c,c
 12930  000D0A                     i2l8195:
 12931                           
 12932                           ;doprnt.c: 805: cp = (char *)&c;
 12933  000D0A  0E22               	movlw	low i2__doprnt@c
 12934  000D0C  6E1B               	movwf	i2__doprnt@cp,c
 12935  000D0E  0E00               	movlw	high i2__doprnt@c
 12936  000D10  6E1C               	movwf	i2__doprnt@cp+1,c
 12937                           
 12938                           ;doprnt.c: 806: len = 1;
 12939  000D12  0E00               	movlw	0
 12940  000D14  6E1A               	movwf	i2__doprnt@len+1,c
 12941  000D16  0E01               	movlw	1
 12942  000D18  6E19               	movwf	i2__doprnt@len,c
 12943                           
 12944                           ;doprnt.c: 807: goto dostring;
 12945  000D1A  D734               	goto	i2l8163
 12946  000D1C                     i2l8201:
 12947  000D1C  500F               	movf	i2__doprnt@f,w,c
 12948  000D1E  6E13               	movwf	??i2__doprnt& (0+255),c
 12949  000D20  5010               	movf	i2__doprnt@f+1,w,c
 12950  000D22  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 12951  000D24  4A0F               	infsnz	i2__doprnt@f,f,c
 12952  000D26  2A10               	incf	i2__doprnt@f+1,f,c
 12953  000D28  C013  FFF6         	movff	??i2__doprnt,tblptrl
 12954  000D2C  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 12955  000D30  0E00               	movlw	low (__mediumconst shr (0+16))
 12956  000D32  6EF8               	movwf	tblptru,c
 12957  000D34  0E0F               	movlw	(high __ramtop+-1)
 12958  000D36  64F7               	cpfsgt	tblptrh,c
 12959  000D38  D003               	bra	i2u1329_47
 12960  000D3A  0008               	tblrd		*
 12961  000D3C  50F5               	movf	tablat,w,c
 12962  000D3E  D005               	bra	i2u1329_40
 12963  000D40                     i2u1329_47:
 12964  000D40  CFF6 FFE9          	movff	tblptrl,fsr0l
 12965  000D44  CFF7 FFEA          	movff	tblptrh,fsr0h
 12966  000D48  50EF               	movf	indf0,w,c
 12967  000D4A                     i2u1329_40:
 12968  000D4A  6E22               	movwf	i2__doprnt@c,c
 12969  000D4C  5022               	movf	i2__doprnt@c,w,c
 12970                           
 12971                           ; Switch size 1, requested type "space"
 12972                           ; Number of cases is 6, Range of values is 0 to 120
 12973                           ; switch strategies available:
 12974                           ; Name         Instructions Cycles
 12975                           ; simple_byte           19    10 (average)
 12976                           ;	Chosen strategy is simple_byte
 12977  000D4E  0A00               	xorlw	0	; case 0
 12978  000D50  B4D8               	btfsc	status,2,c
 12979  000D52  D248               	goto	i2l8327
 12980  000D54  0A63               	xorlw	99	; case 99
 12981  000D56  B4D8               	btfsc	status,2,c
 12982  000D58  D7C6               	goto	i2l8193
 12983  000D5A  0A07               	xorlw	7	; case 100
 12984  000D5C  B4D8               	btfsc	status,2,c
 12985  000D5E  D00A               	goto	i2l536
 12986  000D60  0A0D               	xorlw	13	; case 105
 12987  000D62  B4D8               	btfsc	status,2,c
 12988  000D64  D007               	goto	i2l536
 12989  000D66  0A1A               	xorlw	26	; case 115
 12990  000D68  B4D8               	btfsc	status,2,c
 12991  000D6A  D6CF               	goto	i2l8151
 12992  000D6C  0A0B               	xorlw	11	; case 120
 12993  000D6E  B4D8               	btfsc	status,2,c
 12994  000D70  D6CA               	goto	i2l8149
 12995  000D72  D7CB               	goto	i2l8195
 12996  000D74                     i2l536:
 12997                           
 12998                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 12999  000D74  BE1F               	btfsc	i2__doprnt@flag,7,c
 13000  000D76  D01D               	goto	i2l8211
 13001                           
 13002                           ;doprnt.c: 1253: {
 13003                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13004  000D78  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 13005  000D7C  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 13006  000D80  CFDF F013          	movff	indf2,??i2__doprnt
 13007  000D84  0E02               	movlw	2
 13008  000D86  26DE               	addwf	postinc2,f,c
 13009  000D88  CFDF F014          	movff	indf2,??i2__doprnt+1
 13010  000D8C  0E00               	movlw	0
 13011  000D8E  22DD               	addwfc	postdec2,f,c
 13012  000D90  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13013  000D94  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13014  000D98  CFDE F01D          	movff	postinc2,i2__doprnt@val
 13015  000D9C  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 13016                           
 13017                           ;doprnt.c: 1261: if((int)val < 0) {
 13018  000DA0  AE1E               	btfss	i2__doprnt@val+1,7,c
 13019  000DA2  D052               	goto	i2l8243
 13020                           
 13021                           ;doprnt.c: 1262: flag |= 0x03;
 13022  000DA4  0E03               	movlw	3
 13023  000DA6  121F               	iorwf	i2__doprnt@flag,f,c
 13024                           
 13025                           ;doprnt.c: 1263: val = -val;
 13026  000DA8  6C1D               	negf	i2__doprnt@val,c
 13027  000DAA  1E1E               	comf	i2__doprnt@val+1,f,c
 13028  000DAC  B0D8               	btfsc	status,0,c
 13029  000DAE  2A1E               	incf	i2__doprnt@val+1,f,c
 13030                           
 13031                           ;doprnt.c: 1264: }
 13032                           ;doprnt.c: 1266: }
 13033  000DB0  D04B               	goto	i2l8243
 13034  000DB2                     i2l8211:
 13035                           
 13036                           ;doprnt.c: 1268: else
 13037                           ;doprnt.c: 1273: {
 13038                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13039  000DB2  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 13040  000DB6  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 13041  000DBA  CFDF F013          	movff	indf2,??i2__doprnt
 13042  000DBE  0E02               	movlw	2
 13043  000DC0  26DE               	addwf	postinc2,f,c
 13044  000DC2  CFDF F014          	movff	indf2,??i2__doprnt+1
 13045  000DC6  0E00               	movlw	0
 13046  000DC8  22DD               	addwfc	postdec2,f,c
 13047  000DCA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13048  000DCE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13049  000DD2  CFDE F01D          	movff	postinc2,i2__doprnt@val
 13050  000DD6  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 13051                           
 13052                           ;doprnt.c: 1287: }
 13053                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 13054  000DDA  D036               	goto	i2l8243
 13055  000DDC                     i2l8213:
 13056                           
 13057                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13058  000DDC  0E01               	movlw	1
 13059  000DDE  6E22               	movwf	i2__doprnt@c,c
 13060  000DE0                     i2l8215:
 13061  000DE0  0E05               	movlw	5
 13062  000DE2  1822               	xorwf	i2__doprnt@c,w,c
 13063  000DE4  B4D8               	btfsc	status,2,c
 13064  000DE6  D038               	goto	i2l8245
 13065                           
 13066                           ;doprnt.c: 1306: if(val < dpowers[c])
 13067  000DE8  5022               	movf	i2__doprnt@c,w,c
 13068  000DEA  0D02               	mullw	2
 13069  000DEC  0E68               	movlw	low _dpowers
 13070  000DEE  24F3               	addwf	prodl,w,c
 13071  000DF0  6EF6               	movwf	tblptrl,c
 13072  000DF2  0EFE               	movlw	high _dpowers
 13073  000DF4  20F4               	addwfc	prodh,w,c
 13074  000DF6  6EF7               	movwf	tblptrh,c
 13075  000DF8                     	if	1	;There are 3 active tblptr bytes
 13076  000DF8  6AF8               	clrf	tblptru,c
 13077  000DFA  0E00               	movlw	low (__mediumconst shr (0+16))
 13078  000DFC  22F8               	addwfc	tblptru,f,c
 13079  000DFE                     	endif
 13080  000DFE  0009               	tblrd		*+
 13081  000E00  50F5               	movf	tablat,w,c
 13082  000E02  5C1D               	subwf	i2__doprnt@val,w,c
 13083  000E04  0009               	tblrd		*+
 13084  000E06  50F5               	movf	tablat,w,c
 13085  000E08  581E               	subwfb	i2__doprnt@val+1,w,c
 13086  000E0A  A0D8               	btfss	status,0,c
 13087  000E0C  D025               	goto	i2l8245
 13088                           
 13089                           ;doprnt.c: 1307: break;
 13090  000E0E  2A22               	incf	i2__doprnt@c,f,c
 13091  000E10  D7E7               	goto	i2l8215
 13092  000E12                     i2l8227:
 13093                           
 13094                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 13095  000E12  0E01               	movlw	1
 13096  000E14  6E22               	movwf	i2__doprnt@c,c
 13097  000E16                     i2l8229:
 13098  000E16  0E04               	movlw	4
 13099  000E18  1822               	xorwf	i2__doprnt@c,w,c
 13100  000E1A  B4D8               	btfsc	status,2,c
 13101  000E1C  D01D               	goto	i2l8245
 13102                           
 13103                           ;doprnt.c: 1317: if(val < hexpowers[c])
 13104  000E1E  5022               	movf	i2__doprnt@c,w,c
 13105  000E20  0D02               	mullw	2
 13106  000E22  0E72               	movlw	low _hexpowers
 13107  000E24  24F3               	addwf	prodl,w,c
 13108  000E26  6EF6               	movwf	tblptrl,c
 13109  000E28  0EFE               	movlw	high _hexpowers
 13110  000E2A  20F4               	addwfc	prodh,w,c
 13111  000E2C  6EF7               	movwf	tblptrh,c
 13112  000E2E                     	if	1	;There are 3 active tblptr bytes
 13113  000E2E  6AF8               	clrf	tblptru,c
 13114  000E30  0E00               	movlw	low (__mediumconst shr (0+16))
 13115  000E32  22F8               	addwfc	tblptru,f,c
 13116  000E34                     	endif
 13117  000E34  0009               	tblrd		*+
 13118  000E36  50F5               	movf	tablat,w,c
 13119  000E38  5C1D               	subwf	i2__doprnt@val,w,c
 13120  000E3A  0009               	tblrd		*+
 13121  000E3C  50F5               	movf	tablat,w,c
 13122  000E3E  581E               	subwfb	i2__doprnt@val+1,w,c
 13123  000E40  A0D8               	btfss	status,0,c
 13124  000E42  D00A               	goto	i2l8245
 13125                           
 13126                           ;doprnt.c: 1318: break;
 13127  000E44  2A22               	incf	i2__doprnt@c,f,c
 13128  000E46  D7E7               	goto	i2l8229
 13129  000E48                     i2l8243:
 13130  000E48  501F               	movf	i2__doprnt@flag,w,c
 13131  000E4A  0B80               	andlw	128
 13132                           
 13133                           ; Switch size 1, requested type "space"
 13134                           ; Number of cases is 2, Range of values is 0 to 128
 13135                           ; switch strategies available:
 13136                           ; Name         Instructions Cycles
 13137                           ; simple_byte            7     4 (average)
 13138                           ;	Chosen strategy is simple_byte
 13139  000E4C  0A00               	xorlw	0	; case 0
 13140  000E4E  B4D8               	btfsc	status,2,c
 13141  000E50  D7C5               	goto	i2l8213
 13142  000E52  0A80               	xorlw	128	; case 128
 13143  000E54  B4D8               	btfsc	status,2,c
 13144  000E56  D7DD               	goto	i2l8227
 13145  000E58                     i2l8245:
 13146                           
 13147                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13148  000E58  5020               	movf	i2__doprnt@width,w,c
 13149  000E5A  1021               	iorwf	i2__doprnt@width+1,w,c
 13150  000E5C  B4D8               	btfsc	status,2,c
 13151  000E5E  D009               	goto	i2l8251
 13152  000E60  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 13153  000E64  0E03               	movlw	3
 13154  000E66  1613               	andwf	??i2__doprnt,f,c
 13155  000E68  B4D8               	btfsc	status,2,c
 13156  000E6A  D003               	goto	i2l8251
 13157                           
 13158                           ;doprnt.c: 1346: width--;
 13159  000E6C  0620               	decf	i2__doprnt@width,f,c
 13160  000E6E  A0D8               	btfss	status,0,c
 13161  000E70  0621               	decf	i2__doprnt@width+1,f,c
 13162  000E72                     i2l8251:
 13163                           
 13164                           ;doprnt.c: 1381: if(width > c)
 13165  000E72  0E80               	movlw	128
 13166  000E74  BE22               	btfsc	i2__doprnt@c,7,c
 13167  000E76  0E7F               	movlw	127
 13168  000E78  6E13               	movwf	??i2__doprnt& (0+255),c
 13169  000E7A  5020               	movf	i2__doprnt@width,w,c
 13170  000E7C  5C22               	subwf	i2__doprnt@c,w,c
 13171  000E7E  5021               	movf	i2__doprnt@width+1,w,c
 13172  000E80  0A80               	xorlw	128
 13173  000E82  5813               	subwfb	??i2__doprnt& (0+255),w,c
 13174  000E84  B0D8               	btfsc	status,0,c
 13175  000E86  D007               	goto	i2l8255
 13176                           
 13177                           ;doprnt.c: 1382: width -= c;
 13178  000E88  5022               	movf	i2__doprnt@c,w,c
 13179  000E8A  5E20               	subwf	i2__doprnt@width,f,c
 13180  000E8C  0E00               	movlw	0
 13181  000E8E  BE22               	btfsc	i2__doprnt@c,7,c
 13182  000E90  0EFF               	movlw	255
 13183  000E92  5A21               	subwfb	i2__doprnt@width+1,f,c
 13184  000E94  D004               	goto	i2l8257
 13185  000E96                     i2l8255:
 13186                           
 13187                           ;doprnt.c: 1383: else
 13188                           ;doprnt.c: 1384: width = 0;
 13189  000E96  0E00               	movlw	0
 13190  000E98  6E21               	movwf	i2__doprnt@width+1,c
 13191  000E9A  0E00               	movlw	0
 13192  000E9C  6E20               	movwf	i2__doprnt@width,c
 13193  000E9E                     i2l8257:
 13194                           
 13195                           ;doprnt.c: 1387: if(flag & 0x04) {
 13196  000E9E  A41F               	btfss	i2__doprnt@flag,2,c
 13197  000EA0  D078               	goto	i2l8281
 13198                           
 13199                           ;doprnt.c: 1392: if(flag & 0x03)
 13200  000EA2  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 13201  000EA6  0E03               	movlw	3
 13202  000EA8  1613               	andwf	??i2__doprnt,f,c
 13203  000EAA  B4D8               	btfsc	status,2,c
 13204  000EAC  D035               	goto	i2l8269
 13205                           
 13206                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 13207  000EAE  EE20 F002          	lfsr	2,2
 13208  000EB2  500D               	movf	i2__doprnt@pb,w,c
 13209  000EB4  26D9               	addwf	fsr2l,f,c
 13210  000EB6  500E               	movf	i2__doprnt@pb+1,w,c
 13211  000EB8  22DA               	addwfc	fsr2h,f,c
 13212  000EBA  50DE               	movf	postinc2,w,c
 13213  000EBC  10DE               	iorwf	postinc2,w,c
 13214  000EBE  B4D8               	btfsc	status,2,c
 13215  000EC0  D016               	goto	i2l8265
 13216  000EC2  EE20 F002          	lfsr	2,2
 13217  000EC6  500D               	movf	i2__doprnt@pb,w,c
 13218  000EC8  26D9               	addwf	fsr2l,f,c
 13219  000ECA  500E               	movf	i2__doprnt@pb+1,w,c
 13220  000ECC  22DA               	addwfc	fsr2h,f,c
 13221  000ECE  CFDE F013          	movff	postinc2,??i2__doprnt
 13222  000ED2  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13223  000ED6  D801               	call	i2u1344_48
 13224  000ED8  D01F               	goto	i2l8269
 13225  000EDA                     i2u1344_48:
 13226  000EDA  0005               	push	
 13227  000EDC  6EFA               	movwf	pclath,c
 13228  000EDE  5013               	movf	??i2__doprnt,w,c
 13229  000EE0  6EFD               	movwf	tosl,c
 13230  000EE2  5014               	movf	??i2__doprnt+1,w,c
 13231  000EE4  6EFE               	movwf	tosh,c
 13232  000EE6  6AFF               	clrf	tosu,c
 13233  000EE8  50FA               	movf	pclath,w,c
 13234  000EEA  0E2D               	movlw	45
 13235  000EEC  0012               	return		;indir
 13236  000EEE                     i2l8265:
 13237  000EEE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13238  000EF2  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13239  000EF6  CFDE F013          	movff	postinc2,??i2__doprnt
 13240  000EFA  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13241  000EFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13242  000F02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13243  000F06  0E2D               	movlw	45
 13244  000F08  6EDF               	movwf	indf2,c
 13245  000F0A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13246  000F0E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13247  000F12  2ADE               	incf	postinc2,f,c
 13248  000F14  0E00               	movlw	0
 13249  000F16  22DD               	addwfc	postdec2,f,c
 13250  000F18                     i2l8269:
 13251                           
 13252                           ;doprnt.c: 1415: if(width)
 13253  000F18  5020               	movf	i2__doprnt@width,w,c
 13254  000F1A  1021               	iorwf	i2__doprnt@width+1,w,c
 13255  000F1C  B4D8               	btfsc	status,2,c
 13256  000F1E  D0B4               	goto	i2l8303
 13257                           
 13258                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 13259                           
 13260                           ;doprnt.c: 1416: do
 13261  000F20  EE20 F002          	lfsr	2,2
 13262  000F24  500D               	movf	i2__doprnt@pb,w,c
 13263  000F26  26D9               	addwf	fsr2l,f,c
 13264  000F28  500E               	movf	i2__doprnt@pb+1,w,c
 13265  000F2A  22DA               	addwfc	fsr2h,f,c
 13266  000F2C  50DE               	movf	postinc2,w,c
 13267  000F2E  10DE               	iorwf	postinc2,w,c
 13268  000F30  B4D8               	btfsc	status,2,c
 13269  000F32  D016               	goto	i2l8275
 13270  000F34  EE20 F002          	lfsr	2,2
 13271  000F38  500D               	movf	i2__doprnt@pb,w,c
 13272  000F3A  26D9               	addwf	fsr2l,f,c
 13273  000F3C  500E               	movf	i2__doprnt@pb+1,w,c
 13274  000F3E  22DA               	addwfc	fsr2h,f,c
 13275  000F40  CFDE F013          	movff	postinc2,??i2__doprnt
 13276  000F44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13277  000F48  D801               	call	i2u1347_48
 13278  000F4A  D01F               	goto	i2l8279
 13279  000F4C                     i2u1347_48:
 13280  000F4C  0005               	push	
 13281  000F4E  6EFA               	movwf	pclath,c
 13282  000F50  5013               	movf	??i2__doprnt,w,c
 13283  000F52  6EFD               	movwf	tosl,c
 13284  000F54  5014               	movf	??i2__doprnt+1,w,c
 13285  000F56  6EFE               	movwf	tosh,c
 13286  000F58  6AFF               	clrf	tosu,c
 13287  000F5A  50FA               	movf	pclath,w,c
 13288  000F5C  0E30               	movlw	48
 13289  000F5E  0012               	return		;indir
 13290  000F60                     i2l8275:
 13291  000F60  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13292  000F64  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13293  000F68  CFDE F013          	movff	postinc2,??i2__doprnt
 13294  000F6C  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13295  000F70  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13296  000F74  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13297  000F78  0E30               	movlw	48
 13298  000F7A  6EDF               	movwf	indf2,c
 13299  000F7C  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13300  000F80  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13301  000F84  2ADE               	incf	postinc2,f,c
 13302  000F86  0E00               	movlw	0
 13303  000F88  22DD               	addwfc	postdec2,f,c
 13304  000F8A                     i2l8279:
 13305                           
 13306                           ;doprnt.c: 1418: while(--width);
 13307  000F8A  0620               	decf	i2__doprnt@width,f,c
 13308  000F8C  A0D8               	btfss	status,0,c
 13309  000F8E  0621               	decf	i2__doprnt@width+1,f,c
 13310  000F90  D7C3               	goto	i2l8269
 13311  000F92                     i2l8281:
 13312                           
 13313                           ;doprnt.c: 1422: {
 13314                           ;doprnt.c: 1424: if(width
 13315                           ;doprnt.c: 1428: )
 13316  000F92  5020               	movf	i2__doprnt@width,w,c
 13317  000F94  1021               	iorwf	i2__doprnt@width+1,w,c
 13318  000F96  B4D8               	btfsc	status,2,c
 13319  000F98  D03C               	goto	i2l8293
 13320  000F9A                     i2l8283:
 13321                           
 13322                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 13323  000F9A  EE20 F002          	lfsr	2,2
 13324  000F9E  500D               	movf	i2__doprnt@pb,w,c
 13325  000FA0  26D9               	addwf	fsr2l,f,c
 13326  000FA2  500E               	movf	i2__doprnt@pb+1,w,c
 13327  000FA4  22DA               	addwfc	fsr2h,f,c
 13328  000FA6  50DE               	movf	postinc2,w,c
 13329  000FA8  10DE               	iorwf	postinc2,w,c
 13330  000FAA  B4D8               	btfsc	status,2,c
 13331  000FAC  D016               	goto	i2l8287
 13332  000FAE  EE20 F002          	lfsr	2,2
 13333  000FB2  500D               	movf	i2__doprnt@pb,w,c
 13334  000FB4  26D9               	addwf	fsr2l,f,c
 13335  000FB6  500E               	movf	i2__doprnt@pb+1,w,c
 13336  000FB8  22DA               	addwfc	fsr2h,f,c
 13337  000FBA  CFDE F013          	movff	postinc2,??i2__doprnt
 13338  000FBE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13339  000FC2  D801               	call	i2u1351_48
 13340  000FC4  D01F               	goto	i2l8291
 13341  000FC6                     i2u1351_48:
 13342  000FC6  0005               	push	
 13343  000FC8  6EFA               	movwf	pclath,c
 13344  000FCA  5013               	movf	??i2__doprnt,w,c
 13345  000FCC  6EFD               	movwf	tosl,c
 13346  000FCE  5014               	movf	??i2__doprnt+1,w,c
 13347  000FD0  6EFE               	movwf	tosh,c
 13348  000FD2  6AFF               	clrf	tosu,c
 13349  000FD4  50FA               	movf	pclath,w,c
 13350  000FD6  0E20               	movlw	32
 13351  000FD8  0012               	return		;indir
 13352  000FDA                     i2l8287:
 13353  000FDA  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13354  000FDE  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13355  000FE2  CFDE F013          	movff	postinc2,??i2__doprnt
 13356  000FE6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13357  000FEA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13358  000FEE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13359  000FF2  0E20               	movlw	32
 13360  000FF4  6EDF               	movwf	indf2,c
 13361  000FF6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13362  000FFA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13363  000FFE  2ADE               	incf	postinc2,f,c
 13364  001000  0E00               	movlw	0
 13365  001002  22DD               	addwfc	postdec2,f,c
 13366  001004                     i2l8291:
 13367                           
 13368                           ;doprnt.c: 1431: while(--width);
 13369  001004  0620               	decf	i2__doprnt@width,f,c
 13370  001006  A0D8               	btfss	status,0,c
 13371  001008  0621               	decf	i2__doprnt@width+1,f,c
 13372  00100A  5020               	movf	i2__doprnt@width,w,c
 13373  00100C  1021               	iorwf	i2__doprnt@width+1,w,c
 13374  00100E  A4D8               	btfss	status,2,c
 13375  001010  D7C4               	goto	i2l8283
 13376  001012                     i2l8293:
 13377                           
 13378                           ;doprnt.c: 1438: if(flag & 0x03)
 13379  001012  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 13380  001016  0E03               	movlw	3
 13381  001018  1613               	andwf	??i2__doprnt,f,c
 13382  00101A  B4D8               	btfsc	status,2,c
 13383  00101C  D035               	goto	i2l8303
 13384                           
 13385                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 13386  00101E  EE20 F002          	lfsr	2,2
 13387  001022  500D               	movf	i2__doprnt@pb,w,c
 13388  001024  26D9               	addwf	fsr2l,f,c
 13389  001026  500E               	movf	i2__doprnt@pb+1,w,c
 13390  001028  22DA               	addwfc	fsr2h,f,c
 13391  00102A  50DE               	movf	postinc2,w,c
 13392  00102C  10DE               	iorwf	postinc2,w,c
 13393  00102E  B4D8               	btfsc	status,2,c
 13394  001030  D016               	goto	i2l8299
 13395  001032  EE20 F002          	lfsr	2,2
 13396  001036  500D               	movf	i2__doprnt@pb,w,c
 13397  001038  26D9               	addwf	fsr2l,f,c
 13398  00103A  500E               	movf	i2__doprnt@pb+1,w,c
 13399  00103C  22DA               	addwfc	fsr2h,f,c
 13400  00103E  CFDE F013          	movff	postinc2,??i2__doprnt
 13401  001042  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13402  001046  D801               	call	i2u1355_48
 13403  001048  D01F               	goto	i2l8303
 13404  00104A                     i2u1355_48:
 13405  00104A  0005               	push	
 13406  00104C  6EFA               	movwf	pclath,c
 13407  00104E  5013               	movf	??i2__doprnt,w,c
 13408  001050  6EFD               	movwf	tosl,c
 13409  001052  5014               	movf	??i2__doprnt+1,w,c
 13410  001054  6EFE               	movwf	tosh,c
 13411  001056  6AFF               	clrf	tosu,c
 13412  001058  50FA               	movf	pclath,w,c
 13413  00105A  0E2D               	movlw	45
 13414  00105C  0012               	return		;indir
 13415  00105E                     i2l8299:
 13416  00105E  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13417  001062  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13418  001066  CFDE F013          	movff	postinc2,??i2__doprnt
 13419  00106A  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13420  00106E  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13421  001072  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13422  001076  0E2D               	movlw	45
 13423  001078  6EDF               	movwf	indf2,c
 13424  00107A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13425  00107E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13426  001082  2ADE               	incf	postinc2,f,c
 13427  001084  0E00               	movlw	0
 13428  001086  22DD               	addwfc	postdec2,f,c
 13429  001088                     i2l8303:
 13430                           
 13431                           ;doprnt.c: 1469: }
 13432                           ;doprnt.c: 1472: prec = c;
 13433  001088  C022  F018         	movff	i2__doprnt@c,i2__doprnt@prec
 13434                           
 13435                           ;doprnt.c: 1474: while(prec--) {
 13436  00108C  D08B               	goto	i2l8323
 13437  00108E                     i2l8305:
 13438                           
 13439                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13440  00108E  5018               	movf	i2__doprnt@prec,w,c
 13441  001090  0D02               	mullw	2
 13442  001092  0E68               	movlw	low _dpowers
 13443  001094  24F3               	addwf	prodl,w,c
 13444  001096  6EF6               	movwf	tblptrl,c
 13445  001098  0EFE               	movlw	high _dpowers
 13446  00109A  20F4               	addwfc	prodh,w,c
 13447  00109C  6EF7               	movwf	tblptrh,c
 13448  00109E                     	if	1	;There are 3 active tblptr bytes
 13449  00109E  6AF8               	clrf	tblptru,c
 13450  0010A0  0E00               	movlw	low (__mediumconst shr (0+16))
 13451  0010A2  22F8               	addwfc	tblptru,f,c
 13452  0010A4                     	endif
 13453  0010A4  0009               	tblrd		*+
 13454  0010A6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 13455  0010AA  000A               	tblrd		*-
 13456  0010AC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 13457  0010B0  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 13458  0010B4  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 13459  0010B8  EC64  F01D         	call	i2___lwdiv
 13460  0010BC  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 13461  0010C0  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 13462  0010C4  0E00               	movlw	0
 13463  0010C6  6E0B               	movwf	i2___lwmod@divisor+1,c
 13464  0010C8  0E0A               	movlw	10
 13465  0010CA  6E0A               	movwf	i2___lwmod@divisor,c
 13466  0010CC  ECD7  F01D         	call	i2___lwmod	;wreg free
 13467  0010D0  5008               	movf	?i2___lwmod,w,c
 13468  0010D2  0F30               	addlw	48
 13469  0010D4  6E22               	movwf	i2__doprnt@c,c
 13470                           
 13471                           ;doprnt.c: 1491: break;
 13472  0010D6  D031               	goto	i2l8315
 13473  0010D8                     i2l8307:
 13474                           
 13475                           ;doprnt.c: 1499: {
 13476                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 13477  0010D8  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 13478  0010DC  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 13479  0010E0  5018               	movf	i2__doprnt@prec,w,c
 13480  0010E2  0D02               	mullw	2
 13481  0010E4  0E72               	movlw	low _hexpowers
 13482  0010E6  24F3               	addwf	prodl,w,c
 13483  0010E8  6EF6               	movwf	tblptrl,c
 13484  0010EA  0EFE               	movlw	high _hexpowers
 13485  0010EC  20F4               	addwfc	prodh,w,c
 13486  0010EE  6EF7               	movwf	tblptrh,c
 13487  0010F0                     	if	1	;There are 3 active tblptr bytes
 13488  0010F0  6AF8               	clrf	tblptru,c
 13489  0010F2  0E00               	movlw	low (__mediumconst shr (0+16))
 13490  0010F4  22F8               	addwfc	tblptru,f,c
 13491  0010F6                     	endif
 13492  0010F6  0009               	tblrd		*+
 13493  0010F8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 13494  0010FC  000A               	tblrd		*-
 13495  0010FE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 13496  001102  EC64  F01D         	call	i2___lwdiv	;wreg free
 13497  001106  5001               	movf	?i2___lwdiv,w,c
 13498  001108  0B0F               	andlw	15
 13499  00110A  6E17               	movwf	i2__doprnt@idx,c
 13500                           
 13501                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 13502  00110C  5017               	movf	i2__doprnt@idx,w,c
 13503  00110E  0D01               	mullw	1
 13504  001110  0E51               	movlw	low STR_28
 13505  001112  24F3               	addwf	prodl,w,c
 13506  001114  6EF6               	movwf	tblptrl,c
 13507  001116  0EFF               	movlw	high STR_28
 13508  001118  20F4               	addwfc	prodh,w,c
 13509  00111A  6EF7               	movwf	tblptrh,c
 13510  00111C                     	if	1	;There are 3 active tblptr bytes
 13511  00111C  6AF8               	clrf	tblptru,c
 13512  00111E  0E00               	movlw	low (__mediumconst shr (0+16))
 13513  001120  22F8               	addwfc	tblptru,f,c
 13514  001122                     	endif
 13515  001122  0008               	tblrd		*
 13516  001124  CFF5 F022          	movff	tablat,i2__doprnt@c
 13517                           
 13518                           ;doprnt.c: 1523: }
 13519                           
 13520                           ;doprnt.c: 1508: }
 13521                           ;doprnt.c: 1510: break;
 13522  001128  D008               	goto	i2l8315
 13523  00112A                     i2l8313:
 13524  00112A  501F               	movf	i2__doprnt@flag,w,c
 13525  00112C  0B80               	andlw	128
 13526                           
 13527                           ; Switch size 1, requested type "space"
 13528                           ; Number of cases is 2, Range of values is 0 to 128
 13529                           ; switch strategies available:
 13530                           ; Name         Instructions Cycles
 13531                           ; simple_byte            7     4 (average)
 13532                           ;	Chosen strategy is simple_byte
 13533  00112E  0A00               	xorlw	0	; case 0
 13534  001130  B4D8               	btfsc	status,2,c
 13535  001132  D7AD               	goto	i2l8305
 13536  001134  0A80               	xorlw	128	; case 128
 13537  001136  B4D8               	btfsc	status,2,c
 13538  001138  D7CF               	goto	i2l8307
 13539  00113A                     i2l8315:
 13540                           
 13541                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 13542  00113A  EE20 F002          	lfsr	2,2
 13543  00113E  500D               	movf	i2__doprnt@pb,w,c
 13544  001140  26D9               	addwf	fsr2l,f,c
 13545  001142  500E               	movf	i2__doprnt@pb+1,w,c
 13546  001144  22DA               	addwfc	fsr2h,f,c
 13547  001146  50DE               	movf	postinc2,w,c
 13548  001148  10DE               	iorwf	postinc2,w,c
 13549  00114A  B4D8               	btfsc	status,2,c
 13550  00114C  D016               	goto	i2l8319
 13551  00114E  EE20 F002          	lfsr	2,2
 13552  001152  500D               	movf	i2__doprnt@pb,w,c
 13553  001154  26D9               	addwf	fsr2l,f,c
 13554  001156  500E               	movf	i2__doprnt@pb+1,w,c
 13555  001158  22DA               	addwfc	fsr2h,f,c
 13556  00115A  CFDE F013          	movff	postinc2,??i2__doprnt
 13557  00115E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13558  001162  D801               	call	i2u1357_48
 13559  001164  D01F               	goto	i2l8323
 13560  001166                     i2u1357_48:
 13561  001166  0005               	push	
 13562  001168  6EFA               	movwf	pclath,c
 13563  00116A  5013               	movf	??i2__doprnt,w,c
 13564  00116C  6EFD               	movwf	tosl,c
 13565  00116E  5014               	movf	??i2__doprnt+1,w,c
 13566  001170  6EFE               	movwf	tosh,c
 13567  001172  6AFF               	clrf	tosu,c
 13568  001174  50FA               	movf	pclath,w,c
 13569  001176  5022               	movf	i2__doprnt@c,w,c
 13570  001178  0012               	return		;indir
 13571  00117A                     i2l8319:
 13572  00117A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13573  00117E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13574  001182  CFDE F013          	movff	postinc2,??i2__doprnt
 13575  001186  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13576  00118A  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13577  00118E  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13578  001192  C022  FFDF         	movff	i2__doprnt@c,indf2
 13579  001196  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13580  00119A  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13581  00119E  2ADE               	incf	postinc2,f,c
 13582  0011A0  0E00               	movlw	0
 13583  0011A2  22DD               	addwfc	postdec2,f,c
 13584  0011A4                     i2l8323:
 13585  0011A4  0618               	decf	i2__doprnt@prec,f,c
 13586  0011A6  2818               	incf	i2__doprnt@prec,w,c
 13587  0011A8  A4D8               	btfss	status,2,c
 13588  0011AA  D7BF               	goto	i2l8313
 13589  0011AC                     i2l8325:
 13590  0011AC  500F               	movf	i2__doprnt@f,w,c
 13591  0011AE  6E13               	movwf	??i2__doprnt& (0+255),c
 13592  0011B0  5010               	movf	i2__doprnt@f+1,w,c
 13593  0011B2  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 13594  0011B4  4A0F               	infsnz	i2__doprnt@f,f,c
 13595  0011B6  2A10               	incf	i2__doprnt@f+1,f,c
 13596  0011B8  C013  FFF6         	movff	??i2__doprnt,tblptrl
 13597  0011BC  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 13598  0011C0  0E00               	movlw	low (__mediumconst shr (0+16))
 13599  0011C2  6EF8               	movwf	tblptru,c
 13600  0011C4  0E0F               	movlw	(high __ramtop+-1)
 13601  0011C6  64F7               	cpfsgt	tblptrh,c
 13602  0011C8  D003               	bra	i2u1359_47
 13603  0011CA  0008               	tblrd		*
 13604  0011CC  50F5               	movf	tablat,w,c
 13605  0011CE  D005               	bra	i2u1359_40
 13606  0011D0                     i2u1359_47:
 13607  0011D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 13608  0011D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 13609  0011D8  50EF               	movf	indf0,w,c
 13610  0011DA                     i2u1359_40:
 13611  0011DA  6E22               	movwf	i2__doprnt@c,c
 13612  0011DC  5022               	movf	i2__doprnt@c,w,c
 13613  0011DE  A4D8               	btfss	status,2,c
 13614  0011E0  EFCD  F004         	goto	i2l8119
 13615  0011E4                     i2l8327:
 13616                           
 13617                           ;doprnt.c: 1540: return 0;
 13618  0011E4  0E00               	movlw	0
 13619  0011E6  6E0E               	movwf	?i2__doprnt+1,c
 13620  0011E8  0E00               	movlw	0
 13621  0011EA  6E0D               	movwf	?i2__doprnt,c
 13622  0011EC  0012               	return	
 13623  0011EE                     __end_ofi2__doprnt:
 13624                           	opt stack 0
 13625                           tosu	equ	0xFFF
 13626                           tosh	equ	0xFFE
 13627                           tosl	equ	0xFFD
 13628                           pclatu	equ	0xFFB
 13629                           pclath	equ	0xFFA
 13630                           tblptru	equ	0xFF8
 13631                           tblptrh	equ	0xFF7
 13632                           tblptrl	equ	0xFF6
 13633                           tablat	equ	0xFF5
 13634                           prodh	equ	0xFF4
 13635                           prodl	equ	0xFF3
 13636                           intcon	equ	0xFF2
 13637                           intcon2	equ	0xFF1
 13638                           intcon3	equ	0xFF0
 13639                           indf0	equ	0xFEF
 13640                           postinc0	equ	0xFEE
 13641                           fsr0h	equ	0xFEA
 13642                           fsr0l	equ	0xFE9
 13643                           wreg	equ	0xFE8
 13644                           indf1	equ	0xFE7
 13645                           postinc1	equ	0xFE6
 13646                           postdec1	equ	0xFE5
 13647                           fsr1h	equ	0xFE2
 13648                           fsr1l	equ	0xFE1
 13649                           indf2	equ	0xFDF
 13650                           postinc2	equ	0xFDE
 13651                           postdec2	equ	0xFDD
 13652                           fsr2h	equ	0xFDA
 13653                           fsr2l	equ	0xFD9
 13654                           status	equ	0xFD8
 13655                           
 13656 ;; *************** function i2_putch *****************
 13657 ;; Defined at:
 13658 ;;		line 30 in file "lcd.c"
 13659 ;; Parameters:    Size  Location     Type
 13660 ;;  data            1    wreg     unsigned char 
 13661 ;; Auto vars:     Size  Location     Type
 13662 ;;  data            1    2[COMRAM] unsigned char 
 13663 ;; Return value:  Size  Location     Type
 13664 ;;                  1    wreg      void 
 13665 ;; Registers used:
 13666 ;;		wreg, status,2, status,0, cstack
 13667 ;; Tracked objects:
 13668 ;;		On entry : 0/0
 13669 ;;		On exit  : 0/0
 13670 ;;		Unchanged: 0/0
 13671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13673 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13675 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13676 ;;Total ram usage:        1 bytes
 13677 ;; Hardware stack levels used:    1
 13678 ;; Hardware stack levels required when called:    1
 13679 ;; This function calls:
 13680 ;;		i2_lcdNibble
 13681 ;; This function is called by:
 13682 ;;		i2_printf
 13683 ;; This function uses a non-reentrant model
 13684 ;;
 13685                           
 13686                           	psect	text36
 13687  003DAC                     __ptext36:
 13688                           	opt stack 0
 13689  003DAC                     i2_putch:
 13690                           	opt stack 20
 13691                           
 13692                           ;incstack = 0
 13693                           ;i2putch@data stored from wreg
 13694  003DAC  6E03               	movwf	i2putch@data,c
 13695                           
 13696                           ;lcd.c: 31: LATDbits.LATD2 = 1;
 13697  003DAE  848C               	bsf	3980,2,c	;volatile
 13698                           
 13699                           ;lcd.c: 32: lcdNibble(data);
 13700  003DB0  5003               	movf	i2putch@data,w,c
 13701  003DB2  EC10  F01D         	call	i2_lcdNibble
 13702  003DB6  0012               	return		;funcret
 13703  003DB8                     __end_ofi2_putch:
 13704                           	opt stack 0
 13705                           tosu	equ	0xFFF
 13706                           tosh	equ	0xFFE
 13707                           tosl	equ	0xFFD
 13708                           pclatu	equ	0xFFB
 13709                           pclath	equ	0xFFA
 13710                           tblptru	equ	0xFF8
 13711                           tblptrh	equ	0xFF7
 13712                           tblptrl	equ	0xFF6
 13713                           tablat	equ	0xFF5
 13714                           prodh	equ	0xFF4
 13715                           prodl	equ	0xFF3
 13716                           intcon	equ	0xFF2
 13717                           intcon2	equ	0xFF1
 13718                           intcon3	equ	0xFF0
 13719                           indf0	equ	0xFEF
 13720                           postinc0	equ	0xFEE
 13721                           fsr0h	equ	0xFEA
 13722                           fsr0l	equ	0xFE9
 13723                           wreg	equ	0xFE8
 13724                           indf1	equ	0xFE7
 13725                           postinc1	equ	0xFE6
 13726                           postdec1	equ	0xFE5
 13727                           fsr1h	equ	0xFE2
 13728                           fsr1l	equ	0xFE1
 13729                           indf2	equ	0xFDF
 13730                           postinc2	equ	0xFDE
 13731                           postdec2	equ	0xFDD
 13732                           fsr2h	equ	0xFDA
 13733                           fsr2l	equ	0xFD9
 13734                           status	equ	0xFD8
 13735                           
 13736 ;; *************** function i2_isdigit *****************
 13737 ;; Defined at:
 13738 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13739 ;; Parameters:    Size  Location     Type
 13740 ;;  c               1    wreg     unsigned char 
 13741 ;; Auto vars:     Size  Location     Type
 13742 ;;  c               1    2[COMRAM] unsigned char 
 13743 ;; Return value:  Size  Location     Type
 13744 ;;		None               void
 13745 ;; Registers used:
 13746 ;;		wreg, status,2, status,0
 13747 ;; Tracked objects:
 13748 ;;		On entry : 0/0
 13749 ;;		On exit  : 0/0
 13750 ;;		Unchanged: 0/0
 13751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13753 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13754 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13755 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13756 ;;Total ram usage:        3 bytes
 13757 ;; Hardware stack levels used:    1
 13758 ;; This function calls:
 13759 ;;		Nothing
 13760 ;; This function is called by:
 13761 ;;		i2__doprnt
 13762 ;; This function uses a non-reentrant model
 13763 ;;
 13764                           
 13765                           	psect	text37
 13766  003D38                     __ptext37:
 13767                           	opt stack 0
 13768  003D38                     i2_isdigit:
 13769                           	opt stack 21
 13770                           
 13771                           ;incstack = 0
 13772                           ;i2isdigit@c stored from wreg
 13773  003D38  6E03               	movwf	i2isdigit@c,c
 13774  003D3A  0E00               	movlw	0
 13775  003D3C  6E02               	movwf	i2_isdigit$777,c
 13776  003D3E  0E3A               	movlw	58
 13777  003D40  6003               	cpfslt	i2isdigit@c,c
 13778  003D42  D005               	goto	i2l3265
 13779  003D44  0E2F               	movlw	47
 13780  003D46  6403               	cpfsgt	i2isdigit@c,c
 13781  003D48  D002               	goto	i2l3265
 13782  003D4A  0E01               	movlw	1
 13783  003D4C  6E02               	movwf	i2_isdigit$777,c
 13784  003D4E                     i2l3265:
 13785  003D4E  C002  F001         	movff	i2_isdigit$777,??i2_isdigit
 13786  003D52  3001               	rrcf	??i2_isdigit,w,c
 13787  003D54  0012               	return	
 13788  003D56                     __end_ofi2_isdigit:
 13789                           	opt stack 0
 13790                           tosu	equ	0xFFF
 13791                           tosh	equ	0xFFE
 13792                           tosl	equ	0xFFD
 13793                           pclatu	equ	0xFFB
 13794                           pclath	equ	0xFFA
 13795                           tblptru	equ	0xFF8
 13796                           tblptrh	equ	0xFF7
 13797                           tblptrl	equ	0xFF6
 13798                           tablat	equ	0xFF5
 13799                           prodh	equ	0xFF4
 13800                           prodl	equ	0xFF3
 13801                           intcon	equ	0xFF2
 13802                           intcon2	equ	0xFF1
 13803                           intcon3	equ	0xFF0
 13804                           indf0	equ	0xFEF
 13805                           postinc0	equ	0xFEE
 13806                           fsr0h	equ	0xFEA
 13807                           fsr0l	equ	0xFE9
 13808                           wreg	equ	0xFE8
 13809                           indf1	equ	0xFE7
 13810                           postinc1	equ	0xFE6
 13811                           postdec1	equ	0xFE5
 13812                           fsr1h	equ	0xFE2
 13813                           fsr1l	equ	0xFE1
 13814                           indf2	equ	0xFDF
 13815                           postinc2	equ	0xFDE
 13816                           postdec2	equ	0xFDD
 13817                           fsr2h	equ	0xFDA
 13818                           fsr2l	equ	0xFD9
 13819                           status	equ	0xFD8
 13820                           
 13821 ;; *************** function i2___wmul *****************
 13822 ;; Defined at:
 13823 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13824 ;; Parameters:    Size  Location     Type
 13825 ;;  multiplier      2    0[COMRAM] unsigned int 
 13826 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13827 ;; Auto vars:     Size  Location     Type
 13828 ;;  __wmul          2    4[COMRAM] unsigned int 
 13829 ;; Return value:  Size  Location     Type
 13830 ;;                  2    0[COMRAM] unsigned int 
 13831 ;; Registers used:
 13832 ;;		wreg, status,2, status,0, prodl, prodh
 13833 ;; Tracked objects:
 13834 ;;		On entry : 0/0
 13835 ;;		On exit  : 0/0
 13836 ;;		Unchanged: 0/0
 13837 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13838 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13839 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13841 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13842 ;;Total ram usage:        6 bytes
 13843 ;; Hardware stack levels used:    1
 13844 ;; This function calls:
 13845 ;;		Nothing
 13846 ;; This function is called by:
 13847 ;;		i2__doprnt
 13848 ;; This function uses a non-reentrant model
 13849 ;;
 13850                           
 13851                           	psect	text38
 13852  003D12                     __ptext38:
 13853                           	opt stack 0
 13854  003D12                     i2___wmul:
 13855                           	opt stack 21
 13856                           
 13857                           ;incstack = 0
 13858  003D12  5001               	movf	i2___wmul@multiplier,w,c
 13859  003D14  0203               	mulwf	i2___wmul@multiplicand,c
 13860  003D16  CFF3 F005          	movff	prodl,i2___wmul@product
 13861  003D1A  CFF4 F006          	movff	prodh,i2___wmul@product+1
 13862  003D1E  5001               	movf	i2___wmul@multiplier,w,c
 13863  003D20  0204               	mulwf	i2___wmul@multiplicand+1,c
 13864  003D22  50F3               	movf	prodl,w,c
 13865  003D24  2606               	addwf	i2___wmul@product+1,f,c
 13866  003D26  5002               	movf	i2___wmul@multiplier+1,w,c
 13867  003D28  0203               	mulwf	i2___wmul@multiplicand,c
 13868  003D2A  50F3               	movf	prodl,w,c
 13869  003D2C  2606               	addwf	i2___wmul@product+1,f,c
 13870  003D2E  C005  F001         	movff	i2___wmul@product,?i2___wmul
 13871  003D32  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 13872  003D36  0012               	return	
 13873  003D38                     __end_ofi2___wmul:
 13874                           	opt stack 0
 13875                           tosu	equ	0xFFF
 13876                           tosh	equ	0xFFE
 13877                           tosl	equ	0xFFD
 13878                           pclatu	equ	0xFFB
 13879                           pclath	equ	0xFFA
 13880                           tblptru	equ	0xFF8
 13881                           tblptrh	equ	0xFF7
 13882                           tblptrl	equ	0xFF6
 13883                           tablat	equ	0xFF5
 13884                           prodh	equ	0xFF4
 13885                           prodl	equ	0xFF3
 13886                           intcon	equ	0xFF2
 13887                           intcon2	equ	0xFF1
 13888                           intcon3	equ	0xFF0
 13889                           indf0	equ	0xFEF
 13890                           postinc0	equ	0xFEE
 13891                           fsr0h	equ	0xFEA
 13892                           fsr0l	equ	0xFE9
 13893                           wreg	equ	0xFE8
 13894                           indf1	equ	0xFE7
 13895                           postinc1	equ	0xFE6
 13896                           postdec1	equ	0xFE5
 13897                           fsr1h	equ	0xFE2
 13898                           fsr1l	equ	0xFE1
 13899                           indf2	equ	0xFDF
 13900                           postinc2	equ	0xFDE
 13901                           postdec2	equ	0xFDD
 13902                           fsr2h	equ	0xFDA
 13903                           fsr2l	equ	0xFD9
 13904                           status	equ	0xFD8
 13905                           
 13906 ;; *************** function i2___lwmod *****************
 13907 ;; Defined at:
 13908 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13909 ;; Parameters:    Size  Location     Type
 13910 ;;  dividend        2    7[COMRAM] unsigned int 
 13911 ;;  divisor         2    9[COMRAM] unsigned int 
 13912 ;; Auto vars:     Size  Location     Type
 13913 ;;  __lwmod         1   11[COMRAM] unsigned char 
 13914 ;; Return value:  Size  Location     Type
 13915 ;;                  2    7[COMRAM] unsigned int 
 13916 ;; Registers used:
 13917 ;;		wreg, status,2, status,0
 13918 ;; Tracked objects:
 13919 ;;		On entry : 0/0
 13920 ;;		On exit  : 0/0
 13921 ;;		Unchanged: 0/0
 13922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13923 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13924 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13926 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13927 ;;Total ram usage:        5 bytes
 13928 ;; Hardware stack levels used:    1
 13929 ;; This function calls:
 13930 ;;		Nothing
 13931 ;; This function is called by:
 13932 ;;		i2__doprnt
 13933 ;; This function uses a non-reentrant model
 13934 ;;
 13935                           
 13936                           	psect	text39
 13937  003BAE                     __ptext39:
 13938                           	opt stack 0
 13939  003BAE                     i2___lwmod:
 13940                           	opt stack 21
 13941                           
 13942                           ;incstack = 0
 13943  003BAE  500A               	movf	i2___lwmod@divisor,w,c
 13944  003BB0  100B               	iorwf	i2___lwmod@divisor+1,w,c
 13945  003BB2  B4D8               	btfsc	status,2,c
 13946  003BB4  D018               	goto	i2l1020
 13947  003BB6  0E01               	movlw	1
 13948  003BB8  6E0C               	movwf	i2___lwmod@counter,c
 13949  003BBA  D004               	goto	i2l3297
 13950  003BBC                     i2l3295:
 13951  003BBC  90D8               	bcf	status,0,c
 13952  003BBE  360A               	rlcf	i2___lwmod@divisor,f,c
 13953  003BC0  360B               	rlcf	i2___lwmod@divisor+1,f,c
 13954  003BC2  2A0C               	incf	i2___lwmod@counter,f,c
 13955  003BC4                     i2l3297:
 13956  003BC4  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 13957  003BC6  D7FA               	goto	i2l3295
 13958  003BC8                     i2l3299:
 13959  003BC8  500A               	movf	i2___lwmod@divisor,w,c
 13960  003BCA  5C08               	subwf	i2___lwmod@dividend,w,c
 13961  003BCC  500B               	movf	i2___lwmod@divisor+1,w,c
 13962  003BCE  5809               	subwfb	i2___lwmod@dividend+1,w,c
 13963  003BD0  A0D8               	btfss	status,0,c
 13964  003BD2  D004               	goto	i2l3303
 13965  003BD4  500A               	movf	i2___lwmod@divisor,w,c
 13966  003BD6  5E08               	subwf	i2___lwmod@dividend,f,c
 13967  003BD8  500B               	movf	i2___lwmod@divisor+1,w,c
 13968  003BDA  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 13969  003BDC                     i2l3303:
 13970  003BDC  90D8               	bcf	status,0,c
 13971  003BDE  320B               	rrcf	i2___lwmod@divisor+1,f,c
 13972  003BE0  320A               	rrcf	i2___lwmod@divisor,f,c
 13973  003BE2  2E0C               	decfsz	i2___lwmod@counter,f,c
 13974  003BE4  D7F1               	goto	i2l3299
 13975  003BE6                     i2l1020:
 13976  003BE6  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 13977  003BEA  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 13978  003BEE  0012               	return		;funcret
 13979  003BF0                     __end_ofi2___lwmod:
 13980                           	opt stack 0
 13981                           tosu	equ	0xFFF
 13982                           tosh	equ	0xFFE
 13983                           tosl	equ	0xFFD
 13984                           pclatu	equ	0xFFB
 13985                           pclath	equ	0xFFA
 13986                           tblptru	equ	0xFF8
 13987                           tblptrh	equ	0xFF7
 13988                           tblptrl	equ	0xFF6
 13989                           tablat	equ	0xFF5
 13990                           prodh	equ	0xFF4
 13991                           prodl	equ	0xFF3
 13992                           intcon	equ	0xFF2
 13993                           intcon2	equ	0xFF1
 13994                           intcon3	equ	0xFF0
 13995                           indf0	equ	0xFEF
 13996                           postinc0	equ	0xFEE
 13997                           fsr0h	equ	0xFEA
 13998                           fsr0l	equ	0xFE9
 13999                           wreg	equ	0xFE8
 14000                           indf1	equ	0xFE7
 14001                           postinc1	equ	0xFE6
 14002                           postdec1	equ	0xFE5
 14003                           fsr1h	equ	0xFE2
 14004                           fsr1l	equ	0xFE1
 14005                           indf2	equ	0xFDF
 14006                           postinc2	equ	0xFDE
 14007                           postdec2	equ	0xFDD
 14008                           fsr2h	equ	0xFDA
 14009                           fsr2l	equ	0xFD9
 14010                           status	equ	0xFD8
 14011                           
 14012 ;; *************** function i2___lwdiv *****************
 14013 ;; Defined at:
 14014 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14015 ;; Parameters:    Size  Location     Type
 14016 ;;  dividend        2    0[COMRAM] unsigned int 
 14017 ;;  divisor         2    2[COMRAM] unsigned int 
 14018 ;; Auto vars:     Size  Location     Type
 14019 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 14020 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 14021 ;; Return value:  Size  Location     Type
 14022 ;;                  2    0[COMRAM] unsigned int 
 14023 ;; Registers used:
 14024 ;;		wreg, status,2, status,0
 14025 ;; Tracked objects:
 14026 ;;		On entry : 0/0
 14027 ;;		On exit  : 0/0
 14028 ;;		Unchanged: 0/0
 14029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14030 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14031 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14033 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14034 ;;Total ram usage:        7 bytes
 14035 ;; Hardware stack levels used:    1
 14036 ;; This function calls:
 14037 ;;		Nothing
 14038 ;; This function is called by:
 14039 ;;		i2__doprnt
 14040 ;; This function uses a non-reentrant model
 14041 ;;
 14042                           
 14043                           	psect	text40
 14044  003AC8                     __ptext40:
 14045                           	opt stack 0
 14046  003AC8                     i2___lwdiv:
 14047                           	opt stack 21
 14048                           
 14049                           ;incstack = 0
 14050  003AC8  0E00               	movlw	0
 14051  003ACA  6E06               	movwf	i2___lwdiv@quotient+1,c
 14052  003ACC  0E00               	movlw	0
 14053  003ACE  6E05               	movwf	i2___lwdiv@quotient,c
 14054  003AD0  5003               	movf	i2___lwdiv@divisor,w,c
 14055  003AD2  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 14056  003AD4  B4D8               	btfsc	status,2,c
 14057  003AD6  D01C               	goto	i2l1010
 14058  003AD8  0E01               	movlw	1
 14059  003ADA  6E07               	movwf	i2___lwdiv@counter,c
 14060  003ADC  D004               	goto	i2l3277
 14061  003ADE                     i2l3275:
 14062  003ADE  90D8               	bcf	status,0,c
 14063  003AE0  3603               	rlcf	i2___lwdiv@divisor,f,c
 14064  003AE2  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 14065  003AE4  2A07               	incf	i2___lwdiv@counter,f,c
 14066  003AE6                     i2l3277:
 14067  003AE6  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 14068  003AE8  D7FA               	goto	i2l3275
 14069  003AEA                     i2l3279:
 14070  003AEA  90D8               	bcf	status,0,c
 14071  003AEC  3605               	rlcf	i2___lwdiv@quotient,f,c
 14072  003AEE  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 14073  003AF0  5003               	movf	i2___lwdiv@divisor,w,c
 14074  003AF2  5C01               	subwf	i2___lwdiv@dividend,w,c
 14075  003AF4  5004               	movf	i2___lwdiv@divisor+1,w,c
 14076  003AF6  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 14077  003AF8  A0D8               	btfss	status,0,c
 14078  003AFA  D005               	goto	i2l3287
 14079  003AFC  5003               	movf	i2___lwdiv@divisor,w,c
 14080  003AFE  5E01               	subwf	i2___lwdiv@dividend,f,c
 14081  003B00  5004               	movf	i2___lwdiv@divisor+1,w,c
 14082  003B02  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 14083  003B04  8005               	bsf	i2___lwdiv@quotient,0,c
 14084  003B06                     i2l3287:
 14085  003B06  90D8               	bcf	status,0,c
 14086  003B08  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 14087  003B0A  3203               	rrcf	i2___lwdiv@divisor,f,c
 14088  003B0C  2E07               	decfsz	i2___lwdiv@counter,f,c
 14089  003B0E  D7ED               	goto	i2l3279
 14090  003B10                     i2l1010:
 14091  003B10  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 14092  003B14  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 14093  003B18  0012               	return		;funcret
 14094  003B1A                     __end_ofi2___lwdiv:
 14095                           	opt stack 0
 14096                           tosu	equ	0xFFF
 14097                           tosh	equ	0xFFE
 14098                           tosl	equ	0xFFD
 14099                           pclatu	equ	0xFFB
 14100                           pclath	equ	0xFFA
 14101                           tblptru	equ	0xFF8
 14102                           tblptrh	equ	0xFF7
 14103                           tblptrl	equ	0xFF6
 14104                           tablat	equ	0xFF5
 14105                           prodh	equ	0xFF4
 14106                           prodl	equ	0xFF3
 14107                           intcon	equ	0xFF2
 14108                           intcon2	equ	0xFF1
 14109                           intcon3	equ	0xFF0
 14110                           indf0	equ	0xFEF
 14111                           postinc0	equ	0xFEE
 14112                           fsr0h	equ	0xFEA
 14113                           fsr0l	equ	0xFE9
 14114                           wreg	equ	0xFE8
 14115                           indf1	equ	0xFE7
 14116                           postinc1	equ	0xFE6
 14117                           postdec1	equ	0xFE5
 14118                           fsr1h	equ	0xFE2
 14119                           fsr1l	equ	0xFE1
 14120                           indf2	equ	0xFDF
 14121                           postinc2	equ	0xFDE
 14122                           postdec2	equ	0xFDD
 14123                           fsr2h	equ	0xFDA
 14124                           fsr2l	equ	0xFD9
 14125                           status	equ	0xFD8
 14126                           
 14127 ;; *************** function i2_lcdInst *****************
 14128 ;; Defined at:
 14129 ;;		line 25 in file "lcd.c"
 14130 ;; Parameters:    Size  Location     Type
 14131 ;;  data            1    wreg     unsigned char 
 14132 ;; Auto vars:     Size  Location     Type
 14133 ;;  data            1    2[COMRAM] unsigned char 
 14134 ;; Return value:  Size  Location     Type
 14135 ;;                  1    wreg      void 
 14136 ;; Registers used:
 14137 ;;		wreg, status,2, status,0, cstack
 14138 ;; Tracked objects:
 14139 ;;		On entry : 0/0
 14140 ;;		On exit  : 0/0
 14141 ;;		Unchanged: 0/0
 14142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14144 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14145 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14146 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14147 ;;Total ram usage:        1 bytes
 14148 ;; Hardware stack levels used:    1
 14149 ;; Hardware stack levels required when called:    1
 14150 ;; This function calls:
 14151 ;;		i2_lcdNibble
 14152 ;; This function is called by:
 14153 ;;		_keypressed
 14154 ;; This function uses a non-reentrant model
 14155 ;;
 14156                           
 14157                           	psect	text41
 14158  003DB8                     __ptext41:
 14159                           	opt stack 0
 14160  003DB8                     i2_lcdInst:
 14161                           	opt stack 22
 14162                           
 14163                           ;incstack = 0
 14164                           ;i2lcdInst@data stored from wreg
 14165  003DB8  6E03               	movwf	i2lcdInst@data,c
 14166                           
 14167                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 14168  003DBA  948C               	bcf	3980,2,c	;volatile
 14169                           
 14170                           ;lcd.c: 27: lcdNibble(data);
 14171  003DBC  5003               	movf	i2lcdInst@data,w,c
 14172  003DBE  EC10  F01D         	call	i2_lcdNibble
 14173  003DC2  0012               	return		;funcret
 14174  003DC4                     __end_ofi2_lcdInst:
 14175                           	opt stack 0
 14176                           tosu	equ	0xFFF
 14177                           tosh	equ	0xFFE
 14178                           tosl	equ	0xFFD
 14179                           pclatu	equ	0xFFB
 14180                           pclath	equ	0xFFA
 14181                           tblptru	equ	0xFF8
 14182                           tblptrh	equ	0xFF7
 14183                           tblptrl	equ	0xFF6
 14184                           tablat	equ	0xFF5
 14185                           prodh	equ	0xFF4
 14186                           prodl	equ	0xFF3
 14187                           intcon	equ	0xFF2
 14188                           intcon2	equ	0xFF1
 14189                           intcon3	equ	0xFF0
 14190                           indf0	equ	0xFEF
 14191                           postinc0	equ	0xFEE
 14192                           fsr0h	equ	0xFEA
 14193                           fsr0l	equ	0xFE9
 14194                           wreg	equ	0xFE8
 14195                           indf1	equ	0xFE7
 14196                           postinc1	equ	0xFE6
 14197                           postdec1	equ	0xFE5
 14198                           fsr1h	equ	0xFE2
 14199                           fsr1l	equ	0xFE1
 14200                           indf2	equ	0xFDF
 14201                           postinc2	equ	0xFDE
 14202                           postdec2	equ	0xFDD
 14203                           fsr2h	equ	0xFDA
 14204                           fsr2l	equ	0xFD9
 14205                           status	equ	0xFD8
 14206                           
 14207 ;; *************** function i2_lcdNibble *****************
 14208 ;; Defined at:
 14209 ;;		line 35 in file "lcd.c"
 14210 ;; Parameters:    Size  Location     Type
 14211 ;;  data            1    wreg     unsigned char 
 14212 ;; Auto vars:     Size  Location     Type
 14213 ;;  data            1    1[COMRAM] unsigned char 
 14214 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 14215 ;; Return value:  Size  Location     Type
 14216 ;;                  1    wreg      void 
 14217 ;; Registers used:
 14218 ;;		wreg, status,2, status,0
 14219 ;; Tracked objects:
 14220 ;;		On entry : 0/0
 14221 ;;		On exit  : 0/0
 14222 ;;		Unchanged: 0/0
 14223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14224 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14225 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14226 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14227 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14228 ;;Total ram usage:        2 bytes
 14229 ;; Hardware stack levels used:    1
 14230 ;; This function calls:
 14231 ;;		Nothing
 14232 ;; This function is called by:
 14233 ;;		i2_lcdInst
 14234 ;;		i2_putch
 14235 ;; This function uses a non-reentrant model
 14236 ;;
 14237                           
 14238                           	psect	text42
 14239  003A20                     __ptext42:
 14240                           	opt stack 0
 14241  003A20                     i2_lcdNibble:
 14242                           	opt stack 20
 14243                           
 14244                           ;incstack = 0
 14245                           ;i2lcdNibble@data stored from wreg
 14246  003A20  6E02               	movwf	i2lcdNibble@data,c
 14247                           
 14248                           ;lcd.c: 37: char temp = data & 0xF0;
 14249  003A22  5002               	movf	i2lcdNibble@data,w,c
 14250  003A24  0BF0               	andlw	240
 14251  003A26  6E01               	movwf	i2lcdNibble@temp,c
 14252                           
 14253                           ;lcd.c: 38: LATD = LATD & 0x0F;
 14254  003A28  508C               	movf	3980,w,c	;volatile
 14255  003A2A  0B0F               	andlw	15
 14256  003A2C  6E8C               	movwf	3980,c	;volatile
 14257                           
 14258                           ;lcd.c: 39: LATD = temp | LATD;
 14259  003A2E  5001               	movf	i2lcdNibble@temp,w,c
 14260  003A30  108C               	iorwf	3980,w,c	;volatile
 14261  003A32  6E8C               	movwf	3980,c	;volatile
 14262                           
 14263                           ;lcd.c: 41: LATDbits.LATD3 = 0;
 14264  003A34  968C               	bcf	3980,3,c	;volatile
 14265                           
 14266                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
 14267  003A36  0E14               	movlw	20
 14268  003A38                     i2u1437_47:
 14269  003A38  2EE8               	decfsz	wreg,f,c
 14270  003A3A  D7FE               	bra	i2u1437_47
 14271  003A3C  D000               	nop2	
 14272                           
 14273                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 14274  003A3E  868C               	bsf	3980,3,c	;volatile
 14275                           
 14276                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
 14277  003A40  0E14               	movlw	20
 14278  003A42                     i2u1438_47:
 14279  003A42  2EE8               	decfsz	wreg,f,c
 14280  003A44  D7FE               	bra	i2u1438_47
 14281  003A46  D000               	nop2	
 14282                           
 14283                           ;lcd.c: 46: data = data << 4;
 14284  003A48  3802               	swapf	i2lcdNibble@data,w,c
 14285  003A4A  0BF0               	andlw	240
 14286  003A4C  6E02               	movwf	i2lcdNibble@data,c
 14287                           
 14288                           ;lcd.c: 48: temp = data & 0xF0;
 14289  003A4E  5002               	movf	i2lcdNibble@data,w,c
 14290  003A50  0BF0               	andlw	240
 14291  003A52  6E01               	movwf	i2lcdNibble@temp,c
 14292                           
 14293                           ;lcd.c: 49: LATD = LATD & 0x0F;
 14294  003A54  508C               	movf	3980,w,c	;volatile
 14295  003A56  0B0F               	andlw	15
 14296  003A58  6E8C               	movwf	3980,c	;volatile
 14297                           
 14298                           ;lcd.c: 50: LATD = temp | LATD;
 14299  003A5A  5001               	movf	i2lcdNibble@temp,w,c
 14300  003A5C  108C               	iorwf	3980,w,c	;volatile
 14301  003A5E  6E8C               	movwf	3980,c	;volatile
 14302                           
 14303                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 14304  003A60  968C               	bcf	3980,3,c	;volatile
 14305                           
 14306                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
 14307  003A62  0E14               	movlw	20
 14308  003A64                     i2u1439_47:
 14309  003A64  2EE8               	decfsz	wreg,f,c
 14310  003A66  D7FE               	bra	i2u1439_47
 14311  003A68  D000               	nop2	
 14312                           
 14313                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 14314  003A6A  868C               	bsf	3980,3,c	;volatile
 14315                           
 14316                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
 14317  003A6C  0E14               	movlw	20
 14318  003A6E                     i2u1440_47:
 14319  003A6E  2EE8               	decfsz	wreg,f,c
 14320  003A70  D7FE               	bra	i2u1440_47
 14321  003A72  D000               	nop2	
 14322  003A74  0012               	return		;funcret
 14323  003A76                     __end_ofi2_lcdNibble:
 14324                           	opt stack 0
 14325                           tosu	equ	0xFFF
 14326                           tosh	equ	0xFFE
 14327                           tosl	equ	0xFFD
 14328                           pclatu	equ	0xFFB
 14329                           pclath	equ	0xFFA
 14330                           tblptru	equ	0xFF8
 14331                           tblptrh	equ	0xFF7
 14332                           tblptrl	equ	0xFF6
 14333                           tablat	equ	0xFF5
 14334                           prodh	equ	0xFF4
 14335                           prodl	equ	0xFF3
 14336                           intcon	equ	0xFF2
 14337                           intcon2	equ	0xFF1
 14338                           intcon3	equ	0xFF0
 14339                           indf0	equ	0xFEF
 14340                           postinc0	equ	0xFEE
 14341                           fsr0h	equ	0xFEA
 14342                           fsr0l	equ	0xFE9
 14343                           wreg	equ	0xFE8
 14344                           indf1	equ	0xFE7
 14345                           postinc1	equ	0xFE6
 14346                           postdec1	equ	0xFE5
 14347                           fsr1h	equ	0xFE2
 14348                           fsr1l	equ	0xFE1
 14349                           indf2	equ	0xFDF
 14350                           postinc2	equ	0xFDE
 14351                           postdec2	equ	0xFDD
 14352                           fsr2h	equ	0xFDA
 14353                           fsr2l	equ	0xFD9
 14354                           status	equ	0xFD8
 14355                           
 14356 ;; *************** function i2___awmod *****************
 14357 ;; Defined at:
 14358 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 14359 ;; Parameters:    Size  Location     Type
 14360 ;;  dividend        2    0[COMRAM] int 
 14361 ;;  divisor         2    2[COMRAM] int 
 14362 ;; Auto vars:     Size  Location     Type
 14363 ;;  __awmod         1    5[COMRAM] unsigned char 
 14364 ;;  __awmod         1    4[COMRAM] unsigned char 
 14365 ;; Return value:  Size  Location     Type
 14366 ;;                  2    0[COMRAM] int 
 14367 ;; Registers used:
 14368 ;;		wreg, status,2, status,0
 14369 ;; Tracked objects:
 14370 ;;		On entry : 0/0
 14371 ;;		On exit  : 0/0
 14372 ;;		Unchanged: 0/0
 14373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14374 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14375 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14377 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14378 ;;Total ram usage:        6 bytes
 14379 ;; Hardware stack levels used:    1
 14380 ;; This function calls:
 14381 ;;		Nothing
 14382 ;; This function is called by:
 14383 ;;		_keypressed
 14384 ;; This function uses a non-reentrant model
 14385 ;;
 14386                           
 14387                           	psect	text43
 14388  0037CE                     __ptext43:
 14389                           	opt stack 0
 14390  0037CE                     i2___awmod:
 14391                           	opt stack 23
 14392                           
 14393                           ;incstack = 0
 14394  0037CE  0E00               	movlw	0
 14395  0037D0  6E06               	movwf	i2___awmod@sign,c
 14396  0037D2  AE02               	btfss	i2___awmod@dividend+1,7,c
 14397  0037D4  D006               	goto	i2l4245
 14398  0037D6  6C01               	negf	i2___awmod@dividend,c
 14399  0037D8  1E02               	comf	i2___awmod@dividend+1,f,c
 14400  0037DA  B0D8               	btfsc	status,0,c
 14401  0037DC  2A02               	incf	i2___awmod@dividend+1,f,c
 14402  0037DE  0E01               	movlw	1
 14403  0037E0  6E06               	movwf	i2___awmod@sign,c
 14404  0037E2                     i2l4245:
 14405  0037E2  AE04               	btfss	i2___awmod@divisor+1,7,c
 14406  0037E4  D004               	goto	i2l4249
 14407  0037E6  6C03               	negf	i2___awmod@divisor,c
 14408  0037E8  1E04               	comf	i2___awmod@divisor+1,f,c
 14409  0037EA  B0D8               	btfsc	status,0,c
 14410  0037EC  2A04               	incf	i2___awmod@divisor+1,f,c
 14411  0037EE                     i2l4249:
 14412  0037EE  5003               	movf	i2___awmod@divisor,w,c
 14413  0037F0  1004               	iorwf	i2___awmod@divisor+1,w,c
 14414  0037F2  B4D8               	btfsc	status,2,c
 14415  0037F4  D018               	goto	i2l4265
 14416  0037F6  0E01               	movlw	1
 14417  0037F8  6E05               	movwf	i2___awmod@counter,c
 14418  0037FA  D004               	goto	i2l4255
 14419  0037FC                     i2l4253:
 14420  0037FC  90D8               	bcf	status,0,c
 14421  0037FE  3603               	rlcf	i2___awmod@divisor,f,c
 14422  003800  3604               	rlcf	i2___awmod@divisor+1,f,c
 14423  003802  2A05               	incf	i2___awmod@counter,f,c
 14424  003804                     i2l4255:
 14425  003804  AE04               	btfss	i2___awmod@divisor+1,7,c
 14426  003806  D7FA               	goto	i2l4253
 14427  003808                     i2l4257:
 14428  003808  5003               	movf	i2___awmod@divisor,w,c
 14429  00380A  5C01               	subwf	i2___awmod@dividend,w,c
 14430  00380C  5004               	movf	i2___awmod@divisor+1,w,c
 14431  00380E  5802               	subwfb	i2___awmod@dividend+1,w,c
 14432  003810  A0D8               	btfss	status,0,c
 14433  003812  D004               	goto	i2l4261
 14434  003814  5003               	movf	i2___awmod@divisor,w,c
 14435  003816  5E01               	subwf	i2___awmod@dividend,f,c
 14436  003818  5004               	movf	i2___awmod@divisor+1,w,c
 14437  00381A  5A02               	subwfb	i2___awmod@dividend+1,f,c
 14438  00381C                     i2l4261:
 14439  00381C  90D8               	bcf	status,0,c
 14440  00381E  3204               	rrcf	i2___awmod@divisor+1,f,c
 14441  003820  3203               	rrcf	i2___awmod@divisor,f,c
 14442  003822  2E05               	decfsz	i2___awmod@counter,f,c
 14443  003824  D7F1               	goto	i2l4257
 14444  003826                     i2l4265:
 14445  003826  5006               	movf	i2___awmod@sign,w,c
 14446  003828  B4D8               	btfsc	status,2,c
 14447  00382A  D004               	goto	i2l4269
 14448  00382C  6C01               	negf	i2___awmod@dividend,c
 14449  00382E  1E02               	comf	i2___awmod@dividend+1,f,c
 14450  003830  B0D8               	btfsc	status,0,c
 14451  003832  2A02               	incf	i2___awmod@dividend+1,f,c
 14452  003834                     i2l4269:
 14453  003834  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 14454  003838  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 14455  00383C  0012               	return	
 14456  00383E                     __end_ofi2___awmod:
 14457                           	opt stack 0
 14458                           tosu	equ	0xFFF
 14459                           tosh	equ	0xFFE
 14460                           tosl	equ	0xFFD
 14461                           pclatu	equ	0xFFB
 14462                           pclath	equ	0xFFA
 14463                           tblptru	equ	0xFF8
 14464                           tblptrh	equ	0xFF7
 14465                           tblptrl	equ	0xFF6
 14466                           tablat	equ	0xFF5
 14467                           prodh	equ	0xFF4
 14468                           prodl	equ	0xFF3
 14469                           intcon	equ	0xFF2
 14470                           intcon2	equ	0xFF1
 14471                           intcon3	equ	0xFF0
 14472                           indf0	equ	0xFEF
 14473                           postinc0	equ	0xFEE
 14474                           fsr0h	equ	0xFEA
 14475                           fsr0l	equ	0xFE9
 14476                           wreg	equ	0xFE8
 14477                           indf1	equ	0xFE7
 14478                           postinc1	equ	0xFE6
 14479                           postdec1	equ	0xFE5
 14480                           fsr1h	equ	0xFE2
 14481                           fsr1l	equ	0xFE1
 14482                           indf2	equ	0xFDF
 14483                           postinc2	equ	0xFDE
 14484                           postdec2	equ	0xFDD
 14485                           fsr2h	equ	0xFDA
 14486                           fsr2l	equ	0xFD9
 14487                           status	equ	0xFD8
 14488                           tosu	equ	0xFFF
 14489                           tosh	equ	0xFFE
 14490                           tosl	equ	0xFFD
 14491                           pclatu	equ	0xFFB
 14492                           pclath	equ	0xFFA
 14493                           tblptru	equ	0xFF8
 14494                           tblptrh	equ	0xFF7
 14495                           tblptrl	equ	0xFF6
 14496                           tablat	equ	0xFF5
 14497                           prodh	equ	0xFF4
 14498                           prodl	equ	0xFF3
 14499                           intcon	equ	0xFF2
 14500                           intcon2	equ	0xFF1
 14501                           intcon3	equ	0xFF0
 14502                           indf0	equ	0xFEF
 14503                           postinc0	equ	0xFEE
 14504                           fsr0h	equ	0xFEA
 14505                           fsr0l	equ	0xFE9
 14506                           wreg	equ	0xFE8
 14507                           indf1	equ	0xFE7
 14508                           postinc1	equ	0xFE6
 14509                           postdec1	equ	0xFE5
 14510                           fsr1h	equ	0xFE2
 14511                           fsr1l	equ	0xFE1
 14512                           indf2	equ	0xFDF
 14513                           postinc2	equ	0xFDE
 14514                           postdec2	equ	0xFDD
 14515                           fsr2h	equ	0xFDA
 14516                           fsr2l	equ	0xFD9
 14517                           status	equ	0xFD8
 14518                           
 14519                           	psect	text44
 14520  000000                     __ptext44:
 14521                           	opt stack 0
 14522                           tosu	equ	0xFFF
 14523                           tosh	equ	0xFFE
 14524                           tosl	equ	0xFFD
 14525                           pclatu	equ	0xFFB
 14526                           pclath	equ	0xFFA
 14527                           tblptru	equ	0xFF8
 14528                           tblptrh	equ	0xFF7
 14529                           tblptrl	equ	0xFF6
 14530                           tablat	equ	0xFF5
 14531                           prodh	equ	0xFF4
 14532                           prodl	equ	0xFF3
 14533                           intcon	equ	0xFF2
 14534                           intcon2	equ	0xFF1
 14535                           intcon3	equ	0xFF0
 14536                           indf0	equ	0xFEF
 14537                           postinc0	equ	0xFEE
 14538                           fsr0h	equ	0xFEA
 14539                           fsr0l	equ	0xFE9
 14540                           wreg	equ	0xFE8
 14541                           indf1	equ	0xFE7
 14542                           postinc1	equ	0xFE6
 14543                           postdec1	equ	0xFE5
 14544                           fsr1h	equ	0xFE2
 14545                           fsr1l	equ	0xFE1
 14546                           indf2	equ	0xFDF
 14547                           postinc2	equ	0xFDE
 14548                           postdec2	equ	0xFDD
 14549                           fsr2h	equ	0xFDA
 14550                           fsr2l	equ	0xFD9
 14551                           status	equ	0xFD8
 14552                           
 14553                           	psect	rparam
 14554  0000                     tosu	equ	0xFFF
 14555                           tosh	equ	0xFFE
 14556                           tosl	equ	0xFFD
 14557                           pclatu	equ	0xFFB
 14558                           pclath	equ	0xFFA
 14559                           tblptru	equ	0xFF8
 14560                           tblptrh	equ	0xFF7
 14561                           tblptrl	equ	0xFF6
 14562                           tablat	equ	0xFF5
 14563                           prodh	equ	0xFF4
 14564                           prodl	equ	0xFF3
 14565                           intcon	equ	0xFF2
 14566                           intcon2	equ	0xFF1
 14567                           intcon3	equ	0xFF0
 14568                           indf0	equ	0xFEF
 14569                           postinc0	equ	0xFEE
 14570                           fsr0h	equ	0xFEA
 14571                           fsr0l	equ	0xFE9
 14572                           wreg	equ	0xFE8
 14573                           indf1	equ	0xFE7
 14574                           postinc1	equ	0xFE6
 14575                           postdec1	equ	0xFE5
 14576                           fsr1h	equ	0xFE2
 14577                           fsr1l	equ	0xFE1
 14578                           indf2	equ	0xFDF
 14579                           postinc2	equ	0xFDE
 14580                           postdec2	equ	0xFDD
 14581                           fsr2h	equ	0xFDA
 14582                           fsr2l	equ	0xFD9
 14583                           status	equ	0xFD8
 14584                           
 14585                           	psect	temp
 14586  000076                     btemp:
 14587                           	opt stack 0
 14588  000076                     	ds	1
 14589  0000                     int$flags	set	btemp
 14590                           tosu	equ	0xFFF
 14591                           tosh	equ	0xFFE
 14592                           tosl	equ	0xFFD
 14593                           pclatu	equ	0xFFB
 14594                           pclath	equ	0xFFA
 14595                           tblptru	equ	0xFF8
 14596                           tblptrh	equ	0xFF7
 14597                           tblptrl	equ	0xFF6
 14598                           tablat	equ	0xFF5
 14599                           prodh	equ	0xFF4
 14600                           prodl	equ	0xFF3
 14601                           intcon	equ	0xFF2
 14602                           intcon2	equ	0xFF1
 14603                           intcon3	equ	0xFF0
 14604                           indf0	equ	0xFEF
 14605                           postinc0	equ	0xFEE
 14606                           fsr0h	equ	0xFEA
 14607                           fsr0l	equ	0xFE9
 14608                           wreg	equ	0xFE8
 14609                           indf1	equ	0xFE7
 14610                           postinc1	equ	0xFE6
 14611                           postdec1	equ	0xFE5
 14612                           fsr1h	equ	0xFE2
 14613                           fsr1l	equ	0xFE1
 14614                           indf2	equ	0xFDF
 14615                           postinc2	equ	0xFDE
 14616                           postdec2	equ	0xFDD
 14617                           fsr2h	equ	0xFDA
 14618                           fsr2l	equ	0xFD9
 14619                           status	equ	0xFD8


Data Sizes:
    Strings     382
    Constant    42
    Data        754
    BSS         199
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     61     117
    BANK0           128     58     121
    BANK1           256     10     130
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    display_menu$1164	PTR const unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_23(CODE[5]), STR_22(CODE[5]), STR_21(CODE[5]), STR_20(CODE[5]), 
		 -> STR_19(CODE[20]), STR_18(CODE[20]), STR_17(CODE[22]), STR_16(CODE[19]), 
		 -> menu(BIGRAM[720]), STR_15(CODE[15]), STR_14(CODE[6]), STR_13(CODE[18]), 
		 -> STR_12(CODE[19]), STR_11(CODE[16]), STR_10(CODE[12]), STR_9(CODE[19]), 
		 -> STR_8(CODE[17]), STR_7(CODE[14]), STR_6(CODE[12]), STR_5(CODE[16]), 
		 -> STR_4(CODE[25]), STR_3(CODE[23]), STR_2(CODE[23]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_26(CODE[14]), STR_25(CODE[15]), STR_24(CODE[8]), STR_1(CODE[5]), 
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> i2_putch(), Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), NULL(NULL[0]), STR_27(CODE[7]), 
		 -> _doprnt@c(BANK0[1]), ADRESH(SFR[1]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), 
		 -> ndisplay0(BANK1[18]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_26(CODE[14]), STR_25(CODE[15]), STR_24(CODE[8]), STR_23(CODE[5]), 
		 -> STR_22(CODE[5]), STR_21(CODE[5]), STR_20(CODE[5]), STR_19(CODE[20]), 
		 -> STR_18(CODE[20]), STR_17(CODE[22]), STR_16(CODE[19]), menu(BIGRAM[720]), 
		 -> STR_15(CODE[15]), STR_14(CODE[6]), STR_13(CODE[18]), STR_12(CODE[19]), 
		 -> STR_11(CODE[16]), STR_10(CODE[12]), STR_9(CODE[19]), STR_8(CODE[17]), 
		 -> STR_7(CODE[14]), STR_6(CODE[12]), STR_5(CODE[16]), STR_4(CODE[25]), 
		 -> STR_3(CODE[23]), STR_2(CODE[23]), STR_1(CODE[5]), display1(BANK1[18]), 
		 -> display0(BANK1[18]), 

    S517__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S517__prbuf$ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    display_menu@menuSizePtr	PTR int  size(2) Largest target is 2
		 -> endSize(BANK0[2]), menuSize(BANK0[2]), creditSize(BANK0[2]), events(BANK0[2]), 

    display_menu@menuIndexPtr	PTR int  size(2) Largest target is 2
		 -> endIndex(BANK0[2]), creditIndex(BANK0[2]), logIndex(BANK0[2]), menuIndex(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    i2_printf->i2__doprnt
    i2__doprnt->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _update_state->_sprintf
    _update_lcd->_printf
    _printf->__doprnt
    _update_display->_display_menu
    _display_menu->_sprintf
    _sprintf->__doprnt
    __doprnt->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _update_RTC->___wmul
    _I2C_Master_Read->_I2C_Master_Wait
    _sort->__measure
    __measure->___awmod
    _set_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _read_sensors->_readADC
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    _update_display->_display_menu

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  110379
                                             57 BANK0      1     1      0
                    _I2C_Master_Init
                            _initLCD
                       _read_sensors
                           _set_time
                               _sort
                         _update_RTC
                     _update_display
                         _update_lcd
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         3     3      0   24234
                                             52 BANK0      3     3      0
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _update_lcd                                           7     7      0   15392
                                             44 BANK0      3     3      0
                            _lcdInst
                             _printf
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     417
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4     441
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _printf                                              10     6      4   14224
                                             34 BANK0     10     6      4
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _update_display                                       0     0      0   55101
                            ___awdiv
                            ___awmod
                           __measure
                       _display_menu
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _display_menu                                        25    25      0   27128
                                             52 BANK0      5     5      0
                                              0 BANK1     10    10      0
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             18     6     12   19952
                                             34 BANK0     18     6     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            __doprnt
                           __measure (ARG)
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             26    20      6   11868
                                             12 BANK0     22    16      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     753
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _update_RTC                                           6     6      0    3699
                                              6 BANK0      6     6      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _sort                                                 6     6      0   10254
                                             20 BANK0      6     6      0
                            ___awmod
                             ___wmul
                           __measure
 ---------------------------------------------------------------------------------
 (2) __measure                                            14    12      2    4189
                                              6 BANK0     14    12      2
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3079
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2856
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0     592
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     493
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_sensors                                         5     5      0     409
                                              2 BANK0      5     5      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _keypressed                                          19    19      0   11552
                                             42 COMRAM    19    19      0
                          i2___awmod
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_printf                                             8     6      2    8568
                                             34 COMRAM     8     6      2
                          i2__doprnt
 ---------------------------------------------------------------------------------
 (9) i2__doprnt                                           26    20      6    8036
                                             12 COMRAM    22    16      6
                   Absolute function *
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch *
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i2___awmod                                            6     2      4     504
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _read_sensors
     _readADC
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _sort
     ___awmod
     ___wmul
     __measure
       ___awmod
   _update_RTC
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
   _update_display
     ___awdiv
     ___awmod
     __measure
       ___awmod
     _display_menu
       ___wmul
       _sprintf
         ___awdiv (ARG)
         ___awmod (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
         __measure (ARG)
           ___awmod
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
       __measure (ARG)
         ___awmod
   _update_lcd
     _lcdInst
       _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _strcmp
     _strcpy
   _update_state
     ___awdiv
     ___awmod
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
       __measure (ARG)
         ___awmod

 _keypressed (ROOT)
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2__doprnt
       Absolute function(Fake) *
       i2___lwdiv *
       i2___lwmod *
         i2___lwdiv (ARG)
       i2___wmul *
       i2_isdigit *
       i2_putch *
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0     2D0      37       18.1%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      A      82       7       50.8%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     3A      79       5       94.5%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3D      75       1       92.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     170      34        0.0%
DATA                 0      0     440       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Mar 07 14:29:19 2017

             _update_state 288A                         l34 3D88               ___awdiv@sign 0085  
      ___wmul@multiplicand 0082         i2___lwdiv@dividend 0001                __CFG_BORV$3 000000  
           _update_display 254A               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l536 0480                        l498 210E                        l957 3564  
                      _IR1 004C               __CFG_CPB$OFF 000000                        _IR2 0126  
            ?_display_menu 0001                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _SEN 007E28               ___awmod@sign 0085                        prod 000FF3  
                      tosl 000FFD                        wreg 000FE8               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       l1010 37C4                       l1020 38FE  
                     l5001 1D50                       l5013 1DA2                       l5103 1FE6  
                     l5031 1E16                       l5015 1DA8                       l5007 1D74  
                     l5121 205A                       l5105 1FEC                       l5033 1E1C  
                     l5025 1DE8                       l5211 34FE                       l5115 202C  
                     l5051 1E90                       l5043 1E5C                       l5019 1DB2  
                     l5133 20A2                       l5109 1FF6                       l5061 1ED0  
                     l5037 1E26                       l5207 34E8                       l5143 2102  
                     l5055 1E9A                       l5209 34F8                       l5153 3CD0  
                     l5129 2084                       l5073 1F0E                       l5049 1E8A  
                     l4601 38C6                       l5219 3552                       l5155 3CE2  
                     l5091 1F82                       l5067 1EFE                       l5171 342E  
                     l4603 38CC                       l5085 1F72                       l5069 1F04  
                     l5181 345E                       l5165 3418                       l5087 1F78  
                     l5079 1F44                       l4607 38F0                       l5097 1FB8  
                     l5601 2282                       l5505 3242                       l5177 344C  
                     l5193 349C                       l8001 06EA                       l5611 22B6  
                     l5179 3458                       l4563 3D08                       l8003 06F4  
                     l5621 236A                       l5605 2298                       l5509 3248  
                     l5197 34B0                       l5189 348E                       l4581 3780  
                     l8021 07D8                       l8013 0770                       l8005 0700  
                     l5463 392E                       l5615 230E                       l5607 229E  
                     l5551 214C                       l4591 37B6                       l4583 3786  
                     l8015 0784                       l8111 1B92                       l4911 3A10  
                     l5529 3030                       l5473 3964                       l5633 23B6  
                     l5625 2386                       l5641 2458                       l8041 090E  
                     l8009 0746                       l8025 0802                       l8105 1A52  
                     l4905 39CC                       l5467 3938                       l5547 2132  
                     l5491 3126                       l4579 3774                       l8027 0808  
                     l8035 08B4                       l4907 39D8                       l4861 3698  
                     l4853 3662                       l4845 363E                       l5653 24AC  
                     l5645 2474                       l5629 23A0                       l5573 21D4  
                     l5565 21AC                       l8029 085A                       l8037 08C6  
                     l8045 0938                       l4917 3C66                       l4855 366E  
                     l5559 216E                       l5495 3130                       l4599 38BA  
                     l8047 0944                       l4919 3C72                       l4857 3674  
                     l4865 36A6                       l4849 364E                       l5649 2490  
                     l5593 225A                       l5569 21BE                       l8049 098A  
                     l8081 1886                       l8401 2B50                       _ADFM 007E07  
                     l5579 2210                       l8075 1866                       l8411 25B6  
                     l4869 36BA                       l5597 226E                       l4893 3CB4  
                     l8069 1846                       l8093 18D8                       l8421 26CA  
                     l8413 25BC                       l8341 28B8                       l8501 35DC  
                     l4983 1CEE                       l8087 18B4                       l8095 18F2  
                     l8335 289E                       l8433 2826                       l8425 2746  
                     l8417 265E                       l8409 254C                       l8345 28C2  
                     l4995 1D40                       l4979 1CE4                       l8339 28B2  
                     l8515 3600                       l4997 1D46                       l4989 1D12  
                     l7901 0306                       l8429 27AA                       l8437 2860  
                     l8453 3386                       l8381 2AD0                       l8357 293E  
                     l8509 35F4                       l8447 3338                       l8375 2AB2  
                     l8367 29C2                       l7905 036C                       l7913 03C4  
                     l7841 0016                       l8393 2B28                       l8385 2AEC  
                     l7915 03DC                       l7907 0374                       l7923 041A  
                     l7851 0098                       _ADON 007E10                       l7933 04C6  
                     l7917 0402                       l7853 00AA                       l8397 2B3C  
                     l7951 0538                       l7935 04F0                       l7871 01B4  
                     l7863 0110                       l7847 006A                       l7937 04F6  
                     l7881 0206                       l7873 01BA                       l7857 00B4  
                     l7891 027E                       l7883 020C                       l7973 05A8  
                     l7949 0532                       l7965 0574                       l7885 024C  
                     l7991 066E                       l7967 0586                       l7895 02C4  
                     l7879 01FA                       l7977 05E0                       l7889 0272  
                     l7987 0644                       l7979 05EA                       l7899 02EE  
                     l7997 06C0                       STR_1 FF3A                       STR_2 FE9A  
                     STR_3 FEB1                       STR_4 FE81                       STR_5 FF83  
                     STR_6 FFCD                       STR_7 FFB1                       STR_8 FF62  
                     STR_9 FF19                       _LATA 000F89                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       _LATE 000F8D  
                     u7000 1E4C                       u7010 1E4E                       u7100 1F34  
                     u7110 1F36                       u7200 201C                       u7210 201E  
                     u7050 1EC0                       u7060 1EC2                       _RCEN 007E2B  
                     u7150 1FA8                       u8024 30A6                       u7160 1FAA  
                     u8040 212E                       u8025 30A0                       u8034 30CE  
                     u8210 22CC                       u8050 2148                       u8035 30C8  
                     u8060 2160                       u8230 2324                       u8320 246C  
                     u8224 2300                       u8225 22FA                       u8330 2488  
                     u8314 244A                       u8250 2380                       u6810 3CB2  
                     u8315 2444                       u8340 24A4                       u8260 239C  
                     u8244 2358                       u8245 2352                       u8350 2542  
                     u8280 23CA                       u6950 1DD8                       u8294 23FE  
                     u8295 23F8                       u6960 1DDA                       u7935 399A  
                     u7970 31C2                       _RSEN 007E29                       _main 3576  
              i2__doprnt@c 0022                i2__doprnt@f 000F                       _menu 0182  
                     _keys FE57                       _time 00BA                       fsr0h 000FEA  
                     fsr1h 000FE2         i2___lwdiv@quotient 0005                       indf0 000FEF  
                     fsr2h 000FDA                       fsr0l 000FE9                       indf1 000FE7  
                     indf2 000FDF                       fsr1l 000FE1                       fsr2l 000FD9  
                     _sort 2118                       btemp 0076                       prodh 000FF4  
                     prodl 000FF3                       start 000E              __CFG_IESO$OFF 000000  
          __end_ofi2_putch 3DB8              __CFG_MCLRE$ON 000000               ___param_bank 000000  
              i2_lcdNibble 3A20     __end_of_update_display 288A         _discretize_counter 00C7  
         ?_I2C_Master_Init 008D           ?_I2C_Master_Read 0001           ?_I2C_Master_Wait 0001  
         ?_I2C_Master_Stop 0001             ??_display_menu 00B4                      ?_main 0001  
                    _ACKEN 007E2C                      _ACKDT 007E2D            __end_of___awdiv 34BA  
                    STR_10 FFD9                      STR_11 FF73                      STR_20 FFFA  
                    STR_12 FF2C                      STR_21 FFFA                      STR_13 FF3F  
                    STR_22 FFFA                      STR_14 FFF4                      STR_23 FFFA  
                    STR_15 FF93                      STR_24 FFE5                      STR_16 FF06  
                    STR_25 FFA2                      STR_17 FEC8                      STR_26 FFBF  
                    STR_18 FEDE                      STR_27 FFED                      STR_19 FEF2  
                    STR_28 FF51            __end_of___awmod 36C4                      ?_sort 0001  
          __end_of___lldiv 3576                      _DIST1 011C            ___awdiv@divisor 0082  
                    u13040 097C                      u13008 07C2                      u13028 08F6  
                    u13047 0972                      u12600 01AA                      u12710 036A  
                    u12630 0246                      u12607 01A0                      u12720 03AE  
                    u12560 00D6                      u12570 00FE                      u14307 3CD8  
                    u12740 0452                      u12708 0336                      u14317 3B6C  
                    u12717 0360                      u12637 023C                      u12590 015C  
                    u12558 0052                      u14327 3BA2                      u12727 03A4  
                    u12567 00CC                      u14337 385E                      u12577 00F4  
                    u14347 3868                      u12747 0448                      u13740 2AE6  
                    u14357 3894                      u12597 0152                      u12678 02AE  
                    u14367 389E                      u14287 3614                      u12928 06AA  
                    u13680 29BC                      u14297 33A0                      u12968 0730  
                    u12898 062E            __end_of___lwdiv 37CE            __end_of___lwmod 3908  
                    i2l416 17FE                      i2l375 17FC                      i2l536 0D74  
          ___awdiv@counter 0084                      _PORTB 000F81                      _PROX1 0056  
                    _PROX2 0060            __end_of__doprnt 0996                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst 3DAC             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
                    _nRBPU 007F8F              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_readADC 3CE8            __end_of_initLCD 3BAE  
           __CFG_EBTRB$OFF 000000                 i2isdigit@c 0003            __end_of_dpowers FE72  
             i2__doprnt@ap 0011               i2__doprnt@cp 001B               i2__doprnt@pb 000D  
          __end_of_isdigit 3D12                      _state 00E6                      _putch 3D72  
                    pclath 000FFA                      tablat 000FF5           __end_ofi2___wmul 3D38  
                    sort@i 0098                      status 000FD8            __end_of_sprintf 3AC8  
       __size_ofi2___awmod 0070             __CFG_PBADEN$ON 000000           __end_ofi2_printf 3C5C  
       __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042         __size_ofi2__doprnt 0858  
          __initialization 36C4         __size_ofi2_lcdInst 000C               __end_of_main 3622  
             __end_of_keys FE68               __end_of_sort 254A                 i2printf@ap 0025  
               i2printf@pb 0027            ?_update_display 0001         __size_ofi2_isdigit 001E  
          _IR_THRESHOLD_HI 00DF                     ??_main 00B9                     ??_sort 0094  
            __activetblptr 000003          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0081  
   _latestSortedBottleTime 0100         ??_I2C_Master_Start 0081                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 0083                     _ADRESH 000FC4  
                   _ADRESL 000FC3           ___awdiv@dividend 0080            i2lcdNibble@data 0002  
                   ?_putch 0001            i2lcdNibble@temp 0001                     _INT1IE 007F83  
                   _INT1IF 007F80                     _CVRCON 000FB5                     i2l1010 3B10  
                   i2l1020 3BE6                     i2l3303 3BDC                     i2l3265 3D4E  
                   i2l3275 3ADE                     i2l4261 381C                     i2l4253 37FC  
                   i2l4245 37E2                     i2l3277 3AE6                     i2l4255 3804  
                   i2l3287 3B06                     i2l3279 3AEA                     i2l3295 3BBC  
                   i2l4257 3808                     i2l4265 3826                     i2l4249 37EE  
                   i2l3297 3BC4                     i2l3299 3BC8                     i2l4269 3834  
                   i2l8201 0D1C                     i2l8211 0DB2                     i2l8131 0A1C  
                   i2l8213 0DDC                     i2l8141 0A7C                     i2l8125 09E2  
                   i2l8303 1088                     i2l8215 0DE0                     i2l8151 0B0A  
                   i2l8135 0A22                     i2l8119 099A                     i2l8305 108E  
                   i2l8313 112A                     i2l8161 0B50                     i2l8129 0A0E  
                   i2l8307 10D8                     i2l8315 113A                     i2l8323 11A4  
                   i2l8251 0E72                     i2l8227 0E12                     i2l8243 0E48  
                   i2l8163 0B84                     i2l8229 0E16                     i2l8245 0E58  
                   i2l8173 0BE4                     i2l8157 0B42                     i2l8149 0B06  
                   i2l8325 11AC                     i2l8319 117A                     i2l8255 0E96  
                   i2l8183 0C80                     i2l8191 0CD4                     i2l8167 0B9A  
                   i2l8159 0B4C                     i2l8327 11E4                     i2l8265 0EEE  
                   i2l8281 0F92                     i2l8257 0E9E                     i2l8193 0CE6  
                   i2l8185 0C86                     i2l8169 0BA4                     i2l8177 0C0E  
                   i2l8601 1452                     i2l8291 1004                     i2l8283 0F9A  
                   i2l8275 0F60                     i2l8195 0D0A                     i2l8179 0C20  
                   i2l8603 145A                     i2l8531 124E                     i2l8293 1012  
                   i2l8269 0F18                     i2l8613 149C                     i2l8525 1236  
                   i2l8287 0FDA                     i2l8279 0F8A                     i2l8607 146A  
                   i2l8543 12C4                     i2l8527 123E                     i2l8641 15CC  
                   i2l8625 1520                     i2l8553 1326                     i2l8537 1280  
                   i2l8299 105E                     i2l8635 1588                     i2l8627 1540  
                   i2l8619 14E0                     i2l8555 132A                     i2l8653 1654  
                   i2l8629 1544                     i2l8573 1384                     i2l8557 132E  
                   i2l8549 1304                     i2l8671 1718                     i2l8647 1610  
                   i2l8591 1412                     i2l8575 138C                     i2l8559 1332  
                   i2l8665 16D8                     i2l8657 1694                     i2l8585 13CE  
                   i2l8569 135E                     i2l8683 179C                     i2l8659 1698  
                   i2l8579 139C                     i2l8691 17D2                     i2l8677 175C  
                   i2l8687 17C4                  ??i2_putch 0003                     _SSPADD 000FC8  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
         __end_of__measure 2118             __CFG_XINST$OFF 000000                     ___wmul 3BF0  
                ??___awdiv 0084             __CFG_STVREN$ON 000000                  ??___awmod 0084  
                ??___lldiv 0088                  ??___lwdiv 0084                  ??___lwmod 008B  
            ?_read_sensors 0001            _release_counter 00CF                  ??__doprnt 0092  
                   _events 00EF              i2__doprnt@idx 0017              i2__doprnt@len 0019  
            i2__doprnt@val 001D                     clear_0 372E                     clear_1 373A  
                   clear_2 3746           ___awdiv@quotient 0086            ___awmod@divisor 0082  
                   _time_i 003E               __doprnt@flag 009E                     _nstate 00E5  
          ___awmod@counter 0084                  ??_lcdInst 0082                     _printf 3B1A  
             __doprnt@prec 0097                     _strcmp 39CA                     _strcpy 3C5C  
                ??_readADC 0080                  ??_initLCD 0083               __pdataBIGRAM 0182  
             __pdataCOMRAM 006C                  ??_isdigit 0080           __end_of_set_time 396A  
        __end_ofi2___awmod 383E          __end_ofi2___lwdiv 3B1A               __mediumconst FE56  
        __end_ofi2___lwmod 3BF0                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8          __end_ofi2__doprnt 11EE             i2___awmod@sign 0006  
        __end_ofi2_lcdInst 3DC4                  ??_sprintf 00AE          __end_ofi2_isdigit 3D56  
               __accesstop 0080    __end_of__initialization 374C       __end_of_display_menu 1CD4  
            ___rparam_used 000001  display_menu@menuSelection 017C         i2___lwmod@dividend 0008  
           __pcstackCOMRAM 0001               __pidataBANK0 3D56             ??_read_sensors 0082  
            __end_of_putch 3D88                  ?i2___wmul 0001         __size_of_lcdNibble 0068  
              i2putch@data 0003                keypressed@i 003B                  ?i2_printf 0023  
            update_state@i 00B6           _IR_THRESHOLD_LOW 00E1                 __doprnt@ap 0090  
               __doprnt@cp 009A                 __doprnt@pb 008C                 __measure@i 008A  
                  ??_putch 0082                 __pbssBANK0 00BA                 __pbssBANK1 0100  
               __pnvCOMRAM 0072               ?i2_lcdNibble 0001                    ?___wmul 0080  
           _sorted_bottles 00D3                    ?_printf 00A2                    ?_strcmp 0080  
                  ?_strcpy 0080                 ??i2___wmul 0005                    _IR1_PIN 006F  
                  _IR2_PIN 0070                 _creditSize 00E9                  ?__measure 0086  
               _discretize 00F7       __measure@measurement 0092                 ??i2_printf 0025  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
                  i2_putch 3DAC          __end_of_lcdNibble 38A6           ??_update_display 00B9  
                  __Hparam 0000                    __Lparam 0000             _manualDateTime FE7A  
                ?_set_time 0001                    ___awdiv 33FC                    ___awmod 3622  
                  ___lldiv 34BA            __size_of___wmul 0036                    ___lwdiv 3756  
                  ___lwmod 38A6                  _CMCONbits 000FB4                    __doprnt 0012  
                _DIST1_PIN 006A                    __pcinit 36C4                    __ramtop 1000  
                  _endSize 00ED                    _lcdInst 3D9C                    __ptext0 3576  
                  __ptext1 288A                    __ptext2 32E0                    __ptext3 3C5C  
                  __ptext4 39CA                    __ptext5 3B1A                    __ptext6 254A  
                  __ptext7 183A                    __ptext8 3A76                    __ptext9 0012  
          __size_of_printf 004A            __size_of_strcmp 0056                    _readADC 3CBC  
          __size_of_strcpy 0032                    _initLCD 3B64          __end_of_hexpowers FE7A  
            i2_isdigit$777 0002                    _dpowers FE68                    _measure 0072  
                  _isdigit 3CE8                 ??__measure 0088             i2__doprnt@flag 001F  
         ___awmod@dividend 0080             i2__doprnt@prec 0018                    _release 0074  
               _keypressed 0008   __size_of_I2C_Master_Init 0060   __size_of_I2C_Master_Read 002E  
 __size_of_I2C_Master_Wait 0014   __size_of_I2C_Master_Stop 0008                    _runTime 00D1  
                  _yopWCap 00D9                    _sprintf 3A76              __doprnt@width 009F  
    __size_of_display_menu 049A             __pintcode_body 11EE         _DIST_THRESHOLD_LOW 00DD  
     end_of_initialization 374C       __end_of_read_sensors 30E4                    int_func 11EE  
      i2___wmul@multiplier 0001                  i2u1311_40 0A44                  i2u1310_48 09CE  
                i2u1311_47 0A3A                  i2u1312_40 0A6C                  i2u1312_47 0A62  
                i2u1314_40 0AC2                  i2u1314_47 0AB8                  i2u1322_48 0BD0  
                i2u1315_40 0AFC                  i2u1411_40 1516                  i2u1315_47 0AF2  
                i2u1404_40 1448                  i2u1326_40 0C7E                  i2u1325_48 0C4C  
                i2u1318_40 0B7E                  i2u1422_40 170E                  i2u1326_47 0C74  
                i2u1318_47 0B74                  i2u1327_40 0CC0                  i2u1327_47 0CB6  
                i2u1351_48 0FC6                  i2u1440_47 3A6E                  i2u1344_48 0EDA  
                i2u1329_40 0D4A                  i2u1329_47 0D40                  i2u1426_40 1792  
                i2u1355_48 104A                  i2u1347_48 0F4C                  i2u1437_47 3A38  
                i2u1357_48 1166                  i2u1438_47 3A42                  i2u1359_40 11DA  
                i2u1439_47 3A64                  i2u1359_47 11D0     __end_of_manualDateTime FE81  
                i2u1397_40 12FA  __size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A  
          ___lldiv@divisor 0084            ___lldiv@counter 008C                 ??_set_time 0083  
                  printf@f 00A2           I2C_Master_Init@c 008D           I2C_Master_Read@a 0081  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE                    strcmp@r 0085  
                _PROX1_PIN 006B                  _PROX2_PIN 0071               _display_menu 183A  
               _update_RTC 30E4                 _update_lcd 32E0                  i2___awmod 37CE  
        i2___lwdiv@divisor 0003                  i2___lwdiv 3AC8                  i2___lwmod 3BAE  
        i2___lwdiv@counter 0007                  i2__doprnt 0996                  i2_lcdInst 3DB8  
                i2_isdigit 3D38              ?_update_state 0001              __pidataBIGRAM 2B88  
           __end_of___wmul 3C26       __size_ofi2_lcdNibble 0056              __pidataCOMRAM 3DDE  
            i2lcdInst@data 0003           i2___wmul@product 0005             __end_of_printf 3B64  
              update_RTC@i 008B             __end_of_strcmp 3A20             __end_of_strcpy 3C8E  
           update_lcd@flag 00AD        start_initialization 36C4                ?_keypressed 0001  
        __size_ofi2___wmul 0026                  i2printf@f 0023                 ?i2___awmod 0001  
               ?i2___lwdiv 0001                 ?i2___lwmod 0008          __size_ofi2_printf 0036  
               ?i2__doprnt 000D          ??_I2C_Master_Init 0091          ??_I2C_Master_Read 0081  
        ??_I2C_Master_Wait 0080                 ?i2_lcdInst 0001          ??_I2C_Master_Stop 0081  
               ?i2_isdigit 0001             ??_update_state 00B4                   ??___wmul 0084  
              __doprnt@idx 0096                __doprnt@len 0098                __doprnt@val 009C  
              __pdataBANK0 00DB           __CFG_LPT1OSC$OFF 000000                   ??_printf 00A6  
                 ??_strcmp 0084                   ??_strcpy 0084                __pbssCOMRAM 003E  
              ?_update_RTC 0001      __size_of_read_sensors 028C              __pcstackBANK0 0080  
            __pcstackBANK1 0178                ?_update_lcd 0001          i2___lwmod@divisor 000A  
        __size_of__measure 0444          i2___lwmod@counter 000C                   ?i2_putch 0001  
                __doprnt@c 00A1                  __doprnt@f 008E                  __pnvBANK0 00F7  
         _I2C_Master_Start 3DD6           _I2C_Master_Write 3DC4           ___lwdiv@dividend 0080  
        __CFG_CCP2MX$PORTC 000000        __size_of_keypressed 1832                  __pintcode 0008  
            __pmediumconst FE56                  _lcdNibble 383E                   ?___awdiv 0080  
                 ?___awmod 0080                   ?___lldiv 0080                   ?___lwdiv 0080  
                 ?___lwmod 0087          __size_of_set_time 0062                   ?__doprnt 008C  
             _read_sensors 2E58                   ?_lcdInst 0001                  _eskaNoCap 00C9  
                 ?_readADC 0001                   ?_initLCD 0001          _display_menu$1164 017E  
                 ?_isdigit 0001                  _hexpowers FE72                  _menuIndex 00F3  
         ___lwdiv@quotient 0085                ??i2___awmod 0005                   ?_sprintf 00A2  
              ??i2___lwdiv 0005                  _ndisplay0 0154                ??i2___lwmod 000C  
                _ndisplay1 0166             __size_of_putch 0016                ??i2__doprnt 0013  
              _creditIndex 00E7                ??i2_lcdInst 0003             ___wmul@product 0084  
                 _LATDbits 000F8C          _DIST_THRESHOLD_HI 00DB                ??i2_isdigit 0001  
      __size_of_update_RTC 01FC           __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001  
      __size_of_update_lcd 011C                 _ADCON0bits 000FC2          ___wmul@multiplier 0080  
                _startTime 010E                  _sortIndex 00E3                   i2___wmul 3D12  
            lcdNibble@data 0081              lcdNibble@temp 0080                   i2_printf 3C26  
     __end_of_update_state 2B88        I2C_Master_Read@temp 0082                _bottle_type 00C1  
                copy_data0 36D8                  copy_data1 36FC                  copy_data2 371C  
              _cycle_time1 00C3                _cycle_time2 00C5         i2___awmod@dividend 0001  
         __size_ofi2_putch 000C         keypressed@keypress 003D                   __Hrparam 0000  
                 __Lrparam 0000         __CFG_BOREN$SBORDIS 000000           __size_of___awdiv 00BE  
         __size_of___awmod 00A2      i2___wmul@multiplicand 0003           __size_of___lldiv 00BC  
         __size_of___lwdiv 0078           __size_of___lwmod 0062             readADC@channel 0081  
         __size_of__doprnt 0984    __size_of_update_display 0340                _isdigit$777 0081  
          _putch$intlevel0 3D78   display_menu@menuIndexPtr 0180           __size_of_lcdInst 0010  
                 __measure 1CD4            _I2C_Master_Init 396A           __size_of_readADC 002C  
          _I2C_Master_Read 3C8E           __size_of_initLCD 004A            _I2C_Master_Wait 3D88  
          _I2C_Master_Stop 3DCE                 _DIST1_TRIG 006E               ??_keypressed 002B  
         __size_of_isdigit 002A                   _endIndex 00EB            ___lwdiv@divisor 0082  
          ___lwdiv@counter 0084                   __ptext10 3D72                   __ptext11 3CE8  
                 __ptext20 3BF0                   __ptext12 38A6                   __ptext21 3908  
                 __ptext13 3756                   __ptext30 383E                   __ptext22 3DC4  
                 __ptext14 33FC                   __ptext31 396A                   __ptext23 3DCE  
                 __ptext15 30E4                   __ptext40 3AC8                   __ptext32 34BA  
                 __ptext24 3DD6                   __ptext16 3C8E                   __ptext41 3DB8  
                 __ptext25 3D88                   __ptext17 2118                   __ptext42 3A20  
                 __ptext34 3C26                   __ptext26 2E58                   __ptext18 1CD4  
                 __ptext43 37CE                   __ptext35 0996                   __ptext27 3CBC  
                 __ptext19 3622                   __ptext44 0000                   __ptext36 3DAC  
                 __ptext28 3B64                   __ptext37 3D38                   __ptext29 3D9C  
                 __ptext38 3D12                   __ptext39 3BAE                   _display0 0130  
                 _eskaWCap 00CB                   _display1 0142           __size_of_sprintf 0052  
               strcpy@from 0082                   _logIndex 00F1              __size_of_main 00AC  
                 _menuSize 00F5              __size_of_sort 0432            i2__doprnt@width 0020  
                set_time@i 0083                   _timeDiff 00D5                   _set_time 3908  
            ??i2_lcdNibble 0001                ??_lcdNibble 0080         __end_of_keypressed 183A  
                 int$flags 0076                   _sortSize 006C                   _yopNoCap 00D7  
        i2___awmod@divisor 0003                  putch@data 0082          i2___awmod@counter 0005  
 __end_of_I2C_Master_Start 3DDE   __end_of_I2C_Master_Write 3DCE                 _INTCONbits 000FF2  
             ??_update_RTC 0086               ??_update_lcd 00AC                   isdigit@c 0082  
                 intlevel2 0000                  sprintf@ap 00AE                  sprintf@pb 00B0  
                sprintf@wh 00A2            _measure_counter 00CD           ___lwmod@dividend 0087  
         ___lldiv@dividend 0080    display_menu@menuSizePtr 017A             __measure@i_500 008C  
           __measure@i_501 008D             __measure@i_502 008E             __measure@i_503 008F  
           __measure@i_504 0090             __measure@i_505 0091             __measure@i_499 008B  
       __end_of_update_RTC 32E0                   printf@ap 00A6                   printf@pb 00A8  
       __end_of_update_lcd 33FC    __end_of_I2C_Master_Init 39CA    __end_of_I2C_Master_Read 3CBC  
  __end_of_I2C_Master_Wait 3D9C    __end_of_I2C_Master_Stop 3DD6                lcdInst@data 0082  
      __end_ofi2_lcdNibble 3A76                   sprintf@f 00A4      __size_of_update_state 02FE  
                 strcmp@s1 0080                   strcmp@s2 0082           ___lldiv@quotient 0088  
        I2C_Master_Write@d 0081            ___lwmod@divisor 0089                   strcpy@cp 0084  
                 strcpy@to 0080            ___lwmod@counter 008B              read_sensors@i 0086  
     display_menu@selector 0178  
