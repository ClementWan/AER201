

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Fri Feb 24 18:28:52 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           ; Version 1.40
    68                           ; Generated 01/12/2016 GMT
    69                           ; 
    70                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC18F4620 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101  0000                     
   102                           	psect	idataCOMRAM
   103  003156                     __pidataCOMRAM:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _DIST_THRESHOLD_HI
   107  003156  02FF               	dw	767
   108                           
   109                           ;initializer for _DIST_THRESHOLD_LOW
   110  003158  00FF               	dw	255
   111                           
   112                           ;initializer for _IR_THRESHOLD_HI
   113  00315A  02FF               	dw	767
   114                           
   115                           ;initializer for _IR_THRESHOLD_LOW
   116  00315C  00FF               	dw	255
   117                           
   118                           ;initializer for _measure
   119  00315E  0005               	dw	5
   120                           
   121                           ;initializer for _release
   122  003160  0FA0               	dw	4000
   123                           
   124                           ;initializer for _DIST1_TRIG
   125  003162  05                 	db	5
   126                           
   127                           	psect	idataBIGRAM
   128  001C54                     __pidataBIGRAM:
   129                           	opt stack 0
   130                           
   131                           ;initializer for _menu
   132  001C54  31                 	db	49
   133  001C55  2E                 	db	46
   134  001C56  20                 	db	32
   135  001C57  53                 	db	83
   136  001C58  6F                 	db	111
   137  001C59  72                 	db	114
   138  001C5A  74                 	db	116
   139  001C5B  20                 	db	32
   140  001C5C  20                 	db	32
   141  001C5D  20                 	db	32
   142  001C5E  20                 	db	32
   143  001C5F  20                 	db	32
   144  001C60  20                 	db	32
   145  001C61  20                 	db	32
   146  001C62  20                 	db	32
   147  001C63  00                 	db	0
   148  001C64  00                 	db	0
   149  001C65  00                 	db	0
   150  001C66  32                 	db	50
   151  001C67  2E                 	db	46
   152  001C68  20                 	db	32
   153  001C69  50                 	db	80
   154  001C6A  20                 	db	32
   155  001C6B  4C                 	db	76
   156  001C6C  6F                 	db	111
   157  001C6D  67                 	db	103
   158  001C6E  73                 	db	115
   159  001C6F  20                 	db	32
   160  001C70  20                 	db	32
   161  001C71  20                 	db	32
   162  001C72  20                 	db	32
   163  001C73  20                 	db	32
   164  001C74  20                 	db	32
   165  001C75  00                 	db	0
   166  001C76  00                 	db	0
   167  001C77  00                 	db	0
   168  001C78  33                 	db	51
   169  001C79  2E                 	db	46
   170  001C7A  20                 	db	32
   171  001C7B  43                 	db	67
   172  001C7C  72                 	db	114
   173  001C7D  65                 	db	101
   174  001C7E  64                 	db	100
   175  001C7F  69                 	db	105
   176  001C80  74                 	db	116
   177  001C81  73                 	db	115
   178  001C82  20                 	db	32
   179  001C83  20                 	db	32
   180  001C84  20                 	db	32
   181  001C85  20                 	db	32
   182  001C86  20                 	db	32
   183  001C87  00                 	db	0
   184  001C88  00                 	db	0
   185  001C89  00                 	db	0
   186  001C8A  00                 	db	0
   187  001C8B  00                 	db	0
   188  001C8C  00                 	db	0
   189  001C8D  00                 	db	0
   190  001C8E  00                 	db	0
   191  001C8F  00                 	db	0
   192  001C90  00                 	db	0
   193  001C91  00                 	db	0
   194  001C92  00                 	db	0
   195  001C93  00                 	db	0
   196  001C94  00                 	db	0
   197  001C95  00                 	db	0
   198  001C96  00                 	db	0
   199  001C97  00                 	db	0
   200  001C98  00                 	db	0
   201  001C99  00                 	db	0
   202  001C9A  00                 	db	0
   203  001C9B  00                 	db	0
   204  001C9C  00                 	db	0
   205  001C9D  00                 	db	0
   206  001C9E  00                 	db	0
   207  001C9F  00                 	db	0
   208  001CA0  00                 	db	0
   209  001CA1  00                 	db	0
   210  001CA2  00                 	db	0
   211  001CA3  00                 	db	0
   212  001CA4  00                 	db	0
   213  001CA5  00                 	db	0
   214  001CA6  00                 	db	0
   215  001CA7  00                 	db	0
   216  001CA8  00                 	db	0
   217  001CA9  00                 	db	0
   218  001CAA  00                 	db	0
   219  001CAB  00                 	db	0
   220  001CAC  00                 	db	0
   221  001CAD  00                 	db	0
   222  001CAE  00                 	db	0
   223  001CAF  00                 	db	0
   224  001CB0  00                 	db	0
   225  001CB1  00                 	db	0
   226  001CB2  00                 	db	0
   227  001CB3  00                 	db	0
   228  001CB4  00                 	db	0
   229  001CB5  00                 	db	0
   230  001CB6  00                 	db	0
   231  001CB7  00                 	db	0
   232  001CB8  00                 	db	0
   233  001CB9  00                 	db	0
   234  001CBA  00                 	db	0
   235  001CBB  00                 	db	0
   236  001CBC  00                 	db	0
   237  001CBD  00                 	db	0
   238  001CBE  00                 	db	0
   239  001CBF  00                 	db	0
   240  001CC0  00                 	db	0
   241  001CC1  00                 	db	0
   242  001CC2  00                 	db	0
   243  001CC3  00                 	db	0
   244  001CC4  00                 	db	0
   245  001CC5  00                 	db	0
   246  001CC6  00                 	db	0
   247  001CC7  00                 	db	0
   248  001CC8  00                 	db	0
   249  001CC9  00                 	db	0
   250  001CCA  00                 	db	0
   251  001CCB  00                 	db	0
   252  001CCC  00                 	db	0
   253  001CCD  00                 	db	0
   254  001CCE  00                 	db	0
   255  001CCF  00                 	db	0
   256  001CD0  00                 	db	0
   257  001CD1  00                 	db	0
   258  001CD2  00                 	db	0
   259  001CD3  00                 	db	0
   260  001CD4  00                 	db	0
   261  001CD5  00                 	db	0
   262  001CD6  00                 	db	0
   263  001CD7  00                 	db	0
   264  001CD8  00                 	db	0
   265  001CD9  00                 	db	0
   266  001CDA  00                 	db	0
   267  001CDB  00                 	db	0
   268  001CDC  00                 	db	0
   269  001CDD  00                 	db	0
   270  001CDE  00                 	db	0
   271  001CDF  00                 	db	0
   272  001CE0  00                 	db	0
   273  001CE1  00                 	db	0
   274  001CE2  00                 	db	0
   275  001CE3  00                 	db	0
   276  001CE4  00                 	db	0
   277  001CE5  00                 	db	0
   278  001CE6  00                 	db	0
   279  001CE7  00                 	db	0
   280  001CE8  00                 	db	0
   281  001CE9  00                 	db	0
   282  001CEA  00                 	db	0
   283  001CEB  00                 	db	0
   284  001CEC  00                 	db	0
   285  001CED  00                 	db	0
   286  001CEE  00                 	db	0
   287  001CEF  00                 	db	0
   288  001CF0  00                 	db	0
   289  001CF1  00                 	db	0
   290  001CF2  00                 	db	0
   291  001CF3  00                 	db	0
   292  001CF4  00                 	db	0
   293  001CF5  00                 	db	0
   294  001CF6  00                 	db	0
   295  001CF7  00                 	db	0
   296  001CF8  00                 	db	0
   297  001CF9  00                 	db	0
   298  001CFA  00                 	db	0
   299  001CFB  00                 	db	0
   300  001CFC  00                 	db	0
   301  001CFD  00                 	db	0
   302  001CFE  00                 	db	0
   303  001CFF  00                 	db	0
   304  001D00  00                 	db	0
   305  001D01  00                 	db	0
   306  001D02  00                 	db	0
   307  001D03  00                 	db	0
   308  001D04  00                 	db	0
   309  001D05  00                 	db	0
   310  001D06  00                 	db	0
   311  001D07  00                 	db	0
   312  001D08  65                 	db	101
   313  001D09  76                 	db	118
   314  001D0A  65                 	db	101
   315  001D0B  6E                 	db	110
   316  001D0C  74                 	db	116
   317  001D0D  31                 	db	49
   318  001D0E  20                 	db	32
   319  001D0F  20                 	db	32
   320  001D10  20                 	db	32
   321  001D11  20                 	db	32
   322  001D12  20                 	db	32
   323  001D13  20                 	db	32
   324  001D14  20                 	db	32
   325  001D15  20                 	db	32
   326  001D16  20                 	db	32
   327  001D17  00                 	db	0
   328  001D18  00                 	db	0
   329  001D19  00                 	db	0
   330  001D1A  65                 	db	101
   331  001D1B  76                 	db	118
   332  001D1C  65                 	db	101
   333  001D1D  6E                 	db	110
   334  001D1E  74                 	db	116
   335  001D1F  32                 	db	50
   336  001D20  20                 	db	32
   337  001D21  20                 	db	32
   338  001D22  20                 	db	32
   339  001D23  20                 	db	32
   340  001D24  20                 	db	32
   341  001D25  20                 	db	32
   342  001D26  20                 	db	32
   343  001D27  20                 	db	32
   344  001D28  20                 	db	32
   345  001D29  00                 	db	0
   346  001D2A  00                 	db	0
   347  001D2B  00                 	db	0
   348  001D2C  65                 	db	101
   349  001D2D  76                 	db	118
   350  001D2E  65                 	db	101
   351  001D2F  6E                 	db	110
   352  001D30  74                 	db	116
   353  001D31  33                 	db	51
   354  001D32  20                 	db	32
   355  001D33  20                 	db	32
   356  001D34  20                 	db	32
   357  001D35  20                 	db	32
   358  001D36  20                 	db	32
   359  001D37  20                 	db	32
   360  001D38  20                 	db	32
   361  001D39  20                 	db	32
   362  001D3A  20                 	db	32
   363  001D3B  00                 	db	0
   364  001D3C  00                 	db	0
   365  001D3D  00                 	db	0
   366  001D3E  00                 	db	0
   367  001D3F  00                 	db	0
   368  001D40  00                 	db	0
   369  001D41  00                 	db	0
   370  001D42  00                 	db	0
   371  001D43  00                 	db	0
   372  001D44  00                 	db	0
   373  001D45  00                 	db	0
   374  001D46  00                 	db	0
   375  001D47  00                 	db	0
   376  001D48  00                 	db	0
   377  001D49  00                 	db	0
   378  001D4A  00                 	db	0
   379  001D4B  00                 	db	0
   380  001D4C  00                 	db	0
   381  001D4D  00                 	db	0
   382  001D4E  00                 	db	0
   383  001D4F  00                 	db	0
   384  001D50  00                 	db	0
   385  001D51  00                 	db	0
   386  001D52  00                 	db	0
   387  001D53  00                 	db	0
   388  001D54  00                 	db	0
   389  001D55  00                 	db	0
   390  001D56  00                 	db	0
   391  001D57  00                 	db	0
   392  001D58  00                 	db	0
   393  001D59  00                 	db	0
   394  001D5A  00                 	db	0
   395  001D5B  00                 	db	0
   396  001D5C  00                 	db	0
   397  001D5D  00                 	db	0
   398  001D5E  00                 	db	0
   399  001D5F  00                 	db	0
   400  001D60  00                 	db	0
   401  001D61  00                 	db	0
   402  001D62  00                 	db	0
   403  001D63  00                 	db	0
   404  001D64  00                 	db	0
   405  001D65  00                 	db	0
   406  001D66  00                 	db	0
   407  001D67  00                 	db	0
   408  001D68  00                 	db	0
   409  001D69  00                 	db	0
   410  001D6A  00                 	db	0
   411  001D6B  00                 	db	0
   412  001D6C  00                 	db	0
   413  001D6D  00                 	db	0
   414  001D6E  00                 	db	0
   415  001D6F  00                 	db	0
   416  001D70  00                 	db	0
   417  001D71  00                 	db	0
   418  001D72  00                 	db	0
   419  001D73  00                 	db	0
   420  001D74  00                 	db	0
   421  001D75  00                 	db	0
   422  001D76  00                 	db	0
   423  001D77  00                 	db	0
   424  001D78  00                 	db	0
   425  001D79  00                 	db	0
   426  001D7A  00                 	db	0
   427  001D7B  00                 	db	0
   428  001D7C  00                 	db	0
   429  001D7D  00                 	db	0
   430  001D7E  00                 	db	0
   431  001D7F  00                 	db	0
   432  001D80  00                 	db	0
   433  001D81  00                 	db	0
   434  001D82  00                 	db	0
   435  001D83  00                 	db	0
   436  001D84  00                 	db	0
   437  001D85  00                 	db	0
   438  001D86  00                 	db	0
   439  001D87  00                 	db	0
   440  001D88  00                 	db	0
   441  001D89  00                 	db	0
   442  001D8A  00                 	db	0
   443  001D8B  00                 	db	0
   444  001D8C  00                 	db	0
   445  001D8D  00                 	db	0
   446  001D8E  00                 	db	0
   447  001D8F  00                 	db	0
   448  001D90  00                 	db	0
   449  001D91  00                 	db	0
   450  001D92  00                 	db	0
   451  001D93  00                 	db	0
   452  001D94  00                 	db	0
   453  001D95  00                 	db	0
   454  001D96  00                 	db	0
   455  001D97  00                 	db	0
   456  001D98  00                 	db	0
   457  001D99  00                 	db	0
   458  001D9A  00                 	db	0
   459  001D9B  00                 	db	0
   460  001D9C  00                 	db	0
   461  001D9D  00                 	db	0
   462  001D9E  00                 	db	0
   463  001D9F  00                 	db	0
   464  001DA0  00                 	db	0
   465  001DA1  00                 	db	0
   466  001DA2  00                 	db	0
   467  001DA3  00                 	db	0
   468  001DA4  00                 	db	0
   469  001DA5  00                 	db	0
   470  001DA6  00                 	db	0
   471  001DA7  00                 	db	0
   472  001DA8  00                 	db	0
   473  001DA9  00                 	db	0
   474  001DAA  00                 	db	0
   475  001DAB  00                 	db	0
   476  001DAC  00                 	db	0
   477  001DAD  00                 	db	0
   478  001DAE  00                 	db	0
   479  001DAF  00                 	db	0
   480  001DB0  00                 	db	0
   481  001DB1  00                 	db	0
   482  001DB2  00                 	db	0
   483  001DB3  00                 	db	0
   484  001DB4  00                 	db	0
   485  001DB5  00                 	db	0
   486  001DB6  00                 	db	0
   487  001DB7  00                 	db	0
   488  001DB8  00                 	db	0
   489  001DB9  00                 	db	0
   490  001DBA  00                 	db	0
   491  001DBB  00                 	db	0
   492  001DBC  4D                 	db	77
   493  001DBD  69                 	db	105
   494  001DBE  63                 	db	99
   495  001DBF  72                 	db	114
   496  001DC0  6F                 	db	111
   497  001DC1  63                 	db	99
   498  001DC2  6F                 	db	111
   499  001DC3  6E                 	db	110
   500  001DC4  74                 	db	116
   501  001DC5  72                 	db	114
   502  001DC6  6F                 	db	111
   503  001DC7  6C                 	db	108
   504  001DC8  3A                 	db	58
   505  001DC9  20                 	db	32
   506  001DCA  20                 	db	32
   507  001DCB  00                 	db	0
   508  001DCC  00                 	db	0
   509  001DCD  00                 	db	0
   510  001DCE  43                 	db	67
   511  001DCF  6C                 	db	108
   512  001DD0  65                 	db	101
   513  001DD1  6D                 	db	109
   514  001DD2  65                 	db	101
   515  001DD3  6E                 	db	110
   516  001DD4  74                 	db	116
   517  001DD5  20                 	db	32
   518  001DD6  57                 	db	87
   519  001DD7  61                 	db	97
   520  001DD8  6E                 	db	110
   521  001DD9  20                 	db	32
   522  001DDA  20                 	db	32
   523  001DDB  20                 	db	32
   524  001DDC  20                 	db	32
   525  001DDD  00                 	db	0
   526  001DDE  00                 	db	0
   527  001DDF  00                 	db	0
   528  001DE0  43                 	db	67
   529  001DE1  69                 	db	105
   530  001DE2  72                 	db	114
   531  001DE3  63                 	db	99
   532  001DE4  75                 	db	117
   533  001DE5  69                 	db	105
   534  001DE6  74                 	db	116
   535  001DE7  73                 	db	115
   536  001DE8  3A                 	db	58
   537  001DE9  20                 	db	32
   538  001DEA  20                 	db	32
   539  001DEB  20                 	db	32
   540  001DEC  20                 	db	32
   541  001DED  20                 	db	32
   542  001DEE  20                 	db	32
   543  001DEF  00                 	db	0
   544  001DF0  00                 	db	0
   545  001DF1  00                 	db	0
   546  001DF2  4A                 	db	74
   547  001DF3  75                 	db	117
   548  001DF4  73                 	db	115
   549  001DF5  74                 	db	116
   550  001DF6  69                 	db	105
   551  001DF7  6E                 	db	110
   552  001DF8  20                 	db	32
   553  001DF9  51                 	db	81
   554  001DFA  75                 	db	117
   555  001DFB  20                 	db	32
   556  001DFC  20                 	db	32
   557  001DFD  20                 	db	32
   558  001DFE  20                 	db	32
   559  001DFF  20                 	db	32
   560  001E00  20                 	db	32
   561  001E01  00                 	db	0
   562  001E02  00                 	db	0
   563  001E03  00                 	db	0
   564  001E04  45                 	db	69
   565  001E05  6C                 	db	108
   566  001E06  65                 	db	101
   567  001E07  63                 	db	99
   568  001E08  74                 	db	116
   569  001E09  72                 	db	114
   570  001E0A  6F                 	db	111
   571  001E0B  6D                 	db	109
   572  001E0C  65                 	db	101
   573  001E0D  63                 	db	99
   574  001E0E  68                 	db	104
   575  001E0F  3A                 	db	58
   576  001E10  20                 	db	32
   577  001E11  20                 	db	32
   578  001E12  20                 	db	32
   579  001E13  00                 	db	0
   580  001E14  00                 	db	0
   581  001E15  00                 	db	0
   582  001E16  50                 	db	80
   583  001E17  65                 	db	101
   584  001E18  74                 	db	116
   585  001E19  65                 	db	101
   586  001E1A  72                 	db	114
   587  001E1B  20                 	db	32
   588  001E1C  46                 	db	70
   589  001E1D  65                 	db	101
   590  001E1E  6E                 	db	110
   591  001E1F  67                 	db	103
   592  001E20  20                 	db	32
   593  001E21  20                 	db	32
   594  001E22  20                 	db	32
   595  001E23  20                 	db	32
   596  001E24  20                 	db	32
   597  001E25  00                 	db	0
   598  001E26  00                 	db	0
   599  001E27  00                 	db	0
   600  001E28  00                 	db	0
   601  001E29  00                 	db	0
   602  001E2A  00                 	db	0
   603  001E2B  00                 	db	0
   604  001E2C  00                 	db	0
   605  001E2D  00                 	db	0
   606  001E2E  00                 	db	0
   607  001E2F  00                 	db	0
   608  001E30  00                 	db	0
   609  001E31  00                 	db	0
   610  001E32  00                 	db	0
   611  001E33  00                 	db	0
   612  001E34  00                 	db	0
   613  001E35  00                 	db	0
   614  001E36  00                 	db	0
   615  001E37  00                 	db	0
   616  001E38  00                 	db	0
   617  001E39  00                 	db	0
   618  001E3A  00                 	db	0
   619  001E3B  00                 	db	0
   620  001E3C  00                 	db	0
   621  001E3D  00                 	db	0
   622  001E3E  00                 	db	0
   623  001E3F  00                 	db	0
   624  001E40  00                 	db	0
   625  001E41  00                 	db	0
   626  001E42  00                 	db	0
   627  001E43  00                 	db	0
   628  001E44  00                 	db	0
   629  001E45  00                 	db	0
   630  001E46  00                 	db	0
   631  001E47  00                 	db	0
   632  001E48  00                 	db	0
   633  001E49  00                 	db	0
   634  001E4A  00                 	db	0
   635  001E4B  00                 	db	0
   636  001E4C  00                 	db	0
   637  001E4D  00                 	db	0
   638  001E4E  00                 	db	0
   639  001E4F  00                 	db	0
   640  001E50  00                 	db	0
   641  001E51  00                 	db	0
   642  001E52  00                 	db	0
   643  001E53  00                 	db	0
   644  001E54  00                 	db	0
   645  001E55  00                 	db	0
   646  001E56  00                 	db	0
   647  001E57  00                 	db	0
   648  001E58  00                 	db	0
   649  001E59  00                 	db	0
   650  001E5A  00                 	db	0
   651  001E5B  00                 	db	0
   652  001E5C  00                 	db	0
   653  001E5D  00                 	db	0
   654  001E5E  00                 	db	0
   655  001E5F  00                 	db	0
   656  001E60  00                 	db	0
   657  001E61  00                 	db	0
   658  001E62  00                 	db	0
   659  001E63  00                 	db	0
   660  001E64  00                 	db	0
   661  001E65  00                 	db	0
   662  001E66  00                 	db	0
   663  001E67  00                 	db	0
   664  001E68  00                 	db	0
   665  001E69  00                 	db	0
   666  001E6A  00                 	db	0
   667  001E6B  00                 	db	0
   668  001E6C  00                 	db	0
   669  001E6D  00                 	db	0
   670  001E6E  00                 	db	0
   671  001E6F  00                 	db	0
   672  001E70  00                 	db	0
   673  001E71  00                 	db	0
   674  001E72  00                 	db	0
   675  001E73  00                 	db	0
   676  001E74  00                 	db	0
   677  001E75  00                 	db	0
   678  001E76  00                 	db	0
   679  001E77  00                 	db	0
   680  001E78  00                 	db	0
   681  001E79  00                 	db	0
   682  001E7A  00                 	db	0
   683  001E7B  00                 	db	0
   684  001E7C  00                 	db	0
   685  001E7D  00                 	db	0
   686  001E7E  00                 	db	0
   687  001E7F  00                 	db	0
   688  001E80  00                 	db	0
   689  001E81  00                 	db	0
   690  001E82  00                 	db	0
   691  001E83  00                 	db	0
   692  001E84  00                 	db	0
   693  001E85  00                 	db	0
   694  001E86  00                 	db	0
   695  001E87  00                 	db	0
   696  001E88  00                 	db	0
   697  001E89  00                 	db	0
   698  001E8A  00                 	db	0
   699  001E8B  00                 	db	0
   700  001E8C  00                 	db	0
   701  001E8D  00                 	db	0
   702  001E8E  00                 	db	0
   703  001E8F  00                 	db	0
   704  001E90  00                 	db	0
   705  001E91  00                 	db	0
   706  001E92  00                 	db	0
   707  001E93  00                 	db	0
   708  001E94  00                 	db	0
   709  001E95  00                 	db	0
   710  001E96  00                 	db	0
   711  001E97  00                 	db	0
   712  001E98  00                 	db	0
   713  001E99  00                 	db	0
   714  001E9A  00                 	db	0
   715  001E9B  00                 	db	0
   716  001E9C  00                 	db	0
   717  001E9D  00                 	db	0
   718  001E9E  00                 	db	0
   719  001E9F  00                 	db	0
   720  001EA0  00                 	db	0
   721  001EA1  00                 	db	0
   722  001EA2  00                 	db	0
   723  001EA3  00                 	db	0
   724  001EA4  00                 	db	0
   725  001EA5  00                 	db	0
   726  001EA6  00                 	db	0
   727  001EA7  00                 	db	0
   728  001EA8  00                 	db	0
   729  001EA9  00                 	db	0
   730  001EAA  00                 	db	0
   731  001EAB  00                 	db	0
   732  001EAC  00                 	db	0
   733  001EAD  00                 	db	0
   734  001EAE  00                 	db	0
   735  001EAF  00                 	db	0
   736  001EB0  00                 	db	0
   737  001EB1  00                 	db	0
   738  001EB2  00                 	db	0
   739  001EB3  00                 	db	0
   740  001EB4  00                 	db	0
   741  001EB5  00                 	db	0
   742  001EB6  00                 	db	0
   743  001EB7  00                 	db	0
   744  001EB8  00                 	db	0
   745  001EB9  00                 	db	0
   746  001EBA  00                 	db	0
   747  001EBB  00                 	db	0
   748  001EBC  00                 	db	0
   749  001EBD  00                 	db	0
   750  001EBE  00                 	db	0
   751  001EBF  00                 	db	0
   752  001EC0  00                 	db	0
   753  001EC1  00                 	db	0
   754  001EC2  00                 	db	0
   755  001EC3  00                 	db	0
   756  001EC4  00                 	db	0
   757  001EC5  00                 	db	0
   758  001EC6  00                 	db	0
   759  001EC7  00                 	db	0
   760  001EC8  00                 	db	0
   761  001EC9  00                 	db	0
   762  001ECA  00                 	db	0
   763  001ECB  00                 	db	0
   764  001ECC  00                 	db	0
   765  001ECD  00                 	db	0
   766  001ECE  00                 	db	0
   767  001ECF  00                 	db	0
   768  001ED0  00                 	db	0
   769  001ED1  00                 	db	0
   770  001ED2  00                 	db	0
   771  001ED3  00                 	db	0
   772  001ED4  00                 	db	0
   773  001ED5  00                 	db	0
   774  001ED6  00                 	db	0
   775  001ED7  00                 	db	0
   776  001ED8  00                 	db	0
   777  001ED9  00                 	db	0
   778  001EDA  00                 	db	0
   779  001EDB  00                 	db	0
   780  001EDC  00                 	db	0
   781  001EDD  00                 	db	0
   782  001EDE  00                 	db	0
   783  001EDF  00                 	db	0
   784  001EE0  00                 	db	0
   785  001EE1  00                 	db	0
   786  001EE2  00                 	db	0
   787  001EE3  00                 	db	0
   788  001EE4  00                 	db	0
   789  001EE5  00                 	db	0
   790  001EE6  00                 	db	0
   791  001EE7  00                 	db	0
   792  001EE8  00                 	db	0
   793  001EE9  00                 	db	0
   794  001EEA  00                 	db	0
   795  001EEB  00                 	db	0
   796  001EEC  00                 	db	0
   797  001EED  00                 	db	0
   798  001EEE  00                 	db	0
   799  001EEF  00                 	db	0
   800  001EF0  00                 	db	0
   801  001EF1  00                 	db	0
   802  001EF2  00                 	db	0
   803  001EF3  00                 	db	0
   804  001EF4  00                 	db	0
   805  001EF5  00                 	db	0
   806  001EF6  00                 	db	0
   807  001EF7  00                 	db	0
   808  001EF8  00                 	db	0
   809  001EF9  00                 	db	0
   810  001EFA  00                 	db	0
   811  001EFB  00                 	db	0
   812  001EFC  00                 	db	0
   813  001EFD  00                 	db	0
   814  001EFE  00                 	db	0
   815  001EFF  00                 	db	0
   816  001F00  00                 	db	0
   817  001F01  00                 	db	0
   818  001F02  00                 	db	0
   819  001F03  00                 	db	0
   820  001F04  00                 	db	0
   821  001F05  00                 	db	0
   822  001F06  00                 	db	0
   823  001F07  00                 	db	0
   824  001F08  00                 	db	0
   825  001F09  00                 	db	0
   826  001F0A  00                 	db	0
   827  001F0B  00                 	db	0
   828  001F0C  00                 	db	0
   829  001F0D  00                 	db	0
   830  001F0E  00                 	db	0
   831  001F0F  00                 	db	0
   832  001F10  00                 	db	0
   833  001F11  00                 	db	0
   834  001F12  00                 	db	0
   835  001F13  00                 	db	0
   836  001F14  00                 	db	0
   837  001F15  00                 	db	0
   838  001F16  00                 	db	0
   839  001F17  00                 	db	0
   840  001F18  00                 	db	0
   841  001F19  00                 	db	0
   842  001F1A  00                 	db	0
   843  001F1B  00                 	db	0
   844  001F1C  00                 	db	0
   845  001F1D  00                 	db	0
   846  001F1E  00                 	db	0
   847  001F1F  00                 	db	0
   848  001F20  00                 	db	0
   849  001F21  00                 	db	0
   850  001F22  00                 	db	0
   851  001F23  00                 	db	0
   852                           
   853                           	psect	idataBANK0
   854  00311C                     __pidataBANK0:
   855                           	opt stack 0
   856                           
   857                           ;initializer for _IR1_PIN
   858  00311C  01                 	db	1
   859                           
   860                           ;initializer for _IR2_PIN
   861  00311D  02                 	db	2
   862                           
   863                           ;initializer for _PROX2_PIN
   864  00311E  01                 	db	1
   865                           
   866                           ;initializer for _nstate
   867  00311F  72                 	db	114
   868                           
   869                           ;initializer for _state
   870  003120  72                 	db	114
   871                           
   872                           ;initializer for _creditIndex
   873  003121  0001               	dw	1
   874                           
   875                           ;initializer for _creditSize
   876  003123  0005               	dw	5
   877                           
   878                           ;initializer for _endIndex
   879  003125  0001               	dw	1
   880                           
   881                           ;initializer for _endSize
   882  003127  0003               	dw	3
   883                           
   884                           ;initializer for _events
   885  003129  0002               	dw	2
   886                           
   887                           ;initializer for _logIndex
   888  00312B  0001               	dw	1
   889                           
   890                           ;initializer for _menuIndex
   891  00312D  0001               	dw	1
   892                           
   893                           ;initializer for _menuSize
   894  00312F  0003               	dw	3
   895                           
   896                           	psect	mediumconst
   897  00FED4                     __pmediumconst:
   898                           	opt stack 0
   899  00FED4  00                 	db	0
   900  00FED5                     _keys:
   901                           	opt stack 0
   902  00FED5  31                 	db	49
   903  00FED6  32                 	db	50
   904  00FED7  33                 	db	51
   905  00FED8  41                 	db	65
   906  00FED9  34                 	db	52
   907  00FEDA  35                 	db	53
   908  00FEDB  36                 	db	54
   909  00FEDC  42                 	db	66
   910  00FEDD  37                 	db	55
   911  00FEDE  38                 	db	56
   912  00FEDF  39                 	db	57
   913  00FEE0  43                 	db	67
   914  00FEE1  2A                 	db	42
   915  00FEE2  30                 	db	48
   916  00FEE3  23                 	db	35
   917  00FEE4  44                 	db	68
   918  00FEE5  00                 	db	0
   919  00FEE6                     __end_of_keys:
   920                           	opt stack 0
   921  00FEE6                     _dpowers:
   922                           	opt stack 0
   923  00FEE6  0001               	dw	1
   924  00FEE8  000A               	dw	10
   925  00FEEA  0064               	dw	100
   926  00FEEC  03E8               	dw	1000
   927  00FEEE  2710               	dw	10000
   928  00FEF0                     __end_of_dpowers:
   929                           	opt stack 0
   930  00FEF0                     _hexpowers:
   931                           	opt stack 0
   932  00FEF0  0001               	dw	1
   933  00FEF2  0010               	dw	16
   934  00FEF4  0100               	dw	256
   935  00FEF6  1000               	dw	4096
   936  00FEF8                     __end_of_hexpowers:
   937                           	opt stack 0
   938  00FEF8                     _manualDateTime:
   939                           	opt stack 0
   940  00FEF8  00                 	db	0
   941  00FEF9  00                 	db	0
   942  00FEFA  00                 	db	0
   943  00FEFB  00                 	db	0
   944  00FEFC  01                 	db	1
   945  00FEFD  00                 	db	0
   946  00FEFE  17                 	db	23
   947  00FEFF                     __end_of_manualDateTime:
   948                           	opt stack 0
   949  0000                     _ADCON0	set	4034
   950  0000                     _ADCON0bits	set	4034
   951  0000                     _ADCON1	set	4033
   952  0000                     _ADRESL	set	4035
   953  0000                     _INTCONbits	set	4082
   954  0000                     _LATB	set	3978
   955  0000                     _LATC	set	3979
   956  0000                     _LATD	set	3980
   957  0000                     _LATDbits	set	3980
   958  0000                     _PORTB	set	3969
   959  0000                     _PORTE	set	3972
   960  0000                     _SSPADD	set	4040
   961  0000                     _SSPBUF	set	4041
   962  0000                     _SSPCON1	set	4038
   963  0000                     _SSPCON2	set	4037
   964  0000                     _SSPSTAT	set	4039
   965  0000                     _TRISB	set	3987
   966  0000                     _TRISC	set	3988
   967  0000                     _TRISD	set	3989
   968  0000                     _ADRESH	set	4036
   969  0000                     _ACKDT	set	32301
   970  0000                     _ACKEN	set	32300
   971  0000                     _ADON	set	32272
   972  0000                     _INT1IE	set	32643
   973  0000                     _INT1IF	set	32640
   974  0000                     _PEN	set	32298
   975  0000                     _RCEN	set	32299
   976  0000                     _RSEN	set	32297
   977  0000                     _SEN	set	32296
   978  0000                     _TRISC3	set	31907
   979  0000                     _TRISC4	set	31908
   980  0000                     _nRBPU	set	32655
   981  00FEFF                     STR_3:
   982  00FEFF  25                 	db	37
   983  00FF00  64                 	db	100	;'d'
   984  00FF01  3A                 	db	58	;':'
   985  00FF02  25                 	db	37
   986  00FF03  30                 	db	48	;'0'
   987  00FF04  32                 	db	50	;'2'
   988  00FF05  64                 	db	100	;'d'
   989  00FF06  20                 	db	32
   990  00FF07  65                 	db	101	;'e'
   991  00FF08  6E                 	db	110	;'n'
   992  00FF09  3A                 	db	58	;':'
   993  00FF0A  25                 	db	37
   994  00FF0B  30                 	db	48	;'0'
   995  00FF0C  32                 	db	50	;'2'
   996  00FF0D  64                 	db	100	;'d'
   997  00FF0E  20                 	db	32
   998  00FF0F  65                 	db	101	;'e'
   999  00FF10  63                 	db	99	;'c'
  1000  00FF11  3A                 	db	58	;':'
  1001  00FF12  25                 	db	37
  1002  00FF13  30                 	db	48	;'0'
  1003  00FF14  32                 	db	50	;'2'
  1004  00FF15  64                 	db	100	;'d'
  1005  00FF16  20                 	db	32
  1006  00FF17  00                 	db	0
  1007  00FF18                     STR_1:
  1008  00FF18  25                 	db	37
  1009  00FF19  30                 	db	48	;'0'
  1010  00FF1A  32                 	db	50	;'2'
  1011  00FF1B  78                 	db	120	;'x'
  1012  00FF1C  2F                 	db	47
  1013  00FF1D  25                 	db	37
  1014  00FF1E  30                 	db	48	;'0'
  1015  00FF1F  32                 	db	50	;'2'
  1016  00FF20  78                 	db	120	;'x'
  1017  00FF21  2F                 	db	47
  1018  00FF22  25                 	db	37
  1019  00FF23  30                 	db	48	;'0'
  1020  00FF24  32                 	db	50	;'2'
  1021  00FF25  78                 	db	120	;'x'
  1022  00FF26  20                 	db	32
  1023  00FF27  50                 	db	80	;'P'
  1024  00FF28  55                 	db	85	;'U'
  1025  00FF29  53                 	db	83	;'S'
  1026  00FF2A  48                 	db	72	;'H'
  1027  00FF2B  20                 	db	32
  1028  00FF2C  54                 	db	84	;'T'
  1029  00FF2D  4F                 	db	79	;'O'
  1030  00FF2E  00                 	db	0
  1031  00FF2F                     STR_2:
  1032  00FF2F  25                 	db	37
  1033  00FF30  30                 	db	48	;'0'
  1034  00FF31  32                 	db	50	;'2'
  1035  00FF32  78                 	db	120	;'x'
  1036  00FF33  3A                 	db	58	;':'
  1037  00FF34  25                 	db	37
  1038  00FF35  30                 	db	48	;'0'
  1039  00FF36  32                 	db	50	;'2'
  1040  00FF37  78                 	db	120	;'x'
  1041  00FF38  3A                 	db	58	;':'
  1042  00FF39  25                 	db	37
  1043  00FF3A  30                 	db	48	;'0'
  1044  00FF3B  32                 	db	50	;'2'
  1045  00FF3C  78                 	db	120	;'x'
  1046  00FF3D  20                 	db	32
  1047  00FF3E  20                 	db	32
  1048  00FF3F  20                 	db	32
  1049  00FF40  53                 	db	83	;'S'
  1050  00FF41  54                 	db	84	;'T'
  1051  00FF42  41                 	db	65	;'A'
  1052  00FF43  52                 	db	82	;'R'
  1053  00FF44  54                 	db	84	;'T'
  1054  00FF45  00                 	db	0
  1055  00FF46                     STR_8:
  1056  00FF46  72                 	db	114	;'r'
  1057  00FF47  75                 	db	117	;'u'
  1058  00FF48  6E                 	db	110	;'n'
  1059  00FF49  20                 	db	32
  1060  00FF4A  74                 	db	116	;'t'
  1061  00FF4B  69                 	db	105	;'i'
  1062  00FF4C  6D                 	db	109	;'m'
  1063  00FF4D  65                 	db	101	;'e'
  1064  00FF4E  3A                 	db	58	;':'
  1065  00FF4F  20                 	db	32
  1066  00FF50  25                 	db	37
  1067  00FF51  30                 	db	48	;'0'
  1068  00FF52  31                 	db	49	;'1'
  1069  00FF53  64                 	db	100	;'d'
  1070  00FF54  3A                 	db	58	;':'
  1071  00FF55  25                 	db	37
  1072  00FF56  30                 	db	48	;'0'
  1073  00FF57  32                 	db	50	;'2'
  1074  00FF58  64                 	db	100	;'d'
  1075  00FF59  20                 	db	32
  1076  00FF5A  00                 	db	0
  1077  00FF5B  00                 	db	0
  1078  00FF5C                     STR_9:
  1079  00FF5C  65                 	db	101	;'e'
  1080  00FF5D  6E                 	db	110	;'n'
  1081  00FF5E  3A                 	db	58	;':'
  1082  00FF5F  25                 	db	37
  1083  00FF60  30                 	db	48	;'0'
  1084  00FF61  32                 	db	50	;'2'
  1085  00FF62  64                 	db	100	;'d'
  1086  00FF63  20                 	db	32
  1087  00FF64  65                 	db	101	;'e'
  1088  00FF65  63                 	db	99	;'c'
  1089  00FF66  3A                 	db	58	;':'
  1090  00FF67  25                 	db	37
  1091  00FF68  30                 	db	48	;'0'
  1092  00FF69  32                 	db	50	;'2'
  1093  00FF6A  64                 	db	100	;'d'
  1094  00FF6B  20                 	db	32
  1095  00FF6C  20                 	db	32
  1096  00FF6D  20                 	db	32
  1097  00FF6E  20                 	db	32
  1098  00FF6F  00                 	db	0
  1099  00FF70                     STR_10:
  1100  00FF70  79                 	db	121	;'y'
  1101  00FF71  6E                 	db	110	;'n'
  1102  00FF72  3A                 	db	58	;':'
  1103  00FF73  25                 	db	37
  1104  00FF74  30                 	db	48	;'0'
  1105  00FF75  32                 	db	50	;'2'
  1106  00FF76  64                 	db	100	;'d'
  1107  00FF77  20                 	db	32
  1108  00FF78  79                 	db	121	;'y'
  1109  00FF79  63                 	db	99	;'c'
  1110  00FF7A  3A                 	db	58	;':'
  1111  00FF7B  25                 	db	37
  1112  00FF7C  30                 	db	48	;'0'
  1113  00FF7D  32                 	db	50	;'2'
  1114  00FF7E  64                 	db	100	;'d'
  1115  00FF7F  20                 	db	32
  1116  00FF80  20                 	db	32
  1117  00FF81  20                 	db	32
  1118  00FF82  20                 	db	32
  1119  00FF83  00                 	db	0
  1120  00FF84                     STR_7:
  1121  00FF84  62                 	db	98	;'b'
  1122  00FF85  6F                 	db	111	;'o'
  1123  00FF86  74                 	db	116	;'t'
  1124  00FF87  74                 	db	116	;'t'
  1125  00FF88  6C                 	db	108	;'l'
  1126  00FF89  65                 	db	101	;'e'
  1127  00FF8A  73                 	db	115	;'s'
  1128  00FF8B  3A                 	db	58	;':'
  1129  00FF8C  20                 	db	32
  1130  00FF8D  25                 	db	37
  1131  00FF8E  30                 	db	48	;'0'
  1132  00FF8F  32                 	db	50	;'2'
  1133  00FF90  64                 	db	100	;'d'
  1134  00FF91  20                 	db	32
  1135  00FF92  20                 	db	32
  1136  00FF93  20                 	db	32
  1137  00FF94  20                 	db	32
  1138  00FF95  00                 	db	0
  1139  00FF96  00                 	db	0
  1140  00FF97                     STR_19:
  1141  00FF97  30                 	db	48	;'0'
  1142  00FF98  31                 	db	49	;'1'
  1143  00FF99  32                 	db	50	;'2'
  1144  00FF9A  33                 	db	51	;'3'
  1145  00FF9B  34                 	db	52	;'4'
  1146  00FF9C  35                 	db	53	;'5'
  1147  00FF9D  36                 	db	54	;'6'
  1148  00FF9E  37                 	db	55	;'7'
  1149  00FF9F  38                 	db	56	;'8'
  1150  00FFA0  39                 	db	57	;'9'
  1151  00FFA1  61                 	db	97	;'a'
  1152  00FFA2  62                 	db	98	;'b'
  1153  00FFA3  63                 	db	99	;'c'
  1154  00FFA4  64                 	db	100	;'d'
  1155  00FFA5  65                 	db	101	;'e'
  1156  00FFA6  66                 	db	102	;'f'
  1157  00FFA7  00                 	db	0
  1158  00FFA8                     STR_4:
  1159  00FFA8  79                 	db	121	;'y'
  1160  00FFA9  6E                 	db	110	;'n'
  1161  00FFAA  3A                 	db	58	;':'
  1162  00FFAB  25                 	db	37
  1163  00FFAC  30                 	db	48	;'0'
  1164  00FFAD  32                 	db	50	;'2'
  1165  00FFAE  64                 	db	100	;'d'
  1166  00FFAF  20                 	db	32
  1167  00FFB0  79                 	db	121	;'y'
  1168  00FFB1  63                 	db	99	;'c'
  1169  00FFB2  3A                 	db	58	;':'
  1170  00FFB3  25                 	db	37
  1171  00FFB4  30                 	db	48	;'0'
  1172  00FFB5  32                 	db	50	;'2'
  1173  00FFB6  64                 	db	100	;'d'
  1174  00FFB7  00                 	db	0
  1175  00FFB8                     STR_6:
  1176  00FFB8  45                 	db	69	;'E'
  1177  00FFB9  4D                 	db	77	;'M'
  1178  00FFBA  45                 	db	69	;'E'
  1179  00FFBB  52                 	db	82	;'R'
  1180  00FFBC  47                 	db	71	;'G'
  1181  00FFBD  45                 	db	69	;'E'
  1182  00FFBE  4E                 	db	78	;'N'
  1183  00FFBF  43                 	db	67	;'C'
  1184  00FFC0  59                 	db	89	;'Y'
  1185  00FFC1  20                 	db	32
  1186  00FFC2  53                 	db	83	;'S'
  1187  00FFC3  54                 	db	84	;'T'
  1188  00FFC4  4F                 	db	79	;'O'
  1189  00FFC5  50                 	db	80	;'P'
  1190  00FFC6  00                 	db	0
  1191  00FFC7                     STR_16:
  1192  00FFC7  6D                 	db	109	;'m'
  1193  00FFC8  65                 	db	101	;'e'
  1194  00FFC9  6E                 	db	110	;'n'
  1195  00FFCA  75                 	db	117	;'u'
  1196  00FFCB  20                 	db	32
  1197  00FFCC  73                 	db	115	;'s'
  1198  00FFCD  65                 	db	101	;'e'
  1199  00FFCE  6C                 	db	108	;'l'
  1200  00FFCF  65                 	db	101	;'e'
  1201  00FFD0  63                 	db	99	;'c'
  1202  00FFD1  74                 	db	116	;'t'
  1203  00FFD2  69                 	db	105	;'i'
  1204  00FFD3  6F                 	db	111	;'o'
  1205  00FFD4  6E                 	db	110	;'n'
  1206  00FFD5  00                 	db	0
  1207  00FFD6                     STR_17:
  1208  00FFD6  6E                 	db	110	;'n'
  1209  00FFD7  6F                 	db	111	;'o'
  1210  00FFD8  20                 	db	32
  1211  00FFD9  70                 	db	112	;'p'
  1212  00FFDA  61                 	db	97	;'a'
  1213  00FFDB  67                 	db	103	;'g'
  1214  00FFDC  65                 	db	101	;'e'
  1215  00FFDD  20                 	db	32
  1216  00FFDE  66                 	db	102	;'f'
  1217  00FFDF  6F                 	db	111	;'o'
  1218  00FFE0  75                 	db	117	;'u'
  1219  00FFE1  6E                 	db	110	;'n'
  1220  00FFE2  64                 	db	100	;'d'
  1221  00FFE3  00                 	db	0
  1222  00FFE4                     STR_15:
  1223  00FFE4  69                 	db	105	;'i'
  1224  00FFE5  6E                 	db	110	;'n'
  1225  00FFE6  76                 	db	118	;'v'
  1226  00FFE7  61                 	db	97	;'a'
  1227  00FFE8  6C                 	db	108	;'l'
  1228  00FFE9  69                 	db	105	;'i'
  1229  00FFEA  64                 	db	100	;'d'
  1230  00FFEB  00                 	db	0
  1231  00FFEC                     STR_18:
  1232  00FFEC  28                 	db	40
  1233  00FFED  6E                 	db	110	;'n'
  1234  00FFEE  75                 	db	117	;'u'
  1235  00FFEF  6C                 	db	108	;'l'
  1236  00FFF0  6C                 	db	108	;'l'
  1237  00FFF1  29                 	db	41
  1238  00FFF2  00                 	db	0
  1239  00FFF3                     STR_5:
  1240  00FFF3  45                 	db	69	;'E'
  1241  00FFF4  52                 	db	82	;'R'
  1242  00FFF5  52                 	db	82	;'R'
  1243  00FFF6  4F                 	db	79	;'O'
  1244  00FFF7  52                 	db	82	;'R'
  1245  00FFF8  00                 	db	0
  1246  00FFF9                     STR_11:
  1247  00FFF9  25                 	db	37
  1248  00FFFA  73                 	db	115	;'s'
  1249  00FFFB  25                 	db	37
  1250  00FFFC  63                 	db	99	;'c'
  1251  00FFFD  00                 	db	0
  1252  0000                     
  1253                           ; #config settings
  1254  00FFFE  00                 	db	0	; dummy byte at the end
  1255  0000                     
  1256                           	psect	cinit
  1257  002A0C                     __pcinit:
  1258                           	opt stack 0
  1259  002A0C                     start_initialization:
  1260                           	opt stack 0
  1261  002A0C                     __initialization:
  1262                           	opt stack 0
  1263                           
  1264                           ; Initialize objects allocated to BIGRAM (720 bytes)
  1265                           ; load TBLPTR registers with __pidataBIGRAM
  1266  002A0C  0E54               	movlw	low __pidataBIGRAM
  1267  002A0E  6EF6               	movwf	tblptrl,c
  1268  002A10  0E1C               	movlw	high __pidataBIGRAM
  1269  002A12  6EF7               	movwf	tblptrh,c
  1270  002A14  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
  1271  002A16  6EF8               	movwf	tblptru,c
  1272  002A18  EE01  F078         	lfsr	0,__pdataBIGRAM
  1273  002A1C  EE12 F0D0          	lfsr	1,720
  1274  002A20                     copy_data0:
  1275  002A20  0009               	tblrd		*+
  1276  002A22  CFF5 FFEE          	movff	tablat,postinc0
  1277  002A26  50E5               	movf	postdec1,w,c
  1278  002A28  50E1               	movf	fsr1l,w,c
  1279  002A2A  E1FA               	bnz	copy_data0
  1280  002A2C  50E2               	movf	fsr1h,w,c
  1281  002A2E  E1F8               	bnz	copy_data0
  1282                           
  1283                           ; Initialize objects allocated to BANK0 (21 bytes)
  1284                           ; load TBLPTR registers with __pidataBANK0
  1285  002A30  0E1C               	movlw	low __pidataBANK0
  1286  002A32  6EF6               	movwf	tblptrl,c
  1287  002A34  0E31               	movlw	high __pidataBANK0
  1288  002A36  6EF7               	movwf	tblptrh,c
  1289  002A38  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1290  002A3A  6EF8               	movwf	tblptru,c
  1291  002A3C  EE00  F0E5         	lfsr	0,__pdataBANK0
  1292  002A40  EE10 F015          	lfsr	1,21
  1293  002A44                     copy_data1:
  1294  002A44  0009               	tblrd		*+
  1295  002A46  CFF5 FFEE          	movff	tablat,postinc0
  1296  002A4A  50E5               	movf	postdec1,w,c
  1297  002A4C  50E1               	movf	fsr1l,w,c
  1298  002A4E  E1FA               	bnz	copy_data1
  1299                           
  1300                           ; Initialize objects allocated to COMRAM (13 bytes)
  1301                           ; load TBLPTR registers with __pidataCOMRAM
  1302  002A50  0E56               	movlw	low __pidataCOMRAM
  1303  002A52  6EF6               	movwf	tblptrl,c
  1304  002A54  0E31               	movlw	high __pidataCOMRAM
  1305  002A56  6EF7               	movwf	tblptrh,c
  1306  002A58  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1307  002A5A  6EF8               	movwf	tblptru,c
  1308  002A5C  EE00  F06A         	lfsr	0,__pdataCOMRAM
  1309  002A60  EE10 F00D          	lfsr	1,13
  1310  002A64                     copy_data2:
  1311  002A64  0009               	tblrd		*+
  1312  002A66  CFF5 FFEE          	movff	tablat,postinc0
  1313  002A6A  50E5               	movf	postdec1,w,c
  1314  002A6C  50E1               	movf	fsr1l,w,c
  1315  002A6E  E1FA               	bnz	copy_data2
  1316                           
  1317                           ; Clear objects allocated to BANK1 (110 bytes)
  1318  002A70  EE01  F000         	lfsr	0,__pbssBANK1
  1319  002A74  0E6E               	movlw	110
  1320  002A76                     clear_0:
  1321  002A76  6AEE               	clrf	postinc0,c
  1322  002A78  06E8               	decf	wreg,f,c
  1323  002A7A  E1FD               	bnz	clear_0
  1324                           
  1325                           ; Clear objects allocated to BANK0 (43 bytes)
  1326  002A7C  EE00  F0BA         	lfsr	0,__pbssBANK0
  1327  002A80  0E2B               	movlw	43
  1328  002A82                     clear_1:
  1329  002A82  6AEE               	clrf	postinc0,c
  1330  002A84  06E8               	decf	wreg,f,c
  1331  002A86  E1FD               	bnz	clear_1
  1332                           
  1333                           ; Clear objects allocated to COMRAM (44 bytes)
  1334  002A88  EE00  F03E         	lfsr	0,__pbssCOMRAM
  1335  002A8C  0E2C               	movlw	44
  1336  002A8E                     clear_2:
  1337  002A8E  6AEE               	clrf	postinc0,c
  1338  002A90  06E8               	decf	wreg,f,c
  1339  002A92  E1FD               	bnz	clear_2
  1340  002A94                     end_of_initialization:
  1341                           	opt stack 0
  1342  002A94                     __end_of__initialization:
  1343                           	opt stack 0
  1344  002A94  9077               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1345  002A96  9277               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1346  002A98  0100               	movlb	0
  1347  002A9A  EFC3  F015         	goto	_main	;jump to C main() function
  1348                           tblptru	equ	0xFF8
  1349                           tblptrh	equ	0xFF7
  1350                           tblptrl	equ	0xFF6
  1351                           tablat	equ	0xFF5
  1352                           postinc0	equ	0xFEE
  1353                           wreg	equ	0xFE8
  1354                           postdec1	equ	0xFE5
  1355                           fsr1h	equ	0xFE2
  1356                           fsr1l	equ	0xFE1
  1357                           
  1358                           	psect	bssCOMRAM
  1359  00003E                     __pbssCOMRAM:
  1360                           	opt stack 0
  1361  00003E                     _time_i:
  1362                           	opt stack 0
  1363  00003E                     	ds	14
  1364  00004C                     _PROX1:
  1365                           	opt stack 0
  1366  00004C                     	ds	10
  1367  000056                     _PROX2:
  1368                           	opt stack 0
  1369  000056                     	ds	10
  1370  000060                     _bottle_type:
  1371                           	opt stack 0
  1372  000060                     	ds	2
  1373  000062                     _discretize:
  1374                           	opt stack 0
  1375  000062                     	ds	2
  1376  000064                     _discretize_counter:
  1377                           	opt stack 0
  1378  000064                     	ds	2
  1379  000066                     _measure_counter:
  1380                           	opt stack 0
  1381  000066                     	ds	2
  1382  000068                     _release_counter:
  1383                           	opt stack 0
  1384  000068                     	ds	2
  1385                           tblptru	equ	0xFF8
  1386                           tblptrh	equ	0xFF7
  1387                           tblptrl	equ	0xFF6
  1388                           tablat	equ	0xFF5
  1389                           postinc0	equ	0xFEE
  1390                           wreg	equ	0xFE8
  1391                           postdec1	equ	0xFE5
  1392                           fsr1h	equ	0xFE2
  1393                           fsr1l	equ	0xFE1
  1394                           
  1395                           	psect	dataCOMRAM
  1396  00006A                     __pdataCOMRAM:
  1397                           	opt stack 0
  1398  00006A                     _DIST_THRESHOLD_HI:
  1399                           	opt stack 0
  1400  00006A                     	ds	2
  1401  00006C                     _DIST_THRESHOLD_LOW:
  1402                           	opt stack 0
  1403  00006C                     	ds	2
  1404  00006E                     _IR_THRESHOLD_HI:
  1405                           	opt stack 0
  1406  00006E                     	ds	2
  1407  000070                     _IR_THRESHOLD_LOW:
  1408                           	opt stack 0
  1409  000070                     	ds	2
  1410  000072                     _measure:
  1411                           	opt stack 0
  1412  000072                     	ds	2
  1413  000074                     _release:
  1414                           	opt stack 0
  1415  000074                     	ds	2
  1416  000076                     _DIST1_TRIG:
  1417                           	opt stack 0
  1418  000076                     	ds	1
  1419                           tblptru	equ	0xFF8
  1420                           tblptrh	equ	0xFF7
  1421                           tblptrl	equ	0xFF6
  1422                           tablat	equ	0xFF5
  1423                           postinc0	equ	0xFEE
  1424                           wreg	equ	0xFE8
  1425                           postdec1	equ	0xFE5
  1426                           fsr1h	equ	0xFE2
  1427                           fsr1l	equ	0xFE1
  1428                           
  1429                           	psect	bssBANK0
  1430  0000BA                     __pbssBANK0:
  1431                           	opt stack 0
  1432  0000BA                     _DIST1:
  1433                           	opt stack 0
  1434  0000BA                     	ds	10
  1435  0000C4                     _IR1:
  1436                           	opt stack 0
  1437  0000C4                     	ds	10
  1438  0000CE                     _time:
  1439                           	opt stack 0
  1440  0000CE                     	ds	7
  1441  0000D5                     _eskaNoCap:
  1442                           	opt stack 0
  1443  0000D5                     	ds	2
  1444  0000D7                     _eskaWCap:
  1445                           	opt stack 0
  1446  0000D7                     	ds	2
  1447  0000D9                     _runTime:
  1448                           	opt stack 0
  1449  0000D9                     	ds	2
  1450  0000DB                     _sorted_bottles:
  1451                           	opt stack 0
  1452  0000DB                     	ds	2
  1453  0000DD                     _timeDiff:
  1454                           	opt stack 0
  1455  0000DD                     	ds	2
  1456  0000DF                     _yopNoCap:
  1457                           	opt stack 0
  1458  0000DF                     	ds	2
  1459  0000E1                     _yopWCap:
  1460                           	opt stack 0
  1461  0000E1                     	ds	2
  1462  0000E3                     _DIST1_PIN:
  1463                           	opt stack 0
  1464  0000E3                     	ds	1
  1465  0000E4                     _PROX1_PIN:
  1466                           	opt stack 0
  1467  0000E4                     	ds	1
  1468                           tblptru	equ	0xFF8
  1469                           tblptrh	equ	0xFF7
  1470                           tblptrl	equ	0xFF6
  1471                           tablat	equ	0xFF5
  1472                           postinc0	equ	0xFEE
  1473                           wreg	equ	0xFE8
  1474                           postdec1	equ	0xFE5
  1475                           fsr1h	equ	0xFE2
  1476                           fsr1l	equ	0xFE1
  1477                           
  1478                           	psect	dataBANK0
  1479  0000E5                     __pdataBANK0:
  1480                           	opt stack 0
  1481  0000E5                     _IR1_PIN:
  1482                           	opt stack 0
  1483  0000E5                     	ds	1
  1484  0000E6                     _IR2_PIN:
  1485                           	opt stack 0
  1486  0000E6                     	ds	1
  1487  0000E7                     _PROX2_PIN:
  1488                           	opt stack 0
  1489  0000E7                     	ds	1
  1490  0000E8                     _nstate:
  1491                           	opt stack 0
  1492  0000E8                     	ds	1
  1493  0000E9                     _state:
  1494                           	opt stack 0
  1495  0000E9                     	ds	1
  1496  0000EA                     _creditIndex:
  1497                           	opt stack 0
  1498  0000EA                     	ds	2
  1499  0000EC                     _creditSize:
  1500                           	opt stack 0
  1501  0000EC                     	ds	2
  1502  0000EE                     _endIndex:
  1503                           	opt stack 0
  1504  0000EE                     	ds	2
  1505  0000F0                     _endSize:
  1506                           	opt stack 0
  1507  0000F0                     	ds	2
  1508  0000F2                     _events:
  1509                           	opt stack 0
  1510  0000F2                     	ds	2
  1511  0000F4                     _logIndex:
  1512                           	opt stack 0
  1513  0000F4                     	ds	2
  1514  0000F6                     _menuIndex:
  1515                           	opt stack 0
  1516  0000F6                     	ds	2
  1517  0000F8                     _menuSize:
  1518                           	opt stack 0
  1519  0000F8                     	ds	2
  1520                           tblptru	equ	0xFF8
  1521                           tblptrh	equ	0xFF7
  1522                           tblptrl	equ	0xFF6
  1523                           tablat	equ	0xFF5
  1524                           postinc0	equ	0xFEE
  1525                           wreg	equ	0xFE8
  1526                           postdec1	equ	0xFE5
  1527                           fsr1h	equ	0xFE2
  1528                           fsr1l	equ	0xFE1
  1529                           
  1530                           	psect	bssBANK1
  1531  000100                     __pbssBANK1:
  1532                           	opt stack 0
  1533  000100                     _latestSortedBottleTime:
  1534                           	opt stack 0
  1535  000100                     	ds	14
  1536  00010E                     _startTime:
  1537                           	opt stack 0
  1538  00010E                     	ds	14
  1539  00011C                     _IR2:
  1540                           	opt stack 0
  1541  00011C                     	ds	10
  1542  000126                     _display0:
  1543                           	opt stack 0
  1544  000126                     	ds	18
  1545  000138                     _display1:
  1546                           	opt stack 0
  1547  000138                     	ds	18
  1548  00014A                     _ndisplay0:
  1549                           	opt stack 0
  1550  00014A                     	ds	18
  1551  00015C                     _ndisplay1:
  1552                           	opt stack 0
  1553  00015C                     	ds	18
  1554                           tblptru	equ	0xFF8
  1555                           tblptrh	equ	0xFF7
  1556                           tblptrl	equ	0xFF6
  1557                           tablat	equ	0xFF5
  1558                           postinc0	equ	0xFEE
  1559                           wreg	equ	0xFE8
  1560                           postdec1	equ	0xFE5
  1561                           fsr1h	equ	0xFE2
  1562                           fsr1l	equ	0xFE1
  1563                           
  1564                           	psect	dataBIGRAM
  1565  000178                     __pdataBIGRAM:
  1566                           	opt stack 0
  1567  000178                     _menu:
  1568                           	opt stack 0
  1569  000178                     	ds	720
  1570                           tblptru	equ	0xFF8
  1571                           tblptrh	equ	0xFF7
  1572                           tblptrl	equ	0xFF6
  1573                           tablat	equ	0xFF5
  1574                           postinc0	equ	0xFEE
  1575                           wreg	equ	0xFE8
  1576                           postdec1	equ	0xFE5
  1577                           fsr1h	equ	0xFE2
  1578                           fsr1l	equ	0xFE1
  1579                           
  1580                           	psect	cstackBANK1
  1581  00016E                     __pcstackBANK1:
  1582                           	opt stack 0
  1583  00016E                     display_menu@selector:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x0
  1587  00016E                     	ds	2
  1588  000170                     display_menu@menuSizePtr:
  1589                           	opt stack 0
  1590                           
  1591                           ; 2 bytes @ 0x2
  1592  000170                     	ds	2
  1593  000172                     display_menu@menuSelection:
  1594                           	opt stack 0
  1595                           
  1596                           ; 2 bytes @ 0x4
  1597  000172                     	ds	2
  1598  000174                     _display_menu$1103:
  1599                           	opt stack 0
  1600                           
  1601                           ; 2 bytes @ 0x6
  1602  000174                     	ds	2
  1603  000176                     display_menu@menuIndexPtr:
  1604                           	opt stack 0
  1605                           
  1606                           ; 2 bytes @ 0x8
  1607  000176                     	ds	2
  1608                           tblptru	equ	0xFF8
  1609                           tblptrh	equ	0xFF7
  1610                           tblptrl	equ	0xFF6
  1611                           tablat	equ	0xFF5
  1612                           postinc0	equ	0xFEE
  1613                           wreg	equ	0xFE8
  1614                           postdec1	equ	0xFE5
  1615                           fsr1h	equ	0xFE2
  1616                           fsr1l	equ	0xFE1
  1617                           
  1618                           	psect	cstackBANK0
  1619  000080                     __pcstackBANK0:
  1620                           	opt stack 0
  1621  000080                     ??_readADC:
  1622  000080                     ??_isdigit:
  1623  000080                     ??_I2C_Master_Wait:
  1624  000080                     ?_strcmp:
  1625                           	opt stack 0
  1626  000080                     ?___wmul:
  1627                           	opt stack 0
  1628  000080                     ?___awdiv:
  1629                           	opt stack 0
  1630  000080                     ?___awmod:
  1631                           	opt stack 0
  1632  000080                     ?___lwdiv:
  1633                           	opt stack 0
  1634  000080                     ?___lldiv:
  1635                           	opt stack 0
  1636  000080                     lcdNibble@temp:
  1637                           	opt stack 0
  1638  000080                     ___wmul@multiplier:
  1639                           	opt stack 0
  1640  000080                     ___awdiv@dividend:
  1641                           	opt stack 0
  1642  000080                     ___awmod@dividend:
  1643                           	opt stack 0
  1644  000080                     ___lwdiv@dividend:
  1645                           	opt stack 0
  1646  000080                     strcmp@s1:
  1647                           	opt stack 0
  1648  000080                     strcpy@to:
  1649                           	opt stack 0
  1650  000080                     ___lldiv@dividend:
  1651                           	opt stack 0
  1652                           
  1653                           ; 4 bytes @ 0x0
  1654  000080                     	ds	1
  1655  000081                     I2C_Master_Read@a:
  1656                           	opt stack 0
  1657  000081                     lcdNibble@data:
  1658                           	opt stack 0
  1659  000081                     readADC@channel:
  1660                           	opt stack 0
  1661  000081                     _isdigit$713:
  1662                           	opt stack 0
  1663  000081                     I2C_Master_Write@d:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0x1
  1667  000081                     	ds	1
  1668  000082                     ??_read_sensors:
  1669  000082                     I2C_Master_Read@temp:
  1670                           	opt stack 0
  1671  000082                     lcdInst@data:
  1672                           	opt stack 0
  1673  000082                     putch@data:
  1674                           	opt stack 0
  1675  000082                     isdigit@c:
  1676                           	opt stack 0
  1677  000082                     ___wmul@multiplicand:
  1678                           	opt stack 0
  1679  000082                     ___awdiv@divisor:
  1680                           	opt stack 0
  1681  000082                     ___awmod@divisor:
  1682                           	opt stack 0
  1683  000082                     ___lwdiv@divisor:
  1684                           	opt stack 0
  1685  000082                     strcmp@s2:
  1686                           	opt stack 0
  1687  000082                     strcpy@from:
  1688                           	opt stack 0
  1689                           
  1690                           ; 2 bytes @ 0x2
  1691  000082                     	ds	1
  1692  000083                     ??_initLCD:
  1693  000083                     set_time@i:
  1694                           	opt stack 0
  1695                           
  1696                           ; 1 bytes @ 0x3
  1697  000083                     	ds	1
  1698  000084                     ??_strcmp:
  1699  000084                     read_sensors@i:
  1700                           	opt stack 0
  1701  000084                     ___awdiv@counter:
  1702                           	opt stack 0
  1703  000084                     ___awmod@counter:
  1704                           	opt stack 0
  1705  000084                     ___lwdiv@counter:
  1706                           	opt stack 0
  1707  000084                     ___wmul@product:
  1708                           	opt stack 0
  1709  000084                     strcpy@cp:
  1710                           	opt stack 0
  1711  000084                     ___lldiv@divisor:
  1712                           	opt stack 0
  1713                           
  1714                           ; 4 bytes @ 0x4
  1715  000084                     	ds	1
  1716  000085                     ___awdiv@sign:
  1717                           	opt stack 0
  1718  000085                     ___awmod@sign:
  1719                           	opt stack 0
  1720  000085                     strcmp@r:
  1721                           	opt stack 0
  1722  000085                     ___lwdiv@quotient:
  1723                           	opt stack 0
  1724                           
  1725                           ; 2 bytes @ 0x5
  1726  000085                     	ds	1
  1727  000086                     ??_update_RTC:
  1728  000086                     ___awdiv@quotient:
  1729                           	opt stack 0
  1730                           
  1731                           ; 2 bytes @ 0x6
  1732  000086                     	ds	1
  1733  000087                     ?___lwmod:
  1734                           	opt stack 0
  1735  000087                     ___lwmod@dividend:
  1736                           	opt stack 0
  1737                           
  1738                           ; 2 bytes @ 0x7
  1739  000087                     	ds	1
  1740  000088                     ___lldiv@quotient:
  1741                           	opt stack 0
  1742                           
  1743                           ; 4 bytes @ 0x8
  1744  000088                     	ds	1
  1745  000089                     ___lwmod@divisor:
  1746                           	opt stack 0
  1747                           
  1748                           ; 2 bytes @ 0x9
  1749  000089                     	ds	1
  1750  00008A                     update_RTC@i:
  1751                           	opt stack 0
  1752                           
  1753                           ; 1 bytes @ 0xA
  1754  00008A                     	ds	1
  1755  00008B                     ___lwmod@counter:
  1756                           	opt stack 0
  1757                           
  1758                           ; 1 bytes @ 0xB
  1759  00008B                     	ds	1
  1760  00008C                     ?__doprnt:
  1761                           	opt stack 0
  1762  00008C                     ___lldiv@counter:
  1763                           	opt stack 0
  1764  00008C                     __doprnt@pb:
  1765                           	opt stack 0
  1766                           
  1767                           ; 2 bytes @ 0xC
  1768  00008C                     	ds	1
  1769  00008D                     I2C_Master_Init@c:
  1770                           	opt stack 0
  1771                           
  1772                           ; 4 bytes @ 0xD
  1773  00008D                     	ds	1
  1774  00008E                     __doprnt@f:
  1775                           	opt stack 0
  1776                           
  1777                           ; 2 bytes @ 0xE
  1778  00008E                     	ds	2
  1779  000090                     __doprnt@ap:
  1780                           	opt stack 0
  1781                           
  1782                           ; 2 bytes @ 0x10
  1783  000090                     	ds	1
  1784  000091                     ??_I2C_Master_Init:
  1785                           
  1786                           ; 1 bytes @ 0x11
  1787  000091                     	ds	1
  1788  000092                     ??__doprnt:
  1789                           
  1790                           ; 1 bytes @ 0x12
  1791  000092                     	ds	4
  1792  000096                     __doprnt@idx:
  1793                           	opt stack 0
  1794                           
  1795                           ; 1 bytes @ 0x16
  1796  000096                     	ds	1
  1797  000097                     __doprnt@prec:
  1798                           	opt stack 0
  1799                           
  1800                           ; 1 bytes @ 0x17
  1801  000097                     	ds	1
  1802  000098                     __doprnt@len:
  1803                           	opt stack 0
  1804                           
  1805                           ; 2 bytes @ 0x18
  1806  000098                     	ds	2
  1807  00009A                     __doprnt@cp:
  1808                           	opt stack 0
  1809                           
  1810                           ; 2 bytes @ 0x1A
  1811  00009A                     	ds	2
  1812  00009C                     __doprnt@val:
  1813                           	opt stack 0
  1814                           
  1815                           ; 2 bytes @ 0x1C
  1816  00009C                     	ds	2
  1817  00009E                     __doprnt@flag:
  1818                           	opt stack 0
  1819                           
  1820                           ; 1 bytes @ 0x1E
  1821  00009E                     	ds	1
  1822  00009F                     __doprnt@width:
  1823                           	opt stack 0
  1824                           
  1825                           ; 2 bytes @ 0x1F
  1826  00009F                     	ds	2
  1827  0000A1                     __doprnt@c:
  1828                           	opt stack 0
  1829                           
  1830                           ; 1 bytes @ 0x21
  1831  0000A1                     	ds	1
  1832  0000A2                     ?_printf:
  1833                           	opt stack 0
  1834  0000A2                     ?_sprintf:
  1835                           	opt stack 0
  1836  0000A2                     printf@f:
  1837                           	opt stack 0
  1838  0000A2                     sprintf@wh:
  1839                           	opt stack 0
  1840                           
  1841                           ; 2 bytes @ 0x22
  1842  0000A2                     	ds	2
  1843  0000A4                     printf@ap:
  1844                           	opt stack 0
  1845  0000A4                     sprintf@f:
  1846                           	opt stack 0
  1847                           
  1848                           ; 2 bytes @ 0x24
  1849  0000A4                     	ds	2
  1850  0000A6                     printf@pb:
  1851                           	opt stack 0
  1852                           
  1853                           ; 4 bytes @ 0x26
  1854  0000A6                     	ds	4
  1855  0000AA                     ??_update_lcd:
  1856                           
  1857                           ; 1 bytes @ 0x2A
  1858  0000AA                     	ds	1
  1859  0000AB                     update_lcd@flag:
  1860                           	opt stack 0
  1861                           
  1862                           ; 2 bytes @ 0x2B
  1863  0000AB                     	ds	3
  1864  0000AE                     sprintf@ap:
  1865                           	opt stack 0
  1866                           
  1867                           ; 2 bytes @ 0x2E
  1868  0000AE                     	ds	2
  1869  0000B0                     sprintf@pb:
  1870                           	opt stack 0
  1871                           
  1872                           ; 4 bytes @ 0x30
  1873  0000B0                     	ds	4
  1874  0000B4                     ??_update_state:
  1875  0000B4                     ??_display_menu:
  1876                           
  1877                           ; 1 bytes @ 0x34
  1878  0000B4                     	ds	2
  1879  0000B6                     update_state@i:
  1880                           	opt stack 0
  1881                           
  1882                           ; 2 bytes @ 0x36
  1883  0000B6                     	ds	3
  1884  0000B9                     ??_main:
  1885                           
  1886                           ; 1 bytes @ 0x39
  1887  0000B9                     	ds	1
  1888                           tblptru	equ	0xFF8
  1889                           tblptrh	equ	0xFF7
  1890                           tblptrl	equ	0xFF6
  1891                           tablat	equ	0xFF5
  1892                           postinc0	equ	0xFEE
  1893                           wreg	equ	0xFE8
  1894                           postdec1	equ	0xFE5
  1895                           fsr1h	equ	0xFE2
  1896                           fsr1l	equ	0xFE1
  1897                           
  1898                           	psect	cstackCOMRAM
  1899  000001                     __pcstackCOMRAM:
  1900                           	opt stack 0
  1901  000001                     ??i2_isdigit:
  1902  000001                     ?i2___wmul:
  1903                           	opt stack 0
  1904  000001                     ?i2___awmod:
  1905                           	opt stack 0
  1906  000001                     ?i2___lwdiv:
  1907                           	opt stack 0
  1908  000001                     i2lcdNibble@temp:
  1909                           	opt stack 0
  1910  000001                     i2___wmul@multiplier:
  1911                           	opt stack 0
  1912  000001                     i2___awmod@dividend:
  1913                           	opt stack 0
  1914  000001                     i2___lwdiv@dividend:
  1915                           	opt stack 0
  1916                           
  1917                           ; 2 bytes @ 0x0
  1918  000001                     	ds	1
  1919  000002                     i2lcdNibble@data:
  1920                           	opt stack 0
  1921  000002                     i2_isdigit$713:
  1922                           	opt stack 0
  1923                           
  1924                           ; 1 bytes @ 0x1
  1925  000002                     	ds	1
  1926  000003                     i2lcdInst@data:
  1927                           	opt stack 0
  1928  000003                     i2putch@data:
  1929                           	opt stack 0
  1930  000003                     i2isdigit@c:
  1931                           	opt stack 0
  1932  000003                     i2___wmul@multiplicand:
  1933                           	opt stack 0
  1934  000003                     i2___awmod@divisor:
  1935                           	opt stack 0
  1936  000003                     i2___lwdiv@divisor:
  1937                           	opt stack 0
  1938                           
  1939                           ; 2 bytes @ 0x2
  1940  000003                     	ds	2
  1941  000005                     i2___awmod@counter:
  1942                           	opt stack 0
  1943  000005                     i2___wmul@product:
  1944                           	opt stack 0
  1945  000005                     i2___lwdiv@quotient:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0x4
  1949  000005                     	ds	1
  1950  000006                     i2___awmod@sign:
  1951                           	opt stack 0
  1952                           
  1953                           ; 1 bytes @ 0x5
  1954  000006                     	ds	1
  1955  000007                     i2___lwdiv@counter:
  1956                           	opt stack 0
  1957                           
  1958                           ; 1 bytes @ 0x6
  1959  000007                     	ds	1
  1960  000008                     ?i2___lwmod:
  1961                           	opt stack 0
  1962  000008                     i2___lwmod@dividend:
  1963                           	opt stack 0
  1964                           
  1965                           ; 2 bytes @ 0x7
  1966  000008                     	ds	2
  1967  00000A                     i2___lwmod@divisor:
  1968                           	opt stack 0
  1969                           
  1970                           ; 2 bytes @ 0x9
  1971  00000A                     	ds	2
  1972  00000C                     i2___lwmod@counter:
  1973                           	opt stack 0
  1974                           
  1975                           ; 1 bytes @ 0xB
  1976  00000C                     	ds	1
  1977  00000D                     ?i2__doprnt:
  1978                           	opt stack 0
  1979  00000D                     i2__doprnt@pb:
  1980                           	opt stack 0
  1981                           
  1982                           ; 2 bytes @ 0xC
  1983  00000D                     	ds	2
  1984  00000F                     i2__doprnt@f:
  1985                           	opt stack 0
  1986                           
  1987                           ; 2 bytes @ 0xE
  1988  00000F                     	ds	2
  1989  000011                     i2__doprnt@ap:
  1990                           	opt stack 0
  1991                           
  1992                           ; 2 bytes @ 0x10
  1993  000011                     	ds	2
  1994  000013                     ??i2__doprnt:
  1995                           
  1996                           ; 1 bytes @ 0x12
  1997  000013                     	ds	4
  1998  000017                     i2__doprnt@idx:
  1999                           	opt stack 0
  2000                           
  2001                           ; 1 bytes @ 0x16
  2002  000017                     	ds	1
  2003  000018                     i2__doprnt@prec:
  2004                           	opt stack 0
  2005                           
  2006                           ; 1 bytes @ 0x17
  2007  000018                     	ds	1
  2008  000019                     i2__doprnt@len:
  2009                           	opt stack 0
  2010                           
  2011                           ; 2 bytes @ 0x18
  2012  000019                     	ds	2
  2013  00001B                     i2__doprnt@cp:
  2014                           	opt stack 0
  2015                           
  2016                           ; 2 bytes @ 0x1A
  2017  00001B                     	ds	2
  2018  00001D                     i2__doprnt@val:
  2019                           	opt stack 0
  2020                           
  2021                           ; 2 bytes @ 0x1C
  2022  00001D                     	ds	2
  2023  00001F                     i2__doprnt@flag:
  2024                           	opt stack 0
  2025                           
  2026                           ; 1 bytes @ 0x1E
  2027  00001F                     	ds	1
  2028  000020                     i2__doprnt@width:
  2029                           	opt stack 0
  2030                           
  2031                           ; 2 bytes @ 0x1F
  2032  000020                     	ds	2
  2033  000022                     i2__doprnt@c:
  2034                           	opt stack 0
  2035                           
  2036                           ; 1 bytes @ 0x21
  2037  000022                     	ds	1
  2038  000023                     ?i2_printf:
  2039                           	opt stack 0
  2040  000023                     i2printf@f:
  2041                           	opt stack 0
  2042                           
  2043                           ; 2 bytes @ 0x22
  2044  000023                     	ds	2
  2045  000025                     i2printf@ap:
  2046                           	opt stack 0
  2047                           
  2048                           ; 2 bytes @ 0x24
  2049  000025                     	ds	2
  2050  000027                     i2printf@pb:
  2051                           	opt stack 0
  2052                           
  2053                           ; 4 bytes @ 0x26
  2054  000027                     	ds	4
  2055  00002B                     ??_keypressed:
  2056                           
  2057                           ; 1 bytes @ 0x2A
  2058  00002B                     	ds	16
  2059  00003B                     keypressed@i:
  2060                           	opt stack 0
  2061                           
  2062                           ; 2 bytes @ 0x3A
  2063  00003B                     	ds	2
  2064  00003D                     keypressed@keypress:
  2065                           	opt stack 0
  2066                           
  2067                           ; 1 bytes @ 0x3C
  2068  00003D                     	ds	1
  2069                           tblptru	equ	0xFF8
  2070                           tblptrh	equ	0xFF7
  2071                           tblptrl	equ	0xFF6
  2072                           tablat	equ	0xFF5
  2073                           postinc0	equ	0xFEE
  2074                           wreg	equ	0xFE8
  2075                           postdec1	equ	0xFE5
  2076                           fsr1h	equ	0xFE2
  2077                           fsr1l	equ	0xFE1
  2078                           
  2079 ;;
  2080 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2081 ;;
  2082 ;; *************** function _main *****************
  2083 ;; Defined at:
  2084 ;;		line 101 in file "main.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;		None
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;		None
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  1    wreg      void 
  2091 ;; Registers used:
  2092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2093 ;; Tracked objects:
  2094 ;;		On entry : 0/0
  2095 ;;		On exit  : 0/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2100 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2101 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2102 ;;Total ram usage:        1 bytes
  2103 ;; Hardware stack levels required when called:   11
  2104 ;; This function calls:
  2105 ;;		_I2C_Master_Init
  2106 ;;		_initLCD
  2107 ;;		_read_sensors
  2108 ;;		_set_time
  2109 ;;		_update_RTC
  2110 ;;		_update_display
  2111 ;;		_update_lcd
  2112 ;;		_update_state
  2113 ;; This function is called by:
  2114 ;;		Startup code after reset
  2115 ;; This function uses a non-reentrant model
  2116 ;;
  2117                           
  2118                           	psect	text0
  2119  002B86                     __ptext0:
  2120                           	opt stack 0
  2121  002B86                     _main:
  2122                           	opt stack 20
  2123                           
  2124                           ;main.c: 108: TRISC = 0x00;
  2125                           
  2126                           ;incstack = 0
  2127  002B86  0E00               	movlw	0
  2128  002B88  6E94               	movwf	3988,c	;volatile
  2129                           
  2130                           ;main.c: 109: TRISD = 0x00;
  2131  002B8A  0E00               	movlw	0
  2132  002B8C  6E95               	movwf	3989,c	;volatile
  2133                           
  2134                           ;main.c: 110: TRISB = 0xFF;
  2135  002B8E  6893               	setf	3987,c	;volatile
  2136                           
  2137                           ;main.c: 111: LATB = 0x00;
  2138  002B90  0E00               	movlw	0
  2139  002B92  6E8A               	movwf	3978,c	;volatile
  2140                           
  2141                           ;main.c: 112: LATC = 0x00;
  2142  002B94  0E00               	movlw	0
  2143  002B96  6E8B               	movwf	3979,c	;volatile
  2144                           
  2145                           ;main.c: 113: ADCON0 = 0x00;
  2146  002B98  0E00               	movlw	0
  2147  002B9A  6EC2               	movwf	4034,c	;volatile
  2148                           
  2149                           ;main.c: 114: ADCON1 = 0xFF;
  2150  002B9C  68C1               	setf	4033,c	;volatile
  2151                           
  2152                           ;main.c: 115: initLCD();
  2153  002B9E  EC8A  F017         	call	_initLCD	;wreg free
  2154                           
  2155                           ;main.c: 116: INT1IE = 1;
  2156  002BA2  86F0               	bsf	intcon3,3,c	;volatile
  2157                           
  2158                           ;main.c: 117: nRBPU = 0;
  2159  002BA4  9EF1               	bcf	intcon2,7,c	;volatile
  2160                           
  2161                           ;main.c: 118: I2C_Master_Init(10000);
  2162  002BA6  0E10               	movlw	16
  2163  002BA8  0100               	movlb	0	; () banked
  2164  002BAA  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2165  002BAC  0E27               	movlw	39
  2166  002BAE  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2167  002BB0  0E00               	movlw	0
  2168  002BB2  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2169  002BB4  0E00               	movlw	0
  2170  002BB6  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2171  002BB8  EC8D  F016         	call	_I2C_Master_Init	;wreg free
  2172                           
  2173                           ;main.c: 120: (INTCONbits.GIE = 0);
  2174  002BBC  9EF2               	bcf	intcon,7,c	;volatile
  2175                           
  2176                           ;main.c: 121: set_time();
  2177  002BBE  EC5C  F016         	call	_set_time	;wreg free
  2178  002BC2                     l8074:
  2179                           
  2180                           ;main.c: 123: (INTCONbits.GIE = 0);
  2181  002BC2  9EF2               	bcf	intcon,7,c	;volatile
  2182                           
  2183                           ;main.c: 124: update_RTC();
  2184  002BC4  ECC3  F012         	call	_update_RTC	;wreg free
  2185                           
  2186                           ;main.c: 125: read_sensors();
  2187  002BC8  ECEF  F010         	call	_read_sensors	;wreg free
  2188                           
  2189                           ;main.c: 126: update_state();
  2190  002BCC  EC92  F00F         	call	_update_state	;wreg free
  2191                           
  2192                           ;main.c: 127: update_display();
  2193  002BD0  EC0D  F012         	call	_update_display	;wreg free
  2194                           
  2195                           ;main.c: 128: update_lcd();
  2196  002BD4  EC79  F013         	call	_update_lcd	;wreg free
  2197                           
  2198                           ;main.c: 129: (INTCONbits.GIE = 1);
  2199  002BD8  8EF2               	bsf	intcon,7,c	;volatile
  2200                           
  2201                           ;main.c: 130: _delay((unsigned long)((50)*(10000000/4000.0)));
  2202  002BDA  0EA3               	movlw	163
  2203  002BDC  0100               	movlb	0	; () banked
  2204  002BDE  6FB9               	movwf	??_main& (0+255),b
  2205  002BE0  0E55               	movlw	85
  2206  002BE2                     u13057:
  2207  002BE2  2EE8               	decfsz	wreg,f,c
  2208  002BE4  D7FE               	bra	u13057
  2209  002BE6  2FB9               	decfsz	??_main& (0+255),f,b
  2210  002BE8  D7FC               	bra	u13057
  2211                           
  2212                           ;main.c: 131: (INTCONbits.GIE = 0);
  2213  002BEA  9EF2               	bcf	intcon,7,c	;volatile
  2214  002BEC  D7EA               	goto	l8074
  2215  002BEE                     __end_of_main:
  2216                           	opt stack 0
  2217                           tblptru	equ	0xFF8
  2218                           tblptrh	equ	0xFF7
  2219                           tblptrl	equ	0xFF6
  2220                           tablat	equ	0xFF5
  2221                           intcon	equ	0xFF2
  2222                           intcon2	equ	0xFF1
  2223                           intcon3	equ	0xFF0
  2224                           postinc0	equ	0xFEE
  2225                           wreg	equ	0xFE8
  2226                           postdec1	equ	0xFE5
  2227                           fsr1h	equ	0xFE2
  2228                           fsr1l	equ	0xFE1
  2229                           
  2230 ;; *************** function _update_state *****************
  2231 ;; Defined at:
  2232 ;;		line 207 in file "main.c"
  2233 ;; Parameters:    Size  Location     Type
  2234 ;;		None
  2235 ;; Auto vars:     Size  Location     Type
  2236 ;;  i               2   54[BANK0 ] int 
  2237 ;; Return value:  Size  Location     Type
  2238 ;;                  1    wreg      void 
  2239 ;; Registers used:
  2240 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2241 ;; Tracked objects:
  2242 ;;		On entry : 0/0
  2243 ;;		On exit  : 0/0
  2244 ;;		Unchanged: 0/0
  2245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2246 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2247 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2248 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2249 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2250 ;;Total ram usage:        4 bytes
  2251 ;; Hardware stack levels used:    1
  2252 ;; Hardware stack levels required when called:    9
  2253 ;; This function calls:
  2254 ;;		___awdiv
  2255 ;;		___awmod
  2256 ;;		_sprintf
  2257 ;; This function is called by:
  2258 ;;		_main
  2259 ;; This function uses a non-reentrant model
  2260 ;;
  2261                           
  2262                           	psect	text1
  2263  001F24                     __ptext1:
  2264                           	opt stack 0
  2265  001F24                     _update_state:
  2266                           	opt stack 21
  2267                           
  2268                           ;main.c: 208: if ((nstate=='s'&&state!='s')||(nstate=='m'&&state!='m')){
  2269                           
  2270                           ;incstack = 0
  2271  001F24  0E73               	movlw	115
  2272  001F26  0100               	movlb	0	; () banked
  2273  001F28  19E8               	xorwf	_nstate& (0+255),w,b
  2274  001F2A  A4D8               	btfss	status,2,c
  2275  001F2C  D005               	goto	l7944
  2276                           
  2277                           ; BSR set to: 0
  2278  001F2E  0E73               	movlw	115
  2279  001F30  0100               	movlb	0	; () banked
  2280  001F32  19E9               	xorwf	_state& (0+255),w,b
  2281  001F34  A4D8               	btfss	status,2,c
  2282  001F36  D00A               	goto	l7948
  2283  001F38                     l7944:
  2284                           
  2285                           ; BSR set to: 0
  2286  001F38  0E6D               	movlw	109
  2287  001F3A  0100               	movlb	0	; () banked
  2288  001F3C  19E8               	xorwf	_nstate& (0+255),w,b
  2289  001F3E  A4D8               	btfss	status,2,c
  2290  001F40  D033               	goto	l7960
  2291                           
  2292                           ; BSR set to: 0
  2293  001F42  0E6D               	movlw	109
  2294  001F44  0100               	movlb	0	; () banked
  2295  001F46  19E9               	xorwf	_state& (0+255),w,b
  2296  001F48  B4D8               	btfsc	status,2,c
  2297  001F4A  D02E               	goto	l7960
  2298  001F4C                     l7948:
  2299                           
  2300                           ; BSR set to: 0
  2301                           ;main.c: 209: int i;
  2302                           ;main.c: 210: for (i=0;i<7;i++)
  2303  001F4C  0E00               	movlw	0
  2304  001F4E  0100               	movlb	0	; () banked
  2305  001F50  6FB7               	movwf	(update_state@i+1)& (0+255),b
  2306  001F52  0E00               	movlw	0
  2307  001F54  6FB6               	movwf	update_state@i& (0+255),b
  2308  001F56                     l7950:
  2309                           
  2310                           ; BSR set to: 0
  2311  001F56  0100               	movlb	0	; () banked
  2312  001F58  BFB7               	btfsc	(update_state@i+1)& (0+255),7,b
  2313  001F5A  D008               	goto	l7954
  2314  001F5C  0100               	movlb	0	; () banked
  2315  001F5E  51B7               	movf	(update_state@i+1)& (0+255),w,b
  2316  001F60  E123               	bnz	l7960
  2317  001F62  0E07               	movlw	7
  2318  001F64  0100               	movlb	0	; () banked
  2319  001F66  5DB6               	subwf	update_state@i& (0+255),w,b
  2320  001F68  B0D8               	btfsc	status,0,c
  2321  001F6A  D01E               	goto	l7960
  2322  001F6C                     l7954:
  2323                           
  2324                           ; BSR set to: 0
  2325                           ;main.c: 211: startTime[i]=time_i[i];
  2326  001F6C  90D8               	bcf	status,0,c
  2327  001F6E  0100               	movlb	0	; () banked
  2328  001F70  35B6               	rlcf	update_state@i& (0+255),w,b
  2329  001F72  6ED9               	movwf	fsr2l,c
  2330  001F74  0100               	movlb	0	; () banked
  2331  001F76  35B7               	rlcf	(update_state@i+1)& (0+255),w,b
  2332  001F78  6EDA               	movwf	fsr2h,c
  2333  001F7A  0E3E               	movlw	low _time_i
  2334  001F7C  26D9               	addwf	fsr2l,f,c
  2335  001F7E  0E00               	movlw	high _time_i
  2336  001F80  22DA               	addwfc	fsr2h,f,c
  2337  001F82  90D8               	bcf	status,0,c
  2338  001F84  0100               	movlb	0	; () banked
  2339  001F86  35B6               	rlcf	update_state@i& (0+255),w,b
  2340  001F88  6EE1               	movwf	fsr1l,c
  2341  001F8A  0100               	movlb	0	; () banked
  2342  001F8C  35B7               	rlcf	(update_state@i+1)& (0+255),w,b
  2343  001F8E  6EE2               	movwf	fsr1h,c
  2344  001F90  0E0E               	movlw	low _startTime
  2345  001F92  26E1               	addwf	fsr1l,f,c
  2346  001F94  0E01               	movlw	high _startTime
  2347  001F96  22E2               	addwfc	fsr1h,f,c
  2348  001F98  CFDE FFE6          	movff	postinc2,postinc1
  2349  001F9C  CFDD FFE5          	movff	postdec2,postdec1
  2350                           
  2351                           ; BSR set to: 0
  2352  001FA0  0100               	movlb	0	; () banked
  2353  001FA2  4BB6               	infsnz	update_state@i& (0+255),f,b
  2354  001FA4  2BB7               	incf	(update_state@i+1)& (0+255),f,b
  2355  001FA6  D7D7               	goto	l7950
  2356  001FA8                     l7960:
  2357                           
  2358                           ; BSR set to: 0
  2359                           ;main.c: 212: }
  2360                           ;main.c: 213: sorted_bottles=eskaNoCap+eskaWCap+yopNoCap+yopWCap;
  2361  001FA8  0100               	movlb	0	; () banked
  2362  001FAA  51D7               	movf	_eskaWCap& (0+255),w,b
  2363  001FAC  0100               	movlb	0	; () banked
  2364  001FAE  25D5               	addwf	_eskaNoCap& (0+255),w,b
  2365  001FB0  0100               	movlb	0	; () banked
  2366  001FB2  6FB4               	movwf	??_update_state& (0+255),b
  2367  001FB4  0100               	movlb	0	; () banked
  2368  001FB6  51D8               	movf	(_eskaWCap+1)& (0+255),w,b
  2369  001FB8  0100               	movlb	0	; () banked
  2370  001FBA  21D6               	addwfc	(_eskaNoCap+1)& (0+255),w,b
  2371  001FBC  0100               	movlb	0	; () banked
  2372  001FBE  6FB5               	movwf	(??_update_state+1)& (0+255),b
  2373  001FC0  0100               	movlb	0	; () banked
  2374  001FC2  51DF               	movf	_yopNoCap& (0+255),w,b
  2375  001FC4  0100               	movlb	0	; () banked
  2376  001FC6  27B4               	addwf	??_update_state& (0+255),f,b
  2377  001FC8  0100               	movlb	0	; () banked
  2378  001FCA  51E0               	movf	(_yopNoCap+1)& (0+255),w,b
  2379  001FCC  0100               	movlb	0	; () banked
  2380  001FCE  23B5               	addwfc	(??_update_state+1)& (0+255),f,b
  2381  001FD0  0100               	movlb	0	; () banked
  2382  001FD2  51E1               	movf	_yopWCap& (0+255),w,b
  2383  001FD4  0100               	movlb	0	; () banked
  2384  001FD6  25B4               	addwf	??_update_state& (0+255),w,b
  2385  001FD8  0100               	movlb	0	; () banked
  2386  001FDA  6FDB               	movwf	_sorted_bottles& (0+255),b
  2387  001FDC  0100               	movlb	0	; () banked
  2388  001FDE  51E2               	movf	(_yopWCap+1)& (0+255),w,b
  2389  001FE0  0100               	movlb	0	; () banked
  2390  001FE2  21B5               	addwfc	(??_update_state+1)& (0+255),w,b
  2391  001FE4  0100               	movlb	0	; () banked
  2392  001FE6  6FDC               	movwf	(_sorted_bottles+1)& (0+255),b
  2393                           
  2394                           ; BSR set to: 0
  2395                           ;main.c: 214: sorted_bottles%=100;
  2396  001FE8  C0DB  F080         	movff	_sorted_bottles,___awmod@dividend
  2397  001FEC  C0DC  F081         	movff	_sorted_bottles+1,___awmod@dividend+1
  2398  001FF0  0E00               	movlw	0
  2399  001FF2  0100               	movlb	0	; () banked
  2400  001FF4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2401  001FF6  0E64               	movlw	100
  2402  001FF8  6F82               	movwf	___awmod@divisor& (0+255),b
  2403  001FFA  ECB5  F014         	call	___awmod	;wreg free
  2404  001FFE  C080  F0DB         	movff	?___awmod,_sorted_bottles
  2405  002002  C081  F0DC         	movff	?___awmod+1,_sorted_bottles+1
  2406                           
  2407                           ;main.c: 215: if (state=='s'&&timeDiff>=180){
  2408  002006  0E73               	movlw	115
  2409  002008  0100               	movlb	0	; () banked
  2410  00200A  19E9               	xorwf	_state& (0+255),w,b
  2411  00200C  A4D8               	btfss	status,2,c
  2412  00200E  D00E               	goto	l7970
  2413                           
  2414                           ; BSR set to: 0
  2415  002010  0100               	movlb	0	; () banked
  2416  002012  BFDE               	btfsc	(_timeDiff+1)& (0+255),7,b
  2417  002014  D00B               	goto	l7970
  2418  002016  0100               	movlb	0	; () banked
  2419  002018  51DE               	movf	(_timeDiff+1)& (0+255),w,b
  2420  00201A  E105               	bnz	u12570
  2421  00201C  0EB4               	movlw	180
  2422  00201E  0100               	movlb	0	; () banked
  2423  002020  5DDD               	subwf	_timeDiff& (0+255),w,b
  2424  002022  A0D8               	btfss	status,0,c
  2425  002024  D003               	goto	l7970
  2426  002026                     u12570:
  2427                           
  2428                           ; BSR set to: 0
  2429                           ;main.c: 216: nstate='e';
  2430  002026  0E65               	movlw	101
  2431  002028  0100               	movlb	0	; () banked
  2432  00202A  6FE8               	movwf	_nstate& (0+255),b
  2433  00202C                     l7970:
  2434                           
  2435                           ; BSR set to: 0
  2436                           ;main.c: 217: }
  2437                           ;main.c: 218: if (nstate=='e'&&state!='e'){
  2438  00202C  0E65               	movlw	101
  2439  00202E  0100               	movlb	0	; () banked
  2440  002030  19E8               	xorwf	_nstate& (0+255),w,b
  2441  002032  A4D8               	btfss	status,2,c
  2442  002034  D073               	goto	l7978
  2443                           
  2444                           ; BSR set to: 0
  2445  002036  0E65               	movlw	101
  2446  002038  0100               	movlb	0	; () banked
  2447  00203A  19E9               	xorwf	_state& (0+255),w,b
  2448  00203C  B4D8               	btfsc	status,2,c
  2449  00203E  D06E               	goto	l7978
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;main.c: 219: runTime=timeDiff;
  2453  002040  C0DD  F0D9         	movff	_timeDiff,_runTime
  2454  002044  C0DE  F0DA         	movff	_timeDiff+1,_runTime+1
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;main.c: 220: sprintf(menu[3][0],"bottles: %02d    \0", sorted_bottles);
  2458  002048  0E94               	movlw	low (_menu+540)
  2459  00204A  0100               	movlb	0	; () banked
  2460  00204C  6FA2               	movwf	sprintf@wh& (0+255),b
  2461  00204E  0E03               	movlw	high (_menu+540)
  2462  002050  0100               	movlb	0	; () banked
  2463  002052  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2464  002054  0E84               	movlw	low STR_7
  2465  002056  0100               	movlb	0	; () banked
  2466  002058  6FA4               	movwf	sprintf@f& (0+255),b
  2467  00205A  0EFF               	movlw	high STR_7
  2468  00205C  0100               	movlb	0	; () banked
  2469  00205E  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2470  002060  C0DB  F0A6         	movff	_sorted_bottles,?_sprintf+4
  2471  002064  C0DC  F0A7         	movff	_sorted_bottles+1,?_sprintf+5
  2472  002068  EC13  F017         	call	_sprintf	;wreg free
  2473                           
  2474                           ;main.c: 221: sprintf(menu[3][1],"run time: %01d:%02d \0",(runTime/60),timeDiff%60);
  2475  00206C  0EA6               	movlw	low (_menu+558)
  2476  00206E  0100               	movlb	0	; () banked
  2477  002070  6FA2               	movwf	sprintf@wh& (0+255),b
  2478  002072  0E03               	movlw	high (_menu+558)
  2479  002074  0100               	movlb	0	; () banked
  2480  002076  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2481  002078  0E46               	movlw	low STR_8
  2482  00207A  0100               	movlb	0	; () banked
  2483  00207C  6FA4               	movwf	sprintf@f& (0+255),b
  2484  00207E  0EFF               	movlw	high STR_8
  2485  002080  0100               	movlb	0	; () banked
  2486  002082  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2487  002084  C0D9  F080         	movff	_runTime,___awdiv@dividend
  2488  002088  C0DA  F081         	movff	_runTime+1,___awdiv@dividend+1
  2489  00208C  0E00               	movlw	0
  2490  00208E  0100               	movlb	0	; () banked
  2491  002090  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2492  002092  0E3C               	movlw	60
  2493  002094  6F82               	movwf	___awdiv@divisor& (0+255),b
  2494  002096  ECF8  F013         	call	___awdiv	;wreg free
  2495  00209A  C080  F0A6         	movff	?___awdiv,?_sprintf+4
  2496  00209E  C081  F0A7         	movff	?___awdiv+1,?_sprintf+5
  2497  0020A2  C0DD  F080         	movff	_timeDiff,___awmod@dividend
  2498  0020A6  C0DE  F081         	movff	_timeDiff+1,___awmod@dividend+1
  2499  0020AA  0E00               	movlw	0
  2500  0020AC  0100               	movlb	0	; () banked
  2501  0020AE  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2502  0020B0  0E3C               	movlw	60
  2503  0020B2  6F82               	movwf	___awmod@divisor& (0+255),b
  2504  0020B4  ECB5  F014         	call	___awmod	;wreg free
  2505  0020B8  C080  F0A8         	movff	?___awmod,?_sprintf+6
  2506  0020BC  C081  F0A9         	movff	?___awmod+1,?_sprintf+7
  2507  0020C0  EC13  F017         	call	_sprintf	;wreg free
  2508                           
  2509                           ;main.c: 222: sprintf(menu[3][2],"en:%02d ec:%02d    ", eskaNoCap,eskaWCap);
  2510  0020C4  0EB8               	movlw	low (_menu+576)
  2511  0020C6  0100               	movlb	0	; () banked
  2512  0020C8  6FA2               	movwf	sprintf@wh& (0+255),b
  2513  0020CA  0E03               	movlw	high (_menu+576)
  2514  0020CC  0100               	movlb	0	; () banked
  2515  0020CE  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2516  0020D0  0E5C               	movlw	low STR_9
  2517  0020D2  0100               	movlb	0	; () banked
  2518  0020D4  6FA4               	movwf	sprintf@f& (0+255),b
  2519  0020D6  0EFF               	movlw	high STR_9
  2520  0020D8  0100               	movlb	0	; () banked
  2521  0020DA  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2522  0020DC  C0D5  F0A6         	movff	_eskaNoCap,?_sprintf+4
  2523  0020E0  C0D6  F0A7         	movff	_eskaNoCap+1,?_sprintf+5
  2524  0020E4  C0D7  F0A8         	movff	_eskaWCap,?_sprintf+6
  2525  0020E8  C0D8  F0A9         	movff	_eskaWCap+1,?_sprintf+7
  2526  0020EC  EC13  F017         	call	_sprintf	;wreg free
  2527                           
  2528                           ;main.c: 223: sprintf(menu[3][3],"yn:%02d yc:%02d    ", yopNoCap, yopWCap);
  2529  0020F0  0ECA               	movlw	low (_menu+594)
  2530  0020F2  0100               	movlb	0	; () banked
  2531  0020F4  6FA2               	movwf	sprintf@wh& (0+255),b
  2532  0020F6  0E03               	movlw	high (_menu+594)
  2533  0020F8  0100               	movlb	0	; () banked
  2534  0020FA  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2535  0020FC  0E70               	movlw	low STR_10
  2536  0020FE  0100               	movlb	0	; () banked
  2537  002100  6FA4               	movwf	sprintf@f& (0+255),b
  2538  002102  0EFF               	movlw	high STR_10
  2539  002104  0100               	movlb	0	; () banked
  2540  002106  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2541  002108  C0DF  F0A6         	movff	_yopNoCap,?_sprintf+4
  2542  00210C  C0E0  F0A7         	movff	_yopNoCap+1,?_sprintf+5
  2543  002110  C0E1  F0A8         	movff	_yopWCap,?_sprintf+6
  2544  002114  C0E2  F0A9         	movff	_yopWCap+1,?_sprintf+7
  2545  002118  EC13  F017         	call	_sprintf	;wreg free
  2546  00211C                     l7978:
  2547                           
  2548                           ;main.c: 224: }
  2549                           ;main.c: 225: if ((state=='m'||state=='l'||state=='c')&&timeDiff>=10){
  2550  00211C  0E6D               	movlw	109
  2551  00211E  0100               	movlb	0	; () banked
  2552  002120  19E9               	xorwf	_state& (0+255),w,b
  2553  002122  B4D8               	btfsc	status,2,c
  2554  002124  D00A               	goto	l7984
  2555                           
  2556                           ; BSR set to: 0
  2557  002126  0E6C               	movlw	108
  2558  002128  0100               	movlb	0	; () banked
  2559  00212A  19E9               	xorwf	_state& (0+255),w,b
  2560  00212C  B4D8               	btfsc	status,2,c
  2561  00212E  D005               	goto	l7984
  2562                           
  2563                           ; BSR set to: 0
  2564  002130  0E63               	movlw	99
  2565  002132  0100               	movlb	0	; () banked
  2566  002134  19E9               	xorwf	_state& (0+255),w,b
  2567  002136  A4D8               	btfss	status,2,c
  2568  002138  D00E               	goto	l7988
  2569  00213A                     l7984:
  2570                           
  2571                           ; BSR set to: 0
  2572  00213A  0100               	movlb	0	; () banked
  2573  00213C  BFDE               	btfsc	(_timeDiff+1)& (0+255),7,b
  2574  00213E  D00B               	goto	l7988
  2575  002140  0100               	movlb	0	; () banked
  2576  002142  51DE               	movf	(_timeDiff+1)& (0+255),w,b
  2577  002144  E105               	bnz	u12630
  2578  002146  0E0A               	movlw	10
  2579  002148  0100               	movlb	0	; () banked
  2580  00214A  5DDD               	subwf	_timeDiff& (0+255),w,b
  2581  00214C  A0D8               	btfss	status,0,c
  2582  00214E  D003               	goto	l7988
  2583  002150                     u12630:
  2584                           
  2585                           ; BSR set to: 0
  2586                           ;main.c: 226: nstate='r';
  2587  002150  0E72               	movlw	114
  2588  002152  0100               	movlb	0	; () banked
  2589  002154  6FE8               	movwf	_nstate& (0+255),b
  2590  002156                     l7988:
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;main.c: 227: }
  2594                           ;main.c: 228: state=nstate;
  2595  002156  C0E8  F0E9         	movff	_nstate,_state
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;main.c: 236: if (state!='m'&&state!='l'&&state!='c')
  2599  00215A  0E6D               	movlw	109
  2600  00215C  0100               	movlb	0	; () banked
  2601  00215E  19E9               	xorwf	_state& (0+255),w,b
  2602  002160  B4D8               	btfsc	status,2,c
  2603  002162  D019               	goto	l7998
  2604                           
  2605                           ; BSR set to: 0
  2606  002164  0E6C               	movlw	108
  2607  002166  0100               	movlb	0	; () banked
  2608  002168  19E9               	xorwf	_state& (0+255),w,b
  2609  00216A  B4D8               	btfsc	status,2,c
  2610  00216C  D014               	goto	l7998
  2611                           
  2612                           ; BSR set to: 0
  2613  00216E  0E63               	movlw	99
  2614  002170  0100               	movlb	0	; () banked
  2615  002172  19E9               	xorwf	_state& (0+255),w,b
  2616  002174  B4D8               	btfsc	status,2,c
  2617  002176  D00F               	goto	l7998
  2618                           
  2619                           ; BSR set to: 0
  2620                           ;main.c: 237: {
  2621                           ;main.c: 238: menuIndex=1;
  2622  002178  0E00               	movlw	0
  2623  00217A  0100               	movlb	0	; () banked
  2624  00217C  6FF7               	movwf	(_menuIndex+1)& (0+255),b
  2625  00217E  0E01               	movlw	1
  2626  002180  6FF6               	movwf	_menuIndex& (0+255),b
  2627                           
  2628                           ;main.c: 239: logIndex=1;
  2629  002182  0E00               	movlw	0
  2630  002184  0100               	movlb	0	; () banked
  2631  002186  6FF5               	movwf	(_logIndex+1)& (0+255),b
  2632  002188  0E01               	movlw	1
  2633  00218A  6FF4               	movwf	_logIndex& (0+255),b
  2634                           
  2635                           ;main.c: 240: creditIndex=1;
  2636  00218C  0E00               	movlw	0
  2637  00218E  0100               	movlb	0	; () banked
  2638  002190  6FEB               	movwf	(_creditIndex+1)& (0+255),b
  2639  002192  0E01               	movlw	1
  2640  002194  6FEA               	movwf	_creditIndex& (0+255),b
  2641  002196                     l7998:
  2642                           
  2643                           ; BSR set to: 0
  2644                           ;main.c: 241: }
  2645                           ;main.c: 242: if (state!='e')
  2646  002196  0E65               	movlw	101
  2647  002198  0100               	movlb	0	; () banked
  2648  00219A  19E9               	xorwf	_state& (0+255),w,b
  2649  00219C  B4D8               	btfsc	status,2,c
  2650  00219E  D005               	goto	l8002
  2651                           
  2652                           ; BSR set to: 0
  2653                           ;main.c: 243: endIndex=1;
  2654  0021A0  0E00               	movlw	0
  2655  0021A2  0100               	movlb	0	; () banked
  2656  0021A4  6FEF               	movwf	(_endIndex+1)& (0+255),b
  2657  0021A6  0E01               	movlw	1
  2658  0021A8  6FEE               	movwf	_endIndex& (0+255),b
  2659  0021AA                     l8002:
  2660                           
  2661                           ; BSR set to: 0
  2662                           ;main.c: 244: if (state=='r'){
  2663  0021AA  0E72               	movlw	114
  2664  0021AC  0100               	movlb	0	; () banked
  2665  0021AE  19E9               	xorwf	_state& (0+255),w,b
  2666  0021B0  A4D8               	btfss	status,2,c
  2667  0021B2  0012               	return	
  2668                           
  2669                           ; BSR set to: 0
  2670                           ;main.c: 245: eskaNoCap=0;
  2671  0021B4  0E00               	movlw	0
  2672  0021B6  0100               	movlb	0	; () banked
  2673  0021B8  6FD6               	movwf	(_eskaNoCap+1)& (0+255),b
  2674  0021BA  0E00               	movlw	0
  2675  0021BC  6FD5               	movwf	_eskaNoCap& (0+255),b
  2676                           
  2677                           ;main.c: 246: eskaWCap=0;
  2678  0021BE  0E00               	movlw	0
  2679  0021C0  0100               	movlb	0	; () banked
  2680  0021C2  6FD8               	movwf	(_eskaWCap+1)& (0+255),b
  2681  0021C4  0E00               	movlw	0
  2682  0021C6  6FD7               	movwf	_eskaWCap& (0+255),b
  2683                           
  2684                           ;main.c: 247: yopNoCap=0;
  2685  0021C8  0E00               	movlw	0
  2686  0021CA  0100               	movlb	0	; () banked
  2687  0021CC  6FE0               	movwf	(_yopNoCap+1)& (0+255),b
  2688  0021CE  0E00               	movlw	0
  2689  0021D0  6FDF               	movwf	_yopNoCap& (0+255),b
  2690                           
  2691                           ;main.c: 248: yopWCap=0;
  2692  0021D2  0E00               	movlw	0
  2693  0021D4  0100               	movlb	0	; () banked
  2694  0021D6  6FE2               	movwf	(_yopWCap+1)& (0+255),b
  2695  0021D8  0E00               	movlw	0
  2696  0021DA  6FE1               	movwf	_yopWCap& (0+255),b
  2697  0021DC  0012               	return	
  2698  0021DE                     __end_of_update_state:
  2699                           	opt stack 0
  2700                           tblptru	equ	0xFF8
  2701                           tblptrh	equ	0xFF7
  2702                           tblptrl	equ	0xFF6
  2703                           tablat	equ	0xFF5
  2704                           intcon	equ	0xFF2
  2705                           intcon2	equ	0xFF1
  2706                           intcon3	equ	0xFF0
  2707                           postinc0	equ	0xFEE
  2708                           wreg	equ	0xFE8
  2709                           postinc1	equ	0xFE6
  2710                           postdec1	equ	0xFE5
  2711                           fsr1h	equ	0xFE2
  2712                           fsr1l	equ	0xFE1
  2713                           postinc2	equ	0xFDE
  2714                           postdec2	equ	0xFDD
  2715                           fsr2h	equ	0xFDA
  2716                           fsr2l	equ	0xFD9
  2717                           status	equ	0xFD8
  2718                           
  2719 ;; *************** function _update_lcd *****************
  2720 ;; Defined at:
  2721 ;;		line 143 in file "main.c"
  2722 ;; Parameters:    Size  Location     Type
  2723 ;;		None
  2724 ;; Auto vars:     Size  Location     Type
  2725 ;;  flag            2   43[BANK0 ] int 
  2726 ;;  j               2    0        int 
  2727 ;;  i               2    0        int 
  2728 ;; Return value:  Size  Location     Type
  2729 ;;                  1    wreg      void 
  2730 ;; Registers used:
  2731 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2732 ;; Tracked objects:
  2733 ;;		On entry : 0/0
  2734 ;;		On exit  : 0/0
  2735 ;;		Unchanged: 0/0
  2736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2738 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2739 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2740 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2741 ;;Total ram usage:        3 bytes
  2742 ;; Hardware stack levels used:    1
  2743 ;; Hardware stack levels required when called:    9
  2744 ;; This function calls:
  2745 ;;		_lcdInst
  2746 ;;		_printf
  2747 ;;		_strcmp
  2748 ;;		_strcpy
  2749 ;; This function is called by:
  2750 ;;		_main
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           	psect	text2
  2755  0026F2                     __ptext2:
  2756                           	opt stack 0
  2757  0026F2                     _update_lcd:
  2758                           	opt stack 21
  2759                           
  2760                           ;main.c: 144: int flag=0;
  2761                           
  2762                           ; BSR set to: 0
  2763                           ;incstack = 0
  2764  0026F2  0E00               	movlw	0
  2765  0026F4  0100               	movlb	0	; () banked
  2766  0026F6  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  2767  0026F8  0E00               	movlw	0
  2768  0026FA  6FAB               	movwf	update_lcd@flag& (0+255),b
  2769                           
  2770                           ; BSR set to: 0
  2771                           ;main.c: 145: int i,j;
  2772                           ;main.c: 147: if (strcmp(display0, ndisplay0)!=0){
  2773  0026FC  0E26               	movlw	low _display0
  2774  0026FE  0100               	movlb	0	; () banked
  2775  002700  6F80               	movwf	strcmp@s1& (0+255),b
  2776  002702  0E01               	movlw	high _display0
  2777  002704  0100               	movlb	0	; () banked
  2778  002706  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  2779  002708  0E4A               	movlw	low _ndisplay0
  2780  00270A  0100               	movlb	0	; () banked
  2781  00270C  6F82               	movwf	strcmp@s2& (0+255),b
  2782  00270E  0E01               	movlw	high _ndisplay0
  2783  002710  0100               	movlb	0	; () banked
  2784  002712  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  2785  002714  ECBD  F016         	call	_strcmp	;wreg free
  2786  002718  0100               	movlb	0	; () banked
  2787  00271A  5180               	movf	?_strcmp& (0+255),w,b
  2788  00271C  0100               	movlb	0	; () banked
  2789  00271E  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  2790  002720  B4D8               	btfsc	status,2,c
  2791  002722  D013               	goto	l8028
  2792                           
  2793                           ; BSR set to: 0
  2794                           ;main.c: 148: strcpy(display0,ndisplay0);
  2795  002724  0E26               	movlw	low _display0
  2796  002726  0100               	movlb	0	; () banked
  2797  002728  6F80               	movwf	strcpy@to& (0+255),b
  2798  00272A  0E01               	movlw	high _display0
  2799  00272C  0100               	movlb	0	; () banked
  2800  00272E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  2801  002730  0E4A               	movlw	low _ndisplay0
  2802  002732  0100               	movlb	0	; () banked
  2803  002734  6F82               	movwf	strcpy@from& (0+255),b
  2804  002736  0E01               	movlw	high _ndisplay0
  2805  002738  0100               	movlb	0	; () banked
  2806  00273A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  2807  00273C  EC06  F018         	call	_strcpy	;wreg free
  2808                           
  2809                           ;main.c: 149: flag=1;
  2810  002740  0E00               	movlw	0
  2811  002742  0100               	movlb	0	; () banked
  2812  002744  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  2813  002746  0E01               	movlw	1
  2814  002748  6FAB               	movwf	update_lcd@flag& (0+255),b
  2815  00274A                     l8028:
  2816                           
  2817                           ; BSR set to: 0
  2818                           ;main.c: 150: }
  2819                           ;main.c: 151: if (strcmp(display1, ndisplay1)!=0){
  2820  00274A  0E38               	movlw	low _display1
  2821  00274C  0100               	movlb	0	; () banked
  2822  00274E  6F80               	movwf	strcmp@s1& (0+255),b
  2823  002750  0E01               	movlw	high _display1
  2824  002752  0100               	movlb	0	; () banked
  2825  002754  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  2826  002756  0E5C               	movlw	low _ndisplay1
  2827  002758  0100               	movlb	0	; () banked
  2828  00275A  6F82               	movwf	strcmp@s2& (0+255),b
  2829  00275C  0E01               	movlw	high _ndisplay1
  2830  00275E  0100               	movlb	0	; () banked
  2831  002760  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  2832  002762  ECBD  F016         	call	_strcmp	;wreg free
  2833  002766  0100               	movlb	0	; () banked
  2834  002768  5180               	movf	?_strcmp& (0+255),w,b
  2835  00276A  0100               	movlb	0	; () banked
  2836  00276C  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  2837  00276E  B4D8               	btfsc	status,2,c
  2838  002770  D013               	goto	l8034
  2839                           
  2840                           ; BSR set to: 0
  2841                           ;main.c: 152: strcpy(display1,ndisplay1);
  2842  002772  0E38               	movlw	low _display1
  2843  002774  0100               	movlb	0	; () banked
  2844  002776  6F80               	movwf	strcpy@to& (0+255),b
  2845  002778  0E01               	movlw	high _display1
  2846  00277A  0100               	movlb	0	; () banked
  2847  00277C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  2848  00277E  0E5C               	movlw	low _ndisplay1
  2849  002780  0100               	movlb	0	; () banked
  2850  002782  6F82               	movwf	strcpy@from& (0+255),b
  2851  002784  0E01               	movlw	high _ndisplay1
  2852  002786  0100               	movlb	0	; () banked
  2853  002788  6F83               	movwf	(strcpy@from+1)& (0+255),b
  2854  00278A  EC06  F018         	call	_strcpy	;wreg free
  2855                           
  2856                           ;main.c: 153: flag=1;
  2857  00278E  0E00               	movlw	0
  2858  002790  0100               	movlb	0	; () banked
  2859  002792  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  2860  002794  0E01               	movlw	1
  2861  002796  6FAB               	movwf	update_lcd@flag& (0+255),b
  2862  002798                     l8034:
  2863                           
  2864                           ; BSR set to: 0
  2865                           ;main.c: 154: }
  2866                           ;main.c: 155: if (flag){
  2867  002798  0100               	movlb	0	; () banked
  2868  00279A  51AB               	movf	update_lcd@flag& (0+255),w,b
  2869  00279C  0100               	movlb	0	; () banked
  2870  00279E  11AC               	iorwf	(update_lcd@flag+1)& (0+255),w,b
  2871  0027A0  B4D8               	btfsc	status,2,c
  2872  0027A2  0012               	return	
  2873                           
  2874                           ; BSR set to: 0
  2875                           ;main.c: 156: lcdInst(0x01);_delay((unsigned long)((10)*(10000000/4000.0)));;
  2876  0027A4  0E01               	movlw	1
  2877  0027A6  ECA3  F018         	call	_lcdInst
  2878  0027AA  0E21               	movlw	33
  2879  0027AC  0100               	movlb	0	; () banked
  2880  0027AE  6FAA               	movwf	??_update_lcd& (0+255),b
  2881  0027B0  0E76               	movlw	118
  2882  0027B2                     u13067:
  2883  0027B2  2EE8               	decfsz	wreg,f,c
  2884  0027B4  D7FE               	bra	u13067
  2885  0027B6  2FAA               	decfsz	??_update_lcd& (0+255),f,b
  2886  0027B8  D7FC               	bra	u13067
  2887  0027BA  F000               	nop	
  2888                           
  2889                           ;main.c: 157: lcdInst(0b10000000);;
  2890  0027BC  0E80               	movlw	128
  2891  0027BE  ECA3  F018         	call	_lcdInst
  2892                           
  2893                           ;main.c: 158: printf(display0);
  2894  0027C2  0E26               	movlw	low _display0
  2895  0027C4  0100               	movlb	0	; () banked
  2896  0027C6  6FA2               	movwf	printf@f& (0+255),b
  2897  0027C8  0E01               	movlw	high _display0
  2898  0027CA  0100               	movlb	0	; () banked
  2899  0027CC  6FA3               	movwf	(printf@f+1)& (0+255),b
  2900  0027CE  EC65  F017         	call	_printf	;wreg free
  2901                           
  2902                           ;main.c: 159: lcdInst(0b11000000);;
  2903  0027D2  0EC0               	movlw	192
  2904  0027D4  ECA3  F018         	call	_lcdInst
  2905                           
  2906                           ;main.c: 160: printf(display1);
  2907  0027D8  0E38               	movlw	low _display1
  2908  0027DA  0100               	movlb	0	; () banked
  2909  0027DC  6FA2               	movwf	printf@f& (0+255),b
  2910  0027DE  0E01               	movlw	high _display1
  2911  0027E0  0100               	movlb	0	; () banked
  2912  0027E2  6FA3               	movwf	(printf@f+1)& (0+255),b
  2913  0027E4  EC65  F017         	call	_printf	;wreg free
  2914                           
  2915                           ;main.c: 161: lcdInst(0b10010000);;
  2916  0027E8  0E90               	movlw	144
  2917  0027EA  ECA3  F018         	call	_lcdInst
  2918  0027EE  0012               	return	
  2919  0027F0                     __end_of_update_lcd:
  2920                           	opt stack 0
  2921                           tblptru	equ	0xFF8
  2922                           tblptrh	equ	0xFF7
  2923                           tblptrl	equ	0xFF6
  2924                           tablat	equ	0xFF5
  2925                           intcon	equ	0xFF2
  2926                           intcon2	equ	0xFF1
  2927                           intcon3	equ	0xFF0
  2928                           postinc0	equ	0xFEE
  2929                           wreg	equ	0xFE8
  2930                           postinc1	equ	0xFE6
  2931                           postdec1	equ	0xFE5
  2932                           fsr1h	equ	0xFE2
  2933                           fsr1l	equ	0xFE1
  2934                           postinc2	equ	0xFDE
  2935                           postdec2	equ	0xFDD
  2936                           fsr2h	equ	0xFDA
  2937                           fsr2l	equ	0xFD9
  2938                           status	equ	0xFD8
  2939                           
  2940 ;; *************** function _strcpy *****************
  2941 ;; Defined at:
  2942 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  2943 ;; Parameters:    Size  Location     Type
  2944 ;;  to              2    0[BANK0 ] PTR unsigned char 
  2945 ;;		 -> display1(18), display0(18), 
  2946 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  2947 ;;		 -> ndisplay1(18), ndisplay0(18), 
  2948 ;; Auto vars:     Size  Location     Type
  2949 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  2950 ;;		 -> display1(18), display0(18), 
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  2    0[BANK0 ] PTR unsigned char 
  2953 ;; Registers used:
  2954 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2960 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2961 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2962 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2963 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2964 ;;Total ram usage:        6 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    5
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_update_lcd
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           	psect	text3
  2975  00300C                     __ptext3:
  2976                           	opt stack 0
  2977  00300C                     _strcpy:
  2978                           	opt stack 24
  2979                           
  2980                           ;incstack = 0
  2981  00300C  C080  F084         	movff	strcpy@to,strcpy@cp
  2982  003010  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  2983  003014  D006               	goto	l4674
  2984  003016                     l4672:
  2985  003016  0100               	movlb	0	; () banked
  2986  003018  4B84               	infsnz	strcpy@cp& (0+255),f,b
  2987  00301A  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  2988  00301C  0100               	movlb	0	; () banked
  2989  00301E  4B82               	infsnz	strcpy@from& (0+255),f,b
  2990  003020  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  2991  003022                     l4674:
  2992  003022  C082  FFD9         	movff	strcpy@from,fsr2l
  2993  003026  C083  FFDA         	movff	strcpy@from+1,fsr2h
  2994  00302A  C084  FFE1         	movff	strcpy@cp,fsr1l
  2995  00302E  C085  FFE2         	movff	strcpy@cp+1,fsr1h
  2996  003032  CFDF FFE7          	movff	indf2,indf1
  2997  003036  50E7               	movf	indf1,w,c
  2998  003038  B4D8               	btfsc	status,2,c
  2999  00303A  0012               	return	
  3000  00303C  D7EC               	goto	l4672
  3001  00303E                     __end_of_strcpy:
  3002                           	opt stack 0
  3003                           tblptru	equ	0xFF8
  3004                           tblptrh	equ	0xFF7
  3005                           tblptrl	equ	0xFF6
  3006                           tablat	equ	0xFF5
  3007                           intcon	equ	0xFF2
  3008                           intcon2	equ	0xFF1
  3009                           intcon3	equ	0xFF0
  3010                           postinc0	equ	0xFEE
  3011                           wreg	equ	0xFE8
  3012                           indf1	equ	0xFE7
  3013                           postinc1	equ	0xFE6
  3014                           postdec1	equ	0xFE5
  3015                           fsr1h	equ	0xFE2
  3016                           fsr1l	equ	0xFE1
  3017                           indf2	equ	0xFDF
  3018                           postinc2	equ	0xFDE
  3019                           postdec2	equ	0xFDD
  3020                           fsr2h	equ	0xFDA
  3021                           fsr2l	equ	0xFD9
  3022                           status	equ	0xFD8
  3023                           
  3024 ;; *************** function _strcmp *****************
  3025 ;; Defined at:
  3026 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
  3027 ;; Parameters:    Size  Location     Type
  3028 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3029 ;;		 -> display1(18), display0(18), 
  3030 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  3031 ;;		 -> ndisplay1(18), ndisplay0(18), 
  3032 ;; Auto vars:     Size  Location     Type
  3033 ;;  r               1    5[BANK0 ] char 
  3034 ;; Return value:  Size  Location     Type
  3035 ;;                  2    0[BANK0 ] int 
  3036 ;; Registers used:
  3037 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3038 ;; Tracked objects:
  3039 ;;		On entry : 0/0
  3040 ;;		On exit  : 0/0
  3041 ;;		Unchanged: 0/0
  3042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3043 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3044 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;Total ram usage:        6 bytes
  3048 ;; Hardware stack levels used:    1
  3049 ;; Hardware stack levels required when called:    5
  3050 ;; This function calls:
  3051 ;;		Nothing
  3052 ;; This function is called by:
  3053 ;;		_update_lcd
  3054 ;; This function uses a non-reentrant model
  3055 ;;
  3056                           
  3057                           	psect	text4
  3058  002D7A                     __ptext4:
  3059                           	opt stack 0
  3060  002D7A                     _strcmp:
  3061                           	opt stack 24
  3062                           
  3063                           ;incstack = 0
  3064  002D7A  D006               	goto	l4662
  3065  002D7C                     l4660:
  3066  002D7C  0100               	movlb	0	; () banked
  3067  002D7E  4B80               	infsnz	strcmp@s1& (0+255),f,b
  3068  002D80  2B81               	incf	(strcmp@s1+1)& (0+255),f,b
  3069  002D82  0100               	movlb	0	; () banked
  3070  002D84  4B82               	infsnz	strcmp@s2& (0+255),f,b
  3071  002D86  2B83               	incf	(strcmp@s2+1)& (0+255),f,b
  3072  002D88                     l4662:
  3073  002D88  C080  FFD9         	movff	strcmp@s1,fsr2l
  3074  002D8C  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3075  002D90  50DF               	movf	indf2,w,c
  3076  002D92  0100               	movlb	0	; () banked
  3077  002D94  6F84               	movwf	??_strcmp& (0+255),b
  3078  002D96  C082  FFD9         	movff	strcmp@s2,fsr2l
  3079  002D9A  C083  FFDA         	movff	strcmp@s2+1,fsr2h
  3080  002D9E  50DF               	movf	indf2,w,c
  3081  002DA0  0800               	sublw	0
  3082  002DA2  0100               	movlb	0	; () banked
  3083  002DA4  2584               	addwf	??_strcmp& (0+255),w,b
  3084  002DA6  0100               	movlb	0	; () banked
  3085  002DA8  6F85               	movwf	strcmp@r& (0+255),b
  3086  002DAA  0100               	movlb	0	; () banked
  3087  002DAC  5185               	movf	strcmp@r& (0+255),w,b
  3088  002DAE  A4D8               	btfss	status,2,c
  3089  002DB0  D007               	goto	l4666
  3090                           
  3091                           ; BSR set to: 0
  3092  002DB2  C080  FFD9         	movff	strcmp@s1,fsr2l
  3093  002DB6  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3094  002DBA  50DF               	movf	indf2,w,c
  3095  002DBC  A4D8               	btfss	status,2,c
  3096  002DBE  D7DE               	goto	l4660
  3097  002DC0                     l4666:
  3098                           
  3099                           ; BSR set to: 0
  3100  002DC0  0100               	movlb	0	; () banked
  3101  002DC2  5185               	movf	strcmp@r& (0+255),w,b
  3102  002DC4  0100               	movlb	0	; () banked
  3103  002DC6  6F80               	movwf	?_strcmp& (0+255),b
  3104  002DC8  6B81               	clrf	(?_strcmp+1)& (0+255),b
  3105  002DCA  BF80               	btfsc	?_strcmp& (0+255),7,b
  3106  002DCC  0781               	decf	(?_strcmp+1)& (0+255),f,b
  3107  002DCE  0012               	return	
  3108  002DD0                     __end_of_strcmp:
  3109                           	opt stack 0
  3110                           tblptru	equ	0xFF8
  3111                           tblptrh	equ	0xFF7
  3112                           tblptrl	equ	0xFF6
  3113                           tablat	equ	0xFF5
  3114                           intcon	equ	0xFF2
  3115                           intcon2	equ	0xFF1
  3116                           intcon3	equ	0xFF0
  3117                           postinc0	equ	0xFEE
  3118                           wreg	equ	0xFE8
  3119                           indf1	equ	0xFE7
  3120                           postinc1	equ	0xFE6
  3121                           postdec1	equ	0xFE5
  3122                           fsr1h	equ	0xFE2
  3123                           fsr1l	equ	0xFE1
  3124                           indf2	equ	0xFDF
  3125                           postinc2	equ	0xFDE
  3126                           postdec2	equ	0xFDD
  3127                           fsr2h	equ	0xFDA
  3128                           fsr2l	equ	0xFD9
  3129                           status	equ	0xFD8
  3130                           
  3131 ;; *************** function _printf *****************
  3132 ;; Defined at:
  3133 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  3134 ;; Parameters:    Size  Location     Type
  3135 ;;  f               2   34[BANK0 ] PTR const unsigned char 
  3136 ;;		 -> STR_17(14), STR_16(15), STR_15(8), display1(18), 
  3137 ;;		 -> display0(18), 
  3138 ;; Auto vars:     Size  Location     Type
  3139 ;;  pb              4   38[BANK0 ] struct __prbuf
  3140 ;;  ap              2   36[BANK0 ] PTR void [1]
  3141 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
  3142 ;; Return value:  Size  Location     Type
  3143 ;;                  2   34[BANK0 ] int 
  3144 ;; Registers used:
  3145 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3146 ;; Tracked objects:
  3147 ;;		On entry : 0/0
  3148 ;;		On exit  : 0/0
  3149 ;;		Unchanged: 0/0
  3150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3151 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3154 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3155 ;;Total ram usage:        8 bytes
  3156 ;; Hardware stack levels used:    1
  3157 ;; Hardware stack levels required when called:    8
  3158 ;; This function calls:
  3159 ;;		__doprnt
  3160 ;; This function is called by:
  3161 ;;		_update_lcd
  3162 ;; This function uses a non-reentrant model
  3163 ;;
  3164                           
  3165                           	psect	text5
  3166  002ECA                     __ptext5:
  3167                           	opt stack 0
  3168  002ECA                     _printf:
  3169                           	opt stack 21
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;incstack = 0
  3173  002ECA  0E00               	movlw	0
  3174  002ECC  0100               	movlb	0	; () banked
  3175  002ECE  6FA6               	movwf	printf@pb& (0+255),b
  3176  002ED0  0E00               	movlw	0
  3177  002ED2  0100               	movlb	0	; () banked
  3178  002ED4  6FA7               	movwf	(printf@pb+1)& (0+255),b
  3179  002ED6  0E06               	movlw	low _putch
  3180  002ED8  0100               	movlb	0	; () banked
  3181  002EDA  6FA8               	movwf	(printf@pb+2)& (0+255),b
  3182  002EDC  0E31               	movlw	high _putch
  3183  002EDE  0100               	movlb	0	; () banked
  3184  002EE0  6FA9               	movwf	(printf@pb+3)& (0+255),b
  3185  002EE2  0EA4               	movlw	low (?_printf+2)
  3186  002EE4  0100               	movlb	0	; () banked
  3187  002EE6  6FA4               	movwf	printf@ap& (0+255),b
  3188  002EE8  0E00               	movlw	high (?_printf+2)
  3189  002EEA  0100               	movlb	0	; () banked
  3190  002EEC  6FA5               	movwf	(printf@ap+1)& (0+255),b
  3191                           
  3192                           ; BSR set to: 0
  3193                           ;	Return value of _printf is never used
  3194  002EEE  0EA6               	movlw	low printf@pb
  3195  002EF0  0100               	movlb	0	; () banked
  3196  002EF2  6F8C               	movwf	__doprnt@pb& (0+255),b
  3197  002EF4  0E00               	movlw	high printf@pb
  3198  002EF6  0100               	movlb	0	; () banked
  3199  002EF8  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  3200  002EFA  C0A2  F08E         	movff	printf@f,__doprnt@f
  3201  002EFE  C0A3  F08F         	movff	printf@f+1,__doprnt@f+1
  3202  002F02  0EA4               	movlw	low printf@ap
  3203  002F04  0100               	movlb	0	; () banked
  3204  002F06  6F90               	movwf	__doprnt@ap& (0+255),b
  3205  002F08  0E00               	movlw	high printf@ap
  3206  002F0A  0100               	movlb	0	; () banked
  3207  002F0C  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  3208  002F0E  EC09  F000         	call	__doprnt	;wreg free
  3209  002F12  0012               	return	
  3210  002F14                     __end_of_printf:
  3211                           	opt stack 0
  3212                           tblptru	equ	0xFF8
  3213                           tblptrh	equ	0xFF7
  3214                           tblptrl	equ	0xFF6
  3215                           tablat	equ	0xFF5
  3216                           intcon	equ	0xFF2
  3217                           intcon2	equ	0xFF1
  3218                           intcon3	equ	0xFF0
  3219                           postinc0	equ	0xFEE
  3220                           wreg	equ	0xFE8
  3221                           indf1	equ	0xFE7
  3222                           postinc1	equ	0xFE6
  3223                           postdec1	equ	0xFE5
  3224                           fsr1h	equ	0xFE2
  3225                           fsr1l	equ	0xFE1
  3226                           indf2	equ	0xFDF
  3227                           postinc2	equ	0xFDE
  3228                           postdec2	equ	0xFDD
  3229                           fsr2h	equ	0xFDA
  3230                           fsr2l	equ	0xFD9
  3231                           status	equ	0xFD8
  3232                           
  3233 ;; *************** function _update_display *****************
  3234 ;; Defined at:
  3235 ;;		line 183 in file "main.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;		None
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;		None
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3253 ;;Total ram usage:        0 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:   10
  3256 ;; This function calls:
  3257 ;;		___awdiv
  3258 ;;		___awmod
  3259 ;;		_display_menu
  3260 ;;		_sprintf
  3261 ;; This function is called by:
  3262 ;;		_main
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266                           	psect	text6
  3267  00241A                     __ptext6:
  3268                           	opt stack 0
  3269  00241A                     _update_display:
  3270                           	opt stack 20
  3271                           
  3272                           ;main.c: 184: switch(state)
  3273                           
  3274                           ;incstack = 0
  3275  00241A  D0A0               	goto	l8018
  3276  00241C                     l8008:
  3277                           
  3278                           ;main.c: 187: sprintf(ndisplay0,"%02x/%02x/%02x PUSH TO", time[6],time[5],time[4]);
  3279  00241C  0E4A               	movlw	low _ndisplay0
  3280  00241E  0100               	movlb	0	; () banked
  3281  002420  6FA2               	movwf	sprintf@wh& (0+255),b
  3282  002422  0E01               	movlw	high _ndisplay0
  3283  002424  0100               	movlb	0	; () banked
  3284  002426  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3285  002428  0E18               	movlw	low STR_1
  3286  00242A  0100               	movlb	0	; () banked
  3287  00242C  6FA4               	movwf	sprintf@f& (0+255),b
  3288  00242E  0EFF               	movlw	high STR_1
  3289  002430  0100               	movlb	0	; () banked
  3290  002432  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3291  002434  C0D4  F0A6         	movff	_time+6,?_sprintf+4
  3292  002438  0100               	movlb	0	; () banked
  3293  00243A  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3294  00243C  C0D3  F0A8         	movff	_time+5,?_sprintf+6
  3295  002440  0100               	movlb	0	; () banked
  3296  002442  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3297  002444  C0D2  F0AA         	movff	_time+4,?_sprintf+8
  3298  002448  0100               	movlb	0	; () banked
  3299  00244A  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3300  00244C  EC13  F017         	call	_sprintf	;wreg free
  3301                           
  3302                           ;main.c: 188: sprintf(ndisplay1,"%02x:%02x:%02x   START", time[2],time[1],time[0]);
  3303  002450  0E5C               	movlw	low _ndisplay1
  3304  002452  0100               	movlb	0	; () banked
  3305  002454  6FA2               	movwf	sprintf@wh& (0+255),b
  3306  002456  0E01               	movlw	high _ndisplay1
  3307  002458  0100               	movlb	0	; () banked
  3308  00245A  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3309  00245C  0E2F               	movlw	low STR_2
  3310  00245E  0100               	movlb	0	; () banked
  3311  002460  6FA4               	movwf	sprintf@f& (0+255),b
  3312  002462  0EFF               	movlw	high STR_2
  3313  002464  0100               	movlb	0	; () banked
  3314  002466  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3315  002468  C0D0  F0A6         	movff	_time+2,?_sprintf+4
  3316  00246C  0100               	movlb	0	; () banked
  3317  00246E  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3318  002470  C0CF  F0A8         	movff	_time+1,?_sprintf+6
  3319  002474  0100               	movlb	0	; () banked
  3320  002476  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3321  002478  C0CE  F0AA         	movff	_time,?_sprintf+8
  3322  00247C  0100               	movlb	0	; () banked
  3323  00247E  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3324  002480  EC13  F017         	call	_sprintf	;wreg free
  3325                           
  3326                           ;main.c: 189: break;
  3327  002484  0012               	return	
  3328  002486                     l8010:
  3329                           
  3330                           ;main.c: 191: case 'l':
  3331                           ;main.c: 192: case 'c':
  3332                           ;main.c: 193: case 'e':
  3333                           ;main.c: 194: display_menu();
  3334  002486  ECDD  F00B         	call	_display_menu	;wreg free
  3335                           
  3336                           ;main.c: 195: break;
  3337  00248A  0012               	return	
  3338  00248C                     l8012:
  3339                           
  3340                           ;main.c: 197: sprintf(ndisplay0,"%d:%02d en:%02d ec:%02d ",(timeDiff/60),timeDiff%60, es
      +                          kaNoCap,eskaWCap);
  3341  00248C  0E4A               	movlw	low _ndisplay0
  3342  00248E  0100               	movlb	0	; () banked
  3343  002490  6FA2               	movwf	sprintf@wh& (0+255),b
  3344  002492  0E01               	movlw	high _ndisplay0
  3345  002494  0100               	movlb	0	; () banked
  3346  002496  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3347  002498  0EFF               	movlw	low STR_3
  3348  00249A  0100               	movlb	0	; () banked
  3349  00249C  6FA4               	movwf	sprintf@f& (0+255),b
  3350  00249E  0EFE               	movlw	high STR_3
  3351  0024A0  0100               	movlb	0	; () banked
  3352  0024A2  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3353  0024A4  C0DD  F080         	movff	_timeDiff,___awdiv@dividend
  3354  0024A8  C0DE  F081         	movff	_timeDiff+1,___awdiv@dividend+1
  3355  0024AC  0E00               	movlw	0
  3356  0024AE  0100               	movlb	0	; () banked
  3357  0024B0  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  3358  0024B2  0E3C               	movlw	60
  3359  0024B4  6F82               	movwf	___awdiv@divisor& (0+255),b
  3360  0024B6  ECF8  F013         	call	___awdiv	;wreg free
  3361  0024BA  C080  F0A6         	movff	?___awdiv,?_sprintf+4
  3362  0024BE  C081  F0A7         	movff	?___awdiv+1,?_sprintf+5
  3363  0024C2  C0DD  F080         	movff	_timeDiff,___awmod@dividend
  3364  0024C6  C0DE  F081         	movff	_timeDiff+1,___awmod@dividend+1
  3365  0024CA  0E00               	movlw	0
  3366  0024CC  0100               	movlb	0	; () banked
  3367  0024CE  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3368  0024D0  0E3C               	movlw	60
  3369  0024D2  6F82               	movwf	___awmod@divisor& (0+255),b
  3370  0024D4  ECB5  F014         	call	___awmod	;wreg free
  3371  0024D8  C080  F0A8         	movff	?___awmod,?_sprintf+6
  3372  0024DC  C081  F0A9         	movff	?___awmod+1,?_sprintf+7
  3373  0024E0  C0D5  F0AA         	movff	_eskaNoCap,?_sprintf+8
  3374  0024E4  C0D6  F0AB         	movff	_eskaNoCap+1,?_sprintf+9
  3375  0024E8  C0D7  F0AC         	movff	_eskaWCap,?_sprintf+10
  3376  0024EC  C0D8  F0AD         	movff	_eskaWCap+1,?_sprintf+11
  3377  0024F0  EC13  F017         	call	_sprintf	;wreg free
  3378                           
  3379                           ;main.c: 198: sprintf(ndisplay1,"yn:%02d yc:%02d", yopNoCap, yopWCap);
  3380  0024F4  0E5C               	movlw	low _ndisplay1
  3381  0024F6  0100               	movlb	0	; () banked
  3382  0024F8  6FA2               	movwf	sprintf@wh& (0+255),b
  3383  0024FA  0E01               	movlw	high _ndisplay1
  3384  0024FC  0100               	movlb	0	; () banked
  3385  0024FE  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3386  002500  0EA8               	movlw	low STR_4
  3387  002502  0100               	movlb	0	; () banked
  3388  002504  6FA4               	movwf	sprintf@f& (0+255),b
  3389  002506  0EFF               	movlw	high STR_4
  3390  002508  0100               	movlb	0	; () banked
  3391  00250A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3392  00250C  C0DF  F0A6         	movff	_yopNoCap,?_sprintf+4
  3393  002510  C0E0  F0A7         	movff	_yopNoCap+1,?_sprintf+5
  3394  002514  C0E1  F0A8         	movff	_yopWCap,?_sprintf+6
  3395  002518  C0E2  F0A9         	movff	_yopWCap+1,?_sprintf+7
  3396  00251C  EC13  F017         	call	_sprintf	;wreg free
  3397                           
  3398                           ;main.c: 199: break;
  3399  002520  0012               	return	
  3400  002522                     l8014:
  3401                           
  3402                           ;main.c: 201: sprintf(ndisplay0, "ERROR");
  3403  002522  0E4A               	movlw	low _ndisplay0
  3404  002524  0100               	movlb	0	; () banked
  3405  002526  6FA2               	movwf	sprintf@wh& (0+255),b
  3406  002528  0E01               	movlw	high _ndisplay0
  3407  00252A  0100               	movlb	0	; () banked
  3408  00252C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3409  00252E  0EF3               	movlw	low STR_5
  3410  002530  0100               	movlb	0	; () banked
  3411  002532  6FA4               	movwf	sprintf@f& (0+255),b
  3412  002534  0EFF               	movlw	high STR_5
  3413  002536  0100               	movlb	0	; () banked
  3414  002538  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3415  00253A  EC13  F017         	call	_sprintf	;wreg free
  3416                           
  3417                           ;main.c: 202: sprintf(ndisplay1, "EMERGENCY STOP");
  3418  00253E  0E5C               	movlw	low _ndisplay1
  3419  002540  0100               	movlb	0	; () banked
  3420  002542  6FA2               	movwf	sprintf@wh& (0+255),b
  3421  002544  0E01               	movlw	high _ndisplay1
  3422  002546  0100               	movlb	0	; () banked
  3423  002548  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3424  00254A  0EB8               	movlw	low STR_6
  3425  00254C  0100               	movlb	0	; () banked
  3426  00254E  6FA4               	movwf	sprintf@f& (0+255),b
  3427  002550  0EFF               	movlw	high STR_6
  3428  002552  0100               	movlb	0	; () banked
  3429  002554  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3430  002556  EC13  F017         	call	_sprintf	;wreg free
  3431                           
  3432                           ;main.c: 205: }
  3433                           
  3434                           ;main.c: 203: break;
  3435  00255A  0012               	return	
  3436  00255C                     l8018:
  3437  00255C  0100               	movlb	0	; () banked
  3438  00255E  51E9               	movf	_state& (0+255),w,b
  3439                           
  3440                           ; Switch size 1, requested type "space"
  3441                           ; Number of cases is 6, Range of values is 99 to 115
  3442                           ; switch strategies available:
  3443                           ; Name         Instructions Cycles
  3444                           ; simple_byte           19    10 (average)
  3445                           ;	Chosen strategy is simple_byte
  3446  002560  0A63               	xorlw	99	; case 99
  3447  002562  B4D8               	btfsc	status,2,c
  3448  002564  D790               	goto	l8010
  3449  002566  0A06               	xorlw	6	; case 101
  3450  002568  B4D8               	btfsc	status,2,c
  3451  00256A  D78D               	goto	l8010
  3452  00256C  0A09               	xorlw	9	; case 108
  3453  00256E  B4D8               	btfsc	status,2,c
  3454  002570  D78A               	goto	l8010
  3455  002572  0A01               	xorlw	1	; case 109
  3456  002574  B4D8               	btfsc	status,2,c
  3457  002576  D787               	goto	l8010
  3458  002578  0A1F               	xorlw	31	; case 114
  3459  00257A  B4D8               	btfsc	status,2,c
  3460  00257C  D74F               	goto	l8008
  3461  00257E  0A01               	xorlw	1	; case 115
  3462  002580  B4D8               	btfsc	status,2,c
  3463  002582  D784               	goto	l8012
  3464  002584  D7CE               	goto	l8014
  3465  002586                     __end_of_update_display:
  3466                           	opt stack 0
  3467                           tblptru	equ	0xFF8
  3468                           tblptrh	equ	0xFF7
  3469                           tblptrl	equ	0xFF6
  3470                           tablat	equ	0xFF5
  3471                           intcon	equ	0xFF2
  3472                           intcon2	equ	0xFF1
  3473                           intcon3	equ	0xFF0
  3474                           postinc0	equ	0xFEE
  3475                           wreg	equ	0xFE8
  3476                           indf1	equ	0xFE7
  3477                           postinc1	equ	0xFE6
  3478                           postdec1	equ	0xFE5
  3479                           fsr1h	equ	0xFE2
  3480                           fsr1l	equ	0xFE1
  3481                           indf2	equ	0xFDF
  3482                           postinc2	equ	0xFDE
  3483                           postdec2	equ	0xFDD
  3484                           fsr2h	equ	0xFDA
  3485                           fsr2l	equ	0xFD9
  3486                           status	equ	0xFD8
  3487                           
  3488 ;; *************** function _display_menu *****************
  3489 ;; Defined at:
  3490 ;;		line 251 in file "main.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;		None
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;  menuIndexPtr    2    8[BANK1 ] PTR int 
  3495 ;;		 -> endIndex(2), creditIndex(2), logIndex(2), menuIndex(2), 
  3496 ;;  menuSelectio    2    4[BANK1 ] int 
  3497 ;;  menuSizePtr     2    2[BANK1 ] PTR int 
  3498 ;;		 -> endSize(2), menuSize(2), creditSize(2), events(2), 
  3499 ;;  selector        2    0[BANK1 ] int 
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      void 
  3502 ;; Registers used:
  3503 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3512 ;;      Totals:         0       5      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3513 ;;Total ram usage:       15 bytes
  3514 ;; Hardware stack levels used:    1
  3515 ;; Hardware stack levels required when called:    9
  3516 ;; This function calls:
  3517 ;;		___wmul
  3518 ;;		_sprintf
  3519 ;; This function is called by:
  3520 ;;		_update_display
  3521 ;; This function uses a non-reentrant model
  3522 ;;
  3523                           
  3524                           	psect	text7
  3525  0017BA                     __ptext7:
  3526                           	opt stack 0
  3527  0017BA                     _display_menu:
  3528                           	opt stack 20
  3529                           
  3530                           ;main.c: 252: int menuSelection;
  3531                           ;main.c: 253: int* menuIndexPtr;
  3532                           ;main.c: 254: int* menuSizePtr;
  3533                           ;main.c: 255: int selector=0;
  3534                           
  3535                           ;incstack = 0
  3536  0017BA  0E00               	movlw	0
  3537  0017BC  0101               	movlb	1	; () banked
  3538  0017BE  6F6F               	movwf	(display_menu@selector+1)& (0+255),b
  3539  0017C0  0E00               	movlw	0
  3540  0017C2  6F6E               	movwf	display_menu@selector& (0+255),b
  3541                           
  3542                           ;main.c: 256: switch(state)
  3543  0017C4  D049               	goto	l7702
  3544  0017C6                     l7678:
  3545                           
  3546                           ;main.c: 259: menuSelection=1;
  3547  0017C6  0E00               	movlw	0
  3548  0017C8  0101               	movlb	1	; () banked
  3549  0017CA  6F73               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3550  0017CC  0E01               	movlw	1
  3551  0017CE  6F72               	movwf	display_menu@menuSelection& (0+255),b
  3552                           
  3553                           ; BSR set to: 1
  3554                           ;main.c: 260: menuIndexPtr=&logIndex;
  3555  0017D0  0EF4               	movlw	low _logIndex
  3556  0017D2  0101               	movlb	1	; () banked
  3557  0017D4  6F76               	movwf	display_menu@menuIndexPtr& (0+255),b
  3558  0017D6  0E00               	movlw	high _logIndex
  3559  0017D8  0101               	movlb	1	; () banked
  3560  0017DA  6F77               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3561                           
  3562                           ; BSR set to: 1
  3563                           ;main.c: 261: menuSizePtr=&events;
  3564  0017DC  0EF2               	movlw	low _events
  3565  0017DE  0101               	movlb	1	; () banked
  3566  0017E0  6F70               	movwf	display_menu@menuSizePtr& (0+255),b
  3567  0017E2  0E00               	movlw	high _events
  3568  0017E4  D036               	goto	L2
  3569  0017E6                     l7684:
  3570                           
  3571                           ;main.c: 264: menuSelection=2;
  3572  0017E6  0E00               	movlw	0
  3573  0017E8  0101               	movlb	1	; () banked
  3574  0017EA  6F73               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3575  0017EC  0E02               	movlw	2
  3576  0017EE  6F72               	movwf	display_menu@menuSelection& (0+255),b
  3577                           
  3578                           ; BSR set to: 1
  3579                           ;main.c: 265: menuIndexPtr=&creditIndex;
  3580  0017F0  0EEA               	movlw	low _creditIndex
  3581  0017F2  0101               	movlb	1	; () banked
  3582  0017F4  6F76               	movwf	display_menu@menuIndexPtr& (0+255),b
  3583  0017F6  0E00               	movlw	high _creditIndex
  3584  0017F8  0101               	movlb	1	; () banked
  3585  0017FA  6F77               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3586                           
  3587                           ; BSR set to: 1
  3588                           ;main.c: 266: menuSizePtr=&creditSize;
  3589  0017FC  0EEC               	movlw	low _creditSize
  3590  0017FE  0101               	movlb	1	; () banked
  3591  001800  6F70               	movwf	display_menu@menuSizePtr& (0+255),b
  3592  001802  0E00               	movlw	high _creditSize
  3593  001804  D026               	goto	L2
  3594  001806                     l7690:
  3595                           
  3596                           ;main.c: 270: menuSelection=0;
  3597  001806  0E00               	movlw	0
  3598  001808  0101               	movlb	1	; () banked
  3599  00180A  6F73               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3600  00180C  0E00               	movlw	0
  3601  00180E  6F72               	movwf	display_menu@menuSelection& (0+255),b
  3602                           
  3603                           ; BSR set to: 1
  3604                           ;main.c: 271: menuIndexPtr=&menuIndex;
  3605  001810  0EF6               	movlw	low _menuIndex
  3606  001812  0101               	movlb	1	; () banked
  3607  001814  6F76               	movwf	display_menu@menuIndexPtr& (0+255),b
  3608  001816  0E00               	movlw	high _menuIndex
  3609  001818  0101               	movlb	1	; () banked
  3610  00181A  6F77               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3611                           
  3612                           ; BSR set to: 1
  3613                           ;main.c: 272: menuSizePtr=&menuSize;
  3614  00181C  0EF8               	movlw	low _menuSize
  3615  00181E  0101               	movlb	1	; () banked
  3616  001820  6F70               	movwf	display_menu@menuSizePtr& (0+255),b
  3617  001822  0E00               	movlw	high _menuSize
  3618  001824  0101               	movlb	1	; () banked
  3619  001826  6F71               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  3620                           
  3621                           ;main.c: 273: selector=1;
  3622  001828  0E00               	movlw	0
  3623  00182A  0101               	movlb	1	; () banked
  3624  00182C  6F6F               	movwf	(display_menu@selector+1)& (0+255),b
  3625  00182E  0E01               	movlw	1
  3626  001830  6F6E               	movwf	display_menu@selector& (0+255),b
  3627                           
  3628                           ;main.c: 274: break;
  3629  001832  D01F               	goto	l7704
  3630  001834                     l7696:
  3631                           
  3632                           ;main.c: 276: menuSelection=3;
  3633  001834  0E00               	movlw	0
  3634  001836  0101               	movlb	1	; () banked
  3635  001838  6F73               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3636  00183A  0E03               	movlw	3
  3637  00183C  6F72               	movwf	display_menu@menuSelection& (0+255),b
  3638                           
  3639                           ; BSR set to: 1
  3640                           ;main.c: 277: menuIndexPtr=&endIndex;
  3641  00183E  0EEE               	movlw	low _endIndex
  3642  001840  0101               	movlb	1	; () banked
  3643  001842  6F76               	movwf	display_menu@menuIndexPtr& (0+255),b
  3644  001844  0E00               	movlw	high _endIndex
  3645  001846  0101               	movlb	1	; () banked
  3646  001848  6F77               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3647                           
  3648                           ; BSR set to: 1
  3649                           ;main.c: 278: menuSizePtr=&endSize;
  3650  00184A  0EF0               	movlw	low _endSize
  3651  00184C  0101               	movlb	1	; () banked
  3652  00184E  6F70               	movwf	display_menu@menuSizePtr& (0+255),b
  3653  001850  0E00               	movlw	high _endSize
  3654  001852                     L2:
  3655  001852  0101               	movlb	1	; () banked
  3656  001854  6F71               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  3657                           
  3658                           ;main.c: 279: }
  3659  001856  D00D               	goto	l7704
  3660  001858                     l7702:
  3661                           
  3662                           ; BSR set to: 1
  3663  001858  0100               	movlb	0	; () banked
  3664  00185A  51E9               	movf	_state& (0+255),w,b
  3665                           
  3666                           ; Switch size 1, requested type "space"
  3667                           ; Number of cases is 4, Range of values is 99 to 109
  3668                           ; switch strategies available:
  3669                           ; Name         Instructions Cycles
  3670                           ; simple_byte           13     7 (average)
  3671                           ;	Chosen strategy is simple_byte
  3672  00185C  0A63               	xorlw	99	; case 99
  3673  00185E  B4D8               	btfsc	status,2,c
  3674  001860  D7C2               	goto	l7684
  3675  001862  0A06               	xorlw	6	; case 101
  3676  001864  B4D8               	btfsc	status,2,c
  3677  001866  D7E6               	goto	l7696
  3678  001868  0A09               	xorlw	9	; case 108
  3679  00186A  B4D8               	btfsc	status,2,c
  3680  00186C  D7AC               	goto	l7678
  3681  00186E  0A01               	xorlw	1	; case 109
  3682  001870  D7CA               	goto	l7690
  3683  001872                     l7704:
  3684                           
  3685                           ;main.c: 280: if (selector){
  3686  001872  0101               	movlb	1	; () banked
  3687  001874  516E               	movf	display_menu@selector& (0+255),w,b
  3688  001876  0101               	movlb	1	; () banked
  3689  001878  116F               	iorwf	(display_menu@selector+1)& (0+255),w,b
  3690  00187A  B4D8               	btfsc	status,2,c
  3691  00187C  D14A               	goto	l7720
  3692                           
  3693                           ; BSR set to: 1
  3694                           ;main.c: 281: if (*menuIndexPtr<*menuSizePtr){
  3695  00187E  C170  FFD9         	movff	display_menu@menuSizePtr,fsr2l
  3696  001882  C171  FFDA         	movff	display_menu@menuSizePtr+1,fsr2h
  3697  001886  C176  FFE1         	movff	display_menu@menuIndexPtr,fsr1l
  3698  00188A  C177  FFE2         	movff	display_menu@menuIndexPtr+1,fsr1h
  3699  00188E  50DE               	movf	postinc2,w,c
  3700  001890  5CE6               	subwf	postinc1,w,c
  3701  001892  50E6               	movf	postinc1,w,c
  3702  001894  0A80               	xorlw	128
  3703  001896  0100               	movlb	0	; () banked
  3704  001898  6FB8               	movwf	(??_display_menu+4)& (0+255),b
  3705  00189A  50DE               	movf	postinc2,w,c
  3706  00189C  0A80               	xorlw	128
  3707  00189E  0100               	movlb	0	; () banked
  3708  0018A0  59B8               	subwfb	(??_display_menu+4)& (0+255),w,b
  3709  0018A2  B0D8               	btfsc	status,0,c
  3710  0018A4  D096               	goto	l7714
  3711                           
  3712                           ; BSR set to: 0
  3713                           ;main.c: 282: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  3714  0018A6  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  3715  0018AA  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  3716  0018AE  0E00               	movlw	0
  3717  0018B0  0100               	movlb	0	; () banked
  3718  0018B2  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3719  0018B4  0EB4               	movlw	180
  3720  0018B6  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3721  0018B8  ECD0  F017         	call	___wmul	;wreg free
  3722  0018BC  0E78               	movlw	low _menu
  3723  0018BE  0100               	movlb	0	; () banked
  3724  0018C0  6FB4               	movwf	??_display_menu& (0+255),b
  3725  0018C2  0E01               	movlw	high _menu
  3726  0018C4  0100               	movlb	0	; () banked
  3727  0018C6  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  3728  0018C8  0100               	movlb	0	; () banked
  3729  0018CA  5180               	movf	?___wmul& (0+255),w,b
  3730  0018CC  0100               	movlb	0	; () banked
  3731  0018CE  27B4               	addwf	??_display_menu& (0+255),f,b
  3732  0018D0  0100               	movlb	0	; () banked
  3733  0018D2  5181               	movf	(?___wmul+1)& (0+255),w,b
  3734  0018D4  0100               	movlb	0	; () banked
  3735  0018D6  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  3736  0018D8  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  3737  0018DC  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  3738  0018E0  CFDE F0B6          	movff	postinc2,??_display_menu+2
  3739  0018E4  CFDD F0B7          	movff	postdec2,??_display_menu+3
  3740  0018E8  0EFF               	movlw	255
  3741  0018EA  0100               	movlb	0	; () banked
  3742  0018EC  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  3743  0018EE  0100               	movlb	0	; () banked
  3744  0018F0  6F80               	movwf	___wmul@multiplier& (0+255),b
  3745  0018F2  0EFF               	movlw	255
  3746  0018F4  0100               	movlb	0	; () banked
  3747  0018F6  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  3748  0018F8  0100               	movlb	0	; () banked
  3749  0018FA  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  3750  0018FC  0E00               	movlw	0
  3751  0018FE  0100               	movlb	0	; () banked
  3752  001900  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3753  001902  0E12               	movlw	18
  3754  001904  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3755  001906  ECD0  F017         	call	___wmul	;wreg free
  3756  00190A  0100               	movlb	0	; () banked
  3757  00190C  5180               	movf	?___wmul& (0+255),w,b
  3758  00190E  0100               	movlb	0	; () banked
  3759  001910  25B4               	addwf	??_display_menu& (0+255),w,b
  3760  001912  0101               	movlb	1	; () banked
  3761  001914  6F74               	movwf	_display_menu$1103& (0+255),b
  3762  001916  0100               	movlb	0	; () banked
  3763  001918  5181               	movf	(?___wmul+1)& (0+255),w,b
  3764  00191A  0100               	movlb	0	; () banked
  3765  00191C  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  3766  00191E  0101               	movlb	1	; () banked
  3767  001920  6F75               	movwf	(_display_menu$1103+1)& (0+255),b
  3768                           
  3769                           ; BSR set to: 1
  3770                           ;main.c: 282: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  3771  001922  0E4A               	movlw	low _ndisplay0
  3772  001924  0100               	movlb	0	; () banked
  3773  001926  6FA2               	movwf	sprintf@wh& (0+255),b
  3774  001928  0E01               	movlw	high _ndisplay0
  3775  00192A  0100               	movlb	0	; () banked
  3776  00192C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3777  00192E  0EF9               	movlw	low STR_11
  3778  001930  0100               	movlb	0	; () banked
  3779  001932  6FA4               	movwf	sprintf@f& (0+255),b
  3780  001934  0EFF               	movlw	high STR_11
  3781  001936  0100               	movlb	0	; () banked
  3782  001938  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3783  00193A  C174  F0A6         	movff	_display_menu$1103,?_sprintf+4
  3784  00193E  C175  F0A7         	movff	_display_menu$1103+1,?_sprintf+5
  3785  001942  0E00               	movlw	0
  3786  001944  0100               	movlb	0	; () banked
  3787  001946  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  3788  001948  0E3C               	movlw	60
  3789  00194A  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  3790  00194C  EC13  F017         	call	_sprintf	;wreg free
  3791                           
  3792                           ;main.c: 283: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  3793  001950  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  3794  001954  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  3795  001958  0E00               	movlw	0
  3796  00195A  0100               	movlb	0	; () banked
  3797  00195C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3798  00195E  0EB4               	movlw	180
  3799  001960  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3800  001962  ECD0  F017         	call	___wmul	;wreg free
  3801  001966  0E78               	movlw	low _menu
  3802  001968  0100               	movlb	0	; () banked
  3803  00196A  6FB4               	movwf	??_display_menu& (0+255),b
  3804  00196C  0E01               	movlw	high _menu
  3805  00196E  0100               	movlb	0	; () banked
  3806  001970  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  3807  001972  0100               	movlb	0	; () banked
  3808  001974  5180               	movf	?___wmul& (0+255),w,b
  3809  001976  0100               	movlb	0	; () banked
  3810  001978  27B4               	addwf	??_display_menu& (0+255),f,b
  3811  00197A  0100               	movlb	0	; () banked
  3812  00197C  5181               	movf	(?___wmul+1)& (0+255),w,b
  3813  00197E  0100               	movlb	0	; () banked
  3814  001980  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  3815  001982  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  3816  001986  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  3817  00198A  CFDE F080          	movff	postinc2,___wmul@multiplier
  3818  00198E  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  3819  001992  0E00               	movlw	0
  3820  001994  0100               	movlb	0	; () banked
  3821  001996  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3822  001998  0E12               	movlw	18
  3823  00199A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3824  00199C  ECD0  F017         	call	___wmul	;wreg free
  3825  0019A0  0100               	movlb	0	; () banked
  3826  0019A2  5180               	movf	?___wmul& (0+255),w,b
  3827  0019A4  0100               	movlb	0	; () banked
  3828  0019A6  25B4               	addwf	??_display_menu& (0+255),w,b
  3829  0019A8  0101               	movlb	1	; () banked
  3830  0019AA  6F74               	movwf	_display_menu$1103& (0+255),b
  3831  0019AC  0100               	movlb	0	; () banked
  3832  0019AE  5181               	movf	(?___wmul+1)& (0+255),w,b
  3833  0019B0  0100               	movlb	0	; () banked
  3834  0019B2  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  3835  0019B4  0101               	movlb	1	; () banked
  3836  0019B6  6F75               	movwf	(_display_menu$1103+1)& (0+255),b
  3837                           
  3838                           ;main.c: 283: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  3839  0019B8  0E5C               	movlw	low _ndisplay1
  3840  0019BA  0100               	movlb	0	; () banked
  3841  0019BC  6FA2               	movwf	sprintf@wh& (0+255),b
  3842  0019BE  0E01               	movlw	high _ndisplay1
  3843  0019C0  0100               	movlb	0	; () banked
  3844  0019C2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3845  0019C4  C174  F0A4         	movff	_display_menu$1103,sprintf@f
  3846  0019C8  C175  F0A5         	movff	_display_menu$1103+1,sprintf@f+1
  3847  0019CC  EC13  F017         	call	_sprintf	;wreg free
  3848                           
  3849                           ;main.c: 284: }
  3850  0019D0  0012               	return	
  3851  0019D2                     l7714:
  3852                           
  3853                           ;main.c: 285: else{
  3854                           ;main.c: 286: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  3855  0019D2  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  3856  0019D6  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  3857  0019DA  0E00               	movlw	0
  3858  0019DC  0100               	movlb	0	; () banked
  3859  0019DE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3860  0019E0  0EB4               	movlw	180
  3861  0019E2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3862  0019E4  ECD0  F017         	call	___wmul	;wreg free
  3863  0019E8  0E78               	movlw	low _menu
  3864  0019EA  0100               	movlb	0	; () banked
  3865  0019EC  6FB4               	movwf	??_display_menu& (0+255),b
  3866  0019EE  0E01               	movlw	high _menu
  3867  0019F0  0100               	movlb	0	; () banked
  3868  0019F2  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  3869  0019F4  0100               	movlb	0	; () banked
  3870  0019F6  5180               	movf	?___wmul& (0+255),w,b
  3871  0019F8  0100               	movlb	0	; () banked
  3872  0019FA  27B4               	addwf	??_display_menu& (0+255),f,b
  3873  0019FC  0100               	movlb	0	; () banked
  3874  0019FE  5181               	movf	(?___wmul+1)& (0+255),w,b
  3875  001A00  0100               	movlb	0	; () banked
  3876  001A02  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  3877  001A04  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  3878  001A08  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  3879  001A0C  CFDE F0B6          	movff	postinc2,??_display_menu+2
  3880  001A10  CFDD F0B7          	movff	postdec2,??_display_menu+3
  3881  001A14  0EFE               	movlw	254
  3882  001A16  0100               	movlb	0	; () banked
  3883  001A18  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  3884  001A1A  0100               	movlb	0	; () banked
  3885  001A1C  6F80               	movwf	___wmul@multiplier& (0+255),b
  3886  001A1E  0EFF               	movlw	255
  3887  001A20  0100               	movlb	0	; () banked
  3888  001A22  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  3889  001A24  0100               	movlb	0	; () banked
  3890  001A26  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  3891  001A28  0E00               	movlw	0
  3892  001A2A  0100               	movlb	0	; () banked
  3893  001A2C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3894  001A2E  0E12               	movlw	18
  3895  001A30  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3896  001A32  ECD0  F017         	call	___wmul	;wreg free
  3897  001A36  0100               	movlb	0	; () banked
  3898  001A38  5180               	movf	?___wmul& (0+255),w,b
  3899  001A3A  0100               	movlb	0	; () banked
  3900  001A3C  25B4               	addwf	??_display_menu& (0+255),w,b
  3901  001A3E  0101               	movlb	1	; () banked
  3902  001A40  6F74               	movwf	_display_menu$1103& (0+255),b
  3903  001A42  0100               	movlb	0	; () banked
  3904  001A44  5181               	movf	(?___wmul+1)& (0+255),w,b
  3905  001A46  0100               	movlb	0	; () banked
  3906  001A48  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  3907  001A4A  0101               	movlb	1	; () banked
  3908  001A4C  6F75               	movwf	(_display_menu$1103+1)& (0+255),b
  3909                           
  3910                           ; BSR set to: 1
  3911                           ;main.c: 285: else{
  3912                           ;main.c: 286: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  3913  001A4E  0E4A               	movlw	low _ndisplay0
  3914  001A50  0100               	movlb	0	; () banked
  3915  001A52  6FA2               	movwf	sprintf@wh& (0+255),b
  3916  001A54  0E01               	movlw	high _ndisplay0
  3917  001A56  0100               	movlb	0	; () banked
  3918  001A58  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3919  001A5A  C174  F0A4         	movff	_display_menu$1103,sprintf@f
  3920  001A5E  C175  F0A5         	movff	_display_menu$1103+1,sprintf@f+1
  3921  001A62  EC13  F017         	call	_sprintf	;wreg free
  3922                           
  3923                           ;main.c: 287: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  3924  001A66  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  3925  001A6A  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  3926  001A6E  0E00               	movlw	0
  3927  001A70  0100               	movlb	0	; () banked
  3928  001A72  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3929  001A74  0EB4               	movlw	180
  3930  001A76  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3931  001A78  ECD0  F017         	call	___wmul	;wreg free
  3932  001A7C  0E78               	movlw	low _menu
  3933  001A7E  0100               	movlb	0	; () banked
  3934  001A80  6FB4               	movwf	??_display_menu& (0+255),b
  3935  001A82  0E01               	movlw	high _menu
  3936  001A84  0100               	movlb	0	; () banked
  3937  001A86  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  3938  001A88  0100               	movlb	0	; () banked
  3939  001A8A  5180               	movf	?___wmul& (0+255),w,b
  3940  001A8C  0100               	movlb	0	; () banked
  3941  001A8E  27B4               	addwf	??_display_menu& (0+255),f,b
  3942  001A90  0100               	movlb	0	; () banked
  3943  001A92  5181               	movf	(?___wmul+1)& (0+255),w,b
  3944  001A94  0100               	movlb	0	; () banked
  3945  001A96  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  3946  001A98  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  3947  001A9C  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  3948  001AA0  CFDE F0B6          	movff	postinc2,??_display_menu+2
  3949  001AA4  CFDD F0B7          	movff	postdec2,??_display_menu+3
  3950  001AA8  0EFF               	movlw	255
  3951  001AAA  0100               	movlb	0	; () banked
  3952  001AAC  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  3953  001AAE  0100               	movlb	0	; () banked
  3954  001AB0  6F80               	movwf	___wmul@multiplier& (0+255),b
  3955  001AB2  0EFF               	movlw	255
  3956  001AB4  0100               	movlb	0	; () banked
  3957  001AB6  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  3958  001AB8  0100               	movlb	0	; () banked
  3959  001ABA  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  3960  001ABC  0E00               	movlw	0
  3961  001ABE  0100               	movlb	0	; () banked
  3962  001AC0  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3963  001AC2  0E12               	movlw	18
  3964  001AC4  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3965  001AC6  ECD0  F017         	call	___wmul	;wreg free
  3966  001ACA  0100               	movlb	0	; () banked
  3967  001ACC  5180               	movf	?___wmul& (0+255),w,b
  3968  001ACE  0100               	movlb	0	; () banked
  3969  001AD0  25B4               	addwf	??_display_menu& (0+255),w,b
  3970  001AD2  0101               	movlb	1	; () banked
  3971  001AD4  6F74               	movwf	_display_menu$1103& (0+255),b
  3972  001AD6  0100               	movlb	0	; () banked
  3973  001AD8  5181               	movf	(?___wmul+1)& (0+255),w,b
  3974  001ADA  0100               	movlb	0	; () banked
  3975  001ADC  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  3976  001ADE  0101               	movlb	1	; () banked
  3977  001AE0  6F75               	movwf	(_display_menu$1103+1)& (0+255),b
  3978                           
  3979                           ;main.c: 287: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  3980  001AE2  0E5C               	movlw	low _ndisplay1
  3981  001AE4  0100               	movlb	0	; () banked
  3982  001AE6  6FA2               	movwf	sprintf@wh& (0+255),b
  3983  001AE8  0E01               	movlw	high _ndisplay1
  3984  001AEA  0100               	movlb	0	; () banked
  3985  001AEC  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3986  001AEE  0EF9               	movlw	low STR_11
  3987  001AF0  0100               	movlb	0	; () banked
  3988  001AF2  6FA4               	movwf	sprintf@f& (0+255),b
  3989  001AF4  0EFF               	movlw	high STR_11
  3990  001AF6  0100               	movlb	0	; () banked
  3991  001AF8  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3992  001AFA  C174  F0A6         	movff	_display_menu$1103,?_sprintf+4
  3993  001AFE  C175  F0A7         	movff	_display_menu$1103+1,?_sprintf+5
  3994  001B02  0E00               	movlw	0
  3995  001B04  0100               	movlb	0	; () banked
  3996  001B06  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  3997  001B08  0E3C               	movlw	60
  3998  001B0A  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  3999  001B0C  EC13  F017         	call	_sprintf	;wreg free
  4000                           
  4001                           ;main.c: 288: }
  4002                           ;main.c: 289: }
  4003  001B10  0012               	return	
  4004  001B12                     l7720:
  4005                           
  4006                           ;main.c: 290: else{
  4007                           ;main.c: 291: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  4008  001B12  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4009  001B16  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4010  001B1A  0E00               	movlw	0
  4011  001B1C  0100               	movlb	0	; () banked
  4012  001B1E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4013  001B20  0EB4               	movlw	180
  4014  001B22  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4015  001B24  ECD0  F017         	call	___wmul	;wreg free
  4016  001B28  0E78               	movlw	low _menu
  4017  001B2A  0100               	movlb	0	; () banked
  4018  001B2C  6FB4               	movwf	??_display_menu& (0+255),b
  4019  001B2E  0E01               	movlw	high _menu
  4020  001B30  0100               	movlb	0	; () banked
  4021  001B32  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4022  001B34  0100               	movlb	0	; () banked
  4023  001B36  5180               	movf	?___wmul& (0+255),w,b
  4024  001B38  0100               	movlb	0	; () banked
  4025  001B3A  27B4               	addwf	??_display_menu& (0+255),f,b
  4026  001B3C  0100               	movlb	0	; () banked
  4027  001B3E  5181               	movf	(?___wmul+1)& (0+255),w,b
  4028  001B40  0100               	movlb	0	; () banked
  4029  001B42  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4030  001B44  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4031  001B48  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4032  001B4C  CFDE F0B6          	movff	postinc2,??_display_menu+2
  4033  001B50  CFDD F0B7          	movff	postdec2,??_display_menu+3
  4034  001B54  0EFF               	movlw	255
  4035  001B56  0100               	movlb	0	; () banked
  4036  001B58  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  4037  001B5A  0100               	movlb	0	; () banked
  4038  001B5C  6F80               	movwf	___wmul@multiplier& (0+255),b
  4039  001B5E  0EFF               	movlw	255
  4040  001B60  0100               	movlb	0	; () banked
  4041  001B62  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  4042  001B64  0100               	movlb	0	; () banked
  4043  001B66  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4044  001B68  0E00               	movlw	0
  4045  001B6A  0100               	movlb	0	; () banked
  4046  001B6C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4047  001B6E  0E12               	movlw	18
  4048  001B70  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4049  001B72  ECD0  F017         	call	___wmul	;wreg free
  4050  001B76  0100               	movlb	0	; () banked
  4051  001B78  5180               	movf	?___wmul& (0+255),w,b
  4052  001B7A  0100               	movlb	0	; () banked
  4053  001B7C  25B4               	addwf	??_display_menu& (0+255),w,b
  4054  001B7E  0101               	movlb	1	; () banked
  4055  001B80  6F74               	movwf	_display_menu$1103& (0+255),b
  4056  001B82  0100               	movlb	0	; () banked
  4057  001B84  5181               	movf	(?___wmul+1)& (0+255),w,b
  4058  001B86  0100               	movlb	0	; () banked
  4059  001B88  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4060  001B8A  0101               	movlb	1	; () banked
  4061  001B8C  6F75               	movwf	(_display_menu$1103+1)& (0+255),b
  4062                           
  4063                           ; BSR set to: 1
  4064                           ;main.c: 290: else{
  4065                           ;main.c: 291: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  4066  001B8E  0E4A               	movlw	low _ndisplay0
  4067  001B90  0100               	movlb	0	; () banked
  4068  001B92  6FA2               	movwf	sprintf@wh& (0+255),b
  4069  001B94  0E01               	movlw	high _ndisplay0
  4070  001B96  0100               	movlb	0	; () banked
  4071  001B98  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4072  001B9A  0EF9               	movlw	low STR_11
  4073  001B9C  0100               	movlb	0	; () banked
  4074  001B9E  6FA4               	movwf	sprintf@f& (0+255),b
  4075  001BA0  0EFF               	movlw	high STR_11
  4076  001BA2  0100               	movlb	0	; () banked
  4077  001BA4  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4078  001BA6  C174  F0A6         	movff	_display_menu$1103,?_sprintf+4
  4079  001BAA  C175  F0A7         	movff	_display_menu$1103+1,?_sprintf+5
  4080  001BAE  0E00               	movlw	0
  4081  001BB0  0100               	movlb	0	; () banked
  4082  001BB2  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4083  001BB4  0E5E               	movlw	94
  4084  001BB6  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4085  001BB8  EC13  F017         	call	_sprintf	;wreg free
  4086                           
  4087                           ;main.c: 292: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4088  001BBC  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4089  001BC0  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4090  001BC4  0E00               	movlw	0
  4091  001BC6  0100               	movlb	0	; () banked
  4092  001BC8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4093  001BCA  0EB4               	movlw	180
  4094  001BCC  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4095  001BCE  ECD0  F017         	call	___wmul	;wreg free
  4096  001BD2  0E78               	movlw	low _menu
  4097  001BD4  0100               	movlb	0	; () banked
  4098  001BD6  6FB4               	movwf	??_display_menu& (0+255),b
  4099  001BD8  0E01               	movlw	high _menu
  4100  001BDA  0100               	movlb	0	; () banked
  4101  001BDC  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4102  001BDE  0100               	movlb	0	; () banked
  4103  001BE0  5180               	movf	?___wmul& (0+255),w,b
  4104  001BE2  0100               	movlb	0	; () banked
  4105  001BE4  27B4               	addwf	??_display_menu& (0+255),f,b
  4106  001BE6  0100               	movlb	0	; () banked
  4107  001BE8  5181               	movf	(?___wmul+1)& (0+255),w,b
  4108  001BEA  0100               	movlb	0	; () banked
  4109  001BEC  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4110  001BEE  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4111  001BF2  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4112  001BF6  CFDE F080          	movff	postinc2,___wmul@multiplier
  4113  001BFA  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  4114  001BFE  0E00               	movlw	0
  4115  001C00  0100               	movlb	0	; () banked
  4116  001C02  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4117  001C04  0E12               	movlw	18
  4118  001C06  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4119  001C08  ECD0  F017         	call	___wmul	;wreg free
  4120  001C0C  0100               	movlb	0	; () banked
  4121  001C0E  5180               	movf	?___wmul& (0+255),w,b
  4122  001C10  0100               	movlb	0	; () banked
  4123  001C12  25B4               	addwf	??_display_menu& (0+255),w,b
  4124  001C14  0101               	movlb	1	; () banked
  4125  001C16  6F74               	movwf	_display_menu$1103& (0+255),b
  4126  001C18  0100               	movlb	0	; () banked
  4127  001C1A  5181               	movf	(?___wmul+1)& (0+255),w,b
  4128  001C1C  0100               	movlb	0	; () banked
  4129  001C1E  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4130  001C20  0101               	movlb	1	; () banked
  4131  001C22  6F75               	movwf	(_display_menu$1103+1)& (0+255),b
  4132                           
  4133                           ;main.c: 292: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4134  001C24  0E5C               	movlw	low _ndisplay1
  4135  001C26  0100               	movlb	0	; () banked
  4136  001C28  6FA2               	movwf	sprintf@wh& (0+255),b
  4137  001C2A  0E01               	movlw	high _ndisplay1
  4138  001C2C  0100               	movlb	0	; () banked
  4139  001C2E  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4140  001C30  0EF9               	movlw	low STR_11
  4141  001C32  0100               	movlb	0	; () banked
  4142  001C34  6FA4               	movwf	sprintf@f& (0+255),b
  4143  001C36  0EFF               	movlw	high STR_11
  4144  001C38  0100               	movlb	0	; () banked
  4145  001C3A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4146  001C3C  C174  F0A6         	movff	_display_menu$1103,?_sprintf+4
  4147  001C40  C175  F0A7         	movff	_display_menu$1103+1,?_sprintf+5
  4148  001C44  0E00               	movlw	0
  4149  001C46  0100               	movlb	0	; () banked
  4150  001C48  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4151  001C4A  0E5E               	movlw	94
  4152  001C4C  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4153  001C4E  EC13  F017         	call	_sprintf	;wreg free
  4154  001C52  0012               	return	
  4155  001C54                     __end_of_display_menu:
  4156                           	opt stack 0
  4157                           tblptru	equ	0xFF8
  4158                           tblptrh	equ	0xFF7
  4159                           tblptrl	equ	0xFF6
  4160                           tablat	equ	0xFF5
  4161                           intcon	equ	0xFF2
  4162                           intcon2	equ	0xFF1
  4163                           intcon3	equ	0xFF0
  4164                           postinc0	equ	0xFEE
  4165                           wreg	equ	0xFE8
  4166                           indf1	equ	0xFE7
  4167                           postinc1	equ	0xFE6
  4168                           postdec1	equ	0xFE5
  4169                           fsr1h	equ	0xFE2
  4170                           fsr1l	equ	0xFE1
  4171                           indf2	equ	0xFDF
  4172                           postinc2	equ	0xFDE
  4173                           postdec2	equ	0xFDD
  4174                           fsr2h	equ	0xFDA
  4175                           fsr2l	equ	0xFD9
  4176                           status	equ	0xFD8
  4177                           
  4178 ;; *************** function _sprintf *****************
  4179 ;; Defined at:
  4180 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;  wh              2   34[BANK0 ] PTR unsigned char 
  4183 ;;		 -> menu(720), ndisplay1(18), ndisplay0(18), 
  4184 ;;  f               2   36[BANK0 ] PTR const unsigned char 
  4185 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
  4186 ;;		 -> STR_10(20), STR_9(20), STR_8(22), STR_7(19), 
  4187 ;;		 -> menu(720), STR_6(15), STR_5(6), STR_4(16), 
  4188 ;;		 -> STR_3(25), STR_2(23), STR_1(23), 
  4189 ;; Auto vars:     Size  Location     Type
  4190 ;;  pb              4   48[BANK0 ] struct __prbuf
  4191 ;;  ap              2   46[BANK0 ] PTR void [1]
  4192 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4193 ;; Return value:  Size  Location     Type
  4194 ;;                  2   34[BANK0 ] int 
  4195 ;; Registers used:
  4196 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4197 ;; Tracked objects:
  4198 ;;		On entry : 0/0
  4199 ;;		On exit  : 0/0
  4200 ;;		Unchanged: 0/0
  4201 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4202 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4203 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4205 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4206 ;;Total ram usage:       18 bytes
  4207 ;; Hardware stack levels used:    1
  4208 ;; Hardware stack levels required when called:    8
  4209 ;; This function calls:
  4210 ;;		__doprnt
  4211 ;; This function is called by:
  4212 ;;		_update_display
  4213 ;;		_update_state
  4214 ;;		_display_menu
  4215 ;; This function uses a non-reentrant model
  4216 ;;
  4217                           
  4218                           	psect	text8
  4219  002E26                     __ptext8:
  4220                           	opt stack 0
  4221  002E26                     _sprintf:
  4222                           	opt stack 21
  4223                           
  4224                           ;incstack = 0
  4225  002E26  C0A2  F0B0         	movff	sprintf@wh,sprintf@pb
  4226  002E2A  C0A3  F0B1         	movff	sprintf@wh+1,sprintf@pb+1
  4227  002E2E  0E00               	movlw	0
  4228  002E30  0100               	movlb	0	; () banked
  4229  002E32  6FB2               	movwf	(sprintf@pb+2)& (0+255),b
  4230  002E34  0E00               	movlw	0
  4231  002E36  0100               	movlb	0	; () banked
  4232  002E38  6FB3               	movwf	(sprintf@pb+3)& (0+255),b
  4233  002E3A  0EA6               	movlw	low (?_sprintf+4)
  4234  002E3C  0100               	movlb	0	; () banked
  4235  002E3E  6FAE               	movwf	sprintf@ap& (0+255),b
  4236  002E40  0E00               	movlw	high (?_sprintf+4)
  4237  002E42  0100               	movlb	0	; () banked
  4238  002E44  6FAF               	movwf	(sprintf@ap+1)& (0+255),b
  4239                           
  4240                           ; BSR set to: 0
  4241  002E46  0EB0               	movlw	low sprintf@pb
  4242  002E48  0100               	movlb	0	; () banked
  4243  002E4A  6F8C               	movwf	__doprnt@pb& (0+255),b
  4244  002E4C  0E00               	movlw	high sprintf@pb
  4245  002E4E  0100               	movlb	0	; () banked
  4246  002E50  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  4247  002E52  C0A4  F08E         	movff	sprintf@f,__doprnt@f
  4248  002E56  C0A5  F08F         	movff	sprintf@f+1,__doprnt@f+1
  4249  002E5A  0EAE               	movlw	low sprintf@ap
  4250  002E5C  0100               	movlb	0	; () banked
  4251  002E5E  6F90               	movwf	__doprnt@ap& (0+255),b
  4252  002E60  0E00               	movlw	high sprintf@ap
  4253  002E62  0100               	movlb	0	; () banked
  4254  002E64  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  4255  002E66  EC09  F000         	call	__doprnt	;wreg free
  4256  002E6A  C0B0  FFD9         	movff	sprintf@pb,fsr2l
  4257  002E6E  C0B1  FFDA         	movff	sprintf@pb+1,fsr2h
  4258  002E72  0E00               	movlw	0
  4259  002E74  6EDF               	movwf	indf2,c
  4260  002E76  0012               	return	
  4261  002E78                     __end_of_sprintf:
  4262                           	opt stack 0
  4263                           tblptru	equ	0xFF8
  4264                           tblptrh	equ	0xFF7
  4265                           tblptrl	equ	0xFF6
  4266                           tablat	equ	0xFF5
  4267                           intcon	equ	0xFF2
  4268                           intcon2	equ	0xFF1
  4269                           intcon3	equ	0xFF0
  4270                           postinc0	equ	0xFEE
  4271                           wreg	equ	0xFE8
  4272                           indf1	equ	0xFE7
  4273                           postinc1	equ	0xFE6
  4274                           postdec1	equ	0xFE5
  4275                           fsr1h	equ	0xFE2
  4276                           fsr1l	equ	0xFE1
  4277                           indf2	equ	0xFDF
  4278                           postinc2	equ	0xFDE
  4279                           postdec2	equ	0xFDD
  4280                           fsr2h	equ	0xFDA
  4281                           fsr2l	equ	0xFD9
  4282                           status	equ	0xFD8
  4283                           
  4284 ;; *************** function __doprnt *****************
  4285 ;; Defined at:
  4286 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4287 ;; Parameters:    Size  Location     Type
  4288 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
  4289 ;;		 -> sprintf@pb(4), printf@pb(4), 
  4290 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4291 ;;		 -> STR_17(14), STR_16(15), STR_15(8), STR_14(5), 
  4292 ;;		 -> STR_13(5), STR_12(5), STR_11(5), STR_10(20), 
  4293 ;;		 -> STR_9(20), STR_8(22), STR_7(19), menu(720), 
  4294 ;;		 -> STR_6(15), STR_5(6), STR_4(16), STR_3(25), 
  4295 ;;		 -> STR_2(23), STR_1(23), display1(18), display0(18), 
  4296 ;;  ap              2   16[BANK0 ] PTR PTR void 
  4297 ;;		 -> sprintf@ap(2), printf@ap(2), 
  4298 ;; Auto vars:     Size  Location     Type
  4299 ;;  idx             1   22[BANK0 ] unsigned char 
  4300 ;;  tmpval          4    0        struct .
  4301 ;;  width           2   31[BANK0 ] int 
  4302 ;;  val             2   28[BANK0 ] unsigned int 
  4303 ;;  cp              2   26[BANK0 ] PTR const unsigned char 
  4304 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_18(7), 
  4305 ;;		 -> _doprnt@c(1), menu(720), ndisplay1(18), ndisplay0(18), 
  4306 ;;  len             2   24[BANK0 ] unsigned int 
  4307 ;;  c               1   33[BANK0 ] char 
  4308 ;;  flag            1   30[BANK0 ] unsigned char 
  4309 ;;  prec            1   23[BANK0 ] char 
  4310 ;; Return value:  Size  Location     Type
  4311 ;;                  2   12[BANK0 ] int 
  4312 ;; Registers used:
  4313 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4314 ;; Tracked objects:
  4315 ;;		On entry : 0/0
  4316 ;;		On exit  : 0/0
  4317 ;;		Unchanged: 0/0
  4318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4319 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4320 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;Total ram usage:       22 bytes
  4324 ;; Hardware stack levels used:    1
  4325 ;; Hardware stack levels required when called:    7
  4326 ;; This function calls:
  4327 ;;		Absolute function
  4328 ;;		___lwdiv
  4329 ;;		___lwmod
  4330 ;;		___wmul
  4331 ;;		_isdigit
  4332 ;;		_putch
  4333 ;; This function is called by:
  4334 ;;		_printf
  4335 ;;		_sprintf
  4336 ;; This function uses a non-reentrant model
  4337 ;;
  4338                           
  4339                           	psect	text9
  4340  000012                     __ptext9:
  4341                           	opt stack 0
  4342  000012                     __doprnt:
  4343                           	opt stack 21
  4344                           
  4345                           ;doprnt.c: 499: signed char c;
  4346                           ;doprnt.c: 501: int width;
  4347                           ;doprnt.c: 506: signed char prec;
  4348                           ;doprnt.c: 508: unsigned char flag;
  4349                           ;doprnt.c: 523: union {
  4350                           ;doprnt.c: 524: unsigned long vd;
  4351                           ;doprnt.c: 525: double integ;
  4352                           ;doprnt.c: 526: } tmpval;
  4353                           ;doprnt.c: 528: unsigned int val;
  4354                           ;doprnt.c: 529: unsigned len;
  4355                           ;doprnt.c: 530: const char * cp;
  4356                           ;doprnt.c: 536: while(c = *f++) {
  4357                           
  4358                           ;incstack = 0
  4359  000012  EFA2  F004         	goto	l7656
  4360  000016                     l7450:
  4361                           
  4362                           ;doprnt.c: 538: if(c != '%')
  4363  000016  0E25               	movlw	37
  4364  000018  0100               	movlb	0	; () banked
  4365  00001A  19A1               	xorwf	__doprnt@c& (0+255),w,b
  4366  00001C  B4D8               	btfsc	status,2,c
  4367  00001E  D03C               	goto	l7460
  4368                           
  4369                           ; BSR set to: 0
  4370                           ;doprnt.c: 540: {
  4371                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4372  000020  0100               	movlb	0	; () banked
  4373  000022  EE20 F002          	lfsr	2,2
  4374  000026  518C               	movf	__doprnt@pb& (0+255),w,b
  4375  000028  26D9               	addwf	fsr2l,f,c
  4376  00002A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4377  00002C  22DA               	addwfc	fsr2h,f,c
  4378  00002E  50DE               	movf	postinc2,w,c
  4379  000030  10DE               	iorwf	postinc2,w,c
  4380  000032  B4D8               	btfsc	status,2,c
  4381  000034  D01A               	goto	l7456
  4382                           
  4383                           ; BSR set to: 0
  4384  000036  0100               	movlb	0	; () banked
  4385  000038  EE20 F002          	lfsr	2,2
  4386  00003C  518C               	movf	__doprnt@pb& (0+255),w,b
  4387  00003E  26D9               	addwf	fsr2l,f,c
  4388  000040  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4389  000042  22DA               	addwfc	fsr2h,f,c
  4390  000044  CFDE F092          	movff	postinc2,??__doprnt
  4391  000048  CFDD F093          	movff	postdec2,??__doprnt+1
  4392  00004C  D802               	call	u11448
  4393  00004E  EFA2  F004         	goto	l7656
  4394  000052                     u11448:
  4395  000052  0005               	push	
  4396  000054  6EFA               	movwf	pclath,c
  4397  000056  0100               	movlb	0	; () banked
  4398  000058  5192               	movf	??__doprnt& (0+255),w,b
  4399  00005A  6EFD               	movwf	tosl,c
  4400  00005C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4401  00005E  6EFE               	movwf	tosh,c
  4402  000060  6AFF               	clrf	tosu,c
  4403  000062  50FA               	movf	pclath,w,c
  4404  000064  0100               	movlb	0	; () banked
  4405  000066  51A1               	movf	__doprnt@c& (0+255),w,b
  4406  000068  0012               	return		;indir
  4407  00006A                     l7456:
  4408  00006A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4409  00006E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4410  000072  CFDE F092          	movff	postinc2,??__doprnt
  4411  000076  CFDD F093          	movff	postdec2,??__doprnt+1
  4412  00007A  C092  FFD9         	movff	??__doprnt,fsr2l
  4413  00007E  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4414  000082  C0A1  FFDF         	movff	__doprnt@c,indf2
  4415  000086  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4416  00008A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4417  00008E  2ADE               	incf	postinc2,f,c
  4418  000090  0E00               	movlw	0
  4419  000092  22DD               	addwfc	postdec2,f,c
  4420                           
  4421                           ;doprnt.c: 542: continue;
  4422  000094  EFA2  F004         	goto	l7656
  4423  000098                     l7460:
  4424                           
  4425                           ;doprnt.c: 543: }
  4426                           ;doprnt.c: 546: width = 0;
  4427  000098  0E00               	movlw	0
  4428  00009A  0100               	movlb	0	; () banked
  4429  00009C  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  4430  00009E  0E00               	movlw	0
  4431  0000A0  6F9F               	movwf	__doprnt@width& (0+255),b
  4432                           
  4433                           ;doprnt.c: 548: flag = 0;
  4434  0000A2  0E00               	movlw	0
  4435  0000A4  0100               	movlb	0	; () banked
  4436  0000A6  6F9E               	movwf	__doprnt@flag& (0+255),b
  4437                           
  4438                           ; BSR set to: 0
  4439                           ;doprnt.c: 551: switch(*f) {
  4440                           
  4441                           ;doprnt.c: 550: for(;;) {
  4442  0000A8  D005               	goto	l7466
  4443  0000AA                     l7462:
  4444                           
  4445                           ;doprnt.c: 580: flag |= 0x04;
  4446  0000AA  0100               	movlb	0	; () banked
  4447  0000AC  859E               	bsf	__doprnt@flag& (0+255),2,b
  4448                           
  4449                           ;doprnt.c: 581: f++;
  4450  0000AE  0100               	movlb	0	; () banked
  4451  0000B0  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  4452  0000B2  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  4453  0000B4                     l7466:
  4454  0000B4  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4455  0000B8  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4456  0000BC  0E00               	movlw	low (__mediumconst shr (0+16))
  4457  0000BE  6EF8               	movwf	tblptru,c
  4458  0000C0  0E0F               	movlw	(high __ramtop+-1)
  4459  0000C2  64F7               	cpfsgt	tblptrh,c
  4460  0000C4  D003               	bra	u11457
  4461  0000C6  0008               	tblrd		*
  4462  0000C8  50F5               	movf	tablat,w,c
  4463  0000CA  D005               	bra	u11450
  4464  0000CC                     u11457:
  4465  0000CC  CFF6 FFE9          	movff	tblptrl,fsr0l
  4466  0000D0  CFF7 FFEA          	movff	tblptrh,fsr0h
  4467  0000D4  50EF               	movf	indf0,w,c
  4468  0000D6                     u11450:
  4469                           
  4470                           ; Switch size 1, requested type "space"
  4471                           ; Number of cases is 1, Range of values is 48 to 48
  4472                           ; switch strategies available:
  4473                           ; Name         Instructions Cycles
  4474                           ; simple_byte            4     3 (average)
  4475                           ;	Chosen strategy is simple_byte
  4476  0000D6  0A30               	xorlw	48	; case 48
  4477  0000D8  B4D8               	btfsc	status,2,c
  4478  0000DA  D7E7               	goto	l7462
  4479                           
  4480                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4481                           
  4482                           ;doprnt.c: 586: }
  4483                           
  4484                           ;doprnt.c: 585: break;
  4485  0000DC  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4486  0000E0  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4487  0000E4  0E00               	movlw	low (__mediumconst shr (0+16))
  4488  0000E6  6EF8               	movwf	tblptru,c
  4489  0000E8  0E0F               	movlw	(high __ramtop+-1)
  4490  0000EA  64F7               	cpfsgt	tblptrh,c
  4491  0000EC  D003               	bra	u11467
  4492  0000EE  0008               	tblrd		*
  4493  0000F0  50F5               	movf	tablat,w,c
  4494  0000F2  D005               	bra	u11460
  4495  0000F4                     u11467:
  4496  0000F4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4497  0000F8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4498  0000FC  50EF               	movf	indf0,w,c
  4499  0000FE                     u11460:
  4500  0000FE  EC4C  F018         	call	_isdigit
  4501  000102  A0D8               	btfss	status,0,c
  4502  000104  D18A               	goto	l7532
  4503                           
  4504                           ;doprnt.c: 598: width = 0;
  4505  000106  0E00               	movlw	0
  4506  000108  0100               	movlb	0	; () banked
  4507  00010A  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  4508  00010C  0E00               	movlw	0
  4509  00010E  6F9F               	movwf	__doprnt@width& (0+255),b
  4510  000110                     l7472:
  4511                           
  4512                           ;doprnt.c: 600: width *= 10;
  4513  000110  C09F  F080         	movff	__doprnt@width,___wmul@multiplier
  4514  000114  C0A0  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
  4515  000118  0E00               	movlw	0
  4516  00011A  0100               	movlb	0	; () banked
  4517  00011C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4518  00011E  0E0A               	movlw	10
  4519  000120  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4520  000122  ECD0  F017         	call	___wmul	;wreg free
  4521  000126  C080  F09F         	movff	?___wmul,__doprnt@width
  4522  00012A  C081  F0A0         	movff	?___wmul+1,__doprnt@width+1
  4523                           
  4524                           ;doprnt.c: 601: width += *f++ - '0';
  4525  00012E  0ED0               	movlw	208
  4526  000130  0100               	movlb	0	; () banked
  4527  000132  6F92               	movwf	??__doprnt& (0+255),b
  4528  000134  0EFF               	movlw	255
  4529  000136  0100               	movlb	0	; () banked
  4530  000138  6F93               	movwf	(??__doprnt+1)& (0+255),b
  4531  00013A  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4532  00013E  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4533  000142  0E00               	movlw	low (__mediumconst shr (0+16))
  4534  000144  6EF8               	movwf	tblptru,c
  4535  000146  0E0F               	movlw	(high __ramtop+-1)
  4536  000148  64F7               	cpfsgt	tblptrh,c
  4537  00014A  D003               	bra	u11487
  4538  00014C  0008               	tblrd		*
  4539  00014E  50F5               	movf	tablat,w,c
  4540  000150  D005               	bra	u11480
  4541  000152                     u11487:
  4542  000152  CFF6 FFE9          	movff	tblptrl,fsr0l
  4543  000156  CFF7 FFEA          	movff	tblptrh,fsr0h
  4544  00015A  50EF               	movf	indf0,w,c
  4545  00015C                     u11480:
  4546  00015C  0100               	movlb	0	; () banked
  4547  00015E  6F94               	movwf	(??__doprnt+2)& (0+255),b
  4548  000160  6B95               	clrf	(??__doprnt+3)& (0+255),b
  4549  000162  0100               	movlb	0	; () banked
  4550  000164  5192               	movf	??__doprnt& (0+255),w,b
  4551  000166  0100               	movlb	0	; () banked
  4552  000168  2794               	addwf	(??__doprnt+2)& (0+255),f,b
  4553  00016A  0100               	movlb	0	; () banked
  4554  00016C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4555  00016E  0100               	movlb	0	; () banked
  4556  000170  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
  4557  000172  0100               	movlb	0	; () banked
  4558  000174  5194               	movf	(??__doprnt+2)& (0+255),w,b
  4559  000176  0100               	movlb	0	; () banked
  4560  000178  279F               	addwf	__doprnt@width& (0+255),f,b
  4561  00017A  0100               	movlb	0	; () banked
  4562  00017C  5195               	movf	(??__doprnt+3)& (0+255),w,b
  4563  00017E  0100               	movlb	0	; () banked
  4564  000180  23A0               	addwfc	(__doprnt@width+1)& (0+255),f,b
  4565                           
  4566                           ; BSR set to: 0
  4567  000182  0100               	movlb	0	; () banked
  4568  000184  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  4569  000186  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4573  000188  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4574  00018C  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4575  000190  0E00               	movlw	low (__mediumconst shr (0+16))
  4576  000192  6EF8               	movwf	tblptru,c
  4577  000194  0E0F               	movlw	(high __ramtop+-1)
  4578  000196  64F7               	cpfsgt	tblptrh,c
  4579  000198  D003               	bra	u11497
  4580  00019A  0008               	tblrd		*
  4581  00019C  50F5               	movf	tablat,w,c
  4582  00019E  D005               	bra	u11490
  4583  0001A0                     u11497:
  4584  0001A0  CFF6 FFE9          	movff	tblptrl,fsr0l
  4585  0001A4  CFF7 FFEA          	movff	tblptrh,fsr0h
  4586  0001A8  50EF               	movf	indf0,w,c
  4587  0001AA                     u11490:
  4588  0001AA  EC4C  F018         	call	_isdigit
  4589  0001AE  A0D8               	btfss	status,0,c
  4590  0001B0  D134               	goto	l7532
  4591  0001B2  D7AE               	goto	l7472
  4592  0001B4                     l7480:
  4593                           
  4594                           ;doprnt.c: 721: flag |= 0x80;
  4595  0001B4  0100               	movlb	0	; () banked
  4596  0001B6  8F9E               	bsf	__doprnt@flag& (0+255),7,b
  4597                           
  4598                           ;doprnt.c: 723: break;
  4599  0001B8  D163               	goto	l491
  4600  0001BA                     l7482:
  4601                           
  4602                           ; BSR set to: 0
  4603                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4604  0001BA  C090  FFD9         	movff	__doprnt@ap,fsr2l
  4605  0001BE  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  4606  0001C2  CFDF F092          	movff	indf2,??__doprnt
  4607  0001C6  0E02               	movlw	2
  4608  0001C8  26DE               	addwf	postinc2,f,c
  4609  0001CA  CFDF F093          	movff	indf2,??__doprnt+1
  4610  0001CE  0E00               	movlw	0
  4611  0001D0  22DD               	addwfc	postdec2,f,c
  4612  0001D2  C092  FFD9         	movff	??__doprnt,fsr2l
  4613  0001D6  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4614  0001DA  CFDE F09A          	movff	postinc2,__doprnt@cp
  4615  0001DE  CFDD F09B          	movff	postdec2,__doprnt@cp+1
  4616                           
  4617                           ; BSR set to: 0
  4618                           ;doprnt.c: 740: if(!cp)
  4619  0001E2  0100               	movlb	0	; () banked
  4620  0001E4  519A               	movf	__doprnt@cp& (0+255),w,b
  4621  0001E6  0100               	movlb	0	; () banked
  4622  0001E8  119B               	iorwf	(__doprnt@cp+1)& (0+255),w,b
  4623  0001EA  A4D8               	btfss	status,2,c
  4624  0001EC  D006               	goto	l7488
  4625                           
  4626                           ; BSR set to: 0
  4627                           ;doprnt.c: 741: cp = "(null)";
  4628  0001EE  0EEC               	movlw	low STR_18
  4629  0001F0  0100               	movlb	0	; () banked
  4630  0001F2  6F9A               	movwf	__doprnt@cp& (0+255),b
  4631  0001F4  0EFF               	movlw	high STR_18
  4632  0001F6  0100               	movlb	0	; () banked
  4633  0001F8  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  4634  0001FA                     l7488:
  4635                           
  4636                           ; BSR set to: 0
  4637                           ;doprnt.c: 745: len = 0;
  4638  0001FA  0E00               	movlw	0
  4639  0001FC  0100               	movlb	0	; () banked
  4640  0001FE  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  4641  000200  0E00               	movlw	0
  4642  000202  6F98               	movwf	__doprnt@len& (0+255),b
  4643                           
  4644                           ;doprnt.c: 746: while(cp[len])
  4645  000204  D003               	goto	l7492
  4646  000206                     l7490:
  4647                           
  4648                           ;doprnt.c: 747: len++;
  4649  000206  0100               	movlb	0	; () banked
  4650  000208  4B98               	infsnz	__doprnt@len& (0+255),f,b
  4651  00020A  2B99               	incf	(__doprnt@len+1)& (0+255),f,b
  4652  00020C                     l7492:
  4653                           
  4654                           ; BSR set to: 0
  4655  00020C  0100               	movlb	0	; () banked
  4656  00020E  5198               	movf	__doprnt@len& (0+255),w,b
  4657  000210  0100               	movlb	0	; () banked
  4658  000212  259A               	addwf	__doprnt@cp& (0+255),w,b
  4659  000214  0100               	movlb	0	; () banked
  4660  000216  6F92               	movwf	??__doprnt& (0+255),b
  4661  000218  0100               	movlb	0	; () banked
  4662  00021A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  4663  00021C  0100               	movlb	0	; () banked
  4664  00021E  219B               	addwfc	(__doprnt@cp+1)& (0+255),w,b
  4665  000220  0100               	movlb	0	; () banked
  4666  000222  6F93               	movwf	(??__doprnt+1)& (0+255),b
  4667  000224  C092  FFF6         	movff	??__doprnt,tblptrl
  4668  000228  C093  FFF7         	movff	??__doprnt+1,tblptrh
  4669  00022C  0E00               	movlw	low (__mediumconst shr (0+16))
  4670  00022E  6EF8               	movwf	tblptru,c
  4671  000230  0E0F               	movlw	(high __ramtop+-1)
  4672  000232  64F7               	cpfsgt	tblptrh,c
  4673  000234  D003               	bra	u11527
  4674  000236  0008               	tblrd		*
  4675  000238  50F5               	movf	tablat,w,c
  4676  00023A  D005               	bra	u11520
  4677  00023C                     u11527:
  4678  00023C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4679  000240  CFF7 FFEA          	movff	tblptrh,fsr0h
  4680  000244  50EF               	movf	indf0,w,c
  4681  000246                     u11520:
  4682  000246  0900               	iorlw	0
  4683  000248  A4D8               	btfss	status,2,c
  4684  00024A  D7DD               	goto	l7490
  4685  00024C                     l7494:
  4686                           
  4687                           ;doprnt.c: 757: if(width > len)
  4688  00024C  0100               	movlb	0	; () banked
  4689  00024E  519F               	movf	__doprnt@width& (0+255),w,b
  4690  000250  0100               	movlb	0	; () banked
  4691  000252  5D98               	subwf	__doprnt@len& (0+255),w,b
  4692  000254  0100               	movlb	0	; () banked
  4693  000256  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  4694  000258  0100               	movlb	0	; () banked
  4695  00025A  5999               	subwfb	(__doprnt@len+1)& (0+255),w,b
  4696  00025C  B0D8               	btfsc	status,0,c
  4697  00025E  D009               	goto	l7498
  4698                           
  4699                           ; BSR set to: 0
  4700                           ;doprnt.c: 758: width -= len;
  4701  000260  0100               	movlb	0	; () banked
  4702  000262  5198               	movf	__doprnt@len& (0+255),w,b
  4703  000264  0100               	movlb	0	; () banked
  4704  000266  5F9F               	subwf	__doprnt@width& (0+255),f,b
  4705  000268  0100               	movlb	0	; () banked
  4706  00026A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  4707  00026C  0100               	movlb	0	; () banked
  4708  00026E  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  4709  000270  D03E               	goto	l7508
  4710  000272                     l7498:
  4711                           
  4712                           ; BSR set to: 0
  4713                           ;doprnt.c: 759: else
  4714                           ;doprnt.c: 760: width = 0;
  4715  000272  0E00               	movlw	0
  4716  000274  0100               	movlb	0	; () banked
  4717  000276  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  4718  000278  0E00               	movlw	0
  4719  00027A  6F9F               	movwf	__doprnt@width& (0+255),b
  4720                           
  4721                           ; BSR set to: 0
  4722                           ;doprnt.c: 764: while(width--)
  4723  00027C  D038               	goto	l7508
  4724  00027E                     l7500:
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  4728  00027E  0100               	movlb	0	; () banked
  4729  000280  EE20 F002          	lfsr	2,2
  4730  000284  518C               	movf	__doprnt@pb& (0+255),w,b
  4731  000286  26D9               	addwf	fsr2l,f,c
  4732  000288  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4733  00028A  22DA               	addwfc	fsr2h,f,c
  4734  00028C  50DE               	movf	postinc2,w,c
  4735  00028E  10DE               	iorwf	postinc2,w,c
  4736  000290  B4D8               	btfsc	status,2,c
  4737  000292  D018               	goto	l7504
  4738                           
  4739                           ; BSR set to: 0
  4740  000294  0100               	movlb	0	; () banked
  4741  000296  EE20 F002          	lfsr	2,2
  4742  00029A  518C               	movf	__doprnt@pb& (0+255),w,b
  4743  00029C  26D9               	addwf	fsr2l,f,c
  4744  00029E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4745  0002A0  22DA               	addwfc	fsr2h,f,c
  4746  0002A2  CFDE F092          	movff	postinc2,??__doprnt
  4747  0002A6  CFDD F093          	movff	postdec2,??__doprnt+1
  4748  0002AA  D801               	call	u11568
  4749  0002AC  D020               	goto	l7508
  4750  0002AE                     u11568:
  4751  0002AE  0005               	push	
  4752  0002B0  6EFA               	movwf	pclath,c
  4753  0002B2  0100               	movlb	0	; () banked
  4754  0002B4  5192               	movf	??__doprnt& (0+255),w,b
  4755  0002B6  6EFD               	movwf	tosl,c
  4756  0002B8  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4757  0002BA  6EFE               	movwf	tosh,c
  4758  0002BC  6AFF               	clrf	tosu,c
  4759  0002BE  50FA               	movf	pclath,w,c
  4760  0002C0  0E20               	movlw	32
  4761  0002C2  0012               	return		;indir
  4762  0002C4                     l7504:
  4763  0002C4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4764  0002C8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4765  0002CC  CFDE F092          	movff	postinc2,??__doprnt
  4766  0002D0  CFDD F093          	movff	postdec2,??__doprnt+1
  4767  0002D4  C092  FFD9         	movff	??__doprnt,fsr2l
  4768  0002D8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4769  0002DC  0E20               	movlw	32
  4770  0002DE  6EDF               	movwf	indf2,c
  4771  0002E0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4772  0002E4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4773  0002E8  2ADE               	incf	postinc2,f,c
  4774  0002EA  0E00               	movlw	0
  4775  0002EC  22DD               	addwfc	postdec2,f,c
  4776  0002EE                     l7508:
  4777  0002EE  0100               	movlb	0	; () banked
  4778  0002F0  079F               	decf	__doprnt@width& (0+255),f,b
  4779  0002F2  A0D8               	btfss	status,0,c
  4780  0002F4  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  4781  0002F6  0100               	movlb	0	; () banked
  4782  0002F8  299F               	incf	__doprnt@width& (0+255),w,b
  4783  0002FA  E1C1               	bnz	l7500
  4784  0002FC  0100               	movlb	0	; () banked
  4785  0002FE  29A0               	incf	(__doprnt@width+1)& (0+255),w,b
  4786  000300  B4D8               	btfsc	status,2,c
  4787  000302  D060               	goto	l7522
  4788  000304  D7BC               	goto	l7500
  4789  000306                     l7510:
  4790                           
  4791                           ; BSR set to: 0
  4792                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  4793  000306  0100               	movlb	0	; () banked
  4794  000308  EE20 F002          	lfsr	2,2
  4795  00030C  518C               	movf	__doprnt@pb& (0+255),w,b
  4796  00030E  26D9               	addwf	fsr2l,f,c
  4797  000310  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4798  000312  22DA               	addwfc	fsr2h,f,c
  4799  000314  50DE               	movf	postinc2,w,c
  4800  000316  10DE               	iorwf	postinc2,w,c
  4801  000318  B4D8               	btfsc	status,2,c
  4802  00031A  D02C               	goto	l7516
  4803                           
  4804                           ; BSR set to: 0
  4805  00031C  0100               	movlb	0	; () banked
  4806  00031E  EE20 F002          	lfsr	2,2
  4807  000322  518C               	movf	__doprnt@pb& (0+255),w,b
  4808  000324  26D9               	addwf	fsr2l,f,c
  4809  000326  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4810  000328  22DA               	addwfc	fsr2h,f,c
  4811  00032A  CFDE F092          	movff	postinc2,??__doprnt
  4812  00032E  CFDD F093          	movff	postdec2,??__doprnt+1
  4813  000332  D801               	call	u11598
  4814  000334  D01B               	goto	l7514
  4815  000336                     u11598:
  4816  000336  0005               	push	
  4817  000338  6EFA               	movwf	pclath,c
  4818  00033A  0100               	movlb	0	; () banked
  4819  00033C  5192               	movf	??__doprnt& (0+255),w,b
  4820  00033E  6EFD               	movwf	tosl,c
  4821  000340  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4822  000342  6EFE               	movwf	tosh,c
  4823  000344  6AFF               	clrf	tosu,c
  4824  000346  50FA               	movf	pclath,w,c
  4825  000348  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  4826  00034C  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  4827  000350  0E00               	movlw	low (__mediumconst shr (0+16))
  4828  000352  6EF8               	movwf	tblptru,c
  4829  000354  0E0F               	movlw	(high __ramtop+-1)
  4830  000356  64F7               	cpfsgt	tblptrh,c
  4831  000358  D003               	bra	u11607
  4832  00035A  0008               	tblrd		*
  4833  00035C  50F5               	movf	tablat,w,c
  4834  00035E  D005               	bra	u11600
  4835  000360                     u11607:
  4836  000360  CFF6 FFE9          	movff	tblptrl,fsr0l
  4837  000364  CFF7 FFEA          	movff	tblptrh,fsr0h
  4838  000368  50EF               	movf	indf0,w,c
  4839  00036A                     u11600:
  4840  00036A  0012               	return		;indir
  4841  00036C                     l7514:
  4842  00036C  0100               	movlb	0	; () banked
  4843  00036E  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  4844  000370  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  4845  000372  D028               	goto	l7522
  4846  000374                     l7516:
  4847                           
  4848                           ; BSR set to: 0
  4849  000374  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  4850  000378  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  4851  00037C  0E00               	movlw	low (__mediumconst shr (0+16))
  4852  00037E  6EF8               	movwf	tblptru,c
  4853  000380  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4854  000384  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4855  000388  CFDE F092          	movff	postinc2,??__doprnt
  4856  00038C  CFDD F093          	movff	postdec2,??__doprnt+1
  4857  000390  C092  FFD9         	movff	??__doprnt,fsr2l
  4858  000394  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4859  000398  0E0F               	movlw	(high __ramtop+-1)
  4860  00039A  64F7               	cpfsgt	tblptrh,c
  4861  00039C  D003               	bra	u11617
  4862  00039E  0008               	tblrd		*
  4863  0003A0  50F5               	movf	tablat,w,c
  4864  0003A2  D005               	bra	u11610
  4865  0003A4                     u11617:
  4866  0003A4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4867  0003A8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4868  0003AC  50EF               	movf	indf0,w,c
  4869  0003AE                     u11610:
  4870  0003AE  6EDF               	movwf	indf2,c
  4871  0003B0  0100               	movlb	0	; () banked
  4872  0003B2  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  4873  0003B4  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  4874                           
  4875                           ; BSR set to: 0
  4876  0003B6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4877  0003BA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4878  0003BE  2ADE               	incf	postinc2,f,c
  4879  0003C0  0E00               	movlw	0
  4880  0003C2  22DD               	addwfc	postdec2,f,c
  4881  0003C4                     l7522:
  4882                           
  4883                           ; BSR set to: 0
  4884  0003C4  0100               	movlb	0	; () banked
  4885  0003C6  0798               	decf	__doprnt@len& (0+255),f,b
  4886  0003C8  A0D8               	btfss	status,0,c
  4887  0003CA  0799               	decf	(__doprnt@len+1)& (0+255),f,b
  4888  0003CC  0100               	movlb	0	; () banked
  4889  0003CE  2998               	incf	__doprnt@len& (0+255),w,b
  4890  0003D0  E19A               	bnz	l7510
  4891  0003D2  0100               	movlb	0	; () banked
  4892  0003D4  2999               	incf	(__doprnt@len+1)& (0+255),w,b
  4893  0003D6  B4D8               	btfsc	status,2,c
  4894  0003D8  D2B5               	goto	l7656
  4895  0003DA  D795               	goto	l7510
  4896  0003DC                     l7524:
  4897                           
  4898                           ; BSR set to: 0
  4899                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4900  0003DC  C090  FFD9         	movff	__doprnt@ap,fsr2l
  4901  0003E0  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  4902  0003E4  CFDF F092          	movff	indf2,??__doprnt
  4903  0003E8  0E02               	movlw	2
  4904  0003EA  26DE               	addwf	postinc2,f,c
  4905  0003EC  CFDF F093          	movff	indf2,??__doprnt+1
  4906  0003F0  0E00               	movlw	0
  4907  0003F2  22DD               	addwfc	postdec2,f,c
  4908  0003F4  C092  FFD9         	movff	??__doprnt,fsr2l
  4909  0003F8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4910  0003FC  50DF               	movf	indf2,w,c
  4911  0003FE  0100               	movlb	0	; () banked
  4912  000400  6FA1               	movwf	__doprnt@c& (0+255),b
  4913  000402                     l7526:
  4914                           
  4915                           ; BSR set to: 0
  4916                           ;doprnt.c: 805: cp = (char *)&c;
  4917  000402  0EA1               	movlw	low __doprnt@c
  4918  000404  0100               	movlb	0	; () banked
  4919  000406  6F9A               	movwf	__doprnt@cp& (0+255),b
  4920  000408  0E00               	movlw	high __doprnt@c
  4921  00040A  0100               	movlb	0	; () banked
  4922  00040C  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;doprnt.c: 806: len = 1;
  4926  00040E  0E00               	movlw	0
  4927  000410  0100               	movlb	0	; () banked
  4928  000412  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  4929  000414  0E01               	movlw	1
  4930  000416  6F98               	movwf	__doprnt@len& (0+255),b
  4931                           
  4932                           ;doprnt.c: 807: goto dostring;
  4933  000418  D719               	goto	l7494
  4934  00041A                     l7532:
  4935  00041A  0100               	movlb	0	; () banked
  4936  00041C  518E               	movf	__doprnt@f& (0+255),w,b
  4937  00041E  0100               	movlb	0	; () banked
  4938  000420  6F92               	movwf	??__doprnt& (0+255),b
  4939  000422  0100               	movlb	0	; () banked
  4940  000424  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  4941  000426  0100               	movlb	0	; () banked
  4942  000428  6F93               	movwf	(??__doprnt+1)& (0+255),b
  4943  00042A  0100               	movlb	0	; () banked
  4944  00042C  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  4945  00042E  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  4946  000430  C092  FFF6         	movff	??__doprnt,tblptrl
  4947  000434  C093  FFF7         	movff	??__doprnt+1,tblptrh
  4948  000438  0E00               	movlw	low (__mediumconst shr (0+16))
  4949  00043A  6EF8               	movwf	tblptru,c
  4950  00043C  0E0F               	movlw	(high __ramtop+-1)
  4951  00043E  64F7               	cpfsgt	tblptrh,c
  4952  000440  D003               	bra	u11637
  4953  000442  0008               	tblrd		*
  4954  000444  50F5               	movf	tablat,w,c
  4955  000446  D005               	bra	u11630
  4956  000448                     u11637:
  4957  000448  CFF6 FFE9          	movff	tblptrl,fsr0l
  4958  00044C  CFF7 FFEA          	movff	tblptrh,fsr0h
  4959  000450  50EF               	movf	indf0,w,c
  4960  000452                     u11630:
  4961  000452  0100               	movlb	0	; () banked
  4962  000454  6FA1               	movwf	__doprnt@c& (0+255),b
  4963  000456  0100               	movlb	0	; () banked
  4964  000458  51A1               	movf	__doprnt@c& (0+255),w,b
  4965                           
  4966                           ; Switch size 1, requested type "space"
  4967                           ; Number of cases is 6, Range of values is 0 to 120
  4968                           ; switch strategies available:
  4969                           ; Name         Instructions Cycles
  4970                           ; simple_byte           19    10 (average)
  4971                           ;	Chosen strategy is simple_byte
  4972  00045A  0A00               	xorlw	0	; case 0
  4973  00045C  B4D8               	btfsc	status,2,c
  4974  00045E  D295               	goto	l7658
  4975  000460  0A63               	xorlw	99	; case 99
  4976  000462  B4D8               	btfsc	status,2,c
  4977  000464  D7BB               	goto	l7524
  4978  000466  0A07               	xorlw	7	; case 100
  4979  000468  B4D8               	btfsc	status,2,c
  4980  00046A  D00A               	goto	l491
  4981  00046C  0A0D               	xorlw	13	; case 105
  4982  00046E  B4D8               	btfsc	status,2,c
  4983  000470  D007               	goto	l491
  4984  000472  0A1A               	xorlw	26	; case 115
  4985  000474  B4D8               	btfsc	status,2,c
  4986  000476  D6A1               	goto	l7482
  4987  000478  0A0B               	xorlw	11	; case 120
  4988  00047A  B4D8               	btfsc	status,2,c
  4989  00047C  D69B               	goto	l7480
  4990  00047E  D7C1               	goto	l7526
  4991  000480                     l491:
  4992                           
  4993                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4994  000480  0100               	movlb	0	; () banked
  4995  000482  BF9E               	btfsc	__doprnt@flag& (0+255),7,b
  4996  000484  D020               	goto	l7542
  4997                           
  4998                           ; BSR set to: 0
  4999                           ;doprnt.c: 1253: {
  5000                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5001  000486  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5002  00048A  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5003  00048E  CFDF F092          	movff	indf2,??__doprnt
  5004  000492  0E02               	movlw	2
  5005  000494  26DE               	addwf	postinc2,f,c
  5006  000496  CFDF F093          	movff	indf2,??__doprnt+1
  5007  00049A  0E00               	movlw	0
  5008  00049C  22DD               	addwfc	postdec2,f,c
  5009  00049E  C092  FFD9         	movff	??__doprnt,fsr2l
  5010  0004A2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5011  0004A6  CFDE F09C          	movff	postinc2,__doprnt@val
  5012  0004AA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  5013                           
  5014                           ; BSR set to: 0
  5015                           ;doprnt.c: 1261: if((int)val < 0) {
  5016  0004AE  0100               	movlb	0	; () banked
  5017  0004B0  AF9D               	btfss	(__doprnt@val+1)& (0+255),7,b
  5018  0004B2  D060               	goto	l7574
  5019                           
  5020                           ; BSR set to: 0
  5021                           ;doprnt.c: 1262: flag |= 0x03;
  5022  0004B4  0E03               	movlw	3
  5023  0004B6  0100               	movlb	0	; () banked
  5024  0004B8  139E               	iorwf	__doprnt@flag& (0+255),f,b
  5025                           
  5026                           ; BSR set to: 0
  5027                           ;doprnt.c: 1263: val = -val;
  5028  0004BA  0100               	movlb	0	; () banked
  5029  0004BC  6D9C               	negf	__doprnt@val& (0+255),b
  5030  0004BE  1F9D               	comf	(__doprnt@val+1)& (0+255),f,b
  5031  0004C0  B0D8               	btfsc	status,0,c
  5032  0004C2  2B9D               	incf	(__doprnt@val+1)& (0+255),f,b
  5033                           
  5034                           ; BSR set to: 0
  5035                           ;doprnt.c: 1264: }
  5036                           ;doprnt.c: 1266: }
  5037  0004C4  D057               	goto	l7574
  5038  0004C6                     l7542:
  5039                           
  5040                           ; BSR set to: 0
  5041                           ;doprnt.c: 1268: else
  5042                           ;doprnt.c: 1273: {
  5043                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5044  0004C6  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5045  0004CA  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5046  0004CE  CFDF F092          	movff	indf2,??__doprnt
  5047  0004D2  0E02               	movlw	2
  5048  0004D4  26DE               	addwf	postinc2,f,c
  5049  0004D6  CFDF F093          	movff	indf2,??__doprnt+1
  5050  0004DA  0E00               	movlw	0
  5051  0004DC  22DD               	addwfc	postdec2,f,c
  5052  0004DE  C092  FFD9         	movff	??__doprnt,fsr2l
  5053  0004E2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5054  0004E6  CFDE F09C          	movff	postinc2,__doprnt@val
  5055  0004EA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  5056                           
  5057                           ; BSR set to: 0
  5058                           ;doprnt.c: 1287: }
  5059                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5060  0004EE  D042               	goto	l7574
  5061  0004F0                     l7544:
  5062                           
  5063                           ; BSR set to: 0
  5064                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5065  0004F0  0E01               	movlw	1
  5066  0004F2  0100               	movlb	0	; () banked
  5067  0004F4  6FA1               	movwf	__doprnt@c& (0+255),b
  5068  0004F6                     l7546:
  5069                           
  5070                           ; BSR set to: 0
  5071  0004F6  0E05               	movlw	5
  5072  0004F8  0100               	movlb	0	; () banked
  5073  0004FA  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5074  0004FC  B4D8               	btfsc	status,2,c
  5075  0004FE  D043               	goto	l7576
  5076                           
  5077                           ; BSR set to: 0
  5078                           ;doprnt.c: 1306: if(val < dpowers[c])
  5079                           
  5080                           ; BSR set to: 0
  5081                           
  5082                           ; BSR set to: 0
  5083  000500  0100               	movlb	0	; () banked
  5084  000502  51A1               	movf	__doprnt@c& (0+255),w,b
  5085  000504  0D02               	mullw	2
  5086  000506  0EE6               	movlw	low _dpowers
  5087  000508  24F3               	addwf	prodl,w,c
  5088  00050A  6EF6               	movwf	tblptrl,c
  5089  00050C  0EFE               	movlw	high _dpowers
  5090  00050E  20F4               	addwfc	prodh,w,c
  5091  000510  6EF7               	movwf	tblptrh,c
  5092  000512                     	if	1	;There are 3 active tblptr bytes
  5093  000512  6AF8               	clrf	tblptru,c
  5094  000514  0E00               	movlw	low (__mediumconst shr (0+16))
  5095  000516  22F8               	addwfc	tblptru,f,c
  5096  000518                     	endif
  5097  000518  0009               	tblrd		*+
  5098  00051A  50F5               	movf	tablat,w,c
  5099  00051C  0100               	movlb	0	; () banked
  5100  00051E  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5101  000520  0009               	tblrd		*+
  5102  000522  50F5               	movf	tablat,w,c
  5103  000524  0100               	movlb	0	; () banked
  5104  000526  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5105  000528  A0D8               	btfss	status,0,c
  5106  00052A  D02D               	goto	l7576
  5107                           
  5108                           ; BSR set to: 0
  5109                           
  5110                           ; BSR set to: 0
  5111                           
  5112                           ; BSR set to: 0
  5113                           ;doprnt.c: 1307: break;
  5114  00052C  0100               	movlb	0	; () banked
  5115  00052E  2BA1               	incf	__doprnt@c& (0+255),f,b
  5116  000530  D7E2               	goto	l7546
  5117  000532                     l7558:
  5118                           
  5119                           ; BSR set to: 0
  5120                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5121  000532  0E01               	movlw	1
  5122  000534  0100               	movlb	0	; () banked
  5123  000536  6FA1               	movwf	__doprnt@c& (0+255),b
  5124  000538                     l7560:
  5125                           
  5126                           ; BSR set to: 0
  5127  000538  0E04               	movlw	4
  5128  00053A  0100               	movlb	0	; () banked
  5129  00053C  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5130  00053E  B4D8               	btfsc	status,2,c
  5131  000540  D022               	goto	l7576
  5132                           
  5133                           ; BSR set to: 0
  5134                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5135                           
  5136                           ; BSR set to: 0
  5137                           
  5138                           ; BSR set to: 0
  5139  000542  0100               	movlb	0	; () banked
  5140  000544  51A1               	movf	__doprnt@c& (0+255),w,b
  5141  000546  0D02               	mullw	2
  5142  000548  0EF0               	movlw	low _hexpowers
  5143  00054A  24F3               	addwf	prodl,w,c
  5144  00054C  6EF6               	movwf	tblptrl,c
  5145  00054E  0EFE               	movlw	high _hexpowers
  5146  000550  20F4               	addwfc	prodh,w,c
  5147  000552  6EF7               	movwf	tblptrh,c
  5148  000554                     	if	1	;There are 3 active tblptr bytes
  5149  000554  6AF8               	clrf	tblptru,c
  5150  000556  0E00               	movlw	low (__mediumconst shr (0+16))
  5151  000558  22F8               	addwfc	tblptru,f,c
  5152  00055A                     	endif
  5153  00055A  0009               	tblrd		*+
  5154  00055C  50F5               	movf	tablat,w,c
  5155  00055E  0100               	movlb	0	; () banked
  5156  000560  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5157  000562  0009               	tblrd		*+
  5158  000564  50F5               	movf	tablat,w,c
  5159  000566  0100               	movlb	0	; () banked
  5160  000568  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5161  00056A  A0D8               	btfss	status,0,c
  5162  00056C  D00C               	goto	l7576
  5163                           
  5164                           ; BSR set to: 0
  5165                           
  5166                           ; BSR set to: 0
  5167                           
  5168                           ; BSR set to: 0
  5169                           ;doprnt.c: 1318: break;
  5170  00056E  0100               	movlb	0	; () banked
  5171  000570  2BA1               	incf	__doprnt@c& (0+255),f,b
  5172  000572  D7E2               	goto	l7560
  5173  000574                     l7574:
  5174                           
  5175                           ; BSR set to: 0
  5176  000574  0100               	movlb	0	; () banked
  5177  000576  519E               	movf	__doprnt@flag& (0+255),w,b
  5178  000578  0B80               	andlw	128
  5179                           
  5180                           ; Switch size 1, requested type "space"
  5181                           ; Number of cases is 2, Range of values is 0 to 128
  5182                           ; switch strategies available:
  5183                           ; Name         Instructions Cycles
  5184                           ; simple_byte            7     4 (average)
  5185                           ;	Chosen strategy is simple_byte
  5186  00057A  0A00               	xorlw	0	; case 0
  5187  00057C  B4D8               	btfsc	status,2,c
  5188  00057E  D7B8               	goto	l7544
  5189  000580  0A80               	xorlw	128	; case 128
  5190  000582  B4D8               	btfsc	status,2,c
  5191  000584  D7D6               	goto	l7558
  5192  000586                     l7576:
  5193                           
  5194                           ; BSR set to: 0
  5195                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5196  000586  0100               	movlb	0	; () banked
  5197  000588  519F               	movf	__doprnt@width& (0+255),w,b
  5198  00058A  0100               	movlb	0	; () banked
  5199  00058C  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5200  00058E  B4D8               	btfsc	status,2,c
  5201  000590  D00B               	goto	l7582
  5202                           
  5203                           ; BSR set to: 0
  5204  000592  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5205  000596  0E03               	movlw	3
  5206  000598  0100               	movlb	0	; () banked
  5207  00059A  1792               	andwf	??__doprnt& (0+255),f,b
  5208  00059C  B4D8               	btfsc	status,2,c
  5209  00059E  D004               	goto	l7582
  5210                           
  5211                           ; BSR set to: 0
  5212                           ;doprnt.c: 1346: width--;
  5213  0005A0  0100               	movlb	0	; () banked
  5214  0005A2  079F               	decf	__doprnt@width& (0+255),f,b
  5215  0005A4  A0D8               	btfss	status,0,c
  5216  0005A6  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5217  0005A8                     l7582:
  5218                           
  5219                           ; BSR set to: 0
  5220                           ;doprnt.c: 1381: if(width > c)
  5221  0005A8  0E80               	movlw	128
  5222  0005AA  0100               	movlb	0	; () banked
  5223  0005AC  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  5224  0005AE  0E7F               	movlw	127
  5225  0005B0  0100               	movlb	0	; () banked
  5226  0005B2  6F92               	movwf	??__doprnt& (0+255),b
  5227  0005B4  0100               	movlb	0	; () banked
  5228  0005B6  519F               	movf	__doprnt@width& (0+255),w,b
  5229  0005B8  0100               	movlb	0	; () banked
  5230  0005BA  5DA1               	subwf	__doprnt@c& (0+255),w,b
  5231  0005BC  0100               	movlb	0	; () banked
  5232  0005BE  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  5233  0005C0  0A80               	xorlw	128
  5234  0005C2  0100               	movlb	0	; () banked
  5235  0005C4  5992               	subwfb	??__doprnt& (0+255),w,b
  5236  0005C6  B0D8               	btfsc	status,0,c
  5237  0005C8  D00B               	goto	l7586
  5238                           
  5239                           ; BSR set to: 0
  5240                           ;doprnt.c: 1382: width -= c;
  5241  0005CA  0100               	movlb	0	; () banked
  5242  0005CC  51A1               	movf	__doprnt@c& (0+255),w,b
  5243  0005CE  0100               	movlb	0	; () banked
  5244  0005D0  5F9F               	subwf	__doprnt@width& (0+255),f,b
  5245  0005D2  0E00               	movlw	0
  5246  0005D4  0100               	movlb	0	; () banked
  5247  0005D6  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  5248  0005D8  0EFF               	movlw	255
  5249  0005DA  0100               	movlb	0	; () banked
  5250  0005DC  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5251  0005DE  D005               	goto	l7588
  5252  0005E0                     l7586:
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;doprnt.c: 1383: else
  5256                           ;doprnt.c: 1384: width = 0;
  5257  0005E0  0E00               	movlw	0
  5258  0005E2  0100               	movlb	0	; () banked
  5259  0005E4  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5260  0005E6  0E00               	movlw	0
  5261  0005E8  6F9F               	movwf	__doprnt@width& (0+255),b
  5262  0005EA                     l7588:
  5263                           
  5264                           ; BSR set to: 0
  5265                           ;doprnt.c: 1387: if(flag & 0x04) {
  5266  0005EA  0100               	movlb	0	; () banked
  5267  0005EC  A59E               	btfss	__doprnt@flag& (0+255),2,b
  5268  0005EE  D082               	goto	l7612
  5269                           
  5270                           ; BSR set to: 0
  5271                           ;doprnt.c: 1392: if(flag & 0x03)
  5272  0005F0  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5273  0005F4  0E03               	movlw	3
  5274  0005F6  0100               	movlb	0	; () banked
  5275  0005F8  1792               	andwf	??__doprnt& (0+255),f,b
  5276  0005FA  B4D8               	btfsc	status,2,c
  5277  0005FC  D038               	goto	l7600
  5278                           
  5279                           ; BSR set to: 0
  5280                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5281  0005FE  0100               	movlb	0	; () banked
  5282  000600  EE20 F002          	lfsr	2,2
  5283  000604  518C               	movf	__doprnt@pb& (0+255),w,b
  5284  000606  26D9               	addwf	fsr2l,f,c
  5285  000608  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5286  00060A  22DA               	addwfc	fsr2h,f,c
  5287  00060C  50DE               	movf	postinc2,w,c
  5288  00060E  10DE               	iorwf	postinc2,w,c
  5289  000610  B4D8               	btfsc	status,2,c
  5290  000612  D018               	goto	l7596
  5291                           
  5292                           ; BSR set to: 0
  5293  000614  0100               	movlb	0	; () banked
  5294  000616  EE20 F002          	lfsr	2,2
  5295  00061A  518C               	movf	__doprnt@pb& (0+255),w,b
  5296  00061C  26D9               	addwf	fsr2l,f,c
  5297  00061E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5298  000620  22DA               	addwfc	fsr2h,f,c
  5299  000622  CFDE F092          	movff	postinc2,??__doprnt
  5300  000626  CFDD F093          	movff	postdec2,??__doprnt+1
  5301  00062A  D801               	call	u11788
  5302  00062C  D020               	goto	l7600
  5303  00062E                     u11788:
  5304  00062E  0005               	push	
  5305  000630  6EFA               	movwf	pclath,c
  5306  000632  0100               	movlb	0	; () banked
  5307  000634  5192               	movf	??__doprnt& (0+255),w,b
  5308  000636  6EFD               	movwf	tosl,c
  5309  000638  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5310  00063A  6EFE               	movwf	tosh,c
  5311  00063C  6AFF               	clrf	tosu,c
  5312  00063E  50FA               	movf	pclath,w,c
  5313  000640  0E2D               	movlw	45
  5314  000642  0012               	return		;indir
  5315  000644                     l7596:
  5316  000644  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5317  000648  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5318  00064C  CFDE F092          	movff	postinc2,??__doprnt
  5319  000650  CFDD F093          	movff	postdec2,??__doprnt+1
  5320  000654  C092  FFD9         	movff	??__doprnt,fsr2l
  5321  000658  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5322  00065C  0E2D               	movlw	45
  5323  00065E  6EDF               	movwf	indf2,c
  5324  000660  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5325  000664  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5326  000668  2ADE               	incf	postinc2,f,c
  5327  00066A  0E00               	movlw	0
  5328  00066C  22DD               	addwfc	postdec2,f,c
  5329  00066E                     l7600:
  5330                           
  5331                           ;doprnt.c: 1415: if(width)
  5332  00066E  0100               	movlb	0	; () banked
  5333  000670  519F               	movf	__doprnt@width& (0+255),w,b
  5334  000672  0100               	movlb	0	; () banked
  5335  000674  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5336  000676  B4D8               	btfsc	status,2,c
  5337  000678  D0C4               	goto	l7634
  5338                           
  5339                           ; BSR set to: 0
  5340                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  5341                           
  5342                           ; BSR set to: 0
  5343                           
  5344                           ;doprnt.c: 1416: do
  5345  00067A  0100               	movlb	0	; () banked
  5346  00067C  EE20 F002          	lfsr	2,2
  5347  000680  518C               	movf	__doprnt@pb& (0+255),w,b
  5348  000682  26D9               	addwf	fsr2l,f,c
  5349  000684  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5350  000686  22DA               	addwfc	fsr2h,f,c
  5351  000688  50DE               	movf	postinc2,w,c
  5352  00068A  10DE               	iorwf	postinc2,w,c
  5353  00068C  B4D8               	btfsc	status,2,c
  5354  00068E  D018               	goto	l7606
  5355                           
  5356                           ; BSR set to: 0
  5357  000690  0100               	movlb	0	; () banked
  5358  000692  EE20 F002          	lfsr	2,2
  5359  000696  518C               	movf	__doprnt@pb& (0+255),w,b
  5360  000698  26D9               	addwf	fsr2l,f,c
  5361  00069A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5362  00069C  22DA               	addwfc	fsr2h,f,c
  5363  00069E  CFDE F092          	movff	postinc2,??__doprnt
  5364  0006A2  CFDD F093          	movff	postdec2,??__doprnt+1
  5365  0006A6  D801               	call	u11818
  5366  0006A8  D020               	goto	l7610
  5367  0006AA                     u11818:
  5368  0006AA  0005               	push	
  5369  0006AC  6EFA               	movwf	pclath,c
  5370  0006AE  0100               	movlb	0	; () banked
  5371  0006B0  5192               	movf	??__doprnt& (0+255),w,b
  5372  0006B2  6EFD               	movwf	tosl,c
  5373  0006B4  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5374  0006B6  6EFE               	movwf	tosh,c
  5375  0006B8  6AFF               	clrf	tosu,c
  5376  0006BA  50FA               	movf	pclath,w,c
  5377  0006BC  0E30               	movlw	48
  5378  0006BE  0012               	return		;indir
  5379  0006C0                     l7606:
  5380  0006C0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5381  0006C4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5382  0006C8  CFDE F092          	movff	postinc2,??__doprnt
  5383  0006CC  CFDD F093          	movff	postdec2,??__doprnt+1
  5384  0006D0  C092  FFD9         	movff	??__doprnt,fsr2l
  5385  0006D4  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5386  0006D8  0E30               	movlw	48
  5387  0006DA  6EDF               	movwf	indf2,c
  5388  0006DC  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5389  0006E0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5390  0006E4  2ADE               	incf	postinc2,f,c
  5391  0006E6  0E00               	movlw	0
  5392  0006E8  22DD               	addwfc	postdec2,f,c
  5393  0006EA                     l7610:
  5394                           
  5395                           ;doprnt.c: 1418: while(--width);
  5396  0006EA  0100               	movlb	0	; () banked
  5397  0006EC  079F               	decf	__doprnt@width& (0+255),f,b
  5398  0006EE  A0D8               	btfss	status,0,c
  5399  0006F0  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5400  0006F2  D7BD               	goto	l7600
  5401  0006F4                     l7612:
  5402                           
  5403                           ; BSR set to: 0
  5404                           ;doprnt.c: 1422: {
  5405                           ;doprnt.c: 1424: if(width
  5406                           ;doprnt.c: 1428: )
  5407  0006F4  0100               	movlb	0	; () banked
  5408  0006F6  519F               	movf	__doprnt@width& (0+255),w,b
  5409  0006F8  0100               	movlb	0	; () banked
  5410  0006FA  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5411  0006FC  B4D8               	btfsc	status,2,c
  5412  0006FE  D042               	goto	l7624
  5413  000700                     l7614:
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5417  000700  0100               	movlb	0	; () banked
  5418  000702  EE20 F002          	lfsr	2,2
  5419  000706  518C               	movf	__doprnt@pb& (0+255),w,b
  5420  000708  26D9               	addwf	fsr2l,f,c
  5421  00070A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5422  00070C  22DA               	addwfc	fsr2h,f,c
  5423  00070E  50DE               	movf	postinc2,w,c
  5424  000710  10DE               	iorwf	postinc2,w,c
  5425  000712  B4D8               	btfsc	status,2,c
  5426  000714  D018               	goto	l7618
  5427                           
  5428                           ; BSR set to: 0
  5429  000716  0100               	movlb	0	; () banked
  5430  000718  EE20 F002          	lfsr	2,2
  5431  00071C  518C               	movf	__doprnt@pb& (0+255),w,b
  5432  00071E  26D9               	addwf	fsr2l,f,c
  5433  000720  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5434  000722  22DA               	addwfc	fsr2h,f,c
  5435  000724  CFDE F092          	movff	postinc2,??__doprnt
  5436  000728  CFDD F093          	movff	postdec2,??__doprnt+1
  5437  00072C  D801               	call	u11858
  5438  00072E  D020               	goto	l7622
  5439  000730                     u11858:
  5440  000730  0005               	push	
  5441  000732  6EFA               	movwf	pclath,c
  5442  000734  0100               	movlb	0	; () banked
  5443  000736  5192               	movf	??__doprnt& (0+255),w,b
  5444  000738  6EFD               	movwf	tosl,c
  5445  00073A  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5446  00073C  6EFE               	movwf	tosh,c
  5447  00073E  6AFF               	clrf	tosu,c
  5448  000740  50FA               	movf	pclath,w,c
  5449  000742  0E20               	movlw	32
  5450  000744  0012               	return		;indir
  5451  000746                     l7618:
  5452  000746  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5453  00074A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5454  00074E  CFDE F092          	movff	postinc2,??__doprnt
  5455  000752  CFDD F093          	movff	postdec2,??__doprnt+1
  5456  000756  C092  FFD9         	movff	??__doprnt,fsr2l
  5457  00075A  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5458  00075E  0E20               	movlw	32
  5459  000760  6EDF               	movwf	indf2,c
  5460  000762  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5461  000766  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5462  00076A  2ADE               	incf	postinc2,f,c
  5463  00076C  0E00               	movlw	0
  5464  00076E  22DD               	addwfc	postdec2,f,c
  5465  000770                     l7622:
  5466                           
  5467                           ;doprnt.c: 1431: while(--width);
  5468  000770  0100               	movlb	0	; () banked
  5469  000772  079F               	decf	__doprnt@width& (0+255),f,b
  5470  000774  A0D8               	btfss	status,0,c
  5471  000776  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5472  000778  0100               	movlb	0	; () banked
  5473  00077A  519F               	movf	__doprnt@width& (0+255),w,b
  5474  00077C  0100               	movlb	0	; () banked
  5475  00077E  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5476  000780  A4D8               	btfss	status,2,c
  5477  000782  D7BE               	goto	l7614
  5478  000784                     l7624:
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;doprnt.c: 1438: if(flag & 0x03)
  5482  000784  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5483  000788  0E03               	movlw	3
  5484  00078A  0100               	movlb	0	; () banked
  5485  00078C  1792               	andwf	??__doprnt& (0+255),f,b
  5486  00078E  B4D8               	btfsc	status,2,c
  5487  000790  D038               	goto	l7634
  5488                           
  5489                           ; BSR set to: 0
  5490                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5491  000792  0100               	movlb	0	; () banked
  5492  000794  EE20 F002          	lfsr	2,2
  5493  000798  518C               	movf	__doprnt@pb& (0+255),w,b
  5494  00079A  26D9               	addwf	fsr2l,f,c
  5495  00079C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5496  00079E  22DA               	addwfc	fsr2h,f,c
  5497  0007A0  50DE               	movf	postinc2,w,c
  5498  0007A2  10DE               	iorwf	postinc2,w,c
  5499  0007A4  B4D8               	btfsc	status,2,c
  5500  0007A6  D018               	goto	l7630
  5501                           
  5502                           ; BSR set to: 0
  5503  0007A8  0100               	movlb	0	; () banked
  5504  0007AA  EE20 F002          	lfsr	2,2
  5505  0007AE  518C               	movf	__doprnt@pb& (0+255),w,b
  5506  0007B0  26D9               	addwf	fsr2l,f,c
  5507  0007B2  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5508  0007B4  22DA               	addwfc	fsr2h,f,c
  5509  0007B6  CFDE F092          	movff	postinc2,??__doprnt
  5510  0007BA  CFDD F093          	movff	postdec2,??__doprnt+1
  5511  0007BE  D801               	call	u11898
  5512  0007C0  D020               	goto	l7634
  5513  0007C2                     u11898:
  5514  0007C2  0005               	push	
  5515  0007C4  6EFA               	movwf	pclath,c
  5516  0007C6  0100               	movlb	0	; () banked
  5517  0007C8  5192               	movf	??__doprnt& (0+255),w,b
  5518  0007CA  6EFD               	movwf	tosl,c
  5519  0007CC  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5520  0007CE  6EFE               	movwf	tosh,c
  5521  0007D0  6AFF               	clrf	tosu,c
  5522  0007D2  50FA               	movf	pclath,w,c
  5523  0007D4  0E2D               	movlw	45
  5524  0007D6  0012               	return		;indir
  5525  0007D8                     l7630:
  5526  0007D8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5527  0007DC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5528  0007E0  CFDE F092          	movff	postinc2,??__doprnt
  5529  0007E4  CFDD F093          	movff	postdec2,??__doprnt+1
  5530  0007E8  C092  FFD9         	movff	??__doprnt,fsr2l
  5531  0007EC  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5532  0007F0  0E2D               	movlw	45
  5533  0007F2  6EDF               	movwf	indf2,c
  5534  0007F4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5535  0007F8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5536  0007FC  2ADE               	incf	postinc2,f,c
  5537  0007FE  0E00               	movlw	0
  5538  000800  22DD               	addwfc	postdec2,f,c
  5539  000802                     l7634:
  5540                           
  5541                           ;doprnt.c: 1469: }
  5542                           ;doprnt.c: 1472: prec = c;
  5543  000802  C0A1  F097         	movff	__doprnt@c,__doprnt@prec
  5544                           
  5545                           ;doprnt.c: 1474: while(prec--) {
  5546  000806  D098               	goto	l7654
  5547  000808                     l7636:
  5548                           
  5549                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5550  000808  0100               	movlb	0	; () banked
  5551  00080A  5197               	movf	__doprnt@prec& (0+255),w,b
  5552  00080C  0D02               	mullw	2
  5553  00080E  0EE6               	movlw	low _dpowers
  5554  000810  24F3               	addwf	prodl,w,c
  5555  000812  6EF6               	movwf	tblptrl,c
  5556  000814  0EFE               	movlw	high _dpowers
  5557  000816  20F4               	addwfc	prodh,w,c
  5558  000818  6EF7               	movwf	tblptrh,c
  5559  00081A                     	if	1	;There are 3 active tblptr bytes
  5560  00081A  6AF8               	clrf	tblptru,c
  5561  00081C  0E00               	movlw	low (__mediumconst shr (0+16))
  5562  00081E  22F8               	addwfc	tblptru,f,c
  5563  000820                     	endif
  5564  000820  0009               	tblrd		*+
  5565  000822  CFF5 F082          	movff	tablat,___lwdiv@divisor
  5566  000826  000A               	tblrd		*-
  5567  000828  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  5568  00082C  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  5569  000830  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  5570  000834  EC4F  F015         	call	___lwdiv
  5571  000838  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  5572  00083C  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  5573  000840  0E00               	movlw	0
  5574  000842  0100               	movlb	0	; () banked
  5575  000844  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  5576  000846  0E0A               	movlw	10
  5577  000848  6F89               	movwf	___lwmod@divisor& (0+255),b
  5578  00084A  EC2B  F016         	call	___lwmod	;wreg free
  5579  00084E  0100               	movlb	0	; () banked
  5580  000850  5187               	movf	?___lwmod& (0+255),w,b
  5581  000852  0F30               	addlw	48
  5582  000854  0100               	movlb	0	; () banked
  5583  000856  6FA1               	movwf	__doprnt@c& (0+255),b
  5584                           
  5585                           ;doprnt.c: 1491: break;
  5586  000858  D036               	goto	l7646
  5587  00085A                     l7638:
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;doprnt.c: 1499: {
  5591                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5592  00085A  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  5593  00085E  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  5594  000862  0100               	movlb	0	; () banked
  5595  000864  5197               	movf	__doprnt@prec& (0+255),w,b
  5596  000866  0D02               	mullw	2
  5597  000868  0EF0               	movlw	low _hexpowers
  5598  00086A  24F3               	addwf	prodl,w,c
  5599  00086C  6EF6               	movwf	tblptrl,c
  5600  00086E  0EFE               	movlw	high _hexpowers
  5601  000870  20F4               	addwfc	prodh,w,c
  5602  000872  6EF7               	movwf	tblptrh,c
  5603  000874                     	if	1	;There are 3 active tblptr bytes
  5604  000874  6AF8               	clrf	tblptru,c
  5605  000876  0E00               	movlw	low (__mediumconst shr (0+16))
  5606  000878  22F8               	addwfc	tblptru,f,c
  5607  00087A                     	endif
  5608  00087A  0009               	tblrd		*+
  5609  00087C  CFF5 F082          	movff	tablat,___lwdiv@divisor
  5610  000880  000A               	tblrd		*-
  5611  000882  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  5612  000886  EC4F  F015         	call	___lwdiv	;wreg free
  5613  00088A  0100               	movlb	0	; () banked
  5614  00088C  5180               	movf	?___lwdiv& (0+255),w,b
  5615  00088E  0B0F               	andlw	15
  5616  000890  0100               	movlb	0	; () banked
  5617  000892  6F96               	movwf	__doprnt@idx& (0+255),b
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5621  000894  0100               	movlb	0	; () banked
  5622  000896  5196               	movf	__doprnt@idx& (0+255),w,b
  5623  000898  0D01               	mullw	1
  5624  00089A  0E97               	movlw	low STR_19
  5625  00089C  24F3               	addwf	prodl,w,c
  5626  00089E  6EF6               	movwf	tblptrl,c
  5627  0008A0  0EFF               	movlw	high STR_19
  5628  0008A2  20F4               	addwfc	prodh,w,c
  5629  0008A4  6EF7               	movwf	tblptrh,c
  5630  0008A6                     	if	1	;There are 3 active tblptr bytes
  5631  0008A6  6AF8               	clrf	tblptru,c
  5632  0008A8  0E00               	movlw	low (__mediumconst shr (0+16))
  5633  0008AA  22F8               	addwfc	tblptru,f,c
  5634  0008AC                     	endif
  5635  0008AC  0008               	tblrd		*
  5636  0008AE  CFF5 F0A1          	movff	tablat,__doprnt@c
  5637                           
  5638                           ; BSR set to: 0
  5639                           ;doprnt.c: 1523: }
  5640                           
  5641                           ;doprnt.c: 1508: }
  5642                           ;doprnt.c: 1510: break;
  5643  0008B2  D009               	goto	l7646
  5644  0008B4                     l7644:
  5645  0008B4  0100               	movlb	0	; () banked
  5646  0008B6  519E               	movf	__doprnt@flag& (0+255),w,b
  5647  0008B8  0B80               	andlw	128
  5648                           
  5649                           ; Switch size 1, requested type "space"
  5650                           ; Number of cases is 2, Range of values is 0 to 128
  5651                           ; switch strategies available:
  5652                           ; Name         Instructions Cycles
  5653                           ; simple_byte            7     4 (average)
  5654                           ;	Chosen strategy is simple_byte
  5655  0008BA  0A00               	xorlw	0	; case 0
  5656  0008BC  B4D8               	btfsc	status,2,c
  5657  0008BE  D7A4               	goto	l7636
  5658  0008C0  0A80               	xorlw	128	; case 128
  5659  0008C2  B4D8               	btfsc	status,2,c
  5660  0008C4  D7CA               	goto	l7638
  5661  0008C6                     l7646:
  5662                           
  5663                           ; BSR set to: 0
  5664                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  5665  0008C6  0100               	movlb	0	; () banked
  5666  0008C8  EE20 F002          	lfsr	2,2
  5667  0008CC  518C               	movf	__doprnt@pb& (0+255),w,b
  5668  0008CE  26D9               	addwf	fsr2l,f,c
  5669  0008D0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5670  0008D2  22DA               	addwfc	fsr2h,f,c
  5671  0008D4  50DE               	movf	postinc2,w,c
  5672  0008D6  10DE               	iorwf	postinc2,w,c
  5673  0008D8  B4D8               	btfsc	status,2,c
  5674  0008DA  D019               	goto	l7650
  5675                           
  5676                           ; BSR set to: 0
  5677  0008DC  0100               	movlb	0	; () banked
  5678  0008DE  EE20 F002          	lfsr	2,2
  5679  0008E2  518C               	movf	__doprnt@pb& (0+255),w,b
  5680  0008E4  26D9               	addwf	fsr2l,f,c
  5681  0008E6  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5682  0008E8  22DA               	addwfc	fsr2h,f,c
  5683  0008EA  CFDE F092          	movff	postinc2,??__doprnt
  5684  0008EE  CFDD F093          	movff	postdec2,??__doprnt+1
  5685  0008F2  D801               	call	u11918
  5686  0008F4  D021               	goto	l7654
  5687  0008F6                     u11918:
  5688  0008F6  0005               	push	
  5689  0008F8  6EFA               	movwf	pclath,c
  5690  0008FA  0100               	movlb	0	; () banked
  5691  0008FC  5192               	movf	??__doprnt& (0+255),w,b
  5692  0008FE  6EFD               	movwf	tosl,c
  5693  000900  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5694  000902  6EFE               	movwf	tosh,c
  5695  000904  6AFF               	clrf	tosu,c
  5696  000906  50FA               	movf	pclath,w,c
  5697  000908  0100               	movlb	0	; () banked
  5698  00090A  51A1               	movf	__doprnt@c& (0+255),w,b
  5699  00090C  0012               	return		;indir
  5700  00090E                     l7650:
  5701  00090E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5702  000912  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5703  000916  CFDE F092          	movff	postinc2,??__doprnt
  5704  00091A  CFDD F093          	movff	postdec2,??__doprnt+1
  5705  00091E  C092  FFD9         	movff	??__doprnt,fsr2l
  5706  000922  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5707  000926  C0A1  FFDF         	movff	__doprnt@c,indf2
  5708  00092A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5709  00092E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5710  000932  2ADE               	incf	postinc2,f,c
  5711  000934  0E00               	movlw	0
  5712  000936  22DD               	addwfc	postdec2,f,c
  5713  000938                     l7654:
  5714  000938  0100               	movlb	0	; () banked
  5715  00093A  0797               	decf	__doprnt@prec& (0+255),f,b
  5716  00093C  0100               	movlb	0	; () banked
  5717  00093E  2997               	incf	__doprnt@prec& (0+255),w,b
  5718  000940  A4D8               	btfss	status,2,c
  5719  000942  D7B8               	goto	l7644
  5720  000944                     l7656:
  5721  000944  0100               	movlb	0	; () banked
  5722  000946  518E               	movf	__doprnt@f& (0+255),w,b
  5723  000948  0100               	movlb	0	; () banked
  5724  00094A  6F92               	movwf	??__doprnt& (0+255),b
  5725  00094C  0100               	movlb	0	; () banked
  5726  00094E  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  5727  000950  0100               	movlb	0	; () banked
  5728  000952  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5729  000954  0100               	movlb	0	; () banked
  5730  000956  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5731  000958  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5732  00095A  C092  FFF6         	movff	??__doprnt,tblptrl
  5733  00095E  C093  FFF7         	movff	??__doprnt+1,tblptrh
  5734  000962  0E00               	movlw	low (__mediumconst shr (0+16))
  5735  000964  6EF8               	movwf	tblptru,c
  5736  000966  0E0F               	movlw	(high __ramtop+-1)
  5737  000968  64F7               	cpfsgt	tblptrh,c
  5738  00096A  D003               	bra	u11937
  5739  00096C  0008               	tblrd		*
  5740  00096E  50F5               	movf	tablat,w,c
  5741  000970  D005               	bra	u11930
  5742  000972                     u11937:
  5743  000972  CFF6 FFE9          	movff	tblptrl,fsr0l
  5744  000976  CFF7 FFEA          	movff	tblptrh,fsr0h
  5745  00097A  50EF               	movf	indf0,w,c
  5746  00097C                     u11930:
  5747  00097C  0100               	movlb	0	; () banked
  5748  00097E  6FA1               	movwf	__doprnt@c& (0+255),b
  5749  000980  0100               	movlb	0	; () banked
  5750  000982  51A1               	movf	__doprnt@c& (0+255),w,b
  5751  000984  A4D8               	btfss	status,2,c
  5752  000986  EF0B  F000         	goto	l7450
  5753  00098A                     l7658:
  5754                           
  5755                           ;doprnt.c: 1540: return 0;
  5756  00098A  0E00               	movlw	0
  5757  00098C  0100               	movlb	0	; () banked
  5758  00098E  6F8D               	movwf	(?__doprnt+1)& (0+255),b
  5759  000990  0E00               	movlw	0
  5760  000992  6F8C               	movwf	?__doprnt& (0+255),b
  5761  000994  0012               	return	
  5762  000996                     __end_of__doprnt:
  5763                           	opt stack 0
  5764                           tosu	equ	0xFFF
  5765                           tosh	equ	0xFFE
  5766                           tosl	equ	0xFFD
  5767                           pclath	equ	0xFFA
  5768                           tblptru	equ	0xFF8
  5769                           tblptrh	equ	0xFF7
  5770                           tblptrl	equ	0xFF6
  5771                           tablat	equ	0xFF5
  5772                           prodh	equ	0xFF4
  5773                           prodl	equ	0xFF3
  5774                           intcon	equ	0xFF2
  5775                           intcon2	equ	0xFF1
  5776                           intcon3	equ	0xFF0
  5777                           indf0	equ	0xFEF
  5778                           postinc0	equ	0xFEE
  5779                           fsr0h	equ	0xFEA
  5780                           fsr0l	equ	0xFE9
  5781                           wreg	equ	0xFE8
  5782                           indf1	equ	0xFE7
  5783                           postinc1	equ	0xFE6
  5784                           postdec1	equ	0xFE5
  5785                           fsr1h	equ	0xFE2
  5786                           fsr1l	equ	0xFE1
  5787                           indf2	equ	0xFDF
  5788                           postinc2	equ	0xFDE
  5789                           postdec2	equ	0xFDD
  5790                           fsr2h	equ	0xFDA
  5791                           fsr2l	equ	0xFD9
  5792                           status	equ	0xFD8
  5793                           
  5794 ;; *************** function _putch *****************
  5795 ;; Defined at:
  5796 ;;		line 30 in file "lcd.c"
  5797 ;; Parameters:    Size  Location     Type
  5798 ;;  data            1    wreg     unsigned char 
  5799 ;; Auto vars:     Size  Location     Type
  5800 ;;  data            1    2[BANK0 ] unsigned char 
  5801 ;; Return value:  Size  Location     Type
  5802 ;;                  1    wreg      void 
  5803 ;; Registers used:
  5804 ;;		wreg, status,2, status,0, cstack
  5805 ;; Tracked objects:
  5806 ;;		On entry : 0/0
  5807 ;;		On exit  : 0/0
  5808 ;;		Unchanged: 0/0
  5809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5810 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5811 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5813 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5814 ;;Total ram usage:        1 bytes
  5815 ;; Hardware stack levels used:    1
  5816 ;; Hardware stack levels required when called:    6
  5817 ;; This function calls:
  5818 ;;		_lcdNibble
  5819 ;; This function is called by:
  5820 ;;		_printf
  5821 ;;		__doprnt
  5822 ;;		i2__doprnt
  5823 ;; This function uses a non-reentrant model
  5824 ;;
  5825                           
  5826                           	psect	text10
  5827  003106                     __ptext10:
  5828                           	opt stack 0
  5829  003106                     _putch:
  5830                           	opt stack 0
  5831                           
  5832                           ; BSR set to: 0
  5833                           ;Skip over the trampoline to the duplicate function for level 2
  5834  003106  B277               	btfsc	btemp,1,c
  5835  003108  EFB2  F018         	goto	i2_putch
  5836  00310C                     _putch$intlevel0:
  5837                           	opt stack 21
  5838                           
  5839                           ;incstack = 0
  5840                           ;putch@data stored from wreg
  5841  00310C  0100               	movlb	0	; () banked
  5842  00310E  6F82               	movwf	putch@data& (0+255),b
  5843                           
  5844                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  5845  003110  848C               	bsf	3980,2,c	;volatile
  5846                           
  5847                           ;lcd.c: 32: lcdNibble(data);
  5848  003112  0100               	movlb	0	; () banked
  5849  003114  5182               	movf	putch@data& (0+255),w,b
  5850  003116  ECF7  F015         	call	_lcdNibble
  5851  00311A  0012               	return		;funcret
  5852  00311C                     __end_of_putch:
  5853                           	opt stack 0
  5854                           tosu	equ	0xFFF
  5855                           tosh	equ	0xFFE
  5856                           tosl	equ	0xFFD
  5857                           pclath	equ	0xFFA
  5858                           tblptru	equ	0xFF8
  5859                           tblptrh	equ	0xFF7
  5860                           tblptrl	equ	0xFF6
  5861                           tablat	equ	0xFF5
  5862                           prodh	equ	0xFF4
  5863                           prodl	equ	0xFF3
  5864                           intcon	equ	0xFF2
  5865                           intcon2	equ	0xFF1
  5866                           intcon3	equ	0xFF0
  5867                           indf0	equ	0xFEF
  5868                           postinc0	equ	0xFEE
  5869                           fsr0h	equ	0xFEA
  5870                           fsr0l	equ	0xFE9
  5871                           wreg	equ	0xFE8
  5872                           indf1	equ	0xFE7
  5873                           postinc1	equ	0xFE6
  5874                           postdec1	equ	0xFE5
  5875                           fsr1h	equ	0xFE2
  5876                           fsr1l	equ	0xFE1
  5877                           indf2	equ	0xFDF
  5878                           postinc2	equ	0xFDE
  5879                           postdec2	equ	0xFDD
  5880                           fsr2h	equ	0xFDA
  5881                           fsr2l	equ	0xFD9
  5882                           status	equ	0xFD8
  5883                           
  5884 ;; *************** function _isdigit *****************
  5885 ;; Defined at:
  5886 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5887 ;; Parameters:    Size  Location     Type
  5888 ;;  c               1    wreg     unsigned char 
  5889 ;; Auto vars:     Size  Location     Type
  5890 ;;  c               1    2[BANK0 ] unsigned char 
  5891 ;; Return value:  Size  Location     Type
  5892 ;;		None               void
  5893 ;; Registers used:
  5894 ;;		wreg, status,2, status,0
  5895 ;; Tracked objects:
  5896 ;;		On entry : 0/0
  5897 ;;		On exit  : 0/0
  5898 ;;		Unchanged: 0/0
  5899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5901 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5902 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5903 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5904 ;;Total ram usage:        3 bytes
  5905 ;; Hardware stack levels used:    1
  5906 ;; Hardware stack levels required when called:    5
  5907 ;; This function calls:
  5908 ;;		Nothing
  5909 ;; This function is called by:
  5910 ;;		__doprnt
  5911 ;; This function uses a non-reentrant model
  5912 ;;
  5913                           
  5914                           	psect	text11
  5915  003098                     __ptext11:
  5916                           	opt stack 0
  5917  003098                     _isdigit:
  5918                           	opt stack 22
  5919                           
  5920                           ;incstack = 0
  5921                           ;isdigit@c stored from wreg
  5922  003098  0100               	movlb	0	; () banked
  5923  00309A  6F82               	movwf	isdigit@c& (0+255),b
  5924  00309C  0E00               	movlw	0
  5925  00309E  0100               	movlb	0	; () banked
  5926  0030A0  6F81               	movwf	_isdigit$713& (0+255),b
  5927                           
  5928                           ; BSR set to: 0
  5929  0030A2  0E3A               	movlw	58
  5930  0030A4  0100               	movlb	0	; () banked
  5931  0030A6  6182               	cpfslt	isdigit@c& (0+255),b
  5932  0030A8  D007               	goto	l4354
  5933                           
  5934                           ; BSR set to: 0
  5935  0030AA  0E2F               	movlw	47
  5936  0030AC  0100               	movlb	0	; () banked
  5937  0030AE  6582               	cpfsgt	isdigit@c& (0+255),b
  5938  0030B0  D003               	goto	l4354
  5939                           
  5940                           ; BSR set to: 0
  5941  0030B2  0E01               	movlw	1
  5942  0030B4  0100               	movlb	0	; () banked
  5943  0030B6  6F81               	movwf	_isdigit$713& (0+255),b
  5944  0030B8                     l4354:
  5945                           
  5946                           ; BSR set to: 0
  5947  0030B8  C081  F080         	movff	_isdigit$713,??_isdigit
  5948  0030BC  0100               	movlb	0	; () banked
  5949  0030BE  3180               	rrcf	??_isdigit& (0+255),w,b
  5950  0030C0  0012               	return	
  5951  0030C2                     __end_of_isdigit:
  5952                           	opt stack 0
  5953                           tosu	equ	0xFFF
  5954                           tosh	equ	0xFFE
  5955                           tosl	equ	0xFFD
  5956                           pclath	equ	0xFFA
  5957                           tblptru	equ	0xFF8
  5958                           tblptrh	equ	0xFF7
  5959                           tblptrl	equ	0xFF6
  5960                           tablat	equ	0xFF5
  5961                           prodh	equ	0xFF4
  5962                           prodl	equ	0xFF3
  5963                           intcon	equ	0xFF2
  5964                           intcon2	equ	0xFF1
  5965                           intcon3	equ	0xFF0
  5966                           indf0	equ	0xFEF
  5967                           postinc0	equ	0xFEE
  5968                           fsr0h	equ	0xFEA
  5969                           fsr0l	equ	0xFE9
  5970                           wreg	equ	0xFE8
  5971                           indf1	equ	0xFE7
  5972                           postinc1	equ	0xFE6
  5973                           postdec1	equ	0xFE5
  5974                           fsr1h	equ	0xFE2
  5975                           fsr1l	equ	0xFE1
  5976                           indf2	equ	0xFDF
  5977                           postinc2	equ	0xFDE
  5978                           postdec2	equ	0xFDD
  5979                           fsr2h	equ	0xFDA
  5980                           fsr2l	equ	0xFD9
  5981                           status	equ	0xFD8
  5982                           
  5983 ;; *************** function ___lwmod *****************
  5984 ;; Defined at:
  5985 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  5986 ;; Parameters:    Size  Location     Type
  5987 ;;  dividend        2    7[BANK0 ] unsigned int 
  5988 ;;  divisor         2    9[BANK0 ] unsigned int 
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;  counter         1   11[BANK0 ] unsigned char 
  5991 ;; Return value:  Size  Location     Type
  5992 ;;                  2    7[BANK0 ] unsigned int 
  5993 ;; Registers used:
  5994 ;;		wreg, status,2, status,0
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6000 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6001 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6003 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6004 ;;Total ram usage:        5 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; Hardware stack levels required when called:    5
  6007 ;; This function calls:
  6008 ;;		Nothing
  6009 ;; This function is called by:
  6010 ;;		__doprnt
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           	psect	text12
  6015  002C56                     __ptext12:
  6016                           	opt stack 0
  6017  002C56                     ___lwmod:
  6018                           	opt stack 22
  6019                           
  6020                           ; BSR set to: 0
  6021                           ;incstack = 0
  6022  002C56  0100               	movlb	0	; () banked
  6023  002C58  5189               	movf	___lwmod@divisor& (0+255),w,b
  6024  002C5A  0100               	movlb	0	; () banked
  6025  002C5C  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6026  002C5E  B4D8               	btfsc	status,2,c
  6027  002C60  D026               	goto	l975
  6028                           
  6029                           ; BSR set to: 0
  6030  002C62  0E01               	movlw	1
  6031  002C64  0100               	movlb	0	; () banked
  6032  002C66  6F8B               	movwf	___lwmod@counter& (0+255),b
  6033  002C68  D006               	goto	l4392
  6034  002C6A                     l4390:
  6035                           
  6036                           ; BSR set to: 0
  6037  002C6A  0100               	movlb	0	; () banked
  6038  002C6C  90D8               	bcf	status,0,c
  6039  002C6E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  6040  002C70  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6041  002C72  0100               	movlb	0	; () banked
  6042  002C74  2B8B               	incf	___lwmod@counter& (0+255),f,b
  6043  002C76                     l4392:
  6044                           
  6045                           ; BSR set to: 0
  6046  002C76  0100               	movlb	0	; () banked
  6047  002C78  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6048  002C7A  D7F7               	goto	l4390
  6049  002C7C                     l4394:
  6050                           
  6051                           ; BSR set to: 0
  6052  002C7C  0100               	movlb	0	; () banked
  6053  002C7E  5189               	movf	___lwmod@divisor& (0+255),w,b
  6054  002C80  0100               	movlb	0	; () banked
  6055  002C82  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  6056  002C84  0100               	movlb	0	; () banked
  6057  002C86  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6058  002C88  0100               	movlb	0	; () banked
  6059  002C8A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6060  002C8C  A0D8               	btfss	status,0,c
  6061  002C8E  D008               	goto	l4398
  6062                           
  6063                           ; BSR set to: 0
  6064  002C90  0100               	movlb	0	; () banked
  6065  002C92  5189               	movf	___lwmod@divisor& (0+255),w,b
  6066  002C94  0100               	movlb	0	; () banked
  6067  002C96  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  6068  002C98  0100               	movlb	0	; () banked
  6069  002C9A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6070  002C9C  0100               	movlb	0	; () banked
  6071  002C9E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6072  002CA0                     l4398:
  6073                           
  6074                           ; BSR set to: 0
  6075  002CA0  0100               	movlb	0	; () banked
  6076  002CA2  90D8               	bcf	status,0,c
  6077  002CA4  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6078  002CA6  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  6079                           
  6080                           ; BSR set to: 0
  6081  002CA8  0100               	movlb	0	; () banked
  6082  002CAA  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  6083  002CAC  D7E7               	goto	l4394
  6084  002CAE                     l975:
  6085                           
  6086                           ; BSR set to: 0
  6087  002CAE  C087  F087         	movff	___lwmod@dividend,?___lwmod
  6088  002CB2  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  6089                           
  6090                           ; BSR set to: 0
  6091  002CB6  0012               	return		;funcret
  6092  002CB8                     __end_of___lwmod:
  6093                           	opt stack 0
  6094                           tosu	equ	0xFFF
  6095                           tosh	equ	0xFFE
  6096                           tosl	equ	0xFFD
  6097                           pclath	equ	0xFFA
  6098                           tblptru	equ	0xFF8
  6099                           tblptrh	equ	0xFF7
  6100                           tblptrl	equ	0xFF6
  6101                           tablat	equ	0xFF5
  6102                           prodh	equ	0xFF4
  6103                           prodl	equ	0xFF3
  6104                           intcon	equ	0xFF2
  6105                           intcon2	equ	0xFF1
  6106                           intcon3	equ	0xFF0
  6107                           indf0	equ	0xFEF
  6108                           postinc0	equ	0xFEE
  6109                           fsr0h	equ	0xFEA
  6110                           fsr0l	equ	0xFE9
  6111                           wreg	equ	0xFE8
  6112                           indf1	equ	0xFE7
  6113                           postinc1	equ	0xFE6
  6114                           postdec1	equ	0xFE5
  6115                           fsr1h	equ	0xFE2
  6116                           fsr1l	equ	0xFE1
  6117                           indf2	equ	0xFDF
  6118                           postinc2	equ	0xFDE
  6119                           postdec2	equ	0xFDD
  6120                           fsr2h	equ	0xFDA
  6121                           fsr2l	equ	0xFD9
  6122                           status	equ	0xFD8
  6123                           
  6124 ;; *************** function ___lwdiv *****************
  6125 ;; Defined at:
  6126 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;  dividend        2    0[BANK0 ] unsigned int 
  6129 ;;  divisor         2    2[BANK0 ] unsigned int 
  6130 ;; Auto vars:     Size  Location     Type
  6131 ;;  quotient        2    5[BANK0 ] unsigned int 
  6132 ;;  counter         1    4[BANK0 ] unsigned char 
  6133 ;; Return value:  Size  Location     Type
  6134 ;;                  2    0[BANK0 ] unsigned int 
  6135 ;; Registers used:
  6136 ;;		wreg, status,2, status,0
  6137 ;; Tracked objects:
  6138 ;;		On entry : 0/0
  6139 ;;		On exit  : 0/0
  6140 ;;		Unchanged: 0/0
  6141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6142 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6143 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6144 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6145 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6146 ;;Total ram usage:        7 bytes
  6147 ;; Hardware stack levels used:    1
  6148 ;; Hardware stack levels required when called:    5
  6149 ;; This function calls:
  6150 ;;		Nothing
  6151 ;; This function is called by:
  6152 ;;		__doprnt
  6153 ;; This function uses a non-reentrant model
  6154 ;;
  6155                           
  6156                           	psect	text13
  6157  002A9E                     __ptext13:
  6158                           	opt stack 0
  6159  002A9E                     ___lwdiv:
  6160                           	opt stack 22
  6161                           
  6162                           ; BSR set to: 0
  6163                           ;incstack = 0
  6164  002A9E  0E00               	movlw	0
  6165  002AA0  0100               	movlb	0	; () banked
  6166  002AA2  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6167  002AA4  0E00               	movlw	0
  6168  002AA6  6F85               	movwf	___lwdiv@quotient& (0+255),b
  6169                           
  6170                           ; BSR set to: 0
  6171  002AA8  0100               	movlb	0	; () banked
  6172  002AAA  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6173  002AAC  0100               	movlb	0	; () banked
  6174  002AAE  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6175  002AB0  B4D8               	btfsc	status,2,c
  6176  002AB2  D02C               	goto	l965
  6177                           
  6178                           ; BSR set to: 0
  6179  002AB4  0E01               	movlw	1
  6180  002AB6  0100               	movlb	0	; () banked
  6181  002AB8  6F84               	movwf	___lwdiv@counter& (0+255),b
  6182  002ABA  D006               	goto	l4372
  6183  002ABC                     l4370:
  6184                           
  6185                           ; BSR set to: 0
  6186  002ABC  0100               	movlb	0	; () banked
  6187  002ABE  90D8               	bcf	status,0,c
  6188  002AC0  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  6189  002AC2  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6190  002AC4  0100               	movlb	0	; () banked
  6191  002AC6  2B84               	incf	___lwdiv@counter& (0+255),f,b
  6192  002AC8                     l4372:
  6193                           
  6194                           ; BSR set to: 0
  6195  002AC8  0100               	movlb	0	; () banked
  6196  002ACA  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6197  002ACC  D7F7               	goto	l4370
  6198  002ACE                     l4374:
  6199                           
  6200                           ; BSR set to: 0
  6201  002ACE  0100               	movlb	0	; () banked
  6202  002AD0  90D8               	bcf	status,0,c
  6203  002AD2  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  6204  002AD4  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6205                           
  6206                           ; BSR set to: 0
  6207  002AD6  0100               	movlb	0	; () banked
  6208  002AD8  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6209  002ADA  0100               	movlb	0	; () banked
  6210  002ADC  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  6211  002ADE  0100               	movlb	0	; () banked
  6212  002AE0  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6213  002AE2  0100               	movlb	0	; () banked
  6214  002AE4  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6215  002AE6  A0D8               	btfss	status,0,c
  6216  002AE8  D00A               	goto	l4382
  6217                           
  6218                           ; BSR set to: 0
  6219  002AEA  0100               	movlb	0	; () banked
  6220  002AEC  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6221  002AEE  0100               	movlb	0	; () banked
  6222  002AF0  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  6223  002AF2  0100               	movlb	0	; () banked
  6224  002AF4  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6225  002AF6  0100               	movlb	0	; () banked
  6226  002AF8  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6227                           
  6228                           ; BSR set to: 0
  6229  002AFA  0100               	movlb	0	; () banked
  6230  002AFC  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  6231  002AFE                     l4382:
  6232                           
  6233                           ; BSR set to: 0
  6234  002AFE  0100               	movlb	0	; () banked
  6235  002B00  90D8               	bcf	status,0,c
  6236  002B02  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6237  002B04  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  6238                           
  6239                           ; BSR set to: 0
  6240  002B06  0100               	movlb	0	; () banked
  6241  002B08  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  6242  002B0A  D7E1               	goto	l4374
  6243  002B0C                     l965:
  6244                           
  6245                           ; BSR set to: 0
  6246  002B0C  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  6247  002B10  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6248                           
  6249                           ; BSR set to: 0
  6250  002B14  0012               	return		;funcret
  6251  002B16                     __end_of___lwdiv:
  6252                           	opt stack 0
  6253                           tosu	equ	0xFFF
  6254                           tosh	equ	0xFFE
  6255                           tosl	equ	0xFFD
  6256                           pclath	equ	0xFFA
  6257                           tblptru	equ	0xFF8
  6258                           tblptrh	equ	0xFF7
  6259                           tblptrl	equ	0xFF6
  6260                           tablat	equ	0xFF5
  6261                           prodh	equ	0xFF4
  6262                           prodl	equ	0xFF3
  6263                           intcon	equ	0xFF2
  6264                           intcon2	equ	0xFF1
  6265                           intcon3	equ	0xFF0
  6266                           indf0	equ	0xFEF
  6267                           postinc0	equ	0xFEE
  6268                           fsr0h	equ	0xFEA
  6269                           fsr0l	equ	0xFE9
  6270                           wreg	equ	0xFE8
  6271                           indf1	equ	0xFE7
  6272                           postinc1	equ	0xFE6
  6273                           postdec1	equ	0xFE5
  6274                           fsr1h	equ	0xFE2
  6275                           fsr1l	equ	0xFE1
  6276                           indf2	equ	0xFDF
  6277                           postinc2	equ	0xFDE
  6278                           postdec2	equ	0xFDD
  6279                           fsr2h	equ	0xFDA
  6280                           fsr2l	equ	0xFD9
  6281                           status	equ	0xFD8
  6282                           
  6283 ;; *************** function ___awmod *****************
  6284 ;; Defined at:
  6285 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  6286 ;; Parameters:    Size  Location     Type
  6287 ;;  dividend        2    0[BANK0 ] int 
  6288 ;;  divisor         2    2[BANK0 ] int 
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;  sign            1    5[BANK0 ] unsigned char 
  6291 ;;  counter         1    4[BANK0 ] unsigned char 
  6292 ;; Return value:  Size  Location     Type
  6293 ;;                  2    0[BANK0 ] int 
  6294 ;; Registers used:
  6295 ;;		wreg, status,2, status,0
  6296 ;; Tracked objects:
  6297 ;;		On entry : 0/0
  6298 ;;		On exit  : 0/0
  6299 ;;		Unchanged: 0/0
  6300 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6301 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6303 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6304 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6305 ;;Total ram usage:        6 bytes
  6306 ;; Hardware stack levels used:    1
  6307 ;; Hardware stack levels required when called:    5
  6308 ;; This function calls:
  6309 ;;		Nothing
  6310 ;; This function is called by:
  6311 ;;		_update_display
  6312 ;;		_update_state
  6313 ;;		__measure
  6314 ;; This function uses a non-reentrant model
  6315 ;;
  6316                           
  6317                           	psect	text14
  6318  00296A                     __ptext14:
  6319                           	opt stack 0
  6320  00296A                     ___awmod:
  6321                           	opt stack 24
  6322                           
  6323                           ; BSR set to: 0
  6324                           ;incstack = 0
  6325  00296A  0E00               	movlw	0
  6326  00296C  0100               	movlb	0	; () banked
  6327  00296E  6F85               	movwf	___awmod@sign& (0+255),b
  6328                           
  6329                           ; BSR set to: 0
  6330  002970  0100               	movlb	0	; () banked
  6331  002972  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6332  002974  D008               	goto	l4794
  6333                           
  6334                           ; BSR set to: 0
  6335  002976  0100               	movlb	0	; () banked
  6336  002978  6D80               	negf	___awmod@dividend& (0+255),b
  6337  00297A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6338  00297C  B0D8               	btfsc	status,0,c
  6339  00297E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6340                           
  6341                           ; BSR set to: 0
  6342  002980  0E01               	movlw	1
  6343  002982  0100               	movlb	0	; () banked
  6344  002984  6F85               	movwf	___awmod@sign& (0+255),b
  6345  002986                     l4794:
  6346                           
  6347                           ; BSR set to: 0
  6348  002986  0100               	movlb	0	; () banked
  6349  002988  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6350  00298A  D005               	goto	l4798
  6351                           
  6352                           ; BSR set to: 0
  6353  00298C  0100               	movlb	0	; () banked
  6354  00298E  6D82               	negf	___awmod@divisor& (0+255),b
  6355  002990  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  6356  002992  B0D8               	btfsc	status,0,c
  6357  002994  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  6358  002996                     l4798:
  6359                           
  6360                           ; BSR set to: 0
  6361  002996  0100               	movlb	0	; () banked
  6362  002998  5182               	movf	___awmod@divisor& (0+255),w,b
  6363  00299A  0100               	movlb	0	; () banked
  6364  00299C  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6365  00299E  B4D8               	btfsc	status,2,c
  6366  0029A0  D026               	goto	l4814
  6367                           
  6368                           ; BSR set to: 0
  6369  0029A2  0E01               	movlw	1
  6370  0029A4  0100               	movlb	0	; () banked
  6371  0029A6  6F84               	movwf	___awmod@counter& (0+255),b
  6372  0029A8  D006               	goto	l4804
  6373  0029AA                     l4802:
  6374                           
  6375                           ; BSR set to: 0
  6376  0029AA  0100               	movlb	0	; () banked
  6377  0029AC  90D8               	bcf	status,0,c
  6378  0029AE  3782               	rlcf	___awmod@divisor& (0+255),f,b
  6379  0029B0  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6380  0029B2  0100               	movlb	0	; () banked
  6381  0029B4  2B84               	incf	___awmod@counter& (0+255),f,b
  6382  0029B6                     l4804:
  6383                           
  6384                           ; BSR set to: 0
  6385  0029B6  0100               	movlb	0	; () banked
  6386  0029B8  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6387  0029BA  D7F7               	goto	l4802
  6388  0029BC                     l4806:
  6389                           
  6390                           ; BSR set to: 0
  6391  0029BC  0100               	movlb	0	; () banked
  6392  0029BE  5182               	movf	___awmod@divisor& (0+255),w,b
  6393  0029C0  0100               	movlb	0	; () banked
  6394  0029C2  5D80               	subwf	___awmod@dividend& (0+255),w,b
  6395  0029C4  0100               	movlb	0	; () banked
  6396  0029C6  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6397  0029C8  0100               	movlb	0	; () banked
  6398  0029CA  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6399  0029CC  A0D8               	btfss	status,0,c
  6400  0029CE  D008               	goto	l4810
  6401                           
  6402                           ; BSR set to: 0
  6403  0029D0  0100               	movlb	0	; () banked
  6404  0029D2  5182               	movf	___awmod@divisor& (0+255),w,b
  6405  0029D4  0100               	movlb	0	; () banked
  6406  0029D6  5F80               	subwf	___awmod@dividend& (0+255),f,b
  6407  0029D8  0100               	movlb	0	; () banked
  6408  0029DA  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6409  0029DC  0100               	movlb	0	; () banked
  6410  0029DE  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6411  0029E0                     l4810:
  6412                           
  6413                           ; BSR set to: 0
  6414  0029E0  0100               	movlb	0	; () banked
  6415  0029E2  90D8               	bcf	status,0,c
  6416  0029E4  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6417  0029E6  3382               	rrcf	___awmod@divisor& (0+255),f,b
  6418                           
  6419                           ; BSR set to: 0
  6420  0029E8  0100               	movlb	0	; () banked
  6421  0029EA  2F84               	decfsz	___awmod@counter& (0+255),f,b
  6422  0029EC  D7E7               	goto	l4806
  6423  0029EE                     l4814:
  6424                           
  6425                           ; BSR set to: 0
  6426  0029EE  0100               	movlb	0	; () banked
  6427  0029F0  5185               	movf	___awmod@sign& (0+255),w,b
  6428  0029F2  0100               	movlb	0	; () banked
  6429  0029F4  B4D8               	btfsc	status,2,c
  6430  0029F6  D005               	goto	l4818
  6431                           
  6432                           ; BSR set to: 0
  6433  0029F8  0100               	movlb	0	; () banked
  6434  0029FA  6D80               	negf	___awmod@dividend& (0+255),b
  6435  0029FC  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6436  0029FE  B0D8               	btfsc	status,0,c
  6437  002A00  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6438  002A02                     l4818:
  6439                           
  6440                           ; BSR set to: 0
  6441  002A02  C080  F080         	movff	___awmod@dividend,?___awmod
  6442  002A06  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  6443  002A0A  0012               	return	
  6444  002A0C                     __end_of___awmod:
  6445                           	opt stack 0
  6446                           tosu	equ	0xFFF
  6447                           tosh	equ	0xFFE
  6448                           tosl	equ	0xFFD
  6449                           pclath	equ	0xFFA
  6450                           tblptru	equ	0xFF8
  6451                           tblptrh	equ	0xFF7
  6452                           tblptrl	equ	0xFF6
  6453                           tablat	equ	0xFF5
  6454                           prodh	equ	0xFF4
  6455                           prodl	equ	0xFF3
  6456                           intcon	equ	0xFF2
  6457                           intcon2	equ	0xFF1
  6458                           intcon3	equ	0xFF0
  6459                           indf0	equ	0xFEF
  6460                           postinc0	equ	0xFEE
  6461                           fsr0h	equ	0xFEA
  6462                           fsr0l	equ	0xFE9
  6463                           wreg	equ	0xFE8
  6464                           indf1	equ	0xFE7
  6465                           postinc1	equ	0xFE6
  6466                           postdec1	equ	0xFE5
  6467                           fsr1h	equ	0xFE2
  6468                           fsr1l	equ	0xFE1
  6469                           indf2	equ	0xFDF
  6470                           postinc2	equ	0xFDE
  6471                           postdec2	equ	0xFDD
  6472                           fsr2h	equ	0xFDA
  6473                           fsr2l	equ	0xFD9
  6474                           status	equ	0xFD8
  6475                           
  6476 ;; *************** function ___awdiv *****************
  6477 ;; Defined at:
  6478 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6479 ;; Parameters:    Size  Location     Type
  6480 ;;  dividend        2    0[BANK0 ] int 
  6481 ;;  divisor         2    2[BANK0 ] int 
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;  quotient        2    6[BANK0 ] int 
  6484 ;;  sign            1    5[BANK0 ] unsigned char 
  6485 ;;  counter         1    4[BANK0 ] unsigned char 
  6486 ;; Return value:  Size  Location     Type
  6487 ;;                  2    0[BANK0 ] int 
  6488 ;; Registers used:
  6489 ;;		wreg, status,2, status,0
  6490 ;; Tracked objects:
  6491 ;;		On entry : 0/0
  6492 ;;		On exit  : 0/0
  6493 ;;		Unchanged: 0/0
  6494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6495 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6496 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6498 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6499 ;;Total ram usage:        8 bytes
  6500 ;; Hardware stack levels used:    1
  6501 ;; Hardware stack levels required when called:    5
  6502 ;; This function calls:
  6503 ;;		Nothing
  6504 ;; This function is called by:
  6505 ;;		_update_display
  6506 ;;		_update_state
  6507 ;; This function uses a non-reentrant model
  6508 ;;
  6509                           
  6510                           	psect	text15
  6511  0027F0                     __ptext15:
  6512                           	opt stack 0
  6513  0027F0                     ___awdiv:
  6514                           	opt stack 24
  6515                           
  6516                           ; BSR set to: 0
  6517                           ;incstack = 0
  6518  0027F0  0E00               	movlw	0
  6519  0027F2  0100               	movlb	0	; () banked
  6520  0027F4  6F85               	movwf	___awdiv@sign& (0+255),b
  6521                           
  6522                           ; BSR set to: 0
  6523  0027F6  0100               	movlb	0	; () banked
  6524  0027F8  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6525  0027FA  D008               	goto	l4750
  6526                           
  6527                           ; BSR set to: 0
  6528  0027FC  0100               	movlb	0	; () banked
  6529  0027FE  6D82               	negf	___awdiv@divisor& (0+255),b
  6530  002800  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6531  002802  B0D8               	btfsc	status,0,c
  6532  002804  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6533                           
  6534                           ; BSR set to: 0
  6535  002806  0E01               	movlw	1
  6536  002808  0100               	movlb	0	; () banked
  6537  00280A  6F85               	movwf	___awdiv@sign& (0+255),b
  6538  00280C                     l4750:
  6539                           
  6540                           ; BSR set to: 0
  6541  00280C  0100               	movlb	0	; () banked
  6542  00280E  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6543  002810  D008               	goto	l4756
  6544                           
  6545                           ; BSR set to: 0
  6546  002812  0100               	movlb	0	; () banked
  6547  002814  6D80               	negf	___awdiv@dividend& (0+255),b
  6548  002816  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6549  002818  B0D8               	btfsc	status,0,c
  6550  00281A  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6551                           
  6552                           ; BSR set to: 0
  6553  00281C  0E01               	movlw	1
  6554  00281E  0100               	movlb	0	; () banked
  6555  002820  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  6556  002822                     l4756:
  6557                           
  6558                           ; BSR set to: 0
  6559  002822  0E00               	movlw	0
  6560  002824  0100               	movlb	0	; () banked
  6561  002826  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  6562  002828  0E00               	movlw	0
  6563  00282A  6F86               	movwf	___awdiv@quotient& (0+255),b
  6564                           
  6565                           ; BSR set to: 0
  6566  00282C  0100               	movlb	0	; () banked
  6567  00282E  5182               	movf	___awdiv@divisor& (0+255),w,b
  6568  002830  0100               	movlb	0	; () banked
  6569  002832  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6570  002834  B4D8               	btfsc	status,2,c
  6571  002836  D02C               	goto	l4778
  6572                           
  6573                           ; BSR set to: 0
  6574  002838  0E01               	movlw	1
  6575  00283A  0100               	movlb	0	; () banked
  6576  00283C  6F84               	movwf	___awdiv@counter& (0+255),b
  6577  00283E  D006               	goto	l4764
  6578  002840                     l4762:
  6579                           
  6580                           ; BSR set to: 0
  6581  002840  0100               	movlb	0	; () banked
  6582  002842  90D8               	bcf	status,0,c
  6583  002844  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  6584  002846  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6585  002848  0100               	movlb	0	; () banked
  6586  00284A  2B84               	incf	___awdiv@counter& (0+255),f,b
  6587  00284C                     l4764:
  6588                           
  6589                           ; BSR set to: 0
  6590  00284C  0100               	movlb	0	; () banked
  6591  00284E  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6592  002850  D7F7               	goto	l4762
  6593  002852                     l4766:
  6594                           
  6595                           ; BSR set to: 0
  6596  002852  0100               	movlb	0	; () banked
  6597  002854  90D8               	bcf	status,0,c
  6598  002856  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  6599  002858  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6600                           
  6601                           ; BSR set to: 0
  6602  00285A  0100               	movlb	0	; () banked
  6603  00285C  5182               	movf	___awdiv@divisor& (0+255),w,b
  6604  00285E  0100               	movlb	0	; () banked
  6605  002860  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  6606  002862  0100               	movlb	0	; () banked
  6607  002864  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6608  002866  0100               	movlb	0	; () banked
  6609  002868  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6610  00286A  A0D8               	btfss	status,0,c
  6611  00286C  D00A               	goto	l4774
  6612                           
  6613                           ; BSR set to: 0
  6614  00286E  0100               	movlb	0	; () banked
  6615  002870  5182               	movf	___awdiv@divisor& (0+255),w,b
  6616  002872  0100               	movlb	0	; () banked
  6617  002874  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  6618  002876  0100               	movlb	0	; () banked
  6619  002878  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6620  00287A  0100               	movlb	0	; () banked
  6621  00287C  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6622                           
  6623                           ; BSR set to: 0
  6624  00287E  0100               	movlb	0	; () banked
  6625  002880  8186               	bsf	___awdiv@quotient& (0+255),0,b
  6626  002882                     l4774:
  6627                           
  6628                           ; BSR set to: 0
  6629  002882  0100               	movlb	0	; () banked
  6630  002884  90D8               	bcf	status,0,c
  6631  002886  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6632  002888  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  6633                           
  6634                           ; BSR set to: 0
  6635  00288A  0100               	movlb	0	; () banked
  6636  00288C  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  6637  00288E  D7E1               	goto	l4766
  6638  002890                     l4778:
  6639                           
  6640                           ; BSR set to: 0
  6641  002890  0100               	movlb	0	; () banked
  6642  002892  5185               	movf	___awdiv@sign& (0+255),w,b
  6643  002894  0100               	movlb	0	; () banked
  6644  002896  B4D8               	btfsc	status,2,c
  6645  002898  D005               	goto	l4782
  6646                           
  6647                           ; BSR set to: 0
  6648  00289A  0100               	movlb	0	; () banked
  6649  00289C  6D86               	negf	___awdiv@quotient& (0+255),b
  6650  00289E  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6651  0028A0  B0D8               	btfsc	status,0,c
  6652  0028A2  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6653  0028A4                     l4782:
  6654                           
  6655                           ; BSR set to: 0
  6656  0028A4  C086  F080         	movff	___awdiv@quotient,?___awdiv
  6657  0028A8  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  6658  0028AC  0012               	return	
  6659  0028AE                     __end_of___awdiv:
  6660                           	opt stack 0
  6661                           tosu	equ	0xFFF
  6662                           tosh	equ	0xFFE
  6663                           tosl	equ	0xFFD
  6664                           pclath	equ	0xFFA
  6665                           tblptru	equ	0xFF8
  6666                           tblptrh	equ	0xFF7
  6667                           tblptrl	equ	0xFF6
  6668                           tablat	equ	0xFF5
  6669                           prodh	equ	0xFF4
  6670                           prodl	equ	0xFF3
  6671                           intcon	equ	0xFF2
  6672                           intcon2	equ	0xFF1
  6673                           intcon3	equ	0xFF0
  6674                           indf0	equ	0xFEF
  6675                           postinc0	equ	0xFEE
  6676                           fsr0h	equ	0xFEA
  6677                           fsr0l	equ	0xFE9
  6678                           wreg	equ	0xFE8
  6679                           indf1	equ	0xFE7
  6680                           postinc1	equ	0xFE6
  6681                           postdec1	equ	0xFE5
  6682                           fsr1h	equ	0xFE2
  6683                           fsr1l	equ	0xFE1
  6684                           indf2	equ	0xFDF
  6685                           postinc2	equ	0xFDE
  6686                           postdec2	equ	0xFDD
  6687                           fsr2h	equ	0xFDA
  6688                           fsr2l	equ	0xFD9
  6689                           status	equ	0xFD8
  6690                           
  6691 ;; *************** function _update_RTC *****************
  6692 ;; Defined at:
  6693 ;;		line 164 in file "main.c"
  6694 ;; Parameters:    Size  Location     Type
  6695 ;;		None
  6696 ;; Auto vars:     Size  Location     Type
  6697 ;;  i               1   10[BANK0 ] unsigned char 
  6698 ;; Return value:  Size  Location     Type
  6699 ;;                  1    wreg      void 
  6700 ;; Registers used:
  6701 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6702 ;; Tracked objects:
  6703 ;;		On entry : 0/0
  6704 ;;		On exit  : 0/0
  6705 ;;		Unchanged: 0/0
  6706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6708 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6709 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6710 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6711 ;;Total ram usage:        5 bytes
  6712 ;; Hardware stack levels used:    1
  6713 ;; Hardware stack levels required when called:    7
  6714 ;; This function calls:
  6715 ;;		_I2C_Master_Read
  6716 ;;		_I2C_Master_Start
  6717 ;;		_I2C_Master_Stop
  6718 ;;		_I2C_Master_Write
  6719 ;;		___wmul
  6720 ;; This function is called by:
  6721 ;;		_main
  6722 ;; This function uses a non-reentrant model
  6723 ;;
  6724                           
  6725                           	psect	text16
  6726  002586                     __ptext16:
  6727                           	opt stack 0
  6728  002586                     _update_RTC:
  6729                           	opt stack 23
  6730                           
  6731                           ;main.c: 167: I2C_Master_Start();
  6732                           
  6733                           ; BSR set to: 0
  6734                           ;incstack = 0
  6735  002586  ECC7  F018         	call	_I2C_Master_Start	;wreg free
  6736                           
  6737                           ;main.c: 168: I2C_Master_Write(0b11010000);
  6738  00258A  0E00               	movlw	0
  6739  00258C  0100               	movlb	0	; () banked
  6740  00258E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6741  002590  0ED0               	movlw	208
  6742  002592  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6743  002594  ECBE  F018         	call	_I2C_Master_Write	;wreg free
  6744                           
  6745                           ;main.c: 169: I2C_Master_Write(0x00);
  6746  002598  0E00               	movlw	0
  6747  00259A  0100               	movlb	0	; () banked
  6748  00259C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6749  00259E  0E00               	movlw	0
  6750  0025A0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6751  0025A2  ECBE  F018         	call	_I2C_Master_Write	;wreg free
  6752                           
  6753                           ;main.c: 170: I2C_Master_Stop();
  6754  0025A6  ECC3  F018         	call	_I2C_Master_Stop	;wreg free
  6755                           
  6756                           ;main.c: 173: I2C_Master_Start();
  6757  0025AA  ECC7  F018         	call	_I2C_Master_Start	;wreg free
  6758                           
  6759                           ;main.c: 174: I2C_Master_Write(0b11010001);
  6760  0025AE  0E00               	movlw	0
  6761  0025B0  0100               	movlb	0	; () banked
  6762  0025B2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6763  0025B4  0ED1               	movlw	209
  6764  0025B6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6765  0025B8  ECBE  F018         	call	_I2C_Master_Write	;wreg free
  6766                           
  6767                           ;main.c: 175: for(unsigned char i=0;i<0x06;i++){
  6768  0025BC  0E00               	movlw	0
  6769  0025BE  0100               	movlb	0	; () banked
  6770  0025C0  6F8A               	movwf	update_RTC@i& (0+255),b
  6771  0025C2                     l5100:
  6772                           
  6773                           ; BSR set to: 0
  6774  0025C2  0E05               	movlw	5
  6775  0025C4  0100               	movlb	0	; () banked
  6776  0025C6  658A               	cpfsgt	update_RTC@i& (0+255),b
  6777  0025C8  D001               	goto	l5104
  6778  0025CA  D047               	goto	l5112
  6779  0025CC                     l5104:
  6780                           
  6781                           ; BSR set to: 0
  6782                           ;main.c: 176: time[i] = I2C_Master_Read(1);
  6783  0025CC  0100               	movlb	0	; () banked
  6784  0025CE  518A               	movf	update_RTC@i& (0+255),w,b
  6785  0025D0  0D01               	mullw	1
  6786  0025D2  0ECE               	movlw	low _time
  6787  0025D4  24F3               	addwf	prodl,w,c
  6788  0025D6  6ED9               	movwf	fsr2l,c
  6789  0025D8  0E00               	movlw	high _time
  6790  0025DA  20F4               	addwfc	prodh,w,c
  6791  0025DC  6EDA               	movwf	fsr2h,c
  6792  0025DE  0E01               	movlw	1
  6793  0025E0  EC1F  F018         	call	_I2C_Master_Read
  6794  0025E4  6EDF               	movwf	indf2,c
  6795                           
  6796                           ;main.c: 177: time_i[i]=(time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  6797  0025E6  0100               	movlb	0	; () banked
  6798  0025E8  518A               	movf	update_RTC@i& (0+255),w,b
  6799  0025EA  0D01               	mullw	1
  6800  0025EC  0ECE               	movlw	low _time
  6801  0025EE  24F3               	addwf	prodl,w,c
  6802  0025F0  6ED9               	movwf	fsr2l,c
  6803  0025F2  0E00               	movlw	high _time
  6804  0025F4  20F4               	addwfc	prodh,w,c
  6805  0025F6  6EDA               	movwf	fsr2h,c
  6806  0025F8  50DF               	movf	indf2,w,c
  6807  0025FA  0B0F               	andlw	15
  6808  0025FC  0100               	movlb	0	; () banked
  6809  0025FE  6F86               	movwf	??_update_RTC& (0+255),b
  6810  002600  6B87               	clrf	(??_update_RTC+1)& (0+255),b
  6811  002602  0100               	movlb	0	; () banked
  6812  002604  518A               	movf	update_RTC@i& (0+255),w,b
  6813  002606  0D01               	mullw	1
  6814  002608  0ECE               	movlw	low _time
  6815  00260A  24F3               	addwf	prodl,w,c
  6816  00260C  6ED9               	movwf	fsr2l,c
  6817  00260E  0E00               	movlw	high _time
  6818  002610  20F4               	addwfc	prodh,w,c
  6819  002612  6EDA               	movwf	fsr2h,c
  6820  002614  50DF               	movf	indf2,w,c
  6821  002616  0100               	movlb	0	; () banked
  6822  002618  6F88               	movwf	(??_update_RTC+2)& (0+255),b
  6823  00261A  0100               	movlb	0	; () banked
  6824  00261C  3B88               	swapf	(??_update_RTC+2)& (0+255),f,b
  6825  00261E  0E0F               	movlw	15
  6826  002620  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  6827  002622  0E0F               	movlw	15
  6828  002624  0100               	movlb	0	; () banked
  6829  002626  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  6830  002628  0100               	movlb	0	; () banked
  6831  00262A  5188               	movf	(??_update_RTC+2)& (0+255),w,b
  6832  00262C  0D0A               	mullw	10
  6833  00262E  50F3               	movf	prodl,w,c
  6834  002630  0100               	movlb	0	; () banked
  6835  002632  2786               	addwf	??_update_RTC& (0+255),f,b
  6836  002634  50F4               	movf	prodh,w,c
  6837  002636  0100               	movlb	0	; () banked
  6838  002638  2387               	addwfc	(??_update_RTC+1)& (0+255),f,b
  6839  00263A  0100               	movlb	0	; () banked
  6840  00263C  518A               	movf	update_RTC@i& (0+255),w,b
  6841  00263E  0D02               	mullw	2
  6842  002640  0E3E               	movlw	low _time_i
  6843  002642  24F3               	addwf	prodl,w,c
  6844  002644  6ED9               	movwf	fsr2l,c
  6845  002646  0E00               	movlw	high _time_i
  6846  002648  20F4               	addwfc	prodh,w,c
  6847  00264A  6EDA               	movwf	fsr2h,c
  6848  00264C  C086  FFDE         	movff	??_update_RTC,postinc2
  6849  002650  C087  FFDD         	movff	??_update_RTC+1,postdec2
  6850                           
  6851                           ; BSR set to: 0
  6852  002654  0100               	movlb	0	; () banked
  6853  002656  2B8A               	incf	update_RTC@i& (0+255),f,b
  6854  002658  D7B4               	goto	l5100
  6855  00265A                     l5112:
  6856                           
  6857                           ; BSR set to: 0
  6858                           ;main.c: 178: }
  6859                           ;main.c: 179: timeDiff=time_i[1]*60-startTime[1]*60+time_i[0]-startTime[0];
  6860  00265A  C10E  F086         	movff	_startTime,??_update_RTC
  6861  00265E  C10F  F087         	movff	_startTime+1,??_update_RTC+1
  6862  002662  0100               	movlb	0	; () banked
  6863  002664  1F86               	comf	??_update_RTC& (0+255),f,b
  6864  002666  1F87               	comf	(??_update_RTC+1)& (0+255),f,b
  6865  002668  4B86               	infsnz	??_update_RTC& (0+255),f,b
  6866  00266A  2B87               	incf	(??_update_RTC+1)& (0+255),f,b
  6867  00266C  C040  F080         	movff	_time_i+2,___wmul@multiplier
  6868  002670  C041  F081         	movff	_time_i+3,___wmul@multiplier+1
  6869  002674  0E00               	movlw	0
  6870  002676  0100               	movlb	0	; () banked
  6871  002678  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6872  00267A  0E3C               	movlw	60
  6873  00267C  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6874  00267E  ECD0  F017         	call	___wmul	;wreg free
  6875  002682  C080  F088         	movff	?___wmul,??_update_RTC+2
  6876  002686  C081  F089         	movff	?___wmul+1,??_update_RTC+3
  6877  00268A  C110  F080         	movff	_startTime+2,___wmul@multiplier
  6878  00268E  C111  F081         	movff	_startTime+3,___wmul@multiplier+1
  6879  002692  0E00               	movlw	0
  6880  002694  0100               	movlb	0	; () banked
  6881  002696  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6882  002698  0E3C               	movlw	60
  6883  00269A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6884  00269C  ECD0  F017         	call	___wmul	;wreg free
  6885  0026A0  0100               	movlb	0	; () banked
  6886  0026A2  1F80               	comf	?___wmul& (0+255),f,b
  6887  0026A4  0100               	movlb	0	; () banked
  6888  0026A6  1F81               	comf	(?___wmul+1)& (0+255),f,b
  6889  0026A8  0100               	movlb	0	; () banked
  6890  0026AA  4B80               	infsnz	?___wmul& (0+255),f,b
  6891  0026AC  2B81               	incf	(?___wmul+1)& (0+255),f,b
  6892  0026AE  0100               	movlb	0	; () banked
  6893  0026B0  5180               	movf	?___wmul& (0+255),w,b
  6894  0026B2  0100               	movlb	0	; () banked
  6895  0026B4  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  6896  0026B6  0100               	movlb	0	; () banked
  6897  0026B8  5181               	movf	(?___wmul+1)& (0+255),w,b
  6898  0026BA  0100               	movlb	0	; () banked
  6899  0026BC  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  6900  0026BE  0100               	movlb	0	; () banked
  6901  0026C0  5186               	movf	??_update_RTC& (0+255),w,b
  6902  0026C2  0100               	movlb	0	; () banked
  6903  0026C4  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  6904  0026C6  0100               	movlb	0	; () banked
  6905  0026C8  5187               	movf	(??_update_RTC+1)& (0+255),w,b
  6906  0026CA  0100               	movlb	0	; () banked
  6907  0026CC  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  6908  0026CE  503E               	movf	_time_i,w,c
  6909  0026D0  0100               	movlb	0	; () banked
  6910  0026D2  2588               	addwf	(??_update_RTC+2)& (0+255),w,b
  6911  0026D4  0100               	movlb	0	; () banked
  6912  0026D6  6FDD               	movwf	_timeDiff& (0+255),b
  6913  0026D8  503F               	movf	_time_i+1,w,c
  6914  0026DA  0100               	movlb	0	; () banked
  6915  0026DC  2189               	addwfc	(??_update_RTC+3)& (0+255),w,b
  6916  0026DE  0100               	movlb	0	; () banked
  6917  0026E0  6FDE               	movwf	(_timeDiff+1)& (0+255),b
  6918                           
  6919                           ; BSR set to: 0
  6920                           ;main.c: 180: time[6] = I2C_Master_Read(0);
  6921  0026E2  0E00               	movlw	0
  6922  0026E4  EC1F  F018         	call	_I2C_Master_Read
  6923  0026E8  0100               	movlb	0	; () banked
  6924  0026EA  6FD4               	movwf	(_time+6)& (0+255),b
  6925                           
  6926                           ; BSR set to: 0
  6927                           ;main.c: 181: I2C_Master_Stop();
  6928  0026EC  ECC3  F018         	call	_I2C_Master_Stop	;wreg free
  6929  0026F0  0012               	return		;funcret
  6930  0026F2                     __end_of_update_RTC:
  6931                           	opt stack 0
  6932                           tosu	equ	0xFFF
  6933                           tosh	equ	0xFFE
  6934                           tosl	equ	0xFFD
  6935                           pclath	equ	0xFFA
  6936                           tblptru	equ	0xFF8
  6937                           tblptrh	equ	0xFF7
  6938                           tblptrl	equ	0xFF6
  6939                           tablat	equ	0xFF5
  6940                           prodh	equ	0xFF4
  6941                           prodl	equ	0xFF3
  6942                           intcon	equ	0xFF2
  6943                           intcon2	equ	0xFF1
  6944                           intcon3	equ	0xFF0
  6945                           indf0	equ	0xFEF
  6946                           postinc0	equ	0xFEE
  6947                           fsr0h	equ	0xFEA
  6948                           fsr0l	equ	0xFE9
  6949                           wreg	equ	0xFE8
  6950                           indf1	equ	0xFE7
  6951                           postinc1	equ	0xFE6
  6952                           postdec1	equ	0xFE5
  6953                           fsr1h	equ	0xFE2
  6954                           fsr1l	equ	0xFE1
  6955                           indf2	equ	0xFDF
  6956                           postinc2	equ	0xFDE
  6957                           postdec2	equ	0xFDD
  6958                           fsr2h	equ	0xFDA
  6959                           fsr2l	equ	0xFD9
  6960                           status	equ	0xFD8
  6961                           
  6962 ;; *************** function ___wmul *****************
  6963 ;; Defined at:
  6964 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  6965 ;; Parameters:    Size  Location     Type
  6966 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6967 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6968 ;; Auto vars:     Size  Location     Type
  6969 ;;  product         2    4[BANK0 ] unsigned int 
  6970 ;; Return value:  Size  Location     Type
  6971 ;;                  2    0[BANK0 ] unsigned int 
  6972 ;; Registers used:
  6973 ;;		wreg, status,2, status,0, prodl, prodh
  6974 ;; Tracked objects:
  6975 ;;		On entry : 0/0
  6976 ;;		On exit  : 0/0
  6977 ;;		Unchanged: 0/0
  6978 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6979 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;Total ram usage:        6 bytes
  6984 ;; Hardware stack levels used:    1
  6985 ;; Hardware stack levels required when called:    5
  6986 ;; This function calls:
  6987 ;;		Nothing
  6988 ;; This function is called by:
  6989 ;;		_update_RTC
  6990 ;;		_display_menu
  6991 ;;		__doprnt
  6992 ;;		_sort
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           	psect	text17
  6997  002FA0                     __ptext17:
  6998                           	opt stack 0
  6999  002FA0                     ___wmul:
  7000                           	opt stack 22
  7001                           
  7002                           ;incstack = 0
  7003  002FA0  0100               	movlb	0	; () banked
  7004  002FA2  5180               	movf	___wmul@multiplier& (0+255),w,b
  7005  002FA4  0100               	movlb	0	; () banked
  7006  002FA6  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7007  002FA8  CFF3 F084          	movff	prodl,___wmul@product
  7008  002FAC  CFF4 F085          	movff	prodh,___wmul@product+1
  7009  002FB0  0100               	movlb	0	; () banked
  7010  002FB2  5180               	movf	___wmul@multiplier& (0+255),w,b
  7011  002FB4  0100               	movlb	0	; () banked
  7012  002FB6  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7013  002FB8  50F3               	movf	prodl,w,c
  7014  002FBA  0100               	movlb	0	; () banked
  7015  002FBC  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7016  002FBE  0100               	movlb	0	; () banked
  7017  002FC0  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7018  002FC2  0100               	movlb	0	; () banked
  7019  002FC4  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7020  002FC6  50F3               	movf	prodl,w,c
  7021  002FC8  0100               	movlb	0	; () banked
  7022  002FCA  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7023                           
  7024                           ; BSR set to: 0
  7025  002FCC  C084  F080         	movff	___wmul@product,?___wmul
  7026  002FD0  C085  F081         	movff	___wmul@product+1,?___wmul+1
  7027  002FD4  0012               	return	
  7028  002FD6                     __end_of___wmul:
  7029                           	opt stack 0
  7030                           tosu	equ	0xFFF
  7031                           tosh	equ	0xFFE
  7032                           tosl	equ	0xFFD
  7033                           pclath	equ	0xFFA
  7034                           tblptru	equ	0xFF8
  7035                           tblptrh	equ	0xFF7
  7036                           tblptrl	equ	0xFF6
  7037                           tablat	equ	0xFF5
  7038                           prodh	equ	0xFF4
  7039                           prodl	equ	0xFF3
  7040                           intcon	equ	0xFF2
  7041                           intcon2	equ	0xFF1
  7042                           intcon3	equ	0xFF0
  7043                           indf0	equ	0xFEF
  7044                           postinc0	equ	0xFEE
  7045                           fsr0h	equ	0xFEA
  7046                           fsr0l	equ	0xFE9
  7047                           wreg	equ	0xFE8
  7048                           indf1	equ	0xFE7
  7049                           postinc1	equ	0xFE6
  7050                           postdec1	equ	0xFE5
  7051                           fsr1h	equ	0xFE2
  7052                           fsr1l	equ	0xFE1
  7053                           indf2	equ	0xFDF
  7054                           postinc2	equ	0xFDE
  7055                           postdec2	equ	0xFDD
  7056                           fsr2h	equ	0xFDA
  7057                           fsr2l	equ	0xFD9
  7058                           status	equ	0xFD8
  7059                           
  7060 ;; *************** function _I2C_Master_Read *****************
  7061 ;; Defined at:
  7062 ;;		line 53 in file "I2C.c"
  7063 ;; Parameters:    Size  Location     Type
  7064 ;;  a               1    wreg     unsigned char 
  7065 ;; Auto vars:     Size  Location     Type
  7066 ;;  a               1    1[BANK0 ] unsigned char 
  7067 ;;  temp            1    2[BANK0 ] unsigned char 
  7068 ;; Return value:  Size  Location     Type
  7069 ;;                  1    wreg      unsigned char 
  7070 ;; Registers used:
  7071 ;;		wreg, status,2, status,0, cstack
  7072 ;; Tracked objects:
  7073 ;;		On entry : 0/0
  7074 ;;		On exit  : 0/0
  7075 ;;		Unchanged: 0/0
  7076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7078 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7079 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7080 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7081 ;;Total ram usage:        2 bytes
  7082 ;; Hardware stack levels used:    1
  7083 ;; Hardware stack levels required when called:    6
  7084 ;; This function calls:
  7085 ;;		_I2C_Master_Wait
  7086 ;; This function is called by:
  7087 ;;		_update_RTC
  7088 ;; This function uses a non-reentrant model
  7089 ;;
  7090                           
  7091                           	psect	text18
  7092  00303E                     __ptext18:
  7093                           	opt stack 0
  7094  00303E                     _I2C_Master_Read:
  7095                           	opt stack 23
  7096                           
  7097                           ; BSR set to: 0
  7098                           ;incstack = 0
  7099                           ;I2C_Master_Read@a stored from wreg
  7100  00303E  0100               	movlb	0	; () banked
  7101  003040  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7102                           
  7103                           ;I2C.c: 55: unsigned char temp;
  7104                           ;I2C.c: 56: I2C_Master_Wait();
  7105  003042  EC99  F018         	call	_I2C_Master_Wait	;wreg free
  7106                           
  7107                           ;I2C.c: 57: RCEN = 1;
  7108  003046  86C5               	bsf	4037,3,c	;volatile
  7109                           
  7110                           ;I2C.c: 58: I2C_Master_Wait();
  7111  003048  EC99  F018         	call	_I2C_Master_Wait	;wreg free
  7112                           
  7113                           ;I2C.c: 59: temp = SSPBUF;
  7114  00304C  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7115                           
  7116                           ;I2C.c: 60: I2C_Master_Wait();
  7117  003050  EC99  F018         	call	_I2C_Master_Wait	;wreg free
  7118                           
  7119                           ;I2C.c: 61: ACKDT = (a)?0:1;
  7120  003054  0100               	movlb	0	; () banked
  7121  003056  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7122  003058  0100               	movlb	0	; () banked
  7123  00305A  A4D8               	btfss	status,2,c
  7124  00305C  D002               	goto	u6170
  7125  00305E  8AC5               	bsf	4037,5,c	;volatile
  7126  003060  D001               	goto	l4648
  7127  003062                     u6170:
  7128  003062  9AC5               	bcf	4037,5,c	;volatile
  7129  003064                     l4648:
  7130                           
  7131                           ;I2C.c: 62: ACKEN = 1;
  7132  003064  88C5               	bsf	4037,4,c	;volatile
  7133                           
  7134                           ;I2C.c: 63: return temp;
  7135  003066  0100               	movlb	0	; () banked
  7136  003068  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7137  00306A  0012               	return	
  7138  00306C                     __end_of_I2C_Master_Read:
  7139                           	opt stack 0
  7140                           tosu	equ	0xFFF
  7141                           tosh	equ	0xFFE
  7142                           tosl	equ	0xFFD
  7143                           pclath	equ	0xFFA
  7144                           tblptru	equ	0xFF8
  7145                           tblptrh	equ	0xFF7
  7146                           tblptrl	equ	0xFF6
  7147                           tablat	equ	0xFF5
  7148                           prodh	equ	0xFF4
  7149                           prodl	equ	0xFF3
  7150                           intcon	equ	0xFF2
  7151                           intcon2	equ	0xFF1
  7152                           intcon3	equ	0xFF0
  7153                           indf0	equ	0xFEF
  7154                           postinc0	equ	0xFEE
  7155                           fsr0h	equ	0xFEA
  7156                           fsr0l	equ	0xFE9
  7157                           wreg	equ	0xFE8
  7158                           indf1	equ	0xFE7
  7159                           postinc1	equ	0xFE6
  7160                           postdec1	equ	0xFE5
  7161                           fsr1h	equ	0xFE2
  7162                           fsr1l	equ	0xFE1
  7163                           indf2	equ	0xFDF
  7164                           postinc2	equ	0xFDE
  7165                           postdec2	equ	0xFDD
  7166                           fsr2h	equ	0xFDA
  7167                           fsr2l	equ	0xFD9
  7168                           status	equ	0xFD8
  7169                           
  7170 ;; *************** function _set_time *****************
  7171 ;; Defined at:
  7172 ;;		line 400 in file "main.c"
  7173 ;; Parameters:    Size  Location     Type
  7174 ;;		None
  7175 ;; Auto vars:     Size  Location     Type
  7176 ;;  i               1    3[BANK0 ] unsigned char 
  7177 ;; Return value:  Size  Location     Type
  7178 ;;                  1    wreg      void 
  7179 ;; Registers used:
  7180 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7181 ;; Tracked objects:
  7182 ;;		On entry : 0/0
  7183 ;;		On exit  : 0/0
  7184 ;;		Unchanged: 0/0
  7185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7186 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7187 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7188 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7189 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7190 ;;Total ram usage:        1 bytes
  7191 ;; Hardware stack levels used:    1
  7192 ;; Hardware stack levels required when called:    7
  7193 ;; This function calls:
  7194 ;;		_I2C_Master_Start
  7195 ;;		_I2C_Master_Stop
  7196 ;;		_I2C_Master_Write
  7197 ;; This function is called by:
  7198 ;;		_main
  7199 ;; This function uses a non-reentrant model
  7200 ;;
  7201                           
  7202                           	psect	text19
  7203  002CB8                     __ptext19:
  7204                           	opt stack 0
  7205  002CB8                     _set_time:
  7206                           	opt stack 23
  7207                           
  7208                           ;main.c: 401: I2C_Master_Start();
  7209                           
  7210                           ; BSR set to: 0
  7211                           ;incstack = 0
  7212  002CB8  ECC7  F018         	call	_I2C_Master_Start	;wreg free
  7213                           
  7214                           ;main.c: 402: I2C_Master_Write(0b11010000);
  7215  002CBC  0E00               	movlw	0
  7216  002CBE  0100               	movlb	0	; () banked
  7217  002CC0  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7218  002CC2  0ED0               	movlw	208
  7219  002CC4  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7220  002CC6  ECBE  F018         	call	_I2C_Master_Write	;wreg free
  7221                           
  7222                           ;main.c: 403: I2C_Master_Write(0x00);
  7223  002CCA  0E00               	movlw	0
  7224  002CCC  0100               	movlb	0	; () banked
  7225  002CCE  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7226  002CD0  0E00               	movlw	0
  7227  002CD2  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7228  002CD4  ECBE  F018         	call	_I2C_Master_Write	;wreg free
  7229                           
  7230                           ;main.c: 404: for(char i=0; i<7; i++){
  7231  002CD8  0E00               	movlw	0
  7232  002CDA  0100               	movlb	0	; () banked
  7233  002CDC  6F83               	movwf	set_time@i& (0+255),b
  7234  002CDE                     l5084:
  7235                           
  7236                           ; BSR set to: 0
  7237  002CDE  0E06               	movlw	6
  7238  002CE0  0100               	movlb	0	; () banked
  7239  002CE2  6583               	cpfsgt	set_time@i& (0+255),b
  7240  002CE4  D001               	goto	l5088
  7241  002CE6  D016               	goto	l5094
  7242  002CE8                     l5088:
  7243                           
  7244                           ; BSR set to: 0
  7245                           ;main.c: 405: I2C_Master_Write(manualDateTime[i]);
  7246  002CE8  0100               	movlb	0	; () banked
  7247  002CEA  5183               	movf	set_time@i& (0+255),w,b
  7248  002CEC  0D01               	mullw	1
  7249  002CEE  0EF8               	movlw	low _manualDateTime
  7250  002CF0  24F3               	addwf	prodl,w,c
  7251  002CF2  6EF6               	movwf	tblptrl,c
  7252  002CF4  0EFE               	movlw	high _manualDateTime
  7253  002CF6  20F4               	addwfc	prodh,w,c
  7254  002CF8  6EF7               	movwf	tblptrh,c
  7255  002CFA                     	if	1	;There are 3 active tblptr bytes
  7256  002CFA  6AF8               	clrf	tblptru,c
  7257  002CFC  0E00               	movlw	low (__mediumconst shr (0+16))
  7258  002CFE  22F8               	addwfc	tblptru,f,c
  7259  002D00                     	endif
  7260  002D00  0008               	tblrd		*
  7261  002D02  50F5               	movf	tablat,w,c
  7262  002D04  0100               	movlb	0	; () banked
  7263  002D06  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7264  002D08  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7265  002D0A  ECBE  F018         	call	_I2C_Master_Write	;wreg free
  7266  002D0E  0100               	movlb	0	; () banked
  7267  002D10  2B83               	incf	set_time@i& (0+255),f,b
  7268  002D12  D7E5               	goto	l5084
  7269  002D14                     l5094:
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;main.c: 406: }
  7273                           ;main.c: 407: I2C_Master_Stop();
  7274  002D14  ECC3  F018         	call	_I2C_Master_Stop	;wreg free
  7275  002D18  0012               	return		;funcret
  7276  002D1A                     __end_of_set_time:
  7277                           	opt stack 0
  7278                           tosu	equ	0xFFF
  7279                           tosh	equ	0xFFE
  7280                           tosl	equ	0xFFD
  7281                           pclath	equ	0xFFA
  7282                           tblptru	equ	0xFF8
  7283                           tblptrh	equ	0xFF7
  7284                           tblptrl	equ	0xFF6
  7285                           tablat	equ	0xFF5
  7286                           prodh	equ	0xFF4
  7287                           prodl	equ	0xFF3
  7288                           intcon	equ	0xFF2
  7289                           intcon2	equ	0xFF1
  7290                           intcon3	equ	0xFF0
  7291                           indf0	equ	0xFEF
  7292                           postinc0	equ	0xFEE
  7293                           fsr0h	equ	0xFEA
  7294                           fsr0l	equ	0xFE9
  7295                           wreg	equ	0xFE8
  7296                           indf1	equ	0xFE7
  7297                           postinc1	equ	0xFE6
  7298                           postdec1	equ	0xFE5
  7299                           fsr1h	equ	0xFE2
  7300                           fsr1l	equ	0xFE1
  7301                           indf2	equ	0xFDF
  7302                           postinc2	equ	0xFDE
  7303                           postdec2	equ	0xFDD
  7304                           fsr2h	equ	0xFDA
  7305                           fsr2l	equ	0xFD9
  7306                           status	equ	0xFD8
  7307                           
  7308 ;; *************** function _I2C_Master_Write *****************
  7309 ;; Defined at:
  7310 ;;		line 47 in file "I2C.c"
  7311 ;; Parameters:    Size  Location     Type
  7312 ;;  d               2    1[BANK0 ] unsigned int 
  7313 ;; Auto vars:     Size  Location     Type
  7314 ;;		None
  7315 ;; Return value:  Size  Location     Type
  7316 ;;                  1    wreg      void 
  7317 ;; Registers used:
  7318 ;;		wreg, status,2, status,0, cstack
  7319 ;; Tracked objects:
  7320 ;;		On entry : 0/0
  7321 ;;		On exit  : 0/0
  7322 ;;		Unchanged: 0/0
  7323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7324 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7327 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7328 ;;Total ram usage:        2 bytes
  7329 ;; Hardware stack levels used:    1
  7330 ;; Hardware stack levels required when called:    6
  7331 ;; This function calls:
  7332 ;;		_I2C_Master_Wait
  7333 ;; This function is called by:
  7334 ;;		_update_RTC
  7335 ;;		_set_time
  7336 ;; This function uses a non-reentrant model
  7337 ;;
  7338                           
  7339                           	psect	text20
  7340  00317C                     __ptext20:
  7341                           	opt stack 0
  7342  00317C                     _I2C_Master_Write:
  7343                           	opt stack 23
  7344                           
  7345                           ;I2C.c: 49: I2C_Master_Wait();
  7346                           
  7347                           ;incstack = 0
  7348  00317C  EC99  F018         	call	_I2C_Master_Wait	;wreg free
  7349                           
  7350                           ;I2C.c: 50: SSPBUF = d;
  7351  003180  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7352  003184  0012               	return		;funcret
  7353  003186                     __end_of_I2C_Master_Write:
  7354                           	opt stack 0
  7355                           tosu	equ	0xFFF
  7356                           tosh	equ	0xFFE
  7357                           tosl	equ	0xFFD
  7358                           pclath	equ	0xFFA
  7359                           tblptru	equ	0xFF8
  7360                           tblptrh	equ	0xFF7
  7361                           tblptrl	equ	0xFF6
  7362                           tablat	equ	0xFF5
  7363                           prodh	equ	0xFF4
  7364                           prodl	equ	0xFF3
  7365                           intcon	equ	0xFF2
  7366                           intcon2	equ	0xFF1
  7367                           intcon3	equ	0xFF0
  7368                           indf0	equ	0xFEF
  7369                           postinc0	equ	0xFEE
  7370                           fsr0h	equ	0xFEA
  7371                           fsr0l	equ	0xFE9
  7372                           wreg	equ	0xFE8
  7373                           indf1	equ	0xFE7
  7374                           postinc1	equ	0xFE6
  7375                           postdec1	equ	0xFE5
  7376                           fsr1h	equ	0xFE2
  7377                           fsr1l	equ	0xFE1
  7378                           indf2	equ	0xFDF
  7379                           postinc2	equ	0xFDE
  7380                           postdec2	equ	0xFDD
  7381                           fsr2h	equ	0xFDA
  7382                           fsr2l	equ	0xFD9
  7383                           status	equ	0xFD8
  7384                           
  7385 ;; *************** function _I2C_Master_Stop *****************
  7386 ;; Defined at:
  7387 ;;		line 41 in file "I2C.c"
  7388 ;; Parameters:    Size  Location     Type
  7389 ;;		None
  7390 ;; Auto vars:     Size  Location     Type
  7391 ;;		None
  7392 ;; Return value:  Size  Location     Type
  7393 ;;                  1    wreg      void 
  7394 ;; Registers used:
  7395 ;;		wreg, status,2, status,0, cstack
  7396 ;; Tracked objects:
  7397 ;;		On entry : 0/0
  7398 ;;		On exit  : 0/0
  7399 ;;		Unchanged: 0/0
  7400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7405 ;;Total ram usage:        0 bytes
  7406 ;; Hardware stack levels used:    1
  7407 ;; Hardware stack levels required when called:    6
  7408 ;; This function calls:
  7409 ;;		_I2C_Master_Wait
  7410 ;; This function is called by:
  7411 ;;		_update_RTC
  7412 ;;		_set_time
  7413 ;; This function uses a non-reentrant model
  7414 ;;
  7415                           
  7416                           	psect	text21
  7417  003186                     __ptext21:
  7418                           	opt stack 0
  7419  003186                     _I2C_Master_Stop:
  7420                           	opt stack 23
  7421                           
  7422                           ;I2C.c: 43: I2C_Master_Wait();
  7423                           
  7424                           ;incstack = 0
  7425  003186  EC99  F018         	call	_I2C_Master_Wait	;wreg free
  7426                           
  7427                           ;I2C.c: 44: PEN = 1;
  7428  00318A  84C5               	bsf	4037,2,c	;volatile
  7429  00318C  0012               	return		;funcret
  7430  00318E                     __end_of_I2C_Master_Stop:
  7431                           	opt stack 0
  7432                           tosu	equ	0xFFF
  7433                           tosh	equ	0xFFE
  7434                           tosl	equ	0xFFD
  7435                           pclath	equ	0xFFA
  7436                           tblptru	equ	0xFF8
  7437                           tblptrh	equ	0xFF7
  7438                           tblptrl	equ	0xFF6
  7439                           tablat	equ	0xFF5
  7440                           prodh	equ	0xFF4
  7441                           prodl	equ	0xFF3
  7442                           intcon	equ	0xFF2
  7443                           intcon2	equ	0xFF1
  7444                           intcon3	equ	0xFF0
  7445                           indf0	equ	0xFEF
  7446                           postinc0	equ	0xFEE
  7447                           fsr0h	equ	0xFEA
  7448                           fsr0l	equ	0xFE9
  7449                           wreg	equ	0xFE8
  7450                           indf1	equ	0xFE7
  7451                           postinc1	equ	0xFE6
  7452                           postdec1	equ	0xFE5
  7453                           fsr1h	equ	0xFE2
  7454                           fsr1l	equ	0xFE1
  7455                           indf2	equ	0xFDF
  7456                           postinc2	equ	0xFDE
  7457                           postdec2	equ	0xFDD
  7458                           fsr2h	equ	0xFDA
  7459                           fsr2l	equ	0xFD9
  7460                           status	equ	0xFD8
  7461                           
  7462 ;; *************** function _I2C_Master_Start *****************
  7463 ;; Defined at:
  7464 ;;		line 29 in file "I2C.c"
  7465 ;; Parameters:    Size  Location     Type
  7466 ;;		None
  7467 ;; Auto vars:     Size  Location     Type
  7468 ;;		None
  7469 ;; Return value:  Size  Location     Type
  7470 ;;                  1    wreg      void 
  7471 ;; Registers used:
  7472 ;;		wreg, status,2, status,0, cstack
  7473 ;; Tracked objects:
  7474 ;;		On entry : 0/0
  7475 ;;		On exit  : 0/0
  7476 ;;		Unchanged: 0/0
  7477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7482 ;;Total ram usage:        0 bytes
  7483 ;; Hardware stack levels used:    1
  7484 ;; Hardware stack levels required when called:    6
  7485 ;; This function calls:
  7486 ;;		_I2C_Master_Wait
  7487 ;; This function is called by:
  7488 ;;		_update_RTC
  7489 ;;		_set_time
  7490 ;; This function uses a non-reentrant model
  7491 ;;
  7492                           
  7493                           	psect	text22
  7494  00318E                     __ptext22:
  7495                           	opt stack 0
  7496  00318E                     _I2C_Master_Start:
  7497                           	opt stack 23
  7498                           
  7499                           ;I2C.c: 31: I2C_Master_Wait();
  7500                           
  7501                           ;incstack = 0
  7502  00318E  EC99  F018         	call	_I2C_Master_Wait	;wreg free
  7503                           
  7504                           ;I2C.c: 32: SEN = 1;
  7505  003192  80C5               	bsf	4037,0,c	;volatile
  7506  003194  0012               	return		;funcret
  7507  003196                     __end_of_I2C_Master_Start:
  7508                           	opt stack 0
  7509                           tosu	equ	0xFFF
  7510                           tosh	equ	0xFFE
  7511                           tosl	equ	0xFFD
  7512                           pclath	equ	0xFFA
  7513                           tblptru	equ	0xFF8
  7514                           tblptrh	equ	0xFF7
  7515                           tblptrl	equ	0xFF6
  7516                           tablat	equ	0xFF5
  7517                           prodh	equ	0xFF4
  7518                           prodl	equ	0xFF3
  7519                           intcon	equ	0xFF2
  7520                           intcon2	equ	0xFF1
  7521                           intcon3	equ	0xFF0
  7522                           indf0	equ	0xFEF
  7523                           postinc0	equ	0xFEE
  7524                           fsr0h	equ	0xFEA
  7525                           fsr0l	equ	0xFE9
  7526                           wreg	equ	0xFE8
  7527                           indf1	equ	0xFE7
  7528                           postinc1	equ	0xFE6
  7529                           postdec1	equ	0xFE5
  7530                           fsr1h	equ	0xFE2
  7531                           fsr1l	equ	0xFE1
  7532                           indf2	equ	0xFDF
  7533                           postinc2	equ	0xFDE
  7534                           postdec2	equ	0xFDD
  7535                           fsr2h	equ	0xFDA
  7536                           fsr2l	equ	0xFD9
  7537                           status	equ	0xFD8
  7538                           
  7539 ;; *************** function _I2C_Master_Wait *****************
  7540 ;; Defined at:
  7541 ;;		line 24 in file "I2C.c"
  7542 ;; Parameters:    Size  Location     Type
  7543 ;;		None
  7544 ;; Auto vars:     Size  Location     Type
  7545 ;;		None
  7546 ;; Return value:  Size  Location     Type
  7547 ;;                  1    wreg      void 
  7548 ;; Registers used:
  7549 ;;		wreg, status,2, status,0
  7550 ;; Tracked objects:
  7551 ;;		On entry : 0/0
  7552 ;;		On exit  : 0/0
  7553 ;;		Unchanged: 0/0
  7554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7557 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7558 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7559 ;;Total ram usage:        1 bytes
  7560 ;; Hardware stack levels used:    1
  7561 ;; Hardware stack levels required when called:    5
  7562 ;; This function calls:
  7563 ;;		Nothing
  7564 ;; This function is called by:
  7565 ;;		_I2C_Master_Start
  7566 ;;		_I2C_Master_Stop
  7567 ;;		_I2C_Master_Write
  7568 ;;		_I2C_Master_Read
  7569 ;;		_I2C_Master_RepeatedStart
  7570 ;; This function uses a non-reentrant model
  7571 ;;
  7572                           
  7573                           	psect	text23
  7574  003132                     __ptext23:
  7575                           	opt stack 0
  7576  003132                     _I2C_Master_Wait:
  7577                           	opt stack 23
  7578  003132                     l34:
  7579  003132  B4C7               	btfsc	4039,2,c	;volatile
  7580  003134  D7FE               	goto	l34
  7581  003136  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  7582  00313A  0E1F               	movlw	31
  7583  00313C  0100               	movlb	0	; () banked
  7584  00313E  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7585  003140  B4D8               	btfsc	status,2,c
  7586  003142  0012               	return	
  7587  003144  D7F6               	goto	l34
  7588  003146                     __end_of_I2C_Master_Wait:
  7589                           	opt stack 0
  7590                           tosu	equ	0xFFF
  7591                           tosh	equ	0xFFE
  7592                           tosl	equ	0xFFD
  7593                           pclath	equ	0xFFA
  7594                           tblptru	equ	0xFF8
  7595                           tblptrh	equ	0xFF7
  7596                           tblptrl	equ	0xFF6
  7597                           tablat	equ	0xFF5
  7598                           prodh	equ	0xFF4
  7599                           prodl	equ	0xFF3
  7600                           intcon	equ	0xFF2
  7601                           intcon2	equ	0xFF1
  7602                           intcon3	equ	0xFF0
  7603                           indf0	equ	0xFEF
  7604                           postinc0	equ	0xFEE
  7605                           fsr0h	equ	0xFEA
  7606                           fsr0l	equ	0xFE9
  7607                           wreg	equ	0xFE8
  7608                           indf1	equ	0xFE7
  7609                           postinc1	equ	0xFE6
  7610                           postdec1	equ	0xFE5
  7611                           fsr1h	equ	0xFE2
  7612                           fsr1l	equ	0xFE1
  7613                           indf2	equ	0xFDF
  7614                           postinc2	equ	0xFDE
  7615                           postdec2	equ	0xFDD
  7616                           fsr2h	equ	0xFDA
  7617                           fsr2l	equ	0xFD9
  7618                           status	equ	0xFD8
  7619                           
  7620 ;; *************** function _read_sensors *****************
  7621 ;; Defined at:
  7622 ;;		line 411 in file "main.c"
  7623 ;; Parameters:    Size  Location     Type
  7624 ;;		None
  7625 ;; Auto vars:     Size  Location     Type
  7626 ;;  i               1    4[BANK0 ] unsigned char 
  7627 ;; Return value:  Size  Location     Type
  7628 ;;                  1    wreg      void 
  7629 ;; Registers used:
  7630 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7631 ;; Tracked objects:
  7632 ;;		On entry : 0/0
  7633 ;;		On exit  : 0/0
  7634 ;;		Unchanged: 0/0
  7635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7637 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7638 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7639 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7640 ;;Total ram usage:        3 bytes
  7641 ;; Hardware stack levels used:    1
  7642 ;; Hardware stack levels required when called:    6
  7643 ;; This function calls:
  7644 ;;		_readADC
  7645 ;; This function is called by:
  7646 ;;		_main
  7647 ;; This function uses a non-reentrant model
  7648 ;;
  7649                           
  7650                           	psect	text24
  7651  0021DE                     __ptext24:
  7652                           	opt stack 0
  7653  0021DE                     _read_sensors:
  7654                           	opt stack 24
  7655                           
  7656                           ;main.c: 412: if (state!='s'){
  7657                           
  7658                           ; BSR set to: 0
  7659                           ;incstack = 0
  7660  0021DE  0E73               	movlw	115
  7661  0021E0  0100               	movlb	0	; () banked
  7662  0021E2  19E9               	xorwf	_state& (0+255),w,b
  7663  0021E4  A4D8               	btfss	status,2,c
  7664  0021E6  0012               	return	
  7665                           
  7666                           ; BSR set to: 0
  7667                           ;main.c: 414: }
  7668                           ;main.c: 416: for(char i=0;i<5-1;i++){
  7669                           
  7670                           ; BSR set to: 0
  7671                           
  7672                           ; BSR set to: 0
  7673                           ;main.c: 413: return;
  7674  0021E8  0E00               	movlw	0
  7675  0021EA  0100               	movlb	0	; () banked
  7676  0021EC  6F84               	movwf	read_sensors@i& (0+255),b
  7677  0021EE                     l5124:
  7678                           
  7679                           ; BSR set to: 0
  7680  0021EE  0E03               	movlw	3
  7681  0021F0  0100               	movlb	0	; () banked
  7682  0021F2  6584               	cpfsgt	read_sensors@i& (0+255),b
  7683  0021F4  D001               	goto	l5128
  7684  0021F6  D0B2               	goto	l5134
  7685  0021F8                     l5128:
  7686                           
  7687                           ; BSR set to: 0
  7688                           ;main.c: 417: PROX1[i+1]=PROX1[i];
  7689  0021F8  0100               	movlb	0	; () banked
  7690  0021FA  5184               	movf	read_sensors@i& (0+255),w,b
  7691  0021FC  0D02               	mullw	2
  7692  0021FE  0E4C               	movlw	low _PROX1
  7693  002200  24F3               	addwf	prodl,w,c
  7694  002202  6ED9               	movwf	fsr2l,c
  7695  002204  0E00               	movlw	high _PROX1
  7696  002206  20F4               	addwfc	prodh,w,c
  7697  002208  6EDA               	movwf	fsr2h,c
  7698  00220A  0100               	movlb	0	; () banked
  7699  00220C  5184               	movf	read_sensors@i& (0+255),w,b
  7700  00220E  0100               	movlb	0	; () banked
  7701  002210  6F82               	movwf	??_read_sensors& (0+255),b
  7702  002212  6B83               	clrf	(??_read_sensors+1)& (0+255),b
  7703  002214  90D8               	bcf	status,0,c
  7704  002216  0100               	movlb	0	; () banked
  7705  002218  3782               	rlcf	??_read_sensors& (0+255),f,b
  7706  00221A  3783               	rlcf	(??_read_sensors+1)& (0+255),f,b
  7707  00221C  0E02               	movlw	2
  7708  00221E  0100               	movlb	0	; () banked
  7709  002220  2782               	addwf	??_read_sensors& (0+255),f,b
  7710  002222  0E00               	movlw	0
  7711  002224  2383               	addwfc	(??_read_sensors+1)& (0+255),f,b
  7712  002226  0E4C               	movlw	low _PROX1
  7713  002228  0100               	movlb	0	; () banked
  7714  00222A  2582               	addwf	??_read_sensors& (0+255),w,b
  7715  00222C  6EE1               	movwf	fsr1l,c
  7716  00222E  0E00               	movlw	high _PROX1
  7717  002230  0100               	movlb	0	; () banked
  7718  002232  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7719  002234  6EE2               	movwf	fsr1h,c
  7720  002236  CFDE FFE6          	movff	postinc2,postinc1
  7721  00223A  CFDD FFE5          	movff	postdec2,postdec1
  7722                           
  7723                           ;main.c: 418: PROX2[i+1]=PROX2[i];
  7724  00223E  0100               	movlb	0	; () banked
  7725  002240  5184               	movf	read_sensors@i& (0+255),w,b
  7726  002242  0D02               	mullw	2
  7727  002244  0E56               	movlw	low _PROX2
  7728  002246  24F3               	addwf	prodl,w,c
  7729  002248  6ED9               	movwf	fsr2l,c
  7730  00224A  0E00               	movlw	high _PROX2
  7731  00224C  20F4               	addwfc	prodh,w,c
  7732  00224E  6EDA               	movwf	fsr2h,c
  7733  002250  0100               	movlb	0	; () banked
  7734  002252  5184               	movf	read_sensors@i& (0+255),w,b
  7735  002254  0100               	movlb	0	; () banked
  7736  002256  6F82               	movwf	??_read_sensors& (0+255),b
  7737  002258  6B83               	clrf	(??_read_sensors+1)& (0+255),b
  7738  00225A  90D8               	bcf	status,0,c
  7739  00225C  0100               	movlb	0	; () banked
  7740  00225E  3782               	rlcf	??_read_sensors& (0+255),f,b
  7741  002260  3783               	rlcf	(??_read_sensors+1)& (0+255),f,b
  7742  002262  0E02               	movlw	2
  7743  002264  0100               	movlb	0	; () banked
  7744  002266  2782               	addwf	??_read_sensors& (0+255),f,b
  7745  002268  0E00               	movlw	0
  7746  00226A  2383               	addwfc	(??_read_sensors+1)& (0+255),f,b
  7747  00226C  0E56               	movlw	low _PROX2
  7748  00226E  0100               	movlb	0	; () banked
  7749  002270  2582               	addwf	??_read_sensors& (0+255),w,b
  7750  002272  6EE1               	movwf	fsr1l,c
  7751  002274  0E00               	movlw	high _PROX2
  7752  002276  0100               	movlb	0	; () banked
  7753  002278  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7754  00227A  6EE2               	movwf	fsr1h,c
  7755  00227C  CFDE FFE6          	movff	postinc2,postinc1
  7756  002280  CFDD FFE5          	movff	postdec2,postdec1
  7757                           
  7758                           ;main.c: 419: DIST1[i+1]=DIST1[i];
  7759  002284  0100               	movlb	0	; () banked
  7760  002286  5184               	movf	read_sensors@i& (0+255),w,b
  7761  002288  0D02               	mullw	2
  7762  00228A  0EBA               	movlw	low _DIST1
  7763  00228C  24F3               	addwf	prodl,w,c
  7764  00228E  6ED9               	movwf	fsr2l,c
  7765  002290  0E00               	movlw	high _DIST1
  7766  002292  20F4               	addwfc	prodh,w,c
  7767  002294  6EDA               	movwf	fsr2h,c
  7768  002296  0100               	movlb	0	; () banked
  7769  002298  5184               	movf	read_sensors@i& (0+255),w,b
  7770  00229A  0100               	movlb	0	; () banked
  7771  00229C  6F82               	movwf	??_read_sensors& (0+255),b
  7772  00229E  6B83               	clrf	(??_read_sensors+1)& (0+255),b
  7773  0022A0  90D8               	bcf	status,0,c
  7774  0022A2  0100               	movlb	0	; () banked
  7775  0022A4  3782               	rlcf	??_read_sensors& (0+255),f,b
  7776  0022A6  3783               	rlcf	(??_read_sensors+1)& (0+255),f,b
  7777  0022A8  0E02               	movlw	2
  7778  0022AA  0100               	movlb	0	; () banked
  7779  0022AC  2782               	addwf	??_read_sensors& (0+255),f,b
  7780  0022AE  0E00               	movlw	0
  7781  0022B0  2383               	addwfc	(??_read_sensors+1)& (0+255),f,b
  7782  0022B2  0EBA               	movlw	low _DIST1
  7783  0022B4  0100               	movlb	0	; () banked
  7784  0022B6  2582               	addwf	??_read_sensors& (0+255),w,b
  7785  0022B8  6EE1               	movwf	fsr1l,c
  7786  0022BA  0E00               	movlw	high _DIST1
  7787  0022BC  0100               	movlb	0	; () banked
  7788  0022BE  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7789  0022C0  6EE2               	movwf	fsr1h,c
  7790  0022C2  CFDE FFE6          	movff	postinc2,postinc1
  7791  0022C6  CFDD FFE5          	movff	postdec2,postdec1
  7792                           
  7793                           ;main.c: 420: IR1[i+1]=IR1[i];
  7794  0022CA  0100               	movlb	0	; () banked
  7795  0022CC  5184               	movf	read_sensors@i& (0+255),w,b
  7796  0022CE  0D02               	mullw	2
  7797  0022D0  0EC4               	movlw	low _IR1
  7798  0022D2  24F3               	addwf	prodl,w,c
  7799  0022D4  6ED9               	movwf	fsr2l,c
  7800  0022D6  0E00               	movlw	high _IR1
  7801  0022D8  20F4               	addwfc	prodh,w,c
  7802  0022DA  6EDA               	movwf	fsr2h,c
  7803  0022DC  0100               	movlb	0	; () banked
  7804  0022DE  5184               	movf	read_sensors@i& (0+255),w,b
  7805  0022E0  0100               	movlb	0	; () banked
  7806  0022E2  6F82               	movwf	??_read_sensors& (0+255),b
  7807  0022E4  6B83               	clrf	(??_read_sensors+1)& (0+255),b
  7808  0022E6  90D8               	bcf	status,0,c
  7809  0022E8  0100               	movlb	0	; () banked
  7810  0022EA  3782               	rlcf	??_read_sensors& (0+255),f,b
  7811  0022EC  3783               	rlcf	(??_read_sensors+1)& (0+255),f,b
  7812  0022EE  0E02               	movlw	2
  7813  0022F0  0100               	movlb	0	; () banked
  7814  0022F2  2782               	addwf	??_read_sensors& (0+255),f,b
  7815  0022F4  0E00               	movlw	0
  7816  0022F6  2383               	addwfc	(??_read_sensors+1)& (0+255),f,b
  7817  0022F8  0EC4               	movlw	low _IR1
  7818  0022FA  0100               	movlb	0	; () banked
  7819  0022FC  2582               	addwf	??_read_sensors& (0+255),w,b
  7820  0022FE  6EE1               	movwf	fsr1l,c
  7821  002300  0E00               	movlw	high _IR1
  7822  002302  0100               	movlb	0	; () banked
  7823  002304  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7824  002306  6EE2               	movwf	fsr1h,c
  7825  002308  CFDE FFE6          	movff	postinc2,postinc1
  7826  00230C  CFDD FFE5          	movff	postdec2,postdec1
  7827                           
  7828                           ;main.c: 421: IR2[i+1]=IR2[i];
  7829  002310  0100               	movlb	0	; () banked
  7830  002312  5184               	movf	read_sensors@i& (0+255),w,b
  7831  002314  0D02               	mullw	2
  7832  002316  0E1C               	movlw	low _IR2
  7833  002318  24F3               	addwf	prodl,w,c
  7834  00231A  6ED9               	movwf	fsr2l,c
  7835  00231C  0E01               	movlw	high _IR2
  7836  00231E  20F4               	addwfc	prodh,w,c
  7837  002320  6EDA               	movwf	fsr2h,c
  7838  002322  0100               	movlb	0	; () banked
  7839  002324  5184               	movf	read_sensors@i& (0+255),w,b
  7840  002326  0100               	movlb	0	; () banked
  7841  002328  6F82               	movwf	??_read_sensors& (0+255),b
  7842  00232A  6B83               	clrf	(??_read_sensors+1)& (0+255),b
  7843  00232C  90D8               	bcf	status,0,c
  7844  00232E  0100               	movlb	0	; () banked
  7845  002330  3782               	rlcf	??_read_sensors& (0+255),f,b
  7846  002332  3783               	rlcf	(??_read_sensors+1)& (0+255),f,b
  7847  002334  0E02               	movlw	2
  7848  002336  0100               	movlb	0	; () banked
  7849  002338  2782               	addwf	??_read_sensors& (0+255),f,b
  7850  00233A  0E00               	movlw	0
  7851  00233C  2383               	addwfc	(??_read_sensors+1)& (0+255),f,b
  7852  00233E  0E1C               	movlw	low _IR2
  7853  002340  0100               	movlb	0	; () banked
  7854  002342  2582               	addwf	??_read_sensors& (0+255),w,b
  7855  002344  6EE1               	movwf	fsr1l,c
  7856  002346  0E01               	movlw	high _IR2
  7857  002348  0100               	movlb	0	; () banked
  7858  00234A  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7859  00234C  6EE2               	movwf	fsr1h,c
  7860  00234E  CFDE FFE6          	movff	postinc2,postinc1
  7861  002352  CFDD FFE5          	movff	postdec2,postdec1
  7862                           
  7863                           ; BSR set to: 0
  7864  002356  0100               	movlb	0	; () banked
  7865  002358  2B84               	incf	read_sensors@i& (0+255),f,b
  7866  00235A  D749               	goto	l5124
  7867  00235C                     l5134:
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;main.c: 422: }
  7871                           ;main.c: 427: readADC(DIST1_PIN);
  7872  00235C  0100               	movlb	0	; () banked
  7873  00235E  51E3               	movf	_DIST1_PIN& (0+255),w,b
  7874  002360  EC36  F018         	call	_readADC
  7875                           
  7876                           ;main.c: 428: DIST1[0]=16*16*ADRESH+ADRESL;
  7877  002364  50C4               	movf	4036,w,c	;volatile
  7878  002366  0100               	movlb	0	; () banked
  7879  002368  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  7880  00236A  6B82               	clrf	??_read_sensors& (0+255),b
  7881  00236C  50C3               	movf	4035,w,c	;volatile
  7882  00236E  0100               	movlb	0	; () banked
  7883  002370  2582               	addwf	??_read_sensors& (0+255),w,b
  7884  002372  0100               	movlb	0	; () banked
  7885  002374  6FBA               	movwf	_DIST1& (0+255),b
  7886  002376  0E00               	movlw	0
  7887  002378  0100               	movlb	0	; () banked
  7888  00237A  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7889  00237C  0100               	movlb	0	; () banked
  7890  00237E  6FBB               	movwf	(_DIST1+1)& (0+255),b
  7891                           
  7892                           ; BSR set to: 0
  7893                           ;main.c: 429: readADC(IR1_PIN);
  7894  002380  0100               	movlb	0	; () banked
  7895  002382  51E5               	movf	_IR1_PIN& (0+255),w,b
  7896  002384  EC36  F018         	call	_readADC
  7897                           
  7898                           ;main.c: 430: IR1[0]=16*16*ADRESH+ADRESL;
  7899  002388  50C4               	movf	4036,w,c	;volatile
  7900  00238A  0100               	movlb	0	; () banked
  7901  00238C  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  7902  00238E  6B82               	clrf	??_read_sensors& (0+255),b
  7903  002390  50C3               	movf	4035,w,c	;volatile
  7904  002392  0100               	movlb	0	; () banked
  7905  002394  2582               	addwf	??_read_sensors& (0+255),w,b
  7906  002396  0100               	movlb	0	; () banked
  7907  002398  6FC4               	movwf	_IR1& (0+255),b
  7908  00239A  0E00               	movlw	0
  7909  00239C  0100               	movlb	0	; () banked
  7910  00239E  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7911  0023A0  0100               	movlb	0	; () banked
  7912  0023A2  6FC5               	movwf	(_IR1+1)& (0+255),b
  7913                           
  7914                           ; BSR set to: 0
  7915                           ;main.c: 431: readADC(IR2_PIN);
  7916  0023A4  0100               	movlb	0	; () banked
  7917  0023A6  51E6               	movf	_IR2_PIN& (0+255),w,b
  7918  0023A8  EC36  F018         	call	_readADC
  7919                           
  7920                           ;main.c: 432: IR2[0]=16*16*ADRESH+ADRESL;
  7921  0023AC  50C4               	movf	4036,w,c	;volatile
  7922  0023AE  0100               	movlb	0	; () banked
  7923  0023B0  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  7924  0023B2  6B82               	clrf	??_read_sensors& (0+255),b
  7925  0023B4  50C3               	movf	4035,w,c	;volatile
  7926  0023B6  0100               	movlb	0	; () banked
  7927  0023B8  2582               	addwf	??_read_sensors& (0+255),w,b
  7928  0023BA  0101               	movlb	1	; () banked
  7929  0023BC  6F1C               	movwf	_IR2& (0+255),b
  7930  0023BE  0E00               	movlw	0
  7931  0023C0  0100               	movlb	0	; () banked
  7932  0023C2  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7933  0023C4  0101               	movlb	1	; () banked
  7934  0023C6  6F1D               	movwf	(_IR2+1)& (0+255),b
  7935                           
  7936                           ; BSR set to: 1
  7937                           ;main.c: 434: PROX1[0]=(PORTE>>PROX1_PIN)&1;
  7938  0023C8  C0E4  F082         	movff	_PROX1_PIN,??_read_sensors
  7939  0023CC  CF84 F083          	movff	3972,??_read_sensors+1	;volatile
  7940  0023D0  0100               	movlb	0	; () banked
  7941  0023D2  2B82               	incf	??_read_sensors& (0+255),f,b
  7942  0023D4  D003               	goto	u7014
  7943  0023D6                     u7015:
  7944  0023D6  0100               	movlb	0	; () banked
  7945  0023D8  90D8               	bcf	status,0,c
  7946  0023DA  3383               	rrcf	(??_read_sensors+1)& (0+255),f,b
  7947  0023DC                     u7014:
  7948  0023DC  0100               	movlb	0	; () banked
  7949  0023DE  2F82               	decfsz	??_read_sensors& (0+255),f,b
  7950  0023E0  D7FA               	goto	u7015
  7951  0023E2  0E01               	movlw	1
  7952  0023E4  0100               	movlb	0	; () banked
  7953  0023E6  1783               	andwf	(??_read_sensors+1)& (0+255),f,b
  7954  0023E8  0100               	movlb	0	; () banked
  7955  0023EA  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  7956  0023EC  6E4C               	movwf	_PROX1,c
  7957  0023EE  6A4D               	clrf	_PROX1+1,c
  7958                           
  7959                           ; BSR set to: 0
  7960                           ;main.c: 435: PROX2[0]=(PORTE>>PROX2_PIN)&1;
  7961  0023F0  C0E7  F082         	movff	_PROX2_PIN,??_read_sensors
  7962  0023F4  CF84 F083          	movff	3972,??_read_sensors+1	;volatile
  7963  0023F8  0100               	movlb	0	; () banked
  7964  0023FA  2B82               	incf	??_read_sensors& (0+255),f,b
  7965  0023FC  D003               	goto	u7024
  7966  0023FE                     u7025:
  7967  0023FE  0100               	movlb	0	; () banked
  7968  002400  90D8               	bcf	status,0,c
  7969  002402  3383               	rrcf	(??_read_sensors+1)& (0+255),f,b
  7970  002404                     u7024:
  7971  002404  0100               	movlb	0	; () banked
  7972  002406  2F82               	decfsz	??_read_sensors& (0+255),f,b
  7973  002408  D7FA               	goto	u7025
  7974  00240A  0E01               	movlw	1
  7975  00240C  0100               	movlb	0	; () banked
  7976  00240E  1783               	andwf	(??_read_sensors+1)& (0+255),f,b
  7977  002410  0100               	movlb	0	; () banked
  7978  002412  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  7979  002414  6E56               	movwf	_PROX2,c
  7980  002416  6A57               	clrf	_PROX2+1,c
  7981                           
  7982                           ; BSR set to: 0
  7983  002418  0012               	return		;funcret
  7984  00241A                     __end_of_read_sensors:
  7985                           	opt stack 0
  7986                           tosu	equ	0xFFF
  7987                           tosh	equ	0xFFE
  7988                           tosl	equ	0xFFD
  7989                           pclath	equ	0xFFA
  7990                           tblptru	equ	0xFF8
  7991                           tblptrh	equ	0xFF7
  7992                           tblptrl	equ	0xFF6
  7993                           tablat	equ	0xFF5
  7994                           prodh	equ	0xFF4
  7995                           prodl	equ	0xFF3
  7996                           intcon	equ	0xFF2
  7997                           intcon2	equ	0xFF1
  7998                           intcon3	equ	0xFF0
  7999                           indf0	equ	0xFEF
  8000                           postinc0	equ	0xFEE
  8001                           fsr0h	equ	0xFEA
  8002                           fsr0l	equ	0xFE9
  8003                           wreg	equ	0xFE8
  8004                           indf1	equ	0xFE7
  8005                           postinc1	equ	0xFE6
  8006                           postdec1	equ	0xFE5
  8007                           fsr1h	equ	0xFE2
  8008                           fsr1l	equ	0xFE1
  8009                           indf2	equ	0xFDF
  8010                           postinc2	equ	0xFDE
  8011                           postdec2	equ	0xFDD
  8012                           fsr2h	equ	0xFDA
  8013                           fsr2l	equ	0xFD9
  8014                           status	equ	0xFD8
  8015                           
  8016 ;; *************** function _readADC *****************
  8017 ;; Defined at:
  8018 ;;		line 620 in file "main.c"
  8019 ;; Parameters:    Size  Location     Type
  8020 ;;  channel         1    wreg     unsigned char 
  8021 ;; Auto vars:     Size  Location     Type
  8022 ;;  channel         1    1[BANK0 ] unsigned char 
  8023 ;; Return value:  Size  Location     Type
  8024 ;;                  1    wreg      void 
  8025 ;; Registers used:
  8026 ;;		wreg, status,2, status,0, cstack
  8027 ;; Tracked objects:
  8028 ;;		On entry : 0/0
  8029 ;;		On exit  : 0/0
  8030 ;;		Unchanged: 0/0
  8031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8032 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8033 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8034 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8035 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8036 ;;Total ram usage:        2 bytes
  8037 ;; Hardware stack levels used:    1
  8038 ;; Hardware stack levels required when called:    5
  8039 ;; This function calls:
  8040 ;;		Nothing
  8041 ;; This function is called by:
  8042 ;;		_read_sensors
  8043 ;; This function uses a non-reentrant model
  8044 ;;
  8045                           
  8046                           	psect	text25
  8047  00306C                     __ptext25:
  8048                           	opt stack 0
  8049  00306C                     _readADC:
  8050                           	opt stack 24
  8051                           
  8052                           ; BSR set to: 0
  8053                           ;incstack = 0
  8054                           ;readADC@channel stored from wreg
  8055  00306C  0100               	movlb	0	; () banked
  8056  00306E  6F81               	movwf	readADC@channel& (0+255),b
  8057                           
  8058                           ;main.c: 622: ADCON0 = ((channel <<2));
  8059  003070  0100               	movlb	0	; () banked
  8060  003072  4581               	rlncf	readADC@channel& (0+255),w,b
  8061  003074  46E8               	rlncf	wreg,f,c
  8062  003076  0BFC               	andlw	252
  8063  003078  6EC2               	movwf	4034,c	;volatile
  8064                           
  8065                           ; BSR set to: 0
  8066                           ;main.c: 623: ADON = 1;
  8067  00307A  80C2               	bsf	4034,0,c	;volatile
  8068                           
  8069                           ; BSR set to: 0
  8070                           ;main.c: 624: ADCON0bits.GO = 1;
  8071  00307C  82C2               	bsf	4034,1,c	;volatile
  8072                           
  8073                           ;main.c: 625: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(10000000/4000.0)
      +                          ));}
  8074  00307E  D009               	goto	l4740
  8075  003080                     l4738:
  8076  003080  0E11               	movlw	17
  8077  003082  0100               	movlb	0	; () banked
  8078  003084  6F80               	movwf	??_readADC& (0+255),b
  8079  003086  0E3A               	movlw	58
  8080  003088                     u13077:
  8081  003088  2EE8               	decfsz	wreg,f,c
  8082  00308A  D7FE               	bra	u13077
  8083  00308C  2F80               	decfsz	??_readADC& (0+255),f,b
  8084  00308E  D7FC               	bra	u13077
  8085  003090  F000               	nop	
  8086  003092                     l4740:
  8087  003092  A2C2               	btfss	4034,1,c	;volatile
  8088  003094  0012               	return	
  8089  003096  D7F4               	goto	l4738
  8090  003098                     __end_of_readADC:
  8091                           	opt stack 0
  8092                           tosu	equ	0xFFF
  8093                           tosh	equ	0xFFE
  8094                           tosl	equ	0xFFD
  8095                           pclath	equ	0xFFA
  8096                           tblptru	equ	0xFF8
  8097                           tblptrh	equ	0xFF7
  8098                           tblptrl	equ	0xFF6
  8099                           tablat	equ	0xFF5
  8100                           prodh	equ	0xFF4
  8101                           prodl	equ	0xFF3
  8102                           intcon	equ	0xFF2
  8103                           intcon2	equ	0xFF1
  8104                           intcon3	equ	0xFF0
  8105                           indf0	equ	0xFEF
  8106                           postinc0	equ	0xFEE
  8107                           fsr0h	equ	0xFEA
  8108                           fsr0l	equ	0xFE9
  8109                           wreg	equ	0xFE8
  8110                           indf1	equ	0xFE7
  8111                           postinc1	equ	0xFE6
  8112                           postdec1	equ	0xFE5
  8113                           fsr1h	equ	0xFE2
  8114                           fsr1l	equ	0xFE1
  8115                           indf2	equ	0xFDF
  8116                           postinc2	equ	0xFDE
  8117                           postdec2	equ	0xFDD
  8118                           fsr2h	equ	0xFDA
  8119                           fsr2l	equ	0xFD9
  8120                           status	equ	0xFD8
  8121                           
  8122 ;; *************** function _initLCD *****************
  8123 ;; Defined at:
  8124 ;;		line 14 in file "lcd.c"
  8125 ;; Parameters:    Size  Location     Type
  8126 ;;		None
  8127 ;; Auto vars:     Size  Location     Type
  8128 ;;		None
  8129 ;; Return value:  Size  Location     Type
  8130 ;;                  1    wreg      void 
  8131 ;; Registers used:
  8132 ;;		wreg, status,2, status,0, cstack
  8133 ;; Tracked objects:
  8134 ;;		On entry : 0/0
  8135 ;;		On exit  : 0/0
  8136 ;;		Unchanged: 0/0
  8137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8138 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8139 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8140 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8141 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8142 ;;Total ram usage:        1 bytes
  8143 ;; Hardware stack levels used:    1
  8144 ;; Hardware stack levels required when called:    7
  8145 ;; This function calls:
  8146 ;;		_lcdInst
  8147 ;; This function is called by:
  8148 ;;		_main
  8149 ;; This function uses a non-reentrant model
  8150 ;;
  8151                           
  8152                           	psect	text26
  8153  002F14                     __ptext26:
  8154                           	opt stack 0
  8155  002F14                     _initLCD:
  8156                           	opt stack 23
  8157                           
  8158                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  8159                           
  8160                           ;incstack = 0
  8161  002F14  0E31               	movlw	49
  8162  002F16  0100               	movlb	0	; () banked
  8163  002F18  6F83               	movwf	??_initLCD& (0+255),b
  8164  002F1A  0EB2               	movlw	178
  8165  002F1C                     u13087:
  8166  002F1C  2EE8               	decfsz	wreg,f,c
  8167  002F1E  D7FE               	bra	u13087
  8168  002F20  2F83               	decfsz	??_initLCD& (0+255),f,b
  8169  002F22  D7FC               	bra	u13087
  8170  002F24  F000               	nop	
  8171                           
  8172                           ;lcd.c: 16: lcdInst(0b00110011);
  8173  002F26  0E33               	movlw	51
  8174  002F28  ECA3  F018         	call	_lcdInst
  8175                           
  8176                           ;lcd.c: 17: lcdInst(0b00110010);
  8177  002F2C  0E32               	movlw	50
  8178  002F2E  ECA3  F018         	call	_lcdInst
  8179                           
  8180                           ;lcd.c: 18: lcdInst(0b00101000);
  8181  002F32  0E28               	movlw	40
  8182  002F34  ECA3  F018         	call	_lcdInst
  8183                           
  8184                           ;lcd.c: 19: lcdInst(0b00001111);
  8185  002F38  0E0F               	movlw	15
  8186  002F3A  ECA3  F018         	call	_lcdInst
  8187                           
  8188                           ;lcd.c: 20: lcdInst(0b00000110);
  8189  002F3E  0E06               	movlw	6
  8190  002F40  ECA3  F018         	call	_lcdInst
  8191                           
  8192                           ;lcd.c: 21: lcdInst(0b00000001);
  8193  002F44  0E01               	movlw	1
  8194  002F46  ECA3  F018         	call	_lcdInst
  8195                           
  8196                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  8197  002F4A  0E31               	movlw	49
  8198  002F4C  0100               	movlb	0	; () banked
  8199  002F4E  6F83               	movwf	??_initLCD& (0+255),b
  8200  002F50  0EB2               	movlw	178
  8201  002F52                     u13097:
  8202  002F52  2EE8               	decfsz	wreg,f,c
  8203  002F54  D7FE               	bra	u13097
  8204  002F56  2F83               	decfsz	??_initLCD& (0+255),f,b
  8205  002F58  D7FC               	bra	u13097
  8206  002F5A  F000               	nop	
  8207  002F5C  0012               	return		;funcret
  8208  002F5E                     __end_of_initLCD:
  8209                           	opt stack 0
  8210                           tosu	equ	0xFFF
  8211                           tosh	equ	0xFFE
  8212                           tosl	equ	0xFFD
  8213                           pclath	equ	0xFFA
  8214                           tblptru	equ	0xFF8
  8215                           tblptrh	equ	0xFF7
  8216                           tblptrl	equ	0xFF6
  8217                           tablat	equ	0xFF5
  8218                           prodh	equ	0xFF4
  8219                           prodl	equ	0xFF3
  8220                           intcon	equ	0xFF2
  8221                           intcon2	equ	0xFF1
  8222                           intcon3	equ	0xFF0
  8223                           indf0	equ	0xFEF
  8224                           postinc0	equ	0xFEE
  8225                           fsr0h	equ	0xFEA
  8226                           fsr0l	equ	0xFE9
  8227                           wreg	equ	0xFE8
  8228                           indf1	equ	0xFE7
  8229                           postinc1	equ	0xFE6
  8230                           postdec1	equ	0xFE5
  8231                           fsr1h	equ	0xFE2
  8232                           fsr1l	equ	0xFE1
  8233                           indf2	equ	0xFDF
  8234                           postinc2	equ	0xFDE
  8235                           postdec2	equ	0xFDD
  8236                           fsr2h	equ	0xFDA
  8237                           fsr2l	equ	0xFD9
  8238                           status	equ	0xFD8
  8239                           
  8240 ;; *************** function _lcdInst *****************
  8241 ;; Defined at:
  8242 ;;		line 25 in file "lcd.c"
  8243 ;; Parameters:    Size  Location     Type
  8244 ;;  data            1    wreg     unsigned char 
  8245 ;; Auto vars:     Size  Location     Type
  8246 ;;  data            1    2[BANK0 ] unsigned char 
  8247 ;; Return value:  Size  Location     Type
  8248 ;;                  1    wreg      void 
  8249 ;; Registers used:
  8250 ;;		wreg, status,2, status,0, cstack
  8251 ;; Tracked objects:
  8252 ;;		On entry : 0/0
  8253 ;;		On exit  : 0/0
  8254 ;;		Unchanged: 0/0
  8255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8259 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8260 ;;Total ram usage:        1 bytes
  8261 ;; Hardware stack levels used:    1
  8262 ;; Hardware stack levels required when called:    6
  8263 ;; This function calls:
  8264 ;;		_lcdNibble
  8265 ;; This function is called by:
  8266 ;;		_initLCD
  8267 ;;		_update_lcd
  8268 ;; This function uses a non-reentrant model
  8269 ;;
  8270                           
  8271                           	psect	text27
  8272  003146                     __ptext27:
  8273                           	opt stack 0
  8274  003146                     _lcdInst:
  8275                           	opt stack 23
  8276                           
  8277                           ;incstack = 0
  8278                           ;lcdInst@data stored from wreg
  8279  003146  0100               	movlb	0	; () banked
  8280  003148  6F82               	movwf	lcdInst@data& (0+255),b
  8281                           
  8282                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  8283  00314A  948C               	bcf	3980,2,c	;volatile
  8284                           
  8285                           ;lcd.c: 27: lcdNibble(data);
  8286  00314C  0100               	movlb	0	; () banked
  8287  00314E  5182               	movf	lcdInst@data& (0+255),w,b
  8288  003150  ECF7  F015         	call	_lcdNibble
  8289  003154  0012               	return		;funcret
  8290  003156                     __end_of_lcdInst:
  8291                           	opt stack 0
  8292                           tosu	equ	0xFFF
  8293                           tosh	equ	0xFFE
  8294                           tosl	equ	0xFFD
  8295                           pclath	equ	0xFFA
  8296                           tblptru	equ	0xFF8
  8297                           tblptrh	equ	0xFF7
  8298                           tblptrl	equ	0xFF6
  8299                           tablat	equ	0xFF5
  8300                           prodh	equ	0xFF4
  8301                           prodl	equ	0xFF3
  8302                           intcon	equ	0xFF2
  8303                           intcon2	equ	0xFF1
  8304                           intcon3	equ	0xFF0
  8305                           indf0	equ	0xFEF
  8306                           postinc0	equ	0xFEE
  8307                           fsr0h	equ	0xFEA
  8308                           fsr0l	equ	0xFE9
  8309                           wreg	equ	0xFE8
  8310                           indf1	equ	0xFE7
  8311                           postinc1	equ	0xFE6
  8312                           postdec1	equ	0xFE5
  8313                           fsr1h	equ	0xFE2
  8314                           fsr1l	equ	0xFE1
  8315                           indf2	equ	0xFDF
  8316                           postinc2	equ	0xFDE
  8317                           postdec2	equ	0xFDD
  8318                           fsr2h	equ	0xFDA
  8319                           fsr2l	equ	0xFD9
  8320                           status	equ	0xFD8
  8321                           
  8322 ;; *************** function _lcdNibble *****************
  8323 ;; Defined at:
  8324 ;;		line 35 in file "lcd.c"
  8325 ;; Parameters:    Size  Location     Type
  8326 ;;  data            1    wreg     unsigned char 
  8327 ;; Auto vars:     Size  Location     Type
  8328 ;;  data            1    1[BANK0 ] unsigned char 
  8329 ;;  temp            1    0[BANK0 ] unsigned char 
  8330 ;; Return value:  Size  Location     Type
  8331 ;;                  1    wreg      void 
  8332 ;; Registers used:
  8333 ;;		wreg, status,2, status,0
  8334 ;; Tracked objects:
  8335 ;;		On entry : 0/0
  8336 ;;		On exit  : 0/0
  8337 ;;		Unchanged: 0/0
  8338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8340 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8342 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8343 ;;Total ram usage:        2 bytes
  8344 ;; Hardware stack levels used:    1
  8345 ;; Hardware stack levels required when called:    5
  8346 ;; This function calls:
  8347 ;;		Nothing
  8348 ;; This function is called by:
  8349 ;;		_lcdInst
  8350 ;;		_putch
  8351 ;; This function uses a non-reentrant model
  8352 ;;
  8353                           
  8354                           	psect	text28
  8355  002BEE                     __ptext28:
  8356                           	opt stack 0
  8357  002BEE                     _lcdNibble:
  8358                           	opt stack 21
  8359                           
  8360                           ;incstack = 0
  8361                           ;lcdNibble@data stored from wreg
  8362  002BEE  0100               	movlb	0	; () banked
  8363  002BF0  6F81               	movwf	lcdNibble@data& (0+255),b
  8364                           
  8365                           ;lcd.c: 37: char temp = data & 0xF0;
  8366  002BF2  0100               	movlb	0	; () banked
  8367  002BF4  5181               	movf	lcdNibble@data& (0+255),w,b
  8368  002BF6  0BF0               	andlw	240
  8369  002BF8  0100               	movlb	0	; () banked
  8370  002BFA  6F80               	movwf	lcdNibble@temp& (0+255),b
  8371                           
  8372                           ;lcd.c: 38: LATD = LATD & 0x0F;
  8373  002BFC  508C               	movf	3980,w,c	;volatile
  8374  002BFE  0B0F               	andlw	15
  8375  002C00  6E8C               	movwf	3980,c	;volatile
  8376                           
  8377                           ;lcd.c: 39: LATD = temp | LATD;
  8378  002C02  0100               	movlb	0	; () banked
  8379  002C04  5180               	movf	lcdNibble@temp& (0+255),w,b
  8380  002C06  108C               	iorwf	3980,w,c	;volatile
  8381  002C08  6E8C               	movwf	3980,c	;volatile
  8382                           
  8383                           ; BSR set to: 0
  8384                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  8385  002C0A  968C               	bcf	3980,3,c	;volatile
  8386                           
  8387                           ; BSR set to: 0
  8388                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8389  002C0C  0E14               	movlw	20
  8390  002C0E                     u13107:
  8391  002C0E  2EE8               	decfsz	wreg,f,c
  8392  002C10  D7FE               	bra	u13107
  8393  002C12  D000               	nop2	
  8394                           
  8395                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  8396  002C14  868C               	bsf	3980,3,c	;volatile
  8397                           
  8398                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8399  002C16  0E14               	movlw	20
  8400  002C18                     u13117:
  8401  002C18  2EE8               	decfsz	wreg,f,c
  8402  002C1A  D7FE               	bra	u13117
  8403  002C1C  D000               	nop2	
  8404                           
  8405                           ;lcd.c: 46: data = data << 4;
  8406  002C1E  0100               	movlb	0	; () banked
  8407  002C20  3981               	swapf	lcdNibble@data& (0+255),w,b
  8408  002C22  0BF0               	andlw	240
  8409  002C24  0100               	movlb	0	; () banked
  8410  002C26  6F81               	movwf	lcdNibble@data& (0+255),b
  8411                           
  8412                           ;lcd.c: 48: temp = data & 0xF0;
  8413  002C28  0100               	movlb	0	; () banked
  8414  002C2A  5181               	movf	lcdNibble@data& (0+255),w,b
  8415  002C2C  0BF0               	andlw	240
  8416  002C2E  0100               	movlb	0	; () banked
  8417  002C30  6F80               	movwf	lcdNibble@temp& (0+255),b
  8418                           
  8419                           ;lcd.c: 49: LATD = LATD & 0x0F;
  8420  002C32  508C               	movf	3980,w,c	;volatile
  8421  002C34  0B0F               	andlw	15
  8422  002C36  6E8C               	movwf	3980,c	;volatile
  8423                           
  8424                           ;lcd.c: 50: LATD = temp | LATD;
  8425  002C38  0100               	movlb	0	; () banked
  8426  002C3A  5180               	movf	lcdNibble@temp& (0+255),w,b
  8427  002C3C  108C               	iorwf	3980,w,c	;volatile
  8428  002C3E  6E8C               	movwf	3980,c	;volatile
  8429                           
  8430                           ; BSR set to: 0
  8431                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  8432  002C40  968C               	bcf	3980,3,c	;volatile
  8433                           
  8434                           ; BSR set to: 0
  8435                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8436  002C42  0E14               	movlw	20
  8437  002C44                     u13127:
  8438  002C44  2EE8               	decfsz	wreg,f,c
  8439  002C46  D7FE               	bra	u13127
  8440  002C48  D000               	nop2	
  8441                           
  8442                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  8443  002C4A  868C               	bsf	3980,3,c	;volatile
  8444                           
  8445                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8446  002C4C  0E14               	movlw	20
  8447  002C4E                     u13137:
  8448  002C4E  2EE8               	decfsz	wreg,f,c
  8449  002C50  D7FE               	bra	u13137
  8450  002C52  D000               	nop2	
  8451  002C54  0012               	return		;funcret
  8452  002C56                     __end_of_lcdNibble:
  8453                           	opt stack 0
  8454                           tosu	equ	0xFFF
  8455                           tosh	equ	0xFFE
  8456                           tosl	equ	0xFFD
  8457                           pclath	equ	0xFFA
  8458                           tblptru	equ	0xFF8
  8459                           tblptrh	equ	0xFF7
  8460                           tblptrl	equ	0xFF6
  8461                           tablat	equ	0xFF5
  8462                           prodh	equ	0xFF4
  8463                           prodl	equ	0xFF3
  8464                           intcon	equ	0xFF2
  8465                           intcon2	equ	0xFF1
  8466                           intcon3	equ	0xFF0
  8467                           indf0	equ	0xFEF
  8468                           postinc0	equ	0xFEE
  8469                           fsr0h	equ	0xFEA
  8470                           fsr0l	equ	0xFE9
  8471                           wreg	equ	0xFE8
  8472                           indf1	equ	0xFE7
  8473                           postinc1	equ	0xFE6
  8474                           postdec1	equ	0xFE5
  8475                           fsr1h	equ	0xFE2
  8476                           fsr1l	equ	0xFE1
  8477                           indf2	equ	0xFDF
  8478                           postinc2	equ	0xFDE
  8479                           postdec2	equ	0xFDD
  8480                           fsr2h	equ	0xFDA
  8481                           fsr2l	equ	0xFD9
  8482                           status	equ	0xFD8
  8483                           
  8484 ;; *************** function _I2C_Master_Init *****************
  8485 ;; Defined at:
  8486 ;;		line 13 in file "I2C.c"
  8487 ;; Parameters:    Size  Location     Type
  8488 ;;  c               4   13[BANK0 ] const unsigned long 
  8489 ;; Auto vars:     Size  Location     Type
  8490 ;;		None
  8491 ;; Return value:  Size  Location     Type
  8492 ;;                  1    wreg      void 
  8493 ;; Registers used:
  8494 ;;		wreg, status,2, status,0, cstack
  8495 ;; Tracked objects:
  8496 ;;		On entry : 0/0
  8497 ;;		On exit  : 0/0
  8498 ;;		Unchanged: 0/0
  8499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8500 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8501 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8502 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8503 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8504 ;;Total ram usage:        8 bytes
  8505 ;; Hardware stack levels used:    1
  8506 ;; Hardware stack levels required when called:    6
  8507 ;; This function calls:
  8508 ;;		___lldiv
  8509 ;; This function is called by:
  8510 ;;		_main
  8511 ;; This function uses a non-reentrant model
  8512 ;;
  8513                           
  8514                           	psect	text29
  8515  002D1A                     __ptext29:
  8516                           	opt stack 0
  8517  002D1A                     _I2C_Master_Init:
  8518                           	opt stack 24
  8519                           
  8520                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  8521                           
  8522                           ;incstack = 0
  8523  002D1A  0E00               	movlw	0
  8524  002D1C  6EC7               	movwf	4039,c	;volatile
  8525                           
  8526                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  8527  002D1E  0E28               	movlw	40
  8528  002D20  6EC6               	movwf	4038,c	;volatile
  8529                           
  8530                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  8531  002D22  0E00               	movlw	0
  8532  002D24  6EC5               	movwf	4037,c	;volatile
  8533                           
  8534                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  8535  002D26  0E80               	movlw	128
  8536  002D28  0100               	movlb	0	; () banked
  8537  002D2A  6F80               	movwf	___lldiv@dividend& (0+255),b
  8538  002D2C  0E96               	movlw	150
  8539  002D2E  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  8540  002D30  0E98               	movlw	152
  8541  002D32  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  8542  002D34  0E00               	movlw	0
  8543  002D36  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  8544  002D38  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  8545  002D3C  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  8546  002D40  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  8547  002D44  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  8548  002D48  0E02               	movlw	2
  8549  002D4A                     u6935:
  8550  002D4A  90D8               	bcf	status,0,c
  8551  002D4C  0100               	movlb	0	; () banked
  8552  002D4E  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  8553  002D50  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  8554  002D52  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  8555  002D54  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  8556  002D56  2EE8               	decfsz	wreg,f,c
  8557  002D58  D7F8               	goto	u6935
  8558  002D5A  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  8559  002D5E  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8560  002D62  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8561  002D66  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8562  002D6A  EC57  F014         	call	___lldiv	;wreg free
  8563  002D6E  0100               	movlb	0	; () banked
  8564  002D70  0580               	decf	?___lldiv& (0+255),w,b
  8565  002D72  6EC8               	movwf	4040,c	;volatile
  8566                           
  8567                           ; BSR set to: 0
  8568                           ;I2C.c: 20: TRISC3 = 1;
  8569  002D74  8694               	bsf	3988,3,c	;volatile
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;I2C.c: 21: TRISC4 = 1;
  8573  002D76  8894               	bsf	3988,4,c	;volatile
  8574                           
  8575                           ; BSR set to: 0
  8576  002D78  0012               	return		;funcret
  8577  002D7A                     __end_of_I2C_Master_Init:
  8578                           	opt stack 0
  8579                           tosu	equ	0xFFF
  8580                           tosh	equ	0xFFE
  8581                           tosl	equ	0xFFD
  8582                           pclath	equ	0xFFA
  8583                           tblptru	equ	0xFF8
  8584                           tblptrh	equ	0xFF7
  8585                           tblptrl	equ	0xFF6
  8586                           tablat	equ	0xFF5
  8587                           prodh	equ	0xFF4
  8588                           prodl	equ	0xFF3
  8589                           intcon	equ	0xFF2
  8590                           intcon2	equ	0xFF1
  8591                           intcon3	equ	0xFF0
  8592                           indf0	equ	0xFEF
  8593                           postinc0	equ	0xFEE
  8594                           fsr0h	equ	0xFEA
  8595                           fsr0l	equ	0xFE9
  8596                           wreg	equ	0xFE8
  8597                           indf1	equ	0xFE7
  8598                           postinc1	equ	0xFE6
  8599                           postdec1	equ	0xFE5
  8600                           fsr1h	equ	0xFE2
  8601                           fsr1l	equ	0xFE1
  8602                           indf2	equ	0xFDF
  8603                           postinc2	equ	0xFDE
  8604                           postdec2	equ	0xFDD
  8605                           fsr2h	equ	0xFDA
  8606                           fsr2l	equ	0xFD9
  8607                           status	equ	0xFD8
  8608                           
  8609 ;; *************** function ___lldiv *****************
  8610 ;; Defined at:
  8611 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8612 ;; Parameters:    Size  Location     Type
  8613 ;;  dividend        4    0[BANK0 ] unsigned long 
  8614 ;;  divisor         4    4[BANK0 ] unsigned long 
  8615 ;; Auto vars:     Size  Location     Type
  8616 ;;  quotient        4    8[BANK0 ] unsigned long 
  8617 ;;  counter         1   12[BANK0 ] unsigned char 
  8618 ;; Return value:  Size  Location     Type
  8619 ;;                  4    0[BANK0 ] unsigned long 
  8620 ;; Registers used:
  8621 ;;		wreg, status,2, status,0
  8622 ;; Tracked objects:
  8623 ;;		On entry : 0/0
  8624 ;;		On exit  : 0/0
  8625 ;;		Unchanged: 0/0
  8626 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8627 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8628 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8630 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8631 ;;Total ram usage:       13 bytes
  8632 ;; Hardware stack levels used:    1
  8633 ;; Hardware stack levels required when called:    5
  8634 ;; This function calls:
  8635 ;;		Nothing
  8636 ;; This function is called by:
  8637 ;;		_I2C_Master_Init
  8638 ;; This function uses a non-reentrant model
  8639 ;;
  8640                           
  8641                           	psect	text30
  8642  0028AE                     __ptext30:
  8643                           	opt stack 0
  8644  0028AE                     ___lldiv:
  8645                           	opt stack 24
  8646                           
  8647                           ; BSR set to: 0
  8648                           ;incstack = 0
  8649  0028AE  0E00               	movlw	0
  8650  0028B0  0100               	movlb	0	; () banked
  8651  0028B2  6F88               	movwf	___lldiv@quotient& (0+255),b
  8652  0028B4  0E00               	movlw	0
  8653  0028B6  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  8654  0028B8  0E00               	movlw	0
  8655  0028BA  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  8656  0028BC  0E00               	movlw	0
  8657  0028BE  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  8658                           
  8659                           ; BSR set to: 0
  8660  0028C0  0100               	movlb	0	; () banked
  8661  0028C2  5184               	movf	___lldiv@divisor& (0+255),w,b
  8662  0028C4  0100               	movlb	0	; () banked
  8663  0028C6  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8664  0028C8  0100               	movlb	0	; () banked
  8665  0028CA  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8666  0028CC  0100               	movlb	0	; () banked
  8667  0028CE  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8668  0028D0  B4D8               	btfsc	status,2,c
  8669  0028D2  D042               	goto	l912
  8670                           
  8671                           ; BSR set to: 0
  8672  0028D4  0E01               	movlw	1
  8673  0028D6  0100               	movlb	0	; () banked
  8674  0028D8  6F8C               	movwf	___lldiv@counter& (0+255),b
  8675  0028DA  D008               	goto	l4830
  8676  0028DC                     l4828:
  8677                           
  8678                           ; BSR set to: 0
  8679  0028DC  0100               	movlb	0	; () banked
  8680  0028DE  90D8               	bcf	status,0,c
  8681  0028E0  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  8682  0028E2  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8683  0028E4  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8684  0028E6  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8685  0028E8  0100               	movlb	0	; () banked
  8686  0028EA  2B8C               	incf	___lldiv@counter& (0+255),f,b
  8687  0028EC                     l4830:
  8688                           
  8689                           ; BSR set to: 0
  8690  0028EC  0100               	movlb	0	; () banked
  8691  0028EE  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8692  0028F0  D7F5               	goto	l4828
  8693  0028F2                     l4832:
  8694                           
  8695                           ; BSR set to: 0
  8696  0028F2  0100               	movlb	0	; () banked
  8697  0028F4  90D8               	bcf	status,0,c
  8698  0028F6  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  8699  0028F8  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8700  0028FA  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8701  0028FC  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8702                           
  8703                           ; BSR set to: 0
  8704  0028FE  0100               	movlb	0	; () banked
  8705  002900  5184               	movf	___lldiv@divisor& (0+255),w,b
  8706  002902  0100               	movlb	0	; () banked
  8707  002904  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  8708  002906  0100               	movlb	0	; () banked
  8709  002908  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8710  00290A  0100               	movlb	0	; () banked
  8711  00290C  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8712  00290E  0100               	movlb	0	; () banked
  8713  002910  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8714  002912  0100               	movlb	0	; () banked
  8715  002914  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8716  002916  0100               	movlb	0	; () banked
  8717  002918  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8718  00291A  0100               	movlb	0	; () banked
  8719  00291C  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8720  00291E  A0D8               	btfss	status,0,c
  8721  002920  D012               	goto	l4840
  8722                           
  8723                           ; BSR set to: 0
  8724  002922  0100               	movlb	0	; () banked
  8725  002924  5184               	movf	___lldiv@divisor& (0+255),w,b
  8726  002926  0100               	movlb	0	; () banked
  8727  002928  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  8728  00292A  0100               	movlb	0	; () banked
  8729  00292C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8730  00292E  0100               	movlb	0	; () banked
  8731  002930  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8732  002932  0100               	movlb	0	; () banked
  8733  002934  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8734  002936  0100               	movlb	0	; () banked
  8735  002938  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8736  00293A  0100               	movlb	0	; () banked
  8737  00293C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8738  00293E  0100               	movlb	0	; () banked
  8739  002940  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8740                           
  8741                           ; BSR set to: 0
  8742  002942  0100               	movlb	0	; () banked
  8743  002944  8188               	bsf	___lldiv@quotient& (0+255),0,b
  8744  002946                     l4840:
  8745                           
  8746                           ; BSR set to: 0
  8747  002946  0100               	movlb	0	; () banked
  8748  002948  90D8               	bcf	status,0,c
  8749  00294A  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8750  00294C  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8751  00294E  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8752  002950  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  8753                           
  8754                           ; BSR set to: 0
  8755  002952  0100               	movlb	0	; () banked
  8756  002954  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  8757  002956  D7CD               	goto	l4832
  8758  002958                     l912:
  8759                           
  8760                           ; BSR set to: 0
  8761  002958  C088  F080         	movff	___lldiv@quotient,?___lldiv
  8762  00295C  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  8763  002960  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  8764  002964  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  8765                           
  8766                           ; BSR set to: 0
  8767  002968  0012               	return		;funcret
  8768  00296A                     __end_of___lldiv:
  8769                           	opt stack 0
  8770                           tosu	equ	0xFFF
  8771                           tosh	equ	0xFFE
  8772                           tosl	equ	0xFFD
  8773                           pclath	equ	0xFFA
  8774                           tblptru	equ	0xFF8
  8775                           tblptrh	equ	0xFF7
  8776                           tblptrl	equ	0xFF6
  8777                           tablat	equ	0xFF5
  8778                           prodh	equ	0xFF4
  8779                           prodl	equ	0xFF3
  8780                           intcon	equ	0xFF2
  8781                           intcon2	equ	0xFF1
  8782                           intcon3	equ	0xFF0
  8783                           indf0	equ	0xFEF
  8784                           postinc0	equ	0xFEE
  8785                           fsr0h	equ	0xFEA
  8786                           fsr0l	equ	0xFE9
  8787                           wreg	equ	0xFE8
  8788                           indf1	equ	0xFE7
  8789                           postinc1	equ	0xFE6
  8790                           postdec1	equ	0xFE5
  8791                           fsr1h	equ	0xFE2
  8792                           fsr1l	equ	0xFE1
  8793                           indf2	equ	0xFDF
  8794                           postinc2	equ	0xFDE
  8795                           postdec2	equ	0xFDD
  8796                           fsr2h	equ	0xFDA
  8797                           fsr2l	equ	0xFD9
  8798                           status	equ	0xFD8
  8799                           
  8800 ;; *************** function _keypressed *****************
  8801 ;; Defined at:
  8802 ;;		line 297 in file "main.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;		None
  8805 ;; Auto vars:     Size  Location     Type
  8806 ;;  i               2   58[COMRAM] int 
  8807 ;;  keypress        1   60[COMRAM] unsigned char 
  8808 ;; Return value:  Size  Location     Type
  8809 ;;                  1    wreg      void 
  8810 ;; Registers used:
  8811 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  8812 ;; Tracked objects:
  8813 ;;		On entry : 0/0
  8814 ;;		On exit  : 0/0
  8815 ;;		Unchanged: 0/0
  8816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8817 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8818 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8819 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8820 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8821 ;;Total ram usage:       19 bytes
  8822 ;; Hardware stack levels used:    1
  8823 ;; Hardware stack levels required when called:    4
  8824 ;; This function calls:
  8825 ;;		i2___awmod
  8826 ;;		i2_lcdInst
  8827 ;;		i2_printf
  8828 ;; This function is called by:
  8829 ;;		Interrupt level 2
  8830 ;; This function uses a non-reentrant model
  8831 ;;
  8832                           
  8833                           	psect	intcode
  8834  000008                     __pintcode:
  8835                           	opt stack 0
  8836  000008                     _keypressed:
  8837                           	opt stack 20
  8838                           
  8839                           ; BSR set to: 0
  8840                           ;incstack = 0
  8841  000008  8277               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8842  00000A  EDF7  F008         	call	int_func,f	;refresh shadow registers
  8843                           tosu	equ	0xFFF
  8844                           tosh	equ	0xFFE
  8845                           tosl	equ	0xFFD
  8846                           pclath	equ	0xFFA
  8847                           tblptru	equ	0xFF8
  8848                           tblptrh	equ	0xFF7
  8849                           tblptrl	equ	0xFF6
  8850                           tablat	equ	0xFF5
  8851                           prodh	equ	0xFF4
  8852                           prodl	equ	0xFF3
  8853                           intcon	equ	0xFF2
  8854                           intcon2	equ	0xFF1
  8855                           intcon3	equ	0xFF0
  8856                           indf0	equ	0xFEF
  8857                           postinc0	equ	0xFEE
  8858                           fsr0h	equ	0xFEA
  8859                           fsr0l	equ	0xFE9
  8860                           wreg	equ	0xFE8
  8861                           indf1	equ	0xFE7
  8862                           postinc1	equ	0xFE6
  8863                           postdec1	equ	0xFE5
  8864                           fsr1h	equ	0xFE2
  8865                           fsr1l	equ	0xFE1
  8866                           indf2	equ	0xFDF
  8867                           postinc2	equ	0xFDE
  8868                           postdec2	equ	0xFDD
  8869                           fsr2h	equ	0xFDA
  8870                           fsr2l	equ	0xFD9
  8871                           status	equ	0xFD8
  8872                           
  8873                           	psect	intcode_body
  8874  0011EE                     __pintcode_body:
  8875                           	opt stack 20
  8876  0011EE                     int_func:
  8877                           	opt stack 20
  8878  0011EE  0006               	pop		; remove dummy address from shadow register refresh
  8879  0011F0  CFFA F02D          	movff	pclath,??_keypressed+2
  8880  0011F4  CFFB F02E          	movff	pclatu,??_keypressed+3
  8881  0011F8  CFE9 F02F          	movff	fsr0l,??_keypressed+4
  8882  0011FC  CFEA F030          	movff	fsr0h,??_keypressed+5
  8883  001200  CFE1 F031          	movff	fsr1l,??_keypressed+6
  8884  001204  CFE2 F032          	movff	fsr1h,??_keypressed+7
  8885  001208  CFD9 F033          	movff	fsr2l,??_keypressed+8
  8886  00120C  CFDA F034          	movff	fsr2h,??_keypressed+9
  8887  001210  CFF3 F035          	movff	prodl,??_keypressed+10
  8888  001214  CFF4 F036          	movff	prodh,??_keypressed+11
  8889  001218  CFF6 F037          	movff	tblptrl,??_keypressed+12
  8890  00121C  CFF7 F038          	movff	tblptrh,??_keypressed+13
  8891  001220  CFF8 F039          	movff	tblptru,??_keypressed+14
  8892  001224  CFF5 F03A          	movff	tablat,??_keypressed+15
  8893                           
  8894                           ;main.c: 299: if(INT1IF){
  8895  001228  A0F0               	btfss	intcon3,0,c	;volatile
  8896  00122A  D2A9               	goto	i2l373
  8897                           
  8898                           ;main.c: 300: int i;
  8899                           ;main.c: 301: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8900  00122C  3881               	swapf	3969,w,c	;volatile
  8901  00122E  0B0F               	andlw	15
  8902  001230  0B0F               	andlw	15
  8903  001232  6E3D               	movwf	keypressed@keypress,c
  8904                           
  8905                           ;main.c: 302: switch(state)
  8906  001234  D28E               	goto	i2l8250
  8907  001236                     i2l8096:
  8908                           
  8909                           ;main.c: 304: for (i=0;i<7;i++)
  8910  001236  0E00               	movlw	0
  8911  001238  6E3C               	movwf	keypressed@i+1,c
  8912  00123A  0E00               	movlw	0
  8913  00123C  6E3B               	movwf	keypressed@i,c
  8914  00123E                     i2l8098:
  8915  00123E  BE3C               	btfsc	keypressed@i+1,7,c
  8916  001240  D006               	goto	i2l8102
  8917  001242  503C               	movf	keypressed@i+1,w,c
  8918  001244  E11D               	bnz	i2l8108
  8919  001246  0E07               	movlw	7
  8920  001248  5C3B               	subwf	keypressed@i,w,c
  8921  00124A  B0D8               	btfsc	status,0,c
  8922  00124C  D019               	goto	i2l8108
  8923  00124E                     i2l8102:
  8924                           
  8925                           ;main.c: 305: startTime[i]=time_i[i];
  8926  00124E  90D8               	bcf	status,0,c
  8927  001250  343B               	rlcf	keypressed@i,w,c
  8928  001252  6ED9               	movwf	fsr2l,c
  8929  001254  343C               	rlcf	keypressed@i+1,w,c
  8930  001256  6EDA               	movwf	fsr2h,c
  8931  001258  0E3E               	movlw	low _time_i
  8932  00125A  26D9               	addwf	fsr2l,f,c
  8933  00125C  0E00               	movlw	high _time_i
  8934  00125E  22DA               	addwfc	fsr2h,f,c
  8935  001260  90D8               	bcf	status,0,c
  8936  001262  343B               	rlcf	keypressed@i,w,c
  8937  001264  6EE1               	movwf	fsr1l,c
  8938  001266  343C               	rlcf	keypressed@i+1,w,c
  8939  001268  6EE2               	movwf	fsr1h,c
  8940  00126A  0E0E               	movlw	low _startTime
  8941  00126C  26E1               	addwf	fsr1l,f,c
  8942  00126E  0E01               	movlw	high _startTime
  8943  001270  22E2               	addwfc	fsr1h,f,c
  8944  001272  CFDE FFE6          	movff	postinc2,postinc1
  8945  001276  CFDD FFE5          	movff	postdec2,postdec1
  8946  00127A  4A3B               	infsnz	keypressed@i,f,c
  8947  00127C  2A3C               	incf	keypressed@i+1,f,c
  8948  00127E  D7DF               	goto	i2l8098
  8949  001280                     i2l8108:
  8950                           
  8951                           ;main.c: 306: if (keys[keypress]=='B'&&menuIndex<menuSize)
  8952  001280  503D               	movf	keypressed@keypress,w,c
  8953  001282  0D01               	mullw	1
  8954  001284  0ED5               	movlw	low _keys
  8955  001286  24F3               	addwf	prodl,w,c
  8956  001288  6EF6               	movwf	tblptrl,c
  8957  00128A  0EFE               	movlw	high _keys
  8958  00128C  20F4               	addwfc	prodh,w,c
  8959  00128E  6EF7               	movwf	tblptrh,c
  8960  001290                     	if	1	;There are 3 active tblptr bytes
  8961  001290  6AF8               	clrf	tblptru,c
  8962  001292  0E00               	movlw	low (__mediumconst shr (0+16))
  8963  001294  22F8               	addwfc	tblptru,f,c
  8964  001296                     	endif
  8965  001296  0008               	tblrd		*
  8966  001298  50F5               	movf	tablat,w,c
  8967  00129A  0A42               	xorlw	66
  8968  00129C  A4D8               	btfss	status,2,c
  8969  00129E  D012               	goto	i2l8114
  8970  0012A0  0100               	movlb	0	; () banked
  8971  0012A2  51F8               	movf	_menuSize& (0+255),w,b
  8972  0012A4  0100               	movlb	0	; () banked
  8973  0012A6  5DF6               	subwf	_menuIndex& (0+255),w,b
  8974  0012A8  0100               	movlb	0	; () banked
  8975  0012AA  51F7               	movf	(_menuIndex+1)& (0+255),w,b
  8976  0012AC  0A80               	xorlw	128
  8977  0012AE  6E2B               	movwf	??_keypressed& (0+255),c
  8978  0012B0  0100               	movlb	0	; () banked
  8979  0012B2  51F9               	movf	(_menuSize+1)& (0+255),w,b
  8980  0012B4  0A80               	xorlw	128
  8981  0012B6  582B               	subwfb	??_keypressed& (0+255),w,c
  8982  0012B8  B0D8               	btfsc	status,0,c
  8983  0012BA  D004               	goto	i2l8114
  8984                           
  8985                           ; BSR set to: 0
  8986                           ;main.c: 307: menuIndex++;
  8987  0012BC  0100               	movlb	0	; () banked
  8988  0012BE  4BF6               	infsnz	_menuIndex& (0+255),f,b
  8989  0012C0  2BF7               	incf	(_menuIndex+1)& (0+255),f,b
  8990  0012C2  D25C               	goto	i2l336
  8991  0012C4                     i2l8114:
  8992                           
  8993                           ;main.c: 308: else if (keys[keypress]=='A'&&menuIndex>1)
  8994  0012C4  503D               	movf	keypressed@keypress,w,c
  8995  0012C6  0D01               	mullw	1
  8996  0012C8  0ED5               	movlw	low _keys
  8997  0012CA  24F3               	addwf	prodl,w,c
  8998  0012CC  6EF6               	movwf	tblptrl,c
  8999  0012CE  0EFE               	movlw	high _keys
  9000  0012D0  20F4               	addwfc	prodh,w,c
  9001  0012D2  6EF7               	movwf	tblptrh,c
  9002  0012D4                     	if	1	;There are 3 active tblptr bytes
  9003  0012D4  6AF8               	clrf	tblptru,c
  9004  0012D6  0E00               	movlw	low (__mediumconst shr (0+16))
  9005  0012D8  22F8               	addwfc	tblptru,f,c
  9006  0012DA                     	endif
  9007  0012DA  0008               	tblrd		*
  9008  0012DC  50F5               	movf	tablat,w,c
  9009  0012DE  0A41               	xorlw	65
  9010  0012E0  A4D8               	btfss	status,2,c
  9011  0012E2  D010               	goto	i2l8120
  9012  0012E4  0100               	movlb	0	; () banked
  9013  0012E6  BFF7               	btfsc	(_menuIndex+1)& (0+255),7,b
  9014  0012E8  D00D               	goto	i2l8120
  9015  0012EA  0100               	movlb	0	; () banked
  9016  0012EC  51F7               	movf	(_menuIndex+1)& (0+255),w,b
  9017  0012EE  E105               	bnz	i2u1278_40
  9018  0012F0  0E02               	movlw	2
  9019  0012F2  0100               	movlb	0	; () banked
  9020  0012F4  5DF6               	subwf	_menuIndex& (0+255),w,b
  9021  0012F6  A0D8               	btfss	status,0,c
  9022  0012F8  D005               	goto	i2l8120
  9023  0012FA                     i2u1278_40:
  9024                           
  9025                           ; BSR set to: 0
  9026                           ;main.c: 309: menuIndex--;
  9027  0012FA  0100               	movlb	0	; () banked
  9028  0012FC  07F6               	decf	_menuIndex& (0+255),f,b
  9029  0012FE  A0D8               	btfss	status,0,c
  9030  001300  07F7               	decf	(_menuIndex+1)& (0+255),f,b
  9031  001302  D23C               	goto	i2l336
  9032  001304                     i2l8120:
  9033                           
  9034                           ;main.c: 310: else if (keys[keypress]=='C'){
  9035  001304  503D               	movf	keypressed@keypress,w,c
  9036  001306  0D01               	mullw	1
  9037  001308  0ED5               	movlw	low _keys
  9038  00130A  24F3               	addwf	prodl,w,c
  9039  00130C  6EF6               	movwf	tblptrl,c
  9040  00130E  0EFE               	movlw	high _keys
  9041  001310  20F4               	addwfc	prodh,w,c
  9042  001312  6EF7               	movwf	tblptrh,c
  9043  001314                     	if	1	;There are 3 active tblptr bytes
  9044  001314  6AF8               	clrf	tblptru,c
  9045  001316  0E00               	movlw	low (__mediumconst shr (0+16))
  9046  001318  22F8               	addwfc	tblptru,f,c
  9047  00131A                     	endif
  9048  00131A  0008               	tblrd		*
  9049  00131C  50F5               	movf	tablat,w,c
  9050  00131E  0A43               	xorlw	67
  9051  001320  B4D8               	btfsc	status,2,c
  9052  001322  D01D               	goto	i2l8140
  9053  001324  D22B               	goto	i2l336
  9054  001326                     i2l8124:
  9055  001326  0E73               	movlw	115
  9056  001328  D20A               	goto	L7
  9057  00132A                     i2l8126:
  9058  00132A  0E6C               	movlw	108
  9059  00132C  D208               	goto	L7
  9060  00132E                     i2l8128:
  9061  00132E  0E63               	movlw	99
  9062  001330  D206               	goto	L7
  9063  001332                     i2l8130:
  9064                           
  9065                           ;main.c: 319: lcdInst(0b10000000);;
  9066  001332  0E80               	movlw	128
  9067  001334  ECB8  F018         	call	i2_lcdInst
  9068                           
  9069                           ;main.c: 320: printf("invalid");
  9070  001338  0EE4               	movlw	low STR_15
  9071  00133A  6E23               	movwf	i2printf@f,c
  9072  00133C  0EFF               	movlw	high STR_15
  9073  00133E  6E24               	movwf	i2printf@f+1,c
  9074  001340  ECEB  F017         	call	i2_printf	;wreg free
  9075                           
  9076                           ;main.c: 321: lcdInst(0b11000000);;
  9077  001344  0EC0               	movlw	192
  9078  001346  ECB8  F018         	call	i2_lcdInst
  9079                           
  9080                           ;main.c: 322: printf("menu selection");
  9081  00134A  0EC7               	movlw	low STR_16
  9082  00134C  6E23               	movwf	i2printf@f,c
  9083  00134E  0EFF               	movlw	high STR_16
  9084  001350  6E24               	movwf	i2printf@f+1,c
  9085  001352  ECEB  F017         	call	i2_printf	;wreg free
  9086                           
  9087                           ;main.c: 323: lcdInst(0b10010000);;
  9088  001356  0E90               	movlw	144
  9089  001358  ECB8  F018         	call	i2_lcdInst
  9090                           
  9091                           ;main.c: 325: }
  9092                           
  9093                           ;main.c: 324: break;
  9094  00135C  D20F               	goto	i2l336
  9095  00135E                     i2l8140:
  9096  00135E  C0F6  F02B         	movff	_menuIndex,??_keypressed
  9097  001362  C0F7  F02C         	movff	_menuIndex+1,??_keypressed+1
  9098                           
  9099                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9100                           ; Switch size 1, requested type "space"
  9101                           ; Number of cases is 1, Range of values is 0 to 0
  9102                           ; switch strategies available:
  9103                           ; Name         Instructions Cycles
  9104                           ; simple_byte            4     3 (average)
  9105                           ;	Chosen strategy is simple_byte
  9106  001366  502C               	movf	??_keypressed+1,w,c
  9107  001368  0A00               	xorlw	0	; case 0
  9108  00136A  A4D8               	btfss	status,2,c
  9109  00136C  D7E2               	goto	i2l8130
  9110                           
  9111                           ; Switch size 1, requested type "space"
  9112                           ; Number of cases is 3, Range of values is 1 to 3
  9113                           ; switch strategies available:
  9114                           ; Name         Instructions Cycles
  9115                           ; simple_byte           10     6 (average)
  9116                           ;	Chosen strategy is simple_byte
  9117  00136E  502B               	movf	??_keypressed,w,c
  9118  001370  0A01               	xorlw	1	; case 1
  9119  001372  B4D8               	btfsc	status,2,c
  9120  001374  D7D8               	goto	i2l8124
  9121  001376  0A03               	xorlw	3	; case 2
  9122  001378  B4D8               	btfsc	status,2,c
  9123  00137A  D7D7               	goto	i2l8126
  9124  00137C  0A01               	xorlw	1	; case 3
  9125  00137E  B4D8               	btfsc	status,2,c
  9126  001380  D7D6               	goto	i2l8128
  9127  001382  D7D7               	goto	i2l8130
  9128  001384                     i2l8144:
  9129                           
  9130                           ; BSR set to: 0
  9131                           ;main.c: 333: for (i=0;i<7;i++)
  9132  001384  0E00               	movlw	0
  9133  001386  6E3C               	movwf	keypressed@i+1,c
  9134  001388  0E00               	movlw	0
  9135  00138A  6E3B               	movwf	keypressed@i,c
  9136  00138C                     i2l8146:
  9137                           
  9138                           ; BSR set to: 0
  9139  00138C  BE3C               	btfsc	keypressed@i+1,7,c
  9140  00138E  D006               	goto	i2l8150
  9141  001390  503C               	movf	keypressed@i+1,w,c
  9142  001392  E11D               	bnz	i2l8156
  9143  001394  0E07               	movlw	7
  9144  001396  5C3B               	subwf	keypressed@i,w,c
  9145  001398  B0D8               	btfsc	status,0,c
  9146  00139A  D019               	goto	i2l8156
  9147  00139C                     i2l8150:
  9148                           
  9149                           ;main.c: 334: startTime[i]=time_i[i];
  9150  00139C  90D8               	bcf	status,0,c
  9151  00139E  343B               	rlcf	keypressed@i,w,c
  9152  0013A0  6ED9               	movwf	fsr2l,c
  9153  0013A2  343C               	rlcf	keypressed@i+1,w,c
  9154  0013A4  6EDA               	movwf	fsr2h,c
  9155  0013A6  0E3E               	movlw	low _time_i
  9156  0013A8  26D9               	addwf	fsr2l,f,c
  9157  0013AA  0E00               	movlw	high _time_i
  9158  0013AC  22DA               	addwfc	fsr2h,f,c
  9159  0013AE  90D8               	bcf	status,0,c
  9160  0013B0  343B               	rlcf	keypressed@i,w,c
  9161  0013B2  6EE1               	movwf	fsr1l,c
  9162  0013B4  343C               	rlcf	keypressed@i+1,w,c
  9163  0013B6  6EE2               	movwf	fsr1h,c
  9164  0013B8  0E0E               	movlw	low _startTime
  9165  0013BA  26E1               	addwf	fsr1l,f,c
  9166  0013BC  0E01               	movlw	high _startTime
  9167  0013BE  22E2               	addwfc	fsr1h,f,c
  9168  0013C0  CFDE FFE6          	movff	postinc2,postinc1
  9169  0013C4  CFDD FFE5          	movff	postdec2,postdec1
  9170  0013C8  4A3B               	infsnz	keypressed@i,f,c
  9171  0013CA  2A3C               	incf	keypressed@i+1,f,c
  9172  0013CC  D7DF               	goto	i2l8146
  9173  0013CE                     i2l8156:
  9174                           
  9175                           ;main.c: 336: if (keys[keypress]=='B'&&logIndex<events){
  9176  0013CE  503D               	movf	keypressed@keypress,w,c
  9177  0013D0  0D01               	mullw	1
  9178  0013D2  0ED5               	movlw	low _keys
  9179  0013D4  24F3               	addwf	prodl,w,c
  9180  0013D6  6EF6               	movwf	tblptrl,c
  9181  0013D8  0EFE               	movlw	high _keys
  9182  0013DA  20F4               	addwfc	prodh,w,c
  9183  0013DC  6EF7               	movwf	tblptrh,c
  9184  0013DE                     	if	1	;There are 3 active tblptr bytes
  9185  0013DE  6AF8               	clrf	tblptru,c
  9186  0013E0  0E00               	movlw	low (__mediumconst shr (0+16))
  9187  0013E2  22F8               	addwfc	tblptru,f,c
  9188  0013E4                     	endif
  9189  0013E4  0008               	tblrd		*
  9190  0013E6  50F5               	movf	tablat,w,c
  9191  0013E8  0A42               	xorlw	66
  9192  0013EA  A4D8               	btfss	status,2,c
  9193  0013EC  D012               	goto	i2l8162
  9194  0013EE  0100               	movlb	0	; () banked
  9195  0013F0  51F2               	movf	_events& (0+255),w,b
  9196  0013F2  0100               	movlb	0	; () banked
  9197  0013F4  5DF4               	subwf	_logIndex& (0+255),w,b
  9198  0013F6  0100               	movlb	0	; () banked
  9199  0013F8  51F5               	movf	(_logIndex+1)& (0+255),w,b
  9200  0013FA  0A80               	xorlw	128
  9201  0013FC  6E2B               	movwf	??_keypressed& (0+255),c
  9202  0013FE  0100               	movlb	0	; () banked
  9203  001400  51F3               	movf	(_events+1)& (0+255),w,b
  9204  001402  0A80               	xorlw	128
  9205  001404  582B               	subwfb	??_keypressed& (0+255),w,c
  9206  001406  B0D8               	btfsc	status,0,c
  9207  001408  D004               	goto	i2l8162
  9208                           
  9209                           ; BSR set to: 0
  9210                           ;main.c: 340: logIndex++;
  9211  00140A  0100               	movlb	0	; () banked
  9212  00140C  4BF4               	infsnz	_logIndex& (0+255),f,b
  9213  00140E  2BF5               	incf	(_logIndex+1)& (0+255),f,b
  9214                           
  9215                           ;main.c: 341: }
  9216  001410  D1B5               	goto	i2l336
  9217  001412                     i2l8162:
  9218                           
  9219                           ;main.c: 342: else if (keys[keypress]=='A'&&logIndex>1)
  9220  001412  503D               	movf	keypressed@keypress,w,c
  9221  001414  0D01               	mullw	1
  9222  001416  0ED5               	movlw	low _keys
  9223  001418  24F3               	addwf	prodl,w,c
  9224  00141A  6EF6               	movwf	tblptrl,c
  9225  00141C  0EFE               	movlw	high _keys
  9226  00141E  20F4               	addwfc	prodh,w,c
  9227  001420  6EF7               	movwf	tblptrh,c
  9228  001422                     	if	1	;There are 3 active tblptr bytes
  9229  001422  6AF8               	clrf	tblptru,c
  9230  001424  0E00               	movlw	low (__mediumconst shr (0+16))
  9231  001426  22F8               	addwfc	tblptru,f,c
  9232  001428                     	endif
  9233  001428  0008               	tblrd		*
  9234  00142A  50F5               	movf	tablat,w,c
  9235  00142C  0A41               	xorlw	65
  9236  00142E  A4D8               	btfss	status,2,c
  9237  001430  D077               	goto	i2l8196
  9238  001432  0100               	movlb	0	; () banked
  9239  001434  BFF5               	btfsc	(_logIndex+1)& (0+255),7,b
  9240  001436  D074               	goto	i2l8196
  9241  001438  0100               	movlb	0	; () banked
  9242  00143A  51F5               	movf	(_logIndex+1)& (0+255),w,b
  9243  00143C  E105               	bnz	i2u1285_40
  9244  00143E  0E02               	movlw	2
  9245  001440  0100               	movlb	0	; () banked
  9246  001442  5DF4               	subwf	_logIndex& (0+255),w,b
  9247  001444  A0D8               	btfss	status,0,c
  9248  001446  D06C               	goto	i2l8196
  9249  001448                     i2u1285_40:
  9250                           
  9251                           ; BSR set to: 0
  9252                           ;main.c: 343: logIndex--;
  9253  001448  0100               	movlb	0	; () banked
  9254  00144A  07F4               	decf	_logIndex& (0+255),f,b
  9255  00144C  A0D8               	btfss	status,0,c
  9256  00144E  07F5               	decf	(_logIndex+1)& (0+255),f,b
  9257  001450  D195               	goto	i2l336
  9258  001452                     i2l8172:
  9259                           
  9260                           ; BSR set to: 0
  9261                           ;main.c: 348: for (i=0;i<7;i++)
  9262  001452  0E00               	movlw	0
  9263  001454  6E3C               	movwf	keypressed@i+1,c
  9264  001456  0E00               	movlw	0
  9265  001458  6E3B               	movwf	keypressed@i,c
  9266  00145A                     i2l8174:
  9267                           
  9268                           ; BSR set to: 0
  9269  00145A  BE3C               	btfsc	keypressed@i+1,7,c
  9270  00145C  D006               	goto	i2l8178
  9271  00145E  503C               	movf	keypressed@i+1,w,c
  9272  001460  E11D               	bnz	i2l8184
  9273  001462  0E07               	movlw	7
  9274  001464  5C3B               	subwf	keypressed@i,w,c
  9275  001466  B0D8               	btfsc	status,0,c
  9276  001468  D019               	goto	i2l8184
  9277  00146A                     i2l8178:
  9278                           
  9279                           ;main.c: 349: startTime[i]=time_i[i];
  9280  00146A  90D8               	bcf	status,0,c
  9281  00146C  343B               	rlcf	keypressed@i,w,c
  9282  00146E  6ED9               	movwf	fsr2l,c
  9283  001470  343C               	rlcf	keypressed@i+1,w,c
  9284  001472  6EDA               	movwf	fsr2h,c
  9285  001474  0E3E               	movlw	low _time_i
  9286  001476  26D9               	addwf	fsr2l,f,c
  9287  001478  0E00               	movlw	high _time_i
  9288  00147A  22DA               	addwfc	fsr2h,f,c
  9289  00147C  90D8               	bcf	status,0,c
  9290  00147E  343B               	rlcf	keypressed@i,w,c
  9291  001480  6EE1               	movwf	fsr1l,c
  9292  001482  343C               	rlcf	keypressed@i+1,w,c
  9293  001484  6EE2               	movwf	fsr1h,c
  9294  001486  0E0E               	movlw	low _startTime
  9295  001488  26E1               	addwf	fsr1l,f,c
  9296  00148A  0E01               	movlw	high _startTime
  9297  00148C  22E2               	addwfc	fsr1h,f,c
  9298  00148E  CFDE FFE6          	movff	postinc2,postinc1
  9299  001492  CFDD FFE5          	movff	postdec2,postdec1
  9300  001496  4A3B               	infsnz	keypressed@i,f,c
  9301  001498  2A3C               	incf	keypressed@i+1,f,c
  9302  00149A  D7DF               	goto	i2l8174
  9303  00149C                     i2l8184:
  9304                           
  9305                           ;main.c: 351: if (keys[keypress]=='B'&&creditIndex<creditSize)
  9306  00149C  503D               	movf	keypressed@keypress,w,c
  9307  00149E  0D01               	mullw	1
  9308  0014A0  0ED5               	movlw	low _keys
  9309  0014A2  24F3               	addwf	prodl,w,c
  9310  0014A4  6EF6               	movwf	tblptrl,c
  9311  0014A6  0EFE               	movlw	high _keys
  9312  0014A8  20F4               	addwfc	prodh,w,c
  9313  0014AA  6EF7               	movwf	tblptrh,c
  9314  0014AC                     	if	1	;There are 3 active tblptr bytes
  9315  0014AC  6AF8               	clrf	tblptru,c
  9316  0014AE  0E00               	movlw	low (__mediumconst shr (0+16))
  9317  0014B0  22F8               	addwfc	tblptru,f,c
  9318  0014B2                     	endif
  9319  0014B2  0008               	tblrd		*
  9320  0014B4  50F5               	movf	tablat,w,c
  9321  0014B6  0A42               	xorlw	66
  9322  0014B8  A4D8               	btfss	status,2,c
  9323  0014BA  D012               	goto	i2l8190
  9324  0014BC  0100               	movlb	0	; () banked
  9325  0014BE  51EC               	movf	_creditSize& (0+255),w,b
  9326  0014C0  0100               	movlb	0	; () banked
  9327  0014C2  5DEA               	subwf	_creditIndex& (0+255),w,b
  9328  0014C4  0100               	movlb	0	; () banked
  9329  0014C6  51EB               	movf	(_creditIndex+1)& (0+255),w,b
  9330  0014C8  0A80               	xorlw	128
  9331  0014CA  6E2B               	movwf	??_keypressed& (0+255),c
  9332  0014CC  0100               	movlb	0	; () banked
  9333  0014CE  51ED               	movf	(_creditSize+1)& (0+255),w,b
  9334  0014D0  0A80               	xorlw	128
  9335  0014D2  582B               	subwfb	??_keypressed& (0+255),w,c
  9336  0014D4  B0D8               	btfsc	status,0,c
  9337  0014D6  D004               	goto	i2l8190
  9338                           
  9339                           ; BSR set to: 0
  9340                           ;main.c: 352: creditIndex++;
  9341  0014D8  0100               	movlb	0	; () banked
  9342  0014DA  4BEA               	infsnz	_creditIndex& (0+255),f,b
  9343  0014DC  2BEB               	incf	(_creditIndex+1)& (0+255),f,b
  9344  0014DE  D14E               	goto	i2l336
  9345  0014E0                     i2l8190:
  9346                           
  9347                           ;main.c: 353: else if (keys[keypress]=='A'&&creditIndex>1)
  9348  0014E0  503D               	movf	keypressed@keypress,w,c
  9349  0014E2  0D01               	mullw	1
  9350  0014E4  0ED5               	movlw	low _keys
  9351  0014E6  24F3               	addwf	prodl,w,c
  9352  0014E8  6EF6               	movwf	tblptrl,c
  9353  0014EA  0EFE               	movlw	high _keys
  9354  0014EC  20F4               	addwfc	prodh,w,c
  9355  0014EE  6EF7               	movwf	tblptrh,c
  9356  0014F0                     	if	1	;There are 3 active tblptr bytes
  9357  0014F0  6AF8               	clrf	tblptru,c
  9358  0014F2  0E00               	movlw	low (__mediumconst shr (0+16))
  9359  0014F4  22F8               	addwfc	tblptru,f,c
  9360  0014F6                     	endif
  9361  0014F6  0008               	tblrd		*
  9362  0014F8  50F5               	movf	tablat,w,c
  9363  0014FA  0A41               	xorlw	65
  9364  0014FC  A4D8               	btfss	status,2,c
  9365  0014FE  D010               	goto	i2l8196
  9366  001500  0100               	movlb	0	; () banked
  9367  001502  BFEB               	btfsc	(_creditIndex+1)& (0+255),7,b
  9368  001504  D00D               	goto	i2l8196
  9369  001506  0100               	movlb	0	; () banked
  9370  001508  51EB               	movf	(_creditIndex+1)& (0+255),w,b
  9371  00150A  E105               	bnz	i2u1292_40
  9372  00150C  0E02               	movlw	2
  9373  00150E  0100               	movlb	0	; () banked
  9374  001510  5DEA               	subwf	_creditIndex& (0+255),w,b
  9375  001512  A0D8               	btfss	status,0,c
  9376  001514  D005               	goto	i2l8196
  9377  001516                     i2u1292_40:
  9378                           
  9379                           ; BSR set to: 0
  9380                           ;main.c: 354: creditIndex--;
  9381  001516  0100               	movlb	0	; () banked
  9382  001518  07EA               	decf	_creditIndex& (0+255),f,b
  9383  00151A  A0D8               	btfss	status,0,c
  9384  00151C  07EB               	decf	(_creditIndex+1)& (0+255),f,b
  9385  00151E  D12E               	goto	i2l336
  9386  001520                     i2l8196:
  9387                           
  9388                           ;main.c: 355: else if(keys[keypress]=='D')
  9389  001520  503D               	movf	keypressed@keypress,w,c
  9390  001522  0D01               	mullw	1
  9391  001524  0ED5               	movlw	low _keys
  9392  001526  24F3               	addwf	prodl,w,c
  9393  001528  6EF6               	movwf	tblptrl,c
  9394  00152A  0EFE               	movlw	high _keys
  9395  00152C  20F4               	addwfc	prodh,w,c
  9396  00152E  6EF7               	movwf	tblptrh,c
  9397  001530                     	if	1	;There are 3 active tblptr bytes
  9398  001530  6AF8               	clrf	tblptru,c
  9399  001532  0E00               	movlw	low (__mediumconst shr (0+16))
  9400  001534  22F8               	addwfc	tblptru,f,c
  9401  001536                     	endif
  9402  001536  0008               	tblrd		*
  9403  001538  50F5               	movf	tablat,w,c
  9404  00153A  0A44               	xorlw	68
  9405  00153C  A4D8               	btfss	status,2,c
  9406  00153E  D11E               	goto	i2l336
  9407  001540                     i2l8198:
  9408                           
  9409                           ;main.c: 356: nstate='m';
  9410  001540  0E6D               	movlw	109
  9411  001542  D0FD               	goto	L7
  9412  001544                     i2l8200:
  9413                           
  9414                           ; BSR set to: 0
  9415                           ;main.c: 359: if (keys[keypress]=='1'){
  9416  001544  503D               	movf	keypressed@keypress,w,c
  9417  001546  0D01               	mullw	1
  9418  001548  0ED5               	movlw	low _keys
  9419  00154A  24F3               	addwf	prodl,w,c
  9420  00154C  6EF6               	movwf	tblptrl,c
  9421  00154E  0EFE               	movlw	high _keys
  9422  001550  20F4               	addwfc	prodh,w,c
  9423  001552  6EF7               	movwf	tblptrh,c
  9424  001554                     	if	1	;There are 3 active tblptr bytes
  9425  001554  6AF8               	clrf	tblptru,c
  9426  001556  0E00               	movlw	low (__mediumconst shr (0+16))
  9427  001558  22F8               	addwfc	tblptru,f,c
  9428  00155A                     	endif
  9429  00155A  0008               	tblrd		*
  9430  00155C  50F5               	movf	tablat,w,c
  9431  00155E  0A31               	xorlw	49
  9432  001560  A4D8               	btfss	status,2,c
  9433  001562  D012               	goto	i2l8206
  9434                           
  9435                           ; BSR set to: 0
  9436                           ;main.c: 360: eskaNoCap++;
  9437  001564  0100               	movlb	0	; () banked
  9438  001566  4BD5               	infsnz	_eskaNoCap& (0+255),f,b
  9439  001568  2BD6               	incf	(_eskaNoCap+1)& (0+255),f,b
  9440                           
  9441                           ; BSR set to: 0
  9442                           ;main.c: 361: eskaNoCap%=100;
  9443  00156A  C0D5  F001         	movff	_eskaNoCap,i2___awmod@dividend
  9444  00156E  C0D6  F002         	movff	_eskaNoCap+1,i2___awmod@dividend+1
  9445  001572  0E00               	movlw	0
  9446  001574  6E04               	movwf	i2___awmod@divisor+1,c
  9447  001576  0E64               	movlw	100
  9448  001578  6E03               	movwf	i2___awmod@divisor,c
  9449  00157A  EC8B  F015         	call	i2___awmod	;wreg free
  9450  00157E  C001  F0D5         	movff	?i2___awmod,_eskaNoCap
  9451  001582  C002  F0D6         	movff	?i2___awmod+1,_eskaNoCap+1
  9452                           
  9453                           ;main.c: 362: }
  9454  001586  D0FA               	goto	i2l336
  9455  001588                     i2l8206:
  9456                           
  9457                           ;main.c: 363: else if (keys[keypress]=='2'){
  9458  001588  503D               	movf	keypressed@keypress,w,c
  9459  00158A  0D01               	mullw	1
  9460  00158C  0ED5               	movlw	low _keys
  9461  00158E  24F3               	addwf	prodl,w,c
  9462  001590  6EF6               	movwf	tblptrl,c
  9463  001592  0EFE               	movlw	high _keys
  9464  001594  20F4               	addwfc	prodh,w,c
  9465  001596  6EF7               	movwf	tblptrh,c
  9466  001598                     	if	1	;There are 3 active tblptr bytes
  9467  001598  6AF8               	clrf	tblptru,c
  9468  00159A  0E00               	movlw	low (__mediumconst shr (0+16))
  9469  00159C  22F8               	addwfc	tblptru,f,c
  9470  00159E                     	endif
  9471  00159E  0008               	tblrd		*
  9472  0015A0  50F5               	movf	tablat,w,c
  9473  0015A2  0A32               	xorlw	50
  9474  0015A4  A4D8               	btfss	status,2,c
  9475  0015A6  D012               	goto	i2l8212
  9476                           
  9477                           ;main.c: 364: eskaWCap++;
  9478  0015A8  0100               	movlb	0	; () banked
  9479  0015AA  4BD7               	infsnz	_eskaWCap& (0+255),f,b
  9480  0015AC  2BD8               	incf	(_eskaWCap+1)& (0+255),f,b
  9481                           
  9482                           ; BSR set to: 0
  9483                           ;main.c: 365: eskaWCap%=100;
  9484  0015AE  C0D7  F001         	movff	_eskaWCap,i2___awmod@dividend
  9485  0015B2  C0D8  F002         	movff	_eskaWCap+1,i2___awmod@dividend+1
  9486  0015B6  0E00               	movlw	0
  9487  0015B8  6E04               	movwf	i2___awmod@divisor+1,c
  9488  0015BA  0E64               	movlw	100
  9489  0015BC  6E03               	movwf	i2___awmod@divisor,c
  9490  0015BE  EC8B  F015         	call	i2___awmod	;wreg free
  9491  0015C2  C001  F0D7         	movff	?i2___awmod,_eskaWCap
  9492  0015C6  C002  F0D8         	movff	?i2___awmod+1,_eskaWCap+1
  9493                           
  9494                           ;main.c: 366: }
  9495  0015CA  D0D8               	goto	i2l336
  9496  0015CC                     i2l8212:
  9497                           
  9498                           ;main.c: 367: else if (keys[keypress]=='4'){
  9499  0015CC  503D               	movf	keypressed@keypress,w,c
  9500  0015CE  0D01               	mullw	1
  9501  0015D0  0ED5               	movlw	low _keys
  9502  0015D2  24F3               	addwf	prodl,w,c
  9503  0015D4  6EF6               	movwf	tblptrl,c
  9504  0015D6  0EFE               	movlw	high _keys
  9505  0015D8  20F4               	addwfc	prodh,w,c
  9506  0015DA  6EF7               	movwf	tblptrh,c
  9507  0015DC                     	if	1	;There are 3 active tblptr bytes
  9508  0015DC  6AF8               	clrf	tblptru,c
  9509  0015DE  0E00               	movlw	low (__mediumconst shr (0+16))
  9510  0015E0  22F8               	addwfc	tblptru,f,c
  9511  0015E2                     	endif
  9512  0015E2  0008               	tblrd		*
  9513  0015E4  50F5               	movf	tablat,w,c
  9514  0015E6  0A34               	xorlw	52
  9515  0015E8  A4D8               	btfss	status,2,c
  9516  0015EA  D012               	goto	i2l8218
  9517                           
  9518                           ;main.c: 368: yopNoCap++;
  9519  0015EC  0100               	movlb	0	; () banked
  9520  0015EE  4BDF               	infsnz	_yopNoCap& (0+255),f,b
  9521  0015F0  2BE0               	incf	(_yopNoCap+1)& (0+255),f,b
  9522                           
  9523                           ; BSR set to: 0
  9524                           ;main.c: 369: yopNoCap%=100;
  9525  0015F2  C0DF  F001         	movff	_yopNoCap,i2___awmod@dividend
  9526  0015F6  C0E0  F002         	movff	_yopNoCap+1,i2___awmod@dividend+1
  9527  0015FA  0E00               	movlw	0
  9528  0015FC  6E04               	movwf	i2___awmod@divisor+1,c
  9529  0015FE  0E64               	movlw	100
  9530  001600  6E03               	movwf	i2___awmod@divisor,c
  9531  001602  EC8B  F015         	call	i2___awmod	;wreg free
  9532  001606  C001  F0DF         	movff	?i2___awmod,_yopNoCap
  9533  00160A  C002  F0E0         	movff	?i2___awmod+1,_yopNoCap+1
  9534                           
  9535                           ;main.c: 370: }
  9536  00160E  D0B6               	goto	i2l336
  9537  001610                     i2l8218:
  9538                           
  9539                           ;main.c: 371: else if (keys[keypress]=='5'){
  9540  001610  503D               	movf	keypressed@keypress,w,c
  9541  001612  0D01               	mullw	1
  9542  001614  0ED5               	movlw	low _keys
  9543  001616  24F3               	addwf	prodl,w,c
  9544  001618  6EF6               	movwf	tblptrl,c
  9545  00161A  0EFE               	movlw	high _keys
  9546  00161C  20F4               	addwfc	prodh,w,c
  9547  00161E  6EF7               	movwf	tblptrh,c
  9548  001620                     	if	1	;There are 3 active tblptr bytes
  9549  001620  6AF8               	clrf	tblptru,c
  9550  001622  0E00               	movlw	low (__mediumconst shr (0+16))
  9551  001624  22F8               	addwfc	tblptru,f,c
  9552  001626                     	endif
  9553  001626  0008               	tblrd		*
  9554  001628  50F5               	movf	tablat,w,c
  9555  00162A  0A35               	xorlw	53
  9556  00162C  A4D8               	btfss	status,2,c
  9557  00162E  D012               	goto	i2l8224
  9558                           
  9559                           ;main.c: 372: yopWCap++;
  9560  001630  0100               	movlb	0	; () banked
  9561  001632  4BE1               	infsnz	_yopWCap& (0+255),f,b
  9562  001634  2BE2               	incf	(_yopWCap+1)& (0+255),f,b
  9563                           
  9564                           ; BSR set to: 0
  9565                           ;main.c: 373: yopWCap%=100;
  9566  001636  C0E1  F001         	movff	_yopWCap,i2___awmod@dividend
  9567  00163A  C0E2  F002         	movff	_yopWCap+1,i2___awmod@dividend+1
  9568  00163E  0E00               	movlw	0
  9569  001640  6E04               	movwf	i2___awmod@divisor+1,c
  9570  001642  0E64               	movlw	100
  9571  001644  6E03               	movwf	i2___awmod@divisor,c
  9572  001646  EC8B  F015         	call	i2___awmod	;wreg free
  9573  00164A  C001  F0E1         	movff	?i2___awmod,_yopWCap
  9574  00164E  C002  F0E2         	movff	?i2___awmod+1,_yopWCap+1
  9575                           
  9576                           ;main.c: 374: }
  9577  001652  D094               	goto	i2l336
  9578  001654                     i2l8224:
  9579                           
  9580                           ;main.c: 375: else if (keys[keypress]=='7'||keys[keypress]=='8')
  9581  001654  503D               	movf	keypressed@keypress,w,c
  9582  001656  0D01               	mullw	1
  9583  001658  0ED5               	movlw	low _keys
  9584  00165A  24F3               	addwf	prodl,w,c
  9585  00165C  6EF6               	movwf	tblptrl,c
  9586  00165E  0EFE               	movlw	high _keys
  9587  001660  20F4               	addwfc	prodh,w,c
  9588  001662  6EF7               	movwf	tblptrh,c
  9589  001664                     	if	1	;There are 3 active tblptr bytes
  9590  001664  6AF8               	clrf	tblptru,c
  9591  001666  0E00               	movlw	low (__mediumconst shr (0+16))
  9592  001668  22F8               	addwfc	tblptru,f,c
  9593  00166A                     	endif
  9594  00166A  0008               	tblrd		*
  9595  00166C  50F5               	movf	tablat,w,c
  9596  00166E  0A37               	xorlw	55
  9597  001670  B4D8               	btfsc	status,2,c
  9598  001672  D010               	goto	i2l8228
  9599  001674  503D               	movf	keypressed@keypress,w,c
  9600  001676  0D01               	mullw	1
  9601  001678  0ED5               	movlw	low _keys
  9602  00167A  24F3               	addwf	prodl,w,c
  9603  00167C  6EF6               	movwf	tblptrl,c
  9604  00167E  0EFE               	movlw	high _keys
  9605  001680  20F4               	addwfc	prodh,w,c
  9606  001682  6EF7               	movwf	tblptrh,c
  9607  001684                     	if	1	;There are 3 active tblptr bytes
  9608  001684  6AF8               	clrf	tblptru,c
  9609  001686  0E00               	movlw	low (__mediumconst shr (0+16))
  9610  001688  22F8               	addwfc	tblptru,f,c
  9611  00168A                     	endif
  9612  00168A  0008               	tblrd		*
  9613  00168C  50F5               	movf	tablat,w,c
  9614  00168E  0A38               	xorlw	56
  9615  001690  A4D8               	btfss	status,2,c
  9616  001692  D074               	goto	i2l336
  9617  001694                     i2l8228:
  9618                           
  9619                           ;main.c: 376: nstate='e';
  9620  001694  0E65               	movlw	101
  9621  001696  D053               	goto	L7
  9622  001698                     i2l8230:
  9623                           
  9624                           ; BSR set to: 0
  9625                           ;main.c: 379: if (keys[keypress]=='B'&&endIndex<endSize)
  9626  001698  503D               	movf	keypressed@keypress,w,c
  9627  00169A  0D01               	mullw	1
  9628  00169C  0ED5               	movlw	low _keys
  9629  00169E  24F3               	addwf	prodl,w,c
  9630  0016A0  6EF6               	movwf	tblptrl,c
  9631  0016A2  0EFE               	movlw	high _keys
  9632  0016A4  20F4               	addwfc	prodh,w,c
  9633  0016A6  6EF7               	movwf	tblptrh,c
  9634  0016A8                     	if	1	;There are 3 active tblptr bytes
  9635  0016A8  6AF8               	clrf	tblptru,c
  9636  0016AA  0E00               	movlw	low (__mediumconst shr (0+16))
  9637  0016AC  22F8               	addwfc	tblptru,f,c
  9638  0016AE                     	endif
  9639  0016AE  0008               	tblrd		*
  9640  0016B0  50F5               	movf	tablat,w,c
  9641  0016B2  0A42               	xorlw	66
  9642  0016B4  A4D8               	btfss	status,2,c
  9643  0016B6  D012               	goto	i2l8236
  9644                           
  9645                           ; BSR set to: 0
  9646  0016B8  0100               	movlb	0	; () banked
  9647  0016BA  51F0               	movf	_endSize& (0+255),w,b
  9648  0016BC  0100               	movlb	0	; () banked
  9649  0016BE  5DEE               	subwf	_endIndex& (0+255),w,b
  9650  0016C0  0100               	movlb	0	; () banked
  9651  0016C2  51EF               	movf	(_endIndex+1)& (0+255),w,b
  9652  0016C4  0A80               	xorlw	128
  9653  0016C6  6E2B               	movwf	??_keypressed& (0+255),c
  9654  0016C8  0100               	movlb	0	; () banked
  9655  0016CA  51F1               	movf	(_endSize+1)& (0+255),w,b
  9656  0016CC  0A80               	xorlw	128
  9657  0016CE  582B               	subwfb	??_keypressed& (0+255),w,c
  9658  0016D0  B0D8               	btfsc	status,0,c
  9659  0016D2  D004               	goto	i2l8236
  9660                           
  9661                           ; BSR set to: 0
  9662                           ;main.c: 380: endIndex++;
  9663  0016D4  0100               	movlb	0	; () banked
  9664  0016D6  4BEE               	infsnz	_endIndex& (0+255),f,b
  9665  0016D8  2BEF               	incf	(_endIndex+1)& (0+255),f,b
  9666  0016DA  D050               	goto	i2l336
  9667  0016DC                     i2l8236:
  9668                           
  9669                           ; BSR set to: 0
  9670                           ;main.c: 381: else if (keys[keypress]=='A'&&endIndex>1)
  9671  0016DC  503D               	movf	keypressed@keypress,w,c
  9672  0016DE  0D01               	mullw	1
  9673  0016E0  0ED5               	movlw	low _keys
  9674  0016E2  24F3               	addwf	prodl,w,c
  9675  0016E4  6EF6               	movwf	tblptrl,c
  9676  0016E6  0EFE               	movlw	high _keys
  9677  0016E8  20F4               	addwfc	prodh,w,c
  9678  0016EA  6EF7               	movwf	tblptrh,c
  9679  0016EC                     	if	1	;There are 3 active tblptr bytes
  9680  0016EC  6AF8               	clrf	tblptru,c
  9681  0016EE  0E00               	movlw	low (__mediumconst shr (0+16))
  9682  0016F0  22F8               	addwfc	tblptru,f,c
  9683  0016F2                     	endif
  9684  0016F2  0008               	tblrd		*
  9685  0016F4  50F5               	movf	tablat,w,c
  9686  0016F6  0A41               	xorlw	65
  9687  0016F8  A4D8               	btfss	status,2,c
  9688  0016FA  D010               	goto	i2l8242
  9689                           
  9690                           ; BSR set to: 0
  9691  0016FC  0100               	movlb	0	; () banked
  9692  0016FE  BFEF               	btfsc	(_endIndex+1)& (0+255),7,b
  9693  001700  D00D               	goto	i2l8242
  9694  001702  0100               	movlb	0	; () banked
  9695  001704  51EF               	movf	(_endIndex+1)& (0+255),w,b
  9696  001706  E105               	bnz	i2u1303_40
  9697  001708  0E02               	movlw	2
  9698  00170A  0100               	movlb	0	; () banked
  9699  00170C  5DEE               	subwf	_endIndex& (0+255),w,b
  9700  00170E  A0D8               	btfss	status,0,c
  9701  001710  D005               	goto	i2l8242
  9702  001712                     i2u1303_40:
  9703                           
  9704                           ; BSR set to: 0
  9705                           ;main.c: 382: endIndex--;
  9706  001712  0100               	movlb	0	; () banked
  9707  001714  07EE               	decf	_endIndex& (0+255),f,b
  9708  001716  A0D8               	btfss	status,0,c
  9709  001718  07EF               	decf	(_endIndex+1)& (0+255),f,b
  9710  00171A  D030               	goto	i2l336
  9711  00171C                     i2l8242:
  9712                           
  9713                           ; BSR set to: 0
  9714                           ;main.c: 383: else if (keys[keypress]=='C')
  9715  00171C  503D               	movf	keypressed@keypress,w,c
  9716  00171E  0D01               	mullw	1
  9717  001720  0ED5               	movlw	low _keys
  9718  001722  24F3               	addwf	prodl,w,c
  9719  001724  6EF6               	movwf	tblptrl,c
  9720  001726  0EFE               	movlw	high _keys
  9721  001728  20F4               	addwfc	prodh,w,c
  9722  00172A  6EF7               	movwf	tblptrh,c
  9723  00172C                     	if	1	;There are 3 active tblptr bytes
  9724  00172C  6AF8               	clrf	tblptru,c
  9725  00172E  0E00               	movlw	low (__mediumconst shr (0+16))
  9726  001730  22F8               	addwfc	tblptru,f,c
  9727  001732                     	endif
  9728  001732  0008               	tblrd		*
  9729  001734  50F5               	movf	tablat,w,c
  9730  001736  0A43               	xorlw	67
  9731  001738  A4D8               	btfss	status,2,c
  9732  00173A  D020               	goto	i2l336
  9733                           
  9734                           ; BSR set to: 0
  9735                           ;main.c: 384: nstate='r';
  9736  00173C  0E72               	movlw	114
  9737  00173E                     L7:
  9738  00173E  0100               	movlb	0	; () banked
  9739  001740  6FE8               	movwf	_nstate& (0+255),b
  9740                           
  9741                           ; BSR set to: 0
  9742                           ;main.c: 385: break;
  9743                           
  9744                           ; BSR set to: 0
  9745                           
  9746                           ; BSR set to: 0
  9747  001742  D01C               	goto	i2l336
  9748  001744                     i2l8246:
  9749                           
  9750                           ; BSR set to: 0
  9751                           ;main.c: 387: printf("no page found");
  9752  001744  0ED6               	movlw	low STR_17
  9753  001746  6E23               	movwf	i2printf@f,c
  9754  001748  0EFF               	movlw	high STR_17
  9755  00174A  6E24               	movwf	i2printf@f+1,c
  9756  00174C  ECEB  F017         	call	i2_printf	;wreg free
  9757                           
  9758                           ;main.c: 389: }
  9759                           
  9760                           ;main.c: 388: break;
  9761  001750  D015               	goto	i2l336
  9762  001752                     i2l8250:
  9763  001752  0100               	movlb	0	; () banked
  9764  001754  51E9               	movf	_state& (0+255),w,b
  9765                           
  9766                           ; Switch size 1, requested type "space"
  9767                           ; Number of cases is 6, Range of values is 99 to 115
  9768                           ; switch strategies available:
  9769                           ; Name         Instructions Cycles
  9770                           ; simple_byte           19    10 (average)
  9771                           ;	Chosen strategy is simple_byte
  9772  001756  0A63               	xorlw	99	; case 99
  9773  001758  B4D8               	btfsc	status,2,c
  9774  00175A  D67B               	goto	i2l8172
  9775  00175C  0A06               	xorlw	6	; case 101
  9776  00175E  B4D8               	btfsc	status,2,c
  9777  001760  D79B               	goto	i2l8230
  9778  001762  0A09               	xorlw	9	; case 108
  9779  001764  B4D8               	btfsc	status,2,c
  9780  001766  D60E               	goto	i2l8144
  9781  001768  0A01               	xorlw	1	; case 109
  9782  00176A  B4D8               	btfsc	status,2,c
  9783  00176C  D564               	goto	i2l8096
  9784  00176E  0A1F               	xorlw	31	; case 114
  9785  001770  B4D8               	btfsc	status,2,c
  9786  001772  D6E6               	goto	i2l8198
  9787  001774  0A01               	xorlw	1	; case 115
  9788  001776  B4D8               	btfsc	status,2,c
  9789  001778  D6E5               	goto	i2l8200
  9790  00177A  D7E4               	goto	i2l8246
  9791  00177C                     i2l336:
  9792                           
  9793                           ;main.c: 390: INT1IF = 0;
  9794  00177C  90F0               	bcf	intcon3,0,c	;volatile
  9795  00177E                     i2l373:
  9796  00177E  C03A  FFF5         	movff	??_keypressed+15,tablat
  9797  001782  C039  FFF8         	movff	??_keypressed+14,tblptru
  9798  001786  C038  FFF7         	movff	??_keypressed+13,tblptrh
  9799  00178A  C037  FFF6         	movff	??_keypressed+12,tblptrl
  9800  00178E  C036  FFF4         	movff	??_keypressed+11,prodh
  9801  001792  C035  FFF3         	movff	??_keypressed+10,prodl
  9802  001796  C034  FFDA         	movff	??_keypressed+9,fsr2h
  9803  00179A  C033  FFD9         	movff	??_keypressed+8,fsr2l
  9804  00179E  C032  FFE2         	movff	??_keypressed+7,fsr1h
  9805  0017A2  C031  FFE1         	movff	??_keypressed+6,fsr1l
  9806  0017A6  C030  FFEA         	movff	??_keypressed+5,fsr0h
  9807  0017AA  C02F  FFE9         	movff	??_keypressed+4,fsr0l
  9808  0017AE  C02E  FFFB         	movff	??_keypressed+3,pclatu
  9809  0017B2  C02D  FFFA         	movff	??_keypressed+2,pclath
  9810  0017B6  9277               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9811  0017B8  0011               	retfie		f
  9812  0017BA                     __end_of_keypressed:
  9813                           	opt stack 0
  9814                           tosu	equ	0xFFF
  9815                           tosh	equ	0xFFE
  9816                           tosl	equ	0xFFD
  9817                           pclatu	equ	0xFFB
  9818                           pclath	equ	0xFFA
  9819                           tblptru	equ	0xFF8
  9820                           tblptrh	equ	0xFF7
  9821                           tblptrl	equ	0xFF6
  9822                           tablat	equ	0xFF5
  9823                           prodh	equ	0xFF4
  9824                           prodl	equ	0xFF3
  9825                           intcon	equ	0xFF2
  9826                           intcon2	equ	0xFF1
  9827                           intcon3	equ	0xFF0
  9828                           indf0	equ	0xFEF
  9829                           postinc0	equ	0xFEE
  9830                           fsr0h	equ	0xFEA
  9831                           fsr0l	equ	0xFE9
  9832                           wreg	equ	0xFE8
  9833                           indf1	equ	0xFE7
  9834                           postinc1	equ	0xFE6
  9835                           postdec1	equ	0xFE5
  9836                           fsr1h	equ	0xFE2
  9837                           fsr1l	equ	0xFE1
  9838                           indf2	equ	0xFDF
  9839                           postinc2	equ	0xFDE
  9840                           postdec2	equ	0xFDD
  9841                           fsr2h	equ	0xFDA
  9842                           fsr2l	equ	0xFD9
  9843                           status	equ	0xFD8
  9844                           
  9845 ;; *************** function i2_printf *****************
  9846 ;; Defined at:
  9847 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  9848 ;; Parameters:    Size  Location     Type
  9849 ;;  f               2   34[COMRAM] PTR const unsigned char 
  9850 ;;		 -> STR_17(14), STR_16(15), STR_15(8), display1(18), 
  9851 ;;		 -> display0(18), 
  9852 ;; Auto vars:     Size  Location     Type
  9853 ;;  printf          4   38[COMRAM] struct __prbuf
  9854 ;;  printf          2   36[COMRAM] PTR void [1]
  9855 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
  9856 ;; Return value:  Size  Location     Type
  9857 ;;                  2   34[COMRAM] int 
  9858 ;; Registers used:
  9859 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9860 ;; Tracked objects:
  9861 ;;		On entry : 0/0
  9862 ;;		On exit  : 0/0
  9863 ;;		Unchanged: 0/0
  9864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9865 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9866 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9868 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9869 ;;Total ram usage:        8 bytes
  9870 ;; Hardware stack levels used:    1
  9871 ;; Hardware stack levels required when called:    3
  9872 ;; This function calls:
  9873 ;;		i2__doprnt
  9874 ;; This function is called by:
  9875 ;;		_keypressed
  9876 ;; This function uses a non-reentrant model
  9877 ;;
  9878                           
  9879                           	psect	text32
  9880  002FD6                     __ptext32:
  9881                           	opt stack 0
  9882  002FD6                     i2_printf:
  9883                           	opt stack 20
  9884                           
  9885                           ;incstack = 0
  9886  002FD6  0E00               	movlw	0
  9887  002FD8  6E27               	movwf	i2printf@pb,c
  9888  002FDA  0E00               	movlw	0
  9889  002FDC  6E28               	movwf	i2printf@pb+1,c
  9890  002FDE  0E64               	movlw	low i2_putch
  9891  002FE0  6E29               	movwf	i2printf@pb+2,c
  9892  002FE2  0E31               	movlw	high i2_putch
  9893  002FE4  6E2A               	movwf	i2printf@pb+3,c
  9894  002FE6  0E25               	movlw	low (?i2_printf+2)
  9895  002FE8  6E25               	movwf	i2printf@ap,c
  9896  002FEA  0E00               	movlw	high (?i2_printf+2)
  9897  002FEC  6E26               	movwf	i2printf@ap+1,c
  9898                           
  9899                           ;	Return value of i2_printf is never used
  9900  002FEE  0E27               	movlw	low i2printf@pb
  9901  002FF0  6E0D               	movwf	i2__doprnt@pb,c
  9902  002FF2  0E00               	movlw	high i2printf@pb
  9903  002FF4  6E0E               	movwf	i2__doprnt@pb+1,c
  9904  002FF6  C023  F00F         	movff	i2printf@f,i2__doprnt@f
  9905  002FFA  C024  F010         	movff	i2printf@f+1,i2__doprnt@f+1
  9906  002FFE  0E25               	movlw	low i2printf@ap
  9907  003000  6E11               	movwf	i2__doprnt@ap,c
  9908  003002  0E00               	movlw	high i2printf@ap
  9909  003004  6E12               	movwf	i2__doprnt@ap+1,c
  9910  003006  ECCB  F004         	call	i2__doprnt	;wreg free
  9911  00300A  0012               	return	
  9912  00300C                     __end_ofi2_printf:
  9913                           	opt stack 0
  9914                           tosu	equ	0xFFF
  9915                           tosh	equ	0xFFE
  9916                           tosl	equ	0xFFD
  9917                           pclatu	equ	0xFFB
  9918                           pclath	equ	0xFFA
  9919                           tblptru	equ	0xFF8
  9920                           tblptrh	equ	0xFF7
  9921                           tblptrl	equ	0xFF6
  9922                           tablat	equ	0xFF5
  9923                           prodh	equ	0xFF4
  9924                           prodl	equ	0xFF3
  9925                           intcon	equ	0xFF2
  9926                           intcon2	equ	0xFF1
  9927                           intcon3	equ	0xFF0
  9928                           indf0	equ	0xFEF
  9929                           postinc0	equ	0xFEE
  9930                           fsr0h	equ	0xFEA
  9931                           fsr0l	equ	0xFE9
  9932                           wreg	equ	0xFE8
  9933                           indf1	equ	0xFE7
  9934                           postinc1	equ	0xFE6
  9935                           postdec1	equ	0xFE5
  9936                           fsr1h	equ	0xFE2
  9937                           fsr1l	equ	0xFE1
  9938                           indf2	equ	0xFDF
  9939                           postinc2	equ	0xFDE
  9940                           postdec2	equ	0xFDD
  9941                           fsr2h	equ	0xFDA
  9942                           fsr2l	equ	0xFD9
  9943                           status	equ	0xFD8
  9944                           
  9945 ;; *************** function i2__doprnt *****************
  9946 ;; Defined at:
  9947 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  9948 ;; Parameters:    Size  Location     Type
  9949 ;;  pb              2   12[COMRAM] PTR struct __prbuf
  9950 ;;		 -> sprintf@pb(4), printf@pb(4), 
  9951 ;;  f               2   14[COMRAM] PTR const unsigned char 
  9952 ;;		 -> STR_17(14), STR_16(15), STR_15(8), STR_14(5), 
  9953 ;;		 -> STR_13(5), STR_12(5), STR_11(5), STR_10(20), 
  9954 ;;		 -> STR_9(20), STR_8(22), STR_7(19), menu(720), 
  9955 ;;		 -> STR_6(15), STR_5(6), STR_4(16), STR_3(25), 
  9956 ;;		 -> STR_2(23), STR_1(23), display1(18), display0(18), 
  9957 ;;  ap              2   16[COMRAM] PTR PTR void 
  9958 ;;		 -> sprintf@ap(2), printf@ap(2), 
  9959 ;; Auto vars:     Size  Location     Type
  9960 ;;  _doprnt         4    0        struct .
  9961 ;;  _doprnt         2   31[COMRAM] int 
  9962 ;;  _doprnt         2   28[COMRAM] unsigned int 
  9963 ;;  _doprnt         2   26[COMRAM] PTR const unsigned char 
  9964 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_18(7), 
  9965 ;;		 -> _doprnt@c(1), menu(720), ndisplay1(18), ndisplay0(18), 
  9966 ;;  _doprnt         2   24[COMRAM] unsigned int 
  9967 ;;  _doprnt         1   33[COMRAM] char 
  9968 ;;  _doprnt         1   30[COMRAM] unsigned char 
  9969 ;;  _doprnt         1   23[COMRAM] char 
  9970 ;;  _doprnt         1   22[COMRAM] unsigned char 
  9971 ;; Return value:  Size  Location     Type
  9972 ;;                  2   12[COMRAM] int 
  9973 ;; Registers used:
  9974 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9975 ;; Tracked objects:
  9976 ;;		On entry : 0/0
  9977 ;;		On exit  : 0/0
  9978 ;;		Unchanged: 0/0
  9979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9980 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9981 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9982 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9983 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9984 ;;Total ram usage:       22 bytes
  9985 ;; Hardware stack levels used:    1
  9986 ;; Hardware stack levels required when called:    2
  9987 ;; This function calls:
  9988 ;;		Absolute function
  9989 ;;		i2___lwdiv
  9990 ;;		i2___lwmod
  9991 ;;		i2___wmul
  9992 ;;		i2_isdigit
  9993 ;;		i2_putch
  9994 ;; This function is called by:
  9995 ;;		i2_printf
  9996 ;; This function uses a non-reentrant model
  9997 ;;
  9998                           
  9999                           	psect	text33
 10000  000996                     __ptext33:
 10001                           	opt stack 0
 10002  000996                     i2__doprnt:
 10003                           	opt stack 20
 10004                           
 10005                           ;doprnt.c: 499: signed char c;
 10006                           ;doprnt.c: 501: int width;
 10007                           ;doprnt.c: 506: signed char prec;
 10008                           ;doprnt.c: 508: unsigned char flag;
 10009                           ;doprnt.c: 523: union {
 10010                           ;doprnt.c: 524: unsigned long vd;
 10011                           ;doprnt.c: 525: double integ;
 10012                           ;doprnt.c: 526: } tmpval;
 10013                           ;doprnt.c: 528: unsigned int val;
 10014                           ;doprnt.c: 529: unsigned len;
 10015                           ;doprnt.c: 530: const char * cp;
 10016                           ;doprnt.c: 536: while(c = *f++) {
 10017                           
 10018                           ;incstack = 0
 10019  000996  EFD6  F008         	goto	i2l7934
 10020  00099A                     i2l7728:
 10021                           
 10022                           ;doprnt.c: 538: if(c != '%')
 10023  00099A  0E25               	movlw	37
 10024  00099C  1822               	xorwf	i2__doprnt@c,w,c
 10025  00099E  B4D8               	btfsc	status,2,c
 10026  0009A0  D036               	goto	i2l7738
 10027                           
 10028                           ;doprnt.c: 540: {
 10029                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 10030  0009A2  EE20 F002          	lfsr	2,2
 10031  0009A6  500D               	movf	i2__doprnt@pb,w,c
 10032  0009A8  26D9               	addwf	fsr2l,f,c
 10033  0009AA  500E               	movf	i2__doprnt@pb+1,w,c
 10034  0009AC  22DA               	addwfc	fsr2h,f,c
 10035  0009AE  50DE               	movf	postinc2,w,c
 10036  0009B0  10DE               	iorwf	postinc2,w,c
 10037  0009B2  B4D8               	btfsc	status,2,c
 10038  0009B4  D016               	goto	i2l7734
 10039  0009B6  EE20 F002          	lfsr	2,2
 10040  0009BA  500D               	movf	i2__doprnt@pb,w,c
 10041  0009BC  26D9               	addwf	fsr2l,f,c
 10042  0009BE  500E               	movf	i2__doprnt@pb+1,w,c
 10043  0009C0  22DA               	addwfc	fsr2h,f,c
 10044  0009C2  CFDE F013          	movff	postinc2,??i2__doprnt
 10045  0009C6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10046  0009CA  D801               	call	i2u1199_48
 10047  0009CC  D3EF               	goto	i2l7934
 10048  0009CE                     i2u1199_48:
 10049  0009CE  0005               	push	
 10050  0009D0  6EFA               	movwf	pclath,c
 10051  0009D2  5013               	movf	??i2__doprnt,w,c
 10052  0009D4  6EFD               	movwf	tosl,c
 10053  0009D6  5014               	movf	??i2__doprnt+1,w,c
 10054  0009D8  6EFE               	movwf	tosh,c
 10055  0009DA  6AFF               	clrf	tosu,c
 10056  0009DC  50FA               	movf	pclath,w,c
 10057  0009DE  5022               	movf	i2__doprnt@c,w,c
 10058  0009E0  0012               	return		;indir
 10059  0009E2                     i2l7734:
 10060  0009E2  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10061  0009E6  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10062  0009EA  CFDE F013          	movff	postinc2,??i2__doprnt
 10063  0009EE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10064  0009F2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10065  0009F6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10066  0009FA  C022  FFDF         	movff	i2__doprnt@c,indf2
 10067  0009FE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10068  000A02  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10069  000A06  2ADE               	incf	postinc2,f,c
 10070  000A08  0E00               	movlw	0
 10071  000A0A  22DD               	addwfc	postdec2,f,c
 10072                           
 10073                           ;doprnt.c: 542: continue;
 10074  000A0C  D3CF               	goto	i2l7934
 10075  000A0E                     i2l7738:
 10076                           
 10077                           ;doprnt.c: 543: }
 10078                           ;doprnt.c: 546: width = 0;
 10079  000A0E  0E00               	movlw	0
 10080  000A10  6E21               	movwf	i2__doprnt@width+1,c
 10081  000A12  0E00               	movlw	0
 10082  000A14  6E20               	movwf	i2__doprnt@width,c
 10083                           
 10084                           ;doprnt.c: 548: flag = 0;
 10085  000A16  0E00               	movlw	0
 10086  000A18  6E1F               	movwf	i2__doprnt@flag,c
 10087                           
 10088                           ;doprnt.c: 551: switch(*f) {
 10089                           
 10090                           ;doprnt.c: 550: for(;;) {
 10091  000A1A  D003               	goto	i2l7744
 10092  000A1C                     i2l7740:
 10093                           
 10094                           ;doprnt.c: 580: flag |= 0x04;
 10095  000A1C  841F               	bsf	i2__doprnt@flag,2,c
 10096                           
 10097                           ;doprnt.c: 581: f++;
 10098  000A1E  4A0F               	infsnz	i2__doprnt@f,f,c
 10099  000A20  2A10               	incf	i2__doprnt@f+1,f,c
 10100  000A22                     i2l7744:
 10101  000A22  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 10102  000A26  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 10103  000A2A  0E00               	movlw	low (__mediumconst shr (0+16))
 10104  000A2C  6EF8               	movwf	tblptru,c
 10105  000A2E  0E0F               	movlw	(high __ramtop+-1)
 10106  000A30  64F7               	cpfsgt	tblptrh,c
 10107  000A32  D003               	bra	i2u1200_47
 10108  000A34  0008               	tblrd		*
 10109  000A36  50F5               	movf	tablat,w,c
 10110  000A38  D005               	bra	i2u1200_40
 10111  000A3A                     i2u1200_47:
 10112  000A3A  CFF6 FFE9          	movff	tblptrl,fsr0l
 10113  000A3E  CFF7 FFEA          	movff	tblptrh,fsr0h
 10114  000A42  50EF               	movf	indf0,w,c
 10115  000A44                     i2u1200_40:
 10116                           
 10117                           ; Switch size 1, requested type "space"
 10118                           ; Number of cases is 1, Range of values is 48 to 48
 10119                           ; switch strategies available:
 10120                           ; Name         Instructions Cycles
 10121                           ; simple_byte            4     3 (average)
 10122                           ;	Chosen strategy is simple_byte
 10123  000A44  0A30               	xorlw	48	; case 48
 10124  000A46  B4D8               	btfsc	status,2,c
 10125  000A48  D7E9               	goto	i2l7740
 10126                           
 10127                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 10128                           
 10129                           ;doprnt.c: 586: }
 10130                           
 10131                           ;doprnt.c: 585: break;
 10132  000A4A  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 10133  000A4E  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 10134  000A52  0E00               	movlw	low (__mediumconst shr (0+16))
 10135  000A54  6EF8               	movwf	tblptru,c
 10136  000A56  0E0F               	movlw	(high __ramtop+-1)
 10137  000A58  64F7               	cpfsgt	tblptrh,c
 10138  000A5A  D003               	bra	i2u1201_47
 10139  000A5C  0008               	tblrd		*
 10140  000A5E  50F5               	movf	tablat,w,c
 10141  000A60  D005               	bra	i2u1201_40
 10142  000A62                     i2u1201_47:
 10143  000A62  CFF6 FFE9          	movff	tblptrl,fsr0l
 10144  000A66  CFF7 FFEA          	movff	tblptrh,fsr0h
 10145  000A6A  50EF               	movf	indf0,w,c
 10146  000A6C                     i2u1201_40:
 10147  000A6C  EC74  F018         	call	i2_isdigit
 10148  000A70  A0D8               	btfss	status,0,c
 10149  000A72  D154               	goto	i2l7810
 10150                           
 10151                           ;doprnt.c: 598: width = 0;
 10152  000A74  0E00               	movlw	0
 10153  000A76  6E21               	movwf	i2__doprnt@width+1,c
 10154  000A78  0E00               	movlw	0
 10155  000A7A  6E20               	movwf	i2__doprnt@width,c
 10156  000A7C                     i2l7750:
 10157                           
 10158                           ;doprnt.c: 600: width *= 10;
 10159  000A7C  C020  F001         	movff	i2__doprnt@width,i2___wmul@multiplier
 10160  000A80  C021  F002         	movff	i2__doprnt@width+1,i2___wmul@multiplier+1
 10161  000A84  0E00               	movlw	0
 10162  000A86  6E04               	movwf	i2___wmul@multiplicand+1,c
 10163  000A88  0E0A               	movlw	10
 10164  000A8A  6E03               	movwf	i2___wmul@multiplicand,c
 10165  000A8C  EC61  F018         	call	i2___wmul	;wreg free
 10166  000A90  C001  F020         	movff	?i2___wmul,i2__doprnt@width
 10167  000A94  C002  F021         	movff	?i2___wmul+1,i2__doprnt@width+1
 10168                           
 10169                           ;doprnt.c: 601: width += *f++ - '0';
 10170  000A98  0ED0               	movlw	208
 10171  000A9A  6E13               	movwf	??i2__doprnt& (0+255),c
 10172  000A9C  0EFF               	movlw	255
 10173  000A9E  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 10174  000AA0  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 10175  000AA4  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 10176  000AA8  0E00               	movlw	low (__mediumconst shr (0+16))
 10177  000AAA  6EF8               	movwf	tblptru,c
 10178  000AAC  0E0F               	movlw	(high __ramtop+-1)
 10179  000AAE  64F7               	cpfsgt	tblptrh,c
 10180  000AB0  D003               	bra	i2u1203_47
 10181  000AB2  0008               	tblrd		*
 10182  000AB4  50F5               	movf	tablat,w,c
 10183  000AB6  D005               	bra	i2u1203_40
 10184  000AB8                     i2u1203_47:
 10185  000AB8  CFF6 FFE9          	movff	tblptrl,fsr0l
 10186  000ABC  CFF7 FFEA          	movff	tblptrh,fsr0h
 10187  000AC0  50EF               	movf	indf0,w,c
 10188  000AC2                     i2u1203_40:
 10189  000AC2  6E15               	movwf	(??i2__doprnt+2)& (0+255),c
 10190  000AC4  6A16               	clrf	(??i2__doprnt+3)& (0+255),c
 10191  000AC6  5013               	movf	??i2__doprnt,w,c
 10192  000AC8  2615               	addwf	??i2__doprnt+2,f,c
 10193  000ACA  5014               	movf	??i2__doprnt+1,w,c
 10194  000ACC  2216               	addwfc	??i2__doprnt+3,f,c
 10195  000ACE  5015               	movf	??i2__doprnt+2,w,c
 10196  000AD0  2620               	addwf	i2__doprnt@width,f,c
 10197  000AD2  5016               	movf	??i2__doprnt+3,w,c
 10198  000AD4  2221               	addwfc	i2__doprnt@width+1,f,c
 10199  000AD6  4A0F               	infsnz	i2__doprnt@f,f,c
 10200  000AD8  2A10               	incf	i2__doprnt@f+1,f,c
 10201                           
 10202                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 10203  000ADA  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 10204  000ADE  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 10205  000AE2  0E00               	movlw	low (__mediumconst shr (0+16))
 10206  000AE4  6EF8               	movwf	tblptru,c
 10207  000AE6  0E0F               	movlw	(high __ramtop+-1)
 10208  000AE8  64F7               	cpfsgt	tblptrh,c
 10209  000AEA  D003               	bra	i2u1204_47
 10210  000AEC  0008               	tblrd		*
 10211  000AEE  50F5               	movf	tablat,w,c
 10212  000AF0  D005               	bra	i2u1204_40
 10213  000AF2                     i2u1204_47:
 10214  000AF2  CFF6 FFE9          	movff	tblptrl,fsr0l
 10215  000AF6  CFF7 FFEA          	movff	tblptrh,fsr0h
 10216  000AFA  50EF               	movf	indf0,w,c
 10217  000AFC                     i2u1204_40:
 10218  000AFC  EC74  F018         	call	i2_isdigit
 10219  000B00  A0D8               	btfss	status,0,c
 10220  000B02  D10C               	goto	i2l7810
 10221  000B04  D7BB               	goto	i2l7750
 10222  000B06                     i2l7758:
 10223                           
 10224                           ;doprnt.c: 721: flag |= 0x80;
 10225  000B06  8E1F               	bsf	i2__doprnt@flag,7,c
 10226                           
 10227                           ;doprnt.c: 723: break;
 10228  000B08  D135               	goto	i2l491
 10229  000B0A                     i2l7760:
 10230                           
 10231                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 10232  000B0A  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 10233  000B0E  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 10234  000B12  CFDF F013          	movff	indf2,??i2__doprnt
 10235  000B16  0E02               	movlw	2
 10236  000B18  26DE               	addwf	postinc2,f,c
 10237  000B1A  CFDF F014          	movff	indf2,??i2__doprnt+1
 10238  000B1E  0E00               	movlw	0
 10239  000B20  22DD               	addwfc	postdec2,f,c
 10240  000B22  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10241  000B26  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10242  000B2A  CFDE F01B          	movff	postinc2,i2__doprnt@cp
 10243  000B2E  CFDD F01C          	movff	postdec2,i2__doprnt@cp+1
 10244                           
 10245                           ;doprnt.c: 740: if(!cp)
 10246  000B32  501B               	movf	i2__doprnt@cp,w,c
 10247  000B34  101C               	iorwf	i2__doprnt@cp+1,w,c
 10248  000B36  A4D8               	btfss	status,2,c
 10249  000B38  D004               	goto	i2l7766
 10250                           
 10251                           ;doprnt.c: 741: cp = "(null)";
 10252  000B3A  0EEC               	movlw	low STR_18
 10253  000B3C  6E1B               	movwf	i2__doprnt@cp,c
 10254  000B3E  0EFF               	movlw	high STR_18
 10255  000B40  6E1C               	movwf	i2__doprnt@cp+1,c
 10256  000B42                     i2l7766:
 10257                           
 10258                           ;doprnt.c: 745: len = 0;
 10259  000B42  0E00               	movlw	0
 10260  000B44  6E1A               	movwf	i2__doprnt@len+1,c
 10261  000B46  0E00               	movlw	0
 10262  000B48  6E19               	movwf	i2__doprnt@len,c
 10263                           
 10264                           ;doprnt.c: 746: while(cp[len])
 10265  000B4A  D002               	goto	i2l7770
 10266  000B4C                     i2l7768:
 10267                           
 10268                           ;doprnt.c: 747: len++;
 10269  000B4C  4A19               	infsnz	i2__doprnt@len,f,c
 10270  000B4E  2A1A               	incf	i2__doprnt@len+1,f,c
 10271  000B50                     i2l7770:
 10272  000B50  5019               	movf	i2__doprnt@len,w,c
 10273  000B52  241B               	addwf	i2__doprnt@cp,w,c
 10274  000B54  6E13               	movwf	??i2__doprnt& (0+255),c
 10275  000B56  501A               	movf	i2__doprnt@len+1,w,c
 10276  000B58  201C               	addwfc	i2__doprnt@cp+1,w,c
 10277  000B5A  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 10278  000B5C  C013  FFF6         	movff	??i2__doprnt,tblptrl
 10279  000B60  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 10280  000B64  0E00               	movlw	low (__mediumconst shr (0+16))
 10281  000B66  6EF8               	movwf	tblptru,c
 10282  000B68  0E0F               	movlw	(high __ramtop+-1)
 10283  000B6A  64F7               	cpfsgt	tblptrh,c
 10284  000B6C  D003               	bra	i2u1207_47
 10285  000B6E  0008               	tblrd		*
 10286  000B70  50F5               	movf	tablat,w,c
 10287  000B72  D005               	bra	i2u1207_40
 10288  000B74                     i2u1207_47:
 10289  000B74  CFF6 FFE9          	movff	tblptrl,fsr0l
 10290  000B78  CFF7 FFEA          	movff	tblptrh,fsr0h
 10291  000B7C  50EF               	movf	indf0,w,c
 10292  000B7E                     i2u1207_40:
 10293  000B7E  0900               	iorlw	0
 10294  000B80  A4D8               	btfss	status,2,c
 10295  000B82  D7E4               	goto	i2l7768
 10296  000B84                     i2l7772:
 10297                           
 10298                           ;doprnt.c: 757: if(width > len)
 10299  000B84  5020               	movf	i2__doprnt@width,w,c
 10300  000B86  5C19               	subwf	i2__doprnt@len,w,c
 10301  000B88  5021               	movf	i2__doprnt@width+1,w,c
 10302  000B8A  581A               	subwfb	i2__doprnt@len+1,w,c
 10303  000B8C  B0D8               	btfsc	status,0,c
 10304  000B8E  D005               	goto	i2l7776
 10305                           
 10306                           ;doprnt.c: 758: width -= len;
 10307  000B90  5019               	movf	i2__doprnt@len,w,c
 10308  000B92  5E20               	subwf	i2__doprnt@width,f,c
 10309  000B94  501A               	movf	i2__doprnt@len+1,w,c
 10310  000B96  5A21               	subwfb	i2__doprnt@width+1,f,c
 10311  000B98  D03A               	goto	i2l7786
 10312  000B9A                     i2l7776:
 10313                           
 10314                           ;doprnt.c: 759: else
 10315                           ;doprnt.c: 760: width = 0;
 10316  000B9A  0E00               	movlw	0
 10317  000B9C  6E21               	movwf	i2__doprnt@width+1,c
 10318  000B9E  0E00               	movlw	0
 10319  000BA0  6E20               	movwf	i2__doprnt@width,c
 10320                           
 10321                           ;doprnt.c: 764: while(width--)
 10322  000BA2  D035               	goto	i2l7786
 10323  000BA4                     i2l7778:
 10324                           
 10325                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 10326  000BA4  EE20 F002          	lfsr	2,2
 10327  000BA8  500D               	movf	i2__doprnt@pb,w,c
 10328  000BAA  26D9               	addwf	fsr2l,f,c
 10329  000BAC  500E               	movf	i2__doprnt@pb+1,w,c
 10330  000BAE  22DA               	addwfc	fsr2h,f,c
 10331  000BB0  50DE               	movf	postinc2,w,c
 10332  000BB2  10DE               	iorwf	postinc2,w,c
 10333  000BB4  B4D8               	btfsc	status,2,c
 10334  000BB6  D016               	goto	i2l7782
 10335  000BB8  EE20 F002          	lfsr	2,2
 10336  000BBC  500D               	movf	i2__doprnt@pb,w,c
 10337  000BBE  26D9               	addwf	fsr2l,f,c
 10338  000BC0  500E               	movf	i2__doprnt@pb+1,w,c
 10339  000BC2  22DA               	addwfc	fsr2h,f,c
 10340  000BC4  CFDE F013          	movff	postinc2,??i2__doprnt
 10341  000BC8  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10342  000BCC  D801               	call	i2u1211_48
 10343  000BCE  D01F               	goto	i2l7786
 10344  000BD0                     i2u1211_48:
 10345  000BD0  0005               	push	
 10346  000BD2  6EFA               	movwf	pclath,c
 10347  000BD4  5013               	movf	??i2__doprnt,w,c
 10348  000BD6  6EFD               	movwf	tosl,c
 10349  000BD8  5014               	movf	??i2__doprnt+1,w,c
 10350  000BDA  6EFE               	movwf	tosh,c
 10351  000BDC  6AFF               	clrf	tosu,c
 10352  000BDE  50FA               	movf	pclath,w,c
 10353  000BE0  0E20               	movlw	32
 10354  000BE2  0012               	return		;indir
 10355  000BE4                     i2l7782:
 10356  000BE4  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10357  000BE8  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10358  000BEC  CFDE F013          	movff	postinc2,??i2__doprnt
 10359  000BF0  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10360  000BF4  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10361  000BF8  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10362  000BFC  0E20               	movlw	32
 10363  000BFE  6EDF               	movwf	indf2,c
 10364  000C00  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10365  000C04  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10366  000C08  2ADE               	incf	postinc2,f,c
 10367  000C0A  0E00               	movlw	0
 10368  000C0C  22DD               	addwfc	postdec2,f,c
 10369  000C0E                     i2l7786:
 10370  000C0E  0620               	decf	i2__doprnt@width,f,c
 10371  000C10  A0D8               	btfss	status,0,c
 10372  000C12  0621               	decf	i2__doprnt@width+1,f,c
 10373  000C14  2820               	incf	i2__doprnt@width,w,c
 10374  000C16  E1C6               	bnz	i2l7778
 10375  000C18  2821               	incf	i2__doprnt@width+1,w,c
 10376  000C1A  B4D8               	btfsc	status,2,c
 10377  000C1C  D05B               	goto	i2l7800
 10378  000C1E  D7C2               	goto	i2l7778
 10379  000C20                     i2l7788:
 10380                           
 10381                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 10382  000C20  EE20 F002          	lfsr	2,2
 10383  000C24  500D               	movf	i2__doprnt@pb,w,c
 10384  000C26  26D9               	addwf	fsr2l,f,c
 10385  000C28  500E               	movf	i2__doprnt@pb+1,w,c
 10386  000C2A  22DA               	addwfc	fsr2h,f,c
 10387  000C2C  50DE               	movf	postinc2,w,c
 10388  000C2E  10DE               	iorwf	postinc2,w,c
 10389  000C30  B4D8               	btfsc	status,2,c
 10390  000C32  D029               	goto	i2l7794
 10391  000C34  EE20 F002          	lfsr	2,2
 10392  000C38  500D               	movf	i2__doprnt@pb,w,c
 10393  000C3A  26D9               	addwf	fsr2l,f,c
 10394  000C3C  500E               	movf	i2__doprnt@pb+1,w,c
 10395  000C3E  22DA               	addwfc	fsr2h,f,c
 10396  000C40  CFDE F013          	movff	postinc2,??i2__doprnt
 10397  000C44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10398  000C48  D801               	call	i2u1214_48
 10399  000C4A  D01A               	goto	i2l7792
 10400  000C4C                     i2u1214_48:
 10401  000C4C  0005               	push	
 10402  000C4E  6EFA               	movwf	pclath,c
 10403  000C50  5013               	movf	??i2__doprnt,w,c
 10404  000C52  6EFD               	movwf	tosl,c
 10405  000C54  5014               	movf	??i2__doprnt+1,w,c
 10406  000C56  6EFE               	movwf	tosh,c
 10407  000C58  6AFF               	clrf	tosu,c
 10408  000C5A  50FA               	movf	pclath,w,c
 10409  000C5C  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 10410  000C60  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 10411  000C64  0E00               	movlw	low (__mediumconst shr (0+16))
 10412  000C66  6EF8               	movwf	tblptru,c
 10413  000C68  0E0F               	movlw	(high __ramtop+-1)
 10414  000C6A  64F7               	cpfsgt	tblptrh,c
 10415  000C6C  D003               	bra	i2u1215_47
 10416  000C6E  0008               	tblrd		*
 10417  000C70  50F5               	movf	tablat,w,c
 10418  000C72  D005               	bra	i2u1215_40
 10419  000C74                     i2u1215_47:
 10420  000C74  CFF6 FFE9          	movff	tblptrl,fsr0l
 10421  000C78  CFF7 FFEA          	movff	tblptrh,fsr0h
 10422  000C7C  50EF               	movf	indf0,w,c
 10423  000C7E                     i2u1215_40:
 10424  000C7E  0012               	return		;indir
 10425  000C80                     i2l7792:
 10426  000C80  4A1B               	infsnz	i2__doprnt@cp,f,c
 10427  000C82  2A1C               	incf	i2__doprnt@cp+1,f,c
 10428  000C84  D027               	goto	i2l7800
 10429  000C86                     i2l7794:
 10430  000C86  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 10431  000C8A  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 10432  000C8E  0E00               	movlw	low (__mediumconst shr (0+16))
 10433  000C90  6EF8               	movwf	tblptru,c
 10434  000C92  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10435  000C96  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10436  000C9A  CFDE F013          	movff	postinc2,??i2__doprnt
 10437  000C9E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10438  000CA2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10439  000CA6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10440  000CAA  0E0F               	movlw	(high __ramtop+-1)
 10441  000CAC  64F7               	cpfsgt	tblptrh,c
 10442  000CAE  D003               	bra	i2u1216_47
 10443  000CB0  0008               	tblrd		*
 10444  000CB2  50F5               	movf	tablat,w,c
 10445  000CB4  D005               	bra	i2u1216_40
 10446  000CB6                     i2u1216_47:
 10447  000CB6  CFF6 FFE9          	movff	tblptrl,fsr0l
 10448  000CBA  CFF7 FFEA          	movff	tblptrh,fsr0h
 10449  000CBE  50EF               	movf	indf0,w,c
 10450  000CC0                     i2u1216_40:
 10451  000CC0  6EDF               	movwf	indf2,c
 10452  000CC2  4A1B               	infsnz	i2__doprnt@cp,f,c
 10453  000CC4  2A1C               	incf	i2__doprnt@cp+1,f,c
 10454  000CC6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10455  000CCA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10456  000CCE  2ADE               	incf	postinc2,f,c
 10457  000CD0  0E00               	movlw	0
 10458  000CD2  22DD               	addwfc	postdec2,f,c
 10459  000CD4                     i2l7800:
 10460  000CD4  0619               	decf	i2__doprnt@len,f,c
 10461  000CD6  A0D8               	btfss	status,0,c
 10462  000CD8  061A               	decf	i2__doprnt@len+1,f,c
 10463  000CDA  2819               	incf	i2__doprnt@len,w,c
 10464  000CDC  E1A1               	bnz	i2l7788
 10465  000CDE  281A               	incf	i2__doprnt@len+1,w,c
 10466  000CE0  B4D8               	btfsc	status,2,c
 10467  000CE2  D264               	goto	i2l7934
 10468  000CE4  D79D               	goto	i2l7788
 10469  000CE6                     i2l7802:
 10470                           
 10471                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 10472  000CE6  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 10473  000CEA  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 10474  000CEE  CFDF F013          	movff	indf2,??i2__doprnt
 10475  000CF2  0E02               	movlw	2
 10476  000CF4  26DE               	addwf	postinc2,f,c
 10477  000CF6  CFDF F014          	movff	indf2,??i2__doprnt+1
 10478  000CFA  0E00               	movlw	0
 10479  000CFC  22DD               	addwfc	postdec2,f,c
 10480  000CFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10481  000D02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10482  000D06  50DF               	movf	indf2,w,c
 10483  000D08  6E22               	movwf	i2__doprnt@c,c
 10484  000D0A                     i2l7804:
 10485                           
 10486                           ;doprnt.c: 805: cp = (char *)&c;
 10487  000D0A  0E22               	movlw	low i2__doprnt@c
 10488  000D0C  6E1B               	movwf	i2__doprnt@cp,c
 10489  000D0E  0E00               	movlw	high i2__doprnt@c
 10490  000D10  6E1C               	movwf	i2__doprnt@cp+1,c
 10491                           
 10492                           ;doprnt.c: 806: len = 1;
 10493  000D12  0E00               	movlw	0
 10494  000D14  6E1A               	movwf	i2__doprnt@len+1,c
 10495  000D16  0E01               	movlw	1
 10496  000D18  6E19               	movwf	i2__doprnt@len,c
 10497                           
 10498                           ;doprnt.c: 807: goto dostring;
 10499  000D1A  D734               	goto	i2l7772
 10500  000D1C                     i2l7810:
 10501  000D1C  500F               	movf	i2__doprnt@f,w,c
 10502  000D1E  6E13               	movwf	??i2__doprnt& (0+255),c
 10503  000D20  5010               	movf	i2__doprnt@f+1,w,c
 10504  000D22  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 10505  000D24  4A0F               	infsnz	i2__doprnt@f,f,c
 10506  000D26  2A10               	incf	i2__doprnt@f+1,f,c
 10507  000D28  C013  FFF6         	movff	??i2__doprnt,tblptrl
 10508  000D2C  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 10509  000D30  0E00               	movlw	low (__mediumconst shr (0+16))
 10510  000D32  6EF8               	movwf	tblptru,c
 10511  000D34  0E0F               	movlw	(high __ramtop+-1)
 10512  000D36  64F7               	cpfsgt	tblptrh,c
 10513  000D38  D003               	bra	i2u1218_47
 10514  000D3A  0008               	tblrd		*
 10515  000D3C  50F5               	movf	tablat,w,c
 10516  000D3E  D005               	bra	i2u1218_40
 10517  000D40                     i2u1218_47:
 10518  000D40  CFF6 FFE9          	movff	tblptrl,fsr0l
 10519  000D44  CFF7 FFEA          	movff	tblptrh,fsr0h
 10520  000D48  50EF               	movf	indf0,w,c
 10521  000D4A                     i2u1218_40:
 10522  000D4A  6E22               	movwf	i2__doprnt@c,c
 10523  000D4C  5022               	movf	i2__doprnt@c,w,c
 10524                           
 10525                           ; Switch size 1, requested type "space"
 10526                           ; Number of cases is 6, Range of values is 0 to 120
 10527                           ; switch strategies available:
 10528                           ; Name         Instructions Cycles
 10529                           ; simple_byte           19    10 (average)
 10530                           ;	Chosen strategy is simple_byte
 10531  000D4E  0A00               	xorlw	0	; case 0
 10532  000D50  B4D8               	btfsc	status,2,c
 10533  000D52  D248               	goto	i2l7936
 10534  000D54  0A63               	xorlw	99	; case 99
 10535  000D56  B4D8               	btfsc	status,2,c
 10536  000D58  D7C6               	goto	i2l7802
 10537  000D5A  0A07               	xorlw	7	; case 100
 10538  000D5C  B4D8               	btfsc	status,2,c
 10539  000D5E  D00A               	goto	i2l491
 10540  000D60  0A0D               	xorlw	13	; case 105
 10541  000D62  B4D8               	btfsc	status,2,c
 10542  000D64  D007               	goto	i2l491
 10543  000D66  0A1A               	xorlw	26	; case 115
 10544  000D68  B4D8               	btfsc	status,2,c
 10545  000D6A  D6CF               	goto	i2l7760
 10546  000D6C  0A0B               	xorlw	11	; case 120
 10547  000D6E  B4D8               	btfsc	status,2,c
 10548  000D70  D6CA               	goto	i2l7758
 10549  000D72  D7CB               	goto	i2l7804
 10550  000D74                     i2l491:
 10551                           
 10552                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 10553  000D74  BE1F               	btfsc	i2__doprnt@flag,7,c
 10554  000D76  D01D               	goto	i2l7820
 10555                           
 10556                           ;doprnt.c: 1253: {
 10557                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10558  000D78  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 10559  000D7C  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 10560  000D80  CFDF F013          	movff	indf2,??i2__doprnt
 10561  000D84  0E02               	movlw	2
 10562  000D86  26DE               	addwf	postinc2,f,c
 10563  000D88  CFDF F014          	movff	indf2,??i2__doprnt+1
 10564  000D8C  0E00               	movlw	0
 10565  000D8E  22DD               	addwfc	postdec2,f,c
 10566  000D90  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10567  000D94  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10568  000D98  CFDE F01D          	movff	postinc2,i2__doprnt@val
 10569  000D9C  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 10570                           
 10571                           ;doprnt.c: 1261: if((int)val < 0) {
 10572  000DA0  AE1E               	btfss	i2__doprnt@val+1,7,c
 10573  000DA2  D052               	goto	i2l7852
 10574                           
 10575                           ;doprnt.c: 1262: flag |= 0x03;
 10576  000DA4  0E03               	movlw	3
 10577  000DA6  121F               	iorwf	i2__doprnt@flag,f,c
 10578                           
 10579                           ;doprnt.c: 1263: val = -val;
 10580  000DA8  6C1D               	negf	i2__doprnt@val,c
 10581  000DAA  1E1E               	comf	i2__doprnt@val+1,f,c
 10582  000DAC  B0D8               	btfsc	status,0,c
 10583  000DAE  2A1E               	incf	i2__doprnt@val+1,f,c
 10584                           
 10585                           ;doprnt.c: 1264: }
 10586                           ;doprnt.c: 1266: }
 10587  000DB0  D04B               	goto	i2l7852
 10588  000DB2                     i2l7820:
 10589                           
 10590                           ;doprnt.c: 1268: else
 10591                           ;doprnt.c: 1273: {
 10592                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10593  000DB2  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 10594  000DB6  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 10595  000DBA  CFDF F013          	movff	indf2,??i2__doprnt
 10596  000DBE  0E02               	movlw	2
 10597  000DC0  26DE               	addwf	postinc2,f,c
 10598  000DC2  CFDF F014          	movff	indf2,??i2__doprnt+1
 10599  000DC6  0E00               	movlw	0
 10600  000DC8  22DD               	addwfc	postdec2,f,c
 10601  000DCA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10602  000DCE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10603  000DD2  CFDE F01D          	movff	postinc2,i2__doprnt@val
 10604  000DD6  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 10605                           
 10606                           ;doprnt.c: 1287: }
 10607                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 10608  000DDA  D036               	goto	i2l7852
 10609  000DDC                     i2l7822:
 10610                           
 10611                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10612  000DDC  0E01               	movlw	1
 10613  000DDE  6E22               	movwf	i2__doprnt@c,c
 10614  000DE0                     i2l7824:
 10615  000DE0  0E05               	movlw	5
 10616  000DE2  1822               	xorwf	i2__doprnt@c,w,c
 10617  000DE4  B4D8               	btfsc	status,2,c
 10618  000DE6  D038               	goto	i2l7854
 10619                           
 10620                           ;doprnt.c: 1306: if(val < dpowers[c])
 10621  000DE8  5022               	movf	i2__doprnt@c,w,c
 10622  000DEA  0D02               	mullw	2
 10623  000DEC  0EE6               	movlw	low _dpowers
 10624  000DEE  24F3               	addwf	prodl,w,c
 10625  000DF0  6EF6               	movwf	tblptrl,c
 10626  000DF2  0EFE               	movlw	high _dpowers
 10627  000DF4  20F4               	addwfc	prodh,w,c
 10628  000DF6  6EF7               	movwf	tblptrh,c
 10629  000DF8                     	if	1	;There are 3 active tblptr bytes
 10630  000DF8  6AF8               	clrf	tblptru,c
 10631  000DFA  0E00               	movlw	low (__mediumconst shr (0+16))
 10632  000DFC  22F8               	addwfc	tblptru,f,c
 10633  000DFE                     	endif
 10634  000DFE  0009               	tblrd		*+
 10635  000E00  50F5               	movf	tablat,w,c
 10636  000E02  5C1D               	subwf	i2__doprnt@val,w,c
 10637  000E04  0009               	tblrd		*+
 10638  000E06  50F5               	movf	tablat,w,c
 10639  000E08  581E               	subwfb	i2__doprnt@val+1,w,c
 10640  000E0A  A0D8               	btfss	status,0,c
 10641  000E0C  D025               	goto	i2l7854
 10642                           
 10643                           ;doprnt.c: 1307: break;
 10644  000E0E  2A22               	incf	i2__doprnt@c,f,c
 10645  000E10  D7E7               	goto	i2l7824
 10646  000E12                     i2l7836:
 10647                           
 10648                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10649  000E12  0E01               	movlw	1
 10650  000E14  6E22               	movwf	i2__doprnt@c,c
 10651  000E16                     i2l7838:
 10652  000E16  0E04               	movlw	4
 10653  000E18  1822               	xorwf	i2__doprnt@c,w,c
 10654  000E1A  B4D8               	btfsc	status,2,c
 10655  000E1C  D01D               	goto	i2l7854
 10656                           
 10657                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10658  000E1E  5022               	movf	i2__doprnt@c,w,c
 10659  000E20  0D02               	mullw	2
 10660  000E22  0EF0               	movlw	low _hexpowers
 10661  000E24  24F3               	addwf	prodl,w,c
 10662  000E26  6EF6               	movwf	tblptrl,c
 10663  000E28  0EFE               	movlw	high _hexpowers
 10664  000E2A  20F4               	addwfc	prodh,w,c
 10665  000E2C  6EF7               	movwf	tblptrh,c
 10666  000E2E                     	if	1	;There are 3 active tblptr bytes
 10667  000E2E  6AF8               	clrf	tblptru,c
 10668  000E30  0E00               	movlw	low (__mediumconst shr (0+16))
 10669  000E32  22F8               	addwfc	tblptru,f,c
 10670  000E34                     	endif
 10671  000E34  0009               	tblrd		*+
 10672  000E36  50F5               	movf	tablat,w,c
 10673  000E38  5C1D               	subwf	i2__doprnt@val,w,c
 10674  000E3A  0009               	tblrd		*+
 10675  000E3C  50F5               	movf	tablat,w,c
 10676  000E3E  581E               	subwfb	i2__doprnt@val+1,w,c
 10677  000E40  A0D8               	btfss	status,0,c
 10678  000E42  D00A               	goto	i2l7854
 10679                           
 10680                           ;doprnt.c: 1318: break;
 10681  000E44  2A22               	incf	i2__doprnt@c,f,c
 10682  000E46  D7E7               	goto	i2l7838
 10683  000E48                     i2l7852:
 10684  000E48  501F               	movf	i2__doprnt@flag,w,c
 10685  000E4A  0B80               	andlw	128
 10686                           
 10687                           ; Switch size 1, requested type "space"
 10688                           ; Number of cases is 2, Range of values is 0 to 128
 10689                           ; switch strategies available:
 10690                           ; Name         Instructions Cycles
 10691                           ; simple_byte            7     4 (average)
 10692                           ;	Chosen strategy is simple_byte
 10693  000E4C  0A00               	xorlw	0	; case 0
 10694  000E4E  B4D8               	btfsc	status,2,c
 10695  000E50  D7C5               	goto	i2l7822
 10696  000E52  0A80               	xorlw	128	; case 128
 10697  000E54  B4D8               	btfsc	status,2,c
 10698  000E56  D7DD               	goto	i2l7836
 10699  000E58                     i2l7854:
 10700                           
 10701                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10702  000E58  5020               	movf	i2__doprnt@width,w,c
 10703  000E5A  1021               	iorwf	i2__doprnt@width+1,w,c
 10704  000E5C  B4D8               	btfsc	status,2,c
 10705  000E5E  D009               	goto	i2l7860
 10706  000E60  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 10707  000E64  0E03               	movlw	3
 10708  000E66  1613               	andwf	??i2__doprnt,f,c
 10709  000E68  B4D8               	btfsc	status,2,c
 10710  000E6A  D003               	goto	i2l7860
 10711                           
 10712                           ;doprnt.c: 1346: width--;
 10713  000E6C  0620               	decf	i2__doprnt@width,f,c
 10714  000E6E  A0D8               	btfss	status,0,c
 10715  000E70  0621               	decf	i2__doprnt@width+1,f,c
 10716  000E72                     i2l7860:
 10717                           
 10718                           ;doprnt.c: 1381: if(width > c)
 10719  000E72  0E80               	movlw	128
 10720  000E74  BE22               	btfsc	i2__doprnt@c,7,c
 10721  000E76  0E7F               	movlw	127
 10722  000E78  6E13               	movwf	??i2__doprnt& (0+255),c
 10723  000E7A  5020               	movf	i2__doprnt@width,w,c
 10724  000E7C  5C22               	subwf	i2__doprnt@c,w,c
 10725  000E7E  5021               	movf	i2__doprnt@width+1,w,c
 10726  000E80  0A80               	xorlw	128
 10727  000E82  5813               	subwfb	??i2__doprnt& (0+255),w,c
 10728  000E84  B0D8               	btfsc	status,0,c
 10729  000E86  D007               	goto	i2l7864
 10730                           
 10731                           ;doprnt.c: 1382: width -= c;
 10732  000E88  5022               	movf	i2__doprnt@c,w,c
 10733  000E8A  5E20               	subwf	i2__doprnt@width,f,c
 10734  000E8C  0E00               	movlw	0
 10735  000E8E  BE22               	btfsc	i2__doprnt@c,7,c
 10736  000E90  0EFF               	movlw	255
 10737  000E92  5A21               	subwfb	i2__doprnt@width+1,f,c
 10738  000E94  D004               	goto	i2l7866
 10739  000E96                     i2l7864:
 10740                           
 10741                           ;doprnt.c: 1383: else
 10742                           ;doprnt.c: 1384: width = 0;
 10743  000E96  0E00               	movlw	0
 10744  000E98  6E21               	movwf	i2__doprnt@width+1,c
 10745  000E9A  0E00               	movlw	0
 10746  000E9C  6E20               	movwf	i2__doprnt@width,c
 10747  000E9E                     i2l7866:
 10748                           
 10749                           ;doprnt.c: 1387: if(flag & 0x04) {
 10750  000E9E  A41F               	btfss	i2__doprnt@flag,2,c
 10751  000EA0  D078               	goto	i2l7890
 10752                           
 10753                           ;doprnt.c: 1392: if(flag & 0x03)
 10754  000EA2  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 10755  000EA6  0E03               	movlw	3
 10756  000EA8  1613               	andwf	??i2__doprnt,f,c
 10757  000EAA  B4D8               	btfsc	status,2,c
 10758  000EAC  D035               	goto	i2l7878
 10759                           
 10760                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 10761  000EAE  EE20 F002          	lfsr	2,2
 10762  000EB2  500D               	movf	i2__doprnt@pb,w,c
 10763  000EB4  26D9               	addwf	fsr2l,f,c
 10764  000EB6  500E               	movf	i2__doprnt@pb+1,w,c
 10765  000EB8  22DA               	addwfc	fsr2h,f,c
 10766  000EBA  50DE               	movf	postinc2,w,c
 10767  000EBC  10DE               	iorwf	postinc2,w,c
 10768  000EBE  B4D8               	btfsc	status,2,c
 10769  000EC0  D016               	goto	i2l7874
 10770  000EC2  EE20 F002          	lfsr	2,2
 10771  000EC6  500D               	movf	i2__doprnt@pb,w,c
 10772  000EC8  26D9               	addwf	fsr2l,f,c
 10773  000ECA  500E               	movf	i2__doprnt@pb+1,w,c
 10774  000ECC  22DA               	addwfc	fsr2h,f,c
 10775  000ECE  CFDE F013          	movff	postinc2,??i2__doprnt
 10776  000ED2  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10777  000ED6  D801               	call	i2u1233_48
 10778  000ED8  D01F               	goto	i2l7878
 10779  000EDA                     i2u1233_48:
 10780  000EDA  0005               	push	
 10781  000EDC  6EFA               	movwf	pclath,c
 10782  000EDE  5013               	movf	??i2__doprnt,w,c
 10783  000EE0  6EFD               	movwf	tosl,c
 10784  000EE2  5014               	movf	??i2__doprnt+1,w,c
 10785  000EE4  6EFE               	movwf	tosh,c
 10786  000EE6  6AFF               	clrf	tosu,c
 10787  000EE8  50FA               	movf	pclath,w,c
 10788  000EEA  0E2D               	movlw	45
 10789  000EEC  0012               	return		;indir
 10790  000EEE                     i2l7874:
 10791  000EEE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10792  000EF2  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10793  000EF6  CFDE F013          	movff	postinc2,??i2__doprnt
 10794  000EFA  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10795  000EFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10796  000F02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10797  000F06  0E2D               	movlw	45
 10798  000F08  6EDF               	movwf	indf2,c
 10799  000F0A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10800  000F0E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10801  000F12  2ADE               	incf	postinc2,f,c
 10802  000F14  0E00               	movlw	0
 10803  000F16  22DD               	addwfc	postdec2,f,c
 10804  000F18                     i2l7878:
 10805                           
 10806                           ;doprnt.c: 1415: if(width)
 10807  000F18  5020               	movf	i2__doprnt@width,w,c
 10808  000F1A  1021               	iorwf	i2__doprnt@width+1,w,c
 10809  000F1C  B4D8               	btfsc	status,2,c
 10810  000F1E  D0B4               	goto	i2l7912
 10811                           
 10812                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 10813                           
 10814                           ;doprnt.c: 1416: do
 10815  000F20  EE20 F002          	lfsr	2,2
 10816  000F24  500D               	movf	i2__doprnt@pb,w,c
 10817  000F26  26D9               	addwf	fsr2l,f,c
 10818  000F28  500E               	movf	i2__doprnt@pb+1,w,c
 10819  000F2A  22DA               	addwfc	fsr2h,f,c
 10820  000F2C  50DE               	movf	postinc2,w,c
 10821  000F2E  10DE               	iorwf	postinc2,w,c
 10822  000F30  B4D8               	btfsc	status,2,c
 10823  000F32  D016               	goto	i2l7884
 10824  000F34  EE20 F002          	lfsr	2,2
 10825  000F38  500D               	movf	i2__doprnt@pb,w,c
 10826  000F3A  26D9               	addwf	fsr2l,f,c
 10827  000F3C  500E               	movf	i2__doprnt@pb+1,w,c
 10828  000F3E  22DA               	addwfc	fsr2h,f,c
 10829  000F40  CFDE F013          	movff	postinc2,??i2__doprnt
 10830  000F44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10831  000F48  D801               	call	i2u1236_48
 10832  000F4A  D01F               	goto	i2l7888
 10833  000F4C                     i2u1236_48:
 10834  000F4C  0005               	push	
 10835  000F4E  6EFA               	movwf	pclath,c
 10836  000F50  5013               	movf	??i2__doprnt,w,c
 10837  000F52  6EFD               	movwf	tosl,c
 10838  000F54  5014               	movf	??i2__doprnt+1,w,c
 10839  000F56  6EFE               	movwf	tosh,c
 10840  000F58  6AFF               	clrf	tosu,c
 10841  000F5A  50FA               	movf	pclath,w,c
 10842  000F5C  0E30               	movlw	48
 10843  000F5E  0012               	return		;indir
 10844  000F60                     i2l7884:
 10845  000F60  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10846  000F64  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10847  000F68  CFDE F013          	movff	postinc2,??i2__doprnt
 10848  000F6C  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10849  000F70  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10850  000F74  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10851  000F78  0E30               	movlw	48
 10852  000F7A  6EDF               	movwf	indf2,c
 10853  000F7C  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10854  000F80  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10855  000F84  2ADE               	incf	postinc2,f,c
 10856  000F86  0E00               	movlw	0
 10857  000F88  22DD               	addwfc	postdec2,f,c
 10858  000F8A                     i2l7888:
 10859                           
 10860                           ;doprnt.c: 1418: while(--width);
 10861  000F8A  0620               	decf	i2__doprnt@width,f,c
 10862  000F8C  A0D8               	btfss	status,0,c
 10863  000F8E  0621               	decf	i2__doprnt@width+1,f,c
 10864  000F90  D7C3               	goto	i2l7878
 10865  000F92                     i2l7890:
 10866                           
 10867                           ;doprnt.c: 1422: {
 10868                           ;doprnt.c: 1424: if(width
 10869                           ;doprnt.c: 1428: )
 10870  000F92  5020               	movf	i2__doprnt@width,w,c
 10871  000F94  1021               	iorwf	i2__doprnt@width+1,w,c
 10872  000F96  B4D8               	btfsc	status,2,c
 10873  000F98  D03C               	goto	i2l7902
 10874  000F9A                     i2l7892:
 10875                           
 10876                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 10877  000F9A  EE20 F002          	lfsr	2,2
 10878  000F9E  500D               	movf	i2__doprnt@pb,w,c
 10879  000FA0  26D9               	addwf	fsr2l,f,c
 10880  000FA2  500E               	movf	i2__doprnt@pb+1,w,c
 10881  000FA4  22DA               	addwfc	fsr2h,f,c
 10882  000FA6  50DE               	movf	postinc2,w,c
 10883  000FA8  10DE               	iorwf	postinc2,w,c
 10884  000FAA  B4D8               	btfsc	status,2,c
 10885  000FAC  D016               	goto	i2l7896
 10886  000FAE  EE20 F002          	lfsr	2,2
 10887  000FB2  500D               	movf	i2__doprnt@pb,w,c
 10888  000FB4  26D9               	addwf	fsr2l,f,c
 10889  000FB6  500E               	movf	i2__doprnt@pb+1,w,c
 10890  000FB8  22DA               	addwfc	fsr2h,f,c
 10891  000FBA  CFDE F013          	movff	postinc2,??i2__doprnt
 10892  000FBE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10893  000FC2  D801               	call	i2u1240_48
 10894  000FC4  D01F               	goto	i2l7900
 10895  000FC6                     i2u1240_48:
 10896  000FC6  0005               	push	
 10897  000FC8  6EFA               	movwf	pclath,c
 10898  000FCA  5013               	movf	??i2__doprnt,w,c
 10899  000FCC  6EFD               	movwf	tosl,c
 10900  000FCE  5014               	movf	??i2__doprnt+1,w,c
 10901  000FD0  6EFE               	movwf	tosh,c
 10902  000FD2  6AFF               	clrf	tosu,c
 10903  000FD4  50FA               	movf	pclath,w,c
 10904  000FD6  0E20               	movlw	32
 10905  000FD8  0012               	return		;indir
 10906  000FDA                     i2l7896:
 10907  000FDA  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10908  000FDE  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10909  000FE2  CFDE F013          	movff	postinc2,??i2__doprnt
 10910  000FE6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10911  000FEA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10912  000FEE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10913  000FF2  0E20               	movlw	32
 10914  000FF4  6EDF               	movwf	indf2,c
 10915  000FF6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10916  000FFA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10917  000FFE  2ADE               	incf	postinc2,f,c
 10918  001000  0E00               	movlw	0
 10919  001002  22DD               	addwfc	postdec2,f,c
 10920  001004                     i2l7900:
 10921                           
 10922                           ;doprnt.c: 1431: while(--width);
 10923  001004  0620               	decf	i2__doprnt@width,f,c
 10924  001006  A0D8               	btfss	status,0,c
 10925  001008  0621               	decf	i2__doprnt@width+1,f,c
 10926  00100A  5020               	movf	i2__doprnt@width,w,c
 10927  00100C  1021               	iorwf	i2__doprnt@width+1,w,c
 10928  00100E  A4D8               	btfss	status,2,c
 10929  001010  D7C4               	goto	i2l7892
 10930  001012                     i2l7902:
 10931                           
 10932                           ;doprnt.c: 1438: if(flag & 0x03)
 10933  001012  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 10934  001016  0E03               	movlw	3
 10935  001018  1613               	andwf	??i2__doprnt,f,c
 10936  00101A  B4D8               	btfsc	status,2,c
 10937  00101C  D035               	goto	i2l7912
 10938                           
 10939                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 10940  00101E  EE20 F002          	lfsr	2,2
 10941  001022  500D               	movf	i2__doprnt@pb,w,c
 10942  001024  26D9               	addwf	fsr2l,f,c
 10943  001026  500E               	movf	i2__doprnt@pb+1,w,c
 10944  001028  22DA               	addwfc	fsr2h,f,c
 10945  00102A  50DE               	movf	postinc2,w,c
 10946  00102C  10DE               	iorwf	postinc2,w,c
 10947  00102E  B4D8               	btfsc	status,2,c
 10948  001030  D016               	goto	i2l7908
 10949  001032  EE20 F002          	lfsr	2,2
 10950  001036  500D               	movf	i2__doprnt@pb,w,c
 10951  001038  26D9               	addwf	fsr2l,f,c
 10952  00103A  500E               	movf	i2__doprnt@pb+1,w,c
 10953  00103C  22DA               	addwfc	fsr2h,f,c
 10954  00103E  CFDE F013          	movff	postinc2,??i2__doprnt
 10955  001042  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10956  001046  D801               	call	i2u1244_48
 10957  001048  D01F               	goto	i2l7912
 10958  00104A                     i2u1244_48:
 10959  00104A  0005               	push	
 10960  00104C  6EFA               	movwf	pclath,c
 10961  00104E  5013               	movf	??i2__doprnt,w,c
 10962  001050  6EFD               	movwf	tosl,c
 10963  001052  5014               	movf	??i2__doprnt+1,w,c
 10964  001054  6EFE               	movwf	tosh,c
 10965  001056  6AFF               	clrf	tosu,c
 10966  001058  50FA               	movf	pclath,w,c
 10967  00105A  0E2D               	movlw	45
 10968  00105C  0012               	return		;indir
 10969  00105E                     i2l7908:
 10970  00105E  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10971  001062  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10972  001066  CFDE F013          	movff	postinc2,??i2__doprnt
 10973  00106A  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10974  00106E  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10975  001072  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10976  001076  0E2D               	movlw	45
 10977  001078  6EDF               	movwf	indf2,c
 10978  00107A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10979  00107E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10980  001082  2ADE               	incf	postinc2,f,c
 10981  001084  0E00               	movlw	0
 10982  001086  22DD               	addwfc	postdec2,f,c
 10983  001088                     i2l7912:
 10984                           
 10985                           ;doprnt.c: 1469: }
 10986                           ;doprnt.c: 1472: prec = c;
 10987  001088  C022  F018         	movff	i2__doprnt@c,i2__doprnt@prec
 10988                           
 10989                           ;doprnt.c: 1474: while(prec--) {
 10990  00108C  D08B               	goto	i2l7932
 10991  00108E                     i2l7914:
 10992                           
 10993                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10994  00108E  5018               	movf	i2__doprnt@prec,w,c
 10995  001090  0D02               	mullw	2
 10996  001092  0EE6               	movlw	low _dpowers
 10997  001094  24F3               	addwf	prodl,w,c
 10998  001096  6EF6               	movwf	tblptrl,c
 10999  001098  0EFE               	movlw	high _dpowers
 11000  00109A  20F4               	addwfc	prodh,w,c
 11001  00109C  6EF7               	movwf	tblptrh,c
 11002  00109E                     	if	1	;There are 3 active tblptr bytes
 11003  00109E  6AF8               	clrf	tblptru,c
 11004  0010A0  0E00               	movlw	low (__mediumconst shr (0+16))
 11005  0010A2  22F8               	addwfc	tblptru,f,c
 11006  0010A4                     	endif
 11007  0010A4  0009               	tblrd		*+
 11008  0010A6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 11009  0010AA  000A               	tblrd		*-
 11010  0010AC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 11011  0010B0  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 11012  0010B4  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 11013  0010B8  EC3C  F017         	call	i2___lwdiv
 11014  0010BC  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 11015  0010C0  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 11016  0010C4  0E00               	movlw	0
 11017  0010C6  6E0B               	movwf	i2___lwmod@divisor+1,c
 11018  0010C8  0E0A               	movlw	10
 11019  0010CA  6E0A               	movwf	i2___lwmod@divisor,c
 11020  0010CC  ECAF  F017         	call	i2___lwmod	;wreg free
 11021  0010D0  5008               	movf	?i2___lwmod,w,c
 11022  0010D2  0F30               	addlw	48
 11023  0010D4  6E22               	movwf	i2__doprnt@c,c
 11024                           
 11025                           ;doprnt.c: 1491: break;
 11026  0010D6  D031               	goto	i2l7924
 11027  0010D8                     i2l7916:
 11028                           
 11029                           ;doprnt.c: 1499: {
 11030                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11031  0010D8  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 11032  0010DC  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 11033  0010E0  5018               	movf	i2__doprnt@prec,w,c
 11034  0010E2  0D02               	mullw	2
 11035  0010E4  0EF0               	movlw	low _hexpowers
 11036  0010E6  24F3               	addwf	prodl,w,c
 11037  0010E8  6EF6               	movwf	tblptrl,c
 11038  0010EA  0EFE               	movlw	high _hexpowers
 11039  0010EC  20F4               	addwfc	prodh,w,c
 11040  0010EE  6EF7               	movwf	tblptrh,c
 11041  0010F0                     	if	1	;There are 3 active tblptr bytes
 11042  0010F0  6AF8               	clrf	tblptru,c
 11043  0010F2  0E00               	movlw	low (__mediumconst shr (0+16))
 11044  0010F4  22F8               	addwfc	tblptru,f,c
 11045  0010F6                     	endif
 11046  0010F6  0009               	tblrd		*+
 11047  0010F8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 11048  0010FC  000A               	tblrd		*-
 11049  0010FE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 11050  001102  EC3C  F017         	call	i2___lwdiv	;wreg free
 11051  001106  5001               	movf	?i2___lwdiv,w,c
 11052  001108  0B0F               	andlw	15
 11053  00110A  6E17               	movwf	i2__doprnt@idx,c
 11054                           
 11055                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 11056  00110C  5017               	movf	i2__doprnt@idx,w,c
 11057  00110E  0D01               	mullw	1
 11058  001110  0E97               	movlw	low STR_19
 11059  001112  24F3               	addwf	prodl,w,c
 11060  001114  6EF6               	movwf	tblptrl,c
 11061  001116  0EFF               	movlw	high STR_19
 11062  001118  20F4               	addwfc	prodh,w,c
 11063  00111A  6EF7               	movwf	tblptrh,c
 11064  00111C                     	if	1	;There are 3 active tblptr bytes
 11065  00111C  6AF8               	clrf	tblptru,c
 11066  00111E  0E00               	movlw	low (__mediumconst shr (0+16))
 11067  001120  22F8               	addwfc	tblptru,f,c
 11068  001122                     	endif
 11069  001122  0008               	tblrd		*
 11070  001124  CFF5 F022          	movff	tablat,i2__doprnt@c
 11071                           
 11072                           ;doprnt.c: 1523: }
 11073                           
 11074                           ;doprnt.c: 1508: }
 11075                           ;doprnt.c: 1510: break;
 11076  001128  D008               	goto	i2l7924
 11077  00112A                     i2l7922:
 11078  00112A  501F               	movf	i2__doprnt@flag,w,c
 11079  00112C  0B80               	andlw	128
 11080                           
 11081                           ; Switch size 1, requested type "space"
 11082                           ; Number of cases is 2, Range of values is 0 to 128
 11083                           ; switch strategies available:
 11084                           ; Name         Instructions Cycles
 11085                           ; simple_byte            7     4 (average)
 11086                           ;	Chosen strategy is simple_byte
 11087  00112E  0A00               	xorlw	0	; case 0
 11088  001130  B4D8               	btfsc	status,2,c
 11089  001132  D7AD               	goto	i2l7914
 11090  001134  0A80               	xorlw	128	; case 128
 11091  001136  B4D8               	btfsc	status,2,c
 11092  001138  D7CF               	goto	i2l7916
 11093  00113A                     i2l7924:
 11094                           
 11095                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 11096  00113A  EE20 F002          	lfsr	2,2
 11097  00113E  500D               	movf	i2__doprnt@pb,w,c
 11098  001140  26D9               	addwf	fsr2l,f,c
 11099  001142  500E               	movf	i2__doprnt@pb+1,w,c
 11100  001144  22DA               	addwfc	fsr2h,f,c
 11101  001146  50DE               	movf	postinc2,w,c
 11102  001148  10DE               	iorwf	postinc2,w,c
 11103  00114A  B4D8               	btfsc	status,2,c
 11104  00114C  D016               	goto	i2l7928
 11105  00114E  EE20 F002          	lfsr	2,2
 11106  001152  500D               	movf	i2__doprnt@pb,w,c
 11107  001154  26D9               	addwf	fsr2l,f,c
 11108  001156  500E               	movf	i2__doprnt@pb+1,w,c
 11109  001158  22DA               	addwfc	fsr2h,f,c
 11110  00115A  CFDE F013          	movff	postinc2,??i2__doprnt
 11111  00115E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11112  001162  D801               	call	i2u1246_48
 11113  001164  D01F               	goto	i2l7932
 11114  001166                     i2u1246_48:
 11115  001166  0005               	push	
 11116  001168  6EFA               	movwf	pclath,c
 11117  00116A  5013               	movf	??i2__doprnt,w,c
 11118  00116C  6EFD               	movwf	tosl,c
 11119  00116E  5014               	movf	??i2__doprnt+1,w,c
 11120  001170  6EFE               	movwf	tosh,c
 11121  001172  6AFF               	clrf	tosu,c
 11122  001174  50FA               	movf	pclath,w,c
 11123  001176  5022               	movf	i2__doprnt@c,w,c
 11124  001178  0012               	return		;indir
 11125  00117A                     i2l7928:
 11126  00117A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11127  00117E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11128  001182  CFDE F013          	movff	postinc2,??i2__doprnt
 11129  001186  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11130  00118A  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11131  00118E  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11132  001192  C022  FFDF         	movff	i2__doprnt@c,indf2
 11133  001196  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11134  00119A  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11135  00119E  2ADE               	incf	postinc2,f,c
 11136  0011A0  0E00               	movlw	0
 11137  0011A2  22DD               	addwfc	postdec2,f,c
 11138  0011A4                     i2l7932:
 11139  0011A4  0618               	decf	i2__doprnt@prec,f,c
 11140  0011A6  2818               	incf	i2__doprnt@prec,w,c
 11141  0011A8  A4D8               	btfss	status,2,c
 11142  0011AA  D7BF               	goto	i2l7922
 11143  0011AC                     i2l7934:
 11144  0011AC  500F               	movf	i2__doprnt@f,w,c
 11145  0011AE  6E13               	movwf	??i2__doprnt& (0+255),c
 11146  0011B0  5010               	movf	i2__doprnt@f+1,w,c
 11147  0011B2  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 11148  0011B4  4A0F               	infsnz	i2__doprnt@f,f,c
 11149  0011B6  2A10               	incf	i2__doprnt@f+1,f,c
 11150  0011B8  C013  FFF6         	movff	??i2__doprnt,tblptrl
 11151  0011BC  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 11152  0011C0  0E00               	movlw	low (__mediumconst shr (0+16))
 11153  0011C2  6EF8               	movwf	tblptru,c
 11154  0011C4  0E0F               	movlw	(high __ramtop+-1)
 11155  0011C6  64F7               	cpfsgt	tblptrh,c
 11156  0011C8  D003               	bra	i2u1248_47
 11157  0011CA  0008               	tblrd		*
 11158  0011CC  50F5               	movf	tablat,w,c
 11159  0011CE  D005               	bra	i2u1248_40
 11160  0011D0                     i2u1248_47:
 11161  0011D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 11162  0011D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 11163  0011D8  50EF               	movf	indf0,w,c
 11164  0011DA                     i2u1248_40:
 11165  0011DA  6E22               	movwf	i2__doprnt@c,c
 11166  0011DC  5022               	movf	i2__doprnt@c,w,c
 11167  0011DE  A4D8               	btfss	status,2,c
 11168  0011E0  EFCD  F004         	goto	i2l7728
 11169  0011E4                     i2l7936:
 11170                           
 11171                           ;doprnt.c: 1540: return 0;
 11172  0011E4  0E00               	movlw	0
 11173  0011E6  6E0E               	movwf	?i2__doprnt+1,c
 11174  0011E8  0E00               	movlw	0
 11175  0011EA  6E0D               	movwf	?i2__doprnt,c
 11176  0011EC  0012               	return	
 11177  0011EE                     __end_ofi2__doprnt:
 11178                           	opt stack 0
 11179                           tosu	equ	0xFFF
 11180                           tosh	equ	0xFFE
 11181                           tosl	equ	0xFFD
 11182                           pclatu	equ	0xFFB
 11183                           pclath	equ	0xFFA
 11184                           tblptru	equ	0xFF8
 11185                           tblptrh	equ	0xFF7
 11186                           tblptrl	equ	0xFF6
 11187                           tablat	equ	0xFF5
 11188                           prodh	equ	0xFF4
 11189                           prodl	equ	0xFF3
 11190                           intcon	equ	0xFF2
 11191                           intcon2	equ	0xFF1
 11192                           intcon3	equ	0xFF0
 11193                           indf0	equ	0xFEF
 11194                           postinc0	equ	0xFEE
 11195                           fsr0h	equ	0xFEA
 11196                           fsr0l	equ	0xFE9
 11197                           wreg	equ	0xFE8
 11198                           indf1	equ	0xFE7
 11199                           postinc1	equ	0xFE6
 11200                           postdec1	equ	0xFE5
 11201                           fsr1h	equ	0xFE2
 11202                           fsr1l	equ	0xFE1
 11203                           indf2	equ	0xFDF
 11204                           postinc2	equ	0xFDE
 11205                           postdec2	equ	0xFDD
 11206                           fsr2h	equ	0xFDA
 11207                           fsr2l	equ	0xFD9
 11208                           status	equ	0xFD8
 11209                           
 11210 ;; *************** function i2_putch *****************
 11211 ;; Defined at:
 11212 ;;		line 30 in file "lcd.c"
 11213 ;; Parameters:    Size  Location     Type
 11214 ;;  data            1    wreg     unsigned char 
 11215 ;; Auto vars:     Size  Location     Type
 11216 ;;  data            1    2[COMRAM] unsigned char 
 11217 ;; Return value:  Size  Location     Type
 11218 ;;                  1    wreg      void 
 11219 ;; Registers used:
 11220 ;;		wreg, status,2, status,0, cstack
 11221 ;; Tracked objects:
 11222 ;;		On entry : 0/0
 11223 ;;		On exit  : 0/0
 11224 ;;		Unchanged: 0/0
 11225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11226 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11227 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11229 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11230 ;;Total ram usage:        1 bytes
 11231 ;; Hardware stack levels used:    1
 11232 ;; Hardware stack levels required when called:    1
 11233 ;; This function calls:
 11234 ;;		i2_lcdNibble
 11235 ;; This function is called by:
 11236 ;;		i2_printf
 11237 ;; This function uses a non-reentrant model
 11238 ;;
 11239                           
 11240                           	psect	text34
 11241  003164                     __ptext34:
 11242                           	opt stack 0
 11243  003164                     i2_putch:
 11244                           	opt stack 20
 11245                           
 11246                           ;incstack = 0
 11247                           ;i2putch@data stored from wreg
 11248  003164  6E03               	movwf	i2putch@data,c
 11249                           
 11250                           ;lcd.c: 31: LATDbits.LATD2 = 1;
 11251  003166  848C               	bsf	3980,2,c	;volatile
 11252                           
 11253                           ;lcd.c: 32: lcdNibble(data);
 11254  003168  5003               	movf	i2putch@data,w,c
 11255  00316A  ECE8  F016         	call	i2_lcdNibble
 11256  00316E  0012               	return		;funcret
 11257  003170                     __end_ofi2_putch:
 11258                           	opt stack 0
 11259                           tosu	equ	0xFFF
 11260                           tosh	equ	0xFFE
 11261                           tosl	equ	0xFFD
 11262                           pclatu	equ	0xFFB
 11263                           pclath	equ	0xFFA
 11264                           tblptru	equ	0xFF8
 11265                           tblptrh	equ	0xFF7
 11266                           tblptrl	equ	0xFF6
 11267                           tablat	equ	0xFF5
 11268                           prodh	equ	0xFF4
 11269                           prodl	equ	0xFF3
 11270                           intcon	equ	0xFF2
 11271                           intcon2	equ	0xFF1
 11272                           intcon3	equ	0xFF0
 11273                           indf0	equ	0xFEF
 11274                           postinc0	equ	0xFEE
 11275                           fsr0h	equ	0xFEA
 11276                           fsr0l	equ	0xFE9
 11277                           wreg	equ	0xFE8
 11278                           indf1	equ	0xFE7
 11279                           postinc1	equ	0xFE6
 11280                           postdec1	equ	0xFE5
 11281                           fsr1h	equ	0xFE2
 11282                           fsr1l	equ	0xFE1
 11283                           indf2	equ	0xFDF
 11284                           postinc2	equ	0xFDE
 11285                           postdec2	equ	0xFDD
 11286                           fsr2h	equ	0xFDA
 11287                           fsr2l	equ	0xFD9
 11288                           status	equ	0xFD8
 11289                           
 11290 ;; *************** function i2_isdigit *****************
 11291 ;; Defined at:
 11292 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 11293 ;; Parameters:    Size  Location     Type
 11294 ;;  c               1    wreg     unsigned char 
 11295 ;; Auto vars:     Size  Location     Type
 11296 ;;  c               1    2[COMRAM] unsigned char 
 11297 ;; Return value:  Size  Location     Type
 11298 ;;		None               void
 11299 ;; Registers used:
 11300 ;;		wreg, status,2, status,0
 11301 ;; Tracked objects:
 11302 ;;		On entry : 0/0
 11303 ;;		On exit  : 0/0
 11304 ;;		Unchanged: 0/0
 11305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11307 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11308 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11309 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11310 ;;Total ram usage:        3 bytes
 11311 ;; Hardware stack levels used:    1
 11312 ;; This function calls:
 11313 ;;		Nothing
 11314 ;; This function is called by:
 11315 ;;		i2__doprnt
 11316 ;; This function uses a non-reentrant model
 11317 ;;
 11318                           
 11319                           	psect	text35
 11320  0030E8                     __ptext35:
 11321                           	opt stack 0
 11322  0030E8                     i2_isdigit:
 11323                           	opt stack 21
 11324                           
 11325                           ;incstack = 0
 11326                           ;i2isdigit@c stored from wreg
 11327  0030E8  6E03               	movwf	i2isdigit@c,c
 11328  0030EA  0E00               	movlw	0
 11329  0030EC  6E02               	movwf	i2_isdigit$713,c
 11330  0030EE  0E3A               	movlw	58
 11331  0030F0  6003               	cpfslt	i2isdigit@c,c
 11332  0030F2  D005               	goto	i2l3102
 11333  0030F4  0E2F               	movlw	47
 11334  0030F6  6403               	cpfsgt	i2isdigit@c,c
 11335  0030F8  D002               	goto	i2l3102
 11336  0030FA  0E01               	movlw	1
 11337  0030FC  6E02               	movwf	i2_isdigit$713,c
 11338  0030FE                     i2l3102:
 11339  0030FE  C002  F001         	movff	i2_isdigit$713,??i2_isdigit
 11340  003102  3001               	rrcf	??i2_isdigit,w,c
 11341  003104  0012               	return	
 11342  003106                     __end_ofi2_isdigit:
 11343                           	opt stack 0
 11344                           tosu	equ	0xFFF
 11345                           tosh	equ	0xFFE
 11346                           tosl	equ	0xFFD
 11347                           pclatu	equ	0xFFB
 11348                           pclath	equ	0xFFA
 11349                           tblptru	equ	0xFF8
 11350                           tblptrh	equ	0xFF7
 11351                           tblptrl	equ	0xFF6
 11352                           tablat	equ	0xFF5
 11353                           prodh	equ	0xFF4
 11354                           prodl	equ	0xFF3
 11355                           intcon	equ	0xFF2
 11356                           intcon2	equ	0xFF1
 11357                           intcon3	equ	0xFF0
 11358                           indf0	equ	0xFEF
 11359                           postinc0	equ	0xFEE
 11360                           fsr0h	equ	0xFEA
 11361                           fsr0l	equ	0xFE9
 11362                           wreg	equ	0xFE8
 11363                           indf1	equ	0xFE7
 11364                           postinc1	equ	0xFE6
 11365                           postdec1	equ	0xFE5
 11366                           fsr1h	equ	0xFE2
 11367                           fsr1l	equ	0xFE1
 11368                           indf2	equ	0xFDF
 11369                           postinc2	equ	0xFDE
 11370                           postdec2	equ	0xFDD
 11371                           fsr2h	equ	0xFDA
 11372                           fsr2l	equ	0xFD9
 11373                           status	equ	0xFD8
 11374                           
 11375 ;; *************** function i2___wmul *****************
 11376 ;; Defined at:
 11377 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11378 ;; Parameters:    Size  Location     Type
 11379 ;;  multiplier      2    0[COMRAM] unsigned int 
 11380 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11381 ;; Auto vars:     Size  Location     Type
 11382 ;;  __wmul          2    4[COMRAM] unsigned int 
 11383 ;; Return value:  Size  Location     Type
 11384 ;;                  2    0[COMRAM] unsigned int 
 11385 ;; Registers used:
 11386 ;;		wreg, status,2, status,0, prodl, prodh
 11387 ;; Tracked objects:
 11388 ;;		On entry : 0/0
 11389 ;;		On exit  : 0/0
 11390 ;;		Unchanged: 0/0
 11391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11392 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11393 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11394 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11395 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11396 ;;Total ram usage:        6 bytes
 11397 ;; Hardware stack levels used:    1
 11398 ;; This function calls:
 11399 ;;		Nothing
 11400 ;; This function is called by:
 11401 ;;		i2__doprnt
 11402 ;; This function uses a non-reentrant model
 11403 ;;
 11404                           
 11405                           	psect	text36
 11406  0030C2                     __ptext36:
 11407                           	opt stack 0
 11408  0030C2                     i2___wmul:
 11409                           	opt stack 21
 11410                           
 11411                           ;incstack = 0
 11412  0030C2  5001               	movf	i2___wmul@multiplier,w,c
 11413  0030C4  0203               	mulwf	i2___wmul@multiplicand,c
 11414  0030C6  CFF3 F005          	movff	prodl,i2___wmul@product
 11415  0030CA  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11416  0030CE  5001               	movf	i2___wmul@multiplier,w,c
 11417  0030D0  0204               	mulwf	i2___wmul@multiplicand+1,c
 11418  0030D2  50F3               	movf	prodl,w,c
 11419  0030D4  2606               	addwf	i2___wmul@product+1,f,c
 11420  0030D6  5002               	movf	i2___wmul@multiplier+1,w,c
 11421  0030D8  0203               	mulwf	i2___wmul@multiplicand,c
 11422  0030DA  50F3               	movf	prodl,w,c
 11423  0030DC  2606               	addwf	i2___wmul@product+1,f,c
 11424  0030DE  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11425  0030E2  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11426  0030E6  0012               	return	
 11427  0030E8                     __end_ofi2___wmul:
 11428                           	opt stack 0
 11429                           tosu	equ	0xFFF
 11430                           tosh	equ	0xFFE
 11431                           tosl	equ	0xFFD
 11432                           pclatu	equ	0xFFB
 11433                           pclath	equ	0xFFA
 11434                           tblptru	equ	0xFF8
 11435                           tblptrh	equ	0xFF7
 11436                           tblptrl	equ	0xFF6
 11437                           tablat	equ	0xFF5
 11438                           prodh	equ	0xFF4
 11439                           prodl	equ	0xFF3
 11440                           intcon	equ	0xFF2
 11441                           intcon2	equ	0xFF1
 11442                           intcon3	equ	0xFF0
 11443                           indf0	equ	0xFEF
 11444                           postinc0	equ	0xFEE
 11445                           fsr0h	equ	0xFEA
 11446                           fsr0l	equ	0xFE9
 11447                           wreg	equ	0xFE8
 11448                           indf1	equ	0xFE7
 11449                           postinc1	equ	0xFE6
 11450                           postdec1	equ	0xFE5
 11451                           fsr1h	equ	0xFE2
 11452                           fsr1l	equ	0xFE1
 11453                           indf2	equ	0xFDF
 11454                           postinc2	equ	0xFDE
 11455                           postdec2	equ	0xFDD
 11456                           fsr2h	equ	0xFDA
 11457                           fsr2l	equ	0xFD9
 11458                           status	equ	0xFD8
 11459                           
 11460 ;; *************** function i2___lwmod *****************
 11461 ;; Defined at:
 11462 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 11463 ;; Parameters:    Size  Location     Type
 11464 ;;  dividend        2    7[COMRAM] unsigned int 
 11465 ;;  divisor         2    9[COMRAM] unsigned int 
 11466 ;; Auto vars:     Size  Location     Type
 11467 ;;  __lwmod         1   11[COMRAM] unsigned char 
 11468 ;; Return value:  Size  Location     Type
 11469 ;;                  2    7[COMRAM] unsigned int 
 11470 ;; Registers used:
 11471 ;;		wreg, status,2, status,0
 11472 ;; Tracked objects:
 11473 ;;		On entry : 0/0
 11474 ;;		On exit  : 0/0
 11475 ;;		Unchanged: 0/0
 11476 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11477 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11478 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11479 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11480 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11481 ;;Total ram usage:        5 bytes
 11482 ;; Hardware stack levels used:    1
 11483 ;; This function calls:
 11484 ;;		Nothing
 11485 ;; This function is called by:
 11486 ;;		i2__doprnt
 11487 ;; This function uses a non-reentrant model
 11488 ;;
 11489                           
 11490                           	psect	text37
 11491  002F5E                     __ptext37:
 11492                           	opt stack 0
 11493  002F5E                     i2___lwmod:
 11494                           	opt stack 21
 11495                           
 11496                           ;incstack = 0
 11497  002F5E  500A               	movf	i2___lwmod@divisor,w,c
 11498  002F60  100B               	iorwf	i2___lwmod@divisor+1,w,c
 11499  002F62  B4D8               	btfsc	status,2,c
 11500  002F64  D018               	goto	i2l975
 11501  002F66  0E01               	movlw	1
 11502  002F68  6E0C               	movwf	i2___lwmod@counter,c
 11503  002F6A  D004               	goto	i2l3134
 11504  002F6C                     i2l3132:
 11505  002F6C  90D8               	bcf	status,0,c
 11506  002F6E  360A               	rlcf	i2___lwmod@divisor,f,c
 11507  002F70  360B               	rlcf	i2___lwmod@divisor+1,f,c
 11508  002F72  2A0C               	incf	i2___lwmod@counter,f,c
 11509  002F74                     i2l3134:
 11510  002F74  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 11511  002F76  D7FA               	goto	i2l3132
 11512  002F78                     i2l3136:
 11513  002F78  500A               	movf	i2___lwmod@divisor,w,c
 11514  002F7A  5C08               	subwf	i2___lwmod@dividend,w,c
 11515  002F7C  500B               	movf	i2___lwmod@divisor+1,w,c
 11516  002F7E  5809               	subwfb	i2___lwmod@dividend+1,w,c
 11517  002F80  A0D8               	btfss	status,0,c
 11518  002F82  D004               	goto	i2l3140
 11519  002F84  500A               	movf	i2___lwmod@divisor,w,c
 11520  002F86  5E08               	subwf	i2___lwmod@dividend,f,c
 11521  002F88  500B               	movf	i2___lwmod@divisor+1,w,c
 11522  002F8A  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 11523  002F8C                     i2l3140:
 11524  002F8C  90D8               	bcf	status,0,c
 11525  002F8E  320B               	rrcf	i2___lwmod@divisor+1,f,c
 11526  002F90  320A               	rrcf	i2___lwmod@divisor,f,c
 11527  002F92  2E0C               	decfsz	i2___lwmod@counter,f,c
 11528  002F94  D7F1               	goto	i2l3136
 11529  002F96                     i2l975:
 11530  002F96  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 11531  002F9A  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 11532  002F9E  0012               	return		;funcret
 11533  002FA0                     __end_ofi2___lwmod:
 11534                           	opt stack 0
 11535                           tosu	equ	0xFFF
 11536                           tosh	equ	0xFFE
 11537                           tosl	equ	0xFFD
 11538                           pclatu	equ	0xFFB
 11539                           pclath	equ	0xFFA
 11540                           tblptru	equ	0xFF8
 11541                           tblptrh	equ	0xFF7
 11542                           tblptrl	equ	0xFF6
 11543                           tablat	equ	0xFF5
 11544                           prodh	equ	0xFF4
 11545                           prodl	equ	0xFF3
 11546                           intcon	equ	0xFF2
 11547                           intcon2	equ	0xFF1
 11548                           intcon3	equ	0xFF0
 11549                           indf0	equ	0xFEF
 11550                           postinc0	equ	0xFEE
 11551                           fsr0h	equ	0xFEA
 11552                           fsr0l	equ	0xFE9
 11553                           wreg	equ	0xFE8
 11554                           indf1	equ	0xFE7
 11555                           postinc1	equ	0xFE6
 11556                           postdec1	equ	0xFE5
 11557                           fsr1h	equ	0xFE2
 11558                           fsr1l	equ	0xFE1
 11559                           indf2	equ	0xFDF
 11560                           postinc2	equ	0xFDE
 11561                           postdec2	equ	0xFDD
 11562                           fsr2h	equ	0xFDA
 11563                           fsr2l	equ	0xFD9
 11564                           status	equ	0xFD8
 11565                           
 11566 ;; *************** function i2___lwdiv *****************
 11567 ;; Defined at:
 11568 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 11569 ;; Parameters:    Size  Location     Type
 11570 ;;  dividend        2    0[COMRAM] unsigned int 
 11571 ;;  divisor         2    2[COMRAM] unsigned int 
 11572 ;; Auto vars:     Size  Location     Type
 11573 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 11574 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 11575 ;; Return value:  Size  Location     Type
 11576 ;;                  2    0[COMRAM] unsigned int 
 11577 ;; Registers used:
 11578 ;;		wreg, status,2, status,0
 11579 ;; Tracked objects:
 11580 ;;		On entry : 0/0
 11581 ;;		On exit  : 0/0
 11582 ;;		Unchanged: 0/0
 11583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11584 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11585 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11587 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11588 ;;Total ram usage:        7 bytes
 11589 ;; Hardware stack levels used:    1
 11590 ;; This function calls:
 11591 ;;		Nothing
 11592 ;; This function is called by:
 11593 ;;		i2__doprnt
 11594 ;; This function uses a non-reentrant model
 11595 ;;
 11596                           
 11597                           	psect	text38
 11598  002E78                     __ptext38:
 11599                           	opt stack 0
 11600  002E78                     i2___lwdiv:
 11601                           	opt stack 21
 11602                           
 11603                           ;incstack = 0
 11604  002E78  0E00               	movlw	0
 11605  002E7A  6E06               	movwf	i2___lwdiv@quotient+1,c
 11606  002E7C  0E00               	movlw	0
 11607  002E7E  6E05               	movwf	i2___lwdiv@quotient,c
 11608  002E80  5003               	movf	i2___lwdiv@divisor,w,c
 11609  002E82  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 11610  002E84  B4D8               	btfsc	status,2,c
 11611  002E86  D01C               	goto	i2l965
 11612  002E88  0E01               	movlw	1
 11613  002E8A  6E07               	movwf	i2___lwdiv@counter,c
 11614  002E8C  D004               	goto	i2l3114
 11615  002E8E                     i2l3112:
 11616  002E8E  90D8               	bcf	status,0,c
 11617  002E90  3603               	rlcf	i2___lwdiv@divisor,f,c
 11618  002E92  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 11619  002E94  2A07               	incf	i2___lwdiv@counter,f,c
 11620  002E96                     i2l3114:
 11621  002E96  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 11622  002E98  D7FA               	goto	i2l3112
 11623  002E9A                     i2l3116:
 11624  002E9A  90D8               	bcf	status,0,c
 11625  002E9C  3605               	rlcf	i2___lwdiv@quotient,f,c
 11626  002E9E  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 11627  002EA0  5003               	movf	i2___lwdiv@divisor,w,c
 11628  002EA2  5C01               	subwf	i2___lwdiv@dividend,w,c
 11629  002EA4  5004               	movf	i2___lwdiv@divisor+1,w,c
 11630  002EA6  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 11631  002EA8  A0D8               	btfss	status,0,c
 11632  002EAA  D005               	goto	i2l3124
 11633  002EAC  5003               	movf	i2___lwdiv@divisor,w,c
 11634  002EAE  5E01               	subwf	i2___lwdiv@dividend,f,c
 11635  002EB0  5004               	movf	i2___lwdiv@divisor+1,w,c
 11636  002EB2  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 11637  002EB4  8005               	bsf	i2___lwdiv@quotient,0,c
 11638  002EB6                     i2l3124:
 11639  002EB6  90D8               	bcf	status,0,c
 11640  002EB8  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 11641  002EBA  3203               	rrcf	i2___lwdiv@divisor,f,c
 11642  002EBC  2E07               	decfsz	i2___lwdiv@counter,f,c
 11643  002EBE  D7ED               	goto	i2l3116
 11644  002EC0                     i2l965:
 11645  002EC0  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 11646  002EC4  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 11647  002EC8  0012               	return		;funcret
 11648  002ECA                     __end_ofi2___lwdiv:
 11649                           	opt stack 0
 11650                           tosu	equ	0xFFF
 11651                           tosh	equ	0xFFE
 11652                           tosl	equ	0xFFD
 11653                           pclatu	equ	0xFFB
 11654                           pclath	equ	0xFFA
 11655                           tblptru	equ	0xFF8
 11656                           tblptrh	equ	0xFF7
 11657                           tblptrl	equ	0xFF6
 11658                           tablat	equ	0xFF5
 11659                           prodh	equ	0xFF4
 11660                           prodl	equ	0xFF3
 11661                           intcon	equ	0xFF2
 11662                           intcon2	equ	0xFF1
 11663                           intcon3	equ	0xFF0
 11664                           indf0	equ	0xFEF
 11665                           postinc0	equ	0xFEE
 11666                           fsr0h	equ	0xFEA
 11667                           fsr0l	equ	0xFE9
 11668                           wreg	equ	0xFE8
 11669                           indf1	equ	0xFE7
 11670                           postinc1	equ	0xFE6
 11671                           postdec1	equ	0xFE5
 11672                           fsr1h	equ	0xFE2
 11673                           fsr1l	equ	0xFE1
 11674                           indf2	equ	0xFDF
 11675                           postinc2	equ	0xFDE
 11676                           postdec2	equ	0xFDD
 11677                           fsr2h	equ	0xFDA
 11678                           fsr2l	equ	0xFD9
 11679                           status	equ	0xFD8
 11680                           
 11681 ;; *************** function i2_lcdInst *****************
 11682 ;; Defined at:
 11683 ;;		line 25 in file "lcd.c"
 11684 ;; Parameters:    Size  Location     Type
 11685 ;;  data            1    wreg     unsigned char 
 11686 ;; Auto vars:     Size  Location     Type
 11687 ;;  data            1    2[COMRAM] unsigned char 
 11688 ;; Return value:  Size  Location     Type
 11689 ;;                  1    wreg      void 
 11690 ;; Registers used:
 11691 ;;		wreg, status,2, status,0, cstack
 11692 ;; Tracked objects:
 11693 ;;		On entry : 0/0
 11694 ;;		On exit  : 0/0
 11695 ;;		Unchanged: 0/0
 11696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11697 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11698 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11700 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11701 ;;Total ram usage:        1 bytes
 11702 ;; Hardware stack levels used:    1
 11703 ;; Hardware stack levels required when called:    1
 11704 ;; This function calls:
 11705 ;;		i2_lcdNibble
 11706 ;; This function is called by:
 11707 ;;		_keypressed
 11708 ;; This function uses a non-reentrant model
 11709 ;;
 11710                           
 11711                           	psect	text39
 11712  003170                     __ptext39:
 11713                           	opt stack 0
 11714  003170                     i2_lcdInst:
 11715                           	opt stack 22
 11716                           
 11717                           ;incstack = 0
 11718                           ;i2lcdInst@data stored from wreg
 11719  003170  6E03               	movwf	i2lcdInst@data,c
 11720                           
 11721                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 11722  003172  948C               	bcf	3980,2,c	;volatile
 11723                           
 11724                           ;lcd.c: 27: lcdNibble(data);
 11725  003174  5003               	movf	i2lcdInst@data,w,c
 11726  003176  ECE8  F016         	call	i2_lcdNibble
 11727  00317A  0012               	return		;funcret
 11728  00317C                     __end_ofi2_lcdInst:
 11729                           	opt stack 0
 11730                           tosu	equ	0xFFF
 11731                           tosh	equ	0xFFE
 11732                           tosl	equ	0xFFD
 11733                           pclatu	equ	0xFFB
 11734                           pclath	equ	0xFFA
 11735                           tblptru	equ	0xFF8
 11736                           tblptrh	equ	0xFF7
 11737                           tblptrl	equ	0xFF6
 11738                           tablat	equ	0xFF5
 11739                           prodh	equ	0xFF4
 11740                           prodl	equ	0xFF3
 11741                           intcon	equ	0xFF2
 11742                           intcon2	equ	0xFF1
 11743                           intcon3	equ	0xFF0
 11744                           indf0	equ	0xFEF
 11745                           postinc0	equ	0xFEE
 11746                           fsr0h	equ	0xFEA
 11747                           fsr0l	equ	0xFE9
 11748                           wreg	equ	0xFE8
 11749                           indf1	equ	0xFE7
 11750                           postinc1	equ	0xFE6
 11751                           postdec1	equ	0xFE5
 11752                           fsr1h	equ	0xFE2
 11753                           fsr1l	equ	0xFE1
 11754                           indf2	equ	0xFDF
 11755                           postinc2	equ	0xFDE
 11756                           postdec2	equ	0xFDD
 11757                           fsr2h	equ	0xFDA
 11758                           fsr2l	equ	0xFD9
 11759                           status	equ	0xFD8
 11760                           
 11761 ;; *************** function i2_lcdNibble *****************
 11762 ;; Defined at:
 11763 ;;		line 35 in file "lcd.c"
 11764 ;; Parameters:    Size  Location     Type
 11765 ;;  data            1    wreg     unsigned char 
 11766 ;; Auto vars:     Size  Location     Type
 11767 ;;  data            1    1[COMRAM] unsigned char 
 11768 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 11769 ;; Return value:  Size  Location     Type
 11770 ;;                  1    wreg      void 
 11771 ;; Registers used:
 11772 ;;		wreg, status,2, status,0
 11773 ;; Tracked objects:
 11774 ;;		On entry : 0/0
 11775 ;;		On exit  : 0/0
 11776 ;;		Unchanged: 0/0
 11777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11779 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11781 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11782 ;;Total ram usage:        2 bytes
 11783 ;; Hardware stack levels used:    1
 11784 ;; This function calls:
 11785 ;;		Nothing
 11786 ;; This function is called by:
 11787 ;;		i2_lcdInst
 11788 ;;		i2_putch
 11789 ;; This function uses a non-reentrant model
 11790 ;;
 11791                           
 11792                           	psect	text40
 11793  002DD0                     __ptext40:
 11794                           	opt stack 0
 11795  002DD0                     i2_lcdNibble:
 11796                           	opt stack 20
 11797                           
 11798                           ;incstack = 0
 11799                           ;i2lcdNibble@data stored from wreg
 11800  002DD0  6E02               	movwf	i2lcdNibble@data,c
 11801                           
 11802                           ;lcd.c: 37: char temp = data & 0xF0;
 11803  002DD2  5002               	movf	i2lcdNibble@data,w,c
 11804  002DD4  0BF0               	andlw	240
 11805  002DD6  6E01               	movwf	i2lcdNibble@temp,c
 11806                           
 11807                           ;lcd.c: 38: LATD = LATD & 0x0F;
 11808  002DD8  508C               	movf	3980,w,c	;volatile
 11809  002DDA  0B0F               	andlw	15
 11810  002DDC  6E8C               	movwf	3980,c	;volatile
 11811                           
 11812                           ;lcd.c: 39: LATD = temp | LATD;
 11813  002DDE  5001               	movf	i2lcdNibble@temp,w,c
 11814  002DE0  108C               	iorwf	3980,w,c	;volatile
 11815  002DE2  6E8C               	movwf	3980,c	;volatile
 11816                           
 11817                           ;lcd.c: 41: LATDbits.LATD3 = 0;
 11818  002DE4  968C               	bcf	3980,3,c	;volatile
 11819                           
 11820                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11821  002DE6  0E14               	movlw	20
 11822  002DE8                     i2u1314_47:
 11823  002DE8  2EE8               	decfsz	wreg,f,c
 11824  002DEA  D7FE               	bra	i2u1314_47
 11825  002DEC  D000               	nop2	
 11826                           
 11827                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 11828  002DEE  868C               	bsf	3980,3,c	;volatile
 11829                           
 11830                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11831  002DF0  0E14               	movlw	20
 11832  002DF2                     i2u1315_47:
 11833  002DF2  2EE8               	decfsz	wreg,f,c
 11834  002DF4  D7FE               	bra	i2u1315_47
 11835  002DF6  D000               	nop2	
 11836                           
 11837                           ;lcd.c: 46: data = data << 4;
 11838  002DF8  3802               	swapf	i2lcdNibble@data,w,c
 11839  002DFA  0BF0               	andlw	240
 11840  002DFC  6E02               	movwf	i2lcdNibble@data,c
 11841                           
 11842                           ;lcd.c: 48: temp = data & 0xF0;
 11843  002DFE  5002               	movf	i2lcdNibble@data,w,c
 11844  002E00  0BF0               	andlw	240
 11845  002E02  6E01               	movwf	i2lcdNibble@temp,c
 11846                           
 11847                           ;lcd.c: 49: LATD = LATD & 0x0F;
 11848  002E04  508C               	movf	3980,w,c	;volatile
 11849  002E06  0B0F               	andlw	15
 11850  002E08  6E8C               	movwf	3980,c	;volatile
 11851                           
 11852                           ;lcd.c: 50: LATD = temp | LATD;
 11853  002E0A  5001               	movf	i2lcdNibble@temp,w,c
 11854  002E0C  108C               	iorwf	3980,w,c	;volatile
 11855  002E0E  6E8C               	movwf	3980,c	;volatile
 11856                           
 11857                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 11858  002E10  968C               	bcf	3980,3,c	;volatile
 11859                           
 11860                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11861  002E12  0E14               	movlw	20
 11862  002E14                     i2u1316_47:
 11863  002E14  2EE8               	decfsz	wreg,f,c
 11864  002E16  D7FE               	bra	i2u1316_47
 11865  002E18  D000               	nop2	
 11866                           
 11867                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 11868  002E1A  868C               	bsf	3980,3,c	;volatile
 11869                           
 11870                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11871  002E1C  0E14               	movlw	20
 11872  002E1E                     i2u1317_47:
 11873  002E1E  2EE8               	decfsz	wreg,f,c
 11874  002E20  D7FE               	bra	i2u1317_47
 11875  002E22  D000               	nop2	
 11876  002E24  0012               	return		;funcret
 11877  002E26                     __end_ofi2_lcdNibble:
 11878                           	opt stack 0
 11879                           tosu	equ	0xFFF
 11880                           tosh	equ	0xFFE
 11881                           tosl	equ	0xFFD
 11882                           pclatu	equ	0xFFB
 11883                           pclath	equ	0xFFA
 11884                           tblptru	equ	0xFF8
 11885                           tblptrh	equ	0xFF7
 11886                           tblptrl	equ	0xFF6
 11887                           tablat	equ	0xFF5
 11888                           prodh	equ	0xFF4
 11889                           prodl	equ	0xFF3
 11890                           intcon	equ	0xFF2
 11891                           intcon2	equ	0xFF1
 11892                           intcon3	equ	0xFF0
 11893                           indf0	equ	0xFEF
 11894                           postinc0	equ	0xFEE
 11895                           fsr0h	equ	0xFEA
 11896                           fsr0l	equ	0xFE9
 11897                           wreg	equ	0xFE8
 11898                           indf1	equ	0xFE7
 11899                           postinc1	equ	0xFE6
 11900                           postdec1	equ	0xFE5
 11901                           fsr1h	equ	0xFE2
 11902                           fsr1l	equ	0xFE1
 11903                           indf2	equ	0xFDF
 11904                           postinc2	equ	0xFDE
 11905                           postdec2	equ	0xFDD
 11906                           fsr2h	equ	0xFDA
 11907                           fsr2l	equ	0xFD9
 11908                           status	equ	0xFD8
 11909                           
 11910 ;; *************** function i2___awmod *****************
 11911 ;; Defined at:
 11912 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11913 ;; Parameters:    Size  Location     Type
 11914 ;;  dividend        2    0[COMRAM] int 
 11915 ;;  divisor         2    2[COMRAM] int 
 11916 ;; Auto vars:     Size  Location     Type
 11917 ;;  __awmod         1    5[COMRAM] unsigned char 
 11918 ;;  __awmod         1    4[COMRAM] unsigned char 
 11919 ;; Return value:  Size  Location     Type
 11920 ;;                  2    0[COMRAM] int 
 11921 ;; Registers used:
 11922 ;;		wreg, status,2, status,0
 11923 ;; Tracked objects:
 11924 ;;		On entry : 0/0
 11925 ;;		On exit  : 0/0
 11926 ;;		Unchanged: 0/0
 11927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11928 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11929 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11931 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11932 ;;Total ram usage:        6 bytes
 11933 ;; Hardware stack levels used:    1
 11934 ;; This function calls:
 11935 ;;		Nothing
 11936 ;; This function is called by:
 11937 ;;		_keypressed
 11938 ;; This function uses a non-reentrant model
 11939 ;;
 11940                           
 11941                           	psect	text41
 11942  002B16                     __ptext41:
 11943                           	opt stack 0
 11944  002B16                     i2___awmod:
 11945                           	opt stack 23
 11946                           
 11947                           ;incstack = 0
 11948  002B16  0E00               	movlw	0
 11949  002B18  6E06               	movwf	i2___awmod@sign,c
 11950  002B1A  AE02               	btfss	i2___awmod@dividend+1,7,c
 11951  002B1C  D006               	goto	i2l3786
 11952  002B1E  6C01               	negf	i2___awmod@dividend,c
 11953  002B20  1E02               	comf	i2___awmod@dividend+1,f,c
 11954  002B22  B0D8               	btfsc	status,0,c
 11955  002B24  2A02               	incf	i2___awmod@dividend+1,f,c
 11956  002B26  0E01               	movlw	1
 11957  002B28  6E06               	movwf	i2___awmod@sign,c
 11958  002B2A                     i2l3786:
 11959  002B2A  AE04               	btfss	i2___awmod@divisor+1,7,c
 11960  002B2C  D004               	goto	i2l3790
 11961  002B2E  6C03               	negf	i2___awmod@divisor,c
 11962  002B30  1E04               	comf	i2___awmod@divisor+1,f,c
 11963  002B32  B0D8               	btfsc	status,0,c
 11964  002B34  2A04               	incf	i2___awmod@divisor+1,f,c
 11965  002B36                     i2l3790:
 11966  002B36  5003               	movf	i2___awmod@divisor,w,c
 11967  002B38  1004               	iorwf	i2___awmod@divisor+1,w,c
 11968  002B3A  B4D8               	btfsc	status,2,c
 11969  002B3C  D018               	goto	i2l3806
 11970  002B3E  0E01               	movlw	1
 11971  002B40  6E05               	movwf	i2___awmod@counter,c
 11972  002B42  D004               	goto	i2l3796
 11973  002B44                     i2l3794:
 11974  002B44  90D8               	bcf	status,0,c
 11975  002B46  3603               	rlcf	i2___awmod@divisor,f,c
 11976  002B48  3604               	rlcf	i2___awmod@divisor+1,f,c
 11977  002B4A  2A05               	incf	i2___awmod@counter,f,c
 11978  002B4C                     i2l3796:
 11979  002B4C  AE04               	btfss	i2___awmod@divisor+1,7,c
 11980  002B4E  D7FA               	goto	i2l3794
 11981  002B50                     i2l3798:
 11982  002B50  5003               	movf	i2___awmod@divisor,w,c
 11983  002B52  5C01               	subwf	i2___awmod@dividend,w,c
 11984  002B54  5004               	movf	i2___awmod@divisor+1,w,c
 11985  002B56  5802               	subwfb	i2___awmod@dividend+1,w,c
 11986  002B58  A0D8               	btfss	status,0,c
 11987  002B5A  D004               	goto	i2l3802
 11988  002B5C  5003               	movf	i2___awmod@divisor,w,c
 11989  002B5E  5E01               	subwf	i2___awmod@dividend,f,c
 11990  002B60  5004               	movf	i2___awmod@divisor+1,w,c
 11991  002B62  5A02               	subwfb	i2___awmod@dividend+1,f,c
 11992  002B64                     i2l3802:
 11993  002B64  90D8               	bcf	status,0,c
 11994  002B66  3204               	rrcf	i2___awmod@divisor+1,f,c
 11995  002B68  3203               	rrcf	i2___awmod@divisor,f,c
 11996  002B6A  2E05               	decfsz	i2___awmod@counter,f,c
 11997  002B6C  D7F1               	goto	i2l3798
 11998  002B6E                     i2l3806:
 11999  002B6E  5006               	movf	i2___awmod@sign,w,c
 12000  002B70  B4D8               	btfsc	status,2,c
 12001  002B72  D004               	goto	i2l3810
 12002  002B74  6C01               	negf	i2___awmod@dividend,c
 12003  002B76  1E02               	comf	i2___awmod@dividend+1,f,c
 12004  002B78  B0D8               	btfsc	status,0,c
 12005  002B7A  2A02               	incf	i2___awmod@dividend+1,f,c
 12006  002B7C                     i2l3810:
 12007  002B7C  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 12008  002B80  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 12009  002B84  0012               	return	
 12010  002B86                     __end_ofi2___awmod:
 12011                           	opt stack 0
 12012                           tosu	equ	0xFFF
 12013                           tosh	equ	0xFFE
 12014                           tosl	equ	0xFFD
 12015                           pclatu	equ	0xFFB
 12016                           pclath	equ	0xFFA
 12017                           tblptru	equ	0xFF8
 12018                           tblptrh	equ	0xFF7
 12019                           tblptrl	equ	0xFF6
 12020                           tablat	equ	0xFF5
 12021                           prodh	equ	0xFF4
 12022                           prodl	equ	0xFF3
 12023                           intcon	equ	0xFF2
 12024                           intcon2	equ	0xFF1
 12025                           intcon3	equ	0xFF0
 12026                           indf0	equ	0xFEF
 12027                           postinc0	equ	0xFEE
 12028                           fsr0h	equ	0xFEA
 12029                           fsr0l	equ	0xFE9
 12030                           wreg	equ	0xFE8
 12031                           indf1	equ	0xFE7
 12032                           postinc1	equ	0xFE6
 12033                           postdec1	equ	0xFE5
 12034                           fsr1h	equ	0xFE2
 12035                           fsr1l	equ	0xFE1
 12036                           indf2	equ	0xFDF
 12037                           postinc2	equ	0xFDE
 12038                           postdec2	equ	0xFDD
 12039                           fsr2h	equ	0xFDA
 12040                           fsr2l	equ	0xFD9
 12041                           status	equ	0xFD8
 12042                           tosu	equ	0xFFF
 12043                           tosh	equ	0xFFE
 12044                           tosl	equ	0xFFD
 12045                           pclatu	equ	0xFFB
 12046                           pclath	equ	0xFFA
 12047                           tblptru	equ	0xFF8
 12048                           tblptrh	equ	0xFF7
 12049                           tblptrl	equ	0xFF6
 12050                           tablat	equ	0xFF5
 12051                           prodh	equ	0xFF4
 12052                           prodl	equ	0xFF3
 12053                           intcon	equ	0xFF2
 12054                           intcon2	equ	0xFF1
 12055                           intcon3	equ	0xFF0
 12056                           indf0	equ	0xFEF
 12057                           postinc0	equ	0xFEE
 12058                           fsr0h	equ	0xFEA
 12059                           fsr0l	equ	0xFE9
 12060                           wreg	equ	0xFE8
 12061                           indf1	equ	0xFE7
 12062                           postinc1	equ	0xFE6
 12063                           postdec1	equ	0xFE5
 12064                           fsr1h	equ	0xFE2
 12065                           fsr1l	equ	0xFE1
 12066                           indf2	equ	0xFDF
 12067                           postinc2	equ	0xFDE
 12068                           postdec2	equ	0xFDD
 12069                           fsr2h	equ	0xFDA
 12070                           fsr2l	equ	0xFD9
 12071                           status	equ	0xFD8
 12072                           
 12073                           	psect	text42
 12074  000000                     __ptext42:
 12075                           	opt stack 0
 12076                           tosu	equ	0xFFF
 12077                           tosh	equ	0xFFE
 12078                           tosl	equ	0xFFD
 12079                           pclatu	equ	0xFFB
 12080                           pclath	equ	0xFFA
 12081                           tblptru	equ	0xFF8
 12082                           tblptrh	equ	0xFF7
 12083                           tblptrl	equ	0xFF6
 12084                           tablat	equ	0xFF5
 12085                           prodh	equ	0xFF4
 12086                           prodl	equ	0xFF3
 12087                           intcon	equ	0xFF2
 12088                           intcon2	equ	0xFF1
 12089                           intcon3	equ	0xFF0
 12090                           indf0	equ	0xFEF
 12091                           postinc0	equ	0xFEE
 12092                           fsr0h	equ	0xFEA
 12093                           fsr0l	equ	0xFE9
 12094                           wreg	equ	0xFE8
 12095                           indf1	equ	0xFE7
 12096                           postinc1	equ	0xFE6
 12097                           postdec1	equ	0xFE5
 12098                           fsr1h	equ	0xFE2
 12099                           fsr1l	equ	0xFE1
 12100                           indf2	equ	0xFDF
 12101                           postinc2	equ	0xFDE
 12102                           postdec2	equ	0xFDD
 12103                           fsr2h	equ	0xFDA
 12104                           fsr2l	equ	0xFD9
 12105                           status	equ	0xFD8
 12106                           
 12107                           	psect	rparam
 12108  0000                     tosu	equ	0xFFF
 12109                           tosh	equ	0xFFE
 12110                           tosl	equ	0xFFD
 12111                           pclatu	equ	0xFFB
 12112                           pclath	equ	0xFFA
 12113                           tblptru	equ	0xFF8
 12114                           tblptrh	equ	0xFF7
 12115                           tblptrl	equ	0xFF6
 12116                           tablat	equ	0xFF5
 12117                           prodh	equ	0xFF4
 12118                           prodl	equ	0xFF3
 12119                           intcon	equ	0xFF2
 12120                           intcon2	equ	0xFF1
 12121                           intcon3	equ	0xFF0
 12122                           indf0	equ	0xFEF
 12123                           postinc0	equ	0xFEE
 12124                           fsr0h	equ	0xFEA
 12125                           fsr0l	equ	0xFE9
 12126                           wreg	equ	0xFE8
 12127                           indf1	equ	0xFE7
 12128                           postinc1	equ	0xFE6
 12129                           postdec1	equ	0xFE5
 12130                           fsr1h	equ	0xFE2
 12131                           fsr1l	equ	0xFE1
 12132                           indf2	equ	0xFDF
 12133                           postinc2	equ	0xFDE
 12134                           postdec2	equ	0xFDD
 12135                           fsr2h	equ	0xFDA
 12136                           fsr2l	equ	0xFD9
 12137                           status	equ	0xFD8
 12138                           
 12139                           	psect	temp
 12140  000077                     btemp:
 12141                           	opt stack 0
 12142  000077                     	ds	1
 12143  0000                     int$flags	set	btemp
 12144                           tosu	equ	0xFFF
 12145                           tosh	equ	0xFFE
 12146                           tosl	equ	0xFFD
 12147                           pclatu	equ	0xFFB
 12148                           pclath	equ	0xFFA
 12149                           tblptru	equ	0xFF8
 12150                           tblptrh	equ	0xFF7
 12151                           tblptrl	equ	0xFF6
 12152                           tablat	equ	0xFF5
 12153                           prodh	equ	0xFF4
 12154                           prodl	equ	0xFF3
 12155                           intcon	equ	0xFF2
 12156                           intcon2	equ	0xFF1
 12157                           intcon3	equ	0xFF0
 12158                           indf0	equ	0xFEF
 12159                           postinc0	equ	0xFEE
 12160                           fsr0h	equ	0xFEA
 12161                           fsr0l	equ	0xFE9
 12162                           wreg	equ	0xFE8
 12163                           indf1	equ	0xFE7
 12164                           postinc1	equ	0xFE6
 12165                           postdec1	equ	0xFE5
 12166                           fsr1h	equ	0xFE2
 12167                           fsr1l	equ	0xFE1
 12168                           indf2	equ	0xFDF
 12169                           postinc2	equ	0xFDE
 12170                           postdec2	equ	0xFDD
 12171                           fsr2h	equ	0xFDA
 12172                           fsr2l	equ	0xFD9
 12173                           status	equ	0xFD8


Data Sizes:
    Strings     255
    Constant    42
    Data        754
    BSS         197
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     61     118
    BANK0           128     58     122
    BANK1           256     10     120
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    display_menu$1103	PTR const unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[20]), STR_9(CODE[20]), STR_8(CODE[22]), STR_7(CODE[19]), 
		 -> menu(BIGRAM[720]), STR_6(CODE[15]), STR_5(CODE[6]), STR_4(CODE[16]), 
		 -> STR_3(CODE[25]), STR_2(CODE[23]), STR_1(CODE[23]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_17(CODE[14]), STR_16(CODE[15]), STR_15(CODE[8]), display1(BANK1[18]), 
		 -> display0(BANK1[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> i2_putch(), Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), NULL(NULL[0]), STR_18(CODE[7]), 
		 -> _doprnt@c(BANK0[1]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_17(CODE[14]), STR_16(CODE[15]), STR_15(CODE[8]), STR_14(CODE[5]), 
		 -> STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), STR_10(CODE[20]), 
		 -> STR_9(CODE[20]), STR_8(CODE[22]), STR_7(CODE[19]), menu(BIGRAM[720]), 
		 -> STR_6(CODE[15]), STR_5(CODE[6]), STR_4(CODE[16]), STR_3(CODE[25]), 
		 -> STR_2(CODE[23]), STR_1(CODE[23]), display1(BANK1[18]), display0(BANK1[18]), 

    S453__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S453__prbuf$ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    display_menu@menuSizePtr	PTR int  size(2) Largest target is 2
		 -> endSize(BANK0[2]), menuSize(BANK0[2]), creditSize(BANK0[2]), events(BANK0[2]), 

    display_menu@menuIndexPtr	PTR int  size(2) Largest target is 2
		 -> endIndex(BANK0[2]), creditIndex(BANK0[2]), logIndex(BANK0[2]), menuIndex(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    i2_printf->i2__doprnt
    i2__doprnt->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _update_state->_sprintf
    _update_lcd->_printf
    _printf->__doprnt
    _update_display->_display_menu
    _display_menu->_sprintf
    _sprintf->__doprnt
    __doprnt->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _update_RTC->___wmul
    _I2C_Master_Read->_I2C_Master_Wait
    _set_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _read_sensors->_readADC
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    _update_display->_display_menu

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   88199
                                             57 BANK0      1     1      0
                    _I2C_Master_Init
                            _initLCD
                       _read_sensors
                           _set_time
                         _update_RTC
                     _update_display
                         _update_lcd
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         4     4      0   21430
                                             52 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _update_lcd                                           7     7      0   15264
                                             42 BANK0      3     3      0
                            _lcdInst
                             _printf
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     417
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4     441
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     6      2   14096
                                             34 BANK0      8     6      2
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _update_display                                       0     0      0   46200
                            ___awdiv
                            ___awmod
                       _display_menu
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _display_menu                                        25    25      0   25080
                                             52 BANK0      5     5      0
                                              0 BANK1     10    10      0
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             18     6     12   17904
                                             34 BANK0     18     6     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             26    20      6   11868
                                             12 BANK0     22    16      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    2463
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     753
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _update_RTC                                           5     5      0    3606
                                              6 BANK0      5     5      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2856
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0     592
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     493
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_sensors                                         3     3      0     409
                                              2 BANK0      3     3      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _keypressed                                          19    19      0   11412
                                             42 COMRAM    19    19      0
                          i2___awmod
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_printf                                             8     6      2    8568
                                             34 COMRAM     8     6      2
                          i2__doprnt
 ---------------------------------------------------------------------------------
 (9) i2__doprnt                                           26    20      6    8036
                                             12 COMRAM    22    16      6
                   Absolute function *
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch *
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i2___awmod                                            6     2      4     504
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _read_sensors
     _readADC
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _update_RTC
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
   _update_display
     ___awdiv
     ___awmod
     _display_menu
       ___wmul
       _sprintf
         ___awdiv (ARG)
         ___awmod (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
   _update_lcd
     _lcdInst
       _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _strcmp
     _strcpy
   _update_state
     ___awdiv
     ___awmod
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble

 _keypressed (ROOT)
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2__doprnt
       Absolute function(Fake) *
       i2___lwdiv *
       i2___lwmod *
         i2___lwdiv (ARG)
       i2___wmul *
       i2_isdigit *
       i2_putch *
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0     2D0      37       18.1%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      A      78       7       46.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     3A      7A       5       95.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3D      76       1       93.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     168      34        0.0%
DATA                 0      0     438       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Fri Feb 24 18:28:52 2017

             _update_state 1F24                         l34 3132               ___awdiv@sign 0085  
      ___wmul@multiplicand 0082         i2___lwdiv@dividend 0001                __CFG_BORV$3 000000  
           _update_display 241A               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l491 0480                        l912 2958                        l965 2B0C  
                      l975 2CAE                        _IR1 00C4               __CFG_CPB$OFF 000000  
                      _IR2 011C              ?_display_menu 0001                        _PEN 007E2A  
             __CFG_CPD$OFF 000000                        _SEN 007E28               ___awmod@sign 0085  
                      prod 000FF3                        tosl 000FFD                        wreg 000FE8  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       l5100 25C2  
                     l5112 265A                       l5104 25CC                       l5124 21EE  
                     l5134 235C                       l5128 21F8                       l4370 2ABC  
                     l4354 30B8                       l5084 2CDE                       l4372 2AC8  
                     l5094 2D14                       l4382 2AFE                       l4374 2ACE  
                     l4390 2C6A                       l5088 2CE8                       l4392 2C76  
                     l4810 29E0                       l4802 29AA                       l4394 2C7C  
                     l8010 2486                       l8002 21AA                       l4740 3092  
                     l4804 29B6                       l8012 248C                       l4660 2D7C  
                     l4830 28EC                       l4750 280C                       l4806 29BC  
                     l4814 29EE                       l4398 2CA0                       l8014 2522  
                     l4662 2D88                       l4840 2946                       l4832 28F2  
                     l4648 3064                       l8008 241C                       l4672 3016  
                     l4738 3080                       l4762 2840                       l4818 2A02  
                     l8018 255C                       l4666 2DC0                       l4674 3022  
                     l8034 2798                       l4828 28DC                       l4764 284C  
                     l4756 2822                       l7500 027E                       l8028 274A  
                     l4782 28A4                       l4774 2882                       l4766 2852  
                     l7510 0306                       l7600 066E                       l7504 02C4  
                     l4778 2890                       l4794 2986                       l7610 06EA  
                     l7514 036C                       l7522 03C4                       l7450 0016  
                     l8074 2BC2                       l7612 06F4                       l7524 03DC  
                     l7516 0374                       l7508 02EE                       l7532 041A  
                     l7460 0098                       l4798 2996                       l7630 07D8  
                     l7622 0770                       l7614 0700                       l7606 06C0  
                     l7542 04C6                       l7526 0402                       l7462 00AA  
                     l7702 1858                       l7624 0784                       l7560 0538  
                     l7544 04F0                       l7480 01B4                       l7472 0110  
                     l7456 006A                       l7720 1B12                       l7704 1872  
                     l7650 090E                       l7618 0746                       l7634 0802  
                     l7546 04F6                       l7490 0206                       l7482 01BA  
                     l7466 00B4                       l7714 19D2                       l7636 0808  
                     l7644 08B4                       l7492 020C                       l7638 085A  
                     l7646 08C6                       l7654 0938                       l7582 05A8  
                     l7558 0532                       l7574 0574                       l7494 024C  
                     l7576 0586                       l7488 01FA                       l7656 0944  
                     l7586 05E0                       l7498 0272                       l7658 098A  
                     l7690 1806                       l7596 0644                       l7588 05EA  
                     l7684 17E6                       _ADON 007E10                       l7678 17C6  
                     l7950 1F56                       l7696 1834                       l7960 1FA8  
                     l7944 1F38                       l7970 202C                       l7954 1F6C  
                     l7948 1F4C                       l7984 213A                       l7978 211C  
                     l7988 2156                       l7998 2196                       STR_1 FF18  
                     STR_2 FF2F                       STR_3 FEFF                       STR_4 FFA8  
                     STR_5 FFF3                       STR_6 FFB8                       STR_7 FF84  
                     STR_8 FF46                       STR_9 FF5C                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       u7014 23DC  
                     u7015 23D6                       u7024 2404                       u7025 23FE  
                     u6170 3062                       _RCEN 007E2B                       u6935 2D4A  
                     _RSEN 007E29                       _main 2B86                i2__doprnt@c 0022  
              i2__doprnt@f 000F                       _menu 0178                       _keys FED5  
                     _time 00CE                       fsr0h 000FEA                       fsr1h 000FE2  
       i2___lwdiv@quotient 0005                       indf0 000FEF                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf1 000FE7                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 0077  
                     prodh 000FF4                       prodl 000FF3                       start 000E  
            __CFG_IESO$OFF 000000            __end_ofi2_putch 3170              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                i2_lcdNibble 2DD0     __end_of_update_display 2586  
       _discretize_counter 0064           ?_I2C_Master_Init 008D           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001             ??_display_menu 00B4  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
          __end_of___awdiv 28AE                      STR_10 FF70                      STR_11 FFF9  
                    STR_12 FFF9                      STR_13 FFF9                      STR_14 FFF9  
                    STR_15 FFE4                      STR_16 FFC7                      STR_17 FFD6  
                    STR_18 FFEC                      STR_19 FF97            __end_of___awmod 2A0C  
          __end_of___lldiv 296A                      _DIST1 00BA            ___awdiv@divisor 0082  
                    u11600 036A                      u11520 0246                      u11610 03AE  
                    u11450 00D6                      u13107 2C0E                      u11460 00FE  
                    u13117 2C18                      u11630 0452                      u13127 2C44  
                    u11607 0360                      u11527 023C                      u11480 015C  
                    u11448 0052                      u13137 2C4E                      u11617 03A4  
                    u11457 00CC                      u13057 2BE2                      u11490 01AA  
                    u11467 00F4                      u13067 27B2                      u13077 3088  
                    u11637 0448                      u12630 2150                      u13087 2F1C  
                    u11487 0152                      u11568 02AE                      u13097 2F52  
                    u11497 01A0                      u11930 097C                      u11818 06AA  
                    u12570 2026                      u11918 08F6                      u11598 0336  
                    u11937 0972                      u11858 0730                      u11788 062E  
                    u11898 07C2            __end_of___lwdiv 2B16            __end_of___lwmod 2CB8  
                    i2l336 177C                      i2l373 177E                      i2l491 0D74  
          ___awdiv@counter 0084                      i2l965 2EC0                      i2l975 2F96  
                    _PORTB 000F81                      _PORTE 000F84                      _PROX1 004C  
                    _PROX2 0056            __end_of__doprnt 0996                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95              __CFG_PWRT$OFF 000000  
            __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000  
            __CFG_WRT3$OFF 000000            __end_of_lcdInst 3156             __CFG_EBTR0$OFF 000000  
           __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000  
           __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F              __CFG_WRTB$OFF 000000  
            __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000            __end_of_readADC 3098  
          __end_of_initLCD 2F5E             __CFG_EBTRB$OFF 000000                 i2isdigit@c 0003  
          __end_of_dpowers FEF0               i2__doprnt@ap 0011               i2__doprnt@cp 001B  
             i2__doprnt@pb 000D            __end_of_isdigit 30C2                      _state 00E9  
                    _putch 3106                      pclath 000FFA                      tablat 000FF5  
         __end_ofi2___wmul 30E8                      status 000FD8            __end_of_sprintf 2E78  
       __size_ofi2___awmod 0070             __CFG_PBADEN$ON 000000           __end_ofi2_printf 300C  
       __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042         __size_ofi2__doprnt 0858  
          __initialization 2A0C         __size_ofi2_lcdInst 000C               __end_of_main 2BEE  
             __end_of_keys FEE6                 i2printf@ap 0025                 i2printf@pb 0027  
          ?_update_display 0001         __size_ofi2_isdigit 001E            _IR_THRESHOLD_HI 006E  
                   ??_main 00B9              __activetblptr 000003          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 0081     _latestSortedBottleTime 0100         ??_I2C_Master_Start 0081  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0083  
                   _ADRESH 000FC4                     _ADRESL 000FC3           ___awdiv@dividend 0080  
          i2lcdNibble@data 0002                     ?_putch 0001            i2lcdNibble@temp 0001  
                   _INT1IE 007F83                     _INT1IF 007F80                     i2l3102 30FE  
                   i2l3112 2E8E                     i2l3114 2E96                     i2l3124 2EB6  
                   i2l3116 2E9A                     i2l3140 2F8C                     i2l3132 2F6C  
                   i2l3134 2F74                     i2l3136 2F78                     i2l3810 2B7C  
                   i2l3802 2B64                     i2l3806 2B6E                     i2l3790 2B36  
                   i2l8102 124E                     i2l8200 1544                     i2l8120 1304  
                   i2l3794 2B44                     i2l3786 2B2A                     i2l8130 1332  
                   i2l8114 12C4                     i2l3796 2B4C                     i2l8212 15CC  
                   i2l8124 1326                     i2l8140 135E                     i2l8108 1280  
                   i2l3798 2B50                     i2l8230 1698                     i2l8206 1588  
                   i2l8150 139C                     i2l8126 132A                     i2l8224 1654  
                   i2l8144 1384                     i2l8128 132E                     i2l8242 171C  
                   i2l8218 1610                     i2l8162 1412                     i2l8146 138C  
                   i2l8250 1752                     i2l8236 16DC                     i2l8228 1694  
                   i2l8172 1452                     i2l8156 13CE                     i2l8246 1744  
                   i2l8190 14E0                     i2l8174 145A                     i2l7800 0CD4  
                   i2l8184 149C                     i2l8096 1236                     i2l7802 0CE6  
                   i2l7810 0D1C                     i2l8178 146A                     i2l8098 123E  
                   i2l7900 1004                     i2l7820 0DB2                     i2l7804 0D0A  
                   i2l7740 0A1C                     i2l8196 1520                     i2l7902 1012  
                   i2l7822 0DDC                     i2l7750 0A7C                     i2l7734 09E2  
                   i2l8198 1540                     i2l7912 1088                     i2l7824 0DE0  
                   i2l7760 0B0A                     i2l7744 0A22                     i2l7728 099A  
                   i2l7914 108E                     i2l7922 112A                     i2l7770 0B50  
                   i2l7738 0A0E                     i2l7916 10D8                     i2l7924 113A  
                   i2l7932 11A4                     i2l7908 105E                     i2l7860 0E72  
                   i2l7836 0E12                     i2l7852 0E48                     i2l7772 0B84  
                   i2l7838 0E16                     i2l7854 0E58                     i2l7782 0BE4  
                   i2l7766 0B42                     i2l7758 0B06                     i2l7934 11AC  
                   i2l7928 117A                     i2l7864 0E96                     i2l7792 0C80  
                   i2l7776 0B9A                     i2l7768 0B4C                     i2l7936 11E4  
                   i2l7874 0EEE                     i2l7890 0F92                     i2l7866 0E9E  
                   i2l7794 0C86                     i2l7778 0BA4                     i2l7786 0C0E  
                   i2l7892 0F9A                     i2l7884 0F60                     i2l7788 0C20  
                   i2l7878 0F18                     i2l7896 0FDA                     i2l7888 0F8A  
                ??i2_putch 0003                     _SSPADD 000FC8                     _TRISC3 007CA3  
                   _TRISC4 007CA4                     _SSPBUF 000FC9             __CFG_XINST$OFF 000000  
                   ___wmul 2FA0                  ??___awdiv 0084             __CFG_STVREN$ON 000000  
                ??___awmod 0084                  ??___lldiv 0088                  ??___lwdiv 0084  
                ??___lwmod 008B              ?_read_sensors 0001            _release_counter 0068  
                ??__doprnt 0092                     _events 00F2              i2__doprnt@idx 0017  
            i2__doprnt@len 0019              i2__doprnt@val 001D                     clear_0 2A76  
                   clear_1 2A82                     clear_2 2A8E           ___awdiv@quotient 0086  
          ___awmod@divisor 0082                     _time_i 003E               __doprnt@flag 009E  
                   _nstate 00E8            ___awmod@counter 0084                  ??_lcdInst 0082  
                   _printf 2ECA               __doprnt@prec 0097                     _strcmp 2D7A  
                   _strcpy 300C                  ??_readADC 0080                  ??_initLCD 0083  
             __pdataBIGRAM 0178               __pdataCOMRAM 006A                  ??_isdigit 0080  
         __end_of_set_time 2D1A          __end_ofi2___awmod 2B86          __end_ofi2___lwdiv 2ECA  
             __mediumconst FED4          __end_ofi2___lwmod 2FA0                     tblptrh 000FF7  
                   tblptrl 000FF6                     tblptru 000FF8          __end_ofi2__doprnt 11EE  
           i2___awmod@sign 0006          __end_ofi2_lcdInst 317C                  ??_sprintf 00AE  
        __end_ofi2_isdigit 3106                 __accesstop 0080    __end_of__initialization 2A94  
     __end_of_display_menu 1C54              ___rparam_used 000001  display_menu@menuSelection 0172  
       i2___lwmod@dividend 0008             __pcstackCOMRAM 0001               __pidataBANK0 311C  
           ??_read_sensors 0082              __end_of_putch 311C                  ?i2___wmul 0001  
       __size_of_lcdNibble 0068                i2putch@data 0003                keypressed@i 003B  
                ?i2_printf 0023              update_state@i 00B6           _IR_THRESHOLD_LOW 0070  
               __doprnt@ap 0090                 __doprnt@cp 009A                 __doprnt@pb 008C  
                  ??_putch 0082                 __pbssBANK0 00BA                 __pbssBANK1 0100  
             ?i2_lcdNibble 0001                    ?___wmul 0080             _sorted_bottles 00DB  
                  ?_printf 00A2                    ?_strcmp 0080                    ?_strcpy 0080  
               ??i2___wmul 0005                    _IR1_PIN 00E5                    _IR2_PIN 00E6  
               _creditSize 00EC                 _discretize 0062                 ??i2_printf 0025  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
                  i2_putch 3164          __end_of_lcdNibble 2C56           ??_update_display 00B9  
                  __Hparam 0000                    __Lparam 0000             _manualDateTime FEF8  
                ?_set_time 0001                    ___awdiv 27F0                    ___awmod 296A  
                  ___lldiv 28AE            __size_of___wmul 0036                    ___lwdiv 2A9E  
                  ___lwmod 2C56                    __doprnt 0012                  _DIST1_PIN 00E3  
                  __pcinit 2A0C                    __ramtop 1000                    _endSize 00F0  
                  _lcdInst 3146                    __ptext0 2B86                    __ptext1 1F24  
                  __ptext2 26F2                    __ptext3 300C                    __ptext4 2D7A  
                  __ptext5 2ECA                    __ptext6 241A                    __ptext7 17BA  
                  __ptext8 2E26                    __ptext9 0012            __size_of_printf 004A  
          __size_of_strcmp 0056                    _readADC 306C            __size_of_strcpy 0032  
                  _initLCD 2F14          __end_of_hexpowers FEF8              i2_isdigit$713 0002  
                  _dpowers FEE6                    _measure 0072                    _isdigit 3098  
           i2__doprnt@flag 001F           ___awmod@dividend 0080             i2__doprnt@prec 0018  
                  _release 0074                 _keypressed 0008   __size_of_I2C_Master_Init 0060  
 __size_of_I2C_Master_Read 002E   __size_of_I2C_Master_Wait 0014   __size_of_I2C_Master_Stop 0008  
                  _runTime 00D9                    _yopWCap 00E1                    _sprintf 2E26  
            __doprnt@width 009F      __size_of_display_menu 049A             __pintcode_body 11EE  
       _DIST_THRESHOLD_LOW 006C       end_of_initialization 2A94       __end_of_read_sensors 241A  
                  int_func 11EE        i2___wmul@multiplier 0001                  i2u1200_40 0A44  
                i2u1200_47 0A3A                  i2u1201_40 0A6C                  i2u1201_47 0A62  
                i2u1203_40 0AC2                  i2u1203_47 0AB8                  i2u1211_48 0BD0  
                i2u1204_40 0AFC                  i2u1204_47 0AF2                  i2u1215_40 0C7E  
                i2u1214_48 0C4C                  i2u1207_40 0B7E                  i2u1303_40 1712  
                i2u1215_47 0C74                  i2u1207_47 0B74                  i2u1216_40 0CC0  
                i2u1216_47 0CB6                  i2u1240_48 0FC6                  i2u1233_48 0EDA  
                i2u1218_40 0D4A                  i2u1314_47 2DE8                  i2u1218_47 0D40  
                i2u1315_47 2DF2                  i2u1316_47 2E14                  i2u1244_48 104A  
                i2u1236_48 0F4C                  i2u1317_47 2E1E                  i2u1246_48 1166  
                i2u1248_40 11DA                  i2u1248_47 11D0                  i2u1292_40 1516  
                i2u1285_40 1448                  i2u1278_40 12FA                  i2u1199_48 09CE  
   __end_of_manualDateTime FEFF  __size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A  
          ___lldiv@divisor 0084            ___lldiv@counter 008C                 ??_set_time 0083  
                  printf@f 00A2           I2C_Master_Init@c 008D           I2C_Master_Read@a 0081  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE                    strcmp@r 0085  
                _PROX1_PIN 00E4                  _PROX2_PIN 00E7               _display_menu 17BA  
               _update_RTC 2586                 _update_lcd 26F2                  i2___awmod 2B16  
        i2___lwdiv@divisor 0003                  i2___lwdiv 2E78                  i2___lwmod 2F5E  
        i2___lwdiv@counter 0007                  i2__doprnt 0996                  i2_lcdInst 3170  
                i2_isdigit 30E8              ?_update_state 0001              __pidataBIGRAM 1C54  
           __end_of___wmul 2FD6       __size_ofi2_lcdNibble 0056              __pidataCOMRAM 3156  
            i2lcdInst@data 0003           i2___wmul@product 0005             __end_of_printf 2F14  
              update_RTC@i 008A             __end_of_strcmp 2DD0             __end_of_strcpy 303E  
           update_lcd@flag 00AB        start_initialization 2A0C                ?_keypressed 0001  
        __size_ofi2___wmul 0026                  i2printf@f 0023                 ?i2___awmod 0001  
               ?i2___lwdiv 0001                 ?i2___lwmod 0008          __size_ofi2_printf 0036  
               ?i2__doprnt 000D          ??_I2C_Master_Init 0091          ??_I2C_Master_Read 0081  
        ??_I2C_Master_Wait 0080                 ?i2_lcdInst 0001          ??_I2C_Master_Stop 0081  
               ?i2_isdigit 0001             ??_update_state 00B4                   ??___wmul 0084  
              __doprnt@idx 0096                __doprnt@len 0098                __doprnt@val 009C  
              __pdataBANK0 00E5           __CFG_LPT1OSC$OFF 000000                   ??_printf 00A4  
                 ??_strcmp 0084                   ??_strcpy 0084                __pbssCOMRAM 003E  
              ?_update_RTC 0001      __size_of_read_sensors 023C              __pcstackBANK0 0080  
            __pcstackBANK1 016E                ?_update_lcd 0001          i2___lwmod@divisor 000A  
        i2___lwmod@counter 000C                   ?i2_putch 0001                  __doprnt@c 00A1  
                __doprnt@f 008E           _I2C_Master_Start 318E           _I2C_Master_Write 317C  
         ___lwdiv@dividend 0080          __CFG_CCP2MX$PORTC 000000        __size_of_keypressed 17B2  
                __pintcode 0008              __pmediumconst FED4                  _lcdNibble 2BEE  
                 ?___awdiv 0080                   ?___awmod 0080                   ?___lldiv 0080  
                 ?___lwdiv 0080                   ?___lwmod 0087          __size_of_set_time 0062  
                 ?__doprnt 008C               _read_sensors 21DE                   ?_lcdInst 0001  
                _eskaNoCap 00D5                   ?_readADC 0001                   ?_initLCD 0001  
        _display_menu$1103 0174                   ?_isdigit 0001                  _hexpowers FEF0  
                _menuIndex 00F6           ___lwdiv@quotient 0085                ??i2___awmod 0005  
                 ?_sprintf 00A2                ??i2___lwdiv 0005                  _ndisplay0 014A  
              ??i2___lwmod 000C                  _ndisplay1 015C             __size_of_putch 0016  
              ??i2__doprnt 0013                _creditIndex 00EA                ??i2_lcdInst 0003  
           ___wmul@product 0084                   _LATDbits 000F8C          _DIST_THRESHOLD_HI 006A  
              ??i2_isdigit 0001        __size_of_update_RTC 016C           __CFG_WDTPS$32768 000000  
               ?_lcdNibble 0001        __size_of_update_lcd 00FE                 _ADCON0bits 000FC2  
        ___wmul@multiplier 0080                  _startTime 010E                   i2___wmul 30C2  
            lcdNibble@data 0081              lcdNibble@temp 0080                   i2_printf 2FD6  
     __end_of_update_state 21DE        I2C_Master_Read@temp 0082                _bottle_type 0060  
                copy_data0 2A20                  copy_data1 2A44                  copy_data2 2A64  
       i2___awmod@dividend 0001           __size_ofi2_putch 000C         keypressed@keypress 003D  
                 __Hrparam 0000                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
         __size_of___awdiv 00BE           __size_of___awmod 00A2      i2___wmul@multiplicand 0003  
         __size_of___lldiv 00BC           __size_of___lwdiv 0078           __size_of___lwmod 0062  
           readADC@channel 0081           __size_of__doprnt 0984    __size_of_update_display 016C  
              _isdigit$713 0081            _putch$intlevel0 310C   display_menu@menuIndexPtr 0176  
         __size_of_lcdInst 0010            _I2C_Master_Init 2D1A           __size_of_readADC 002C  
          _I2C_Master_Read 303E           __size_of_initLCD 004A            _I2C_Master_Wait 3132  
          _I2C_Master_Stop 3186                 _DIST1_TRIG 0076               ??_keypressed 002B  
         __size_of_isdigit 002A                   _endIndex 00EE            ___lwdiv@divisor 0082  
          ___lwdiv@counter 0084                   __ptext10 3106                   __ptext11 3098  
                 __ptext20 317C                   __ptext12 2C56                   __ptext21 3186  
                 __ptext13 2A9E                   __ptext30 28AE                   __ptext22 318E  
                 __ptext14 296A                   __ptext23 3132                   __ptext15 27F0  
                 __ptext40 2DD0                   __ptext32 2FD6                   __ptext24 21DE  
                 __ptext16 2586                   __ptext41 2B16                   __ptext33 0996  
                 __ptext25 306C                   __ptext17 2FA0                   __ptext42 0000  
                 __ptext34 3164                   __ptext26 2F14                   __ptext18 303E  
                 __ptext35 30E8                   __ptext27 3146                   __ptext19 2CB8  
                 __ptext36 30C2                   __ptext28 2BEE                   __ptext37 2F5E  
                 __ptext29 2D1A                   __ptext38 2E78                   __ptext39 3170  
                 _display0 0126                   _eskaWCap 00D7                   _display1 0138  
         __size_of_sprintf 0052                 strcpy@from 0082                   _logIndex 00F4  
            __size_of_main 0068                   _menuSize 00F8            i2__doprnt@width 0020  
                set_time@i 0083                   _timeDiff 00DD                   _set_time 2CB8  
            ??i2_lcdNibble 0001                ??_lcdNibble 0080         __end_of_keypressed 17BA  
                 int$flags 0077                   _yopNoCap 00DF          i2___awmod@divisor 0003  
                putch@data 0082          i2___awmod@counter 0005   __end_of_I2C_Master_Start 3196  
 __end_of_I2C_Master_Write 3186                 _INTCONbits 000FF2               ??_update_RTC 0086  
             ??_update_lcd 00AA                   isdigit@c 0082                   intlevel2 0000  
                sprintf@ap 00AE                  sprintf@pb 00B0                  sprintf@wh 00A2  
          _measure_counter 0066           ___lwmod@dividend 0087           ___lldiv@dividend 0080  
  display_menu@menuSizePtr 0170         __end_of_update_RTC 26F2                   printf@ap 00A4  
                 printf@pb 00A6         __end_of_update_lcd 27F0    __end_of_I2C_Master_Init 2D7A  
  __end_of_I2C_Master_Read 306C    __end_of_I2C_Master_Wait 3146    __end_of_I2C_Master_Stop 318E  
              lcdInst@data 0082        __end_ofi2_lcdNibble 2E26                   sprintf@f 00A4  
    __size_of_update_state 02BA                   strcmp@s1 0080                   strcmp@s2 0082  
         ___lldiv@quotient 0088          I2C_Master_Write@d 0081            ___lwmod@divisor 0089  
                 strcpy@cp 0084                   strcpy@to 0080            ___lwmod@counter 008B  
            read_sensors@i 0084       display_menu@selector 016E  
