

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Sat Feb 25 01:55:32 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    51                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    52                           	psect	text32,global,reloc=2,class=CODE,delta=1
    53                           	psect	text33,global,reloc=2,class=CODE,delta=1
    54                           	psect	text34,global,reloc=2,class=CODE,delta=1
    55                           	psect	text35,global,reloc=2,class=CODE,delta=1
    56                           	psect	text36,global,reloc=2,class=CODE,delta=1
    57                           	psect	text37,global,reloc=2,class=CODE,delta=1
    58                           	psect	text38,global,reloc=2,class=CODE,delta=1
    59                           	psect	text39,global,reloc=2,class=CODE,delta=1
    60                           	psect	text40,global,reloc=2,class=CODE,delta=1
    61                           	psect	text41,global,reloc=2,class=CODE,delta=1
    62                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    65                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    66  0000                     
    67                           ; Version 1.40
    68                           ; Generated 01/12/2016 GMT
    69                           ; 
    70                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    71                           ; All rights reserved.
    72                           ; 
    73                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    74                           ; 
    75                           ; Redistribution and use in source and binary forms, with or without modification, are
    76                           ; permitted provided that the following conditions are met:
    77                           ; 
    78                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    79                           ;        conditions and the following disclaimer.
    80                           ; 
    81                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    82                           ;        of conditions and the following disclaimer in the documentation and/or other
    83                           ;        materials provided with the distribution.
    84                           ; 
    85                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    86                           ;        software without specific prior written permission.
    87                           ; 
    88                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    89                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    90                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    91                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    92                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    93                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    94                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    95                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    96                           ; 
    97                           ; 
    98                           ; Code-generator required, PIC18F4620 Definitions
    99                           ; 
   100                           ; SFR Addresses
   101  0000                     
   102                           	psect	idataCOMRAM
   103  00315A                     __pidataCOMRAM:
   104                           	opt stack 0
   105                           
   106                           ;initializer for _DIST_THRESHOLD_HI
   107  00315A  02FF               	dw	767
   108                           
   109                           ;initializer for _DIST_THRESHOLD_LOW
   110  00315C  00FF               	dw	255
   111                           
   112                           ;initializer for _IR_THRESHOLD_HI
   113  00315E  02FF               	dw	767
   114                           
   115                           ;initializer for _IR_THRESHOLD_LOW
   116  003160  00FF               	dw	255
   117                           
   118                           ;initializer for _measure
   119  003162  0005               	dw	5
   120                           
   121                           ;initializer for _release
   122  003164  0FA0               	dw	4000
   123                           
   124                           ;initializer for _DIST1_TRIG
   125  003166  05                 	db	5
   126                           
   127                           	psect	idataBIGRAM
   128  001C54                     __pidataBIGRAM:
   129                           	opt stack 0
   130                           
   131                           ;initializer for _menu
   132  001C54  31                 	db	49
   133  001C55  2E                 	db	46
   134  001C56  20                 	db	32
   135  001C57  53                 	db	83
   136  001C58  6F                 	db	111
   137  001C59  72                 	db	114
   138  001C5A  74                 	db	116
   139  001C5B  20                 	db	32
   140  001C5C  20                 	db	32
   141  001C5D  20                 	db	32
   142  001C5E  20                 	db	32
   143  001C5F  20                 	db	32
   144  001C60  20                 	db	32
   145  001C61  20                 	db	32
   146  001C62  20                 	db	32
   147  001C63  00                 	db	0
   148  001C64  00                 	db	0
   149  001C65  00                 	db	0
   150  001C66  32                 	db	50
   151  001C67  2E                 	db	46
   152  001C68  20                 	db	32
   153  001C69  50                 	db	80
   154  001C6A  20                 	db	32
   155  001C6B  4C                 	db	76
   156  001C6C  6F                 	db	111
   157  001C6D  67                 	db	103
   158  001C6E  73                 	db	115
   159  001C6F  20                 	db	32
   160  001C70  20                 	db	32
   161  001C71  20                 	db	32
   162  001C72  20                 	db	32
   163  001C73  20                 	db	32
   164  001C74  20                 	db	32
   165  001C75  00                 	db	0
   166  001C76  00                 	db	0
   167  001C77  00                 	db	0
   168  001C78  33                 	db	51
   169  001C79  2E                 	db	46
   170  001C7A  20                 	db	32
   171  001C7B  43                 	db	67
   172  001C7C  72                 	db	114
   173  001C7D  65                 	db	101
   174  001C7E  64                 	db	100
   175  001C7F  69                 	db	105
   176  001C80  74                 	db	116
   177  001C81  73                 	db	115
   178  001C82  20                 	db	32
   179  001C83  20                 	db	32
   180  001C84  20                 	db	32
   181  001C85  20                 	db	32
   182  001C86  20                 	db	32
   183  001C87  00                 	db	0
   184  001C88  00                 	db	0
   185  001C89  00                 	db	0
   186  001C8A  00                 	db	0
   187  001C8B  00                 	db	0
   188  001C8C  00                 	db	0
   189  001C8D  00                 	db	0
   190  001C8E  00                 	db	0
   191  001C8F  00                 	db	0
   192  001C90  00                 	db	0
   193  001C91  00                 	db	0
   194  001C92  00                 	db	0
   195  001C93  00                 	db	0
   196  001C94  00                 	db	0
   197  001C95  00                 	db	0
   198  001C96  00                 	db	0
   199  001C97  00                 	db	0
   200  001C98  00                 	db	0
   201  001C99  00                 	db	0
   202  001C9A  00                 	db	0
   203  001C9B  00                 	db	0
   204  001C9C  00                 	db	0
   205  001C9D  00                 	db	0
   206  001C9E  00                 	db	0
   207  001C9F  00                 	db	0
   208  001CA0  00                 	db	0
   209  001CA1  00                 	db	0
   210  001CA2  00                 	db	0
   211  001CA3  00                 	db	0
   212  001CA4  00                 	db	0
   213  001CA5  00                 	db	0
   214  001CA6  00                 	db	0
   215  001CA7  00                 	db	0
   216  001CA8  00                 	db	0
   217  001CA9  00                 	db	0
   218  001CAA  00                 	db	0
   219  001CAB  00                 	db	0
   220  001CAC  00                 	db	0
   221  001CAD  00                 	db	0
   222  001CAE  00                 	db	0
   223  001CAF  00                 	db	0
   224  001CB0  00                 	db	0
   225  001CB1  00                 	db	0
   226  001CB2  00                 	db	0
   227  001CB3  00                 	db	0
   228  001CB4  00                 	db	0
   229  001CB5  00                 	db	0
   230  001CB6  00                 	db	0
   231  001CB7  00                 	db	0
   232  001CB8  00                 	db	0
   233  001CB9  00                 	db	0
   234  001CBA  00                 	db	0
   235  001CBB  00                 	db	0
   236  001CBC  00                 	db	0
   237  001CBD  00                 	db	0
   238  001CBE  00                 	db	0
   239  001CBF  00                 	db	0
   240  001CC0  00                 	db	0
   241  001CC1  00                 	db	0
   242  001CC2  00                 	db	0
   243  001CC3  00                 	db	0
   244  001CC4  00                 	db	0
   245  001CC5  00                 	db	0
   246  001CC6  00                 	db	0
   247  001CC7  00                 	db	0
   248  001CC8  00                 	db	0
   249  001CC9  00                 	db	0
   250  001CCA  00                 	db	0
   251  001CCB  00                 	db	0
   252  001CCC  00                 	db	0
   253  001CCD  00                 	db	0
   254  001CCE  00                 	db	0
   255  001CCF  00                 	db	0
   256  001CD0  00                 	db	0
   257  001CD1  00                 	db	0
   258  001CD2  00                 	db	0
   259  001CD3  00                 	db	0
   260  001CD4  00                 	db	0
   261  001CD5  00                 	db	0
   262  001CD6  00                 	db	0
   263  001CD7  00                 	db	0
   264  001CD8  00                 	db	0
   265  001CD9  00                 	db	0
   266  001CDA  00                 	db	0
   267  001CDB  00                 	db	0
   268  001CDC  00                 	db	0
   269  001CDD  00                 	db	0
   270  001CDE  00                 	db	0
   271  001CDF  00                 	db	0
   272  001CE0  00                 	db	0
   273  001CE1  00                 	db	0
   274  001CE2  00                 	db	0
   275  001CE3  00                 	db	0
   276  001CE4  00                 	db	0
   277  001CE5  00                 	db	0
   278  001CE6  00                 	db	0
   279  001CE7  00                 	db	0
   280  001CE8  00                 	db	0
   281  001CE9  00                 	db	0
   282  001CEA  00                 	db	0
   283  001CEB  00                 	db	0
   284  001CEC  00                 	db	0
   285  001CED  00                 	db	0
   286  001CEE  00                 	db	0
   287  001CEF  00                 	db	0
   288  001CF0  00                 	db	0
   289  001CF1  00                 	db	0
   290  001CF2  00                 	db	0
   291  001CF3  00                 	db	0
   292  001CF4  00                 	db	0
   293  001CF5  00                 	db	0
   294  001CF6  00                 	db	0
   295  001CF7  00                 	db	0
   296  001CF8  00                 	db	0
   297  001CF9  00                 	db	0
   298  001CFA  00                 	db	0
   299  001CFB  00                 	db	0
   300  001CFC  00                 	db	0
   301  001CFD  00                 	db	0
   302  001CFE  00                 	db	0
   303  001CFF  00                 	db	0
   304  001D00  00                 	db	0
   305  001D01  00                 	db	0
   306  001D02  00                 	db	0
   307  001D03  00                 	db	0
   308  001D04  00                 	db	0
   309  001D05  00                 	db	0
   310  001D06  00                 	db	0
   311  001D07  00                 	db	0
   312  001D08  65                 	db	101
   313  001D09  76                 	db	118
   314  001D0A  65                 	db	101
   315  001D0B  6E                 	db	110
   316  001D0C  74                 	db	116
   317  001D0D  31                 	db	49
   318  001D0E  20                 	db	32
   319  001D0F  20                 	db	32
   320  001D10  20                 	db	32
   321  001D11  20                 	db	32
   322  001D12  20                 	db	32
   323  001D13  20                 	db	32
   324  001D14  20                 	db	32
   325  001D15  20                 	db	32
   326  001D16  20                 	db	32
   327  001D17  00                 	db	0
   328  001D18  00                 	db	0
   329  001D19  00                 	db	0
   330  001D1A  65                 	db	101
   331  001D1B  76                 	db	118
   332  001D1C  65                 	db	101
   333  001D1D  6E                 	db	110
   334  001D1E  74                 	db	116
   335  001D1F  32                 	db	50
   336  001D20  20                 	db	32
   337  001D21  20                 	db	32
   338  001D22  20                 	db	32
   339  001D23  20                 	db	32
   340  001D24  20                 	db	32
   341  001D25  20                 	db	32
   342  001D26  20                 	db	32
   343  001D27  20                 	db	32
   344  001D28  20                 	db	32
   345  001D29  00                 	db	0
   346  001D2A  00                 	db	0
   347  001D2B  00                 	db	0
   348  001D2C  65                 	db	101
   349  001D2D  76                 	db	118
   350  001D2E  65                 	db	101
   351  001D2F  6E                 	db	110
   352  001D30  74                 	db	116
   353  001D31  33                 	db	51
   354  001D32  20                 	db	32
   355  001D33  20                 	db	32
   356  001D34  20                 	db	32
   357  001D35  20                 	db	32
   358  001D36  20                 	db	32
   359  001D37  20                 	db	32
   360  001D38  20                 	db	32
   361  001D39  20                 	db	32
   362  001D3A  20                 	db	32
   363  001D3B  00                 	db	0
   364  001D3C  00                 	db	0
   365  001D3D  00                 	db	0
   366  001D3E  00                 	db	0
   367  001D3F  00                 	db	0
   368  001D40  00                 	db	0
   369  001D41  00                 	db	0
   370  001D42  00                 	db	0
   371  001D43  00                 	db	0
   372  001D44  00                 	db	0
   373  001D45  00                 	db	0
   374  001D46  00                 	db	0
   375  001D47  00                 	db	0
   376  001D48  00                 	db	0
   377  001D49  00                 	db	0
   378  001D4A  00                 	db	0
   379  001D4B  00                 	db	0
   380  001D4C  00                 	db	0
   381  001D4D  00                 	db	0
   382  001D4E  00                 	db	0
   383  001D4F  00                 	db	0
   384  001D50  00                 	db	0
   385  001D51  00                 	db	0
   386  001D52  00                 	db	0
   387  001D53  00                 	db	0
   388  001D54  00                 	db	0
   389  001D55  00                 	db	0
   390  001D56  00                 	db	0
   391  001D57  00                 	db	0
   392  001D58  00                 	db	0
   393  001D59  00                 	db	0
   394  001D5A  00                 	db	0
   395  001D5B  00                 	db	0
   396  001D5C  00                 	db	0
   397  001D5D  00                 	db	0
   398  001D5E  00                 	db	0
   399  001D5F  00                 	db	0
   400  001D60  00                 	db	0
   401  001D61  00                 	db	0
   402  001D62  00                 	db	0
   403  001D63  00                 	db	0
   404  001D64  00                 	db	0
   405  001D65  00                 	db	0
   406  001D66  00                 	db	0
   407  001D67  00                 	db	0
   408  001D68  00                 	db	0
   409  001D69  00                 	db	0
   410  001D6A  00                 	db	0
   411  001D6B  00                 	db	0
   412  001D6C  00                 	db	0
   413  001D6D  00                 	db	0
   414  001D6E  00                 	db	0
   415  001D6F  00                 	db	0
   416  001D70  00                 	db	0
   417  001D71  00                 	db	0
   418  001D72  00                 	db	0
   419  001D73  00                 	db	0
   420  001D74  00                 	db	0
   421  001D75  00                 	db	0
   422  001D76  00                 	db	0
   423  001D77  00                 	db	0
   424  001D78  00                 	db	0
   425  001D79  00                 	db	0
   426  001D7A  00                 	db	0
   427  001D7B  00                 	db	0
   428  001D7C  00                 	db	0
   429  001D7D  00                 	db	0
   430  001D7E  00                 	db	0
   431  001D7F  00                 	db	0
   432  001D80  00                 	db	0
   433  001D81  00                 	db	0
   434  001D82  00                 	db	0
   435  001D83  00                 	db	0
   436  001D84  00                 	db	0
   437  001D85  00                 	db	0
   438  001D86  00                 	db	0
   439  001D87  00                 	db	0
   440  001D88  00                 	db	0
   441  001D89  00                 	db	0
   442  001D8A  00                 	db	0
   443  001D8B  00                 	db	0
   444  001D8C  00                 	db	0
   445  001D8D  00                 	db	0
   446  001D8E  00                 	db	0
   447  001D8F  00                 	db	0
   448  001D90  00                 	db	0
   449  001D91  00                 	db	0
   450  001D92  00                 	db	0
   451  001D93  00                 	db	0
   452  001D94  00                 	db	0
   453  001D95  00                 	db	0
   454  001D96  00                 	db	0
   455  001D97  00                 	db	0
   456  001D98  00                 	db	0
   457  001D99  00                 	db	0
   458  001D9A  00                 	db	0
   459  001D9B  00                 	db	0
   460  001D9C  00                 	db	0
   461  001D9D  00                 	db	0
   462  001D9E  00                 	db	0
   463  001D9F  00                 	db	0
   464  001DA0  00                 	db	0
   465  001DA1  00                 	db	0
   466  001DA2  00                 	db	0
   467  001DA3  00                 	db	0
   468  001DA4  00                 	db	0
   469  001DA5  00                 	db	0
   470  001DA6  00                 	db	0
   471  001DA7  00                 	db	0
   472  001DA8  00                 	db	0
   473  001DA9  00                 	db	0
   474  001DAA  00                 	db	0
   475  001DAB  00                 	db	0
   476  001DAC  00                 	db	0
   477  001DAD  00                 	db	0
   478  001DAE  00                 	db	0
   479  001DAF  00                 	db	0
   480  001DB0  00                 	db	0
   481  001DB1  00                 	db	0
   482  001DB2  00                 	db	0
   483  001DB3  00                 	db	0
   484  001DB4  00                 	db	0
   485  001DB5  00                 	db	0
   486  001DB6  00                 	db	0
   487  001DB7  00                 	db	0
   488  001DB8  00                 	db	0
   489  001DB9  00                 	db	0
   490  001DBA  00                 	db	0
   491  001DBB  00                 	db	0
   492  001DBC  4D                 	db	77
   493  001DBD  69                 	db	105
   494  001DBE  63                 	db	99
   495  001DBF  72                 	db	114
   496  001DC0  6F                 	db	111
   497  001DC1  63                 	db	99
   498  001DC2  6F                 	db	111
   499  001DC3  6E                 	db	110
   500  001DC4  74                 	db	116
   501  001DC5  72                 	db	114
   502  001DC6  6F                 	db	111
   503  001DC7  6C                 	db	108
   504  001DC8  3A                 	db	58
   505  001DC9  20                 	db	32
   506  001DCA  20                 	db	32
   507  001DCB  00                 	db	0
   508  001DCC  00                 	db	0
   509  001DCD  00                 	db	0
   510  001DCE  43                 	db	67
   511  001DCF  6C                 	db	108
   512  001DD0  65                 	db	101
   513  001DD1  6D                 	db	109
   514  001DD2  65                 	db	101
   515  001DD3  6E                 	db	110
   516  001DD4  74                 	db	116
   517  001DD5  20                 	db	32
   518  001DD6  57                 	db	87
   519  001DD7  61                 	db	97
   520  001DD8  6E                 	db	110
   521  001DD9  20                 	db	32
   522  001DDA  20                 	db	32
   523  001DDB  20                 	db	32
   524  001DDC  20                 	db	32
   525  001DDD  00                 	db	0
   526  001DDE  00                 	db	0
   527  001DDF  00                 	db	0
   528  001DE0  43                 	db	67
   529  001DE1  69                 	db	105
   530  001DE2  72                 	db	114
   531  001DE3  63                 	db	99
   532  001DE4  75                 	db	117
   533  001DE5  69                 	db	105
   534  001DE6  74                 	db	116
   535  001DE7  73                 	db	115
   536  001DE8  3A                 	db	58
   537  001DE9  20                 	db	32
   538  001DEA  20                 	db	32
   539  001DEB  20                 	db	32
   540  001DEC  20                 	db	32
   541  001DED  20                 	db	32
   542  001DEE  20                 	db	32
   543  001DEF  00                 	db	0
   544  001DF0  00                 	db	0
   545  001DF1  00                 	db	0
   546  001DF2  4A                 	db	74
   547  001DF3  75                 	db	117
   548  001DF4  73                 	db	115
   549  001DF5  74                 	db	116
   550  001DF6  69                 	db	105
   551  001DF7  6E                 	db	110
   552  001DF8  20                 	db	32
   553  001DF9  51                 	db	81
   554  001DFA  75                 	db	117
   555  001DFB  20                 	db	32
   556  001DFC  20                 	db	32
   557  001DFD  20                 	db	32
   558  001DFE  20                 	db	32
   559  001DFF  20                 	db	32
   560  001E00  20                 	db	32
   561  001E01  00                 	db	0
   562  001E02  00                 	db	0
   563  001E03  00                 	db	0
   564  001E04  45                 	db	69
   565  001E05  6C                 	db	108
   566  001E06  65                 	db	101
   567  001E07  63                 	db	99
   568  001E08  74                 	db	116
   569  001E09  72                 	db	114
   570  001E0A  6F                 	db	111
   571  001E0B  6D                 	db	109
   572  001E0C  65                 	db	101
   573  001E0D  63                 	db	99
   574  001E0E  68                 	db	104
   575  001E0F  3A                 	db	58
   576  001E10  20                 	db	32
   577  001E11  20                 	db	32
   578  001E12  20                 	db	32
   579  001E13  00                 	db	0
   580  001E14  00                 	db	0
   581  001E15  00                 	db	0
   582  001E16  50                 	db	80
   583  001E17  65                 	db	101
   584  001E18  74                 	db	116
   585  001E19  65                 	db	101
   586  001E1A  72                 	db	114
   587  001E1B  20                 	db	32
   588  001E1C  46                 	db	70
   589  001E1D  65                 	db	101
   590  001E1E  6E                 	db	110
   591  001E1F  67                 	db	103
   592  001E20  20                 	db	32
   593  001E21  20                 	db	32
   594  001E22  20                 	db	32
   595  001E23  20                 	db	32
   596  001E24  20                 	db	32
   597  001E25  00                 	db	0
   598  001E26  00                 	db	0
   599  001E27  00                 	db	0
   600  001E28  00                 	db	0
   601  001E29  00                 	db	0
   602  001E2A  00                 	db	0
   603  001E2B  00                 	db	0
   604  001E2C  00                 	db	0
   605  001E2D  00                 	db	0
   606  001E2E  00                 	db	0
   607  001E2F  00                 	db	0
   608  001E30  00                 	db	0
   609  001E31  00                 	db	0
   610  001E32  00                 	db	0
   611  001E33  00                 	db	0
   612  001E34  00                 	db	0
   613  001E35  00                 	db	0
   614  001E36  00                 	db	0
   615  001E37  00                 	db	0
   616  001E38  00                 	db	0
   617  001E39  00                 	db	0
   618  001E3A  00                 	db	0
   619  001E3B  00                 	db	0
   620  001E3C  00                 	db	0
   621  001E3D  00                 	db	0
   622  001E3E  00                 	db	0
   623  001E3F  00                 	db	0
   624  001E40  00                 	db	0
   625  001E41  00                 	db	0
   626  001E42  00                 	db	0
   627  001E43  00                 	db	0
   628  001E44  00                 	db	0
   629  001E45  00                 	db	0
   630  001E46  00                 	db	0
   631  001E47  00                 	db	0
   632  001E48  00                 	db	0
   633  001E49  00                 	db	0
   634  001E4A  00                 	db	0
   635  001E4B  00                 	db	0
   636  001E4C  00                 	db	0
   637  001E4D  00                 	db	0
   638  001E4E  00                 	db	0
   639  001E4F  00                 	db	0
   640  001E50  00                 	db	0
   641  001E51  00                 	db	0
   642  001E52  00                 	db	0
   643  001E53  00                 	db	0
   644  001E54  00                 	db	0
   645  001E55  00                 	db	0
   646  001E56  00                 	db	0
   647  001E57  00                 	db	0
   648  001E58  00                 	db	0
   649  001E59  00                 	db	0
   650  001E5A  00                 	db	0
   651  001E5B  00                 	db	0
   652  001E5C  00                 	db	0
   653  001E5D  00                 	db	0
   654  001E5E  00                 	db	0
   655  001E5F  00                 	db	0
   656  001E60  00                 	db	0
   657  001E61  00                 	db	0
   658  001E62  00                 	db	0
   659  001E63  00                 	db	0
   660  001E64  00                 	db	0
   661  001E65  00                 	db	0
   662  001E66  00                 	db	0
   663  001E67  00                 	db	0
   664  001E68  00                 	db	0
   665  001E69  00                 	db	0
   666  001E6A  00                 	db	0
   667  001E6B  00                 	db	0
   668  001E6C  00                 	db	0
   669  001E6D  00                 	db	0
   670  001E6E  00                 	db	0
   671  001E6F  00                 	db	0
   672  001E70  00                 	db	0
   673  001E71  00                 	db	0
   674  001E72  00                 	db	0
   675  001E73  00                 	db	0
   676  001E74  00                 	db	0
   677  001E75  00                 	db	0
   678  001E76  00                 	db	0
   679  001E77  00                 	db	0
   680  001E78  00                 	db	0
   681  001E79  00                 	db	0
   682  001E7A  00                 	db	0
   683  001E7B  00                 	db	0
   684  001E7C  00                 	db	0
   685  001E7D  00                 	db	0
   686  001E7E  00                 	db	0
   687  001E7F  00                 	db	0
   688  001E80  00                 	db	0
   689  001E81  00                 	db	0
   690  001E82  00                 	db	0
   691  001E83  00                 	db	0
   692  001E84  00                 	db	0
   693  001E85  00                 	db	0
   694  001E86  00                 	db	0
   695  001E87  00                 	db	0
   696  001E88  00                 	db	0
   697  001E89  00                 	db	0
   698  001E8A  00                 	db	0
   699  001E8B  00                 	db	0
   700  001E8C  00                 	db	0
   701  001E8D  00                 	db	0
   702  001E8E  00                 	db	0
   703  001E8F  00                 	db	0
   704  001E90  00                 	db	0
   705  001E91  00                 	db	0
   706  001E92  00                 	db	0
   707  001E93  00                 	db	0
   708  001E94  00                 	db	0
   709  001E95  00                 	db	0
   710  001E96  00                 	db	0
   711  001E97  00                 	db	0
   712  001E98  00                 	db	0
   713  001E99  00                 	db	0
   714  001E9A  00                 	db	0
   715  001E9B  00                 	db	0
   716  001E9C  00                 	db	0
   717  001E9D  00                 	db	0
   718  001E9E  00                 	db	0
   719  001E9F  00                 	db	0
   720  001EA0  00                 	db	0
   721  001EA1  00                 	db	0
   722  001EA2  00                 	db	0
   723  001EA3  00                 	db	0
   724  001EA4  00                 	db	0
   725  001EA5  00                 	db	0
   726  001EA6  00                 	db	0
   727  001EA7  00                 	db	0
   728  001EA8  00                 	db	0
   729  001EA9  00                 	db	0
   730  001EAA  00                 	db	0
   731  001EAB  00                 	db	0
   732  001EAC  00                 	db	0
   733  001EAD  00                 	db	0
   734  001EAE  00                 	db	0
   735  001EAF  00                 	db	0
   736  001EB0  00                 	db	0
   737  001EB1  00                 	db	0
   738  001EB2  00                 	db	0
   739  001EB3  00                 	db	0
   740  001EB4  00                 	db	0
   741  001EB5  00                 	db	0
   742  001EB6  00                 	db	0
   743  001EB7  00                 	db	0
   744  001EB8  00                 	db	0
   745  001EB9  00                 	db	0
   746  001EBA  00                 	db	0
   747  001EBB  00                 	db	0
   748  001EBC  00                 	db	0
   749  001EBD  00                 	db	0
   750  001EBE  00                 	db	0
   751  001EBF  00                 	db	0
   752  001EC0  00                 	db	0
   753  001EC1  00                 	db	0
   754  001EC2  00                 	db	0
   755  001EC3  00                 	db	0
   756  001EC4  00                 	db	0
   757  001EC5  00                 	db	0
   758  001EC6  00                 	db	0
   759  001EC7  00                 	db	0
   760  001EC8  00                 	db	0
   761  001EC9  00                 	db	0
   762  001ECA  00                 	db	0
   763  001ECB  00                 	db	0
   764  001ECC  00                 	db	0
   765  001ECD  00                 	db	0
   766  001ECE  00                 	db	0
   767  001ECF  00                 	db	0
   768  001ED0  00                 	db	0
   769  001ED1  00                 	db	0
   770  001ED2  00                 	db	0
   771  001ED3  00                 	db	0
   772  001ED4  00                 	db	0
   773  001ED5  00                 	db	0
   774  001ED6  00                 	db	0
   775  001ED7  00                 	db	0
   776  001ED8  00                 	db	0
   777  001ED9  00                 	db	0
   778  001EDA  00                 	db	0
   779  001EDB  00                 	db	0
   780  001EDC  00                 	db	0
   781  001EDD  00                 	db	0
   782  001EDE  00                 	db	0
   783  001EDF  00                 	db	0
   784  001EE0  00                 	db	0
   785  001EE1  00                 	db	0
   786  001EE2  00                 	db	0
   787  001EE3  00                 	db	0
   788  001EE4  00                 	db	0
   789  001EE5  00                 	db	0
   790  001EE6  00                 	db	0
   791  001EE7  00                 	db	0
   792  001EE8  00                 	db	0
   793  001EE9  00                 	db	0
   794  001EEA  00                 	db	0
   795  001EEB  00                 	db	0
   796  001EEC  00                 	db	0
   797  001EED  00                 	db	0
   798  001EEE  00                 	db	0
   799  001EEF  00                 	db	0
   800  001EF0  00                 	db	0
   801  001EF1  00                 	db	0
   802  001EF2  00                 	db	0
   803  001EF3  00                 	db	0
   804  001EF4  00                 	db	0
   805  001EF5  00                 	db	0
   806  001EF6  00                 	db	0
   807  001EF7  00                 	db	0
   808  001EF8  00                 	db	0
   809  001EF9  00                 	db	0
   810  001EFA  00                 	db	0
   811  001EFB  00                 	db	0
   812  001EFC  00                 	db	0
   813  001EFD  00                 	db	0
   814  001EFE  00                 	db	0
   815  001EFF  00                 	db	0
   816  001F00  00                 	db	0
   817  001F01  00                 	db	0
   818  001F02  00                 	db	0
   819  001F03  00                 	db	0
   820  001F04  00                 	db	0
   821  001F05  00                 	db	0
   822  001F06  00                 	db	0
   823  001F07  00                 	db	0
   824  001F08  00                 	db	0
   825  001F09  00                 	db	0
   826  001F0A  00                 	db	0
   827  001F0B  00                 	db	0
   828  001F0C  00                 	db	0
   829  001F0D  00                 	db	0
   830  001F0E  00                 	db	0
   831  001F0F  00                 	db	0
   832  001F10  00                 	db	0
   833  001F11  00                 	db	0
   834  001F12  00                 	db	0
   835  001F13  00                 	db	0
   836  001F14  00                 	db	0
   837  001F15  00                 	db	0
   838  001F16  00                 	db	0
   839  001F17  00                 	db	0
   840  001F18  00                 	db	0
   841  001F19  00                 	db	0
   842  001F1A  00                 	db	0
   843  001F1B  00                 	db	0
   844  001F1C  00                 	db	0
   845  001F1D  00                 	db	0
   846  001F1E  00                 	db	0
   847  001F1F  00                 	db	0
   848  001F20  00                 	db	0
   849  001F21  00                 	db	0
   850  001F22  00                 	db	0
   851  001F23  00                 	db	0
   852                           
   853                           	psect	idataBANK0
   854  003120                     __pidataBANK0:
   855                           	opt stack 0
   856                           
   857                           ;initializer for _IR1_PIN
   858  003120  01                 	db	1
   859                           
   860                           ;initializer for _IR2_PIN
   861  003121  02                 	db	2
   862                           
   863                           ;initializer for _PROX2_PIN
   864  003122  01                 	db	1
   865                           
   866                           ;initializer for _nstate
   867  003123  72                 	db	114
   868                           
   869                           ;initializer for _state
   870  003124  72                 	db	114
   871                           
   872                           ;initializer for _creditIndex
   873  003125  0001               	dw	1
   874                           
   875                           ;initializer for _creditSize
   876  003127  0005               	dw	5
   877                           
   878                           ;initializer for _endIndex
   879  003129  0001               	dw	1
   880                           
   881                           ;initializer for _endSize
   882  00312B  0003               	dw	3
   883                           
   884                           ;initializer for _events
   885  00312D  0002               	dw	2
   886                           
   887                           ;initializer for _logIndex
   888  00312F  0001               	dw	1
   889                           
   890                           ;initializer for _menuIndex
   891  003131  0001               	dw	1
   892                           
   893                           ;initializer for _menuSize
   894  003133  0003               	dw	3
   895                           
   896                           	psect	mediumconst
   897  00FED4                     __pmediumconst:
   898                           	opt stack 0
   899  00FED4  00                 	db	0
   900  00FED5                     _keys:
   901                           	opt stack 0
   902  00FED5  31                 	db	49
   903  00FED6  32                 	db	50
   904  00FED7  33                 	db	51
   905  00FED8  41                 	db	65
   906  00FED9  34                 	db	52
   907  00FEDA  35                 	db	53
   908  00FEDB  36                 	db	54
   909  00FEDC  42                 	db	66
   910  00FEDD  37                 	db	55
   911  00FEDE  38                 	db	56
   912  00FEDF  39                 	db	57
   913  00FEE0  43                 	db	67
   914  00FEE1  2A                 	db	42
   915  00FEE2  30                 	db	48
   916  00FEE3  23                 	db	35
   917  00FEE4  44                 	db	68
   918  00FEE5  00                 	db	0
   919  00FEE6                     __end_of_keys:
   920                           	opt stack 0
   921  00FEE6                     _dpowers:
   922                           	opt stack 0
   923  00FEE6  0001               	dw	1
   924  00FEE8  000A               	dw	10
   925  00FEEA  0064               	dw	100
   926  00FEEC  03E8               	dw	1000
   927  00FEEE  2710               	dw	10000
   928  00FEF0                     __end_of_dpowers:
   929                           	opt stack 0
   930  00FEF0                     _hexpowers:
   931                           	opt stack 0
   932  00FEF0  0001               	dw	1
   933  00FEF2  0010               	dw	16
   934  00FEF4  0100               	dw	256
   935  00FEF6  1000               	dw	4096
   936  00FEF8                     __end_of_hexpowers:
   937                           	opt stack 0
   938  00FEF8                     _manualDateTime:
   939                           	opt stack 0
   940  00FEF8  00                 	db	0
   941  00FEF9  00                 	db	0
   942  00FEFA  00                 	db	0
   943  00FEFB  00                 	db	0
   944  00FEFC  01                 	db	1
   945  00FEFD  00                 	db	0
   946  00FEFE  17                 	db	23
   947  00FEFF                     __end_of_manualDateTime:
   948                           	opt stack 0
   949  0000                     _ADCON0	set	4034
   950  0000                     _ADCON0bits	set	4034
   951  0000                     _ADCON1	set	4033
   952  0000                     _ADRESL	set	4035
   953  0000                     _INTCONbits	set	4082
   954  0000                     _LATB	set	3978
   955  0000                     _LATC	set	3979
   956  0000                     _LATD	set	3980
   957  0000                     _LATDbits	set	3980
   958  0000                     _PORTB	set	3969
   959  0000                     _PORTE	set	3972
   960  0000                     _SSPADD	set	4040
   961  0000                     _SSPBUF	set	4041
   962  0000                     _SSPCON1	set	4038
   963  0000                     _SSPCON2	set	4037
   964  0000                     _SSPSTAT	set	4039
   965  0000                     _TRISB	set	3987
   966  0000                     _TRISC	set	3988
   967  0000                     _TRISD	set	3989
   968  0000                     _TRISE	set	3990
   969  0000                     _ADRESH	set	4036
   970  0000                     _ACKDT	set	32301
   971  0000                     _ACKEN	set	32300
   972  0000                     _ADON	set	32272
   973  0000                     _INT1IE	set	32643
   974  0000                     _INT1IF	set	32640
   975  0000                     _PEN	set	32298
   976  0000                     _RCEN	set	32299
   977  0000                     _RSEN	set	32297
   978  0000                     _SEN	set	32296
   979  0000                     _TRISC3	set	31907
   980  0000                     _TRISC4	set	31908
   981  0000                     _nRBPU	set	32655
   982  00FEFF                     STR_3:
   983  00FEFF  25                 	db	37
   984  00FF00  64                 	db	100	;'d'
   985  00FF01  3A                 	db	58	;':'
   986  00FF02  25                 	db	37
   987  00FF03  30                 	db	48	;'0'
   988  00FF04  32                 	db	50	;'2'
   989  00FF05  64                 	db	100	;'d'
   990  00FF06  20                 	db	32
   991  00FF07  65                 	db	101	;'e'
   992  00FF08  6E                 	db	110	;'n'
   993  00FF09  3A                 	db	58	;':'
   994  00FF0A  25                 	db	37
   995  00FF0B  30                 	db	48	;'0'
   996  00FF0C  32                 	db	50	;'2'
   997  00FF0D  64                 	db	100	;'d'
   998  00FF0E  20                 	db	32
   999  00FF0F  65                 	db	101	;'e'
  1000  00FF10  63                 	db	99	;'c'
  1001  00FF11  3A                 	db	58	;':'
  1002  00FF12  25                 	db	37
  1003  00FF13  30                 	db	48	;'0'
  1004  00FF14  32                 	db	50	;'2'
  1005  00FF15  64                 	db	100	;'d'
  1006  00FF16  20                 	db	32
  1007  00FF17  00                 	db	0
  1008  00FF18                     STR_1:
  1009  00FF18  25                 	db	37
  1010  00FF19  30                 	db	48	;'0'
  1011  00FF1A  32                 	db	50	;'2'
  1012  00FF1B  78                 	db	120	;'x'
  1013  00FF1C  2F                 	db	47
  1014  00FF1D  25                 	db	37
  1015  00FF1E  30                 	db	48	;'0'
  1016  00FF1F  32                 	db	50	;'2'
  1017  00FF20  78                 	db	120	;'x'
  1018  00FF21  2F                 	db	47
  1019  00FF22  25                 	db	37
  1020  00FF23  30                 	db	48	;'0'
  1021  00FF24  32                 	db	50	;'2'
  1022  00FF25  78                 	db	120	;'x'
  1023  00FF26  20                 	db	32
  1024  00FF27  50                 	db	80	;'P'
  1025  00FF28  55                 	db	85	;'U'
  1026  00FF29  53                 	db	83	;'S'
  1027  00FF2A  48                 	db	72	;'H'
  1028  00FF2B  20                 	db	32
  1029  00FF2C  54                 	db	84	;'T'
  1030  00FF2D  4F                 	db	79	;'O'
  1031  00FF2E  00                 	db	0
  1032  00FF2F                     STR_2:
  1033  00FF2F  25                 	db	37
  1034  00FF30  30                 	db	48	;'0'
  1035  00FF31  32                 	db	50	;'2'
  1036  00FF32  78                 	db	120	;'x'
  1037  00FF33  3A                 	db	58	;':'
  1038  00FF34  25                 	db	37
  1039  00FF35  30                 	db	48	;'0'
  1040  00FF36  32                 	db	50	;'2'
  1041  00FF37  78                 	db	120	;'x'
  1042  00FF38  3A                 	db	58	;':'
  1043  00FF39  25                 	db	37
  1044  00FF3A  30                 	db	48	;'0'
  1045  00FF3B  32                 	db	50	;'2'
  1046  00FF3C  78                 	db	120	;'x'
  1047  00FF3D  20                 	db	32
  1048  00FF3E  20                 	db	32
  1049  00FF3F  20                 	db	32
  1050  00FF40  53                 	db	83	;'S'
  1051  00FF41  54                 	db	84	;'T'
  1052  00FF42  41                 	db	65	;'A'
  1053  00FF43  52                 	db	82	;'R'
  1054  00FF44  54                 	db	84	;'T'
  1055  00FF45  00                 	db	0
  1056  00FF46                     STR_8:
  1057  00FF46  72                 	db	114	;'r'
  1058  00FF47  75                 	db	117	;'u'
  1059  00FF48  6E                 	db	110	;'n'
  1060  00FF49  20                 	db	32
  1061  00FF4A  74                 	db	116	;'t'
  1062  00FF4B  69                 	db	105	;'i'
  1063  00FF4C  6D                 	db	109	;'m'
  1064  00FF4D  65                 	db	101	;'e'
  1065  00FF4E  3A                 	db	58	;':'
  1066  00FF4F  20                 	db	32
  1067  00FF50  25                 	db	37
  1068  00FF51  30                 	db	48	;'0'
  1069  00FF52  31                 	db	49	;'1'
  1070  00FF53  64                 	db	100	;'d'
  1071  00FF54  3A                 	db	58	;':'
  1072  00FF55  25                 	db	37
  1073  00FF56  30                 	db	48	;'0'
  1074  00FF57  32                 	db	50	;'2'
  1075  00FF58  64                 	db	100	;'d'
  1076  00FF59  20                 	db	32
  1077  00FF5A  00                 	db	0
  1078  00FF5B  00                 	db	0
  1079  00FF5C                     STR_9:
  1080  00FF5C  65                 	db	101	;'e'
  1081  00FF5D  6E                 	db	110	;'n'
  1082  00FF5E  3A                 	db	58	;':'
  1083  00FF5F  25                 	db	37
  1084  00FF60  30                 	db	48	;'0'
  1085  00FF61  32                 	db	50	;'2'
  1086  00FF62  64                 	db	100	;'d'
  1087  00FF63  20                 	db	32
  1088  00FF64  65                 	db	101	;'e'
  1089  00FF65  63                 	db	99	;'c'
  1090  00FF66  3A                 	db	58	;':'
  1091  00FF67  25                 	db	37
  1092  00FF68  30                 	db	48	;'0'
  1093  00FF69  32                 	db	50	;'2'
  1094  00FF6A  64                 	db	100	;'d'
  1095  00FF6B  20                 	db	32
  1096  00FF6C  20                 	db	32
  1097  00FF6D  20                 	db	32
  1098  00FF6E  20                 	db	32
  1099  00FF6F  00                 	db	0
  1100  00FF70                     STR_10:
  1101  00FF70  79                 	db	121	;'y'
  1102  00FF71  6E                 	db	110	;'n'
  1103  00FF72  3A                 	db	58	;':'
  1104  00FF73  25                 	db	37
  1105  00FF74  30                 	db	48	;'0'
  1106  00FF75  32                 	db	50	;'2'
  1107  00FF76  64                 	db	100	;'d'
  1108  00FF77  20                 	db	32
  1109  00FF78  79                 	db	121	;'y'
  1110  00FF79  63                 	db	99	;'c'
  1111  00FF7A  3A                 	db	58	;':'
  1112  00FF7B  25                 	db	37
  1113  00FF7C  30                 	db	48	;'0'
  1114  00FF7D  32                 	db	50	;'2'
  1115  00FF7E  64                 	db	100	;'d'
  1116  00FF7F  20                 	db	32
  1117  00FF80  20                 	db	32
  1118  00FF81  20                 	db	32
  1119  00FF82  20                 	db	32
  1120  00FF83  00                 	db	0
  1121  00FF84                     STR_7:
  1122  00FF84  62                 	db	98	;'b'
  1123  00FF85  6F                 	db	111	;'o'
  1124  00FF86  74                 	db	116	;'t'
  1125  00FF87  74                 	db	116	;'t'
  1126  00FF88  6C                 	db	108	;'l'
  1127  00FF89  65                 	db	101	;'e'
  1128  00FF8A  73                 	db	115	;'s'
  1129  00FF8B  3A                 	db	58	;':'
  1130  00FF8C  20                 	db	32
  1131  00FF8D  25                 	db	37
  1132  00FF8E  30                 	db	48	;'0'
  1133  00FF8F  32                 	db	50	;'2'
  1134  00FF90  64                 	db	100	;'d'
  1135  00FF91  20                 	db	32
  1136  00FF92  20                 	db	32
  1137  00FF93  20                 	db	32
  1138  00FF94  20                 	db	32
  1139  00FF95  00                 	db	0
  1140  00FF96  00                 	db	0
  1141  00FF97                     STR_19:
  1142  00FF97  30                 	db	48	;'0'
  1143  00FF98  31                 	db	49	;'1'
  1144  00FF99  32                 	db	50	;'2'
  1145  00FF9A  33                 	db	51	;'3'
  1146  00FF9B  34                 	db	52	;'4'
  1147  00FF9C  35                 	db	53	;'5'
  1148  00FF9D  36                 	db	54	;'6'
  1149  00FF9E  37                 	db	55	;'7'
  1150  00FF9F  38                 	db	56	;'8'
  1151  00FFA0  39                 	db	57	;'9'
  1152  00FFA1  61                 	db	97	;'a'
  1153  00FFA2  62                 	db	98	;'b'
  1154  00FFA3  63                 	db	99	;'c'
  1155  00FFA4  64                 	db	100	;'d'
  1156  00FFA5  65                 	db	101	;'e'
  1157  00FFA6  66                 	db	102	;'f'
  1158  00FFA7  00                 	db	0
  1159  00FFA8                     STR_4:
  1160  00FFA8  79                 	db	121	;'y'
  1161  00FFA9  6E                 	db	110	;'n'
  1162  00FFAA  3A                 	db	58	;':'
  1163  00FFAB  25                 	db	37
  1164  00FFAC  30                 	db	48	;'0'
  1165  00FFAD  32                 	db	50	;'2'
  1166  00FFAE  64                 	db	100	;'d'
  1167  00FFAF  20                 	db	32
  1168  00FFB0  79                 	db	121	;'y'
  1169  00FFB1  63                 	db	99	;'c'
  1170  00FFB2  3A                 	db	58	;':'
  1171  00FFB3  25                 	db	37
  1172  00FFB4  30                 	db	48	;'0'
  1173  00FFB5  32                 	db	50	;'2'
  1174  00FFB6  64                 	db	100	;'d'
  1175  00FFB7  00                 	db	0
  1176  00FFB8                     STR_6:
  1177  00FFB8  45                 	db	69	;'E'
  1178  00FFB9  4D                 	db	77	;'M'
  1179  00FFBA  45                 	db	69	;'E'
  1180  00FFBB  52                 	db	82	;'R'
  1181  00FFBC  47                 	db	71	;'G'
  1182  00FFBD  45                 	db	69	;'E'
  1183  00FFBE  4E                 	db	78	;'N'
  1184  00FFBF  43                 	db	67	;'C'
  1185  00FFC0  59                 	db	89	;'Y'
  1186  00FFC1  20                 	db	32
  1187  00FFC2  53                 	db	83	;'S'
  1188  00FFC3  54                 	db	84	;'T'
  1189  00FFC4  4F                 	db	79	;'O'
  1190  00FFC5  50                 	db	80	;'P'
  1191  00FFC6  00                 	db	0
  1192  00FFC7                     STR_16:
  1193  00FFC7  6D                 	db	109	;'m'
  1194  00FFC8  65                 	db	101	;'e'
  1195  00FFC9  6E                 	db	110	;'n'
  1196  00FFCA  75                 	db	117	;'u'
  1197  00FFCB  20                 	db	32
  1198  00FFCC  73                 	db	115	;'s'
  1199  00FFCD  65                 	db	101	;'e'
  1200  00FFCE  6C                 	db	108	;'l'
  1201  00FFCF  65                 	db	101	;'e'
  1202  00FFD0  63                 	db	99	;'c'
  1203  00FFD1  74                 	db	116	;'t'
  1204  00FFD2  69                 	db	105	;'i'
  1205  00FFD3  6F                 	db	111	;'o'
  1206  00FFD4  6E                 	db	110	;'n'
  1207  00FFD5  00                 	db	0
  1208  00FFD6                     STR_17:
  1209  00FFD6  6E                 	db	110	;'n'
  1210  00FFD7  6F                 	db	111	;'o'
  1211  00FFD8  20                 	db	32
  1212  00FFD9  70                 	db	112	;'p'
  1213  00FFDA  61                 	db	97	;'a'
  1214  00FFDB  67                 	db	103	;'g'
  1215  00FFDC  65                 	db	101	;'e'
  1216  00FFDD  20                 	db	32
  1217  00FFDE  66                 	db	102	;'f'
  1218  00FFDF  6F                 	db	111	;'o'
  1219  00FFE0  75                 	db	117	;'u'
  1220  00FFE1  6E                 	db	110	;'n'
  1221  00FFE2  64                 	db	100	;'d'
  1222  00FFE3  00                 	db	0
  1223  00FFE4                     STR_15:
  1224  00FFE4  69                 	db	105	;'i'
  1225  00FFE5  6E                 	db	110	;'n'
  1226  00FFE6  76                 	db	118	;'v'
  1227  00FFE7  61                 	db	97	;'a'
  1228  00FFE8  6C                 	db	108	;'l'
  1229  00FFE9  69                 	db	105	;'i'
  1230  00FFEA  64                 	db	100	;'d'
  1231  00FFEB  00                 	db	0
  1232  00FFEC                     STR_18:
  1233  00FFEC  28                 	db	40
  1234  00FFED  6E                 	db	110	;'n'
  1235  00FFEE  75                 	db	117	;'u'
  1236  00FFEF  6C                 	db	108	;'l'
  1237  00FFF0  6C                 	db	108	;'l'
  1238  00FFF1  29                 	db	41
  1239  00FFF2  00                 	db	0
  1240  00FFF3                     STR_5:
  1241  00FFF3  45                 	db	69	;'E'
  1242  00FFF4  52                 	db	82	;'R'
  1243  00FFF5  52                 	db	82	;'R'
  1244  00FFF6  4F                 	db	79	;'O'
  1245  00FFF7  52                 	db	82	;'R'
  1246  00FFF8  00                 	db	0
  1247  00FFF9                     STR_11:
  1248  00FFF9  25                 	db	37
  1249  00FFFA  73                 	db	115	;'s'
  1250  00FFFB  25                 	db	37
  1251  00FFFC  63                 	db	99	;'c'
  1252  00FFFD  00                 	db	0
  1253  0000                     
  1254                           ; #config settings
  1255  00FFFE  00                 	db	0	; dummy byte at the end
  1256  0000                     
  1257                           	psect	cinit
  1258  002A0C                     __pcinit:
  1259                           	opt stack 0
  1260  002A0C                     start_initialization:
  1261                           	opt stack 0
  1262  002A0C                     __initialization:
  1263                           	opt stack 0
  1264                           
  1265                           ; Initialize objects allocated to BIGRAM (720 bytes)
  1266                           ; load TBLPTR registers with __pidataBIGRAM
  1267  002A0C  0E54               	movlw	low __pidataBIGRAM
  1268  002A0E  6EF6               	movwf	tblptrl,c
  1269  002A10  0E1C               	movlw	high __pidataBIGRAM
  1270  002A12  6EF7               	movwf	tblptrh,c
  1271  002A14  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
  1272  002A16  6EF8               	movwf	tblptru,c
  1273  002A18  EE01  F078         	lfsr	0,__pdataBIGRAM
  1274  002A1C  EE12 F0D0          	lfsr	1,720
  1275  002A20                     copy_data0:
  1276  002A20  0009               	tblrd		*+
  1277  002A22  CFF5 FFEE          	movff	tablat,postinc0
  1278  002A26  50E5               	movf	postdec1,w,c
  1279  002A28  50E1               	movf	fsr1l,w,c
  1280  002A2A  E1FA               	bnz	copy_data0
  1281  002A2C  50E2               	movf	fsr1h,w,c
  1282  002A2E  E1F8               	bnz	copy_data0
  1283                           
  1284                           ; Initialize objects allocated to BANK0 (21 bytes)
  1285                           ; load TBLPTR registers with __pidataBANK0
  1286  002A30  0E20               	movlw	low __pidataBANK0
  1287  002A32  6EF6               	movwf	tblptrl,c
  1288  002A34  0E31               	movlw	high __pidataBANK0
  1289  002A36  6EF7               	movwf	tblptrh,c
  1290  002A38  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1291  002A3A  6EF8               	movwf	tblptru,c
  1292  002A3C  EE00  F0E5         	lfsr	0,__pdataBANK0
  1293  002A40  EE10 F015          	lfsr	1,21
  1294  002A44                     copy_data1:
  1295  002A44  0009               	tblrd		*+
  1296  002A46  CFF5 FFEE          	movff	tablat,postinc0
  1297  002A4A  50E5               	movf	postdec1,w,c
  1298  002A4C  50E1               	movf	fsr1l,w,c
  1299  002A4E  E1FA               	bnz	copy_data1
  1300                           
  1301                           ; Initialize objects allocated to COMRAM (13 bytes)
  1302                           ; load TBLPTR registers with __pidataCOMRAM
  1303  002A50  0E5A               	movlw	low __pidataCOMRAM
  1304  002A52  6EF6               	movwf	tblptrl,c
  1305  002A54  0E31               	movlw	high __pidataCOMRAM
  1306  002A56  6EF7               	movwf	tblptrh,c
  1307  002A58  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1308  002A5A  6EF8               	movwf	tblptru,c
  1309  002A5C  EE00  F06A         	lfsr	0,__pdataCOMRAM
  1310  002A60  EE10 F00D          	lfsr	1,13
  1311  002A64                     copy_data2:
  1312  002A64  0009               	tblrd		*+
  1313  002A66  CFF5 FFEE          	movff	tablat,postinc0
  1314  002A6A  50E5               	movf	postdec1,w,c
  1315  002A6C  50E1               	movf	fsr1l,w,c
  1316  002A6E  E1FA               	bnz	copy_data2
  1317                           
  1318                           ; Clear objects allocated to BANK1 (110 bytes)
  1319  002A70  EE01  F000         	lfsr	0,__pbssBANK1
  1320  002A74  0E6E               	movlw	110
  1321  002A76                     clear_0:
  1322  002A76  6AEE               	clrf	postinc0,c
  1323  002A78  06E8               	decf	wreg,f,c
  1324  002A7A  E1FD               	bnz	clear_0
  1325                           
  1326                           ; Clear objects allocated to BANK0 (43 bytes)
  1327  002A7C  EE00  F0BA         	lfsr	0,__pbssBANK0
  1328  002A80  0E2B               	movlw	43
  1329  002A82                     clear_1:
  1330  002A82  6AEE               	clrf	postinc0,c
  1331  002A84  06E8               	decf	wreg,f,c
  1332  002A86  E1FD               	bnz	clear_1
  1333                           
  1334                           ; Clear objects allocated to COMRAM (44 bytes)
  1335  002A88  EE00  F03E         	lfsr	0,__pbssCOMRAM
  1336  002A8C  0E2C               	movlw	44
  1337  002A8E                     clear_2:
  1338  002A8E  6AEE               	clrf	postinc0,c
  1339  002A90  06E8               	decf	wreg,f,c
  1340  002A92  E1FD               	bnz	clear_2
  1341  002A94                     end_of_initialization:
  1342                           	opt stack 0
  1343  002A94                     __end_of__initialization:
  1344                           	opt stack 0
  1345  002A94  9077               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1346  002A96  9277               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1347  002A98  0100               	movlb	0
  1348  002A9A  EFC3  F015         	goto	_main	;jump to C main() function
  1349                           tblptru	equ	0xFF8
  1350                           tblptrh	equ	0xFF7
  1351                           tblptrl	equ	0xFF6
  1352                           tablat	equ	0xFF5
  1353                           postinc0	equ	0xFEE
  1354                           wreg	equ	0xFE8
  1355                           postdec1	equ	0xFE5
  1356                           fsr1h	equ	0xFE2
  1357                           fsr1l	equ	0xFE1
  1358                           
  1359                           	psect	bssCOMRAM
  1360  00003E                     __pbssCOMRAM:
  1361                           	opt stack 0
  1362  00003E                     _time_i:
  1363                           	opt stack 0
  1364  00003E                     	ds	14
  1365  00004C                     _PROX1:
  1366                           	opt stack 0
  1367  00004C                     	ds	10
  1368  000056                     _PROX2:
  1369                           	opt stack 0
  1370  000056                     	ds	10
  1371  000060                     _bottle_type:
  1372                           	opt stack 0
  1373  000060                     	ds	2
  1374  000062                     _discretize:
  1375                           	opt stack 0
  1376  000062                     	ds	2
  1377  000064                     _discretize_counter:
  1378                           	opt stack 0
  1379  000064                     	ds	2
  1380  000066                     _measure_counter:
  1381                           	opt stack 0
  1382  000066                     	ds	2
  1383  000068                     _release_counter:
  1384                           	opt stack 0
  1385  000068                     	ds	2
  1386                           tblptru	equ	0xFF8
  1387                           tblptrh	equ	0xFF7
  1388                           tblptrl	equ	0xFF6
  1389                           tablat	equ	0xFF5
  1390                           postinc0	equ	0xFEE
  1391                           wreg	equ	0xFE8
  1392                           postdec1	equ	0xFE5
  1393                           fsr1h	equ	0xFE2
  1394                           fsr1l	equ	0xFE1
  1395                           
  1396                           	psect	dataCOMRAM
  1397  00006A                     __pdataCOMRAM:
  1398                           	opt stack 0
  1399  00006A                     _DIST_THRESHOLD_HI:
  1400                           	opt stack 0
  1401  00006A                     	ds	2
  1402  00006C                     _DIST_THRESHOLD_LOW:
  1403                           	opt stack 0
  1404  00006C                     	ds	2
  1405  00006E                     _IR_THRESHOLD_HI:
  1406                           	opt stack 0
  1407  00006E                     	ds	2
  1408  000070                     _IR_THRESHOLD_LOW:
  1409                           	opt stack 0
  1410  000070                     	ds	2
  1411  000072                     _measure:
  1412                           	opt stack 0
  1413  000072                     	ds	2
  1414  000074                     _release:
  1415                           	opt stack 0
  1416  000074                     	ds	2
  1417  000076                     _DIST1_TRIG:
  1418                           	opt stack 0
  1419  000076                     	ds	1
  1420                           tblptru	equ	0xFF8
  1421                           tblptrh	equ	0xFF7
  1422                           tblptrl	equ	0xFF6
  1423                           tablat	equ	0xFF5
  1424                           postinc0	equ	0xFEE
  1425                           wreg	equ	0xFE8
  1426                           postdec1	equ	0xFE5
  1427                           fsr1h	equ	0xFE2
  1428                           fsr1l	equ	0xFE1
  1429                           
  1430                           	psect	bssBANK0
  1431  0000BA                     __pbssBANK0:
  1432                           	opt stack 0
  1433  0000BA                     _DIST1:
  1434                           	opt stack 0
  1435  0000BA                     	ds	10
  1436  0000C4                     _IR1:
  1437                           	opt stack 0
  1438  0000C4                     	ds	10
  1439  0000CE                     _time:
  1440                           	opt stack 0
  1441  0000CE                     	ds	7
  1442  0000D5                     _eskaNoCap:
  1443                           	opt stack 0
  1444  0000D5                     	ds	2
  1445  0000D7                     _eskaWCap:
  1446                           	opt stack 0
  1447  0000D7                     	ds	2
  1448  0000D9                     _runTime:
  1449                           	opt stack 0
  1450  0000D9                     	ds	2
  1451  0000DB                     _sorted_bottles:
  1452                           	opt stack 0
  1453  0000DB                     	ds	2
  1454  0000DD                     _timeDiff:
  1455                           	opt stack 0
  1456  0000DD                     	ds	2
  1457  0000DF                     _yopNoCap:
  1458                           	opt stack 0
  1459  0000DF                     	ds	2
  1460  0000E1                     _yopWCap:
  1461                           	opt stack 0
  1462  0000E1                     	ds	2
  1463  0000E3                     _DIST1_PIN:
  1464                           	opt stack 0
  1465  0000E3                     	ds	1
  1466  0000E4                     _PROX1_PIN:
  1467                           	opt stack 0
  1468  0000E4                     	ds	1
  1469                           tblptru	equ	0xFF8
  1470                           tblptrh	equ	0xFF7
  1471                           tblptrl	equ	0xFF6
  1472                           tablat	equ	0xFF5
  1473                           postinc0	equ	0xFEE
  1474                           wreg	equ	0xFE8
  1475                           postdec1	equ	0xFE5
  1476                           fsr1h	equ	0xFE2
  1477                           fsr1l	equ	0xFE1
  1478                           
  1479                           	psect	dataBANK0
  1480  0000E5                     __pdataBANK0:
  1481                           	opt stack 0
  1482  0000E5                     _IR1_PIN:
  1483                           	opt stack 0
  1484  0000E5                     	ds	1
  1485  0000E6                     _IR2_PIN:
  1486                           	opt stack 0
  1487  0000E6                     	ds	1
  1488  0000E7                     _PROX2_PIN:
  1489                           	opt stack 0
  1490  0000E7                     	ds	1
  1491  0000E8                     _nstate:
  1492                           	opt stack 0
  1493  0000E8                     	ds	1
  1494  0000E9                     _state:
  1495                           	opt stack 0
  1496  0000E9                     	ds	1
  1497  0000EA                     _creditIndex:
  1498                           	opt stack 0
  1499  0000EA                     	ds	2
  1500  0000EC                     _creditSize:
  1501                           	opt stack 0
  1502  0000EC                     	ds	2
  1503  0000EE                     _endIndex:
  1504                           	opt stack 0
  1505  0000EE                     	ds	2
  1506  0000F0                     _endSize:
  1507                           	opt stack 0
  1508  0000F0                     	ds	2
  1509  0000F2                     _events:
  1510                           	opt stack 0
  1511  0000F2                     	ds	2
  1512  0000F4                     _logIndex:
  1513                           	opt stack 0
  1514  0000F4                     	ds	2
  1515  0000F6                     _menuIndex:
  1516                           	opt stack 0
  1517  0000F6                     	ds	2
  1518  0000F8                     _menuSize:
  1519                           	opt stack 0
  1520  0000F8                     	ds	2
  1521                           tblptru	equ	0xFF8
  1522                           tblptrh	equ	0xFF7
  1523                           tblptrl	equ	0xFF6
  1524                           tablat	equ	0xFF5
  1525                           postinc0	equ	0xFEE
  1526                           wreg	equ	0xFE8
  1527                           postdec1	equ	0xFE5
  1528                           fsr1h	equ	0xFE2
  1529                           fsr1l	equ	0xFE1
  1530                           
  1531                           	psect	bssBANK1
  1532  000100                     __pbssBANK1:
  1533                           	opt stack 0
  1534  000100                     _latestSortedBottleTime:
  1535                           	opt stack 0
  1536  000100                     	ds	14
  1537  00010E                     _startTime:
  1538                           	opt stack 0
  1539  00010E                     	ds	14
  1540  00011C                     _IR2:
  1541                           	opt stack 0
  1542  00011C                     	ds	10
  1543  000126                     _display0:
  1544                           	opt stack 0
  1545  000126                     	ds	18
  1546  000138                     _display1:
  1547                           	opt stack 0
  1548  000138                     	ds	18
  1549  00014A                     _ndisplay0:
  1550                           	opt stack 0
  1551  00014A                     	ds	18
  1552  00015C                     _ndisplay1:
  1553                           	opt stack 0
  1554  00015C                     	ds	18
  1555                           tblptru	equ	0xFF8
  1556                           tblptrh	equ	0xFF7
  1557                           tblptrl	equ	0xFF6
  1558                           tablat	equ	0xFF5
  1559                           postinc0	equ	0xFEE
  1560                           wreg	equ	0xFE8
  1561                           postdec1	equ	0xFE5
  1562                           fsr1h	equ	0xFE2
  1563                           fsr1l	equ	0xFE1
  1564                           
  1565                           	psect	dataBIGRAM
  1566  000178                     __pdataBIGRAM:
  1567                           	opt stack 0
  1568  000178                     _menu:
  1569                           	opt stack 0
  1570  000178                     	ds	720
  1571                           tblptru	equ	0xFF8
  1572                           tblptrh	equ	0xFF7
  1573                           tblptrl	equ	0xFF6
  1574                           tablat	equ	0xFF5
  1575                           postinc0	equ	0xFEE
  1576                           wreg	equ	0xFE8
  1577                           postdec1	equ	0xFE5
  1578                           fsr1h	equ	0xFE2
  1579                           fsr1l	equ	0xFE1
  1580                           
  1581                           	psect	cstackBANK1
  1582  00016E                     __pcstackBANK1:
  1583                           	opt stack 0
  1584  00016E                     display_menu@selector:
  1585                           	opt stack 0
  1586                           
  1587                           ; 2 bytes @ 0x0
  1588  00016E                     	ds	2
  1589  000170                     display_menu@menuSizePtr:
  1590                           	opt stack 0
  1591                           
  1592                           ; 2 bytes @ 0x2
  1593  000170                     	ds	2
  1594  000172                     display_menu@menuSelection:
  1595                           	opt stack 0
  1596                           
  1597                           ; 2 bytes @ 0x4
  1598  000172                     	ds	2
  1599  000174                     _display_menu$1104:
  1600                           	opt stack 0
  1601                           
  1602                           ; 2 bytes @ 0x6
  1603  000174                     	ds	2
  1604  000176                     display_menu@menuIndexPtr:
  1605                           	opt stack 0
  1606                           
  1607                           ; 2 bytes @ 0x8
  1608  000176                     	ds	2
  1609                           tblptru	equ	0xFF8
  1610                           tblptrh	equ	0xFF7
  1611                           tblptrl	equ	0xFF6
  1612                           tablat	equ	0xFF5
  1613                           postinc0	equ	0xFEE
  1614                           wreg	equ	0xFE8
  1615                           postdec1	equ	0xFE5
  1616                           fsr1h	equ	0xFE2
  1617                           fsr1l	equ	0xFE1
  1618                           
  1619                           	psect	cstackBANK0
  1620  000080                     __pcstackBANK0:
  1621                           	opt stack 0
  1622  000080                     ??_readADC:
  1623  000080                     ??_isdigit:
  1624  000080                     ??_I2C_Master_Wait:
  1625  000080                     ?_strcmp:
  1626                           	opt stack 0
  1627  000080                     ?___wmul:
  1628                           	opt stack 0
  1629  000080                     ?___awdiv:
  1630                           	opt stack 0
  1631  000080                     ?___awmod:
  1632                           	opt stack 0
  1633  000080                     ?___lwdiv:
  1634                           	opt stack 0
  1635  000080                     ?___lldiv:
  1636                           	opt stack 0
  1637  000080                     lcdNibble@temp:
  1638                           	opt stack 0
  1639  000080                     ___wmul@multiplier:
  1640                           	opt stack 0
  1641  000080                     ___awdiv@dividend:
  1642                           	opt stack 0
  1643  000080                     ___awmod@dividend:
  1644                           	opt stack 0
  1645  000080                     ___lwdiv@dividend:
  1646                           	opt stack 0
  1647  000080                     strcmp@s1:
  1648                           	opt stack 0
  1649  000080                     strcpy@to:
  1650                           	opt stack 0
  1651  000080                     ___lldiv@dividend:
  1652                           	opt stack 0
  1653                           
  1654                           ; 4 bytes @ 0x0
  1655  000080                     	ds	1
  1656  000081                     I2C_Master_Read@a:
  1657                           	opt stack 0
  1658  000081                     lcdNibble@data:
  1659                           	opt stack 0
  1660  000081                     readADC@channel:
  1661                           	opt stack 0
  1662  000081                     _isdigit$714:
  1663                           	opt stack 0
  1664  000081                     I2C_Master_Write@d:
  1665                           	opt stack 0
  1666                           
  1667                           ; 2 bytes @ 0x1
  1668  000081                     	ds	1
  1669  000082                     ??_read_sensors:
  1670  000082                     I2C_Master_Read@temp:
  1671                           	opt stack 0
  1672  000082                     lcdInst@data:
  1673                           	opt stack 0
  1674  000082                     putch@data:
  1675                           	opt stack 0
  1676  000082                     isdigit@c:
  1677                           	opt stack 0
  1678  000082                     ___wmul@multiplicand:
  1679                           	opt stack 0
  1680  000082                     ___awdiv@divisor:
  1681                           	opt stack 0
  1682  000082                     ___awmod@divisor:
  1683                           	opt stack 0
  1684  000082                     ___lwdiv@divisor:
  1685                           	opt stack 0
  1686  000082                     strcmp@s2:
  1687                           	opt stack 0
  1688  000082                     strcpy@from:
  1689                           	opt stack 0
  1690                           
  1691                           ; 2 bytes @ 0x2
  1692  000082                     	ds	1
  1693  000083                     ??_initLCD:
  1694  000083                     set_time@i:
  1695                           	opt stack 0
  1696                           
  1697                           ; 1 bytes @ 0x3
  1698  000083                     	ds	1
  1699  000084                     ??_strcmp:
  1700  000084                     read_sensors@i:
  1701                           	opt stack 0
  1702  000084                     ___awdiv@counter:
  1703                           	opt stack 0
  1704  000084                     ___awmod@counter:
  1705                           	opt stack 0
  1706  000084                     ___lwdiv@counter:
  1707                           	opt stack 0
  1708  000084                     ___wmul@product:
  1709                           	opt stack 0
  1710  000084                     strcpy@cp:
  1711                           	opt stack 0
  1712  000084                     ___lldiv@divisor:
  1713                           	opt stack 0
  1714                           
  1715                           ; 4 bytes @ 0x4
  1716  000084                     	ds	1
  1717  000085                     ___awdiv@sign:
  1718                           	opt stack 0
  1719  000085                     ___awmod@sign:
  1720                           	opt stack 0
  1721  000085                     strcmp@r:
  1722                           	opt stack 0
  1723  000085                     ___lwdiv@quotient:
  1724                           	opt stack 0
  1725                           
  1726                           ; 2 bytes @ 0x5
  1727  000085                     	ds	1
  1728  000086                     ??_update_RTC:
  1729  000086                     ___awdiv@quotient:
  1730                           	opt stack 0
  1731                           
  1732                           ; 2 bytes @ 0x6
  1733  000086                     	ds	1
  1734  000087                     ?___lwmod:
  1735                           	opt stack 0
  1736  000087                     ___lwmod@dividend:
  1737                           	opt stack 0
  1738                           
  1739                           ; 2 bytes @ 0x7
  1740  000087                     	ds	1
  1741  000088                     ___lldiv@quotient:
  1742                           	opt stack 0
  1743                           
  1744                           ; 4 bytes @ 0x8
  1745  000088                     	ds	1
  1746  000089                     ___lwmod@divisor:
  1747                           	opt stack 0
  1748                           
  1749                           ; 2 bytes @ 0x9
  1750  000089                     	ds	1
  1751  00008A                     update_RTC@i:
  1752                           	opt stack 0
  1753                           
  1754                           ; 1 bytes @ 0xA
  1755  00008A                     	ds	1
  1756  00008B                     ___lwmod@counter:
  1757                           	opt stack 0
  1758                           
  1759                           ; 1 bytes @ 0xB
  1760  00008B                     	ds	1
  1761  00008C                     ?__doprnt:
  1762                           	opt stack 0
  1763  00008C                     ___lldiv@counter:
  1764                           	opt stack 0
  1765  00008C                     __doprnt@pb:
  1766                           	opt stack 0
  1767                           
  1768                           ; 2 bytes @ 0xC
  1769  00008C                     	ds	1
  1770  00008D                     I2C_Master_Init@c:
  1771                           	opt stack 0
  1772                           
  1773                           ; 4 bytes @ 0xD
  1774  00008D                     	ds	1
  1775  00008E                     __doprnt@f:
  1776                           	opt stack 0
  1777                           
  1778                           ; 2 bytes @ 0xE
  1779  00008E                     	ds	2
  1780  000090                     __doprnt@ap:
  1781                           	opt stack 0
  1782                           
  1783                           ; 2 bytes @ 0x10
  1784  000090                     	ds	1
  1785  000091                     ??_I2C_Master_Init:
  1786                           
  1787                           ; 1 bytes @ 0x11
  1788  000091                     	ds	1
  1789  000092                     ??__doprnt:
  1790                           
  1791                           ; 1 bytes @ 0x12
  1792  000092                     	ds	4
  1793  000096                     __doprnt@idx:
  1794                           	opt stack 0
  1795                           
  1796                           ; 1 bytes @ 0x16
  1797  000096                     	ds	1
  1798  000097                     __doprnt@prec:
  1799                           	opt stack 0
  1800                           
  1801                           ; 1 bytes @ 0x17
  1802  000097                     	ds	1
  1803  000098                     __doprnt@len:
  1804                           	opt stack 0
  1805                           
  1806                           ; 2 bytes @ 0x18
  1807  000098                     	ds	2
  1808  00009A                     __doprnt@cp:
  1809                           	opt stack 0
  1810                           
  1811                           ; 2 bytes @ 0x1A
  1812  00009A                     	ds	2
  1813  00009C                     __doprnt@val:
  1814                           	opt stack 0
  1815                           
  1816                           ; 2 bytes @ 0x1C
  1817  00009C                     	ds	2
  1818  00009E                     __doprnt@flag:
  1819                           	opt stack 0
  1820                           
  1821                           ; 1 bytes @ 0x1E
  1822  00009E                     	ds	1
  1823  00009F                     __doprnt@width:
  1824                           	opt stack 0
  1825                           
  1826                           ; 2 bytes @ 0x1F
  1827  00009F                     	ds	2
  1828  0000A1                     __doprnt@c:
  1829                           	opt stack 0
  1830                           
  1831                           ; 1 bytes @ 0x21
  1832  0000A1                     	ds	1
  1833  0000A2                     ?_printf:
  1834                           	opt stack 0
  1835  0000A2                     ?_sprintf:
  1836                           	opt stack 0
  1837  0000A2                     printf@f:
  1838                           	opt stack 0
  1839  0000A2                     sprintf@wh:
  1840                           	opt stack 0
  1841                           
  1842                           ; 2 bytes @ 0x22
  1843  0000A2                     	ds	2
  1844  0000A4                     printf@ap:
  1845                           	opt stack 0
  1846  0000A4                     sprintf@f:
  1847                           	opt stack 0
  1848                           
  1849                           ; 2 bytes @ 0x24
  1850  0000A4                     	ds	2
  1851  0000A6                     printf@pb:
  1852                           	opt stack 0
  1853                           
  1854                           ; 4 bytes @ 0x26
  1855  0000A6                     	ds	4
  1856  0000AA                     ??_update_lcd:
  1857                           
  1858                           ; 1 bytes @ 0x2A
  1859  0000AA                     	ds	1
  1860  0000AB                     update_lcd@flag:
  1861                           	opt stack 0
  1862                           
  1863                           ; 2 bytes @ 0x2B
  1864  0000AB                     	ds	3
  1865  0000AE                     sprintf@ap:
  1866                           	opt stack 0
  1867                           
  1868                           ; 2 bytes @ 0x2E
  1869  0000AE                     	ds	2
  1870  0000B0                     sprintf@pb:
  1871                           	opt stack 0
  1872                           
  1873                           ; 4 bytes @ 0x30
  1874  0000B0                     	ds	4
  1875  0000B4                     ??_update_state:
  1876  0000B4                     ??_display_menu:
  1877                           
  1878                           ; 1 bytes @ 0x34
  1879  0000B4                     	ds	2
  1880  0000B6                     update_state@i:
  1881                           	opt stack 0
  1882                           
  1883                           ; 2 bytes @ 0x36
  1884  0000B6                     	ds	3
  1885  0000B9                     ??_main:
  1886                           
  1887                           ; 1 bytes @ 0x39
  1888  0000B9                     	ds	1
  1889                           tblptru	equ	0xFF8
  1890                           tblptrh	equ	0xFF7
  1891                           tblptrl	equ	0xFF6
  1892                           tablat	equ	0xFF5
  1893                           postinc0	equ	0xFEE
  1894                           wreg	equ	0xFE8
  1895                           postdec1	equ	0xFE5
  1896                           fsr1h	equ	0xFE2
  1897                           fsr1l	equ	0xFE1
  1898                           
  1899                           	psect	cstackCOMRAM
  1900  000001                     __pcstackCOMRAM:
  1901                           	opt stack 0
  1902  000001                     ??i2_isdigit:
  1903  000001                     ?i2___wmul:
  1904                           	opt stack 0
  1905  000001                     ?i2___awmod:
  1906                           	opt stack 0
  1907  000001                     ?i2___lwdiv:
  1908                           	opt stack 0
  1909  000001                     i2lcdNibble@temp:
  1910                           	opt stack 0
  1911  000001                     i2___wmul@multiplier:
  1912                           	opt stack 0
  1913  000001                     i2___awmod@dividend:
  1914                           	opt stack 0
  1915  000001                     i2___lwdiv@dividend:
  1916                           	opt stack 0
  1917                           
  1918                           ; 2 bytes @ 0x0
  1919  000001                     	ds	1
  1920  000002                     i2lcdNibble@data:
  1921                           	opt stack 0
  1922  000002                     i2_isdigit$714:
  1923                           	opt stack 0
  1924                           
  1925                           ; 1 bytes @ 0x1
  1926  000002                     	ds	1
  1927  000003                     i2lcdInst@data:
  1928                           	opt stack 0
  1929  000003                     i2putch@data:
  1930                           	opt stack 0
  1931  000003                     i2isdigit@c:
  1932                           	opt stack 0
  1933  000003                     i2___wmul@multiplicand:
  1934                           	opt stack 0
  1935  000003                     i2___awmod@divisor:
  1936                           	opt stack 0
  1937  000003                     i2___lwdiv@divisor:
  1938                           	opt stack 0
  1939                           
  1940                           ; 2 bytes @ 0x2
  1941  000003                     	ds	2
  1942  000005                     i2___awmod@counter:
  1943                           	opt stack 0
  1944  000005                     i2___wmul@product:
  1945                           	opt stack 0
  1946  000005                     i2___lwdiv@quotient:
  1947                           	opt stack 0
  1948                           
  1949                           ; 2 bytes @ 0x4
  1950  000005                     	ds	1
  1951  000006                     i2___awmod@sign:
  1952                           	opt stack 0
  1953                           
  1954                           ; 1 bytes @ 0x5
  1955  000006                     	ds	1
  1956  000007                     i2___lwdiv@counter:
  1957                           	opt stack 0
  1958                           
  1959                           ; 1 bytes @ 0x6
  1960  000007                     	ds	1
  1961  000008                     ?i2___lwmod:
  1962                           	opt stack 0
  1963  000008                     i2___lwmod@dividend:
  1964                           	opt stack 0
  1965                           
  1966                           ; 2 bytes @ 0x7
  1967  000008                     	ds	2
  1968  00000A                     i2___lwmod@divisor:
  1969                           	opt stack 0
  1970                           
  1971                           ; 2 bytes @ 0x9
  1972  00000A                     	ds	2
  1973  00000C                     i2___lwmod@counter:
  1974                           	opt stack 0
  1975                           
  1976                           ; 1 bytes @ 0xB
  1977  00000C                     	ds	1
  1978  00000D                     ?i2__doprnt:
  1979                           	opt stack 0
  1980  00000D                     i2__doprnt@pb:
  1981                           	opt stack 0
  1982                           
  1983                           ; 2 bytes @ 0xC
  1984  00000D                     	ds	2
  1985  00000F                     i2__doprnt@f:
  1986                           	opt stack 0
  1987                           
  1988                           ; 2 bytes @ 0xE
  1989  00000F                     	ds	2
  1990  000011                     i2__doprnt@ap:
  1991                           	opt stack 0
  1992                           
  1993                           ; 2 bytes @ 0x10
  1994  000011                     	ds	2
  1995  000013                     ??i2__doprnt:
  1996                           
  1997                           ; 1 bytes @ 0x12
  1998  000013                     	ds	4
  1999  000017                     i2__doprnt@idx:
  2000                           	opt stack 0
  2001                           
  2002                           ; 1 bytes @ 0x16
  2003  000017                     	ds	1
  2004  000018                     i2__doprnt@prec:
  2005                           	opt stack 0
  2006                           
  2007                           ; 1 bytes @ 0x17
  2008  000018                     	ds	1
  2009  000019                     i2__doprnt@len:
  2010                           	opt stack 0
  2011                           
  2012                           ; 2 bytes @ 0x18
  2013  000019                     	ds	2
  2014  00001B                     i2__doprnt@cp:
  2015                           	opt stack 0
  2016                           
  2017                           ; 2 bytes @ 0x1A
  2018  00001B                     	ds	2
  2019  00001D                     i2__doprnt@val:
  2020                           	opt stack 0
  2021                           
  2022                           ; 2 bytes @ 0x1C
  2023  00001D                     	ds	2
  2024  00001F                     i2__doprnt@flag:
  2025                           	opt stack 0
  2026                           
  2027                           ; 1 bytes @ 0x1E
  2028  00001F                     	ds	1
  2029  000020                     i2__doprnt@width:
  2030                           	opt stack 0
  2031                           
  2032                           ; 2 bytes @ 0x1F
  2033  000020                     	ds	2
  2034  000022                     i2__doprnt@c:
  2035                           	opt stack 0
  2036                           
  2037                           ; 1 bytes @ 0x21
  2038  000022                     	ds	1
  2039  000023                     ?i2_printf:
  2040                           	opt stack 0
  2041  000023                     i2printf@f:
  2042                           	opt stack 0
  2043                           
  2044                           ; 2 bytes @ 0x22
  2045  000023                     	ds	2
  2046  000025                     i2printf@ap:
  2047                           	opt stack 0
  2048                           
  2049                           ; 2 bytes @ 0x24
  2050  000025                     	ds	2
  2051  000027                     i2printf@pb:
  2052                           	opt stack 0
  2053                           
  2054                           ; 4 bytes @ 0x26
  2055  000027                     	ds	4
  2056  00002B                     ??_keypressed:
  2057                           
  2058                           ; 1 bytes @ 0x2A
  2059  00002B                     	ds	16
  2060  00003B                     keypressed@i:
  2061                           	opt stack 0
  2062                           
  2063                           ; 2 bytes @ 0x3A
  2064  00003B                     	ds	2
  2065  00003D                     keypressed@keypress:
  2066                           	opt stack 0
  2067                           
  2068                           ; 1 bytes @ 0x3C
  2069  00003D                     	ds	1
  2070                           tblptru	equ	0xFF8
  2071                           tblptrh	equ	0xFF7
  2072                           tblptrl	equ	0xFF6
  2073                           tablat	equ	0xFF5
  2074                           postinc0	equ	0xFEE
  2075                           wreg	equ	0xFE8
  2076                           postdec1	equ	0xFE5
  2077                           fsr1h	equ	0xFE2
  2078                           fsr1l	equ	0xFE1
  2079                           
  2080 ;;
  2081 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2082 ;;
  2083 ;; *************** function _main *****************
  2084 ;; Defined at:
  2085 ;;		line 101 in file "main.c"
  2086 ;; Parameters:    Size  Location     Type
  2087 ;;		None
  2088 ;; Auto vars:     Size  Location     Type
  2089 ;;		None
  2090 ;; Return value:  Size  Location     Type
  2091 ;;                  1    wreg      void 
  2092 ;; Registers used:
  2093 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2094 ;; Tracked objects:
  2095 ;;		On entry : 0/0
  2096 ;;		On exit  : 0/0
  2097 ;;		Unchanged: 0/0
  2098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2101 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2102 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2103 ;;Total ram usage:        1 bytes
  2104 ;; Hardware stack levels required when called:   11
  2105 ;; This function calls:
  2106 ;;		_I2C_Master_Init
  2107 ;;		_initLCD
  2108 ;;		_read_sensors
  2109 ;;		_set_time
  2110 ;;		_update_RTC
  2111 ;;		_update_display
  2112 ;;		_update_lcd
  2113 ;;		_update_state
  2114 ;; This function is called by:
  2115 ;;		Startup code after reset
  2116 ;; This function uses a non-reentrant model
  2117 ;;
  2118                           
  2119                           	psect	text0
  2120  002B86                     __ptext0:
  2121                           	opt stack 0
  2122  002B86                     _main:
  2123                           	opt stack 20
  2124                           
  2125                           ;main.c: 108: TRISC = 0x00;
  2126                           
  2127                           ;incstack = 0
  2128  002B86  0E00               	movlw	0
  2129  002B88  6E94               	movwf	3988,c	;volatile
  2130                           
  2131                           ;main.c: 109: TRISD = 0x00;
  2132  002B8A  0E00               	movlw	0
  2133  002B8C  6E95               	movwf	3989,c	;volatile
  2134                           
  2135                           ;main.c: 110: TRISB = 0xFF;
  2136  002B8E  6893               	setf	3987,c	;volatile
  2137                           
  2138                           ;main.c: 111: TRISE = 0x03;
  2139  002B90  0E03               	movlw	3
  2140  002B92  6E96               	movwf	3990,c	;volatile
  2141                           
  2142                           ;main.c: 112: LATB = 0x00;
  2143  002B94  0E00               	movlw	0
  2144  002B96  6E8A               	movwf	3978,c	;volatile
  2145                           
  2146                           ;main.c: 113: LATC = 0x00;
  2147  002B98  0E00               	movlw	0
  2148  002B9A  6E8B               	movwf	3979,c	;volatile
  2149                           
  2150                           ;main.c: 114: ADCON0 = 0x00;
  2151  002B9C  0E00               	movlw	0
  2152  002B9E  6EC2               	movwf	4034,c	;volatile
  2153                           
  2154                           ;main.c: 115: ADCON1 = 0xFF;
  2155  002BA0  68C1               	setf	4033,c	;volatile
  2156                           
  2157                           ;main.c: 116: initLCD();
  2158  002BA2  EC8C  F017         	call	_initLCD	;wreg free
  2159                           
  2160                           ;main.c: 117: INT1IE = 1;
  2161  002BA6  86F0               	bsf	intcon3,3,c	;volatile
  2162                           
  2163                           ;main.c: 118: nRBPU = 0;
  2164  002BA8  9EF1               	bcf	intcon2,7,c	;volatile
  2165                           
  2166                           ;main.c: 119: I2C_Master_Init(10000);
  2167  002BAA  0E10               	movlw	16
  2168  002BAC  0100               	movlb	0	; () banked
  2169  002BAE  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2170  002BB0  0E27               	movlw	39
  2171  002BB2  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2172  002BB4  0E00               	movlw	0
  2173  002BB6  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2174  002BB8  0E00               	movlw	0
  2175  002BBA  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2176  002BBC  EC8F  F016         	call	_I2C_Master_Init	;wreg free
  2177                           
  2178                           ;main.c: 121: (INTCONbits.GIE = 0);
  2179  002BC0  9EF2               	bcf	intcon,7,c	;volatile
  2180                           
  2181                           ;main.c: 122: set_time();
  2182  002BC2  EC5E  F016         	call	_set_time	;wreg free
  2183  002BC6                     l8076:
  2184                           
  2185                           ;main.c: 124: (INTCONbits.GIE = 0);
  2186  002BC6  9EF2               	bcf	intcon,7,c	;volatile
  2187                           
  2188                           ;main.c: 125: update_RTC();
  2189  002BC8  ECC3  F012         	call	_update_RTC	;wreg free
  2190                           
  2191                           ;main.c: 126: read_sensors();
  2192  002BCC  ECEF  F010         	call	_read_sensors	;wreg free
  2193                           
  2194                           ;main.c: 127: update_state();
  2195  002BD0  EC92  F00F         	call	_update_state	;wreg free
  2196                           
  2197                           ;main.c: 128: update_display();
  2198  002BD4  EC0D  F012         	call	_update_display	;wreg free
  2199                           
  2200                           ;main.c: 129: update_lcd();
  2201  002BD8  EC79  F013         	call	_update_lcd	;wreg free
  2202                           
  2203                           ;main.c: 130: (INTCONbits.GIE = 1);
  2204  002BDC  8EF2               	bsf	intcon,7,c	;volatile
  2205                           
  2206                           ;main.c: 131: _delay((unsigned long)((50)*(10000000/4000.0)));
  2207  002BDE  0EA3               	movlw	163
  2208  002BE0  0100               	movlb	0	; () banked
  2209  002BE2  6FB9               	movwf	??_main& (0+255),b
  2210  002BE4  0E55               	movlw	85
  2211  002BE6                     u13057:
  2212  002BE6  2EE8               	decfsz	wreg,f,c
  2213  002BE8  D7FE               	bra	u13057
  2214  002BEA  2FB9               	decfsz	??_main& (0+255),f,b
  2215  002BEC  D7FC               	bra	u13057
  2216                           
  2217                           ;main.c: 132: (INTCONbits.GIE = 0);
  2218  002BEE  9EF2               	bcf	intcon,7,c	;volatile
  2219  002BF0  D7EA               	goto	l8076
  2220  002BF2                     __end_of_main:
  2221                           	opt stack 0
  2222                           tblptru	equ	0xFF8
  2223                           tblptrh	equ	0xFF7
  2224                           tblptrl	equ	0xFF6
  2225                           tablat	equ	0xFF5
  2226                           intcon	equ	0xFF2
  2227                           intcon2	equ	0xFF1
  2228                           intcon3	equ	0xFF0
  2229                           postinc0	equ	0xFEE
  2230                           wreg	equ	0xFE8
  2231                           postdec1	equ	0xFE5
  2232                           fsr1h	equ	0xFE2
  2233                           fsr1l	equ	0xFE1
  2234                           
  2235 ;; *************** function _update_state *****************
  2236 ;; Defined at:
  2237 ;;		line 208 in file "main.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;		None
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;  i               2   54[BANK0 ] int 
  2242 ;; Return value:  Size  Location     Type
  2243 ;;                  1    wreg      void 
  2244 ;; Registers used:
  2245 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2246 ;; Tracked objects:
  2247 ;;		On entry : 0/0
  2248 ;;		On exit  : 0/0
  2249 ;;		Unchanged: 0/0
  2250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2252 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2253 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2254 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2255 ;;Total ram usage:        4 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; Hardware stack levels required when called:    9
  2258 ;; This function calls:
  2259 ;;		___awdiv
  2260 ;;		___awmod
  2261 ;;		_sprintf
  2262 ;; This function is called by:
  2263 ;;		_main
  2264 ;; This function uses a non-reentrant model
  2265 ;;
  2266                           
  2267                           	psect	text1
  2268  001F24                     __ptext1:
  2269                           	opt stack 0
  2270  001F24                     _update_state:
  2271                           	opt stack 21
  2272                           
  2273                           ;main.c: 209: if ((nstate=='s'&&state!='s')||(nstate=='m'&&state!='m')){
  2274                           
  2275                           ;incstack = 0
  2276  001F24  0E73               	movlw	115
  2277  001F26  0100               	movlb	0	; () banked
  2278  001F28  19E8               	xorwf	_nstate& (0+255),w,b
  2279  001F2A  A4D8               	btfss	status,2,c
  2280  001F2C  D005               	goto	l7946
  2281                           
  2282                           ; BSR set to: 0
  2283  001F2E  0E73               	movlw	115
  2284  001F30  0100               	movlb	0	; () banked
  2285  001F32  19E9               	xorwf	_state& (0+255),w,b
  2286  001F34  A4D8               	btfss	status,2,c
  2287  001F36  D00A               	goto	l7950
  2288  001F38                     l7946:
  2289                           
  2290                           ; BSR set to: 0
  2291  001F38  0E6D               	movlw	109
  2292  001F3A  0100               	movlb	0	; () banked
  2293  001F3C  19E8               	xorwf	_nstate& (0+255),w,b
  2294  001F3E  A4D8               	btfss	status,2,c
  2295  001F40  D033               	goto	l7962
  2296                           
  2297                           ; BSR set to: 0
  2298  001F42  0E6D               	movlw	109
  2299  001F44  0100               	movlb	0	; () banked
  2300  001F46  19E9               	xorwf	_state& (0+255),w,b
  2301  001F48  B4D8               	btfsc	status,2,c
  2302  001F4A  D02E               	goto	l7962
  2303  001F4C                     l7950:
  2304                           
  2305                           ; BSR set to: 0
  2306                           ;main.c: 210: int i;
  2307                           ;main.c: 211: for (i=0;i<7;i++)
  2308  001F4C  0E00               	movlw	0
  2309  001F4E  0100               	movlb	0	; () banked
  2310  001F50  6FB7               	movwf	(update_state@i+1)& (0+255),b
  2311  001F52  0E00               	movlw	0
  2312  001F54  6FB6               	movwf	update_state@i& (0+255),b
  2313  001F56                     l7952:
  2314                           
  2315                           ; BSR set to: 0
  2316  001F56  0100               	movlb	0	; () banked
  2317  001F58  BFB7               	btfsc	(update_state@i+1)& (0+255),7,b
  2318  001F5A  D008               	goto	l7956
  2319  001F5C  0100               	movlb	0	; () banked
  2320  001F5E  51B7               	movf	(update_state@i+1)& (0+255),w,b
  2321  001F60  E123               	bnz	l7962
  2322  001F62  0E07               	movlw	7
  2323  001F64  0100               	movlb	0	; () banked
  2324  001F66  5DB6               	subwf	update_state@i& (0+255),w,b
  2325  001F68  B0D8               	btfsc	status,0,c
  2326  001F6A  D01E               	goto	l7962
  2327  001F6C                     l7956:
  2328                           
  2329                           ; BSR set to: 0
  2330                           ;main.c: 212: startTime[i]=time_i[i];
  2331  001F6C  90D8               	bcf	status,0,c
  2332  001F6E  0100               	movlb	0	; () banked
  2333  001F70  35B6               	rlcf	update_state@i& (0+255),w,b
  2334  001F72  6ED9               	movwf	fsr2l,c
  2335  001F74  0100               	movlb	0	; () banked
  2336  001F76  35B7               	rlcf	(update_state@i+1)& (0+255),w,b
  2337  001F78  6EDA               	movwf	fsr2h,c
  2338  001F7A  0E3E               	movlw	low _time_i
  2339  001F7C  26D9               	addwf	fsr2l,f,c
  2340  001F7E  0E00               	movlw	high _time_i
  2341  001F80  22DA               	addwfc	fsr2h,f,c
  2342  001F82  90D8               	bcf	status,0,c
  2343  001F84  0100               	movlb	0	; () banked
  2344  001F86  35B6               	rlcf	update_state@i& (0+255),w,b
  2345  001F88  6EE1               	movwf	fsr1l,c
  2346  001F8A  0100               	movlb	0	; () banked
  2347  001F8C  35B7               	rlcf	(update_state@i+1)& (0+255),w,b
  2348  001F8E  6EE2               	movwf	fsr1h,c
  2349  001F90  0E0E               	movlw	low _startTime
  2350  001F92  26E1               	addwf	fsr1l,f,c
  2351  001F94  0E01               	movlw	high _startTime
  2352  001F96  22E2               	addwfc	fsr1h,f,c
  2353  001F98  CFDE FFE6          	movff	postinc2,postinc1
  2354  001F9C  CFDD FFE5          	movff	postdec2,postdec1
  2355                           
  2356                           ; BSR set to: 0
  2357  001FA0  0100               	movlb	0	; () banked
  2358  001FA2  4BB6               	infsnz	update_state@i& (0+255),f,b
  2359  001FA4  2BB7               	incf	(update_state@i+1)& (0+255),f,b
  2360  001FA6  D7D7               	goto	l7952
  2361  001FA8                     l7962:
  2362                           
  2363                           ; BSR set to: 0
  2364                           ;main.c: 213: }
  2365                           ;main.c: 214: sorted_bottles=eskaNoCap+eskaWCap+yopNoCap+yopWCap;
  2366  001FA8  0100               	movlb	0	; () banked
  2367  001FAA  51D7               	movf	_eskaWCap& (0+255),w,b
  2368  001FAC  0100               	movlb	0	; () banked
  2369  001FAE  25D5               	addwf	_eskaNoCap& (0+255),w,b
  2370  001FB0  0100               	movlb	0	; () banked
  2371  001FB2  6FB4               	movwf	??_update_state& (0+255),b
  2372  001FB4  0100               	movlb	0	; () banked
  2373  001FB6  51D8               	movf	(_eskaWCap+1)& (0+255),w,b
  2374  001FB8  0100               	movlb	0	; () banked
  2375  001FBA  21D6               	addwfc	(_eskaNoCap+1)& (0+255),w,b
  2376  001FBC  0100               	movlb	0	; () banked
  2377  001FBE  6FB5               	movwf	(??_update_state+1)& (0+255),b
  2378  001FC0  0100               	movlb	0	; () banked
  2379  001FC2  51DF               	movf	_yopNoCap& (0+255),w,b
  2380  001FC4  0100               	movlb	0	; () banked
  2381  001FC6  27B4               	addwf	??_update_state& (0+255),f,b
  2382  001FC8  0100               	movlb	0	; () banked
  2383  001FCA  51E0               	movf	(_yopNoCap+1)& (0+255),w,b
  2384  001FCC  0100               	movlb	0	; () banked
  2385  001FCE  23B5               	addwfc	(??_update_state+1)& (0+255),f,b
  2386  001FD0  0100               	movlb	0	; () banked
  2387  001FD2  51E1               	movf	_yopWCap& (0+255),w,b
  2388  001FD4  0100               	movlb	0	; () banked
  2389  001FD6  25B4               	addwf	??_update_state& (0+255),w,b
  2390  001FD8  0100               	movlb	0	; () banked
  2391  001FDA  6FDB               	movwf	_sorted_bottles& (0+255),b
  2392  001FDC  0100               	movlb	0	; () banked
  2393  001FDE  51E2               	movf	(_yopWCap+1)& (0+255),w,b
  2394  001FE0  0100               	movlb	0	; () banked
  2395  001FE2  21B5               	addwfc	(??_update_state+1)& (0+255),w,b
  2396  001FE4  0100               	movlb	0	; () banked
  2397  001FE6  6FDC               	movwf	(_sorted_bottles+1)& (0+255),b
  2398                           
  2399                           ; BSR set to: 0
  2400                           ;main.c: 215: sorted_bottles%=100;
  2401  001FE8  C0DB  F080         	movff	_sorted_bottles,___awmod@dividend
  2402  001FEC  C0DC  F081         	movff	_sorted_bottles+1,___awmod@dividend+1
  2403  001FF0  0E00               	movlw	0
  2404  001FF2  0100               	movlb	0	; () banked
  2405  001FF4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2406  001FF6  0E64               	movlw	100
  2407  001FF8  6F82               	movwf	___awmod@divisor& (0+255),b
  2408  001FFA  ECB5  F014         	call	___awmod	;wreg free
  2409  001FFE  C080  F0DB         	movff	?___awmod,_sorted_bottles
  2410  002002  C081  F0DC         	movff	?___awmod+1,_sorted_bottles+1
  2411                           
  2412                           ;main.c: 216: if (state=='s'&&timeDiff>=180){
  2413  002006  0E73               	movlw	115
  2414  002008  0100               	movlb	0	; () banked
  2415  00200A  19E9               	xorwf	_state& (0+255),w,b
  2416  00200C  A4D8               	btfss	status,2,c
  2417  00200E  D00E               	goto	l7972
  2418                           
  2419                           ; BSR set to: 0
  2420  002010  0100               	movlb	0	; () banked
  2421  002012  BFDE               	btfsc	(_timeDiff+1)& (0+255),7,b
  2422  002014  D00B               	goto	l7972
  2423  002016  0100               	movlb	0	; () banked
  2424  002018  51DE               	movf	(_timeDiff+1)& (0+255),w,b
  2425  00201A  E105               	bnz	u12570
  2426  00201C  0EB4               	movlw	180
  2427  00201E  0100               	movlb	0	; () banked
  2428  002020  5DDD               	subwf	_timeDiff& (0+255),w,b
  2429  002022  A0D8               	btfss	status,0,c
  2430  002024  D003               	goto	l7972
  2431  002026                     u12570:
  2432                           
  2433                           ; BSR set to: 0
  2434                           ;main.c: 217: nstate='e';
  2435  002026  0E65               	movlw	101
  2436  002028  0100               	movlb	0	; () banked
  2437  00202A  6FE8               	movwf	_nstate& (0+255),b
  2438  00202C                     l7972:
  2439                           
  2440                           ; BSR set to: 0
  2441                           ;main.c: 218: }
  2442                           ;main.c: 219: if (nstate=='e'&&state!='e'){
  2443  00202C  0E65               	movlw	101
  2444  00202E  0100               	movlb	0	; () banked
  2445  002030  19E8               	xorwf	_nstate& (0+255),w,b
  2446  002032  A4D8               	btfss	status,2,c
  2447  002034  D073               	goto	l7980
  2448                           
  2449                           ; BSR set to: 0
  2450  002036  0E65               	movlw	101
  2451  002038  0100               	movlb	0	; () banked
  2452  00203A  19E9               	xorwf	_state& (0+255),w,b
  2453  00203C  B4D8               	btfsc	status,2,c
  2454  00203E  D06E               	goto	l7980
  2455                           
  2456                           ; BSR set to: 0
  2457                           ;main.c: 220: runTime=timeDiff;
  2458  002040  C0DD  F0D9         	movff	_timeDiff,_runTime
  2459  002044  C0DE  F0DA         	movff	_timeDiff+1,_runTime+1
  2460                           
  2461                           ; BSR set to: 0
  2462                           ;main.c: 221: sprintf(menu[3][0],"bottles: %02d    \0", sorted_bottles);
  2463  002048  0E94               	movlw	low (_menu+540)
  2464  00204A  0100               	movlb	0	; () banked
  2465  00204C  6FA2               	movwf	sprintf@wh& (0+255),b
  2466  00204E  0E03               	movlw	high (_menu+540)
  2467  002050  0100               	movlb	0	; () banked
  2468  002052  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2469  002054  0E84               	movlw	low STR_7
  2470  002056  0100               	movlb	0	; () banked
  2471  002058  6FA4               	movwf	sprintf@f& (0+255),b
  2472  00205A  0EFF               	movlw	high STR_7
  2473  00205C  0100               	movlb	0	; () banked
  2474  00205E  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2475  002060  C0DB  F0A6         	movff	_sorted_bottles,?_sprintf+4
  2476  002064  C0DC  F0A7         	movff	_sorted_bottles+1,?_sprintf+5
  2477  002068  EC15  F017         	call	_sprintf	;wreg free
  2478                           
  2479                           ;main.c: 222: sprintf(menu[3][1],"run time: %01d:%02d \0",(runTime/60),timeDiff%60);
  2480  00206C  0EA6               	movlw	low (_menu+558)
  2481  00206E  0100               	movlb	0	; () banked
  2482  002070  6FA2               	movwf	sprintf@wh& (0+255),b
  2483  002072  0E03               	movlw	high (_menu+558)
  2484  002074  0100               	movlb	0	; () banked
  2485  002076  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2486  002078  0E46               	movlw	low STR_8
  2487  00207A  0100               	movlb	0	; () banked
  2488  00207C  6FA4               	movwf	sprintf@f& (0+255),b
  2489  00207E  0EFF               	movlw	high STR_8
  2490  002080  0100               	movlb	0	; () banked
  2491  002082  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2492  002084  C0D9  F080         	movff	_runTime,___awdiv@dividend
  2493  002088  C0DA  F081         	movff	_runTime+1,___awdiv@dividend+1
  2494  00208C  0E00               	movlw	0
  2495  00208E  0100               	movlb	0	; () banked
  2496  002090  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2497  002092  0E3C               	movlw	60
  2498  002094  6F82               	movwf	___awdiv@divisor& (0+255),b
  2499  002096  ECF8  F013         	call	___awdiv	;wreg free
  2500  00209A  C080  F0A6         	movff	?___awdiv,?_sprintf+4
  2501  00209E  C081  F0A7         	movff	?___awdiv+1,?_sprintf+5
  2502  0020A2  C0DD  F080         	movff	_timeDiff,___awmod@dividend
  2503  0020A6  C0DE  F081         	movff	_timeDiff+1,___awmod@dividend+1
  2504  0020AA  0E00               	movlw	0
  2505  0020AC  0100               	movlb	0	; () banked
  2506  0020AE  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2507  0020B0  0E3C               	movlw	60
  2508  0020B2  6F82               	movwf	___awmod@divisor& (0+255),b
  2509  0020B4  ECB5  F014         	call	___awmod	;wreg free
  2510  0020B8  C080  F0A8         	movff	?___awmod,?_sprintf+6
  2511  0020BC  C081  F0A9         	movff	?___awmod+1,?_sprintf+7
  2512  0020C0  EC15  F017         	call	_sprintf	;wreg free
  2513                           
  2514                           ;main.c: 223: sprintf(menu[3][2],"en:%02d ec:%02d    ", eskaNoCap,eskaWCap);
  2515  0020C4  0EB8               	movlw	low (_menu+576)
  2516  0020C6  0100               	movlb	0	; () banked
  2517  0020C8  6FA2               	movwf	sprintf@wh& (0+255),b
  2518  0020CA  0E03               	movlw	high (_menu+576)
  2519  0020CC  0100               	movlb	0	; () banked
  2520  0020CE  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2521  0020D0  0E5C               	movlw	low STR_9
  2522  0020D2  0100               	movlb	0	; () banked
  2523  0020D4  6FA4               	movwf	sprintf@f& (0+255),b
  2524  0020D6  0EFF               	movlw	high STR_9
  2525  0020D8  0100               	movlb	0	; () banked
  2526  0020DA  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2527  0020DC  C0D5  F0A6         	movff	_eskaNoCap,?_sprintf+4
  2528  0020E0  C0D6  F0A7         	movff	_eskaNoCap+1,?_sprintf+5
  2529  0020E4  C0D7  F0A8         	movff	_eskaWCap,?_sprintf+6
  2530  0020E8  C0D8  F0A9         	movff	_eskaWCap+1,?_sprintf+7
  2531  0020EC  EC15  F017         	call	_sprintf	;wreg free
  2532                           
  2533                           ;main.c: 224: sprintf(menu[3][3],"yn:%02d yc:%02d    ", yopNoCap, yopWCap);
  2534  0020F0  0ECA               	movlw	low (_menu+594)
  2535  0020F2  0100               	movlb	0	; () banked
  2536  0020F4  6FA2               	movwf	sprintf@wh& (0+255),b
  2537  0020F6  0E03               	movlw	high (_menu+594)
  2538  0020F8  0100               	movlb	0	; () banked
  2539  0020FA  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2540  0020FC  0E70               	movlw	low STR_10
  2541  0020FE  0100               	movlb	0	; () banked
  2542  002100  6FA4               	movwf	sprintf@f& (0+255),b
  2543  002102  0EFF               	movlw	high STR_10
  2544  002104  0100               	movlb	0	; () banked
  2545  002106  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2546  002108  C0DF  F0A6         	movff	_yopNoCap,?_sprintf+4
  2547  00210C  C0E0  F0A7         	movff	_yopNoCap+1,?_sprintf+5
  2548  002110  C0E1  F0A8         	movff	_yopWCap,?_sprintf+6
  2549  002114  C0E2  F0A9         	movff	_yopWCap+1,?_sprintf+7
  2550  002118  EC15  F017         	call	_sprintf	;wreg free
  2551  00211C                     l7980:
  2552                           
  2553                           ;main.c: 225: }
  2554                           ;main.c: 226: if ((state=='m'||state=='l'||state=='c')&&timeDiff>=10){
  2555  00211C  0E6D               	movlw	109
  2556  00211E  0100               	movlb	0	; () banked
  2557  002120  19E9               	xorwf	_state& (0+255),w,b
  2558  002122  B4D8               	btfsc	status,2,c
  2559  002124  D00A               	goto	l7986
  2560                           
  2561                           ; BSR set to: 0
  2562  002126  0E6C               	movlw	108
  2563  002128  0100               	movlb	0	; () banked
  2564  00212A  19E9               	xorwf	_state& (0+255),w,b
  2565  00212C  B4D8               	btfsc	status,2,c
  2566  00212E  D005               	goto	l7986
  2567                           
  2568                           ; BSR set to: 0
  2569  002130  0E63               	movlw	99
  2570  002132  0100               	movlb	0	; () banked
  2571  002134  19E9               	xorwf	_state& (0+255),w,b
  2572  002136  A4D8               	btfss	status,2,c
  2573  002138  D00E               	goto	l7990
  2574  00213A                     l7986:
  2575                           
  2576                           ; BSR set to: 0
  2577  00213A  0100               	movlb	0	; () banked
  2578  00213C  BFDE               	btfsc	(_timeDiff+1)& (0+255),7,b
  2579  00213E  D00B               	goto	l7990
  2580  002140  0100               	movlb	0	; () banked
  2581  002142  51DE               	movf	(_timeDiff+1)& (0+255),w,b
  2582  002144  E105               	bnz	u12630
  2583  002146  0E0A               	movlw	10
  2584  002148  0100               	movlb	0	; () banked
  2585  00214A  5DDD               	subwf	_timeDiff& (0+255),w,b
  2586  00214C  A0D8               	btfss	status,0,c
  2587  00214E  D003               	goto	l7990
  2588  002150                     u12630:
  2589                           
  2590                           ; BSR set to: 0
  2591                           ;main.c: 227: nstate='r';
  2592  002150  0E72               	movlw	114
  2593  002152  0100               	movlb	0	; () banked
  2594  002154  6FE8               	movwf	_nstate& (0+255),b
  2595  002156                     l7990:
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;main.c: 228: }
  2599                           ;main.c: 229: state=nstate;
  2600  002156  C0E8  F0E9         	movff	_nstate,_state
  2601                           
  2602                           ; BSR set to: 0
  2603                           ;main.c: 237: if (state!='m'&&state!='l'&&state!='c')
  2604  00215A  0E6D               	movlw	109
  2605  00215C  0100               	movlb	0	; () banked
  2606  00215E  19E9               	xorwf	_state& (0+255),w,b
  2607  002160  B4D8               	btfsc	status,2,c
  2608  002162  D019               	goto	l8000
  2609                           
  2610                           ; BSR set to: 0
  2611  002164  0E6C               	movlw	108
  2612  002166  0100               	movlb	0	; () banked
  2613  002168  19E9               	xorwf	_state& (0+255),w,b
  2614  00216A  B4D8               	btfsc	status,2,c
  2615  00216C  D014               	goto	l8000
  2616                           
  2617                           ; BSR set to: 0
  2618  00216E  0E63               	movlw	99
  2619  002170  0100               	movlb	0	; () banked
  2620  002172  19E9               	xorwf	_state& (0+255),w,b
  2621  002174  B4D8               	btfsc	status,2,c
  2622  002176  D00F               	goto	l8000
  2623                           
  2624                           ; BSR set to: 0
  2625                           ;main.c: 238: {
  2626                           ;main.c: 239: menuIndex=1;
  2627  002178  0E00               	movlw	0
  2628  00217A  0100               	movlb	0	; () banked
  2629  00217C  6FF7               	movwf	(_menuIndex+1)& (0+255),b
  2630  00217E  0E01               	movlw	1
  2631  002180  6FF6               	movwf	_menuIndex& (0+255),b
  2632                           
  2633                           ;main.c: 240: logIndex=1;
  2634  002182  0E00               	movlw	0
  2635  002184  0100               	movlb	0	; () banked
  2636  002186  6FF5               	movwf	(_logIndex+1)& (0+255),b
  2637  002188  0E01               	movlw	1
  2638  00218A  6FF4               	movwf	_logIndex& (0+255),b
  2639                           
  2640                           ;main.c: 241: creditIndex=1;
  2641  00218C  0E00               	movlw	0
  2642  00218E  0100               	movlb	0	; () banked
  2643  002190  6FEB               	movwf	(_creditIndex+1)& (0+255),b
  2644  002192  0E01               	movlw	1
  2645  002194  6FEA               	movwf	_creditIndex& (0+255),b
  2646  002196                     l8000:
  2647                           
  2648                           ; BSR set to: 0
  2649                           ;main.c: 242: }
  2650                           ;main.c: 243: if (state!='e')
  2651  002196  0E65               	movlw	101
  2652  002198  0100               	movlb	0	; () banked
  2653  00219A  19E9               	xorwf	_state& (0+255),w,b
  2654  00219C  B4D8               	btfsc	status,2,c
  2655  00219E  D005               	goto	l8004
  2656                           
  2657                           ; BSR set to: 0
  2658                           ;main.c: 244: endIndex=1;
  2659  0021A0  0E00               	movlw	0
  2660  0021A2  0100               	movlb	0	; () banked
  2661  0021A4  6FEF               	movwf	(_endIndex+1)& (0+255),b
  2662  0021A6  0E01               	movlw	1
  2663  0021A8  6FEE               	movwf	_endIndex& (0+255),b
  2664  0021AA                     l8004:
  2665                           
  2666                           ; BSR set to: 0
  2667                           ;main.c: 245: if (state=='r'){
  2668  0021AA  0E72               	movlw	114
  2669  0021AC  0100               	movlb	0	; () banked
  2670  0021AE  19E9               	xorwf	_state& (0+255),w,b
  2671  0021B0  A4D8               	btfss	status,2,c
  2672  0021B2  0012               	return	
  2673                           
  2674                           ; BSR set to: 0
  2675                           ;main.c: 246: eskaNoCap=0;
  2676  0021B4  0E00               	movlw	0
  2677  0021B6  0100               	movlb	0	; () banked
  2678  0021B8  6FD6               	movwf	(_eskaNoCap+1)& (0+255),b
  2679  0021BA  0E00               	movlw	0
  2680  0021BC  6FD5               	movwf	_eskaNoCap& (0+255),b
  2681                           
  2682                           ;main.c: 247: eskaWCap=0;
  2683  0021BE  0E00               	movlw	0
  2684  0021C0  0100               	movlb	0	; () banked
  2685  0021C2  6FD8               	movwf	(_eskaWCap+1)& (0+255),b
  2686  0021C4  0E00               	movlw	0
  2687  0021C6  6FD7               	movwf	_eskaWCap& (0+255),b
  2688                           
  2689                           ;main.c: 248: yopNoCap=0;
  2690  0021C8  0E00               	movlw	0
  2691  0021CA  0100               	movlb	0	; () banked
  2692  0021CC  6FE0               	movwf	(_yopNoCap+1)& (0+255),b
  2693  0021CE  0E00               	movlw	0
  2694  0021D0  6FDF               	movwf	_yopNoCap& (0+255),b
  2695                           
  2696                           ;main.c: 249: yopWCap=0;
  2697  0021D2  0E00               	movlw	0
  2698  0021D4  0100               	movlb	0	; () banked
  2699  0021D6  6FE2               	movwf	(_yopWCap+1)& (0+255),b
  2700  0021D8  0E00               	movlw	0
  2701  0021DA  6FE1               	movwf	_yopWCap& (0+255),b
  2702  0021DC  0012               	return	
  2703  0021DE                     __end_of_update_state:
  2704                           	opt stack 0
  2705                           tblptru	equ	0xFF8
  2706                           tblptrh	equ	0xFF7
  2707                           tblptrl	equ	0xFF6
  2708                           tablat	equ	0xFF5
  2709                           intcon	equ	0xFF2
  2710                           intcon2	equ	0xFF1
  2711                           intcon3	equ	0xFF0
  2712                           postinc0	equ	0xFEE
  2713                           wreg	equ	0xFE8
  2714                           postinc1	equ	0xFE6
  2715                           postdec1	equ	0xFE5
  2716                           fsr1h	equ	0xFE2
  2717                           fsr1l	equ	0xFE1
  2718                           postinc2	equ	0xFDE
  2719                           postdec2	equ	0xFDD
  2720                           fsr2h	equ	0xFDA
  2721                           fsr2l	equ	0xFD9
  2722                           status	equ	0xFD8
  2723                           
  2724 ;; *************** function _update_lcd *****************
  2725 ;; Defined at:
  2726 ;;		line 144 in file "main.c"
  2727 ;; Parameters:    Size  Location     Type
  2728 ;;		None
  2729 ;; Auto vars:     Size  Location     Type
  2730 ;;  flag            2   43[BANK0 ] int 
  2731 ;;  j               2    0        int 
  2732 ;;  i               2    0        int 
  2733 ;; Return value:  Size  Location     Type
  2734 ;;                  1    wreg      void 
  2735 ;; Registers used:
  2736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2737 ;; Tracked objects:
  2738 ;;		On entry : 0/0
  2739 ;;		On exit  : 0/0
  2740 ;;		Unchanged: 0/0
  2741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2743 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2744 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2745 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2746 ;;Total ram usage:        3 bytes
  2747 ;; Hardware stack levels used:    1
  2748 ;; Hardware stack levels required when called:    9
  2749 ;; This function calls:
  2750 ;;		_lcdInst
  2751 ;;		_printf
  2752 ;;		_strcmp
  2753 ;;		_strcpy
  2754 ;; This function is called by:
  2755 ;;		_main
  2756 ;; This function uses a non-reentrant model
  2757 ;;
  2758                           
  2759                           	psect	text2
  2760  0026F2                     __ptext2:
  2761                           	opt stack 0
  2762  0026F2                     _update_lcd:
  2763                           	opt stack 21
  2764                           
  2765                           ;main.c: 145: int flag=0;
  2766                           
  2767                           ; BSR set to: 0
  2768                           ;incstack = 0
  2769  0026F2  0E00               	movlw	0
  2770  0026F4  0100               	movlb	0	; () banked
  2771  0026F6  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  2772  0026F8  0E00               	movlw	0
  2773  0026FA  6FAB               	movwf	update_lcd@flag& (0+255),b
  2774                           
  2775                           ; BSR set to: 0
  2776                           ;main.c: 146: int i,j;
  2777                           ;main.c: 148: if (strcmp(display0, ndisplay0)!=0){
  2778  0026FC  0E26               	movlw	low _display0
  2779  0026FE  0100               	movlb	0	; () banked
  2780  002700  6F80               	movwf	strcmp@s1& (0+255),b
  2781  002702  0E01               	movlw	high _display0
  2782  002704  0100               	movlb	0	; () banked
  2783  002706  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  2784  002708  0E4A               	movlw	low _ndisplay0
  2785  00270A  0100               	movlb	0	; () banked
  2786  00270C  6F82               	movwf	strcmp@s2& (0+255),b
  2787  00270E  0E01               	movlw	high _ndisplay0
  2788  002710  0100               	movlb	0	; () banked
  2789  002712  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  2790  002714  ECBF  F016         	call	_strcmp	;wreg free
  2791  002718  0100               	movlb	0	; () banked
  2792  00271A  5180               	movf	?_strcmp& (0+255),w,b
  2793  00271C  0100               	movlb	0	; () banked
  2794  00271E  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  2795  002720  B4D8               	btfsc	status,2,c
  2796  002722  D013               	goto	l8030
  2797                           
  2798                           ; BSR set to: 0
  2799                           ;main.c: 149: strcpy(display0,ndisplay0);
  2800  002724  0E26               	movlw	low _display0
  2801  002726  0100               	movlb	0	; () banked
  2802  002728  6F80               	movwf	strcpy@to& (0+255),b
  2803  00272A  0E01               	movlw	high _display0
  2804  00272C  0100               	movlb	0	; () banked
  2805  00272E  6F81               	movwf	(strcpy@to+1)& (0+255),b
  2806  002730  0E4A               	movlw	low _ndisplay0
  2807  002732  0100               	movlb	0	; () banked
  2808  002734  6F82               	movwf	strcpy@from& (0+255),b
  2809  002736  0E01               	movlw	high _ndisplay0
  2810  002738  0100               	movlb	0	; () banked
  2811  00273A  6F83               	movwf	(strcpy@from+1)& (0+255),b
  2812  00273C  EC08  F018         	call	_strcpy	;wreg free
  2813                           
  2814                           ;main.c: 150: flag=1;
  2815  002740  0E00               	movlw	0
  2816  002742  0100               	movlb	0	; () banked
  2817  002744  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  2818  002746  0E01               	movlw	1
  2819  002748  6FAB               	movwf	update_lcd@flag& (0+255),b
  2820  00274A                     l8030:
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;main.c: 151: }
  2824                           ;main.c: 152: if (strcmp(display1, ndisplay1)!=0){
  2825  00274A  0E38               	movlw	low _display1
  2826  00274C  0100               	movlb	0	; () banked
  2827  00274E  6F80               	movwf	strcmp@s1& (0+255),b
  2828  002750  0E01               	movlw	high _display1
  2829  002752  0100               	movlb	0	; () banked
  2830  002754  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  2831  002756  0E5C               	movlw	low _ndisplay1
  2832  002758  0100               	movlb	0	; () banked
  2833  00275A  6F82               	movwf	strcmp@s2& (0+255),b
  2834  00275C  0E01               	movlw	high _ndisplay1
  2835  00275E  0100               	movlb	0	; () banked
  2836  002760  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  2837  002762  ECBF  F016         	call	_strcmp	;wreg free
  2838  002766  0100               	movlb	0	; () banked
  2839  002768  5180               	movf	?_strcmp& (0+255),w,b
  2840  00276A  0100               	movlb	0	; () banked
  2841  00276C  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  2842  00276E  B4D8               	btfsc	status,2,c
  2843  002770  D013               	goto	l8036
  2844                           
  2845                           ; BSR set to: 0
  2846                           ;main.c: 153: strcpy(display1,ndisplay1);
  2847  002772  0E38               	movlw	low _display1
  2848  002774  0100               	movlb	0	; () banked
  2849  002776  6F80               	movwf	strcpy@to& (0+255),b
  2850  002778  0E01               	movlw	high _display1
  2851  00277A  0100               	movlb	0	; () banked
  2852  00277C  6F81               	movwf	(strcpy@to+1)& (0+255),b
  2853  00277E  0E5C               	movlw	low _ndisplay1
  2854  002780  0100               	movlb	0	; () banked
  2855  002782  6F82               	movwf	strcpy@from& (0+255),b
  2856  002784  0E01               	movlw	high _ndisplay1
  2857  002786  0100               	movlb	0	; () banked
  2858  002788  6F83               	movwf	(strcpy@from+1)& (0+255),b
  2859  00278A  EC08  F018         	call	_strcpy	;wreg free
  2860                           
  2861                           ;main.c: 154: flag=1;
  2862  00278E  0E00               	movlw	0
  2863  002790  0100               	movlb	0	; () banked
  2864  002792  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  2865  002794  0E01               	movlw	1
  2866  002796  6FAB               	movwf	update_lcd@flag& (0+255),b
  2867  002798                     l8036:
  2868                           
  2869                           ; BSR set to: 0
  2870                           ;main.c: 155: }
  2871                           ;main.c: 156: if (flag){
  2872  002798  0100               	movlb	0	; () banked
  2873  00279A  51AB               	movf	update_lcd@flag& (0+255),w,b
  2874  00279C  0100               	movlb	0	; () banked
  2875  00279E  11AC               	iorwf	(update_lcd@flag+1)& (0+255),w,b
  2876  0027A0  B4D8               	btfsc	status,2,c
  2877  0027A2  0012               	return	
  2878                           
  2879                           ; BSR set to: 0
  2880                           ;main.c: 157: lcdInst(0x01);_delay((unsigned long)((10)*(10000000/4000.0)));;
  2881  0027A4  0E01               	movlw	1
  2882  0027A6  ECA5  F018         	call	_lcdInst
  2883  0027AA  0E21               	movlw	33
  2884  0027AC  0100               	movlb	0	; () banked
  2885  0027AE  6FAA               	movwf	??_update_lcd& (0+255),b
  2886  0027B0  0E76               	movlw	118
  2887  0027B2                     u13067:
  2888  0027B2  2EE8               	decfsz	wreg,f,c
  2889  0027B4  D7FE               	bra	u13067
  2890  0027B6  2FAA               	decfsz	??_update_lcd& (0+255),f,b
  2891  0027B8  D7FC               	bra	u13067
  2892  0027BA  F000               	nop	
  2893                           
  2894                           ;main.c: 158: lcdInst(0b10000000);;
  2895  0027BC  0E80               	movlw	128
  2896  0027BE  ECA5  F018         	call	_lcdInst
  2897                           
  2898                           ;main.c: 159: printf(display0);
  2899  0027C2  0E26               	movlw	low _display0
  2900  0027C4  0100               	movlb	0	; () banked
  2901  0027C6  6FA2               	movwf	printf@f& (0+255),b
  2902  0027C8  0E01               	movlw	high _display0
  2903  0027CA  0100               	movlb	0	; () banked
  2904  0027CC  6FA3               	movwf	(printf@f+1)& (0+255),b
  2905  0027CE  EC67  F017         	call	_printf	;wreg free
  2906                           
  2907                           ;main.c: 160: lcdInst(0b11000000);;
  2908  0027D2  0EC0               	movlw	192
  2909  0027D4  ECA5  F018         	call	_lcdInst
  2910                           
  2911                           ;main.c: 161: printf(display1);
  2912  0027D8  0E38               	movlw	low _display1
  2913  0027DA  0100               	movlb	0	; () banked
  2914  0027DC  6FA2               	movwf	printf@f& (0+255),b
  2915  0027DE  0E01               	movlw	high _display1
  2916  0027E0  0100               	movlb	0	; () banked
  2917  0027E2  6FA3               	movwf	(printf@f+1)& (0+255),b
  2918  0027E4  EC67  F017         	call	_printf	;wreg free
  2919                           
  2920                           ;main.c: 162: lcdInst(0b10010000);;
  2921  0027E8  0E90               	movlw	144
  2922  0027EA  ECA5  F018         	call	_lcdInst
  2923  0027EE  0012               	return	
  2924  0027F0                     __end_of_update_lcd:
  2925                           	opt stack 0
  2926                           tblptru	equ	0xFF8
  2927                           tblptrh	equ	0xFF7
  2928                           tblptrl	equ	0xFF6
  2929                           tablat	equ	0xFF5
  2930                           intcon	equ	0xFF2
  2931                           intcon2	equ	0xFF1
  2932                           intcon3	equ	0xFF0
  2933                           postinc0	equ	0xFEE
  2934                           wreg	equ	0xFE8
  2935                           postinc1	equ	0xFE6
  2936                           postdec1	equ	0xFE5
  2937                           fsr1h	equ	0xFE2
  2938                           fsr1l	equ	0xFE1
  2939                           postinc2	equ	0xFDE
  2940                           postdec2	equ	0xFDD
  2941                           fsr2h	equ	0xFDA
  2942                           fsr2l	equ	0xFD9
  2943                           status	equ	0xFD8
  2944                           
  2945 ;; *************** function _strcpy *****************
  2946 ;; Defined at:
  2947 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  2948 ;; Parameters:    Size  Location     Type
  2949 ;;  to              2    0[BANK0 ] PTR unsigned char 
  2950 ;;		 -> display1(18), display0(18), 
  2951 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  2952 ;;		 -> ndisplay1(18), ndisplay0(18), 
  2953 ;; Auto vars:     Size  Location     Type
  2954 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  2955 ;;		 -> display1(18), display0(18), 
  2956 ;; Return value:  Size  Location     Type
  2957 ;;                  2    0[BANK0 ] PTR unsigned char 
  2958 ;; Registers used:
  2959 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  2960 ;; Tracked objects:
  2961 ;;		On entry : 0/0
  2962 ;;		On exit  : 0/0
  2963 ;;		Unchanged: 0/0
  2964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2965 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2966 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2968 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2969 ;;Total ram usage:        6 bytes
  2970 ;; Hardware stack levels used:    1
  2971 ;; Hardware stack levels required when called:    5
  2972 ;; This function calls:
  2973 ;;		Nothing
  2974 ;; This function is called by:
  2975 ;;		_update_lcd
  2976 ;; This function uses a non-reentrant model
  2977 ;;
  2978                           
  2979                           	psect	text3
  2980  003010                     __ptext3:
  2981                           	opt stack 0
  2982  003010                     _strcpy:
  2983                           	opt stack 24
  2984                           
  2985                           ;incstack = 0
  2986  003010  C080  F084         	movff	strcpy@to,strcpy@cp
  2987  003014  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  2988  003018  D006               	goto	l4676
  2989  00301A                     l4674:
  2990  00301A  0100               	movlb	0	; () banked
  2991  00301C  4B84               	infsnz	strcpy@cp& (0+255),f,b
  2992  00301E  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  2993  003020  0100               	movlb	0	; () banked
  2994  003022  4B82               	infsnz	strcpy@from& (0+255),f,b
  2995  003024  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  2996  003026                     l4676:
  2997  003026  C082  FFD9         	movff	strcpy@from,fsr2l
  2998  00302A  C083  FFDA         	movff	strcpy@from+1,fsr2h
  2999  00302E  C084  FFE1         	movff	strcpy@cp,fsr1l
  3000  003032  C085  FFE2         	movff	strcpy@cp+1,fsr1h
  3001  003036  CFDF FFE7          	movff	indf2,indf1
  3002  00303A  50E7               	movf	indf1,w,c
  3003  00303C  B4D8               	btfsc	status,2,c
  3004  00303E  0012               	return	
  3005  003040  D7EC               	goto	l4674
  3006  003042                     __end_of_strcpy:
  3007                           	opt stack 0
  3008                           tblptru	equ	0xFF8
  3009                           tblptrh	equ	0xFF7
  3010                           tblptrl	equ	0xFF6
  3011                           tablat	equ	0xFF5
  3012                           intcon	equ	0xFF2
  3013                           intcon2	equ	0xFF1
  3014                           intcon3	equ	0xFF0
  3015                           postinc0	equ	0xFEE
  3016                           wreg	equ	0xFE8
  3017                           indf1	equ	0xFE7
  3018                           postinc1	equ	0xFE6
  3019                           postdec1	equ	0xFE5
  3020                           fsr1h	equ	0xFE2
  3021                           fsr1l	equ	0xFE1
  3022                           indf2	equ	0xFDF
  3023                           postinc2	equ	0xFDE
  3024                           postdec2	equ	0xFDD
  3025                           fsr2h	equ	0xFDA
  3026                           fsr2l	equ	0xFD9
  3027                           status	equ	0xFD8
  3028                           
  3029 ;; *************** function _strcmp *****************
  3030 ;; Defined at:
  3031 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3034 ;;		 -> display1(18), display0(18), 
  3035 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  3036 ;;		 -> ndisplay1(18), ndisplay0(18), 
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;  r               1    5[BANK0 ] char 
  3039 ;; Return value:  Size  Location     Type
  3040 ;;                  2    0[BANK0 ] int 
  3041 ;; Registers used:
  3042 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3043 ;; Tracked objects:
  3044 ;;		On entry : 0/0
  3045 ;;		On exit  : 0/0
  3046 ;;		Unchanged: 0/0
  3047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3048 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;Total ram usage:        6 bytes
  3053 ;; Hardware stack levels used:    1
  3054 ;; Hardware stack levels required when called:    5
  3055 ;; This function calls:
  3056 ;;		Nothing
  3057 ;; This function is called by:
  3058 ;;		_update_lcd
  3059 ;; This function uses a non-reentrant model
  3060 ;;
  3061                           
  3062                           	psect	text4
  3063  002D7E                     __ptext4:
  3064                           	opt stack 0
  3065  002D7E                     _strcmp:
  3066                           	opt stack 24
  3067                           
  3068                           ;incstack = 0
  3069  002D7E  D006               	goto	l4664
  3070  002D80                     l4662:
  3071  002D80  0100               	movlb	0	; () banked
  3072  002D82  4B80               	infsnz	strcmp@s1& (0+255),f,b
  3073  002D84  2B81               	incf	(strcmp@s1+1)& (0+255),f,b
  3074  002D86  0100               	movlb	0	; () banked
  3075  002D88  4B82               	infsnz	strcmp@s2& (0+255),f,b
  3076  002D8A  2B83               	incf	(strcmp@s2+1)& (0+255),f,b
  3077  002D8C                     l4664:
  3078  002D8C  C080  FFD9         	movff	strcmp@s1,fsr2l
  3079  002D90  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3080  002D94  50DF               	movf	indf2,w,c
  3081  002D96  0100               	movlb	0	; () banked
  3082  002D98  6F84               	movwf	??_strcmp& (0+255),b
  3083  002D9A  C082  FFD9         	movff	strcmp@s2,fsr2l
  3084  002D9E  C083  FFDA         	movff	strcmp@s2+1,fsr2h
  3085  002DA2  50DF               	movf	indf2,w,c
  3086  002DA4  0800               	sublw	0
  3087  002DA6  0100               	movlb	0	; () banked
  3088  002DA8  2584               	addwf	??_strcmp& (0+255),w,b
  3089  002DAA  0100               	movlb	0	; () banked
  3090  002DAC  6F85               	movwf	strcmp@r& (0+255),b
  3091  002DAE  0100               	movlb	0	; () banked
  3092  002DB0  5185               	movf	strcmp@r& (0+255),w,b
  3093  002DB2  A4D8               	btfss	status,2,c
  3094  002DB4  D007               	goto	l4668
  3095                           
  3096                           ; BSR set to: 0
  3097  002DB6  C080  FFD9         	movff	strcmp@s1,fsr2l
  3098  002DBA  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3099  002DBE  50DF               	movf	indf2,w,c
  3100  002DC0  A4D8               	btfss	status,2,c
  3101  002DC2  D7DE               	goto	l4662
  3102  002DC4                     l4668:
  3103                           
  3104                           ; BSR set to: 0
  3105  002DC4  0100               	movlb	0	; () banked
  3106  002DC6  5185               	movf	strcmp@r& (0+255),w,b
  3107  002DC8  0100               	movlb	0	; () banked
  3108  002DCA  6F80               	movwf	?_strcmp& (0+255),b
  3109  002DCC  6B81               	clrf	(?_strcmp+1)& (0+255),b
  3110  002DCE  BF80               	btfsc	?_strcmp& (0+255),7,b
  3111  002DD0  0781               	decf	(?_strcmp+1)& (0+255),f,b
  3112  002DD2  0012               	return	
  3113  002DD4                     __end_of_strcmp:
  3114                           	opt stack 0
  3115                           tblptru	equ	0xFF8
  3116                           tblptrh	equ	0xFF7
  3117                           tblptrl	equ	0xFF6
  3118                           tablat	equ	0xFF5
  3119                           intcon	equ	0xFF2
  3120                           intcon2	equ	0xFF1
  3121                           intcon3	equ	0xFF0
  3122                           postinc0	equ	0xFEE
  3123                           wreg	equ	0xFE8
  3124                           indf1	equ	0xFE7
  3125                           postinc1	equ	0xFE6
  3126                           postdec1	equ	0xFE5
  3127                           fsr1h	equ	0xFE2
  3128                           fsr1l	equ	0xFE1
  3129                           indf2	equ	0xFDF
  3130                           postinc2	equ	0xFDE
  3131                           postdec2	equ	0xFDD
  3132                           fsr2h	equ	0xFDA
  3133                           fsr2l	equ	0xFD9
  3134                           status	equ	0xFD8
  3135                           
  3136 ;; *************** function _printf *****************
  3137 ;; Defined at:
  3138 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  3139 ;; Parameters:    Size  Location     Type
  3140 ;;  f               2   34[BANK0 ] PTR const unsigned char 
  3141 ;;		 -> STR_17(14), STR_16(15), STR_15(8), display1(18), 
  3142 ;;		 -> display0(18), 
  3143 ;; Auto vars:     Size  Location     Type
  3144 ;;  pb              4   38[BANK0 ] struct __prbuf
  3145 ;;  ap              2   36[BANK0 ] PTR void [1]
  3146 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
  3147 ;; Return value:  Size  Location     Type
  3148 ;;                  2   34[BANK0 ] int 
  3149 ;; Registers used:
  3150 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3151 ;; Tracked objects:
  3152 ;;		On entry : 0/0
  3153 ;;		On exit  : 0/0
  3154 ;;		Unchanged: 0/0
  3155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3156 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3157 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3158 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3159 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3160 ;;Total ram usage:        8 bytes
  3161 ;; Hardware stack levels used:    1
  3162 ;; Hardware stack levels required when called:    8
  3163 ;; This function calls:
  3164 ;;		__doprnt
  3165 ;; This function is called by:
  3166 ;;		_update_lcd
  3167 ;; This function uses a non-reentrant model
  3168 ;;
  3169                           
  3170                           	psect	text5
  3171  002ECE                     __ptext5:
  3172                           	opt stack 0
  3173  002ECE                     _printf:
  3174                           	opt stack 21
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;incstack = 0
  3178  002ECE  0E00               	movlw	0
  3179  002ED0  0100               	movlb	0	; () banked
  3180  002ED2  6FA6               	movwf	printf@pb& (0+255),b
  3181  002ED4  0E00               	movlw	0
  3182  002ED6  0100               	movlb	0	; () banked
  3183  002ED8  6FA7               	movwf	(printf@pb+1)& (0+255),b
  3184  002EDA  0E0A               	movlw	low _putch
  3185  002EDC  0100               	movlb	0	; () banked
  3186  002EDE  6FA8               	movwf	(printf@pb+2)& (0+255),b
  3187  002EE0  0E31               	movlw	high _putch
  3188  002EE2  0100               	movlb	0	; () banked
  3189  002EE4  6FA9               	movwf	(printf@pb+3)& (0+255),b
  3190  002EE6  0EA4               	movlw	low (?_printf+2)
  3191  002EE8  0100               	movlb	0	; () banked
  3192  002EEA  6FA4               	movwf	printf@ap& (0+255),b
  3193  002EEC  0E00               	movlw	high (?_printf+2)
  3194  002EEE  0100               	movlb	0	; () banked
  3195  002EF0  6FA5               	movwf	(printf@ap+1)& (0+255),b
  3196                           
  3197                           ; BSR set to: 0
  3198                           ;	Return value of _printf is never used
  3199  002EF2  0EA6               	movlw	low printf@pb
  3200  002EF4  0100               	movlb	0	; () banked
  3201  002EF6  6F8C               	movwf	__doprnt@pb& (0+255),b
  3202  002EF8  0E00               	movlw	high printf@pb
  3203  002EFA  0100               	movlb	0	; () banked
  3204  002EFC  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  3205  002EFE  C0A2  F08E         	movff	printf@f,__doprnt@f
  3206  002F02  C0A3  F08F         	movff	printf@f+1,__doprnt@f+1
  3207  002F06  0EA4               	movlw	low printf@ap
  3208  002F08  0100               	movlb	0	; () banked
  3209  002F0A  6F90               	movwf	__doprnt@ap& (0+255),b
  3210  002F0C  0E00               	movlw	high printf@ap
  3211  002F0E  0100               	movlb	0	; () banked
  3212  002F10  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  3213  002F12  EC09  F000         	call	__doprnt	;wreg free
  3214  002F16  0012               	return	
  3215  002F18                     __end_of_printf:
  3216                           	opt stack 0
  3217                           tblptru	equ	0xFF8
  3218                           tblptrh	equ	0xFF7
  3219                           tblptrl	equ	0xFF6
  3220                           tablat	equ	0xFF5
  3221                           intcon	equ	0xFF2
  3222                           intcon2	equ	0xFF1
  3223                           intcon3	equ	0xFF0
  3224                           postinc0	equ	0xFEE
  3225                           wreg	equ	0xFE8
  3226                           indf1	equ	0xFE7
  3227                           postinc1	equ	0xFE6
  3228                           postdec1	equ	0xFE5
  3229                           fsr1h	equ	0xFE2
  3230                           fsr1l	equ	0xFE1
  3231                           indf2	equ	0xFDF
  3232                           postinc2	equ	0xFDE
  3233                           postdec2	equ	0xFDD
  3234                           fsr2h	equ	0xFDA
  3235                           fsr2l	equ	0xFD9
  3236                           status	equ	0xFD8
  3237                           
  3238 ;; *************** function _update_display *****************
  3239 ;; Defined at:
  3240 ;;		line 184 in file "main.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;		None
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;		None
  3245 ;; Return value:  Size  Location     Type
  3246 ;;                  1    wreg      void 
  3247 ;; Registers used:
  3248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3249 ;; Tracked objects:
  3250 ;;		On entry : 0/0
  3251 ;;		On exit  : 0/0
  3252 ;;		Unchanged: 0/0
  3253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;Total ram usage:        0 bytes
  3259 ;; Hardware stack levels used:    1
  3260 ;; Hardware stack levels required when called:   10
  3261 ;; This function calls:
  3262 ;;		___awdiv
  3263 ;;		___awmod
  3264 ;;		_display_menu
  3265 ;;		_sprintf
  3266 ;; This function is called by:
  3267 ;;		_main
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           	psect	text6
  3272  00241A                     __ptext6:
  3273                           	opt stack 0
  3274  00241A                     _update_display:
  3275                           	opt stack 20
  3276                           
  3277                           ;main.c: 185: switch(state)
  3278                           
  3279                           ;incstack = 0
  3280  00241A  D0A0               	goto	l8020
  3281  00241C                     l8010:
  3282                           
  3283                           ;main.c: 188: sprintf(ndisplay0,"%02x/%02x/%02x PUSH TO", time[6],time[5],time[4]);
  3284  00241C  0E4A               	movlw	low _ndisplay0
  3285  00241E  0100               	movlb	0	; () banked
  3286  002420  6FA2               	movwf	sprintf@wh& (0+255),b
  3287  002422  0E01               	movlw	high _ndisplay0
  3288  002424  0100               	movlb	0	; () banked
  3289  002426  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3290  002428  0E18               	movlw	low STR_1
  3291  00242A  0100               	movlb	0	; () banked
  3292  00242C  6FA4               	movwf	sprintf@f& (0+255),b
  3293  00242E  0EFF               	movlw	high STR_1
  3294  002430  0100               	movlb	0	; () banked
  3295  002432  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3296  002434  C0D4  F0A6         	movff	_time+6,?_sprintf+4
  3297  002438  0100               	movlb	0	; () banked
  3298  00243A  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3299  00243C  C0D3  F0A8         	movff	_time+5,?_sprintf+6
  3300  002440  0100               	movlb	0	; () banked
  3301  002442  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3302  002444  C0D2  F0AA         	movff	_time+4,?_sprintf+8
  3303  002448  0100               	movlb	0	; () banked
  3304  00244A  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3305  00244C  EC15  F017         	call	_sprintf	;wreg free
  3306                           
  3307                           ;main.c: 189: sprintf(ndisplay1,"%02x:%02x:%02x   START", time[2],time[1],time[0]);
  3308  002450  0E5C               	movlw	low _ndisplay1
  3309  002452  0100               	movlb	0	; () banked
  3310  002454  6FA2               	movwf	sprintf@wh& (0+255),b
  3311  002456  0E01               	movlw	high _ndisplay1
  3312  002458  0100               	movlb	0	; () banked
  3313  00245A  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3314  00245C  0E2F               	movlw	low STR_2
  3315  00245E  0100               	movlb	0	; () banked
  3316  002460  6FA4               	movwf	sprintf@f& (0+255),b
  3317  002462  0EFF               	movlw	high STR_2
  3318  002464  0100               	movlb	0	; () banked
  3319  002466  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3320  002468  C0D0  F0A6         	movff	_time+2,?_sprintf+4
  3321  00246C  0100               	movlb	0	; () banked
  3322  00246E  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3323  002470  C0CF  F0A8         	movff	_time+1,?_sprintf+6
  3324  002474  0100               	movlb	0	; () banked
  3325  002476  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3326  002478  C0CE  F0AA         	movff	_time,?_sprintf+8
  3327  00247C  0100               	movlb	0	; () banked
  3328  00247E  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3329  002480  EC15  F017         	call	_sprintf	;wreg free
  3330                           
  3331                           ;main.c: 190: break;
  3332  002484  0012               	return	
  3333  002486                     l8012:
  3334                           
  3335                           ;main.c: 192: case 'l':
  3336                           ;main.c: 193: case 'c':
  3337                           ;main.c: 194: case 'e':
  3338                           ;main.c: 195: display_menu();
  3339  002486  ECDD  F00B         	call	_display_menu	;wreg free
  3340                           
  3341                           ;main.c: 196: break;
  3342  00248A  0012               	return	
  3343  00248C                     l8014:
  3344                           
  3345                           ;main.c: 198: sprintf(ndisplay0,"%d:%02d en:%02d ec:%02d ",(timeDiff/60),timeDiff%60, es
      +                          kaNoCap,eskaWCap);
  3346  00248C  0E4A               	movlw	low _ndisplay0
  3347  00248E  0100               	movlb	0	; () banked
  3348  002490  6FA2               	movwf	sprintf@wh& (0+255),b
  3349  002492  0E01               	movlw	high _ndisplay0
  3350  002494  0100               	movlb	0	; () banked
  3351  002496  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3352  002498  0EFF               	movlw	low STR_3
  3353  00249A  0100               	movlb	0	; () banked
  3354  00249C  6FA4               	movwf	sprintf@f& (0+255),b
  3355  00249E  0EFE               	movlw	high STR_3
  3356  0024A0  0100               	movlb	0	; () banked
  3357  0024A2  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3358  0024A4  C0DD  F080         	movff	_timeDiff,___awdiv@dividend
  3359  0024A8  C0DE  F081         	movff	_timeDiff+1,___awdiv@dividend+1
  3360  0024AC  0E00               	movlw	0
  3361  0024AE  0100               	movlb	0	; () banked
  3362  0024B0  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  3363  0024B2  0E3C               	movlw	60
  3364  0024B4  6F82               	movwf	___awdiv@divisor& (0+255),b
  3365  0024B6  ECF8  F013         	call	___awdiv	;wreg free
  3366  0024BA  C080  F0A6         	movff	?___awdiv,?_sprintf+4
  3367  0024BE  C081  F0A7         	movff	?___awdiv+1,?_sprintf+5
  3368  0024C2  C0DD  F080         	movff	_timeDiff,___awmod@dividend
  3369  0024C6  C0DE  F081         	movff	_timeDiff+1,___awmod@dividend+1
  3370  0024CA  0E00               	movlw	0
  3371  0024CC  0100               	movlb	0	; () banked
  3372  0024CE  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3373  0024D0  0E3C               	movlw	60
  3374  0024D2  6F82               	movwf	___awmod@divisor& (0+255),b
  3375  0024D4  ECB5  F014         	call	___awmod	;wreg free
  3376  0024D8  C080  F0A8         	movff	?___awmod,?_sprintf+6
  3377  0024DC  C081  F0A9         	movff	?___awmod+1,?_sprintf+7
  3378  0024E0  C0D5  F0AA         	movff	_eskaNoCap,?_sprintf+8
  3379  0024E4  C0D6  F0AB         	movff	_eskaNoCap+1,?_sprintf+9
  3380  0024E8  C0D7  F0AC         	movff	_eskaWCap,?_sprintf+10
  3381  0024EC  C0D8  F0AD         	movff	_eskaWCap+1,?_sprintf+11
  3382  0024F0  EC15  F017         	call	_sprintf	;wreg free
  3383                           
  3384                           ;main.c: 199: sprintf(ndisplay1,"yn:%02d yc:%02d", yopNoCap, yopWCap);
  3385  0024F4  0E5C               	movlw	low _ndisplay1
  3386  0024F6  0100               	movlb	0	; () banked
  3387  0024F8  6FA2               	movwf	sprintf@wh& (0+255),b
  3388  0024FA  0E01               	movlw	high _ndisplay1
  3389  0024FC  0100               	movlb	0	; () banked
  3390  0024FE  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3391  002500  0EA8               	movlw	low STR_4
  3392  002502  0100               	movlb	0	; () banked
  3393  002504  6FA4               	movwf	sprintf@f& (0+255),b
  3394  002506  0EFF               	movlw	high STR_4
  3395  002508  0100               	movlb	0	; () banked
  3396  00250A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3397  00250C  C0DF  F0A6         	movff	_yopNoCap,?_sprintf+4
  3398  002510  C0E0  F0A7         	movff	_yopNoCap+1,?_sprintf+5
  3399  002514  C0E1  F0A8         	movff	_yopWCap,?_sprintf+6
  3400  002518  C0E2  F0A9         	movff	_yopWCap+1,?_sprintf+7
  3401  00251C  EC15  F017         	call	_sprintf	;wreg free
  3402                           
  3403                           ;main.c: 200: break;
  3404  002520  0012               	return	
  3405  002522                     l8016:
  3406                           
  3407                           ;main.c: 202: sprintf(ndisplay0, "ERROR");
  3408  002522  0E4A               	movlw	low _ndisplay0
  3409  002524  0100               	movlb	0	; () banked
  3410  002526  6FA2               	movwf	sprintf@wh& (0+255),b
  3411  002528  0E01               	movlw	high _ndisplay0
  3412  00252A  0100               	movlb	0	; () banked
  3413  00252C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3414  00252E  0EF3               	movlw	low STR_5
  3415  002530  0100               	movlb	0	; () banked
  3416  002532  6FA4               	movwf	sprintf@f& (0+255),b
  3417  002534  0EFF               	movlw	high STR_5
  3418  002536  0100               	movlb	0	; () banked
  3419  002538  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3420  00253A  EC15  F017         	call	_sprintf	;wreg free
  3421                           
  3422                           ;main.c: 203: sprintf(ndisplay1, "EMERGENCY STOP");
  3423  00253E  0E5C               	movlw	low _ndisplay1
  3424  002540  0100               	movlb	0	; () banked
  3425  002542  6FA2               	movwf	sprintf@wh& (0+255),b
  3426  002544  0E01               	movlw	high _ndisplay1
  3427  002546  0100               	movlb	0	; () banked
  3428  002548  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3429  00254A  0EB8               	movlw	low STR_6
  3430  00254C  0100               	movlb	0	; () banked
  3431  00254E  6FA4               	movwf	sprintf@f& (0+255),b
  3432  002550  0EFF               	movlw	high STR_6
  3433  002552  0100               	movlb	0	; () banked
  3434  002554  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3435  002556  EC15  F017         	call	_sprintf	;wreg free
  3436                           
  3437                           ;main.c: 206: }
  3438                           
  3439                           ;main.c: 204: break;
  3440  00255A  0012               	return	
  3441  00255C                     l8020:
  3442  00255C  0100               	movlb	0	; () banked
  3443  00255E  51E9               	movf	_state& (0+255),w,b
  3444                           
  3445                           ; Switch size 1, requested type "space"
  3446                           ; Number of cases is 6, Range of values is 99 to 115
  3447                           ; switch strategies available:
  3448                           ; Name         Instructions Cycles
  3449                           ; simple_byte           19    10 (average)
  3450                           ;	Chosen strategy is simple_byte
  3451  002560  0A63               	xorlw	99	; case 99
  3452  002562  B4D8               	btfsc	status,2,c
  3453  002564  D790               	goto	l8012
  3454  002566  0A06               	xorlw	6	; case 101
  3455  002568  B4D8               	btfsc	status,2,c
  3456  00256A  D78D               	goto	l8012
  3457  00256C  0A09               	xorlw	9	; case 108
  3458  00256E  B4D8               	btfsc	status,2,c
  3459  002570  D78A               	goto	l8012
  3460  002572  0A01               	xorlw	1	; case 109
  3461  002574  B4D8               	btfsc	status,2,c
  3462  002576  D787               	goto	l8012
  3463  002578  0A1F               	xorlw	31	; case 114
  3464  00257A  B4D8               	btfsc	status,2,c
  3465  00257C  D74F               	goto	l8010
  3466  00257E  0A01               	xorlw	1	; case 115
  3467  002580  B4D8               	btfsc	status,2,c
  3468  002582  D784               	goto	l8014
  3469  002584  D7CE               	goto	l8016
  3470  002586                     __end_of_update_display:
  3471                           	opt stack 0
  3472                           tblptru	equ	0xFF8
  3473                           tblptrh	equ	0xFF7
  3474                           tblptrl	equ	0xFF6
  3475                           tablat	equ	0xFF5
  3476                           intcon	equ	0xFF2
  3477                           intcon2	equ	0xFF1
  3478                           intcon3	equ	0xFF0
  3479                           postinc0	equ	0xFEE
  3480                           wreg	equ	0xFE8
  3481                           indf1	equ	0xFE7
  3482                           postinc1	equ	0xFE6
  3483                           postdec1	equ	0xFE5
  3484                           fsr1h	equ	0xFE2
  3485                           fsr1l	equ	0xFE1
  3486                           indf2	equ	0xFDF
  3487                           postinc2	equ	0xFDE
  3488                           postdec2	equ	0xFDD
  3489                           fsr2h	equ	0xFDA
  3490                           fsr2l	equ	0xFD9
  3491                           status	equ	0xFD8
  3492                           
  3493 ;; *************** function _display_menu *****************
  3494 ;; Defined at:
  3495 ;;		line 252 in file "main.c"
  3496 ;; Parameters:    Size  Location     Type
  3497 ;;		None
  3498 ;; Auto vars:     Size  Location     Type
  3499 ;;  menuIndexPtr    2    8[BANK1 ] PTR int 
  3500 ;;		 -> endIndex(2), creditIndex(2), logIndex(2), menuIndex(2), 
  3501 ;;  menuSelectio    2    4[BANK1 ] int 
  3502 ;;  menuSizePtr     2    2[BANK1 ] PTR int 
  3503 ;;		 -> endSize(2), menuSize(2), creditSize(2), events(2), 
  3504 ;;  selector        2    0[BANK1 ] int 
  3505 ;; Return value:  Size  Location     Type
  3506 ;;                  1    wreg      void 
  3507 ;; Registers used:
  3508 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3509 ;; Tracked objects:
  3510 ;;		On entry : 0/0
  3511 ;;		On exit  : 0/0
  3512 ;;		Unchanged: 0/0
  3513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3514 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3515 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3516 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3517 ;;      Totals:         0       5      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3518 ;;Total ram usage:       15 bytes
  3519 ;; Hardware stack levels used:    1
  3520 ;; Hardware stack levels required when called:    9
  3521 ;; This function calls:
  3522 ;;		___wmul
  3523 ;;		_sprintf
  3524 ;; This function is called by:
  3525 ;;		_update_display
  3526 ;; This function uses a non-reentrant model
  3527 ;;
  3528                           
  3529                           	psect	text7
  3530  0017BA                     __ptext7:
  3531                           	opt stack 0
  3532  0017BA                     _display_menu:
  3533                           	opt stack 20
  3534                           
  3535                           ;main.c: 253: int menuSelection;
  3536                           ;main.c: 254: int* menuIndexPtr;
  3537                           ;main.c: 255: int* menuSizePtr;
  3538                           ;main.c: 256: int selector=0;
  3539                           
  3540                           ;incstack = 0
  3541  0017BA  0E00               	movlw	0
  3542  0017BC  0101               	movlb	1	; () banked
  3543  0017BE  6F6F               	movwf	(display_menu@selector+1)& (0+255),b
  3544  0017C0  0E00               	movlw	0
  3545  0017C2  6F6E               	movwf	display_menu@selector& (0+255),b
  3546                           
  3547                           ;main.c: 257: switch(state)
  3548  0017C4  D049               	goto	l7704
  3549  0017C6                     l7680:
  3550                           
  3551                           ;main.c: 260: menuSelection=1;
  3552  0017C6  0E00               	movlw	0
  3553  0017C8  0101               	movlb	1	; () banked
  3554  0017CA  6F73               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3555  0017CC  0E01               	movlw	1
  3556  0017CE  6F72               	movwf	display_menu@menuSelection& (0+255),b
  3557                           
  3558                           ; BSR set to: 1
  3559                           ;main.c: 261: menuIndexPtr=&logIndex;
  3560  0017D0  0EF4               	movlw	low _logIndex
  3561  0017D2  0101               	movlb	1	; () banked
  3562  0017D4  6F76               	movwf	display_menu@menuIndexPtr& (0+255),b
  3563  0017D6  0E00               	movlw	high _logIndex
  3564  0017D8  0101               	movlb	1	; () banked
  3565  0017DA  6F77               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3566                           
  3567                           ; BSR set to: 1
  3568                           ;main.c: 262: menuSizePtr=&events;
  3569  0017DC  0EF2               	movlw	low _events
  3570  0017DE  0101               	movlb	1	; () banked
  3571  0017E0  6F70               	movwf	display_menu@menuSizePtr& (0+255),b
  3572  0017E2  0E00               	movlw	high _events
  3573  0017E4  D036               	goto	L2
  3574  0017E6                     l7686:
  3575                           
  3576                           ;main.c: 265: menuSelection=2;
  3577  0017E6  0E00               	movlw	0
  3578  0017E8  0101               	movlb	1	; () banked
  3579  0017EA  6F73               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3580  0017EC  0E02               	movlw	2
  3581  0017EE  6F72               	movwf	display_menu@menuSelection& (0+255),b
  3582                           
  3583                           ; BSR set to: 1
  3584                           ;main.c: 266: menuIndexPtr=&creditIndex;
  3585  0017F0  0EEA               	movlw	low _creditIndex
  3586  0017F2  0101               	movlb	1	; () banked
  3587  0017F4  6F76               	movwf	display_menu@menuIndexPtr& (0+255),b
  3588  0017F6  0E00               	movlw	high _creditIndex
  3589  0017F8  0101               	movlb	1	; () banked
  3590  0017FA  6F77               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3591                           
  3592                           ; BSR set to: 1
  3593                           ;main.c: 267: menuSizePtr=&creditSize;
  3594  0017FC  0EEC               	movlw	low _creditSize
  3595  0017FE  0101               	movlb	1	; () banked
  3596  001800  6F70               	movwf	display_menu@menuSizePtr& (0+255),b
  3597  001802  0E00               	movlw	high _creditSize
  3598  001804  D026               	goto	L2
  3599  001806                     l7692:
  3600                           
  3601                           ;main.c: 271: menuSelection=0;
  3602  001806  0E00               	movlw	0
  3603  001808  0101               	movlb	1	; () banked
  3604  00180A  6F73               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3605  00180C  0E00               	movlw	0
  3606  00180E  6F72               	movwf	display_menu@menuSelection& (0+255),b
  3607                           
  3608                           ; BSR set to: 1
  3609                           ;main.c: 272: menuIndexPtr=&menuIndex;
  3610  001810  0EF6               	movlw	low _menuIndex
  3611  001812  0101               	movlb	1	; () banked
  3612  001814  6F76               	movwf	display_menu@menuIndexPtr& (0+255),b
  3613  001816  0E00               	movlw	high _menuIndex
  3614  001818  0101               	movlb	1	; () banked
  3615  00181A  6F77               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3616                           
  3617                           ; BSR set to: 1
  3618                           ;main.c: 273: menuSizePtr=&menuSize;
  3619  00181C  0EF8               	movlw	low _menuSize
  3620  00181E  0101               	movlb	1	; () banked
  3621  001820  6F70               	movwf	display_menu@menuSizePtr& (0+255),b
  3622  001822  0E00               	movlw	high _menuSize
  3623  001824  0101               	movlb	1	; () banked
  3624  001826  6F71               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  3625                           
  3626                           ;main.c: 274: selector=1;
  3627  001828  0E00               	movlw	0
  3628  00182A  0101               	movlb	1	; () banked
  3629  00182C  6F6F               	movwf	(display_menu@selector+1)& (0+255),b
  3630  00182E  0E01               	movlw	1
  3631  001830  6F6E               	movwf	display_menu@selector& (0+255),b
  3632                           
  3633                           ;main.c: 275: break;
  3634  001832  D01F               	goto	l7706
  3635  001834                     l7698:
  3636                           
  3637                           ;main.c: 277: menuSelection=3;
  3638  001834  0E00               	movlw	0
  3639  001836  0101               	movlb	1	; () banked
  3640  001838  6F73               	movwf	(display_menu@menuSelection+1)& (0+255),b
  3641  00183A  0E03               	movlw	3
  3642  00183C  6F72               	movwf	display_menu@menuSelection& (0+255),b
  3643                           
  3644                           ; BSR set to: 1
  3645                           ;main.c: 278: menuIndexPtr=&endIndex;
  3646  00183E  0EEE               	movlw	low _endIndex
  3647  001840  0101               	movlb	1	; () banked
  3648  001842  6F76               	movwf	display_menu@menuIndexPtr& (0+255),b
  3649  001844  0E00               	movlw	high _endIndex
  3650  001846  0101               	movlb	1	; () banked
  3651  001848  6F77               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  3652                           
  3653                           ; BSR set to: 1
  3654                           ;main.c: 279: menuSizePtr=&endSize;
  3655  00184A  0EF0               	movlw	low _endSize
  3656  00184C  0101               	movlb	1	; () banked
  3657  00184E  6F70               	movwf	display_menu@menuSizePtr& (0+255),b
  3658  001850  0E00               	movlw	high _endSize
  3659  001852                     L2:
  3660  001852  0101               	movlb	1	; () banked
  3661  001854  6F71               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  3662                           
  3663                           ;main.c: 280: }
  3664  001856  D00D               	goto	l7706
  3665  001858                     l7704:
  3666                           
  3667                           ; BSR set to: 1
  3668  001858  0100               	movlb	0	; () banked
  3669  00185A  51E9               	movf	_state& (0+255),w,b
  3670                           
  3671                           ; Switch size 1, requested type "space"
  3672                           ; Number of cases is 4, Range of values is 99 to 109
  3673                           ; switch strategies available:
  3674                           ; Name         Instructions Cycles
  3675                           ; simple_byte           13     7 (average)
  3676                           ;	Chosen strategy is simple_byte
  3677  00185C  0A63               	xorlw	99	; case 99
  3678  00185E  B4D8               	btfsc	status,2,c
  3679  001860  D7C2               	goto	l7686
  3680  001862  0A06               	xorlw	6	; case 101
  3681  001864  B4D8               	btfsc	status,2,c
  3682  001866  D7E6               	goto	l7698
  3683  001868  0A09               	xorlw	9	; case 108
  3684  00186A  B4D8               	btfsc	status,2,c
  3685  00186C  D7AC               	goto	l7680
  3686  00186E  0A01               	xorlw	1	; case 109
  3687  001870  D7CA               	goto	l7692
  3688  001872                     l7706:
  3689                           
  3690                           ;main.c: 281: if (selector){
  3691  001872  0101               	movlb	1	; () banked
  3692  001874  516E               	movf	display_menu@selector& (0+255),w,b
  3693  001876  0101               	movlb	1	; () banked
  3694  001878  116F               	iorwf	(display_menu@selector+1)& (0+255),w,b
  3695  00187A  B4D8               	btfsc	status,2,c
  3696  00187C  D14A               	goto	l7722
  3697                           
  3698                           ; BSR set to: 1
  3699                           ;main.c: 282: if (*menuIndexPtr<*menuSizePtr){
  3700  00187E  C170  FFD9         	movff	display_menu@menuSizePtr,fsr2l
  3701  001882  C171  FFDA         	movff	display_menu@menuSizePtr+1,fsr2h
  3702  001886  C176  FFE1         	movff	display_menu@menuIndexPtr,fsr1l
  3703  00188A  C177  FFE2         	movff	display_menu@menuIndexPtr+1,fsr1h
  3704  00188E  50DE               	movf	postinc2,w,c
  3705  001890  5CE6               	subwf	postinc1,w,c
  3706  001892  50E6               	movf	postinc1,w,c
  3707  001894  0A80               	xorlw	128
  3708  001896  0100               	movlb	0	; () banked
  3709  001898  6FB8               	movwf	(??_display_menu+4)& (0+255),b
  3710  00189A  50DE               	movf	postinc2,w,c
  3711  00189C  0A80               	xorlw	128
  3712  00189E  0100               	movlb	0	; () banked
  3713  0018A0  59B8               	subwfb	(??_display_menu+4)& (0+255),w,b
  3714  0018A2  B0D8               	btfsc	status,0,c
  3715  0018A4  D096               	goto	l7716
  3716                           
  3717                           ; BSR set to: 0
  3718                           ;main.c: 283: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  3719  0018A6  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  3720  0018AA  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  3721  0018AE  0E00               	movlw	0
  3722  0018B0  0100               	movlb	0	; () banked
  3723  0018B2  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3724  0018B4  0EB4               	movlw	180
  3725  0018B6  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3726  0018B8  ECD2  F017         	call	___wmul	;wreg free
  3727  0018BC  0E78               	movlw	low _menu
  3728  0018BE  0100               	movlb	0	; () banked
  3729  0018C0  6FB4               	movwf	??_display_menu& (0+255),b
  3730  0018C2  0E01               	movlw	high _menu
  3731  0018C4  0100               	movlb	0	; () banked
  3732  0018C6  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  3733  0018C8  0100               	movlb	0	; () banked
  3734  0018CA  5180               	movf	?___wmul& (0+255),w,b
  3735  0018CC  0100               	movlb	0	; () banked
  3736  0018CE  27B4               	addwf	??_display_menu& (0+255),f,b
  3737  0018D0  0100               	movlb	0	; () banked
  3738  0018D2  5181               	movf	(?___wmul+1)& (0+255),w,b
  3739  0018D4  0100               	movlb	0	; () banked
  3740  0018D6  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  3741  0018D8  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  3742  0018DC  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  3743  0018E0  CFDE F0B6          	movff	postinc2,??_display_menu+2
  3744  0018E4  CFDD F0B7          	movff	postdec2,??_display_menu+3
  3745  0018E8  0EFF               	movlw	255
  3746  0018EA  0100               	movlb	0	; () banked
  3747  0018EC  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  3748  0018EE  0100               	movlb	0	; () banked
  3749  0018F0  6F80               	movwf	___wmul@multiplier& (0+255),b
  3750  0018F2  0EFF               	movlw	255
  3751  0018F4  0100               	movlb	0	; () banked
  3752  0018F6  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  3753  0018F8  0100               	movlb	0	; () banked
  3754  0018FA  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  3755  0018FC  0E00               	movlw	0
  3756  0018FE  0100               	movlb	0	; () banked
  3757  001900  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3758  001902  0E12               	movlw	18
  3759  001904  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3760  001906  ECD2  F017         	call	___wmul	;wreg free
  3761  00190A  0100               	movlb	0	; () banked
  3762  00190C  5180               	movf	?___wmul& (0+255),w,b
  3763  00190E  0100               	movlb	0	; () banked
  3764  001910  25B4               	addwf	??_display_menu& (0+255),w,b
  3765  001912  0101               	movlb	1	; () banked
  3766  001914  6F74               	movwf	_display_menu$1104& (0+255),b
  3767  001916  0100               	movlb	0	; () banked
  3768  001918  5181               	movf	(?___wmul+1)& (0+255),w,b
  3769  00191A  0100               	movlb	0	; () banked
  3770  00191C  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  3771  00191E  0101               	movlb	1	; () banked
  3772  001920  6F75               	movwf	(_display_menu$1104+1)& (0+255),b
  3773                           
  3774                           ; BSR set to: 1
  3775                           ;main.c: 283: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  3776  001922  0E4A               	movlw	low _ndisplay0
  3777  001924  0100               	movlb	0	; () banked
  3778  001926  6FA2               	movwf	sprintf@wh& (0+255),b
  3779  001928  0E01               	movlw	high _ndisplay0
  3780  00192A  0100               	movlb	0	; () banked
  3781  00192C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3782  00192E  0EF9               	movlw	low STR_11
  3783  001930  0100               	movlb	0	; () banked
  3784  001932  6FA4               	movwf	sprintf@f& (0+255),b
  3785  001934  0EFF               	movlw	high STR_11
  3786  001936  0100               	movlb	0	; () banked
  3787  001938  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3788  00193A  C174  F0A6         	movff	_display_menu$1104,?_sprintf+4
  3789  00193E  C175  F0A7         	movff	_display_menu$1104+1,?_sprintf+5
  3790  001942  0E00               	movlw	0
  3791  001944  0100               	movlb	0	; () banked
  3792  001946  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  3793  001948  0E3C               	movlw	60
  3794  00194A  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  3795  00194C  EC15  F017         	call	_sprintf	;wreg free
  3796                           
  3797                           ;main.c: 284: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  3798  001950  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  3799  001954  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  3800  001958  0E00               	movlw	0
  3801  00195A  0100               	movlb	0	; () banked
  3802  00195C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3803  00195E  0EB4               	movlw	180
  3804  001960  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3805  001962  ECD2  F017         	call	___wmul	;wreg free
  3806  001966  0E78               	movlw	low _menu
  3807  001968  0100               	movlb	0	; () banked
  3808  00196A  6FB4               	movwf	??_display_menu& (0+255),b
  3809  00196C  0E01               	movlw	high _menu
  3810  00196E  0100               	movlb	0	; () banked
  3811  001970  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  3812  001972  0100               	movlb	0	; () banked
  3813  001974  5180               	movf	?___wmul& (0+255),w,b
  3814  001976  0100               	movlb	0	; () banked
  3815  001978  27B4               	addwf	??_display_menu& (0+255),f,b
  3816  00197A  0100               	movlb	0	; () banked
  3817  00197C  5181               	movf	(?___wmul+1)& (0+255),w,b
  3818  00197E  0100               	movlb	0	; () banked
  3819  001980  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  3820  001982  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  3821  001986  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  3822  00198A  CFDE F080          	movff	postinc2,___wmul@multiplier
  3823  00198E  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  3824  001992  0E00               	movlw	0
  3825  001994  0100               	movlb	0	; () banked
  3826  001996  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3827  001998  0E12               	movlw	18
  3828  00199A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3829  00199C  ECD2  F017         	call	___wmul	;wreg free
  3830  0019A0  0100               	movlb	0	; () banked
  3831  0019A2  5180               	movf	?___wmul& (0+255),w,b
  3832  0019A4  0100               	movlb	0	; () banked
  3833  0019A6  25B4               	addwf	??_display_menu& (0+255),w,b
  3834  0019A8  0101               	movlb	1	; () banked
  3835  0019AA  6F74               	movwf	_display_menu$1104& (0+255),b
  3836  0019AC  0100               	movlb	0	; () banked
  3837  0019AE  5181               	movf	(?___wmul+1)& (0+255),w,b
  3838  0019B0  0100               	movlb	0	; () banked
  3839  0019B2  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  3840  0019B4  0101               	movlb	1	; () banked
  3841  0019B6  6F75               	movwf	(_display_menu$1104+1)& (0+255),b
  3842                           
  3843                           ;main.c: 284: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  3844  0019B8  0E5C               	movlw	low _ndisplay1
  3845  0019BA  0100               	movlb	0	; () banked
  3846  0019BC  6FA2               	movwf	sprintf@wh& (0+255),b
  3847  0019BE  0E01               	movlw	high _ndisplay1
  3848  0019C0  0100               	movlb	0	; () banked
  3849  0019C2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3850  0019C4  C174  F0A4         	movff	_display_menu$1104,sprintf@f
  3851  0019C8  C175  F0A5         	movff	_display_menu$1104+1,sprintf@f+1
  3852  0019CC  EC15  F017         	call	_sprintf	;wreg free
  3853                           
  3854                           ;main.c: 285: }
  3855  0019D0  0012               	return	
  3856  0019D2                     l7716:
  3857                           
  3858                           ;main.c: 286: else{
  3859                           ;main.c: 287: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  3860  0019D2  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  3861  0019D6  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  3862  0019DA  0E00               	movlw	0
  3863  0019DC  0100               	movlb	0	; () banked
  3864  0019DE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3865  0019E0  0EB4               	movlw	180
  3866  0019E2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3867  0019E4  ECD2  F017         	call	___wmul	;wreg free
  3868  0019E8  0E78               	movlw	low _menu
  3869  0019EA  0100               	movlb	0	; () banked
  3870  0019EC  6FB4               	movwf	??_display_menu& (0+255),b
  3871  0019EE  0E01               	movlw	high _menu
  3872  0019F0  0100               	movlb	0	; () banked
  3873  0019F2  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  3874  0019F4  0100               	movlb	0	; () banked
  3875  0019F6  5180               	movf	?___wmul& (0+255),w,b
  3876  0019F8  0100               	movlb	0	; () banked
  3877  0019FA  27B4               	addwf	??_display_menu& (0+255),f,b
  3878  0019FC  0100               	movlb	0	; () banked
  3879  0019FE  5181               	movf	(?___wmul+1)& (0+255),w,b
  3880  001A00  0100               	movlb	0	; () banked
  3881  001A02  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  3882  001A04  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  3883  001A08  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  3884  001A0C  CFDE F0B6          	movff	postinc2,??_display_menu+2
  3885  001A10  CFDD F0B7          	movff	postdec2,??_display_menu+3
  3886  001A14  0EFE               	movlw	254
  3887  001A16  0100               	movlb	0	; () banked
  3888  001A18  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  3889  001A1A  0100               	movlb	0	; () banked
  3890  001A1C  6F80               	movwf	___wmul@multiplier& (0+255),b
  3891  001A1E  0EFF               	movlw	255
  3892  001A20  0100               	movlb	0	; () banked
  3893  001A22  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  3894  001A24  0100               	movlb	0	; () banked
  3895  001A26  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  3896  001A28  0E00               	movlw	0
  3897  001A2A  0100               	movlb	0	; () banked
  3898  001A2C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3899  001A2E  0E12               	movlw	18
  3900  001A30  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3901  001A32  ECD2  F017         	call	___wmul	;wreg free
  3902  001A36  0100               	movlb	0	; () banked
  3903  001A38  5180               	movf	?___wmul& (0+255),w,b
  3904  001A3A  0100               	movlb	0	; () banked
  3905  001A3C  25B4               	addwf	??_display_menu& (0+255),w,b
  3906  001A3E  0101               	movlb	1	; () banked
  3907  001A40  6F74               	movwf	_display_menu$1104& (0+255),b
  3908  001A42  0100               	movlb	0	; () banked
  3909  001A44  5181               	movf	(?___wmul+1)& (0+255),w,b
  3910  001A46  0100               	movlb	0	; () banked
  3911  001A48  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  3912  001A4A  0101               	movlb	1	; () banked
  3913  001A4C  6F75               	movwf	(_display_menu$1104+1)& (0+255),b
  3914                           
  3915                           ; BSR set to: 1
  3916                           ;main.c: 286: else{
  3917                           ;main.c: 287: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  3918  001A4E  0E4A               	movlw	low _ndisplay0
  3919  001A50  0100               	movlb	0	; () banked
  3920  001A52  6FA2               	movwf	sprintf@wh& (0+255),b
  3921  001A54  0E01               	movlw	high _ndisplay0
  3922  001A56  0100               	movlb	0	; () banked
  3923  001A58  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3924  001A5A  C174  F0A4         	movff	_display_menu$1104,sprintf@f
  3925  001A5E  C175  F0A5         	movff	_display_menu$1104+1,sprintf@f+1
  3926  001A62  EC15  F017         	call	_sprintf	;wreg free
  3927                           
  3928                           ;main.c: 288: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  3929  001A66  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  3930  001A6A  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  3931  001A6E  0E00               	movlw	0
  3932  001A70  0100               	movlb	0	; () banked
  3933  001A72  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3934  001A74  0EB4               	movlw	180
  3935  001A76  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3936  001A78  ECD2  F017         	call	___wmul	;wreg free
  3937  001A7C  0E78               	movlw	low _menu
  3938  001A7E  0100               	movlb	0	; () banked
  3939  001A80  6FB4               	movwf	??_display_menu& (0+255),b
  3940  001A82  0E01               	movlw	high _menu
  3941  001A84  0100               	movlb	0	; () banked
  3942  001A86  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  3943  001A88  0100               	movlb	0	; () banked
  3944  001A8A  5180               	movf	?___wmul& (0+255),w,b
  3945  001A8C  0100               	movlb	0	; () banked
  3946  001A8E  27B4               	addwf	??_display_menu& (0+255),f,b
  3947  001A90  0100               	movlb	0	; () banked
  3948  001A92  5181               	movf	(?___wmul+1)& (0+255),w,b
  3949  001A94  0100               	movlb	0	; () banked
  3950  001A96  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  3951  001A98  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  3952  001A9C  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  3953  001AA0  CFDE F0B6          	movff	postinc2,??_display_menu+2
  3954  001AA4  CFDD F0B7          	movff	postdec2,??_display_menu+3
  3955  001AA8  0EFF               	movlw	255
  3956  001AAA  0100               	movlb	0	; () banked
  3957  001AAC  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  3958  001AAE  0100               	movlb	0	; () banked
  3959  001AB0  6F80               	movwf	___wmul@multiplier& (0+255),b
  3960  001AB2  0EFF               	movlw	255
  3961  001AB4  0100               	movlb	0	; () banked
  3962  001AB6  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  3963  001AB8  0100               	movlb	0	; () banked
  3964  001ABA  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  3965  001ABC  0E00               	movlw	0
  3966  001ABE  0100               	movlb	0	; () banked
  3967  001AC0  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  3968  001AC2  0E12               	movlw	18
  3969  001AC4  6F82               	movwf	___wmul@multiplicand& (0+255),b
  3970  001AC6  ECD2  F017         	call	___wmul	;wreg free
  3971  001ACA  0100               	movlb	0	; () banked
  3972  001ACC  5180               	movf	?___wmul& (0+255),w,b
  3973  001ACE  0100               	movlb	0	; () banked
  3974  001AD0  25B4               	addwf	??_display_menu& (0+255),w,b
  3975  001AD2  0101               	movlb	1	; () banked
  3976  001AD4  6F74               	movwf	_display_menu$1104& (0+255),b
  3977  001AD6  0100               	movlb	0	; () banked
  3978  001AD8  5181               	movf	(?___wmul+1)& (0+255),w,b
  3979  001ADA  0100               	movlb	0	; () banked
  3980  001ADC  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  3981  001ADE  0101               	movlb	1	; () banked
  3982  001AE0  6F75               	movwf	(_display_menu$1104+1)& (0+255),b
  3983                           
  3984                           ;main.c: 288: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  3985  001AE2  0E5C               	movlw	low _ndisplay1
  3986  001AE4  0100               	movlb	0	; () banked
  3987  001AE6  6FA2               	movwf	sprintf@wh& (0+255),b
  3988  001AE8  0E01               	movlw	high _ndisplay1
  3989  001AEA  0100               	movlb	0	; () banked
  3990  001AEC  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3991  001AEE  0EF9               	movlw	low STR_11
  3992  001AF0  0100               	movlb	0	; () banked
  3993  001AF2  6FA4               	movwf	sprintf@f& (0+255),b
  3994  001AF4  0EFF               	movlw	high STR_11
  3995  001AF6  0100               	movlb	0	; () banked
  3996  001AF8  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3997  001AFA  C174  F0A6         	movff	_display_menu$1104,?_sprintf+4
  3998  001AFE  C175  F0A7         	movff	_display_menu$1104+1,?_sprintf+5
  3999  001B02  0E00               	movlw	0
  4000  001B04  0100               	movlb	0	; () banked
  4001  001B06  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4002  001B08  0E3C               	movlw	60
  4003  001B0A  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4004  001B0C  EC15  F017         	call	_sprintf	;wreg free
  4005                           
  4006                           ;main.c: 289: }
  4007                           ;main.c: 290: }
  4008  001B10  0012               	return	
  4009  001B12                     l7722:
  4010                           
  4011                           ;main.c: 291: else{
  4012                           ;main.c: 292: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  4013  001B12  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4014  001B16  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4015  001B1A  0E00               	movlw	0
  4016  001B1C  0100               	movlb	0	; () banked
  4017  001B1E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4018  001B20  0EB4               	movlw	180
  4019  001B22  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4020  001B24  ECD2  F017         	call	___wmul	;wreg free
  4021  001B28  0E78               	movlw	low _menu
  4022  001B2A  0100               	movlb	0	; () banked
  4023  001B2C  6FB4               	movwf	??_display_menu& (0+255),b
  4024  001B2E  0E01               	movlw	high _menu
  4025  001B30  0100               	movlb	0	; () banked
  4026  001B32  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4027  001B34  0100               	movlb	0	; () banked
  4028  001B36  5180               	movf	?___wmul& (0+255),w,b
  4029  001B38  0100               	movlb	0	; () banked
  4030  001B3A  27B4               	addwf	??_display_menu& (0+255),f,b
  4031  001B3C  0100               	movlb	0	; () banked
  4032  001B3E  5181               	movf	(?___wmul+1)& (0+255),w,b
  4033  001B40  0100               	movlb	0	; () banked
  4034  001B42  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4035  001B44  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4036  001B48  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4037  001B4C  CFDE F0B6          	movff	postinc2,??_display_menu+2
  4038  001B50  CFDD F0B7          	movff	postdec2,??_display_menu+3
  4039  001B54  0EFF               	movlw	255
  4040  001B56  0100               	movlb	0	; () banked
  4041  001B58  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  4042  001B5A  0100               	movlb	0	; () banked
  4043  001B5C  6F80               	movwf	___wmul@multiplier& (0+255),b
  4044  001B5E  0EFF               	movlw	255
  4045  001B60  0100               	movlb	0	; () banked
  4046  001B62  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  4047  001B64  0100               	movlb	0	; () banked
  4048  001B66  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4049  001B68  0E00               	movlw	0
  4050  001B6A  0100               	movlb	0	; () banked
  4051  001B6C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4052  001B6E  0E12               	movlw	18
  4053  001B70  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4054  001B72  ECD2  F017         	call	___wmul	;wreg free
  4055  001B76  0100               	movlb	0	; () banked
  4056  001B78  5180               	movf	?___wmul& (0+255),w,b
  4057  001B7A  0100               	movlb	0	; () banked
  4058  001B7C  25B4               	addwf	??_display_menu& (0+255),w,b
  4059  001B7E  0101               	movlb	1	; () banked
  4060  001B80  6F74               	movwf	_display_menu$1104& (0+255),b
  4061  001B82  0100               	movlb	0	; () banked
  4062  001B84  5181               	movf	(?___wmul+1)& (0+255),w,b
  4063  001B86  0100               	movlb	0	; () banked
  4064  001B88  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4065  001B8A  0101               	movlb	1	; () banked
  4066  001B8C  6F75               	movwf	(_display_menu$1104+1)& (0+255),b
  4067                           
  4068                           ; BSR set to: 1
  4069                           ;main.c: 291: else{
  4070                           ;main.c: 292: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  4071  001B8E  0E4A               	movlw	low _ndisplay0
  4072  001B90  0100               	movlb	0	; () banked
  4073  001B92  6FA2               	movwf	sprintf@wh& (0+255),b
  4074  001B94  0E01               	movlw	high _ndisplay0
  4075  001B96  0100               	movlb	0	; () banked
  4076  001B98  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4077  001B9A  0EF9               	movlw	low STR_11
  4078  001B9C  0100               	movlb	0	; () banked
  4079  001B9E  6FA4               	movwf	sprintf@f& (0+255),b
  4080  001BA0  0EFF               	movlw	high STR_11
  4081  001BA2  0100               	movlb	0	; () banked
  4082  001BA4  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4083  001BA6  C174  F0A6         	movff	_display_menu$1104,?_sprintf+4
  4084  001BAA  C175  F0A7         	movff	_display_menu$1104+1,?_sprintf+5
  4085  001BAE  0E00               	movlw	0
  4086  001BB0  0100               	movlb	0	; () banked
  4087  001BB2  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4088  001BB4  0E5E               	movlw	94
  4089  001BB6  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4090  001BB8  EC15  F017         	call	_sprintf	;wreg free
  4091                           
  4092                           ;main.c: 293: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4093  001BBC  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4094  001BC0  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4095  001BC4  0E00               	movlw	0
  4096  001BC6  0100               	movlb	0	; () banked
  4097  001BC8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4098  001BCA  0EB4               	movlw	180
  4099  001BCC  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4100  001BCE  ECD2  F017         	call	___wmul	;wreg free
  4101  001BD2  0E78               	movlw	low _menu
  4102  001BD4  0100               	movlb	0	; () banked
  4103  001BD6  6FB4               	movwf	??_display_menu& (0+255),b
  4104  001BD8  0E01               	movlw	high _menu
  4105  001BDA  0100               	movlb	0	; () banked
  4106  001BDC  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4107  001BDE  0100               	movlb	0	; () banked
  4108  001BE0  5180               	movf	?___wmul& (0+255),w,b
  4109  001BE2  0100               	movlb	0	; () banked
  4110  001BE4  27B4               	addwf	??_display_menu& (0+255),f,b
  4111  001BE6  0100               	movlb	0	; () banked
  4112  001BE8  5181               	movf	(?___wmul+1)& (0+255),w,b
  4113  001BEA  0100               	movlb	0	; () banked
  4114  001BEC  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4115  001BEE  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4116  001BF2  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4117  001BF6  CFDE F080          	movff	postinc2,___wmul@multiplier
  4118  001BFA  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  4119  001BFE  0E00               	movlw	0
  4120  001C00  0100               	movlb	0	; () banked
  4121  001C02  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4122  001C04  0E12               	movlw	18
  4123  001C06  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4124  001C08  ECD2  F017         	call	___wmul	;wreg free
  4125  001C0C  0100               	movlb	0	; () banked
  4126  001C0E  5180               	movf	?___wmul& (0+255),w,b
  4127  001C10  0100               	movlb	0	; () banked
  4128  001C12  25B4               	addwf	??_display_menu& (0+255),w,b
  4129  001C14  0101               	movlb	1	; () banked
  4130  001C16  6F74               	movwf	_display_menu$1104& (0+255),b
  4131  001C18  0100               	movlb	0	; () banked
  4132  001C1A  5181               	movf	(?___wmul+1)& (0+255),w,b
  4133  001C1C  0100               	movlb	0	; () banked
  4134  001C1E  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4135  001C20  0101               	movlb	1	; () banked
  4136  001C22  6F75               	movwf	(_display_menu$1104+1)& (0+255),b
  4137                           
  4138                           ;main.c: 293: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4139  001C24  0E5C               	movlw	low _ndisplay1
  4140  001C26  0100               	movlb	0	; () banked
  4141  001C28  6FA2               	movwf	sprintf@wh& (0+255),b
  4142  001C2A  0E01               	movlw	high _ndisplay1
  4143  001C2C  0100               	movlb	0	; () banked
  4144  001C2E  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4145  001C30  0EF9               	movlw	low STR_11
  4146  001C32  0100               	movlb	0	; () banked
  4147  001C34  6FA4               	movwf	sprintf@f& (0+255),b
  4148  001C36  0EFF               	movlw	high STR_11
  4149  001C38  0100               	movlb	0	; () banked
  4150  001C3A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4151  001C3C  C174  F0A6         	movff	_display_menu$1104,?_sprintf+4
  4152  001C40  C175  F0A7         	movff	_display_menu$1104+1,?_sprintf+5
  4153  001C44  0E00               	movlw	0
  4154  001C46  0100               	movlb	0	; () banked
  4155  001C48  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4156  001C4A  0E5E               	movlw	94
  4157  001C4C  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4158  001C4E  EC15  F017         	call	_sprintf	;wreg free
  4159  001C52  0012               	return	
  4160  001C54                     __end_of_display_menu:
  4161                           	opt stack 0
  4162                           tblptru	equ	0xFF8
  4163                           tblptrh	equ	0xFF7
  4164                           tblptrl	equ	0xFF6
  4165                           tablat	equ	0xFF5
  4166                           intcon	equ	0xFF2
  4167                           intcon2	equ	0xFF1
  4168                           intcon3	equ	0xFF0
  4169                           postinc0	equ	0xFEE
  4170                           wreg	equ	0xFE8
  4171                           indf1	equ	0xFE7
  4172                           postinc1	equ	0xFE6
  4173                           postdec1	equ	0xFE5
  4174                           fsr1h	equ	0xFE2
  4175                           fsr1l	equ	0xFE1
  4176                           indf2	equ	0xFDF
  4177                           postinc2	equ	0xFDE
  4178                           postdec2	equ	0xFDD
  4179                           fsr2h	equ	0xFDA
  4180                           fsr2l	equ	0xFD9
  4181                           status	equ	0xFD8
  4182                           
  4183 ;; *************** function _sprintf *****************
  4184 ;; Defined at:
  4185 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  4186 ;; Parameters:    Size  Location     Type
  4187 ;;  wh              2   34[BANK0 ] PTR unsigned char 
  4188 ;;		 -> menu(720), ndisplay1(18), ndisplay0(18), 
  4189 ;;  f               2   36[BANK0 ] PTR const unsigned char 
  4190 ;;		 -> STR_14(5), STR_13(5), STR_12(5), STR_11(5), 
  4191 ;;		 -> STR_10(20), STR_9(20), STR_8(22), STR_7(19), 
  4192 ;;		 -> menu(720), STR_6(15), STR_5(6), STR_4(16), 
  4193 ;;		 -> STR_3(25), STR_2(23), STR_1(23), 
  4194 ;; Auto vars:     Size  Location     Type
  4195 ;;  pb              4   48[BANK0 ] struct __prbuf
  4196 ;;  ap              2   46[BANK0 ] PTR void [1]
  4197 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4198 ;; Return value:  Size  Location     Type
  4199 ;;                  2   34[BANK0 ] int 
  4200 ;; Registers used:
  4201 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4202 ;; Tracked objects:
  4203 ;;		On entry : 0/0
  4204 ;;		On exit  : 0/0
  4205 ;;		Unchanged: 0/0
  4206 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4207 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4208 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4209 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4210 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4211 ;;Total ram usage:       18 bytes
  4212 ;; Hardware stack levels used:    1
  4213 ;; Hardware stack levels required when called:    8
  4214 ;; This function calls:
  4215 ;;		__doprnt
  4216 ;; This function is called by:
  4217 ;;		_update_display
  4218 ;;		_update_state
  4219 ;;		_display_menu
  4220 ;; This function uses a non-reentrant model
  4221 ;;
  4222                           
  4223                           	psect	text8
  4224  002E2A                     __ptext8:
  4225                           	opt stack 0
  4226  002E2A                     _sprintf:
  4227                           	opt stack 21
  4228                           
  4229                           ;incstack = 0
  4230  002E2A  C0A2  F0B0         	movff	sprintf@wh,sprintf@pb
  4231  002E2E  C0A3  F0B1         	movff	sprintf@wh+1,sprintf@pb+1
  4232  002E32  0E00               	movlw	0
  4233  002E34  0100               	movlb	0	; () banked
  4234  002E36  6FB2               	movwf	(sprintf@pb+2)& (0+255),b
  4235  002E38  0E00               	movlw	0
  4236  002E3A  0100               	movlb	0	; () banked
  4237  002E3C  6FB3               	movwf	(sprintf@pb+3)& (0+255),b
  4238  002E3E  0EA6               	movlw	low (?_sprintf+4)
  4239  002E40  0100               	movlb	0	; () banked
  4240  002E42  6FAE               	movwf	sprintf@ap& (0+255),b
  4241  002E44  0E00               	movlw	high (?_sprintf+4)
  4242  002E46  0100               	movlb	0	; () banked
  4243  002E48  6FAF               	movwf	(sprintf@ap+1)& (0+255),b
  4244                           
  4245                           ; BSR set to: 0
  4246  002E4A  0EB0               	movlw	low sprintf@pb
  4247  002E4C  0100               	movlb	0	; () banked
  4248  002E4E  6F8C               	movwf	__doprnt@pb& (0+255),b
  4249  002E50  0E00               	movlw	high sprintf@pb
  4250  002E52  0100               	movlb	0	; () banked
  4251  002E54  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  4252  002E56  C0A4  F08E         	movff	sprintf@f,__doprnt@f
  4253  002E5A  C0A5  F08F         	movff	sprintf@f+1,__doprnt@f+1
  4254  002E5E  0EAE               	movlw	low sprintf@ap
  4255  002E60  0100               	movlb	0	; () banked
  4256  002E62  6F90               	movwf	__doprnt@ap& (0+255),b
  4257  002E64  0E00               	movlw	high sprintf@ap
  4258  002E66  0100               	movlb	0	; () banked
  4259  002E68  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  4260  002E6A  EC09  F000         	call	__doprnt	;wreg free
  4261  002E6E  C0B0  FFD9         	movff	sprintf@pb,fsr2l
  4262  002E72  C0B1  FFDA         	movff	sprintf@pb+1,fsr2h
  4263  002E76  0E00               	movlw	0
  4264  002E78  6EDF               	movwf	indf2,c
  4265  002E7A  0012               	return	
  4266  002E7C                     __end_of_sprintf:
  4267                           	opt stack 0
  4268                           tblptru	equ	0xFF8
  4269                           tblptrh	equ	0xFF7
  4270                           tblptrl	equ	0xFF6
  4271                           tablat	equ	0xFF5
  4272                           intcon	equ	0xFF2
  4273                           intcon2	equ	0xFF1
  4274                           intcon3	equ	0xFF0
  4275                           postinc0	equ	0xFEE
  4276                           wreg	equ	0xFE8
  4277                           indf1	equ	0xFE7
  4278                           postinc1	equ	0xFE6
  4279                           postdec1	equ	0xFE5
  4280                           fsr1h	equ	0xFE2
  4281                           fsr1l	equ	0xFE1
  4282                           indf2	equ	0xFDF
  4283                           postinc2	equ	0xFDE
  4284                           postdec2	equ	0xFDD
  4285                           fsr2h	equ	0xFDA
  4286                           fsr2l	equ	0xFD9
  4287                           status	equ	0xFD8
  4288                           
  4289 ;; *************** function __doprnt *****************
  4290 ;; Defined at:
  4291 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4292 ;; Parameters:    Size  Location     Type
  4293 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
  4294 ;;		 -> sprintf@pb(4), printf@pb(4), 
  4295 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4296 ;;		 -> STR_17(14), STR_16(15), STR_15(8), STR_14(5), 
  4297 ;;		 -> STR_13(5), STR_12(5), STR_11(5), STR_10(20), 
  4298 ;;		 -> STR_9(20), STR_8(22), STR_7(19), menu(720), 
  4299 ;;		 -> STR_6(15), STR_5(6), STR_4(16), STR_3(25), 
  4300 ;;		 -> STR_2(23), STR_1(23), display1(18), display0(18), 
  4301 ;;  ap              2   16[BANK0 ] PTR PTR void 
  4302 ;;		 -> sprintf@ap(2), printf@ap(2), 
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;  idx             1   22[BANK0 ] unsigned char 
  4305 ;;  tmpval          4    0        struct .
  4306 ;;  width           2   31[BANK0 ] int 
  4307 ;;  val             2   28[BANK0 ] unsigned int 
  4308 ;;  cp              2   26[BANK0 ] PTR const unsigned char 
  4309 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_18(7), 
  4310 ;;		 -> _doprnt@c(1), menu(720), ndisplay1(18), ndisplay0(18), 
  4311 ;;  len             2   24[BANK0 ] unsigned int 
  4312 ;;  c               1   33[BANK0 ] char 
  4313 ;;  flag            1   30[BANK0 ] unsigned char 
  4314 ;;  prec            1   23[BANK0 ] char 
  4315 ;; Return value:  Size  Location     Type
  4316 ;;                  2   12[BANK0 ] int 
  4317 ;; Registers used:
  4318 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4319 ;; Tracked objects:
  4320 ;;		On entry : 0/0
  4321 ;;		On exit  : 0/0
  4322 ;;		Unchanged: 0/0
  4323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4324 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4325 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4326 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4327 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4328 ;;Total ram usage:       22 bytes
  4329 ;; Hardware stack levels used:    1
  4330 ;; Hardware stack levels required when called:    7
  4331 ;; This function calls:
  4332 ;;		Absolute function
  4333 ;;		___lwdiv
  4334 ;;		___lwmod
  4335 ;;		___wmul
  4336 ;;		_isdigit
  4337 ;;		_putch
  4338 ;; This function is called by:
  4339 ;;		_printf
  4340 ;;		_sprintf
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           	psect	text9
  4345  000012                     __ptext9:
  4346                           	opt stack 0
  4347  000012                     __doprnt:
  4348                           	opt stack 21
  4349                           
  4350                           ;doprnt.c: 499: signed char c;
  4351                           ;doprnt.c: 501: int width;
  4352                           ;doprnt.c: 506: signed char prec;
  4353                           ;doprnt.c: 508: unsigned char flag;
  4354                           ;doprnt.c: 523: union {
  4355                           ;doprnt.c: 524: unsigned long vd;
  4356                           ;doprnt.c: 525: double integ;
  4357                           ;doprnt.c: 526: } tmpval;
  4358                           ;doprnt.c: 528: unsigned int val;
  4359                           ;doprnt.c: 529: unsigned len;
  4360                           ;doprnt.c: 530: const char * cp;
  4361                           ;doprnt.c: 536: while(c = *f++) {
  4362                           
  4363                           ;incstack = 0
  4364  000012  EFA2  F004         	goto	l7658
  4365  000016                     l7452:
  4366                           
  4367                           ;doprnt.c: 538: if(c != '%')
  4368  000016  0E25               	movlw	37
  4369  000018  0100               	movlb	0	; () banked
  4370  00001A  19A1               	xorwf	__doprnt@c& (0+255),w,b
  4371  00001C  B4D8               	btfsc	status,2,c
  4372  00001E  D03C               	goto	l7462
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;doprnt.c: 540: {
  4376                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4377  000020  0100               	movlb	0	; () banked
  4378  000022  EE20 F002          	lfsr	2,2
  4379  000026  518C               	movf	__doprnt@pb& (0+255),w,b
  4380  000028  26D9               	addwf	fsr2l,f,c
  4381  00002A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4382  00002C  22DA               	addwfc	fsr2h,f,c
  4383  00002E  50DE               	movf	postinc2,w,c
  4384  000030  10DE               	iorwf	postinc2,w,c
  4385  000032  B4D8               	btfsc	status,2,c
  4386  000034  D01A               	goto	l7458
  4387                           
  4388                           ; BSR set to: 0
  4389  000036  0100               	movlb	0	; () banked
  4390  000038  EE20 F002          	lfsr	2,2
  4391  00003C  518C               	movf	__doprnt@pb& (0+255),w,b
  4392  00003E  26D9               	addwf	fsr2l,f,c
  4393  000040  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4394  000042  22DA               	addwfc	fsr2h,f,c
  4395  000044  CFDE F092          	movff	postinc2,??__doprnt
  4396  000048  CFDD F093          	movff	postdec2,??__doprnt+1
  4397  00004C  D802               	call	u11448
  4398  00004E  EFA2  F004         	goto	l7658
  4399  000052                     u11448:
  4400  000052  0005               	push	
  4401  000054  6EFA               	movwf	pclath,c
  4402  000056  0100               	movlb	0	; () banked
  4403  000058  5192               	movf	??__doprnt& (0+255),w,b
  4404  00005A  6EFD               	movwf	tosl,c
  4405  00005C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4406  00005E  6EFE               	movwf	tosh,c
  4407  000060  6AFF               	clrf	tosu,c
  4408  000062  50FA               	movf	pclath,w,c
  4409  000064  0100               	movlb	0	; () banked
  4410  000066  51A1               	movf	__doprnt@c& (0+255),w,b
  4411  000068  0012               	return		;indir
  4412  00006A                     l7458:
  4413  00006A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4414  00006E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4415  000072  CFDE F092          	movff	postinc2,??__doprnt
  4416  000076  CFDD F093          	movff	postdec2,??__doprnt+1
  4417  00007A  C092  FFD9         	movff	??__doprnt,fsr2l
  4418  00007E  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4419  000082  C0A1  FFDF         	movff	__doprnt@c,indf2
  4420  000086  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4421  00008A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4422  00008E  2ADE               	incf	postinc2,f,c
  4423  000090  0E00               	movlw	0
  4424  000092  22DD               	addwfc	postdec2,f,c
  4425                           
  4426                           ;doprnt.c: 542: continue;
  4427  000094  EFA2  F004         	goto	l7658
  4428  000098                     l7462:
  4429                           
  4430                           ;doprnt.c: 543: }
  4431                           ;doprnt.c: 546: width = 0;
  4432  000098  0E00               	movlw	0
  4433  00009A  0100               	movlb	0	; () banked
  4434  00009C  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  4435  00009E  0E00               	movlw	0
  4436  0000A0  6F9F               	movwf	__doprnt@width& (0+255),b
  4437                           
  4438                           ;doprnt.c: 548: flag = 0;
  4439  0000A2  0E00               	movlw	0
  4440  0000A4  0100               	movlb	0	; () banked
  4441  0000A6  6F9E               	movwf	__doprnt@flag& (0+255),b
  4442                           
  4443                           ; BSR set to: 0
  4444                           ;doprnt.c: 551: switch(*f) {
  4445                           
  4446                           ;doprnt.c: 550: for(;;) {
  4447  0000A8  D005               	goto	l7468
  4448  0000AA                     l7464:
  4449                           
  4450                           ;doprnt.c: 580: flag |= 0x04;
  4451  0000AA  0100               	movlb	0	; () banked
  4452  0000AC  859E               	bsf	__doprnt@flag& (0+255),2,b
  4453                           
  4454                           ;doprnt.c: 581: f++;
  4455  0000AE  0100               	movlb	0	; () banked
  4456  0000B0  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  4457  0000B2  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  4458  0000B4                     l7468:
  4459  0000B4  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4460  0000B8  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4461  0000BC  0E00               	movlw	low (__mediumconst shr (0+16))
  4462  0000BE  6EF8               	movwf	tblptru,c
  4463  0000C0  0E0F               	movlw	(high __ramtop+-1)
  4464  0000C2  64F7               	cpfsgt	tblptrh,c
  4465  0000C4  D003               	bra	u11457
  4466  0000C6  0008               	tblrd		*
  4467  0000C8  50F5               	movf	tablat,w,c
  4468  0000CA  D005               	bra	u11450
  4469  0000CC                     u11457:
  4470  0000CC  CFF6 FFE9          	movff	tblptrl,fsr0l
  4471  0000D0  CFF7 FFEA          	movff	tblptrh,fsr0h
  4472  0000D4  50EF               	movf	indf0,w,c
  4473  0000D6                     u11450:
  4474                           
  4475                           ; Switch size 1, requested type "space"
  4476                           ; Number of cases is 1, Range of values is 48 to 48
  4477                           ; switch strategies available:
  4478                           ; Name         Instructions Cycles
  4479                           ; simple_byte            4     3 (average)
  4480                           ;	Chosen strategy is simple_byte
  4481  0000D6  0A30               	xorlw	48	; case 48
  4482  0000D8  B4D8               	btfsc	status,2,c
  4483  0000DA  D7E7               	goto	l7464
  4484                           
  4485                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4486                           
  4487                           ;doprnt.c: 586: }
  4488                           
  4489                           ;doprnt.c: 585: break;
  4490  0000DC  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4491  0000E0  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4492  0000E4  0E00               	movlw	low (__mediumconst shr (0+16))
  4493  0000E6  6EF8               	movwf	tblptru,c
  4494  0000E8  0E0F               	movlw	(high __ramtop+-1)
  4495  0000EA  64F7               	cpfsgt	tblptrh,c
  4496  0000EC  D003               	bra	u11467
  4497  0000EE  0008               	tblrd		*
  4498  0000F0  50F5               	movf	tablat,w,c
  4499  0000F2  D005               	bra	u11460
  4500  0000F4                     u11467:
  4501  0000F4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4502  0000F8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4503  0000FC  50EF               	movf	indf0,w,c
  4504  0000FE                     u11460:
  4505  0000FE  EC4E  F018         	call	_isdigit
  4506  000102  A0D8               	btfss	status,0,c
  4507  000104  D18A               	goto	l7534
  4508                           
  4509                           ;doprnt.c: 598: width = 0;
  4510  000106  0E00               	movlw	0
  4511  000108  0100               	movlb	0	; () banked
  4512  00010A  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  4513  00010C  0E00               	movlw	0
  4514  00010E  6F9F               	movwf	__doprnt@width& (0+255),b
  4515  000110                     l7474:
  4516                           
  4517                           ;doprnt.c: 600: width *= 10;
  4518  000110  C09F  F080         	movff	__doprnt@width,___wmul@multiplier
  4519  000114  C0A0  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
  4520  000118  0E00               	movlw	0
  4521  00011A  0100               	movlb	0	; () banked
  4522  00011C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4523  00011E  0E0A               	movlw	10
  4524  000120  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4525  000122  ECD2  F017         	call	___wmul	;wreg free
  4526  000126  C080  F09F         	movff	?___wmul,__doprnt@width
  4527  00012A  C081  F0A0         	movff	?___wmul+1,__doprnt@width+1
  4528                           
  4529                           ;doprnt.c: 601: width += *f++ - '0';
  4530  00012E  0ED0               	movlw	208
  4531  000130  0100               	movlb	0	; () banked
  4532  000132  6F92               	movwf	??__doprnt& (0+255),b
  4533  000134  0EFF               	movlw	255
  4534  000136  0100               	movlb	0	; () banked
  4535  000138  6F93               	movwf	(??__doprnt+1)& (0+255),b
  4536  00013A  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4537  00013E  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4538  000142  0E00               	movlw	low (__mediumconst shr (0+16))
  4539  000144  6EF8               	movwf	tblptru,c
  4540  000146  0E0F               	movlw	(high __ramtop+-1)
  4541  000148  64F7               	cpfsgt	tblptrh,c
  4542  00014A  D003               	bra	u11487
  4543  00014C  0008               	tblrd		*
  4544  00014E  50F5               	movf	tablat,w,c
  4545  000150  D005               	bra	u11480
  4546  000152                     u11487:
  4547  000152  CFF6 FFE9          	movff	tblptrl,fsr0l
  4548  000156  CFF7 FFEA          	movff	tblptrh,fsr0h
  4549  00015A  50EF               	movf	indf0,w,c
  4550  00015C                     u11480:
  4551  00015C  0100               	movlb	0	; () banked
  4552  00015E  6F94               	movwf	(??__doprnt+2)& (0+255),b
  4553  000160  6B95               	clrf	(??__doprnt+3)& (0+255),b
  4554  000162  0100               	movlb	0	; () banked
  4555  000164  5192               	movf	??__doprnt& (0+255),w,b
  4556  000166  0100               	movlb	0	; () banked
  4557  000168  2794               	addwf	(??__doprnt+2)& (0+255),f,b
  4558  00016A  0100               	movlb	0	; () banked
  4559  00016C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4560  00016E  0100               	movlb	0	; () banked
  4561  000170  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
  4562  000172  0100               	movlb	0	; () banked
  4563  000174  5194               	movf	(??__doprnt+2)& (0+255),w,b
  4564  000176  0100               	movlb	0	; () banked
  4565  000178  279F               	addwf	__doprnt@width& (0+255),f,b
  4566  00017A  0100               	movlb	0	; () banked
  4567  00017C  5195               	movf	(??__doprnt+3)& (0+255),w,b
  4568  00017E  0100               	movlb	0	; () banked
  4569  000180  23A0               	addwfc	(__doprnt@width+1)& (0+255),f,b
  4570                           
  4571                           ; BSR set to: 0
  4572  000182  0100               	movlb	0	; () banked
  4573  000184  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  4574  000186  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  4575                           
  4576                           ; BSR set to: 0
  4577                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4578  000188  C08E  FFF6         	movff	__doprnt@f,tblptrl
  4579  00018C  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  4580  000190  0E00               	movlw	low (__mediumconst shr (0+16))
  4581  000192  6EF8               	movwf	tblptru,c
  4582  000194  0E0F               	movlw	(high __ramtop+-1)
  4583  000196  64F7               	cpfsgt	tblptrh,c
  4584  000198  D003               	bra	u11497
  4585  00019A  0008               	tblrd		*
  4586  00019C  50F5               	movf	tablat,w,c
  4587  00019E  D005               	bra	u11490
  4588  0001A0                     u11497:
  4589  0001A0  CFF6 FFE9          	movff	tblptrl,fsr0l
  4590  0001A4  CFF7 FFEA          	movff	tblptrh,fsr0h
  4591  0001A8  50EF               	movf	indf0,w,c
  4592  0001AA                     u11490:
  4593  0001AA  EC4E  F018         	call	_isdigit
  4594  0001AE  A0D8               	btfss	status,0,c
  4595  0001B0  D134               	goto	l7534
  4596  0001B2  D7AE               	goto	l7474
  4597  0001B4                     l7482:
  4598                           
  4599                           ;doprnt.c: 721: flag |= 0x80;
  4600  0001B4  0100               	movlb	0	; () banked
  4601  0001B6  8F9E               	bsf	__doprnt@flag& (0+255),7,b
  4602                           
  4603                           ;doprnt.c: 723: break;
  4604  0001B8  D163               	goto	l493
  4605  0001BA                     l7484:
  4606                           
  4607                           ; BSR set to: 0
  4608                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  4609  0001BA  C090  FFD9         	movff	__doprnt@ap,fsr2l
  4610  0001BE  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  4611  0001C2  CFDF F092          	movff	indf2,??__doprnt
  4612  0001C6  0E02               	movlw	2
  4613  0001C8  26DE               	addwf	postinc2,f,c
  4614  0001CA  CFDF F093          	movff	indf2,??__doprnt+1
  4615  0001CE  0E00               	movlw	0
  4616  0001D0  22DD               	addwfc	postdec2,f,c
  4617  0001D2  C092  FFD9         	movff	??__doprnt,fsr2l
  4618  0001D6  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4619  0001DA  CFDE F09A          	movff	postinc2,__doprnt@cp
  4620  0001DE  CFDD F09B          	movff	postdec2,__doprnt@cp+1
  4621                           
  4622                           ; BSR set to: 0
  4623                           ;doprnt.c: 740: if(!cp)
  4624  0001E2  0100               	movlb	0	; () banked
  4625  0001E4  519A               	movf	__doprnt@cp& (0+255),w,b
  4626  0001E6  0100               	movlb	0	; () banked
  4627  0001E8  119B               	iorwf	(__doprnt@cp+1)& (0+255),w,b
  4628  0001EA  A4D8               	btfss	status,2,c
  4629  0001EC  D006               	goto	l7490
  4630                           
  4631                           ; BSR set to: 0
  4632                           ;doprnt.c: 741: cp = "(null)";
  4633  0001EE  0EEC               	movlw	low STR_18
  4634  0001F0  0100               	movlb	0	; () banked
  4635  0001F2  6F9A               	movwf	__doprnt@cp& (0+255),b
  4636  0001F4  0EFF               	movlw	high STR_18
  4637  0001F6  0100               	movlb	0	; () banked
  4638  0001F8  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  4639  0001FA                     l7490:
  4640                           
  4641                           ; BSR set to: 0
  4642                           ;doprnt.c: 745: len = 0;
  4643  0001FA  0E00               	movlw	0
  4644  0001FC  0100               	movlb	0	; () banked
  4645  0001FE  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  4646  000200  0E00               	movlw	0
  4647  000202  6F98               	movwf	__doprnt@len& (0+255),b
  4648                           
  4649                           ;doprnt.c: 746: while(cp[len])
  4650  000204  D003               	goto	l7494
  4651  000206                     l7492:
  4652                           
  4653                           ;doprnt.c: 747: len++;
  4654  000206  0100               	movlb	0	; () banked
  4655  000208  4B98               	infsnz	__doprnt@len& (0+255),f,b
  4656  00020A  2B99               	incf	(__doprnt@len+1)& (0+255),f,b
  4657  00020C                     l7494:
  4658                           
  4659                           ; BSR set to: 0
  4660  00020C  0100               	movlb	0	; () banked
  4661  00020E  5198               	movf	__doprnt@len& (0+255),w,b
  4662  000210  0100               	movlb	0	; () banked
  4663  000212  259A               	addwf	__doprnt@cp& (0+255),w,b
  4664  000214  0100               	movlb	0	; () banked
  4665  000216  6F92               	movwf	??__doprnt& (0+255),b
  4666  000218  0100               	movlb	0	; () banked
  4667  00021A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  4668  00021C  0100               	movlb	0	; () banked
  4669  00021E  219B               	addwfc	(__doprnt@cp+1)& (0+255),w,b
  4670  000220  0100               	movlb	0	; () banked
  4671  000222  6F93               	movwf	(??__doprnt+1)& (0+255),b
  4672  000224  C092  FFF6         	movff	??__doprnt,tblptrl
  4673  000228  C093  FFF7         	movff	??__doprnt+1,tblptrh
  4674  00022C  0E00               	movlw	low (__mediumconst shr (0+16))
  4675  00022E  6EF8               	movwf	tblptru,c
  4676  000230  0E0F               	movlw	(high __ramtop+-1)
  4677  000232  64F7               	cpfsgt	tblptrh,c
  4678  000234  D003               	bra	u11527
  4679  000236  0008               	tblrd		*
  4680  000238  50F5               	movf	tablat,w,c
  4681  00023A  D005               	bra	u11520
  4682  00023C                     u11527:
  4683  00023C  CFF6 FFE9          	movff	tblptrl,fsr0l
  4684  000240  CFF7 FFEA          	movff	tblptrh,fsr0h
  4685  000244  50EF               	movf	indf0,w,c
  4686  000246                     u11520:
  4687  000246  0900               	iorlw	0
  4688  000248  A4D8               	btfss	status,2,c
  4689  00024A  D7DD               	goto	l7492
  4690  00024C                     l7496:
  4691                           
  4692                           ;doprnt.c: 757: if(width > len)
  4693  00024C  0100               	movlb	0	; () banked
  4694  00024E  519F               	movf	__doprnt@width& (0+255),w,b
  4695  000250  0100               	movlb	0	; () banked
  4696  000252  5D98               	subwf	__doprnt@len& (0+255),w,b
  4697  000254  0100               	movlb	0	; () banked
  4698  000256  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  4699  000258  0100               	movlb	0	; () banked
  4700  00025A  5999               	subwfb	(__doprnt@len+1)& (0+255),w,b
  4701  00025C  B0D8               	btfsc	status,0,c
  4702  00025E  D009               	goto	l7500
  4703                           
  4704                           ; BSR set to: 0
  4705                           ;doprnt.c: 758: width -= len;
  4706  000260  0100               	movlb	0	; () banked
  4707  000262  5198               	movf	__doprnt@len& (0+255),w,b
  4708  000264  0100               	movlb	0	; () banked
  4709  000266  5F9F               	subwf	__doprnt@width& (0+255),f,b
  4710  000268  0100               	movlb	0	; () banked
  4711  00026A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  4712  00026C  0100               	movlb	0	; () banked
  4713  00026E  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  4714  000270  D03E               	goto	l7510
  4715  000272                     l7500:
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;doprnt.c: 759: else
  4719                           ;doprnt.c: 760: width = 0;
  4720  000272  0E00               	movlw	0
  4721  000274  0100               	movlb	0	; () banked
  4722  000276  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  4723  000278  0E00               	movlw	0
  4724  00027A  6F9F               	movwf	__doprnt@width& (0+255),b
  4725                           
  4726                           ; BSR set to: 0
  4727                           ;doprnt.c: 764: while(width--)
  4728  00027C  D038               	goto	l7510
  4729  00027E                     l7502:
  4730                           
  4731                           ; BSR set to: 0
  4732                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  4733  00027E  0100               	movlb	0	; () banked
  4734  000280  EE20 F002          	lfsr	2,2
  4735  000284  518C               	movf	__doprnt@pb& (0+255),w,b
  4736  000286  26D9               	addwf	fsr2l,f,c
  4737  000288  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4738  00028A  22DA               	addwfc	fsr2h,f,c
  4739  00028C  50DE               	movf	postinc2,w,c
  4740  00028E  10DE               	iorwf	postinc2,w,c
  4741  000290  B4D8               	btfsc	status,2,c
  4742  000292  D018               	goto	l7506
  4743                           
  4744                           ; BSR set to: 0
  4745  000294  0100               	movlb	0	; () banked
  4746  000296  EE20 F002          	lfsr	2,2
  4747  00029A  518C               	movf	__doprnt@pb& (0+255),w,b
  4748  00029C  26D9               	addwf	fsr2l,f,c
  4749  00029E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4750  0002A0  22DA               	addwfc	fsr2h,f,c
  4751  0002A2  CFDE F092          	movff	postinc2,??__doprnt
  4752  0002A6  CFDD F093          	movff	postdec2,??__doprnt+1
  4753  0002AA  D801               	call	u11568
  4754  0002AC  D020               	goto	l7510
  4755  0002AE                     u11568:
  4756  0002AE  0005               	push	
  4757  0002B0  6EFA               	movwf	pclath,c
  4758  0002B2  0100               	movlb	0	; () banked
  4759  0002B4  5192               	movf	??__doprnt& (0+255),w,b
  4760  0002B6  6EFD               	movwf	tosl,c
  4761  0002B8  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4762  0002BA  6EFE               	movwf	tosh,c
  4763  0002BC  6AFF               	clrf	tosu,c
  4764  0002BE  50FA               	movf	pclath,w,c
  4765  0002C0  0E20               	movlw	32
  4766  0002C2  0012               	return		;indir
  4767  0002C4                     l7506:
  4768  0002C4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4769  0002C8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4770  0002CC  CFDE F092          	movff	postinc2,??__doprnt
  4771  0002D0  CFDD F093          	movff	postdec2,??__doprnt+1
  4772  0002D4  C092  FFD9         	movff	??__doprnt,fsr2l
  4773  0002D8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4774  0002DC  0E20               	movlw	32
  4775  0002DE  6EDF               	movwf	indf2,c
  4776  0002E0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4777  0002E4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4778  0002E8  2ADE               	incf	postinc2,f,c
  4779  0002EA  0E00               	movlw	0
  4780  0002EC  22DD               	addwfc	postdec2,f,c
  4781  0002EE                     l7510:
  4782  0002EE  0100               	movlb	0	; () banked
  4783  0002F0  079F               	decf	__doprnt@width& (0+255),f,b
  4784  0002F2  A0D8               	btfss	status,0,c
  4785  0002F4  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  4786  0002F6  0100               	movlb	0	; () banked
  4787  0002F8  299F               	incf	__doprnt@width& (0+255),w,b
  4788  0002FA  E1C1               	bnz	l7502
  4789  0002FC  0100               	movlb	0	; () banked
  4790  0002FE  29A0               	incf	(__doprnt@width+1)& (0+255),w,b
  4791  000300  B4D8               	btfsc	status,2,c
  4792  000302  D060               	goto	l7524
  4793  000304  D7BC               	goto	l7502
  4794  000306                     l7512:
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  4798  000306  0100               	movlb	0	; () banked
  4799  000308  EE20 F002          	lfsr	2,2
  4800  00030C  518C               	movf	__doprnt@pb& (0+255),w,b
  4801  00030E  26D9               	addwf	fsr2l,f,c
  4802  000310  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4803  000312  22DA               	addwfc	fsr2h,f,c
  4804  000314  50DE               	movf	postinc2,w,c
  4805  000316  10DE               	iorwf	postinc2,w,c
  4806  000318  B4D8               	btfsc	status,2,c
  4807  00031A  D02C               	goto	l7518
  4808                           
  4809                           ; BSR set to: 0
  4810  00031C  0100               	movlb	0	; () banked
  4811  00031E  EE20 F002          	lfsr	2,2
  4812  000322  518C               	movf	__doprnt@pb& (0+255),w,b
  4813  000324  26D9               	addwf	fsr2l,f,c
  4814  000326  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4815  000328  22DA               	addwfc	fsr2h,f,c
  4816  00032A  CFDE F092          	movff	postinc2,??__doprnt
  4817  00032E  CFDD F093          	movff	postdec2,??__doprnt+1
  4818  000332  D801               	call	u11598
  4819  000334  D01B               	goto	l7516
  4820  000336                     u11598:
  4821  000336  0005               	push	
  4822  000338  6EFA               	movwf	pclath,c
  4823  00033A  0100               	movlb	0	; () banked
  4824  00033C  5192               	movf	??__doprnt& (0+255),w,b
  4825  00033E  6EFD               	movwf	tosl,c
  4826  000340  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4827  000342  6EFE               	movwf	tosh,c
  4828  000344  6AFF               	clrf	tosu,c
  4829  000346  50FA               	movf	pclath,w,c
  4830  000348  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  4831  00034C  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  4832  000350  0E00               	movlw	low (__mediumconst shr (0+16))
  4833  000352  6EF8               	movwf	tblptru,c
  4834  000354  0E0F               	movlw	(high __ramtop+-1)
  4835  000356  64F7               	cpfsgt	tblptrh,c
  4836  000358  D003               	bra	u11607
  4837  00035A  0008               	tblrd		*
  4838  00035C  50F5               	movf	tablat,w,c
  4839  00035E  D005               	bra	u11600
  4840  000360                     u11607:
  4841  000360  CFF6 FFE9          	movff	tblptrl,fsr0l
  4842  000364  CFF7 FFEA          	movff	tblptrh,fsr0h
  4843  000368  50EF               	movf	indf0,w,c
  4844  00036A                     u11600:
  4845  00036A  0012               	return		;indir
  4846  00036C                     l7516:
  4847  00036C  0100               	movlb	0	; () banked
  4848  00036E  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  4849  000370  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  4850  000372  D028               	goto	l7524
  4851  000374                     l7518:
  4852                           
  4853                           ; BSR set to: 0
  4854  000374  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  4855  000378  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  4856  00037C  0E00               	movlw	low (__mediumconst shr (0+16))
  4857  00037E  6EF8               	movwf	tblptru,c
  4858  000380  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4859  000384  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4860  000388  CFDE F092          	movff	postinc2,??__doprnt
  4861  00038C  CFDD F093          	movff	postdec2,??__doprnt+1
  4862  000390  C092  FFD9         	movff	??__doprnt,fsr2l
  4863  000394  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4864  000398  0E0F               	movlw	(high __ramtop+-1)
  4865  00039A  64F7               	cpfsgt	tblptrh,c
  4866  00039C  D003               	bra	u11617
  4867  00039E  0008               	tblrd		*
  4868  0003A0  50F5               	movf	tablat,w,c
  4869  0003A2  D005               	bra	u11610
  4870  0003A4                     u11617:
  4871  0003A4  CFF6 FFE9          	movff	tblptrl,fsr0l
  4872  0003A8  CFF7 FFEA          	movff	tblptrh,fsr0h
  4873  0003AC  50EF               	movf	indf0,w,c
  4874  0003AE                     u11610:
  4875  0003AE  6EDF               	movwf	indf2,c
  4876  0003B0  0100               	movlb	0	; () banked
  4877  0003B2  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  4878  0003B4  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  4879                           
  4880                           ; BSR set to: 0
  4881  0003B6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4882  0003BA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4883  0003BE  2ADE               	incf	postinc2,f,c
  4884  0003C0  0E00               	movlw	0
  4885  0003C2  22DD               	addwfc	postdec2,f,c
  4886  0003C4                     l7524:
  4887                           
  4888                           ; BSR set to: 0
  4889  0003C4  0100               	movlb	0	; () banked
  4890  0003C6  0798               	decf	__doprnt@len& (0+255),f,b
  4891  0003C8  A0D8               	btfss	status,0,c
  4892  0003CA  0799               	decf	(__doprnt@len+1)& (0+255),f,b
  4893  0003CC  0100               	movlb	0	; () banked
  4894  0003CE  2998               	incf	__doprnt@len& (0+255),w,b
  4895  0003D0  E19A               	bnz	l7512
  4896  0003D2  0100               	movlb	0	; () banked
  4897  0003D4  2999               	incf	(__doprnt@len+1)& (0+255),w,b
  4898  0003D6  B4D8               	btfsc	status,2,c
  4899  0003D8  D2B5               	goto	l7658
  4900  0003DA  D795               	goto	l7512
  4901  0003DC                     l7526:
  4902                           
  4903                           ; BSR set to: 0
  4904                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4905  0003DC  C090  FFD9         	movff	__doprnt@ap,fsr2l
  4906  0003E0  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  4907  0003E4  CFDF F092          	movff	indf2,??__doprnt
  4908  0003E8  0E02               	movlw	2
  4909  0003EA  26DE               	addwf	postinc2,f,c
  4910  0003EC  CFDF F093          	movff	indf2,??__doprnt+1
  4911  0003F0  0E00               	movlw	0
  4912  0003F2  22DD               	addwfc	postdec2,f,c
  4913  0003F4  C092  FFD9         	movff	??__doprnt,fsr2l
  4914  0003F8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4915  0003FC  50DF               	movf	indf2,w,c
  4916  0003FE  0100               	movlb	0	; () banked
  4917  000400  6FA1               	movwf	__doprnt@c& (0+255),b
  4918  000402                     l7528:
  4919                           
  4920                           ; BSR set to: 0
  4921                           ;doprnt.c: 805: cp = (char *)&c;
  4922  000402  0EA1               	movlw	low __doprnt@c
  4923  000404  0100               	movlb	0	; () banked
  4924  000406  6F9A               	movwf	__doprnt@cp& (0+255),b
  4925  000408  0E00               	movlw	high __doprnt@c
  4926  00040A  0100               	movlb	0	; () banked
  4927  00040C  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  4928                           
  4929                           ; BSR set to: 0
  4930                           ;doprnt.c: 806: len = 1;
  4931  00040E  0E00               	movlw	0
  4932  000410  0100               	movlb	0	; () banked
  4933  000412  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  4934  000414  0E01               	movlw	1
  4935  000416  6F98               	movwf	__doprnt@len& (0+255),b
  4936                           
  4937                           ;doprnt.c: 807: goto dostring;
  4938  000418  D719               	goto	l7496
  4939  00041A                     l7534:
  4940  00041A  0100               	movlb	0	; () banked
  4941  00041C  518E               	movf	__doprnt@f& (0+255),w,b
  4942  00041E  0100               	movlb	0	; () banked
  4943  000420  6F92               	movwf	??__doprnt& (0+255),b
  4944  000422  0100               	movlb	0	; () banked
  4945  000424  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  4946  000426  0100               	movlb	0	; () banked
  4947  000428  6F93               	movwf	(??__doprnt+1)& (0+255),b
  4948  00042A  0100               	movlb	0	; () banked
  4949  00042C  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  4950  00042E  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  4951  000430  C092  FFF6         	movff	??__doprnt,tblptrl
  4952  000434  C093  FFF7         	movff	??__doprnt+1,tblptrh
  4953  000438  0E00               	movlw	low (__mediumconst shr (0+16))
  4954  00043A  6EF8               	movwf	tblptru,c
  4955  00043C  0E0F               	movlw	(high __ramtop+-1)
  4956  00043E  64F7               	cpfsgt	tblptrh,c
  4957  000440  D003               	bra	u11637
  4958  000442  0008               	tblrd		*
  4959  000444  50F5               	movf	tablat,w,c
  4960  000446  D005               	bra	u11630
  4961  000448                     u11637:
  4962  000448  CFF6 FFE9          	movff	tblptrl,fsr0l
  4963  00044C  CFF7 FFEA          	movff	tblptrh,fsr0h
  4964  000450  50EF               	movf	indf0,w,c
  4965  000452                     u11630:
  4966  000452  0100               	movlb	0	; () banked
  4967  000454  6FA1               	movwf	__doprnt@c& (0+255),b
  4968  000456  0100               	movlb	0	; () banked
  4969  000458  51A1               	movf	__doprnt@c& (0+255),w,b
  4970                           
  4971                           ; Switch size 1, requested type "space"
  4972                           ; Number of cases is 6, Range of values is 0 to 120
  4973                           ; switch strategies available:
  4974                           ; Name         Instructions Cycles
  4975                           ; simple_byte           19    10 (average)
  4976                           ;	Chosen strategy is simple_byte
  4977  00045A  0A00               	xorlw	0	; case 0
  4978  00045C  B4D8               	btfsc	status,2,c
  4979  00045E  D295               	goto	l7660
  4980  000460  0A63               	xorlw	99	; case 99
  4981  000462  B4D8               	btfsc	status,2,c
  4982  000464  D7BB               	goto	l7526
  4983  000466  0A07               	xorlw	7	; case 100
  4984  000468  B4D8               	btfsc	status,2,c
  4985  00046A  D00A               	goto	l493
  4986  00046C  0A0D               	xorlw	13	; case 105
  4987  00046E  B4D8               	btfsc	status,2,c
  4988  000470  D007               	goto	l493
  4989  000472  0A1A               	xorlw	26	; case 115
  4990  000474  B4D8               	btfsc	status,2,c
  4991  000476  D6A1               	goto	l7484
  4992  000478  0A0B               	xorlw	11	; case 120
  4993  00047A  B4D8               	btfsc	status,2,c
  4994  00047C  D69B               	goto	l7482
  4995  00047E  D7C1               	goto	l7528
  4996  000480                     l493:
  4997                           
  4998                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  4999  000480  0100               	movlb	0	; () banked
  5000  000482  BF9E               	btfsc	__doprnt@flag& (0+255),7,b
  5001  000484  D020               	goto	l7544
  5002                           
  5003                           ; BSR set to: 0
  5004                           ;doprnt.c: 1253: {
  5005                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5006  000486  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5007  00048A  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5008  00048E  CFDF F092          	movff	indf2,??__doprnt
  5009  000492  0E02               	movlw	2
  5010  000494  26DE               	addwf	postinc2,f,c
  5011  000496  CFDF F093          	movff	indf2,??__doprnt+1
  5012  00049A  0E00               	movlw	0
  5013  00049C  22DD               	addwfc	postdec2,f,c
  5014  00049E  C092  FFD9         	movff	??__doprnt,fsr2l
  5015  0004A2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5016  0004A6  CFDE F09C          	movff	postinc2,__doprnt@val
  5017  0004AA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  5018                           
  5019                           ; BSR set to: 0
  5020                           ;doprnt.c: 1261: if((int)val < 0) {
  5021  0004AE  0100               	movlb	0	; () banked
  5022  0004B0  AF9D               	btfss	(__doprnt@val+1)& (0+255),7,b
  5023  0004B2  D060               	goto	l7576
  5024                           
  5025                           ; BSR set to: 0
  5026                           ;doprnt.c: 1262: flag |= 0x03;
  5027  0004B4  0E03               	movlw	3
  5028  0004B6  0100               	movlb	0	; () banked
  5029  0004B8  139E               	iorwf	__doprnt@flag& (0+255),f,b
  5030                           
  5031                           ; BSR set to: 0
  5032                           ;doprnt.c: 1263: val = -val;
  5033  0004BA  0100               	movlb	0	; () banked
  5034  0004BC  6D9C               	negf	__doprnt@val& (0+255),b
  5035  0004BE  1F9D               	comf	(__doprnt@val+1)& (0+255),f,b
  5036  0004C0  B0D8               	btfsc	status,0,c
  5037  0004C2  2B9D               	incf	(__doprnt@val+1)& (0+255),f,b
  5038                           
  5039                           ; BSR set to: 0
  5040                           ;doprnt.c: 1264: }
  5041                           ;doprnt.c: 1266: }
  5042  0004C4  D057               	goto	l7576
  5043  0004C6                     l7544:
  5044                           
  5045                           ; BSR set to: 0
  5046                           ;doprnt.c: 1268: else
  5047                           ;doprnt.c: 1273: {
  5048                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5049  0004C6  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5050  0004CA  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5051  0004CE  CFDF F092          	movff	indf2,??__doprnt
  5052  0004D2  0E02               	movlw	2
  5053  0004D4  26DE               	addwf	postinc2,f,c
  5054  0004D6  CFDF F093          	movff	indf2,??__doprnt+1
  5055  0004DA  0E00               	movlw	0
  5056  0004DC  22DD               	addwfc	postdec2,f,c
  5057  0004DE  C092  FFD9         	movff	??__doprnt,fsr2l
  5058  0004E2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5059  0004E6  CFDE F09C          	movff	postinc2,__doprnt@val
  5060  0004EA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  5061                           
  5062                           ; BSR set to: 0
  5063                           ;doprnt.c: 1287: }
  5064                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5065  0004EE  D042               	goto	l7576
  5066  0004F0                     l7546:
  5067                           
  5068                           ; BSR set to: 0
  5069                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5070  0004F0  0E01               	movlw	1
  5071  0004F2  0100               	movlb	0	; () banked
  5072  0004F4  6FA1               	movwf	__doprnt@c& (0+255),b
  5073  0004F6                     l7548:
  5074                           
  5075                           ; BSR set to: 0
  5076  0004F6  0E05               	movlw	5
  5077  0004F8  0100               	movlb	0	; () banked
  5078  0004FA  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5079  0004FC  B4D8               	btfsc	status,2,c
  5080  0004FE  D043               	goto	l7578
  5081                           
  5082                           ; BSR set to: 0
  5083                           ;doprnt.c: 1306: if(val < dpowers[c])
  5084                           
  5085                           ; BSR set to: 0
  5086                           
  5087                           ; BSR set to: 0
  5088  000500  0100               	movlb	0	; () banked
  5089  000502  51A1               	movf	__doprnt@c& (0+255),w,b
  5090  000504  0D02               	mullw	2
  5091  000506  0EE6               	movlw	low _dpowers
  5092  000508  24F3               	addwf	prodl,w,c
  5093  00050A  6EF6               	movwf	tblptrl,c
  5094  00050C  0EFE               	movlw	high _dpowers
  5095  00050E  20F4               	addwfc	prodh,w,c
  5096  000510  6EF7               	movwf	tblptrh,c
  5097  000512                     	if	1	;There are 3 active tblptr bytes
  5098  000512  6AF8               	clrf	tblptru,c
  5099  000514  0E00               	movlw	low (__mediumconst shr (0+16))
  5100  000516  22F8               	addwfc	tblptru,f,c
  5101  000518                     	endif
  5102  000518  0009               	tblrd		*+
  5103  00051A  50F5               	movf	tablat,w,c
  5104  00051C  0100               	movlb	0	; () banked
  5105  00051E  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5106  000520  0009               	tblrd		*+
  5107  000522  50F5               	movf	tablat,w,c
  5108  000524  0100               	movlb	0	; () banked
  5109  000526  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5110  000528  A0D8               	btfss	status,0,c
  5111  00052A  D02D               	goto	l7578
  5112                           
  5113                           ; BSR set to: 0
  5114                           
  5115                           ; BSR set to: 0
  5116                           
  5117                           ; BSR set to: 0
  5118                           ;doprnt.c: 1307: break;
  5119  00052C  0100               	movlb	0	; () banked
  5120  00052E  2BA1               	incf	__doprnt@c& (0+255),f,b
  5121  000530  D7E2               	goto	l7548
  5122  000532                     l7560:
  5123                           
  5124                           ; BSR set to: 0
  5125                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5126  000532  0E01               	movlw	1
  5127  000534  0100               	movlb	0	; () banked
  5128  000536  6FA1               	movwf	__doprnt@c& (0+255),b
  5129  000538                     l7562:
  5130                           
  5131                           ; BSR set to: 0
  5132  000538  0E04               	movlw	4
  5133  00053A  0100               	movlb	0	; () banked
  5134  00053C  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5135  00053E  B4D8               	btfsc	status,2,c
  5136  000540  D022               	goto	l7578
  5137                           
  5138                           ; BSR set to: 0
  5139                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5140                           
  5141                           ; BSR set to: 0
  5142                           
  5143                           ; BSR set to: 0
  5144  000542  0100               	movlb	0	; () banked
  5145  000544  51A1               	movf	__doprnt@c& (0+255),w,b
  5146  000546  0D02               	mullw	2
  5147  000548  0EF0               	movlw	low _hexpowers
  5148  00054A  24F3               	addwf	prodl,w,c
  5149  00054C  6EF6               	movwf	tblptrl,c
  5150  00054E  0EFE               	movlw	high _hexpowers
  5151  000550  20F4               	addwfc	prodh,w,c
  5152  000552  6EF7               	movwf	tblptrh,c
  5153  000554                     	if	1	;There are 3 active tblptr bytes
  5154  000554  6AF8               	clrf	tblptru,c
  5155  000556  0E00               	movlw	low (__mediumconst shr (0+16))
  5156  000558  22F8               	addwfc	tblptru,f,c
  5157  00055A                     	endif
  5158  00055A  0009               	tblrd		*+
  5159  00055C  50F5               	movf	tablat,w,c
  5160  00055E  0100               	movlb	0	; () banked
  5161  000560  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5162  000562  0009               	tblrd		*+
  5163  000564  50F5               	movf	tablat,w,c
  5164  000566  0100               	movlb	0	; () banked
  5165  000568  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5166  00056A  A0D8               	btfss	status,0,c
  5167  00056C  D00C               	goto	l7578
  5168                           
  5169                           ; BSR set to: 0
  5170                           
  5171                           ; BSR set to: 0
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;doprnt.c: 1318: break;
  5175  00056E  0100               	movlb	0	; () banked
  5176  000570  2BA1               	incf	__doprnt@c& (0+255),f,b
  5177  000572  D7E2               	goto	l7562
  5178  000574                     l7576:
  5179                           
  5180                           ; BSR set to: 0
  5181  000574  0100               	movlb	0	; () banked
  5182  000576  519E               	movf	__doprnt@flag& (0+255),w,b
  5183  000578  0B80               	andlw	128
  5184                           
  5185                           ; Switch size 1, requested type "space"
  5186                           ; Number of cases is 2, Range of values is 0 to 128
  5187                           ; switch strategies available:
  5188                           ; Name         Instructions Cycles
  5189                           ; simple_byte            7     4 (average)
  5190                           ;	Chosen strategy is simple_byte
  5191  00057A  0A00               	xorlw	0	; case 0
  5192  00057C  B4D8               	btfsc	status,2,c
  5193  00057E  D7B8               	goto	l7546
  5194  000580  0A80               	xorlw	128	; case 128
  5195  000582  B4D8               	btfsc	status,2,c
  5196  000584  D7D6               	goto	l7560
  5197  000586                     l7578:
  5198                           
  5199                           ; BSR set to: 0
  5200                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5201  000586  0100               	movlb	0	; () banked
  5202  000588  519F               	movf	__doprnt@width& (0+255),w,b
  5203  00058A  0100               	movlb	0	; () banked
  5204  00058C  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5205  00058E  B4D8               	btfsc	status,2,c
  5206  000590  D00B               	goto	l7584
  5207                           
  5208                           ; BSR set to: 0
  5209  000592  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5210  000596  0E03               	movlw	3
  5211  000598  0100               	movlb	0	; () banked
  5212  00059A  1792               	andwf	??__doprnt& (0+255),f,b
  5213  00059C  B4D8               	btfsc	status,2,c
  5214  00059E  D004               	goto	l7584
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;doprnt.c: 1346: width--;
  5218  0005A0  0100               	movlb	0	; () banked
  5219  0005A2  079F               	decf	__doprnt@width& (0+255),f,b
  5220  0005A4  A0D8               	btfss	status,0,c
  5221  0005A6  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5222  0005A8                     l7584:
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;doprnt.c: 1381: if(width > c)
  5226  0005A8  0E80               	movlw	128
  5227  0005AA  0100               	movlb	0	; () banked
  5228  0005AC  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  5229  0005AE  0E7F               	movlw	127
  5230  0005B0  0100               	movlb	0	; () banked
  5231  0005B2  6F92               	movwf	??__doprnt& (0+255),b
  5232  0005B4  0100               	movlb	0	; () banked
  5233  0005B6  519F               	movf	__doprnt@width& (0+255),w,b
  5234  0005B8  0100               	movlb	0	; () banked
  5235  0005BA  5DA1               	subwf	__doprnt@c& (0+255),w,b
  5236  0005BC  0100               	movlb	0	; () banked
  5237  0005BE  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  5238  0005C0  0A80               	xorlw	128
  5239  0005C2  0100               	movlb	0	; () banked
  5240  0005C4  5992               	subwfb	??__doprnt& (0+255),w,b
  5241  0005C6  B0D8               	btfsc	status,0,c
  5242  0005C8  D00B               	goto	l7588
  5243                           
  5244                           ; BSR set to: 0
  5245                           ;doprnt.c: 1382: width -= c;
  5246  0005CA  0100               	movlb	0	; () banked
  5247  0005CC  51A1               	movf	__doprnt@c& (0+255),w,b
  5248  0005CE  0100               	movlb	0	; () banked
  5249  0005D0  5F9F               	subwf	__doprnt@width& (0+255),f,b
  5250  0005D2  0E00               	movlw	0
  5251  0005D4  0100               	movlb	0	; () banked
  5252  0005D6  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  5253  0005D8  0EFF               	movlw	255
  5254  0005DA  0100               	movlb	0	; () banked
  5255  0005DC  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5256  0005DE  D005               	goto	l7590
  5257  0005E0                     l7588:
  5258                           
  5259                           ; BSR set to: 0
  5260                           ;doprnt.c: 1383: else
  5261                           ;doprnt.c: 1384: width = 0;
  5262  0005E0  0E00               	movlw	0
  5263  0005E2  0100               	movlb	0	; () banked
  5264  0005E4  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5265  0005E6  0E00               	movlw	0
  5266  0005E8  6F9F               	movwf	__doprnt@width& (0+255),b
  5267  0005EA                     l7590:
  5268                           
  5269                           ; BSR set to: 0
  5270                           ;doprnt.c: 1387: if(flag & 0x04) {
  5271  0005EA  0100               	movlb	0	; () banked
  5272  0005EC  A59E               	btfss	__doprnt@flag& (0+255),2,b
  5273  0005EE  D082               	goto	l7614
  5274                           
  5275                           ; BSR set to: 0
  5276                           ;doprnt.c: 1392: if(flag & 0x03)
  5277  0005F0  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5278  0005F4  0E03               	movlw	3
  5279  0005F6  0100               	movlb	0	; () banked
  5280  0005F8  1792               	andwf	??__doprnt& (0+255),f,b
  5281  0005FA  B4D8               	btfsc	status,2,c
  5282  0005FC  D038               	goto	l7602
  5283                           
  5284                           ; BSR set to: 0
  5285                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5286  0005FE  0100               	movlb	0	; () banked
  5287  000600  EE20 F002          	lfsr	2,2
  5288  000604  518C               	movf	__doprnt@pb& (0+255),w,b
  5289  000606  26D9               	addwf	fsr2l,f,c
  5290  000608  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5291  00060A  22DA               	addwfc	fsr2h,f,c
  5292  00060C  50DE               	movf	postinc2,w,c
  5293  00060E  10DE               	iorwf	postinc2,w,c
  5294  000610  B4D8               	btfsc	status,2,c
  5295  000612  D018               	goto	l7598
  5296                           
  5297                           ; BSR set to: 0
  5298  000614  0100               	movlb	0	; () banked
  5299  000616  EE20 F002          	lfsr	2,2
  5300  00061A  518C               	movf	__doprnt@pb& (0+255),w,b
  5301  00061C  26D9               	addwf	fsr2l,f,c
  5302  00061E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5303  000620  22DA               	addwfc	fsr2h,f,c
  5304  000622  CFDE F092          	movff	postinc2,??__doprnt
  5305  000626  CFDD F093          	movff	postdec2,??__doprnt+1
  5306  00062A  D801               	call	u11788
  5307  00062C  D020               	goto	l7602
  5308  00062E                     u11788:
  5309  00062E  0005               	push	
  5310  000630  6EFA               	movwf	pclath,c
  5311  000632  0100               	movlb	0	; () banked
  5312  000634  5192               	movf	??__doprnt& (0+255),w,b
  5313  000636  6EFD               	movwf	tosl,c
  5314  000638  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5315  00063A  6EFE               	movwf	tosh,c
  5316  00063C  6AFF               	clrf	tosu,c
  5317  00063E  50FA               	movf	pclath,w,c
  5318  000640  0E2D               	movlw	45
  5319  000642  0012               	return		;indir
  5320  000644                     l7598:
  5321  000644  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5322  000648  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5323  00064C  CFDE F092          	movff	postinc2,??__doprnt
  5324  000650  CFDD F093          	movff	postdec2,??__doprnt+1
  5325  000654  C092  FFD9         	movff	??__doprnt,fsr2l
  5326  000658  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5327  00065C  0E2D               	movlw	45
  5328  00065E  6EDF               	movwf	indf2,c
  5329  000660  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5330  000664  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5331  000668  2ADE               	incf	postinc2,f,c
  5332  00066A  0E00               	movlw	0
  5333  00066C  22DD               	addwfc	postdec2,f,c
  5334  00066E                     l7602:
  5335                           
  5336                           ;doprnt.c: 1415: if(width)
  5337  00066E  0100               	movlb	0	; () banked
  5338  000670  519F               	movf	__doprnt@width& (0+255),w,b
  5339  000672  0100               	movlb	0	; () banked
  5340  000674  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5341  000676  B4D8               	btfsc	status,2,c
  5342  000678  D0C4               	goto	l7636
  5343                           
  5344                           ; BSR set to: 0
  5345                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  5346                           
  5347                           ; BSR set to: 0
  5348                           
  5349                           ;doprnt.c: 1416: do
  5350  00067A  0100               	movlb	0	; () banked
  5351  00067C  EE20 F002          	lfsr	2,2
  5352  000680  518C               	movf	__doprnt@pb& (0+255),w,b
  5353  000682  26D9               	addwf	fsr2l,f,c
  5354  000684  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5355  000686  22DA               	addwfc	fsr2h,f,c
  5356  000688  50DE               	movf	postinc2,w,c
  5357  00068A  10DE               	iorwf	postinc2,w,c
  5358  00068C  B4D8               	btfsc	status,2,c
  5359  00068E  D018               	goto	l7608
  5360                           
  5361                           ; BSR set to: 0
  5362  000690  0100               	movlb	0	; () banked
  5363  000692  EE20 F002          	lfsr	2,2
  5364  000696  518C               	movf	__doprnt@pb& (0+255),w,b
  5365  000698  26D9               	addwf	fsr2l,f,c
  5366  00069A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5367  00069C  22DA               	addwfc	fsr2h,f,c
  5368  00069E  CFDE F092          	movff	postinc2,??__doprnt
  5369  0006A2  CFDD F093          	movff	postdec2,??__doprnt+1
  5370  0006A6  D801               	call	u11818
  5371  0006A8  D020               	goto	l7612
  5372  0006AA                     u11818:
  5373  0006AA  0005               	push	
  5374  0006AC  6EFA               	movwf	pclath,c
  5375  0006AE  0100               	movlb	0	; () banked
  5376  0006B0  5192               	movf	??__doprnt& (0+255),w,b
  5377  0006B2  6EFD               	movwf	tosl,c
  5378  0006B4  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5379  0006B6  6EFE               	movwf	tosh,c
  5380  0006B8  6AFF               	clrf	tosu,c
  5381  0006BA  50FA               	movf	pclath,w,c
  5382  0006BC  0E30               	movlw	48
  5383  0006BE  0012               	return		;indir
  5384  0006C0                     l7608:
  5385  0006C0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5386  0006C4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5387  0006C8  CFDE F092          	movff	postinc2,??__doprnt
  5388  0006CC  CFDD F093          	movff	postdec2,??__doprnt+1
  5389  0006D0  C092  FFD9         	movff	??__doprnt,fsr2l
  5390  0006D4  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5391  0006D8  0E30               	movlw	48
  5392  0006DA  6EDF               	movwf	indf2,c
  5393  0006DC  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5394  0006E0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5395  0006E4  2ADE               	incf	postinc2,f,c
  5396  0006E6  0E00               	movlw	0
  5397  0006E8  22DD               	addwfc	postdec2,f,c
  5398  0006EA                     l7612:
  5399                           
  5400                           ;doprnt.c: 1418: while(--width);
  5401  0006EA  0100               	movlb	0	; () banked
  5402  0006EC  079F               	decf	__doprnt@width& (0+255),f,b
  5403  0006EE  A0D8               	btfss	status,0,c
  5404  0006F0  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5405  0006F2  D7BD               	goto	l7602
  5406  0006F4                     l7614:
  5407                           
  5408                           ; BSR set to: 0
  5409                           ;doprnt.c: 1422: {
  5410                           ;doprnt.c: 1424: if(width
  5411                           ;doprnt.c: 1428: )
  5412  0006F4  0100               	movlb	0	; () banked
  5413  0006F6  519F               	movf	__doprnt@width& (0+255),w,b
  5414  0006F8  0100               	movlb	0	; () banked
  5415  0006FA  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5416  0006FC  B4D8               	btfsc	status,2,c
  5417  0006FE  D042               	goto	l7626
  5418  000700                     l7616:
  5419                           
  5420                           ; BSR set to: 0
  5421                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5422  000700  0100               	movlb	0	; () banked
  5423  000702  EE20 F002          	lfsr	2,2
  5424  000706  518C               	movf	__doprnt@pb& (0+255),w,b
  5425  000708  26D9               	addwf	fsr2l,f,c
  5426  00070A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5427  00070C  22DA               	addwfc	fsr2h,f,c
  5428  00070E  50DE               	movf	postinc2,w,c
  5429  000710  10DE               	iorwf	postinc2,w,c
  5430  000712  B4D8               	btfsc	status,2,c
  5431  000714  D018               	goto	l7620
  5432                           
  5433                           ; BSR set to: 0
  5434  000716  0100               	movlb	0	; () banked
  5435  000718  EE20 F002          	lfsr	2,2
  5436  00071C  518C               	movf	__doprnt@pb& (0+255),w,b
  5437  00071E  26D9               	addwf	fsr2l,f,c
  5438  000720  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5439  000722  22DA               	addwfc	fsr2h,f,c
  5440  000724  CFDE F092          	movff	postinc2,??__doprnt
  5441  000728  CFDD F093          	movff	postdec2,??__doprnt+1
  5442  00072C  D801               	call	u11858
  5443  00072E  D020               	goto	l7624
  5444  000730                     u11858:
  5445  000730  0005               	push	
  5446  000732  6EFA               	movwf	pclath,c
  5447  000734  0100               	movlb	0	; () banked
  5448  000736  5192               	movf	??__doprnt& (0+255),w,b
  5449  000738  6EFD               	movwf	tosl,c
  5450  00073A  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5451  00073C  6EFE               	movwf	tosh,c
  5452  00073E  6AFF               	clrf	tosu,c
  5453  000740  50FA               	movf	pclath,w,c
  5454  000742  0E20               	movlw	32
  5455  000744  0012               	return		;indir
  5456  000746                     l7620:
  5457  000746  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5458  00074A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5459  00074E  CFDE F092          	movff	postinc2,??__doprnt
  5460  000752  CFDD F093          	movff	postdec2,??__doprnt+1
  5461  000756  C092  FFD9         	movff	??__doprnt,fsr2l
  5462  00075A  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5463  00075E  0E20               	movlw	32
  5464  000760  6EDF               	movwf	indf2,c
  5465  000762  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5466  000766  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5467  00076A  2ADE               	incf	postinc2,f,c
  5468  00076C  0E00               	movlw	0
  5469  00076E  22DD               	addwfc	postdec2,f,c
  5470  000770                     l7624:
  5471                           
  5472                           ;doprnt.c: 1431: while(--width);
  5473  000770  0100               	movlb	0	; () banked
  5474  000772  079F               	decf	__doprnt@width& (0+255),f,b
  5475  000774  A0D8               	btfss	status,0,c
  5476  000776  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5477  000778  0100               	movlb	0	; () banked
  5478  00077A  519F               	movf	__doprnt@width& (0+255),w,b
  5479  00077C  0100               	movlb	0	; () banked
  5480  00077E  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5481  000780  A4D8               	btfss	status,2,c
  5482  000782  D7BE               	goto	l7616
  5483  000784                     l7626:
  5484                           
  5485                           ; BSR set to: 0
  5486                           ;doprnt.c: 1438: if(flag & 0x03)
  5487  000784  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5488  000788  0E03               	movlw	3
  5489  00078A  0100               	movlb	0	; () banked
  5490  00078C  1792               	andwf	??__doprnt& (0+255),f,b
  5491  00078E  B4D8               	btfsc	status,2,c
  5492  000790  D038               	goto	l7636
  5493                           
  5494                           ; BSR set to: 0
  5495                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5496  000792  0100               	movlb	0	; () banked
  5497  000794  EE20 F002          	lfsr	2,2
  5498  000798  518C               	movf	__doprnt@pb& (0+255),w,b
  5499  00079A  26D9               	addwf	fsr2l,f,c
  5500  00079C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5501  00079E  22DA               	addwfc	fsr2h,f,c
  5502  0007A0  50DE               	movf	postinc2,w,c
  5503  0007A2  10DE               	iorwf	postinc2,w,c
  5504  0007A4  B4D8               	btfsc	status,2,c
  5505  0007A6  D018               	goto	l7632
  5506                           
  5507                           ; BSR set to: 0
  5508  0007A8  0100               	movlb	0	; () banked
  5509  0007AA  EE20 F002          	lfsr	2,2
  5510  0007AE  518C               	movf	__doprnt@pb& (0+255),w,b
  5511  0007B0  26D9               	addwf	fsr2l,f,c
  5512  0007B2  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5513  0007B4  22DA               	addwfc	fsr2h,f,c
  5514  0007B6  CFDE F092          	movff	postinc2,??__doprnt
  5515  0007BA  CFDD F093          	movff	postdec2,??__doprnt+1
  5516  0007BE  D801               	call	u11898
  5517  0007C0  D020               	goto	l7636
  5518  0007C2                     u11898:
  5519  0007C2  0005               	push	
  5520  0007C4  6EFA               	movwf	pclath,c
  5521  0007C6  0100               	movlb	0	; () banked
  5522  0007C8  5192               	movf	??__doprnt& (0+255),w,b
  5523  0007CA  6EFD               	movwf	tosl,c
  5524  0007CC  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5525  0007CE  6EFE               	movwf	tosh,c
  5526  0007D0  6AFF               	clrf	tosu,c
  5527  0007D2  50FA               	movf	pclath,w,c
  5528  0007D4  0E2D               	movlw	45
  5529  0007D6  0012               	return		;indir
  5530  0007D8                     l7632:
  5531  0007D8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5532  0007DC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5533  0007E0  CFDE F092          	movff	postinc2,??__doprnt
  5534  0007E4  CFDD F093          	movff	postdec2,??__doprnt+1
  5535  0007E8  C092  FFD9         	movff	??__doprnt,fsr2l
  5536  0007EC  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5537  0007F0  0E2D               	movlw	45
  5538  0007F2  6EDF               	movwf	indf2,c
  5539  0007F4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5540  0007F8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5541  0007FC  2ADE               	incf	postinc2,f,c
  5542  0007FE  0E00               	movlw	0
  5543  000800  22DD               	addwfc	postdec2,f,c
  5544  000802                     l7636:
  5545                           
  5546                           ;doprnt.c: 1469: }
  5547                           ;doprnt.c: 1472: prec = c;
  5548  000802  C0A1  F097         	movff	__doprnt@c,__doprnt@prec
  5549                           
  5550                           ;doprnt.c: 1474: while(prec--) {
  5551  000806  D098               	goto	l7656
  5552  000808                     l7638:
  5553                           
  5554                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5555  000808  0100               	movlb	0	; () banked
  5556  00080A  5197               	movf	__doprnt@prec& (0+255),w,b
  5557  00080C  0D02               	mullw	2
  5558  00080E  0EE6               	movlw	low _dpowers
  5559  000810  24F3               	addwf	prodl,w,c
  5560  000812  6EF6               	movwf	tblptrl,c
  5561  000814  0EFE               	movlw	high _dpowers
  5562  000816  20F4               	addwfc	prodh,w,c
  5563  000818  6EF7               	movwf	tblptrh,c
  5564  00081A                     	if	1	;There are 3 active tblptr bytes
  5565  00081A  6AF8               	clrf	tblptru,c
  5566  00081C  0E00               	movlw	low (__mediumconst shr (0+16))
  5567  00081E  22F8               	addwfc	tblptru,f,c
  5568  000820                     	endif
  5569  000820  0009               	tblrd		*+
  5570  000822  CFF5 F082          	movff	tablat,___lwdiv@divisor
  5571  000826  000A               	tblrd		*-
  5572  000828  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  5573  00082C  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  5574  000830  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  5575  000834  EC4F  F015         	call	___lwdiv
  5576  000838  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  5577  00083C  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  5578  000840  0E00               	movlw	0
  5579  000842  0100               	movlb	0	; () banked
  5580  000844  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  5581  000846  0E0A               	movlw	10
  5582  000848  6F89               	movwf	___lwmod@divisor& (0+255),b
  5583  00084A  EC2D  F016         	call	___lwmod	;wreg free
  5584  00084E  0100               	movlb	0	; () banked
  5585  000850  5187               	movf	?___lwmod& (0+255),w,b
  5586  000852  0F30               	addlw	48
  5587  000854  0100               	movlb	0	; () banked
  5588  000856  6FA1               	movwf	__doprnt@c& (0+255),b
  5589                           
  5590                           ;doprnt.c: 1491: break;
  5591  000858  D036               	goto	l7648
  5592  00085A                     l7640:
  5593                           
  5594                           ; BSR set to: 0
  5595                           ;doprnt.c: 1499: {
  5596                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5597  00085A  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  5598  00085E  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  5599  000862  0100               	movlb	0	; () banked
  5600  000864  5197               	movf	__doprnt@prec& (0+255),w,b
  5601  000866  0D02               	mullw	2
  5602  000868  0EF0               	movlw	low _hexpowers
  5603  00086A  24F3               	addwf	prodl,w,c
  5604  00086C  6EF6               	movwf	tblptrl,c
  5605  00086E  0EFE               	movlw	high _hexpowers
  5606  000870  20F4               	addwfc	prodh,w,c
  5607  000872  6EF7               	movwf	tblptrh,c
  5608  000874                     	if	1	;There are 3 active tblptr bytes
  5609  000874  6AF8               	clrf	tblptru,c
  5610  000876  0E00               	movlw	low (__mediumconst shr (0+16))
  5611  000878  22F8               	addwfc	tblptru,f,c
  5612  00087A                     	endif
  5613  00087A  0009               	tblrd		*+
  5614  00087C  CFF5 F082          	movff	tablat,___lwdiv@divisor
  5615  000880  000A               	tblrd		*-
  5616  000882  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  5617  000886  EC4F  F015         	call	___lwdiv	;wreg free
  5618  00088A  0100               	movlb	0	; () banked
  5619  00088C  5180               	movf	?___lwdiv& (0+255),w,b
  5620  00088E  0B0F               	andlw	15
  5621  000890  0100               	movlb	0	; () banked
  5622  000892  6F96               	movwf	__doprnt@idx& (0+255),b
  5623                           
  5624                           ; BSR set to: 0
  5625                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  5626  000894  0100               	movlb	0	; () banked
  5627  000896  5196               	movf	__doprnt@idx& (0+255),w,b
  5628  000898  0D01               	mullw	1
  5629  00089A  0E97               	movlw	low STR_19
  5630  00089C  24F3               	addwf	prodl,w,c
  5631  00089E  6EF6               	movwf	tblptrl,c
  5632  0008A0  0EFF               	movlw	high STR_19
  5633  0008A2  20F4               	addwfc	prodh,w,c
  5634  0008A4  6EF7               	movwf	tblptrh,c
  5635  0008A6                     	if	1	;There are 3 active tblptr bytes
  5636  0008A6  6AF8               	clrf	tblptru,c
  5637  0008A8  0E00               	movlw	low (__mediumconst shr (0+16))
  5638  0008AA  22F8               	addwfc	tblptru,f,c
  5639  0008AC                     	endif
  5640  0008AC  0008               	tblrd		*
  5641  0008AE  CFF5 F0A1          	movff	tablat,__doprnt@c
  5642                           
  5643                           ; BSR set to: 0
  5644                           ;doprnt.c: 1523: }
  5645                           
  5646                           ;doprnt.c: 1508: }
  5647                           ;doprnt.c: 1510: break;
  5648  0008B2  D009               	goto	l7648
  5649  0008B4                     l7646:
  5650  0008B4  0100               	movlb	0	; () banked
  5651  0008B6  519E               	movf	__doprnt@flag& (0+255),w,b
  5652  0008B8  0B80               	andlw	128
  5653                           
  5654                           ; Switch size 1, requested type "space"
  5655                           ; Number of cases is 2, Range of values is 0 to 128
  5656                           ; switch strategies available:
  5657                           ; Name         Instructions Cycles
  5658                           ; simple_byte            7     4 (average)
  5659                           ;	Chosen strategy is simple_byte
  5660  0008BA  0A00               	xorlw	0	; case 0
  5661  0008BC  B4D8               	btfsc	status,2,c
  5662  0008BE  D7A4               	goto	l7638
  5663  0008C0  0A80               	xorlw	128	; case 128
  5664  0008C2  B4D8               	btfsc	status,2,c
  5665  0008C4  D7CA               	goto	l7640
  5666  0008C6                     l7648:
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  5670  0008C6  0100               	movlb	0	; () banked
  5671  0008C8  EE20 F002          	lfsr	2,2
  5672  0008CC  518C               	movf	__doprnt@pb& (0+255),w,b
  5673  0008CE  26D9               	addwf	fsr2l,f,c
  5674  0008D0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5675  0008D2  22DA               	addwfc	fsr2h,f,c
  5676  0008D4  50DE               	movf	postinc2,w,c
  5677  0008D6  10DE               	iorwf	postinc2,w,c
  5678  0008D8  B4D8               	btfsc	status,2,c
  5679  0008DA  D019               	goto	l7652
  5680                           
  5681                           ; BSR set to: 0
  5682  0008DC  0100               	movlb	0	; () banked
  5683  0008DE  EE20 F002          	lfsr	2,2
  5684  0008E2  518C               	movf	__doprnt@pb& (0+255),w,b
  5685  0008E4  26D9               	addwf	fsr2l,f,c
  5686  0008E6  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5687  0008E8  22DA               	addwfc	fsr2h,f,c
  5688  0008EA  CFDE F092          	movff	postinc2,??__doprnt
  5689  0008EE  CFDD F093          	movff	postdec2,??__doprnt+1
  5690  0008F2  D801               	call	u11918
  5691  0008F4  D021               	goto	l7656
  5692  0008F6                     u11918:
  5693  0008F6  0005               	push	
  5694  0008F8  6EFA               	movwf	pclath,c
  5695  0008FA  0100               	movlb	0	; () banked
  5696  0008FC  5192               	movf	??__doprnt& (0+255),w,b
  5697  0008FE  6EFD               	movwf	tosl,c
  5698  000900  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5699  000902  6EFE               	movwf	tosh,c
  5700  000904  6AFF               	clrf	tosu,c
  5701  000906  50FA               	movf	pclath,w,c
  5702  000908  0100               	movlb	0	; () banked
  5703  00090A  51A1               	movf	__doprnt@c& (0+255),w,b
  5704  00090C  0012               	return		;indir
  5705  00090E                     l7652:
  5706  00090E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5707  000912  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5708  000916  CFDE F092          	movff	postinc2,??__doprnt
  5709  00091A  CFDD F093          	movff	postdec2,??__doprnt+1
  5710  00091E  C092  FFD9         	movff	??__doprnt,fsr2l
  5711  000922  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5712  000926  C0A1  FFDF         	movff	__doprnt@c,indf2
  5713  00092A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5714  00092E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5715  000932  2ADE               	incf	postinc2,f,c
  5716  000934  0E00               	movlw	0
  5717  000936  22DD               	addwfc	postdec2,f,c
  5718  000938                     l7656:
  5719  000938  0100               	movlb	0	; () banked
  5720  00093A  0797               	decf	__doprnt@prec& (0+255),f,b
  5721  00093C  0100               	movlb	0	; () banked
  5722  00093E  2997               	incf	__doprnt@prec& (0+255),w,b
  5723  000940  A4D8               	btfss	status,2,c
  5724  000942  D7B8               	goto	l7646
  5725  000944                     l7658:
  5726  000944  0100               	movlb	0	; () banked
  5727  000946  518E               	movf	__doprnt@f& (0+255),w,b
  5728  000948  0100               	movlb	0	; () banked
  5729  00094A  6F92               	movwf	??__doprnt& (0+255),b
  5730  00094C  0100               	movlb	0	; () banked
  5731  00094E  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  5732  000950  0100               	movlb	0	; () banked
  5733  000952  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5734  000954  0100               	movlb	0	; () banked
  5735  000956  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5736  000958  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5737  00095A  C092  FFF6         	movff	??__doprnt,tblptrl
  5738  00095E  C093  FFF7         	movff	??__doprnt+1,tblptrh
  5739  000962  0E00               	movlw	low (__mediumconst shr (0+16))
  5740  000964  6EF8               	movwf	tblptru,c
  5741  000966  0E0F               	movlw	(high __ramtop+-1)
  5742  000968  64F7               	cpfsgt	tblptrh,c
  5743  00096A  D003               	bra	u11937
  5744  00096C  0008               	tblrd		*
  5745  00096E  50F5               	movf	tablat,w,c
  5746  000970  D005               	bra	u11930
  5747  000972                     u11937:
  5748  000972  CFF6 FFE9          	movff	tblptrl,fsr0l
  5749  000976  CFF7 FFEA          	movff	tblptrh,fsr0h
  5750  00097A  50EF               	movf	indf0,w,c
  5751  00097C                     u11930:
  5752  00097C  0100               	movlb	0	; () banked
  5753  00097E  6FA1               	movwf	__doprnt@c& (0+255),b
  5754  000980  0100               	movlb	0	; () banked
  5755  000982  51A1               	movf	__doprnt@c& (0+255),w,b
  5756  000984  A4D8               	btfss	status,2,c
  5757  000986  EF0B  F000         	goto	l7452
  5758  00098A                     l7660:
  5759                           
  5760                           ;doprnt.c: 1540: return 0;
  5761  00098A  0E00               	movlw	0
  5762  00098C  0100               	movlb	0	; () banked
  5763  00098E  6F8D               	movwf	(?__doprnt+1)& (0+255),b
  5764  000990  0E00               	movlw	0
  5765  000992  6F8C               	movwf	?__doprnt& (0+255),b
  5766  000994  0012               	return	
  5767  000996                     __end_of__doprnt:
  5768                           	opt stack 0
  5769                           tosu	equ	0xFFF
  5770                           tosh	equ	0xFFE
  5771                           tosl	equ	0xFFD
  5772                           pclath	equ	0xFFA
  5773                           tblptru	equ	0xFF8
  5774                           tblptrh	equ	0xFF7
  5775                           tblptrl	equ	0xFF6
  5776                           tablat	equ	0xFF5
  5777                           prodh	equ	0xFF4
  5778                           prodl	equ	0xFF3
  5779                           intcon	equ	0xFF2
  5780                           intcon2	equ	0xFF1
  5781                           intcon3	equ	0xFF0
  5782                           indf0	equ	0xFEF
  5783                           postinc0	equ	0xFEE
  5784                           fsr0h	equ	0xFEA
  5785                           fsr0l	equ	0xFE9
  5786                           wreg	equ	0xFE8
  5787                           indf1	equ	0xFE7
  5788                           postinc1	equ	0xFE6
  5789                           postdec1	equ	0xFE5
  5790                           fsr1h	equ	0xFE2
  5791                           fsr1l	equ	0xFE1
  5792                           indf2	equ	0xFDF
  5793                           postinc2	equ	0xFDE
  5794                           postdec2	equ	0xFDD
  5795                           fsr2h	equ	0xFDA
  5796                           fsr2l	equ	0xFD9
  5797                           status	equ	0xFD8
  5798                           
  5799 ;; *************** function _putch *****************
  5800 ;; Defined at:
  5801 ;;		line 30 in file "lcd.c"
  5802 ;; Parameters:    Size  Location     Type
  5803 ;;  data            1    wreg     unsigned char 
  5804 ;; Auto vars:     Size  Location     Type
  5805 ;;  data            1    2[BANK0 ] unsigned char 
  5806 ;; Return value:  Size  Location     Type
  5807 ;;                  1    wreg      void 
  5808 ;; Registers used:
  5809 ;;		wreg, status,2, status,0, cstack
  5810 ;; Tracked objects:
  5811 ;;		On entry : 0/0
  5812 ;;		On exit  : 0/0
  5813 ;;		Unchanged: 0/0
  5814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5815 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5816 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5818 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5819 ;;Total ram usage:        1 bytes
  5820 ;; Hardware stack levels used:    1
  5821 ;; Hardware stack levels required when called:    6
  5822 ;; This function calls:
  5823 ;;		_lcdNibble
  5824 ;; This function is called by:
  5825 ;;		_printf
  5826 ;;		__doprnt
  5827 ;;		i2__doprnt
  5828 ;; This function uses a non-reentrant model
  5829 ;;
  5830                           
  5831                           	psect	text10
  5832  00310A                     __ptext10:
  5833                           	opt stack 0
  5834  00310A                     _putch:
  5835                           	opt stack 0
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;Skip over the trampoline to the duplicate function for level 2
  5839  00310A  B277               	btfsc	btemp,1,c
  5840  00310C  EFB4  F018         	goto	i2_putch
  5841  003110                     _putch$intlevel0:
  5842                           	opt stack 21
  5843                           
  5844                           ;incstack = 0
  5845                           ;putch@data stored from wreg
  5846  003110  0100               	movlb	0	; () banked
  5847  003112  6F82               	movwf	putch@data& (0+255),b
  5848                           
  5849                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  5850  003114  848C               	bsf	3980,2,c	;volatile
  5851                           
  5852                           ;lcd.c: 32: lcdNibble(data);
  5853  003116  0100               	movlb	0	; () banked
  5854  003118  5182               	movf	putch@data& (0+255),w,b
  5855  00311A  ECF9  F015         	call	_lcdNibble
  5856  00311E  0012               	return		;funcret
  5857  003120                     __end_of_putch:
  5858                           	opt stack 0
  5859                           tosu	equ	0xFFF
  5860                           tosh	equ	0xFFE
  5861                           tosl	equ	0xFFD
  5862                           pclath	equ	0xFFA
  5863                           tblptru	equ	0xFF8
  5864                           tblptrh	equ	0xFF7
  5865                           tblptrl	equ	0xFF6
  5866                           tablat	equ	0xFF5
  5867                           prodh	equ	0xFF4
  5868                           prodl	equ	0xFF3
  5869                           intcon	equ	0xFF2
  5870                           intcon2	equ	0xFF1
  5871                           intcon3	equ	0xFF0
  5872                           indf0	equ	0xFEF
  5873                           postinc0	equ	0xFEE
  5874                           fsr0h	equ	0xFEA
  5875                           fsr0l	equ	0xFE9
  5876                           wreg	equ	0xFE8
  5877                           indf1	equ	0xFE7
  5878                           postinc1	equ	0xFE6
  5879                           postdec1	equ	0xFE5
  5880                           fsr1h	equ	0xFE2
  5881                           fsr1l	equ	0xFE1
  5882                           indf2	equ	0xFDF
  5883                           postinc2	equ	0xFDE
  5884                           postdec2	equ	0xFDD
  5885                           fsr2h	equ	0xFDA
  5886                           fsr2l	equ	0xFD9
  5887                           status	equ	0xFD8
  5888                           
  5889 ;; *************** function _isdigit *****************
  5890 ;; Defined at:
  5891 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  5892 ;; Parameters:    Size  Location     Type
  5893 ;;  c               1    wreg     unsigned char 
  5894 ;; Auto vars:     Size  Location     Type
  5895 ;;  c               1    2[BANK0 ] unsigned char 
  5896 ;; Return value:  Size  Location     Type
  5897 ;;		None               void
  5898 ;; Registers used:
  5899 ;;		wreg, status,2, status,0
  5900 ;; Tracked objects:
  5901 ;;		On entry : 0/0
  5902 ;;		On exit  : 0/0
  5903 ;;		Unchanged: 0/0
  5904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5905 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5906 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5907 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5908 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5909 ;;Total ram usage:        3 bytes
  5910 ;; Hardware stack levels used:    1
  5911 ;; Hardware stack levels required when called:    5
  5912 ;; This function calls:
  5913 ;;		Nothing
  5914 ;; This function is called by:
  5915 ;;		__doprnt
  5916 ;; This function uses a non-reentrant model
  5917 ;;
  5918                           
  5919                           	psect	text11
  5920  00309C                     __ptext11:
  5921                           	opt stack 0
  5922  00309C                     _isdigit:
  5923                           	opt stack 22
  5924                           
  5925                           ;incstack = 0
  5926                           ;isdigit@c stored from wreg
  5927  00309C  0100               	movlb	0	; () banked
  5928  00309E  6F82               	movwf	isdigit@c& (0+255),b
  5929  0030A0  0E00               	movlw	0
  5930  0030A2  0100               	movlb	0	; () banked
  5931  0030A4  6F81               	movwf	_isdigit$714& (0+255),b
  5932                           
  5933                           ; BSR set to: 0
  5934  0030A6  0E3A               	movlw	58
  5935  0030A8  0100               	movlb	0	; () banked
  5936  0030AA  6182               	cpfslt	isdigit@c& (0+255),b
  5937  0030AC  D007               	goto	l4356
  5938                           
  5939                           ; BSR set to: 0
  5940  0030AE  0E2F               	movlw	47
  5941  0030B0  0100               	movlb	0	; () banked
  5942  0030B2  6582               	cpfsgt	isdigit@c& (0+255),b
  5943  0030B4  D003               	goto	l4356
  5944                           
  5945                           ; BSR set to: 0
  5946  0030B6  0E01               	movlw	1
  5947  0030B8  0100               	movlb	0	; () banked
  5948  0030BA  6F81               	movwf	_isdigit$714& (0+255),b
  5949  0030BC                     l4356:
  5950                           
  5951                           ; BSR set to: 0
  5952  0030BC  C081  F080         	movff	_isdigit$714,??_isdigit
  5953  0030C0  0100               	movlb	0	; () banked
  5954  0030C2  3180               	rrcf	??_isdigit& (0+255),w,b
  5955  0030C4  0012               	return	
  5956  0030C6                     __end_of_isdigit:
  5957                           	opt stack 0
  5958                           tosu	equ	0xFFF
  5959                           tosh	equ	0xFFE
  5960                           tosl	equ	0xFFD
  5961                           pclath	equ	0xFFA
  5962                           tblptru	equ	0xFF8
  5963                           tblptrh	equ	0xFF7
  5964                           tblptrl	equ	0xFF6
  5965                           tablat	equ	0xFF5
  5966                           prodh	equ	0xFF4
  5967                           prodl	equ	0xFF3
  5968                           intcon	equ	0xFF2
  5969                           intcon2	equ	0xFF1
  5970                           intcon3	equ	0xFF0
  5971                           indf0	equ	0xFEF
  5972                           postinc0	equ	0xFEE
  5973                           fsr0h	equ	0xFEA
  5974                           fsr0l	equ	0xFE9
  5975                           wreg	equ	0xFE8
  5976                           indf1	equ	0xFE7
  5977                           postinc1	equ	0xFE6
  5978                           postdec1	equ	0xFE5
  5979                           fsr1h	equ	0xFE2
  5980                           fsr1l	equ	0xFE1
  5981                           indf2	equ	0xFDF
  5982                           postinc2	equ	0xFDE
  5983                           postdec2	equ	0xFDD
  5984                           fsr2h	equ	0xFDA
  5985                           fsr2l	equ	0xFD9
  5986                           status	equ	0xFD8
  5987                           
  5988 ;; *************** function ___lwmod *****************
  5989 ;; Defined at:
  5990 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  5991 ;; Parameters:    Size  Location     Type
  5992 ;;  dividend        2    7[BANK0 ] unsigned int 
  5993 ;;  divisor         2    9[BANK0 ] unsigned int 
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;  counter         1   11[BANK0 ] unsigned char 
  5996 ;; Return value:  Size  Location     Type
  5997 ;;                  2    7[BANK0 ] unsigned int 
  5998 ;; Registers used:
  5999 ;;		wreg, status,2, status,0
  6000 ;; Tracked objects:
  6001 ;;		On entry : 0/0
  6002 ;;		On exit  : 0/0
  6003 ;;		Unchanged: 0/0
  6004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6005 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;Total ram usage:        5 bytes
  6010 ;; Hardware stack levels used:    1
  6011 ;; Hardware stack levels required when called:    5
  6012 ;; This function calls:
  6013 ;;		Nothing
  6014 ;; This function is called by:
  6015 ;;		__doprnt
  6016 ;; This function uses a non-reentrant model
  6017 ;;
  6018                           
  6019                           	psect	text12
  6020  002C5A                     __ptext12:
  6021                           	opt stack 0
  6022  002C5A                     ___lwmod:
  6023                           	opt stack 22
  6024                           
  6025                           ; BSR set to: 0
  6026                           ;incstack = 0
  6027  002C5A  0100               	movlb	0	; () banked
  6028  002C5C  5189               	movf	___lwmod@divisor& (0+255),w,b
  6029  002C5E  0100               	movlb	0	; () banked
  6030  002C60  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6031  002C62  B4D8               	btfsc	status,2,c
  6032  002C64  D026               	goto	l977
  6033                           
  6034                           ; BSR set to: 0
  6035  002C66  0E01               	movlw	1
  6036  002C68  0100               	movlb	0	; () banked
  6037  002C6A  6F8B               	movwf	___lwmod@counter& (0+255),b
  6038  002C6C  D006               	goto	l4394
  6039  002C6E                     l4392:
  6040                           
  6041                           ; BSR set to: 0
  6042  002C6E  0100               	movlb	0	; () banked
  6043  002C70  90D8               	bcf	status,0,c
  6044  002C72  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  6045  002C74  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6046  002C76  0100               	movlb	0	; () banked
  6047  002C78  2B8B               	incf	___lwmod@counter& (0+255),f,b
  6048  002C7A                     l4394:
  6049                           
  6050                           ; BSR set to: 0
  6051  002C7A  0100               	movlb	0	; () banked
  6052  002C7C  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6053  002C7E  D7F7               	goto	l4392
  6054  002C80                     l4396:
  6055                           
  6056                           ; BSR set to: 0
  6057  002C80  0100               	movlb	0	; () banked
  6058  002C82  5189               	movf	___lwmod@divisor& (0+255),w,b
  6059  002C84  0100               	movlb	0	; () banked
  6060  002C86  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  6061  002C88  0100               	movlb	0	; () banked
  6062  002C8A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6063  002C8C  0100               	movlb	0	; () banked
  6064  002C8E  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6065  002C90  A0D8               	btfss	status,0,c
  6066  002C92  D008               	goto	l4400
  6067                           
  6068                           ; BSR set to: 0
  6069  002C94  0100               	movlb	0	; () banked
  6070  002C96  5189               	movf	___lwmod@divisor& (0+255),w,b
  6071  002C98  0100               	movlb	0	; () banked
  6072  002C9A  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  6073  002C9C  0100               	movlb	0	; () banked
  6074  002C9E  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6075  002CA0  0100               	movlb	0	; () banked
  6076  002CA2  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6077  002CA4                     l4400:
  6078                           
  6079                           ; BSR set to: 0
  6080  002CA4  0100               	movlb	0	; () banked
  6081  002CA6  90D8               	bcf	status,0,c
  6082  002CA8  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6083  002CAA  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  6084                           
  6085                           ; BSR set to: 0
  6086  002CAC  0100               	movlb	0	; () banked
  6087  002CAE  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  6088  002CB0  D7E7               	goto	l4396
  6089  002CB2                     l977:
  6090                           
  6091                           ; BSR set to: 0
  6092  002CB2  C087  F087         	movff	___lwmod@dividend,?___lwmod
  6093  002CB6  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  6094                           
  6095                           ; BSR set to: 0
  6096  002CBA  0012               	return		;funcret
  6097  002CBC                     __end_of___lwmod:
  6098                           	opt stack 0
  6099                           tosu	equ	0xFFF
  6100                           tosh	equ	0xFFE
  6101                           tosl	equ	0xFFD
  6102                           pclath	equ	0xFFA
  6103                           tblptru	equ	0xFF8
  6104                           tblptrh	equ	0xFF7
  6105                           tblptrl	equ	0xFF6
  6106                           tablat	equ	0xFF5
  6107                           prodh	equ	0xFF4
  6108                           prodl	equ	0xFF3
  6109                           intcon	equ	0xFF2
  6110                           intcon2	equ	0xFF1
  6111                           intcon3	equ	0xFF0
  6112                           indf0	equ	0xFEF
  6113                           postinc0	equ	0xFEE
  6114                           fsr0h	equ	0xFEA
  6115                           fsr0l	equ	0xFE9
  6116                           wreg	equ	0xFE8
  6117                           indf1	equ	0xFE7
  6118                           postinc1	equ	0xFE6
  6119                           postdec1	equ	0xFE5
  6120                           fsr1h	equ	0xFE2
  6121                           fsr1l	equ	0xFE1
  6122                           indf2	equ	0xFDF
  6123                           postinc2	equ	0xFDE
  6124                           postdec2	equ	0xFDD
  6125                           fsr2h	equ	0xFDA
  6126                           fsr2l	equ	0xFD9
  6127                           status	equ	0xFD8
  6128                           
  6129 ;; *************** function ___lwdiv *****************
  6130 ;; Defined at:
  6131 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6132 ;; Parameters:    Size  Location     Type
  6133 ;;  dividend        2    0[BANK0 ] unsigned int 
  6134 ;;  divisor         2    2[BANK0 ] unsigned int 
  6135 ;; Auto vars:     Size  Location     Type
  6136 ;;  quotient        2    5[BANK0 ] unsigned int 
  6137 ;;  counter         1    4[BANK0 ] unsigned char 
  6138 ;; Return value:  Size  Location     Type
  6139 ;;                  2    0[BANK0 ] unsigned int 
  6140 ;; Registers used:
  6141 ;;		wreg, status,2, status,0
  6142 ;; Tracked objects:
  6143 ;;		On entry : 0/0
  6144 ;;		On exit  : 0/0
  6145 ;;		Unchanged: 0/0
  6146 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6147 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6148 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6149 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6150 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6151 ;;Total ram usage:        7 bytes
  6152 ;; Hardware stack levels used:    1
  6153 ;; Hardware stack levels required when called:    5
  6154 ;; This function calls:
  6155 ;;		Nothing
  6156 ;; This function is called by:
  6157 ;;		__doprnt
  6158 ;; This function uses a non-reentrant model
  6159 ;;
  6160                           
  6161                           	psect	text13
  6162  002A9E                     __ptext13:
  6163                           	opt stack 0
  6164  002A9E                     ___lwdiv:
  6165                           	opt stack 22
  6166                           
  6167                           ; BSR set to: 0
  6168                           ;incstack = 0
  6169  002A9E  0E00               	movlw	0
  6170  002AA0  0100               	movlb	0	; () banked
  6171  002AA2  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6172  002AA4  0E00               	movlw	0
  6173  002AA6  6F85               	movwf	___lwdiv@quotient& (0+255),b
  6174                           
  6175                           ; BSR set to: 0
  6176  002AA8  0100               	movlb	0	; () banked
  6177  002AAA  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6178  002AAC  0100               	movlb	0	; () banked
  6179  002AAE  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6180  002AB0  B4D8               	btfsc	status,2,c
  6181  002AB2  D02C               	goto	l967
  6182                           
  6183                           ; BSR set to: 0
  6184  002AB4  0E01               	movlw	1
  6185  002AB6  0100               	movlb	0	; () banked
  6186  002AB8  6F84               	movwf	___lwdiv@counter& (0+255),b
  6187  002ABA  D006               	goto	l4374
  6188  002ABC                     l4372:
  6189                           
  6190                           ; BSR set to: 0
  6191  002ABC  0100               	movlb	0	; () banked
  6192  002ABE  90D8               	bcf	status,0,c
  6193  002AC0  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  6194  002AC2  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6195  002AC4  0100               	movlb	0	; () banked
  6196  002AC6  2B84               	incf	___lwdiv@counter& (0+255),f,b
  6197  002AC8                     l4374:
  6198                           
  6199                           ; BSR set to: 0
  6200  002AC8  0100               	movlb	0	; () banked
  6201  002ACA  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6202  002ACC  D7F7               	goto	l4372
  6203  002ACE                     l4376:
  6204                           
  6205                           ; BSR set to: 0
  6206  002ACE  0100               	movlb	0	; () banked
  6207  002AD0  90D8               	bcf	status,0,c
  6208  002AD2  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  6209  002AD4  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6210                           
  6211                           ; BSR set to: 0
  6212  002AD6  0100               	movlb	0	; () banked
  6213  002AD8  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6214  002ADA  0100               	movlb	0	; () banked
  6215  002ADC  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  6216  002ADE  0100               	movlb	0	; () banked
  6217  002AE0  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6218  002AE2  0100               	movlb	0	; () banked
  6219  002AE4  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6220  002AE6  A0D8               	btfss	status,0,c
  6221  002AE8  D00A               	goto	l4384
  6222                           
  6223                           ; BSR set to: 0
  6224  002AEA  0100               	movlb	0	; () banked
  6225  002AEC  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6226  002AEE  0100               	movlb	0	; () banked
  6227  002AF0  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  6228  002AF2  0100               	movlb	0	; () banked
  6229  002AF4  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6230  002AF6  0100               	movlb	0	; () banked
  6231  002AF8  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6232                           
  6233                           ; BSR set to: 0
  6234  002AFA  0100               	movlb	0	; () banked
  6235  002AFC  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  6236  002AFE                     l4384:
  6237                           
  6238                           ; BSR set to: 0
  6239  002AFE  0100               	movlb	0	; () banked
  6240  002B00  90D8               	bcf	status,0,c
  6241  002B02  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6242  002B04  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  6243                           
  6244                           ; BSR set to: 0
  6245  002B06  0100               	movlb	0	; () banked
  6246  002B08  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  6247  002B0A  D7E1               	goto	l4376
  6248  002B0C                     l967:
  6249                           
  6250                           ; BSR set to: 0
  6251  002B0C  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  6252  002B10  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6253                           
  6254                           ; BSR set to: 0
  6255  002B14  0012               	return		;funcret
  6256  002B16                     __end_of___lwdiv:
  6257                           	opt stack 0
  6258                           tosu	equ	0xFFF
  6259                           tosh	equ	0xFFE
  6260                           tosl	equ	0xFFD
  6261                           pclath	equ	0xFFA
  6262                           tblptru	equ	0xFF8
  6263                           tblptrh	equ	0xFF7
  6264                           tblptrl	equ	0xFF6
  6265                           tablat	equ	0xFF5
  6266                           prodh	equ	0xFF4
  6267                           prodl	equ	0xFF3
  6268                           intcon	equ	0xFF2
  6269                           intcon2	equ	0xFF1
  6270                           intcon3	equ	0xFF0
  6271                           indf0	equ	0xFEF
  6272                           postinc0	equ	0xFEE
  6273                           fsr0h	equ	0xFEA
  6274                           fsr0l	equ	0xFE9
  6275                           wreg	equ	0xFE8
  6276                           indf1	equ	0xFE7
  6277                           postinc1	equ	0xFE6
  6278                           postdec1	equ	0xFE5
  6279                           fsr1h	equ	0xFE2
  6280                           fsr1l	equ	0xFE1
  6281                           indf2	equ	0xFDF
  6282                           postinc2	equ	0xFDE
  6283                           postdec2	equ	0xFDD
  6284                           fsr2h	equ	0xFDA
  6285                           fsr2l	equ	0xFD9
  6286                           status	equ	0xFD8
  6287                           
  6288 ;; *************** function ___awmod *****************
  6289 ;; Defined at:
  6290 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  6291 ;; Parameters:    Size  Location     Type
  6292 ;;  dividend        2    0[BANK0 ] int 
  6293 ;;  divisor         2    2[BANK0 ] int 
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;  sign            1    5[BANK0 ] unsigned char 
  6296 ;;  counter         1    4[BANK0 ] unsigned char 
  6297 ;; Return value:  Size  Location     Type
  6298 ;;                  2    0[BANK0 ] int 
  6299 ;; Registers used:
  6300 ;;		wreg, status,2, status,0
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6306 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6307 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;Total ram usage:        6 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:    5
  6313 ;; This function calls:
  6314 ;;		Nothing
  6315 ;; This function is called by:
  6316 ;;		_update_display
  6317 ;;		_update_state
  6318 ;;		__measure
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text14
  6323  00296A                     __ptext14:
  6324                           	opt stack 0
  6325  00296A                     ___awmod:
  6326                           	opt stack 24
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;incstack = 0
  6330  00296A  0E00               	movlw	0
  6331  00296C  0100               	movlb	0	; () banked
  6332  00296E  6F85               	movwf	___awmod@sign& (0+255),b
  6333                           
  6334                           ; BSR set to: 0
  6335  002970  0100               	movlb	0	; () banked
  6336  002972  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6337  002974  D008               	goto	l4796
  6338                           
  6339                           ; BSR set to: 0
  6340  002976  0100               	movlb	0	; () banked
  6341  002978  6D80               	negf	___awmod@dividend& (0+255),b
  6342  00297A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6343  00297C  B0D8               	btfsc	status,0,c
  6344  00297E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6345                           
  6346                           ; BSR set to: 0
  6347  002980  0E01               	movlw	1
  6348  002982  0100               	movlb	0	; () banked
  6349  002984  6F85               	movwf	___awmod@sign& (0+255),b
  6350  002986                     l4796:
  6351                           
  6352                           ; BSR set to: 0
  6353  002986  0100               	movlb	0	; () banked
  6354  002988  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6355  00298A  D005               	goto	l4800
  6356                           
  6357                           ; BSR set to: 0
  6358  00298C  0100               	movlb	0	; () banked
  6359  00298E  6D82               	negf	___awmod@divisor& (0+255),b
  6360  002990  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  6361  002992  B0D8               	btfsc	status,0,c
  6362  002994  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  6363  002996                     l4800:
  6364                           
  6365                           ; BSR set to: 0
  6366  002996  0100               	movlb	0	; () banked
  6367  002998  5182               	movf	___awmod@divisor& (0+255),w,b
  6368  00299A  0100               	movlb	0	; () banked
  6369  00299C  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6370  00299E  B4D8               	btfsc	status,2,c
  6371  0029A0  D026               	goto	l4816
  6372                           
  6373                           ; BSR set to: 0
  6374  0029A2  0E01               	movlw	1
  6375  0029A4  0100               	movlb	0	; () banked
  6376  0029A6  6F84               	movwf	___awmod@counter& (0+255),b
  6377  0029A8  D006               	goto	l4806
  6378  0029AA                     l4804:
  6379                           
  6380                           ; BSR set to: 0
  6381  0029AA  0100               	movlb	0	; () banked
  6382  0029AC  90D8               	bcf	status,0,c
  6383  0029AE  3782               	rlcf	___awmod@divisor& (0+255),f,b
  6384  0029B0  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6385  0029B2  0100               	movlb	0	; () banked
  6386  0029B4  2B84               	incf	___awmod@counter& (0+255),f,b
  6387  0029B6                     l4806:
  6388                           
  6389                           ; BSR set to: 0
  6390  0029B6  0100               	movlb	0	; () banked
  6391  0029B8  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6392  0029BA  D7F7               	goto	l4804
  6393  0029BC                     l4808:
  6394                           
  6395                           ; BSR set to: 0
  6396  0029BC  0100               	movlb	0	; () banked
  6397  0029BE  5182               	movf	___awmod@divisor& (0+255),w,b
  6398  0029C0  0100               	movlb	0	; () banked
  6399  0029C2  5D80               	subwf	___awmod@dividend& (0+255),w,b
  6400  0029C4  0100               	movlb	0	; () banked
  6401  0029C6  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6402  0029C8  0100               	movlb	0	; () banked
  6403  0029CA  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6404  0029CC  A0D8               	btfss	status,0,c
  6405  0029CE  D008               	goto	l4812
  6406                           
  6407                           ; BSR set to: 0
  6408  0029D0  0100               	movlb	0	; () banked
  6409  0029D2  5182               	movf	___awmod@divisor& (0+255),w,b
  6410  0029D4  0100               	movlb	0	; () banked
  6411  0029D6  5F80               	subwf	___awmod@dividend& (0+255),f,b
  6412  0029D8  0100               	movlb	0	; () banked
  6413  0029DA  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  6414  0029DC  0100               	movlb	0	; () banked
  6415  0029DE  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6416  0029E0                     l4812:
  6417                           
  6418                           ; BSR set to: 0
  6419  0029E0  0100               	movlb	0	; () banked
  6420  0029E2  90D8               	bcf	status,0,c
  6421  0029E4  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6422  0029E6  3382               	rrcf	___awmod@divisor& (0+255),f,b
  6423                           
  6424                           ; BSR set to: 0
  6425  0029E8  0100               	movlb	0	; () banked
  6426  0029EA  2F84               	decfsz	___awmod@counter& (0+255),f,b
  6427  0029EC  D7E7               	goto	l4808
  6428  0029EE                     l4816:
  6429                           
  6430                           ; BSR set to: 0
  6431  0029EE  0100               	movlb	0	; () banked
  6432  0029F0  5185               	movf	___awmod@sign& (0+255),w,b
  6433  0029F2  0100               	movlb	0	; () banked
  6434  0029F4  B4D8               	btfsc	status,2,c
  6435  0029F6  D005               	goto	l4820
  6436                           
  6437                           ; BSR set to: 0
  6438  0029F8  0100               	movlb	0	; () banked
  6439  0029FA  6D80               	negf	___awmod@dividend& (0+255),b
  6440  0029FC  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  6441  0029FE  B0D8               	btfsc	status,0,c
  6442  002A00  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  6443  002A02                     l4820:
  6444                           
  6445                           ; BSR set to: 0
  6446  002A02  C080  F080         	movff	___awmod@dividend,?___awmod
  6447  002A06  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  6448  002A0A  0012               	return	
  6449  002A0C                     __end_of___awmod:
  6450                           	opt stack 0
  6451                           tosu	equ	0xFFF
  6452                           tosh	equ	0xFFE
  6453                           tosl	equ	0xFFD
  6454                           pclath	equ	0xFFA
  6455                           tblptru	equ	0xFF8
  6456                           tblptrh	equ	0xFF7
  6457                           tblptrl	equ	0xFF6
  6458                           tablat	equ	0xFF5
  6459                           prodh	equ	0xFF4
  6460                           prodl	equ	0xFF3
  6461                           intcon	equ	0xFF2
  6462                           intcon2	equ	0xFF1
  6463                           intcon3	equ	0xFF0
  6464                           indf0	equ	0xFEF
  6465                           postinc0	equ	0xFEE
  6466                           fsr0h	equ	0xFEA
  6467                           fsr0l	equ	0xFE9
  6468                           wreg	equ	0xFE8
  6469                           indf1	equ	0xFE7
  6470                           postinc1	equ	0xFE6
  6471                           postdec1	equ	0xFE5
  6472                           fsr1h	equ	0xFE2
  6473                           fsr1l	equ	0xFE1
  6474                           indf2	equ	0xFDF
  6475                           postinc2	equ	0xFDE
  6476                           postdec2	equ	0xFDD
  6477                           fsr2h	equ	0xFDA
  6478                           fsr2l	equ	0xFD9
  6479                           status	equ	0xFD8
  6480                           
  6481 ;; *************** function ___awdiv *****************
  6482 ;; Defined at:
  6483 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6484 ;; Parameters:    Size  Location     Type
  6485 ;;  dividend        2    0[BANK0 ] int 
  6486 ;;  divisor         2    2[BANK0 ] int 
  6487 ;; Auto vars:     Size  Location     Type
  6488 ;;  quotient        2    6[BANK0 ] int 
  6489 ;;  sign            1    5[BANK0 ] unsigned char 
  6490 ;;  counter         1    4[BANK0 ] unsigned char 
  6491 ;; Return value:  Size  Location     Type
  6492 ;;                  2    0[BANK0 ] int 
  6493 ;; Registers used:
  6494 ;;		wreg, status,2, status,0
  6495 ;; Tracked objects:
  6496 ;;		On entry : 0/0
  6497 ;;		On exit  : 0/0
  6498 ;;		Unchanged: 0/0
  6499 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6500 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6501 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6502 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6503 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6504 ;;Total ram usage:        8 bytes
  6505 ;; Hardware stack levels used:    1
  6506 ;; Hardware stack levels required when called:    5
  6507 ;; This function calls:
  6508 ;;		Nothing
  6509 ;; This function is called by:
  6510 ;;		_update_display
  6511 ;;		_update_state
  6512 ;; This function uses a non-reentrant model
  6513 ;;
  6514                           
  6515                           	psect	text15
  6516  0027F0                     __ptext15:
  6517                           	opt stack 0
  6518  0027F0                     ___awdiv:
  6519                           	opt stack 24
  6520                           
  6521                           ; BSR set to: 0
  6522                           ;incstack = 0
  6523  0027F0  0E00               	movlw	0
  6524  0027F2  0100               	movlb	0	; () banked
  6525  0027F4  6F85               	movwf	___awdiv@sign& (0+255),b
  6526                           
  6527                           ; BSR set to: 0
  6528  0027F6  0100               	movlb	0	; () banked
  6529  0027F8  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6530  0027FA  D008               	goto	l4752
  6531                           
  6532                           ; BSR set to: 0
  6533  0027FC  0100               	movlb	0	; () banked
  6534  0027FE  6D82               	negf	___awdiv@divisor& (0+255),b
  6535  002800  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6536  002802  B0D8               	btfsc	status,0,c
  6537  002804  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6538                           
  6539                           ; BSR set to: 0
  6540  002806  0E01               	movlw	1
  6541  002808  0100               	movlb	0	; () banked
  6542  00280A  6F85               	movwf	___awdiv@sign& (0+255),b
  6543  00280C                     l4752:
  6544                           
  6545                           ; BSR set to: 0
  6546  00280C  0100               	movlb	0	; () banked
  6547  00280E  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6548  002810  D008               	goto	l4758
  6549                           
  6550                           ; BSR set to: 0
  6551  002812  0100               	movlb	0	; () banked
  6552  002814  6D80               	negf	___awdiv@dividend& (0+255),b
  6553  002816  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6554  002818  B0D8               	btfsc	status,0,c
  6555  00281A  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6556                           
  6557                           ; BSR set to: 0
  6558  00281C  0E01               	movlw	1
  6559  00281E  0100               	movlb	0	; () banked
  6560  002820  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  6561  002822                     l4758:
  6562                           
  6563                           ; BSR set to: 0
  6564  002822  0E00               	movlw	0
  6565  002824  0100               	movlb	0	; () banked
  6566  002826  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  6567  002828  0E00               	movlw	0
  6568  00282A  6F86               	movwf	___awdiv@quotient& (0+255),b
  6569                           
  6570                           ; BSR set to: 0
  6571  00282C  0100               	movlb	0	; () banked
  6572  00282E  5182               	movf	___awdiv@divisor& (0+255),w,b
  6573  002830  0100               	movlb	0	; () banked
  6574  002832  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6575  002834  B4D8               	btfsc	status,2,c
  6576  002836  D02C               	goto	l4780
  6577                           
  6578                           ; BSR set to: 0
  6579  002838  0E01               	movlw	1
  6580  00283A  0100               	movlb	0	; () banked
  6581  00283C  6F84               	movwf	___awdiv@counter& (0+255),b
  6582  00283E  D006               	goto	l4766
  6583  002840                     l4764:
  6584                           
  6585                           ; BSR set to: 0
  6586  002840  0100               	movlb	0	; () banked
  6587  002842  90D8               	bcf	status,0,c
  6588  002844  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  6589  002846  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6590  002848  0100               	movlb	0	; () banked
  6591  00284A  2B84               	incf	___awdiv@counter& (0+255),f,b
  6592  00284C                     l4766:
  6593                           
  6594                           ; BSR set to: 0
  6595  00284C  0100               	movlb	0	; () banked
  6596  00284E  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6597  002850  D7F7               	goto	l4764
  6598  002852                     l4768:
  6599                           
  6600                           ; BSR set to: 0
  6601  002852  0100               	movlb	0	; () banked
  6602  002854  90D8               	bcf	status,0,c
  6603  002856  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  6604  002858  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6605                           
  6606                           ; BSR set to: 0
  6607  00285A  0100               	movlb	0	; () banked
  6608  00285C  5182               	movf	___awdiv@divisor& (0+255),w,b
  6609  00285E  0100               	movlb	0	; () banked
  6610  002860  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  6611  002862  0100               	movlb	0	; () banked
  6612  002864  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6613  002866  0100               	movlb	0	; () banked
  6614  002868  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6615  00286A  A0D8               	btfss	status,0,c
  6616  00286C  D00A               	goto	l4776
  6617                           
  6618                           ; BSR set to: 0
  6619  00286E  0100               	movlb	0	; () banked
  6620  002870  5182               	movf	___awdiv@divisor& (0+255),w,b
  6621  002872  0100               	movlb	0	; () banked
  6622  002874  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  6623  002876  0100               	movlb	0	; () banked
  6624  002878  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6625  00287A  0100               	movlb	0	; () banked
  6626  00287C  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6627                           
  6628                           ; BSR set to: 0
  6629  00287E  0100               	movlb	0	; () banked
  6630  002880  8186               	bsf	___awdiv@quotient& (0+255),0,b
  6631  002882                     l4776:
  6632                           
  6633                           ; BSR set to: 0
  6634  002882  0100               	movlb	0	; () banked
  6635  002884  90D8               	bcf	status,0,c
  6636  002886  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6637  002888  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  6638                           
  6639                           ; BSR set to: 0
  6640  00288A  0100               	movlb	0	; () banked
  6641  00288C  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  6642  00288E  D7E1               	goto	l4768
  6643  002890                     l4780:
  6644                           
  6645                           ; BSR set to: 0
  6646  002890  0100               	movlb	0	; () banked
  6647  002892  5185               	movf	___awdiv@sign& (0+255),w,b
  6648  002894  0100               	movlb	0	; () banked
  6649  002896  B4D8               	btfsc	status,2,c
  6650  002898  D005               	goto	l4784
  6651                           
  6652                           ; BSR set to: 0
  6653  00289A  0100               	movlb	0	; () banked
  6654  00289C  6D86               	negf	___awdiv@quotient& (0+255),b
  6655  00289E  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6656  0028A0  B0D8               	btfsc	status,0,c
  6657  0028A2  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6658  0028A4                     l4784:
  6659                           
  6660                           ; BSR set to: 0
  6661  0028A4  C086  F080         	movff	___awdiv@quotient,?___awdiv
  6662  0028A8  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  6663  0028AC  0012               	return	
  6664  0028AE                     __end_of___awdiv:
  6665                           	opt stack 0
  6666                           tosu	equ	0xFFF
  6667                           tosh	equ	0xFFE
  6668                           tosl	equ	0xFFD
  6669                           pclath	equ	0xFFA
  6670                           tblptru	equ	0xFF8
  6671                           tblptrh	equ	0xFF7
  6672                           tblptrl	equ	0xFF6
  6673                           tablat	equ	0xFF5
  6674                           prodh	equ	0xFF4
  6675                           prodl	equ	0xFF3
  6676                           intcon	equ	0xFF2
  6677                           intcon2	equ	0xFF1
  6678                           intcon3	equ	0xFF0
  6679                           indf0	equ	0xFEF
  6680                           postinc0	equ	0xFEE
  6681                           fsr0h	equ	0xFEA
  6682                           fsr0l	equ	0xFE9
  6683                           wreg	equ	0xFE8
  6684                           indf1	equ	0xFE7
  6685                           postinc1	equ	0xFE6
  6686                           postdec1	equ	0xFE5
  6687                           fsr1h	equ	0xFE2
  6688                           fsr1l	equ	0xFE1
  6689                           indf2	equ	0xFDF
  6690                           postinc2	equ	0xFDE
  6691                           postdec2	equ	0xFDD
  6692                           fsr2h	equ	0xFDA
  6693                           fsr2l	equ	0xFD9
  6694                           status	equ	0xFD8
  6695                           
  6696 ;; *************** function _update_RTC *****************
  6697 ;; Defined at:
  6698 ;;		line 165 in file "main.c"
  6699 ;; Parameters:    Size  Location     Type
  6700 ;;		None
  6701 ;; Auto vars:     Size  Location     Type
  6702 ;;  i               1   10[BANK0 ] unsigned char 
  6703 ;; Return value:  Size  Location     Type
  6704 ;;                  1    wreg      void 
  6705 ;; Registers used:
  6706 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6707 ;; Tracked objects:
  6708 ;;		On entry : 0/0
  6709 ;;		On exit  : 0/0
  6710 ;;		Unchanged: 0/0
  6711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6712 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;Total ram usage:        5 bytes
  6717 ;; Hardware stack levels used:    1
  6718 ;; Hardware stack levels required when called:    7
  6719 ;; This function calls:
  6720 ;;		_I2C_Master_Read
  6721 ;;		_I2C_Master_Start
  6722 ;;		_I2C_Master_Stop
  6723 ;;		_I2C_Master_Write
  6724 ;;		___wmul
  6725 ;; This function is called by:
  6726 ;;		_main
  6727 ;; This function uses a non-reentrant model
  6728 ;;
  6729                           
  6730                           	psect	text16
  6731  002586                     __ptext16:
  6732                           	opt stack 0
  6733  002586                     _update_RTC:
  6734                           	opt stack 23
  6735                           
  6736                           ;main.c: 168: I2C_Master_Start();
  6737                           
  6738                           ; BSR set to: 0
  6739                           ;incstack = 0
  6740  002586  ECC9  F018         	call	_I2C_Master_Start	;wreg free
  6741                           
  6742                           ;main.c: 169: I2C_Master_Write(0b11010000);
  6743  00258A  0E00               	movlw	0
  6744  00258C  0100               	movlb	0	; () banked
  6745  00258E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6746  002590  0ED0               	movlw	208
  6747  002592  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6748  002594  ECC0  F018         	call	_I2C_Master_Write	;wreg free
  6749                           
  6750                           ;main.c: 170: I2C_Master_Write(0x00);
  6751  002598  0E00               	movlw	0
  6752  00259A  0100               	movlb	0	; () banked
  6753  00259C  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6754  00259E  0E00               	movlw	0
  6755  0025A0  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6756  0025A2  ECC0  F018         	call	_I2C_Master_Write	;wreg free
  6757                           
  6758                           ;main.c: 171: I2C_Master_Stop();
  6759  0025A6  ECC5  F018         	call	_I2C_Master_Stop	;wreg free
  6760                           
  6761                           ;main.c: 174: I2C_Master_Start();
  6762  0025AA  ECC9  F018         	call	_I2C_Master_Start	;wreg free
  6763                           
  6764                           ;main.c: 175: I2C_Master_Write(0b11010001);
  6765  0025AE  0E00               	movlw	0
  6766  0025B0  0100               	movlb	0	; () banked
  6767  0025B2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  6768  0025B4  0ED1               	movlw	209
  6769  0025B6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  6770  0025B8  ECC0  F018         	call	_I2C_Master_Write	;wreg free
  6771                           
  6772                           ;main.c: 176: for(unsigned char i=0;i<0x06;i++){
  6773  0025BC  0E00               	movlw	0
  6774  0025BE  0100               	movlb	0	; () banked
  6775  0025C0  6F8A               	movwf	update_RTC@i& (0+255),b
  6776  0025C2                     l5102:
  6777                           
  6778                           ; BSR set to: 0
  6779  0025C2  0E05               	movlw	5
  6780  0025C4  0100               	movlb	0	; () banked
  6781  0025C6  658A               	cpfsgt	update_RTC@i& (0+255),b
  6782  0025C8  D001               	goto	l5106
  6783  0025CA  D047               	goto	l5114
  6784  0025CC                     l5106:
  6785                           
  6786                           ; BSR set to: 0
  6787                           ;main.c: 177: time[i] = I2C_Master_Read(1);
  6788  0025CC  0100               	movlb	0	; () banked
  6789  0025CE  518A               	movf	update_RTC@i& (0+255),w,b
  6790  0025D0  0D01               	mullw	1
  6791  0025D2  0ECE               	movlw	low _time
  6792  0025D4  24F3               	addwf	prodl,w,c
  6793  0025D6  6ED9               	movwf	fsr2l,c
  6794  0025D8  0E00               	movlw	high _time
  6795  0025DA  20F4               	addwfc	prodh,w,c
  6796  0025DC  6EDA               	movwf	fsr2h,c
  6797  0025DE  0E01               	movlw	1
  6798  0025E0  EC21  F018         	call	_I2C_Master_Read
  6799  0025E4  6EDF               	movwf	indf2,c
  6800                           
  6801                           ;main.c: 178: time_i[i]=(time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  6802  0025E6  0100               	movlb	0	; () banked
  6803  0025E8  518A               	movf	update_RTC@i& (0+255),w,b
  6804  0025EA  0D01               	mullw	1
  6805  0025EC  0ECE               	movlw	low _time
  6806  0025EE  24F3               	addwf	prodl,w,c
  6807  0025F0  6ED9               	movwf	fsr2l,c
  6808  0025F2  0E00               	movlw	high _time
  6809  0025F4  20F4               	addwfc	prodh,w,c
  6810  0025F6  6EDA               	movwf	fsr2h,c
  6811  0025F8  50DF               	movf	indf2,w,c
  6812  0025FA  0B0F               	andlw	15
  6813  0025FC  0100               	movlb	0	; () banked
  6814  0025FE  6F86               	movwf	??_update_RTC& (0+255),b
  6815  002600  6B87               	clrf	(??_update_RTC+1)& (0+255),b
  6816  002602  0100               	movlb	0	; () banked
  6817  002604  518A               	movf	update_RTC@i& (0+255),w,b
  6818  002606  0D01               	mullw	1
  6819  002608  0ECE               	movlw	low _time
  6820  00260A  24F3               	addwf	prodl,w,c
  6821  00260C  6ED9               	movwf	fsr2l,c
  6822  00260E  0E00               	movlw	high _time
  6823  002610  20F4               	addwfc	prodh,w,c
  6824  002612  6EDA               	movwf	fsr2h,c
  6825  002614  50DF               	movf	indf2,w,c
  6826  002616  0100               	movlb	0	; () banked
  6827  002618  6F88               	movwf	(??_update_RTC+2)& (0+255),b
  6828  00261A  0100               	movlb	0	; () banked
  6829  00261C  3B88               	swapf	(??_update_RTC+2)& (0+255),f,b
  6830  00261E  0E0F               	movlw	15
  6831  002620  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  6832  002622  0E0F               	movlw	15
  6833  002624  0100               	movlb	0	; () banked
  6834  002626  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  6835  002628  0100               	movlb	0	; () banked
  6836  00262A  5188               	movf	(??_update_RTC+2)& (0+255),w,b
  6837  00262C  0D0A               	mullw	10
  6838  00262E  50F3               	movf	prodl,w,c
  6839  002630  0100               	movlb	0	; () banked
  6840  002632  2786               	addwf	??_update_RTC& (0+255),f,b
  6841  002634  50F4               	movf	prodh,w,c
  6842  002636  0100               	movlb	0	; () banked
  6843  002638  2387               	addwfc	(??_update_RTC+1)& (0+255),f,b
  6844  00263A  0100               	movlb	0	; () banked
  6845  00263C  518A               	movf	update_RTC@i& (0+255),w,b
  6846  00263E  0D02               	mullw	2
  6847  002640  0E3E               	movlw	low _time_i
  6848  002642  24F3               	addwf	prodl,w,c
  6849  002644  6ED9               	movwf	fsr2l,c
  6850  002646  0E00               	movlw	high _time_i
  6851  002648  20F4               	addwfc	prodh,w,c
  6852  00264A  6EDA               	movwf	fsr2h,c
  6853  00264C  C086  FFDE         	movff	??_update_RTC,postinc2
  6854  002650  C087  FFDD         	movff	??_update_RTC+1,postdec2
  6855                           
  6856                           ; BSR set to: 0
  6857  002654  0100               	movlb	0	; () banked
  6858  002656  2B8A               	incf	update_RTC@i& (0+255),f,b
  6859  002658  D7B4               	goto	l5102
  6860  00265A                     l5114:
  6861                           
  6862                           ; BSR set to: 0
  6863                           ;main.c: 179: }
  6864                           ;main.c: 180: timeDiff=time_i[1]*60-startTime[1]*60+time_i[0]-startTime[0];
  6865  00265A  C10E  F086         	movff	_startTime,??_update_RTC
  6866  00265E  C10F  F087         	movff	_startTime+1,??_update_RTC+1
  6867  002662  0100               	movlb	0	; () banked
  6868  002664  1F86               	comf	??_update_RTC& (0+255),f,b
  6869  002666  1F87               	comf	(??_update_RTC+1)& (0+255),f,b
  6870  002668  4B86               	infsnz	??_update_RTC& (0+255),f,b
  6871  00266A  2B87               	incf	(??_update_RTC+1)& (0+255),f,b
  6872  00266C  C040  F080         	movff	_time_i+2,___wmul@multiplier
  6873  002670  C041  F081         	movff	_time_i+3,___wmul@multiplier+1
  6874  002674  0E00               	movlw	0
  6875  002676  0100               	movlb	0	; () banked
  6876  002678  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6877  00267A  0E3C               	movlw	60
  6878  00267C  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6879  00267E  ECD2  F017         	call	___wmul	;wreg free
  6880  002682  C080  F088         	movff	?___wmul,??_update_RTC+2
  6881  002686  C081  F089         	movff	?___wmul+1,??_update_RTC+3
  6882  00268A  C110  F080         	movff	_startTime+2,___wmul@multiplier
  6883  00268E  C111  F081         	movff	_startTime+3,___wmul@multiplier+1
  6884  002692  0E00               	movlw	0
  6885  002694  0100               	movlb	0	; () banked
  6886  002696  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  6887  002698  0E3C               	movlw	60
  6888  00269A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  6889  00269C  ECD2  F017         	call	___wmul	;wreg free
  6890  0026A0  0100               	movlb	0	; () banked
  6891  0026A2  1F80               	comf	?___wmul& (0+255),f,b
  6892  0026A4  0100               	movlb	0	; () banked
  6893  0026A6  1F81               	comf	(?___wmul+1)& (0+255),f,b
  6894  0026A8  0100               	movlb	0	; () banked
  6895  0026AA  4B80               	infsnz	?___wmul& (0+255),f,b
  6896  0026AC  2B81               	incf	(?___wmul+1)& (0+255),f,b
  6897  0026AE  0100               	movlb	0	; () banked
  6898  0026B0  5180               	movf	?___wmul& (0+255),w,b
  6899  0026B2  0100               	movlb	0	; () banked
  6900  0026B4  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  6901  0026B6  0100               	movlb	0	; () banked
  6902  0026B8  5181               	movf	(?___wmul+1)& (0+255),w,b
  6903  0026BA  0100               	movlb	0	; () banked
  6904  0026BC  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  6905  0026BE  0100               	movlb	0	; () banked
  6906  0026C0  5186               	movf	??_update_RTC& (0+255),w,b
  6907  0026C2  0100               	movlb	0	; () banked
  6908  0026C4  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  6909  0026C6  0100               	movlb	0	; () banked
  6910  0026C8  5187               	movf	(??_update_RTC+1)& (0+255),w,b
  6911  0026CA  0100               	movlb	0	; () banked
  6912  0026CC  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  6913  0026CE  503E               	movf	_time_i,w,c
  6914  0026D0  0100               	movlb	0	; () banked
  6915  0026D2  2588               	addwf	(??_update_RTC+2)& (0+255),w,b
  6916  0026D4  0100               	movlb	0	; () banked
  6917  0026D6  6FDD               	movwf	_timeDiff& (0+255),b
  6918  0026D8  503F               	movf	_time_i+1,w,c
  6919  0026DA  0100               	movlb	0	; () banked
  6920  0026DC  2189               	addwfc	(??_update_RTC+3)& (0+255),w,b
  6921  0026DE  0100               	movlb	0	; () banked
  6922  0026E0  6FDE               	movwf	(_timeDiff+1)& (0+255),b
  6923                           
  6924                           ; BSR set to: 0
  6925                           ;main.c: 181: time[6] = I2C_Master_Read(0);
  6926  0026E2  0E00               	movlw	0
  6927  0026E4  EC21  F018         	call	_I2C_Master_Read
  6928  0026E8  0100               	movlb	0	; () banked
  6929  0026EA  6FD4               	movwf	(_time+6)& (0+255),b
  6930                           
  6931                           ; BSR set to: 0
  6932                           ;main.c: 182: I2C_Master_Stop();
  6933  0026EC  ECC5  F018         	call	_I2C_Master_Stop	;wreg free
  6934  0026F0  0012               	return		;funcret
  6935  0026F2                     __end_of_update_RTC:
  6936                           	opt stack 0
  6937                           tosu	equ	0xFFF
  6938                           tosh	equ	0xFFE
  6939                           tosl	equ	0xFFD
  6940                           pclath	equ	0xFFA
  6941                           tblptru	equ	0xFF8
  6942                           tblptrh	equ	0xFF7
  6943                           tblptrl	equ	0xFF6
  6944                           tablat	equ	0xFF5
  6945                           prodh	equ	0xFF4
  6946                           prodl	equ	0xFF3
  6947                           intcon	equ	0xFF2
  6948                           intcon2	equ	0xFF1
  6949                           intcon3	equ	0xFF0
  6950                           indf0	equ	0xFEF
  6951                           postinc0	equ	0xFEE
  6952                           fsr0h	equ	0xFEA
  6953                           fsr0l	equ	0xFE9
  6954                           wreg	equ	0xFE8
  6955                           indf1	equ	0xFE7
  6956                           postinc1	equ	0xFE6
  6957                           postdec1	equ	0xFE5
  6958                           fsr1h	equ	0xFE2
  6959                           fsr1l	equ	0xFE1
  6960                           indf2	equ	0xFDF
  6961                           postinc2	equ	0xFDE
  6962                           postdec2	equ	0xFDD
  6963                           fsr2h	equ	0xFDA
  6964                           fsr2l	equ	0xFD9
  6965                           status	equ	0xFD8
  6966                           
  6967 ;; *************** function ___wmul *****************
  6968 ;; Defined at:
  6969 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  6970 ;; Parameters:    Size  Location     Type
  6971 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6972 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6973 ;; Auto vars:     Size  Location     Type
  6974 ;;  product         2    4[BANK0 ] unsigned int 
  6975 ;; Return value:  Size  Location     Type
  6976 ;;                  2    0[BANK0 ] unsigned int 
  6977 ;; Registers used:
  6978 ;;		wreg, status,2, status,0, prodl, prodh
  6979 ;; Tracked objects:
  6980 ;;		On entry : 0/0
  6981 ;;		On exit  : 0/0
  6982 ;;		Unchanged: 0/0
  6983 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6984 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6986 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6987 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6988 ;;Total ram usage:        6 bytes
  6989 ;; Hardware stack levels used:    1
  6990 ;; Hardware stack levels required when called:    5
  6991 ;; This function calls:
  6992 ;;		Nothing
  6993 ;; This function is called by:
  6994 ;;		_update_RTC
  6995 ;;		_display_menu
  6996 ;;		__doprnt
  6997 ;;		_sort
  6998 ;; This function uses a non-reentrant model
  6999 ;;
  7000                           
  7001                           	psect	text17
  7002  002FA4                     __ptext17:
  7003                           	opt stack 0
  7004  002FA4                     ___wmul:
  7005                           	opt stack 22
  7006                           
  7007                           ;incstack = 0
  7008  002FA4  0100               	movlb	0	; () banked
  7009  002FA6  5180               	movf	___wmul@multiplier& (0+255),w,b
  7010  002FA8  0100               	movlb	0	; () banked
  7011  002FAA  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7012  002FAC  CFF3 F084          	movff	prodl,___wmul@product
  7013  002FB0  CFF4 F085          	movff	prodh,___wmul@product+1
  7014  002FB4  0100               	movlb	0	; () banked
  7015  002FB6  5180               	movf	___wmul@multiplier& (0+255),w,b
  7016  002FB8  0100               	movlb	0	; () banked
  7017  002FBA  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  7018  002FBC  50F3               	movf	prodl,w,c
  7019  002FBE  0100               	movlb	0	; () banked
  7020  002FC0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7021  002FC2  0100               	movlb	0	; () banked
  7022  002FC4  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  7023  002FC6  0100               	movlb	0	; () banked
  7024  002FC8  0382               	mulwf	___wmul@multiplicand& (0+255),b
  7025  002FCA  50F3               	movf	prodl,w,c
  7026  002FCC  0100               	movlb	0	; () banked
  7027  002FCE  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  7028                           
  7029                           ; BSR set to: 0
  7030  002FD0  C084  F080         	movff	___wmul@product,?___wmul
  7031  002FD4  C085  F081         	movff	___wmul@product+1,?___wmul+1
  7032  002FD8  0012               	return	
  7033  002FDA                     __end_of___wmul:
  7034                           	opt stack 0
  7035                           tosu	equ	0xFFF
  7036                           tosh	equ	0xFFE
  7037                           tosl	equ	0xFFD
  7038                           pclath	equ	0xFFA
  7039                           tblptru	equ	0xFF8
  7040                           tblptrh	equ	0xFF7
  7041                           tblptrl	equ	0xFF6
  7042                           tablat	equ	0xFF5
  7043                           prodh	equ	0xFF4
  7044                           prodl	equ	0xFF3
  7045                           intcon	equ	0xFF2
  7046                           intcon2	equ	0xFF1
  7047                           intcon3	equ	0xFF0
  7048                           indf0	equ	0xFEF
  7049                           postinc0	equ	0xFEE
  7050                           fsr0h	equ	0xFEA
  7051                           fsr0l	equ	0xFE9
  7052                           wreg	equ	0xFE8
  7053                           indf1	equ	0xFE7
  7054                           postinc1	equ	0xFE6
  7055                           postdec1	equ	0xFE5
  7056                           fsr1h	equ	0xFE2
  7057                           fsr1l	equ	0xFE1
  7058                           indf2	equ	0xFDF
  7059                           postinc2	equ	0xFDE
  7060                           postdec2	equ	0xFDD
  7061                           fsr2h	equ	0xFDA
  7062                           fsr2l	equ	0xFD9
  7063                           status	equ	0xFD8
  7064                           
  7065 ;; *************** function _I2C_Master_Read *****************
  7066 ;; Defined at:
  7067 ;;		line 53 in file "I2C.c"
  7068 ;; Parameters:    Size  Location     Type
  7069 ;;  a               1    wreg     unsigned char 
  7070 ;; Auto vars:     Size  Location     Type
  7071 ;;  a               1    1[BANK0 ] unsigned char 
  7072 ;;  temp            1    2[BANK0 ] unsigned char 
  7073 ;; Return value:  Size  Location     Type
  7074 ;;                  1    wreg      unsigned char 
  7075 ;; Registers used:
  7076 ;;		wreg, status,2, status,0, cstack
  7077 ;; Tracked objects:
  7078 ;;		On entry : 0/0
  7079 ;;		On exit  : 0/0
  7080 ;;		Unchanged: 0/0
  7081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7082 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7083 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7084 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7085 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7086 ;;Total ram usage:        2 bytes
  7087 ;; Hardware stack levels used:    1
  7088 ;; Hardware stack levels required when called:    6
  7089 ;; This function calls:
  7090 ;;		_I2C_Master_Wait
  7091 ;; This function is called by:
  7092 ;;		_update_RTC
  7093 ;; This function uses a non-reentrant model
  7094 ;;
  7095                           
  7096                           	psect	text18
  7097  003042                     __ptext18:
  7098                           	opt stack 0
  7099  003042                     _I2C_Master_Read:
  7100                           	opt stack 23
  7101                           
  7102                           ; BSR set to: 0
  7103                           ;incstack = 0
  7104                           ;I2C_Master_Read@a stored from wreg
  7105  003042  0100               	movlb	0	; () banked
  7106  003044  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7107                           
  7108                           ;I2C.c: 55: unsigned char temp;
  7109                           ;I2C.c: 56: I2C_Master_Wait();
  7110  003046  EC9B  F018         	call	_I2C_Master_Wait	;wreg free
  7111                           
  7112                           ;I2C.c: 57: RCEN = 1;
  7113  00304A  86C5               	bsf	4037,3,c	;volatile
  7114                           
  7115                           ;I2C.c: 58: I2C_Master_Wait();
  7116  00304C  EC9B  F018         	call	_I2C_Master_Wait	;wreg free
  7117                           
  7118                           ;I2C.c: 59: temp = SSPBUF;
  7119  003050  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7120                           
  7121                           ;I2C.c: 60: I2C_Master_Wait();
  7122  003054  EC9B  F018         	call	_I2C_Master_Wait	;wreg free
  7123                           
  7124                           ;I2C.c: 61: ACKDT = (a)?0:1;
  7125  003058  0100               	movlb	0	; () banked
  7126  00305A  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7127  00305C  0100               	movlb	0	; () banked
  7128  00305E  A4D8               	btfss	status,2,c
  7129  003060  D002               	goto	u6170
  7130  003062  8AC5               	bsf	4037,5,c	;volatile
  7131  003064  D001               	goto	l4650
  7132  003066                     u6170:
  7133  003066  9AC5               	bcf	4037,5,c	;volatile
  7134  003068                     l4650:
  7135                           
  7136                           ;I2C.c: 62: ACKEN = 1;
  7137  003068  88C5               	bsf	4037,4,c	;volatile
  7138                           
  7139                           ;I2C.c: 63: return temp;
  7140  00306A  0100               	movlb	0	; () banked
  7141  00306C  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7142  00306E  0012               	return	
  7143  003070                     __end_of_I2C_Master_Read:
  7144                           	opt stack 0
  7145                           tosu	equ	0xFFF
  7146                           tosh	equ	0xFFE
  7147                           tosl	equ	0xFFD
  7148                           pclath	equ	0xFFA
  7149                           tblptru	equ	0xFF8
  7150                           tblptrh	equ	0xFF7
  7151                           tblptrl	equ	0xFF6
  7152                           tablat	equ	0xFF5
  7153                           prodh	equ	0xFF4
  7154                           prodl	equ	0xFF3
  7155                           intcon	equ	0xFF2
  7156                           intcon2	equ	0xFF1
  7157                           intcon3	equ	0xFF0
  7158                           indf0	equ	0xFEF
  7159                           postinc0	equ	0xFEE
  7160                           fsr0h	equ	0xFEA
  7161                           fsr0l	equ	0xFE9
  7162                           wreg	equ	0xFE8
  7163                           indf1	equ	0xFE7
  7164                           postinc1	equ	0xFE6
  7165                           postdec1	equ	0xFE5
  7166                           fsr1h	equ	0xFE2
  7167                           fsr1l	equ	0xFE1
  7168                           indf2	equ	0xFDF
  7169                           postinc2	equ	0xFDE
  7170                           postdec2	equ	0xFDD
  7171                           fsr2h	equ	0xFDA
  7172                           fsr2l	equ	0xFD9
  7173                           status	equ	0xFD8
  7174                           
  7175 ;; *************** function _set_time *****************
  7176 ;; Defined at:
  7177 ;;		line 401 in file "main.c"
  7178 ;; Parameters:    Size  Location     Type
  7179 ;;		None
  7180 ;; Auto vars:     Size  Location     Type
  7181 ;;  i               1    3[BANK0 ] unsigned char 
  7182 ;; Return value:  Size  Location     Type
  7183 ;;                  1    wreg      void 
  7184 ;; Registers used:
  7185 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7186 ;; Tracked objects:
  7187 ;;		On entry : 0/0
  7188 ;;		On exit  : 0/0
  7189 ;;		Unchanged: 0/0
  7190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7192 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7194 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7195 ;;Total ram usage:        1 bytes
  7196 ;; Hardware stack levels used:    1
  7197 ;; Hardware stack levels required when called:    7
  7198 ;; This function calls:
  7199 ;;		_I2C_Master_Start
  7200 ;;		_I2C_Master_Stop
  7201 ;;		_I2C_Master_Write
  7202 ;; This function is called by:
  7203 ;;		_main
  7204 ;; This function uses a non-reentrant model
  7205 ;;
  7206                           
  7207                           	psect	text19
  7208  002CBC                     __ptext19:
  7209                           	opt stack 0
  7210  002CBC                     _set_time:
  7211                           	opt stack 23
  7212                           
  7213                           ;main.c: 402: I2C_Master_Start();
  7214                           
  7215                           ; BSR set to: 0
  7216                           ;incstack = 0
  7217  002CBC  ECC9  F018         	call	_I2C_Master_Start	;wreg free
  7218                           
  7219                           ;main.c: 403: I2C_Master_Write(0b11010000);
  7220  002CC0  0E00               	movlw	0
  7221  002CC2  0100               	movlb	0	; () banked
  7222  002CC4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7223  002CC6  0ED0               	movlw	208
  7224  002CC8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7225  002CCA  ECC0  F018         	call	_I2C_Master_Write	;wreg free
  7226                           
  7227                           ;main.c: 404: I2C_Master_Write(0x00);
  7228  002CCE  0E00               	movlw	0
  7229  002CD0  0100               	movlb	0	; () banked
  7230  002CD2  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7231  002CD4  0E00               	movlw	0
  7232  002CD6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7233  002CD8  ECC0  F018         	call	_I2C_Master_Write	;wreg free
  7234                           
  7235                           ;main.c: 405: for(char i=0; i<7; i++){
  7236  002CDC  0E00               	movlw	0
  7237  002CDE  0100               	movlb	0	; () banked
  7238  002CE0  6F83               	movwf	set_time@i& (0+255),b
  7239  002CE2                     l5086:
  7240                           
  7241                           ; BSR set to: 0
  7242  002CE2  0E06               	movlw	6
  7243  002CE4  0100               	movlb	0	; () banked
  7244  002CE6  6583               	cpfsgt	set_time@i& (0+255),b
  7245  002CE8  D001               	goto	l5090
  7246  002CEA  D016               	goto	l5096
  7247  002CEC                     l5090:
  7248                           
  7249                           ; BSR set to: 0
  7250                           ;main.c: 406: I2C_Master_Write(manualDateTime[i]);
  7251  002CEC  0100               	movlb	0	; () banked
  7252  002CEE  5183               	movf	set_time@i& (0+255),w,b
  7253  002CF0  0D01               	mullw	1
  7254  002CF2  0EF8               	movlw	low _manualDateTime
  7255  002CF4  24F3               	addwf	prodl,w,c
  7256  002CF6  6EF6               	movwf	tblptrl,c
  7257  002CF8  0EFE               	movlw	high _manualDateTime
  7258  002CFA  20F4               	addwfc	prodh,w,c
  7259  002CFC  6EF7               	movwf	tblptrh,c
  7260  002CFE                     	if	1	;There are 3 active tblptr bytes
  7261  002CFE  6AF8               	clrf	tblptru,c
  7262  002D00  0E00               	movlw	low (__mediumconst shr (0+16))
  7263  002D02  22F8               	addwfc	tblptru,f,c
  7264  002D04                     	endif
  7265  002D04  0008               	tblrd		*
  7266  002D06  50F5               	movf	tablat,w,c
  7267  002D08  0100               	movlb	0	; () banked
  7268  002D0A  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7269  002D0C  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  7270  002D0E  ECC0  F018         	call	_I2C_Master_Write	;wreg free
  7271  002D12  0100               	movlb	0	; () banked
  7272  002D14  2B83               	incf	set_time@i& (0+255),f,b
  7273  002D16  D7E5               	goto	l5086
  7274  002D18                     l5096:
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;main.c: 407: }
  7278                           ;main.c: 408: I2C_Master_Stop();
  7279  002D18  ECC5  F018         	call	_I2C_Master_Stop	;wreg free
  7280  002D1C  0012               	return		;funcret
  7281  002D1E                     __end_of_set_time:
  7282                           	opt stack 0
  7283                           tosu	equ	0xFFF
  7284                           tosh	equ	0xFFE
  7285                           tosl	equ	0xFFD
  7286                           pclath	equ	0xFFA
  7287                           tblptru	equ	0xFF8
  7288                           tblptrh	equ	0xFF7
  7289                           tblptrl	equ	0xFF6
  7290                           tablat	equ	0xFF5
  7291                           prodh	equ	0xFF4
  7292                           prodl	equ	0xFF3
  7293                           intcon	equ	0xFF2
  7294                           intcon2	equ	0xFF1
  7295                           intcon3	equ	0xFF0
  7296                           indf0	equ	0xFEF
  7297                           postinc0	equ	0xFEE
  7298                           fsr0h	equ	0xFEA
  7299                           fsr0l	equ	0xFE9
  7300                           wreg	equ	0xFE8
  7301                           indf1	equ	0xFE7
  7302                           postinc1	equ	0xFE6
  7303                           postdec1	equ	0xFE5
  7304                           fsr1h	equ	0xFE2
  7305                           fsr1l	equ	0xFE1
  7306                           indf2	equ	0xFDF
  7307                           postinc2	equ	0xFDE
  7308                           postdec2	equ	0xFDD
  7309                           fsr2h	equ	0xFDA
  7310                           fsr2l	equ	0xFD9
  7311                           status	equ	0xFD8
  7312                           
  7313 ;; *************** function _I2C_Master_Write *****************
  7314 ;; Defined at:
  7315 ;;		line 47 in file "I2C.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;  d               2    1[BANK0 ] unsigned int 
  7318 ;; Auto vars:     Size  Location     Type
  7319 ;;		None
  7320 ;; Return value:  Size  Location     Type
  7321 ;;                  1    wreg      void 
  7322 ;; Registers used:
  7323 ;;		wreg, status,2, status,0, cstack
  7324 ;; Tracked objects:
  7325 ;;		On entry : 0/0
  7326 ;;		On exit  : 0/0
  7327 ;;		Unchanged: 0/0
  7328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7329 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7331 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7332 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7333 ;;Total ram usage:        2 bytes
  7334 ;; Hardware stack levels used:    1
  7335 ;; Hardware stack levels required when called:    6
  7336 ;; This function calls:
  7337 ;;		_I2C_Master_Wait
  7338 ;; This function is called by:
  7339 ;;		_update_RTC
  7340 ;;		_set_time
  7341 ;; This function uses a non-reentrant model
  7342 ;;
  7343                           
  7344                           	psect	text20
  7345  003180                     __ptext20:
  7346                           	opt stack 0
  7347  003180                     _I2C_Master_Write:
  7348                           	opt stack 23
  7349                           
  7350                           ;I2C.c: 49: I2C_Master_Wait();
  7351                           
  7352                           ;incstack = 0
  7353  003180  EC9B  F018         	call	_I2C_Master_Wait	;wreg free
  7354                           
  7355                           ;I2C.c: 50: SSPBUF = d;
  7356  003184  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7357  003188  0012               	return		;funcret
  7358  00318A                     __end_of_I2C_Master_Write:
  7359                           	opt stack 0
  7360                           tosu	equ	0xFFF
  7361                           tosh	equ	0xFFE
  7362                           tosl	equ	0xFFD
  7363                           pclath	equ	0xFFA
  7364                           tblptru	equ	0xFF8
  7365                           tblptrh	equ	0xFF7
  7366                           tblptrl	equ	0xFF6
  7367                           tablat	equ	0xFF5
  7368                           prodh	equ	0xFF4
  7369                           prodl	equ	0xFF3
  7370                           intcon	equ	0xFF2
  7371                           intcon2	equ	0xFF1
  7372                           intcon3	equ	0xFF0
  7373                           indf0	equ	0xFEF
  7374                           postinc0	equ	0xFEE
  7375                           fsr0h	equ	0xFEA
  7376                           fsr0l	equ	0xFE9
  7377                           wreg	equ	0xFE8
  7378                           indf1	equ	0xFE7
  7379                           postinc1	equ	0xFE6
  7380                           postdec1	equ	0xFE5
  7381                           fsr1h	equ	0xFE2
  7382                           fsr1l	equ	0xFE1
  7383                           indf2	equ	0xFDF
  7384                           postinc2	equ	0xFDE
  7385                           postdec2	equ	0xFDD
  7386                           fsr2h	equ	0xFDA
  7387                           fsr2l	equ	0xFD9
  7388                           status	equ	0xFD8
  7389                           
  7390 ;; *************** function _I2C_Master_Stop *****************
  7391 ;; Defined at:
  7392 ;;		line 41 in file "I2C.c"
  7393 ;; Parameters:    Size  Location     Type
  7394 ;;		None
  7395 ;; Auto vars:     Size  Location     Type
  7396 ;;		None
  7397 ;; Return value:  Size  Location     Type
  7398 ;;                  1    wreg      void 
  7399 ;; Registers used:
  7400 ;;		wreg, status,2, status,0, cstack
  7401 ;; Tracked objects:
  7402 ;;		On entry : 0/0
  7403 ;;		On exit  : 0/0
  7404 ;;		Unchanged: 0/0
  7405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7410 ;;Total ram usage:        0 bytes
  7411 ;; Hardware stack levels used:    1
  7412 ;; Hardware stack levels required when called:    6
  7413 ;; This function calls:
  7414 ;;		_I2C_Master_Wait
  7415 ;; This function is called by:
  7416 ;;		_update_RTC
  7417 ;;		_set_time
  7418 ;; This function uses a non-reentrant model
  7419 ;;
  7420                           
  7421                           	psect	text21
  7422  00318A                     __ptext21:
  7423                           	opt stack 0
  7424  00318A                     _I2C_Master_Stop:
  7425                           	opt stack 23
  7426                           
  7427                           ;I2C.c: 43: I2C_Master_Wait();
  7428                           
  7429                           ;incstack = 0
  7430  00318A  EC9B  F018         	call	_I2C_Master_Wait	;wreg free
  7431                           
  7432                           ;I2C.c: 44: PEN = 1;
  7433  00318E  84C5               	bsf	4037,2,c	;volatile
  7434  003190  0012               	return		;funcret
  7435  003192                     __end_of_I2C_Master_Stop:
  7436                           	opt stack 0
  7437                           tosu	equ	0xFFF
  7438                           tosh	equ	0xFFE
  7439                           tosl	equ	0xFFD
  7440                           pclath	equ	0xFFA
  7441                           tblptru	equ	0xFF8
  7442                           tblptrh	equ	0xFF7
  7443                           tblptrl	equ	0xFF6
  7444                           tablat	equ	0xFF5
  7445                           prodh	equ	0xFF4
  7446                           prodl	equ	0xFF3
  7447                           intcon	equ	0xFF2
  7448                           intcon2	equ	0xFF1
  7449                           intcon3	equ	0xFF0
  7450                           indf0	equ	0xFEF
  7451                           postinc0	equ	0xFEE
  7452                           fsr0h	equ	0xFEA
  7453                           fsr0l	equ	0xFE9
  7454                           wreg	equ	0xFE8
  7455                           indf1	equ	0xFE7
  7456                           postinc1	equ	0xFE6
  7457                           postdec1	equ	0xFE5
  7458                           fsr1h	equ	0xFE2
  7459                           fsr1l	equ	0xFE1
  7460                           indf2	equ	0xFDF
  7461                           postinc2	equ	0xFDE
  7462                           postdec2	equ	0xFDD
  7463                           fsr2h	equ	0xFDA
  7464                           fsr2l	equ	0xFD9
  7465                           status	equ	0xFD8
  7466                           
  7467 ;; *************** function _I2C_Master_Start *****************
  7468 ;; Defined at:
  7469 ;;		line 29 in file "I2C.c"
  7470 ;; Parameters:    Size  Location     Type
  7471 ;;		None
  7472 ;; Auto vars:     Size  Location     Type
  7473 ;;		None
  7474 ;; Return value:  Size  Location     Type
  7475 ;;                  1    wreg      void 
  7476 ;; Registers used:
  7477 ;;		wreg, status,2, status,0, cstack
  7478 ;; Tracked objects:
  7479 ;;		On entry : 0/0
  7480 ;;		On exit  : 0/0
  7481 ;;		Unchanged: 0/0
  7482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7487 ;;Total ram usage:        0 bytes
  7488 ;; Hardware stack levels used:    1
  7489 ;; Hardware stack levels required when called:    6
  7490 ;; This function calls:
  7491 ;;		_I2C_Master_Wait
  7492 ;; This function is called by:
  7493 ;;		_update_RTC
  7494 ;;		_set_time
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           	psect	text22
  7499  003192                     __ptext22:
  7500                           	opt stack 0
  7501  003192                     _I2C_Master_Start:
  7502                           	opt stack 23
  7503                           
  7504                           ;I2C.c: 31: I2C_Master_Wait();
  7505                           
  7506                           ;incstack = 0
  7507  003192  EC9B  F018         	call	_I2C_Master_Wait	;wreg free
  7508                           
  7509                           ;I2C.c: 32: SEN = 1;
  7510  003196  80C5               	bsf	4037,0,c	;volatile
  7511  003198  0012               	return		;funcret
  7512  00319A                     __end_of_I2C_Master_Start:
  7513                           	opt stack 0
  7514                           tosu	equ	0xFFF
  7515                           tosh	equ	0xFFE
  7516                           tosl	equ	0xFFD
  7517                           pclath	equ	0xFFA
  7518                           tblptru	equ	0xFF8
  7519                           tblptrh	equ	0xFF7
  7520                           tblptrl	equ	0xFF6
  7521                           tablat	equ	0xFF5
  7522                           prodh	equ	0xFF4
  7523                           prodl	equ	0xFF3
  7524                           intcon	equ	0xFF2
  7525                           intcon2	equ	0xFF1
  7526                           intcon3	equ	0xFF0
  7527                           indf0	equ	0xFEF
  7528                           postinc0	equ	0xFEE
  7529                           fsr0h	equ	0xFEA
  7530                           fsr0l	equ	0xFE9
  7531                           wreg	equ	0xFE8
  7532                           indf1	equ	0xFE7
  7533                           postinc1	equ	0xFE6
  7534                           postdec1	equ	0xFE5
  7535                           fsr1h	equ	0xFE2
  7536                           fsr1l	equ	0xFE1
  7537                           indf2	equ	0xFDF
  7538                           postinc2	equ	0xFDE
  7539                           postdec2	equ	0xFDD
  7540                           fsr2h	equ	0xFDA
  7541                           fsr2l	equ	0xFD9
  7542                           status	equ	0xFD8
  7543                           
  7544 ;; *************** function _I2C_Master_Wait *****************
  7545 ;; Defined at:
  7546 ;;		line 24 in file "I2C.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;		None
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;		None
  7551 ;; Return value:  Size  Location     Type
  7552 ;;                  1    wreg      void 
  7553 ;; Registers used:
  7554 ;;		wreg, status,2, status,0
  7555 ;; Tracked objects:
  7556 ;;		On entry : 0/0
  7557 ;;		On exit  : 0/0
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7561 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7562 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7563 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7564 ;;Total ram usage:        1 bytes
  7565 ;; Hardware stack levels used:    1
  7566 ;; Hardware stack levels required when called:    5
  7567 ;; This function calls:
  7568 ;;		Nothing
  7569 ;; This function is called by:
  7570 ;;		_I2C_Master_Start
  7571 ;;		_I2C_Master_Stop
  7572 ;;		_I2C_Master_Write
  7573 ;;		_I2C_Master_Read
  7574 ;;		_I2C_Master_RepeatedStart
  7575 ;; This function uses a non-reentrant model
  7576 ;;
  7577                           
  7578                           	psect	text23
  7579  003136                     __ptext23:
  7580                           	opt stack 0
  7581  003136                     _I2C_Master_Wait:
  7582                           	opt stack 23
  7583  003136                     l34:
  7584  003136  B4C7               	btfsc	4039,2,c	;volatile
  7585  003138  D7FE               	goto	l34
  7586  00313A  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  7587  00313E  0E1F               	movlw	31
  7588  003140  0100               	movlb	0	; () banked
  7589  003142  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7590  003144  B4D8               	btfsc	status,2,c
  7591  003146  0012               	return	
  7592  003148  D7F6               	goto	l34
  7593  00314A                     __end_of_I2C_Master_Wait:
  7594                           	opt stack 0
  7595                           tosu	equ	0xFFF
  7596                           tosh	equ	0xFFE
  7597                           tosl	equ	0xFFD
  7598                           pclath	equ	0xFFA
  7599                           tblptru	equ	0xFF8
  7600                           tblptrh	equ	0xFF7
  7601                           tblptrl	equ	0xFF6
  7602                           tablat	equ	0xFF5
  7603                           prodh	equ	0xFF4
  7604                           prodl	equ	0xFF3
  7605                           intcon	equ	0xFF2
  7606                           intcon2	equ	0xFF1
  7607                           intcon3	equ	0xFF0
  7608                           indf0	equ	0xFEF
  7609                           postinc0	equ	0xFEE
  7610                           fsr0h	equ	0xFEA
  7611                           fsr0l	equ	0xFE9
  7612                           wreg	equ	0xFE8
  7613                           indf1	equ	0xFE7
  7614                           postinc1	equ	0xFE6
  7615                           postdec1	equ	0xFE5
  7616                           fsr1h	equ	0xFE2
  7617                           fsr1l	equ	0xFE1
  7618                           indf2	equ	0xFDF
  7619                           postinc2	equ	0xFDE
  7620                           postdec2	equ	0xFDD
  7621                           fsr2h	equ	0xFDA
  7622                           fsr2l	equ	0xFD9
  7623                           status	equ	0xFD8
  7624                           
  7625 ;; *************** function _read_sensors *****************
  7626 ;; Defined at:
  7627 ;;		line 412 in file "main.c"
  7628 ;; Parameters:    Size  Location     Type
  7629 ;;		None
  7630 ;; Auto vars:     Size  Location     Type
  7631 ;;  i               1    4[BANK0 ] unsigned char 
  7632 ;; Return value:  Size  Location     Type
  7633 ;;                  1    wreg      void 
  7634 ;; Registers used:
  7635 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7636 ;; Tracked objects:
  7637 ;;		On entry : 0/0
  7638 ;;		On exit  : 0/0
  7639 ;;		Unchanged: 0/0
  7640 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7642 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7643 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7644 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7645 ;;Total ram usage:        3 bytes
  7646 ;; Hardware stack levels used:    1
  7647 ;; Hardware stack levels required when called:    6
  7648 ;; This function calls:
  7649 ;;		_readADC
  7650 ;; This function is called by:
  7651 ;;		_main
  7652 ;; This function uses a non-reentrant model
  7653 ;;
  7654                           
  7655                           	psect	text24
  7656  0021DE                     __ptext24:
  7657                           	opt stack 0
  7658  0021DE                     _read_sensors:
  7659                           	opt stack 24
  7660                           
  7661                           ;main.c: 413: if (state!='s'){
  7662                           
  7663                           ; BSR set to: 0
  7664                           ;incstack = 0
  7665  0021DE  0E73               	movlw	115
  7666  0021E0  0100               	movlb	0	; () banked
  7667  0021E2  19E9               	xorwf	_state& (0+255),w,b
  7668  0021E4  A4D8               	btfss	status,2,c
  7669  0021E6  0012               	return	
  7670                           
  7671                           ; BSR set to: 0
  7672                           ;main.c: 415: }
  7673                           ;main.c: 417: for(char i=0;i<5-1;i++){
  7674                           
  7675                           ; BSR set to: 0
  7676                           
  7677                           ; BSR set to: 0
  7678                           ;main.c: 414: return;
  7679  0021E8  0E00               	movlw	0
  7680  0021EA  0100               	movlb	0	; () banked
  7681  0021EC  6F84               	movwf	read_sensors@i& (0+255),b
  7682  0021EE                     l5126:
  7683                           
  7684                           ; BSR set to: 0
  7685  0021EE  0E03               	movlw	3
  7686  0021F0  0100               	movlb	0	; () banked
  7687  0021F2  6584               	cpfsgt	read_sensors@i& (0+255),b
  7688  0021F4  D001               	goto	l5130
  7689  0021F6  D0B2               	goto	l5136
  7690  0021F8                     l5130:
  7691                           
  7692                           ; BSR set to: 0
  7693                           ;main.c: 418: PROX1[i+1]=PROX1[i];
  7694  0021F8  0100               	movlb	0	; () banked
  7695  0021FA  5184               	movf	read_sensors@i& (0+255),w,b
  7696  0021FC  0D02               	mullw	2
  7697  0021FE  0E4C               	movlw	low _PROX1
  7698  002200  24F3               	addwf	prodl,w,c
  7699  002202  6ED9               	movwf	fsr2l,c
  7700  002204  0E00               	movlw	high _PROX1
  7701  002206  20F4               	addwfc	prodh,w,c
  7702  002208  6EDA               	movwf	fsr2h,c
  7703  00220A  0100               	movlb	0	; () banked
  7704  00220C  5184               	movf	read_sensors@i& (0+255),w,b
  7705  00220E  0100               	movlb	0	; () banked
  7706  002210  6F82               	movwf	??_read_sensors& (0+255),b
  7707  002212  6B83               	clrf	(??_read_sensors+1)& (0+255),b
  7708  002214  90D8               	bcf	status,0,c
  7709  002216  0100               	movlb	0	; () banked
  7710  002218  3782               	rlcf	??_read_sensors& (0+255),f,b
  7711  00221A  3783               	rlcf	(??_read_sensors+1)& (0+255),f,b
  7712  00221C  0E02               	movlw	2
  7713  00221E  0100               	movlb	0	; () banked
  7714  002220  2782               	addwf	??_read_sensors& (0+255),f,b
  7715  002222  0E00               	movlw	0
  7716  002224  2383               	addwfc	(??_read_sensors+1)& (0+255),f,b
  7717  002226  0E4C               	movlw	low _PROX1
  7718  002228  0100               	movlb	0	; () banked
  7719  00222A  2582               	addwf	??_read_sensors& (0+255),w,b
  7720  00222C  6EE1               	movwf	fsr1l,c
  7721  00222E  0E00               	movlw	high _PROX1
  7722  002230  0100               	movlb	0	; () banked
  7723  002232  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7724  002234  6EE2               	movwf	fsr1h,c
  7725  002236  CFDE FFE6          	movff	postinc2,postinc1
  7726  00223A  CFDD FFE5          	movff	postdec2,postdec1
  7727                           
  7728                           ;main.c: 419: PROX2[i+1]=PROX2[i];
  7729  00223E  0100               	movlb	0	; () banked
  7730  002240  5184               	movf	read_sensors@i& (0+255),w,b
  7731  002242  0D02               	mullw	2
  7732  002244  0E56               	movlw	low _PROX2
  7733  002246  24F3               	addwf	prodl,w,c
  7734  002248  6ED9               	movwf	fsr2l,c
  7735  00224A  0E00               	movlw	high _PROX2
  7736  00224C  20F4               	addwfc	prodh,w,c
  7737  00224E  6EDA               	movwf	fsr2h,c
  7738  002250  0100               	movlb	0	; () banked
  7739  002252  5184               	movf	read_sensors@i& (0+255),w,b
  7740  002254  0100               	movlb	0	; () banked
  7741  002256  6F82               	movwf	??_read_sensors& (0+255),b
  7742  002258  6B83               	clrf	(??_read_sensors+1)& (0+255),b
  7743  00225A  90D8               	bcf	status,0,c
  7744  00225C  0100               	movlb	0	; () banked
  7745  00225E  3782               	rlcf	??_read_sensors& (0+255),f,b
  7746  002260  3783               	rlcf	(??_read_sensors+1)& (0+255),f,b
  7747  002262  0E02               	movlw	2
  7748  002264  0100               	movlb	0	; () banked
  7749  002266  2782               	addwf	??_read_sensors& (0+255),f,b
  7750  002268  0E00               	movlw	0
  7751  00226A  2383               	addwfc	(??_read_sensors+1)& (0+255),f,b
  7752  00226C  0E56               	movlw	low _PROX2
  7753  00226E  0100               	movlb	0	; () banked
  7754  002270  2582               	addwf	??_read_sensors& (0+255),w,b
  7755  002272  6EE1               	movwf	fsr1l,c
  7756  002274  0E00               	movlw	high _PROX2
  7757  002276  0100               	movlb	0	; () banked
  7758  002278  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7759  00227A  6EE2               	movwf	fsr1h,c
  7760  00227C  CFDE FFE6          	movff	postinc2,postinc1
  7761  002280  CFDD FFE5          	movff	postdec2,postdec1
  7762                           
  7763                           ;main.c: 420: DIST1[i+1]=DIST1[i];
  7764  002284  0100               	movlb	0	; () banked
  7765  002286  5184               	movf	read_sensors@i& (0+255),w,b
  7766  002288  0D02               	mullw	2
  7767  00228A  0EBA               	movlw	low _DIST1
  7768  00228C  24F3               	addwf	prodl,w,c
  7769  00228E  6ED9               	movwf	fsr2l,c
  7770  002290  0E00               	movlw	high _DIST1
  7771  002292  20F4               	addwfc	prodh,w,c
  7772  002294  6EDA               	movwf	fsr2h,c
  7773  002296  0100               	movlb	0	; () banked
  7774  002298  5184               	movf	read_sensors@i& (0+255),w,b
  7775  00229A  0100               	movlb	0	; () banked
  7776  00229C  6F82               	movwf	??_read_sensors& (0+255),b
  7777  00229E  6B83               	clrf	(??_read_sensors+1)& (0+255),b
  7778  0022A0  90D8               	bcf	status,0,c
  7779  0022A2  0100               	movlb	0	; () banked
  7780  0022A4  3782               	rlcf	??_read_sensors& (0+255),f,b
  7781  0022A6  3783               	rlcf	(??_read_sensors+1)& (0+255),f,b
  7782  0022A8  0E02               	movlw	2
  7783  0022AA  0100               	movlb	0	; () banked
  7784  0022AC  2782               	addwf	??_read_sensors& (0+255),f,b
  7785  0022AE  0E00               	movlw	0
  7786  0022B0  2383               	addwfc	(??_read_sensors+1)& (0+255),f,b
  7787  0022B2  0EBA               	movlw	low _DIST1
  7788  0022B4  0100               	movlb	0	; () banked
  7789  0022B6  2582               	addwf	??_read_sensors& (0+255),w,b
  7790  0022B8  6EE1               	movwf	fsr1l,c
  7791  0022BA  0E00               	movlw	high _DIST1
  7792  0022BC  0100               	movlb	0	; () banked
  7793  0022BE  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7794  0022C0  6EE2               	movwf	fsr1h,c
  7795  0022C2  CFDE FFE6          	movff	postinc2,postinc1
  7796  0022C6  CFDD FFE5          	movff	postdec2,postdec1
  7797                           
  7798                           ;main.c: 421: IR1[i+1]=IR1[i];
  7799  0022CA  0100               	movlb	0	; () banked
  7800  0022CC  5184               	movf	read_sensors@i& (0+255),w,b
  7801  0022CE  0D02               	mullw	2
  7802  0022D0  0EC4               	movlw	low _IR1
  7803  0022D2  24F3               	addwf	prodl,w,c
  7804  0022D4  6ED9               	movwf	fsr2l,c
  7805  0022D6  0E00               	movlw	high _IR1
  7806  0022D8  20F4               	addwfc	prodh,w,c
  7807  0022DA  6EDA               	movwf	fsr2h,c
  7808  0022DC  0100               	movlb	0	; () banked
  7809  0022DE  5184               	movf	read_sensors@i& (0+255),w,b
  7810  0022E0  0100               	movlb	0	; () banked
  7811  0022E2  6F82               	movwf	??_read_sensors& (0+255),b
  7812  0022E4  6B83               	clrf	(??_read_sensors+1)& (0+255),b
  7813  0022E6  90D8               	bcf	status,0,c
  7814  0022E8  0100               	movlb	0	; () banked
  7815  0022EA  3782               	rlcf	??_read_sensors& (0+255),f,b
  7816  0022EC  3783               	rlcf	(??_read_sensors+1)& (0+255),f,b
  7817  0022EE  0E02               	movlw	2
  7818  0022F0  0100               	movlb	0	; () banked
  7819  0022F2  2782               	addwf	??_read_sensors& (0+255),f,b
  7820  0022F4  0E00               	movlw	0
  7821  0022F6  2383               	addwfc	(??_read_sensors+1)& (0+255),f,b
  7822  0022F8  0EC4               	movlw	low _IR1
  7823  0022FA  0100               	movlb	0	; () banked
  7824  0022FC  2582               	addwf	??_read_sensors& (0+255),w,b
  7825  0022FE  6EE1               	movwf	fsr1l,c
  7826  002300  0E00               	movlw	high _IR1
  7827  002302  0100               	movlb	0	; () banked
  7828  002304  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7829  002306  6EE2               	movwf	fsr1h,c
  7830  002308  CFDE FFE6          	movff	postinc2,postinc1
  7831  00230C  CFDD FFE5          	movff	postdec2,postdec1
  7832                           
  7833                           ;main.c: 422: IR2[i+1]=IR2[i];
  7834  002310  0100               	movlb	0	; () banked
  7835  002312  5184               	movf	read_sensors@i& (0+255),w,b
  7836  002314  0D02               	mullw	2
  7837  002316  0E1C               	movlw	low _IR2
  7838  002318  24F3               	addwf	prodl,w,c
  7839  00231A  6ED9               	movwf	fsr2l,c
  7840  00231C  0E01               	movlw	high _IR2
  7841  00231E  20F4               	addwfc	prodh,w,c
  7842  002320  6EDA               	movwf	fsr2h,c
  7843  002322  0100               	movlb	0	; () banked
  7844  002324  5184               	movf	read_sensors@i& (0+255),w,b
  7845  002326  0100               	movlb	0	; () banked
  7846  002328  6F82               	movwf	??_read_sensors& (0+255),b
  7847  00232A  6B83               	clrf	(??_read_sensors+1)& (0+255),b
  7848  00232C  90D8               	bcf	status,0,c
  7849  00232E  0100               	movlb	0	; () banked
  7850  002330  3782               	rlcf	??_read_sensors& (0+255),f,b
  7851  002332  3783               	rlcf	(??_read_sensors+1)& (0+255),f,b
  7852  002334  0E02               	movlw	2
  7853  002336  0100               	movlb	0	; () banked
  7854  002338  2782               	addwf	??_read_sensors& (0+255),f,b
  7855  00233A  0E00               	movlw	0
  7856  00233C  2383               	addwfc	(??_read_sensors+1)& (0+255),f,b
  7857  00233E  0E1C               	movlw	low _IR2
  7858  002340  0100               	movlb	0	; () banked
  7859  002342  2582               	addwf	??_read_sensors& (0+255),w,b
  7860  002344  6EE1               	movwf	fsr1l,c
  7861  002346  0E01               	movlw	high _IR2
  7862  002348  0100               	movlb	0	; () banked
  7863  00234A  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7864  00234C  6EE2               	movwf	fsr1h,c
  7865  00234E  CFDE FFE6          	movff	postinc2,postinc1
  7866  002352  CFDD FFE5          	movff	postdec2,postdec1
  7867                           
  7868                           ; BSR set to: 0
  7869  002356  0100               	movlb	0	; () banked
  7870  002358  2B84               	incf	read_sensors@i& (0+255),f,b
  7871  00235A  D749               	goto	l5126
  7872  00235C                     l5136:
  7873                           
  7874                           ; BSR set to: 0
  7875                           ;main.c: 423: }
  7876                           ;main.c: 428: readADC(DIST1_PIN);
  7877  00235C  0100               	movlb	0	; () banked
  7878  00235E  51E3               	movf	_DIST1_PIN& (0+255),w,b
  7879  002360  EC38  F018         	call	_readADC
  7880                           
  7881                           ;main.c: 429: DIST1[0]=16*16*ADRESH+ADRESL;
  7882  002364  50C4               	movf	4036,w,c	;volatile
  7883  002366  0100               	movlb	0	; () banked
  7884  002368  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  7885  00236A  6B82               	clrf	??_read_sensors& (0+255),b
  7886  00236C  50C3               	movf	4035,w,c	;volatile
  7887  00236E  0100               	movlb	0	; () banked
  7888  002370  2582               	addwf	??_read_sensors& (0+255),w,b
  7889  002372  0100               	movlb	0	; () banked
  7890  002374  6FBA               	movwf	_DIST1& (0+255),b
  7891  002376  0E00               	movlw	0
  7892  002378  0100               	movlb	0	; () banked
  7893  00237A  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7894  00237C  0100               	movlb	0	; () banked
  7895  00237E  6FBB               	movwf	(_DIST1+1)& (0+255),b
  7896                           
  7897                           ; BSR set to: 0
  7898                           ;main.c: 430: readADC(IR1_PIN);
  7899  002380  0100               	movlb	0	; () banked
  7900  002382  51E5               	movf	_IR1_PIN& (0+255),w,b
  7901  002384  EC38  F018         	call	_readADC
  7902                           
  7903                           ;main.c: 431: IR1[0]=16*16*ADRESH+ADRESL;
  7904  002388  50C4               	movf	4036,w,c	;volatile
  7905  00238A  0100               	movlb	0	; () banked
  7906  00238C  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  7907  00238E  6B82               	clrf	??_read_sensors& (0+255),b
  7908  002390  50C3               	movf	4035,w,c	;volatile
  7909  002392  0100               	movlb	0	; () banked
  7910  002394  2582               	addwf	??_read_sensors& (0+255),w,b
  7911  002396  0100               	movlb	0	; () banked
  7912  002398  6FC4               	movwf	_IR1& (0+255),b
  7913  00239A  0E00               	movlw	0
  7914  00239C  0100               	movlb	0	; () banked
  7915  00239E  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7916  0023A0  0100               	movlb	0	; () banked
  7917  0023A2  6FC5               	movwf	(_IR1+1)& (0+255),b
  7918                           
  7919                           ; BSR set to: 0
  7920                           ;main.c: 432: readADC(IR2_PIN);
  7921  0023A4  0100               	movlb	0	; () banked
  7922  0023A6  51E6               	movf	_IR2_PIN& (0+255),w,b
  7923  0023A8  EC38  F018         	call	_readADC
  7924                           
  7925                           ;main.c: 433: IR2[0]=16*16*ADRESH+ADRESL;
  7926  0023AC  50C4               	movf	4036,w,c	;volatile
  7927  0023AE  0100               	movlb	0	; () banked
  7928  0023B0  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  7929  0023B2  6B82               	clrf	??_read_sensors& (0+255),b
  7930  0023B4  50C3               	movf	4035,w,c	;volatile
  7931  0023B6  0100               	movlb	0	; () banked
  7932  0023B8  2582               	addwf	??_read_sensors& (0+255),w,b
  7933  0023BA  0101               	movlb	1	; () banked
  7934  0023BC  6F1C               	movwf	_IR2& (0+255),b
  7935  0023BE  0E00               	movlw	0
  7936  0023C0  0100               	movlb	0	; () banked
  7937  0023C2  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
  7938  0023C4  0101               	movlb	1	; () banked
  7939  0023C6  6F1D               	movwf	(_IR2+1)& (0+255),b
  7940                           
  7941                           ; BSR set to: 1
  7942                           ;main.c: 435: PROX1[0]=(PORTE>>PROX1_PIN)&1;
  7943  0023C8  C0E4  F082         	movff	_PROX1_PIN,??_read_sensors
  7944  0023CC  CF84 F083          	movff	3972,??_read_sensors+1	;volatile
  7945  0023D0  0100               	movlb	0	; () banked
  7946  0023D2  2B82               	incf	??_read_sensors& (0+255),f,b
  7947  0023D4  D003               	goto	u7014
  7948  0023D6                     u7015:
  7949  0023D6  0100               	movlb	0	; () banked
  7950  0023D8  90D8               	bcf	status,0,c
  7951  0023DA  3383               	rrcf	(??_read_sensors+1)& (0+255),f,b
  7952  0023DC                     u7014:
  7953  0023DC  0100               	movlb	0	; () banked
  7954  0023DE  2F82               	decfsz	??_read_sensors& (0+255),f,b
  7955  0023E0  D7FA               	goto	u7015
  7956  0023E2  0E01               	movlw	1
  7957  0023E4  0100               	movlb	0	; () banked
  7958  0023E6  1783               	andwf	(??_read_sensors+1)& (0+255),f,b
  7959  0023E8  0100               	movlb	0	; () banked
  7960  0023EA  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  7961  0023EC  6E4C               	movwf	_PROX1,c
  7962  0023EE  6A4D               	clrf	_PROX1+1,c
  7963                           
  7964                           ; BSR set to: 0
  7965                           ;main.c: 436: PROX2[0]=(PORTE>>PROX2_PIN)&1;
  7966  0023F0  C0E7  F082         	movff	_PROX2_PIN,??_read_sensors
  7967  0023F4  CF84 F083          	movff	3972,??_read_sensors+1	;volatile
  7968  0023F8  0100               	movlb	0	; () banked
  7969  0023FA  2B82               	incf	??_read_sensors& (0+255),f,b
  7970  0023FC  D003               	goto	u7024
  7971  0023FE                     u7025:
  7972  0023FE  0100               	movlb	0	; () banked
  7973  002400  90D8               	bcf	status,0,c
  7974  002402  3383               	rrcf	(??_read_sensors+1)& (0+255),f,b
  7975  002404                     u7024:
  7976  002404  0100               	movlb	0	; () banked
  7977  002406  2F82               	decfsz	??_read_sensors& (0+255),f,b
  7978  002408  D7FA               	goto	u7025
  7979  00240A  0E01               	movlw	1
  7980  00240C  0100               	movlb	0	; () banked
  7981  00240E  1783               	andwf	(??_read_sensors+1)& (0+255),f,b
  7982  002410  0100               	movlb	0	; () banked
  7983  002412  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  7984  002414  6E56               	movwf	_PROX2,c
  7985  002416  6A57               	clrf	_PROX2+1,c
  7986                           
  7987                           ; BSR set to: 0
  7988  002418  0012               	return		;funcret
  7989  00241A                     __end_of_read_sensors:
  7990                           	opt stack 0
  7991                           tosu	equ	0xFFF
  7992                           tosh	equ	0xFFE
  7993                           tosl	equ	0xFFD
  7994                           pclath	equ	0xFFA
  7995                           tblptru	equ	0xFF8
  7996                           tblptrh	equ	0xFF7
  7997                           tblptrl	equ	0xFF6
  7998                           tablat	equ	0xFF5
  7999                           prodh	equ	0xFF4
  8000                           prodl	equ	0xFF3
  8001                           intcon	equ	0xFF2
  8002                           intcon2	equ	0xFF1
  8003                           intcon3	equ	0xFF0
  8004                           indf0	equ	0xFEF
  8005                           postinc0	equ	0xFEE
  8006                           fsr0h	equ	0xFEA
  8007                           fsr0l	equ	0xFE9
  8008                           wreg	equ	0xFE8
  8009                           indf1	equ	0xFE7
  8010                           postinc1	equ	0xFE6
  8011                           postdec1	equ	0xFE5
  8012                           fsr1h	equ	0xFE2
  8013                           fsr1l	equ	0xFE1
  8014                           indf2	equ	0xFDF
  8015                           postinc2	equ	0xFDE
  8016                           postdec2	equ	0xFDD
  8017                           fsr2h	equ	0xFDA
  8018                           fsr2l	equ	0xFD9
  8019                           status	equ	0xFD8
  8020                           
  8021 ;; *************** function _readADC *****************
  8022 ;; Defined at:
  8023 ;;		line 621 in file "main.c"
  8024 ;; Parameters:    Size  Location     Type
  8025 ;;  channel         1    wreg     unsigned char 
  8026 ;; Auto vars:     Size  Location     Type
  8027 ;;  channel         1    1[BANK0 ] unsigned char 
  8028 ;; Return value:  Size  Location     Type
  8029 ;;                  1    wreg      void 
  8030 ;; Registers used:
  8031 ;;		wreg, status,2, status,0, cstack
  8032 ;; Tracked objects:
  8033 ;;		On entry : 0/0
  8034 ;;		On exit  : 0/0
  8035 ;;		Unchanged: 0/0
  8036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8037 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8038 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8039 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8040 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8041 ;;Total ram usage:        2 bytes
  8042 ;; Hardware stack levels used:    1
  8043 ;; Hardware stack levels required when called:    5
  8044 ;; This function calls:
  8045 ;;		Nothing
  8046 ;; This function is called by:
  8047 ;;		_read_sensors
  8048 ;; This function uses a non-reentrant model
  8049 ;;
  8050                           
  8051                           	psect	text25
  8052  003070                     __ptext25:
  8053                           	opt stack 0
  8054  003070                     _readADC:
  8055                           	opt stack 24
  8056                           
  8057                           ; BSR set to: 0
  8058                           ;incstack = 0
  8059                           ;readADC@channel stored from wreg
  8060  003070  0100               	movlb	0	; () banked
  8061  003072  6F81               	movwf	readADC@channel& (0+255),b
  8062                           
  8063                           ;main.c: 623: ADCON0 = ((channel <<2));
  8064  003074  0100               	movlb	0	; () banked
  8065  003076  4581               	rlncf	readADC@channel& (0+255),w,b
  8066  003078  46E8               	rlncf	wreg,f,c
  8067  00307A  0BFC               	andlw	252
  8068  00307C  6EC2               	movwf	4034,c	;volatile
  8069                           
  8070                           ; BSR set to: 0
  8071                           ;main.c: 624: ADON = 1;
  8072  00307E  80C2               	bsf	4034,0,c	;volatile
  8073                           
  8074                           ; BSR set to: 0
  8075                           ;main.c: 625: ADCON0bits.GO = 1;
  8076  003080  82C2               	bsf	4034,1,c	;volatile
  8077                           
  8078                           ;main.c: 626: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(10000000/4000.0)
      +                          ));}
  8079  003082  D009               	goto	l4742
  8080  003084                     l4740:
  8081  003084  0E11               	movlw	17
  8082  003086  0100               	movlb	0	; () banked
  8083  003088  6F80               	movwf	??_readADC& (0+255),b
  8084  00308A  0E3A               	movlw	58
  8085  00308C                     u13077:
  8086  00308C  2EE8               	decfsz	wreg,f,c
  8087  00308E  D7FE               	bra	u13077
  8088  003090  2F80               	decfsz	??_readADC& (0+255),f,b
  8089  003092  D7FC               	bra	u13077
  8090  003094  F000               	nop	
  8091  003096                     l4742:
  8092  003096  A2C2               	btfss	4034,1,c	;volatile
  8093  003098  0012               	return	
  8094  00309A  D7F4               	goto	l4740
  8095  00309C                     __end_of_readADC:
  8096                           	opt stack 0
  8097                           tosu	equ	0xFFF
  8098                           tosh	equ	0xFFE
  8099                           tosl	equ	0xFFD
  8100                           pclath	equ	0xFFA
  8101                           tblptru	equ	0xFF8
  8102                           tblptrh	equ	0xFF7
  8103                           tblptrl	equ	0xFF6
  8104                           tablat	equ	0xFF5
  8105                           prodh	equ	0xFF4
  8106                           prodl	equ	0xFF3
  8107                           intcon	equ	0xFF2
  8108                           intcon2	equ	0xFF1
  8109                           intcon3	equ	0xFF0
  8110                           indf0	equ	0xFEF
  8111                           postinc0	equ	0xFEE
  8112                           fsr0h	equ	0xFEA
  8113                           fsr0l	equ	0xFE9
  8114                           wreg	equ	0xFE8
  8115                           indf1	equ	0xFE7
  8116                           postinc1	equ	0xFE6
  8117                           postdec1	equ	0xFE5
  8118                           fsr1h	equ	0xFE2
  8119                           fsr1l	equ	0xFE1
  8120                           indf2	equ	0xFDF
  8121                           postinc2	equ	0xFDE
  8122                           postdec2	equ	0xFDD
  8123                           fsr2h	equ	0xFDA
  8124                           fsr2l	equ	0xFD9
  8125                           status	equ	0xFD8
  8126                           
  8127 ;; *************** function _initLCD *****************
  8128 ;; Defined at:
  8129 ;;		line 14 in file "lcd.c"
  8130 ;; Parameters:    Size  Location     Type
  8131 ;;		None
  8132 ;; Auto vars:     Size  Location     Type
  8133 ;;		None
  8134 ;; Return value:  Size  Location     Type
  8135 ;;                  1    wreg      void 
  8136 ;; Registers used:
  8137 ;;		wreg, status,2, status,0, cstack
  8138 ;; Tracked objects:
  8139 ;;		On entry : 0/0
  8140 ;;		On exit  : 0/0
  8141 ;;		Unchanged: 0/0
  8142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8143 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8145 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8146 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8147 ;;Total ram usage:        1 bytes
  8148 ;; Hardware stack levels used:    1
  8149 ;; Hardware stack levels required when called:    7
  8150 ;; This function calls:
  8151 ;;		_lcdInst
  8152 ;; This function is called by:
  8153 ;;		_main
  8154 ;; This function uses a non-reentrant model
  8155 ;;
  8156                           
  8157                           	psect	text26
  8158  002F18                     __ptext26:
  8159                           	opt stack 0
  8160  002F18                     _initLCD:
  8161                           	opt stack 23
  8162                           
  8163                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  8164                           
  8165                           ;incstack = 0
  8166  002F18  0E31               	movlw	49
  8167  002F1A  0100               	movlb	0	; () banked
  8168  002F1C  6F83               	movwf	??_initLCD& (0+255),b
  8169  002F1E  0EB2               	movlw	178
  8170  002F20                     u13087:
  8171  002F20  2EE8               	decfsz	wreg,f,c
  8172  002F22  D7FE               	bra	u13087
  8173  002F24  2F83               	decfsz	??_initLCD& (0+255),f,b
  8174  002F26  D7FC               	bra	u13087
  8175  002F28  F000               	nop	
  8176                           
  8177                           ;lcd.c: 16: lcdInst(0b00110011);
  8178  002F2A  0E33               	movlw	51
  8179  002F2C  ECA5  F018         	call	_lcdInst
  8180                           
  8181                           ;lcd.c: 17: lcdInst(0b00110010);
  8182  002F30  0E32               	movlw	50
  8183  002F32  ECA5  F018         	call	_lcdInst
  8184                           
  8185                           ;lcd.c: 18: lcdInst(0b00101000);
  8186  002F36  0E28               	movlw	40
  8187  002F38  ECA5  F018         	call	_lcdInst
  8188                           
  8189                           ;lcd.c: 19: lcdInst(0b00001111);
  8190  002F3C  0E0F               	movlw	15
  8191  002F3E  ECA5  F018         	call	_lcdInst
  8192                           
  8193                           ;lcd.c: 20: lcdInst(0b00000110);
  8194  002F42  0E06               	movlw	6
  8195  002F44  ECA5  F018         	call	_lcdInst
  8196                           
  8197                           ;lcd.c: 21: lcdInst(0b00000001);
  8198  002F48  0E01               	movlw	1
  8199  002F4A  ECA5  F018         	call	_lcdInst
  8200                           
  8201                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
  8202  002F4E  0E31               	movlw	49
  8203  002F50  0100               	movlb	0	; () banked
  8204  002F52  6F83               	movwf	??_initLCD& (0+255),b
  8205  002F54  0EB2               	movlw	178
  8206  002F56                     u13097:
  8207  002F56  2EE8               	decfsz	wreg,f,c
  8208  002F58  D7FE               	bra	u13097
  8209  002F5A  2F83               	decfsz	??_initLCD& (0+255),f,b
  8210  002F5C  D7FC               	bra	u13097
  8211  002F5E  F000               	nop	
  8212  002F60  0012               	return		;funcret
  8213  002F62                     __end_of_initLCD:
  8214                           	opt stack 0
  8215                           tosu	equ	0xFFF
  8216                           tosh	equ	0xFFE
  8217                           tosl	equ	0xFFD
  8218                           pclath	equ	0xFFA
  8219                           tblptru	equ	0xFF8
  8220                           tblptrh	equ	0xFF7
  8221                           tblptrl	equ	0xFF6
  8222                           tablat	equ	0xFF5
  8223                           prodh	equ	0xFF4
  8224                           prodl	equ	0xFF3
  8225                           intcon	equ	0xFF2
  8226                           intcon2	equ	0xFF1
  8227                           intcon3	equ	0xFF0
  8228                           indf0	equ	0xFEF
  8229                           postinc0	equ	0xFEE
  8230                           fsr0h	equ	0xFEA
  8231                           fsr0l	equ	0xFE9
  8232                           wreg	equ	0xFE8
  8233                           indf1	equ	0xFE7
  8234                           postinc1	equ	0xFE6
  8235                           postdec1	equ	0xFE5
  8236                           fsr1h	equ	0xFE2
  8237                           fsr1l	equ	0xFE1
  8238                           indf2	equ	0xFDF
  8239                           postinc2	equ	0xFDE
  8240                           postdec2	equ	0xFDD
  8241                           fsr2h	equ	0xFDA
  8242                           fsr2l	equ	0xFD9
  8243                           status	equ	0xFD8
  8244                           
  8245 ;; *************** function _lcdInst *****************
  8246 ;; Defined at:
  8247 ;;		line 25 in file "lcd.c"
  8248 ;; Parameters:    Size  Location     Type
  8249 ;;  data            1    wreg     unsigned char 
  8250 ;; Auto vars:     Size  Location     Type
  8251 ;;  data            1    2[BANK0 ] unsigned char 
  8252 ;; Return value:  Size  Location     Type
  8253 ;;                  1    wreg      void 
  8254 ;; Registers used:
  8255 ;;		wreg, status,2, status,0, cstack
  8256 ;; Tracked objects:
  8257 ;;		On entry : 0/0
  8258 ;;		On exit  : 0/0
  8259 ;;		Unchanged: 0/0
  8260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8262 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8264 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8265 ;;Total ram usage:        1 bytes
  8266 ;; Hardware stack levels used:    1
  8267 ;; Hardware stack levels required when called:    6
  8268 ;; This function calls:
  8269 ;;		_lcdNibble
  8270 ;; This function is called by:
  8271 ;;		_initLCD
  8272 ;;		_update_lcd
  8273 ;; This function uses a non-reentrant model
  8274 ;;
  8275                           
  8276                           	psect	text27
  8277  00314A                     __ptext27:
  8278                           	opt stack 0
  8279  00314A                     _lcdInst:
  8280                           	opt stack 23
  8281                           
  8282                           ;incstack = 0
  8283                           ;lcdInst@data stored from wreg
  8284  00314A  0100               	movlb	0	; () banked
  8285  00314C  6F82               	movwf	lcdInst@data& (0+255),b
  8286                           
  8287                           ;lcd.c: 26: LATDbits.LATD2 = 0;
  8288  00314E  948C               	bcf	3980,2,c	;volatile
  8289                           
  8290                           ;lcd.c: 27: lcdNibble(data);
  8291  003150  0100               	movlb	0	; () banked
  8292  003152  5182               	movf	lcdInst@data& (0+255),w,b
  8293  003154  ECF9  F015         	call	_lcdNibble
  8294  003158  0012               	return		;funcret
  8295  00315A                     __end_of_lcdInst:
  8296                           	opt stack 0
  8297                           tosu	equ	0xFFF
  8298                           tosh	equ	0xFFE
  8299                           tosl	equ	0xFFD
  8300                           pclath	equ	0xFFA
  8301                           tblptru	equ	0xFF8
  8302                           tblptrh	equ	0xFF7
  8303                           tblptrl	equ	0xFF6
  8304                           tablat	equ	0xFF5
  8305                           prodh	equ	0xFF4
  8306                           prodl	equ	0xFF3
  8307                           intcon	equ	0xFF2
  8308                           intcon2	equ	0xFF1
  8309                           intcon3	equ	0xFF0
  8310                           indf0	equ	0xFEF
  8311                           postinc0	equ	0xFEE
  8312                           fsr0h	equ	0xFEA
  8313                           fsr0l	equ	0xFE9
  8314                           wreg	equ	0xFE8
  8315                           indf1	equ	0xFE7
  8316                           postinc1	equ	0xFE6
  8317                           postdec1	equ	0xFE5
  8318                           fsr1h	equ	0xFE2
  8319                           fsr1l	equ	0xFE1
  8320                           indf2	equ	0xFDF
  8321                           postinc2	equ	0xFDE
  8322                           postdec2	equ	0xFDD
  8323                           fsr2h	equ	0xFDA
  8324                           fsr2l	equ	0xFD9
  8325                           status	equ	0xFD8
  8326                           
  8327 ;; *************** function _lcdNibble *****************
  8328 ;; Defined at:
  8329 ;;		line 35 in file "lcd.c"
  8330 ;; Parameters:    Size  Location     Type
  8331 ;;  data            1    wreg     unsigned char 
  8332 ;; Auto vars:     Size  Location     Type
  8333 ;;  data            1    1[BANK0 ] unsigned char 
  8334 ;;  temp            1    0[BANK0 ] unsigned char 
  8335 ;; Return value:  Size  Location     Type
  8336 ;;                  1    wreg      void 
  8337 ;; Registers used:
  8338 ;;		wreg, status,2, status,0
  8339 ;; Tracked objects:
  8340 ;;		On entry : 0/0
  8341 ;;		On exit  : 0/0
  8342 ;;		Unchanged: 0/0
  8343 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8344 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8345 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8346 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8347 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8348 ;;Total ram usage:        2 bytes
  8349 ;; Hardware stack levels used:    1
  8350 ;; Hardware stack levels required when called:    5
  8351 ;; This function calls:
  8352 ;;		Nothing
  8353 ;; This function is called by:
  8354 ;;		_lcdInst
  8355 ;;		_putch
  8356 ;; This function uses a non-reentrant model
  8357 ;;
  8358                           
  8359                           	psect	text28
  8360  002BF2                     __ptext28:
  8361                           	opt stack 0
  8362  002BF2                     _lcdNibble:
  8363                           	opt stack 21
  8364                           
  8365                           ;incstack = 0
  8366                           ;lcdNibble@data stored from wreg
  8367  002BF2  0100               	movlb	0	; () banked
  8368  002BF4  6F81               	movwf	lcdNibble@data& (0+255),b
  8369                           
  8370                           ;lcd.c: 37: char temp = data & 0xF0;
  8371  002BF6  0100               	movlb	0	; () banked
  8372  002BF8  5181               	movf	lcdNibble@data& (0+255),w,b
  8373  002BFA  0BF0               	andlw	240
  8374  002BFC  0100               	movlb	0	; () banked
  8375  002BFE  6F80               	movwf	lcdNibble@temp& (0+255),b
  8376                           
  8377                           ;lcd.c: 38: LATD = LATD & 0x0F;
  8378  002C00  508C               	movf	3980,w,c	;volatile
  8379  002C02  0B0F               	andlw	15
  8380  002C04  6E8C               	movwf	3980,c	;volatile
  8381                           
  8382                           ;lcd.c: 39: LATD = temp | LATD;
  8383  002C06  0100               	movlb	0	; () banked
  8384  002C08  5180               	movf	lcdNibble@temp& (0+255),w,b
  8385  002C0A  108C               	iorwf	3980,w,c	;volatile
  8386  002C0C  6E8C               	movwf	3980,c	;volatile
  8387                           
  8388                           ; BSR set to: 0
  8389                           ;lcd.c: 41: LATDbits.LATD3 = 0;
  8390  002C0E  968C               	bcf	3980,3,c	;volatile
  8391                           
  8392                           ; BSR set to: 0
  8393                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8394  002C10  0E14               	movlw	20
  8395  002C12                     u13107:
  8396  002C12  2EE8               	decfsz	wreg,f,c
  8397  002C14  D7FE               	bra	u13107
  8398  002C16  D000               	nop2	
  8399                           
  8400                           ;lcd.c: 43: LATDbits.LATD3 = 1;
  8401  002C18  868C               	bsf	3980,3,c	;volatile
  8402                           
  8403                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8404  002C1A  0E14               	movlw	20
  8405  002C1C                     u13117:
  8406  002C1C  2EE8               	decfsz	wreg,f,c
  8407  002C1E  D7FE               	bra	u13117
  8408  002C20  D000               	nop2	
  8409                           
  8410                           ;lcd.c: 46: data = data << 4;
  8411  002C22  0100               	movlb	0	; () banked
  8412  002C24  3981               	swapf	lcdNibble@data& (0+255),w,b
  8413  002C26  0BF0               	andlw	240
  8414  002C28  0100               	movlb	0	; () banked
  8415  002C2A  6F81               	movwf	lcdNibble@data& (0+255),b
  8416                           
  8417                           ;lcd.c: 48: temp = data & 0xF0;
  8418  002C2C  0100               	movlb	0	; () banked
  8419  002C2E  5181               	movf	lcdNibble@data& (0+255),w,b
  8420  002C30  0BF0               	andlw	240
  8421  002C32  0100               	movlb	0	; () banked
  8422  002C34  6F80               	movwf	lcdNibble@temp& (0+255),b
  8423                           
  8424                           ;lcd.c: 49: LATD = LATD & 0x0F;
  8425  002C36  508C               	movf	3980,w,c	;volatile
  8426  002C38  0B0F               	andlw	15
  8427  002C3A  6E8C               	movwf	3980,c	;volatile
  8428                           
  8429                           ;lcd.c: 50: LATD = temp | LATD;
  8430  002C3C  0100               	movlb	0	; () banked
  8431  002C3E  5180               	movf	lcdNibble@temp& (0+255),w,b
  8432  002C40  108C               	iorwf	3980,w,c	;volatile
  8433  002C42  6E8C               	movwf	3980,c	;volatile
  8434                           
  8435                           ; BSR set to: 0
  8436                           ;lcd.c: 52: LATDbits.LATD3 = 0;
  8437  002C44  968C               	bcf	3980,3,c	;volatile
  8438                           
  8439                           ; BSR set to: 0
  8440                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8441  002C46  0E14               	movlw	20
  8442  002C48                     u13127:
  8443  002C48  2EE8               	decfsz	wreg,f,c
  8444  002C4A  D7FE               	bra	u13127
  8445  002C4C  D000               	nop2	
  8446                           
  8447                           ;lcd.c: 54: LATDbits.LATD3 = 1;
  8448  002C4E  868C               	bsf	3980,3,c	;volatile
  8449                           
  8450                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
  8451  002C50  0E14               	movlw	20
  8452  002C52                     u13137:
  8453  002C52  2EE8               	decfsz	wreg,f,c
  8454  002C54  D7FE               	bra	u13137
  8455  002C56  D000               	nop2	
  8456  002C58  0012               	return		;funcret
  8457  002C5A                     __end_of_lcdNibble:
  8458                           	opt stack 0
  8459                           tosu	equ	0xFFF
  8460                           tosh	equ	0xFFE
  8461                           tosl	equ	0xFFD
  8462                           pclath	equ	0xFFA
  8463                           tblptru	equ	0xFF8
  8464                           tblptrh	equ	0xFF7
  8465                           tblptrl	equ	0xFF6
  8466                           tablat	equ	0xFF5
  8467                           prodh	equ	0xFF4
  8468                           prodl	equ	0xFF3
  8469                           intcon	equ	0xFF2
  8470                           intcon2	equ	0xFF1
  8471                           intcon3	equ	0xFF0
  8472                           indf0	equ	0xFEF
  8473                           postinc0	equ	0xFEE
  8474                           fsr0h	equ	0xFEA
  8475                           fsr0l	equ	0xFE9
  8476                           wreg	equ	0xFE8
  8477                           indf1	equ	0xFE7
  8478                           postinc1	equ	0xFE6
  8479                           postdec1	equ	0xFE5
  8480                           fsr1h	equ	0xFE2
  8481                           fsr1l	equ	0xFE1
  8482                           indf2	equ	0xFDF
  8483                           postinc2	equ	0xFDE
  8484                           postdec2	equ	0xFDD
  8485                           fsr2h	equ	0xFDA
  8486                           fsr2l	equ	0xFD9
  8487                           status	equ	0xFD8
  8488                           
  8489 ;; *************** function _I2C_Master_Init *****************
  8490 ;; Defined at:
  8491 ;;		line 13 in file "I2C.c"
  8492 ;; Parameters:    Size  Location     Type
  8493 ;;  c               4   13[BANK0 ] const unsigned long 
  8494 ;; Auto vars:     Size  Location     Type
  8495 ;;		None
  8496 ;; Return value:  Size  Location     Type
  8497 ;;                  1    wreg      void 
  8498 ;; Registers used:
  8499 ;;		wreg, status,2, status,0, cstack
  8500 ;; Tracked objects:
  8501 ;;		On entry : 0/0
  8502 ;;		On exit  : 0/0
  8503 ;;		Unchanged: 0/0
  8504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8505 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8506 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8507 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8508 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8509 ;;Total ram usage:        8 bytes
  8510 ;; Hardware stack levels used:    1
  8511 ;; Hardware stack levels required when called:    6
  8512 ;; This function calls:
  8513 ;;		___lldiv
  8514 ;; This function is called by:
  8515 ;;		_main
  8516 ;; This function uses a non-reentrant model
  8517 ;;
  8518                           
  8519                           	psect	text29
  8520  002D1E                     __ptext29:
  8521                           	opt stack 0
  8522  002D1E                     _I2C_Master_Init:
  8523                           	opt stack 24
  8524                           
  8525                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  8526                           
  8527                           ;incstack = 0
  8528  002D1E  0E00               	movlw	0
  8529  002D20  6EC7               	movwf	4039,c	;volatile
  8530                           
  8531                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  8532  002D22  0E28               	movlw	40
  8533  002D24  6EC6               	movwf	4038,c	;volatile
  8534                           
  8535                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  8536  002D26  0E00               	movlw	0
  8537  002D28  6EC5               	movwf	4037,c	;volatile
  8538                           
  8539                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  8540  002D2A  0E80               	movlw	128
  8541  002D2C  0100               	movlb	0	; () banked
  8542  002D2E  6F80               	movwf	___lldiv@dividend& (0+255),b
  8543  002D30  0E96               	movlw	150
  8544  002D32  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
  8545  002D34  0E98               	movlw	152
  8546  002D36  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
  8547  002D38  0E00               	movlw	0
  8548  002D3A  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
  8549  002D3C  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  8550  002D40  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  8551  002D44  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  8552  002D48  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  8553  002D4C  0E02               	movlw	2
  8554  002D4E                     u6935:
  8555  002D4E  90D8               	bcf	status,0,c
  8556  002D50  0100               	movlb	0	; () banked
  8557  002D52  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
  8558  002D54  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  8559  002D56  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  8560  002D58  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  8561  002D5A  2EE8               	decfsz	wreg,f,c
  8562  002D5C  D7F8               	goto	u6935
  8563  002D5E  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
  8564  002D62  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  8565  002D66  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  8566  002D6A  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  8567  002D6E  EC57  F014         	call	___lldiv	;wreg free
  8568  002D72  0100               	movlb	0	; () banked
  8569  002D74  0580               	decf	?___lldiv& (0+255),w,b
  8570  002D76  6EC8               	movwf	4040,c	;volatile
  8571                           
  8572                           ; BSR set to: 0
  8573                           ;I2C.c: 20: TRISC3 = 1;
  8574  002D78  8694               	bsf	3988,3,c	;volatile
  8575                           
  8576                           ; BSR set to: 0
  8577                           ;I2C.c: 21: TRISC4 = 1;
  8578  002D7A  8894               	bsf	3988,4,c	;volatile
  8579                           
  8580                           ; BSR set to: 0
  8581  002D7C  0012               	return		;funcret
  8582  002D7E                     __end_of_I2C_Master_Init:
  8583                           	opt stack 0
  8584                           tosu	equ	0xFFF
  8585                           tosh	equ	0xFFE
  8586                           tosl	equ	0xFFD
  8587                           pclath	equ	0xFFA
  8588                           tblptru	equ	0xFF8
  8589                           tblptrh	equ	0xFF7
  8590                           tblptrl	equ	0xFF6
  8591                           tablat	equ	0xFF5
  8592                           prodh	equ	0xFF4
  8593                           prodl	equ	0xFF3
  8594                           intcon	equ	0xFF2
  8595                           intcon2	equ	0xFF1
  8596                           intcon3	equ	0xFF0
  8597                           indf0	equ	0xFEF
  8598                           postinc0	equ	0xFEE
  8599                           fsr0h	equ	0xFEA
  8600                           fsr0l	equ	0xFE9
  8601                           wreg	equ	0xFE8
  8602                           indf1	equ	0xFE7
  8603                           postinc1	equ	0xFE6
  8604                           postdec1	equ	0xFE5
  8605                           fsr1h	equ	0xFE2
  8606                           fsr1l	equ	0xFE1
  8607                           indf2	equ	0xFDF
  8608                           postinc2	equ	0xFDE
  8609                           postdec2	equ	0xFDD
  8610                           fsr2h	equ	0xFDA
  8611                           fsr2l	equ	0xFD9
  8612                           status	equ	0xFD8
  8613                           
  8614 ;; *************** function ___lldiv *****************
  8615 ;; Defined at:
  8616 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  8617 ;; Parameters:    Size  Location     Type
  8618 ;;  dividend        4    0[BANK0 ] unsigned long 
  8619 ;;  divisor         4    4[BANK0 ] unsigned long 
  8620 ;; Auto vars:     Size  Location     Type
  8621 ;;  quotient        4    8[BANK0 ] unsigned long 
  8622 ;;  counter         1   12[BANK0 ] unsigned char 
  8623 ;; Return value:  Size  Location     Type
  8624 ;;                  4    0[BANK0 ] unsigned long 
  8625 ;; Registers used:
  8626 ;;		wreg, status,2, status,0
  8627 ;; Tracked objects:
  8628 ;;		On entry : 0/0
  8629 ;;		On exit  : 0/0
  8630 ;;		Unchanged: 0/0
  8631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8632 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8633 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8635 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8636 ;;Total ram usage:       13 bytes
  8637 ;; Hardware stack levels used:    1
  8638 ;; Hardware stack levels required when called:    5
  8639 ;; This function calls:
  8640 ;;		Nothing
  8641 ;; This function is called by:
  8642 ;;		_I2C_Master_Init
  8643 ;; This function uses a non-reentrant model
  8644 ;;
  8645                           
  8646                           	psect	text30
  8647  0028AE                     __ptext30:
  8648                           	opt stack 0
  8649  0028AE                     ___lldiv:
  8650                           	opt stack 24
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;incstack = 0
  8654  0028AE  0E00               	movlw	0
  8655  0028B0  0100               	movlb	0	; () banked
  8656  0028B2  6F88               	movwf	___lldiv@quotient& (0+255),b
  8657  0028B4  0E00               	movlw	0
  8658  0028B6  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
  8659  0028B8  0E00               	movlw	0
  8660  0028BA  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
  8661  0028BC  0E00               	movlw	0
  8662  0028BE  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
  8663                           
  8664                           ; BSR set to: 0
  8665  0028C0  0100               	movlb	0	; () banked
  8666  0028C2  5184               	movf	___lldiv@divisor& (0+255),w,b
  8667  0028C4  0100               	movlb	0	; () banked
  8668  0028C6  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  8669  0028C8  0100               	movlb	0	; () banked
  8670  0028CA  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  8671  0028CC  0100               	movlb	0	; () banked
  8672  0028CE  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  8673  0028D0  B4D8               	btfsc	status,2,c
  8674  0028D2  D042               	goto	l914
  8675                           
  8676                           ; BSR set to: 0
  8677  0028D4  0E01               	movlw	1
  8678  0028D6  0100               	movlb	0	; () banked
  8679  0028D8  6F8C               	movwf	___lldiv@counter& (0+255),b
  8680  0028DA  D008               	goto	l4832
  8681  0028DC                     l4830:
  8682                           
  8683                           ; BSR set to: 0
  8684  0028DC  0100               	movlb	0	; () banked
  8685  0028DE  90D8               	bcf	status,0,c
  8686  0028E0  3784               	rlcf	___lldiv@divisor& (0+255),f,b
  8687  0028E2  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  8688  0028E4  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  8689  0028E6  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  8690  0028E8  0100               	movlb	0	; () banked
  8691  0028EA  2B8C               	incf	___lldiv@counter& (0+255),f,b
  8692  0028EC                     l4832:
  8693                           
  8694                           ; BSR set to: 0
  8695  0028EC  0100               	movlb	0	; () banked
  8696  0028EE  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  8697  0028F0  D7F5               	goto	l4830
  8698  0028F2                     l4834:
  8699                           
  8700                           ; BSR set to: 0
  8701  0028F2  0100               	movlb	0	; () banked
  8702  0028F4  90D8               	bcf	status,0,c
  8703  0028F6  3788               	rlcf	___lldiv@quotient& (0+255),f,b
  8704  0028F8  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  8705  0028FA  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  8706  0028FC  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  8707                           
  8708                           ; BSR set to: 0
  8709  0028FE  0100               	movlb	0	; () banked
  8710  002900  5184               	movf	___lldiv@divisor& (0+255),w,b
  8711  002902  0100               	movlb	0	; () banked
  8712  002904  5D80               	subwf	___lldiv@dividend& (0+255),w,b
  8713  002906  0100               	movlb	0	; () banked
  8714  002908  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8715  00290A  0100               	movlb	0	; () banked
  8716  00290C  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  8717  00290E  0100               	movlb	0	; () banked
  8718  002910  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8719  002912  0100               	movlb	0	; () banked
  8720  002914  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  8721  002916  0100               	movlb	0	; () banked
  8722  002918  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8723  00291A  0100               	movlb	0	; () banked
  8724  00291C  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  8725  00291E  A0D8               	btfss	status,0,c
  8726  002920  D012               	goto	l4842
  8727                           
  8728                           ; BSR set to: 0
  8729  002922  0100               	movlb	0	; () banked
  8730  002924  5184               	movf	___lldiv@divisor& (0+255),w,b
  8731  002926  0100               	movlb	0	; () banked
  8732  002928  5F80               	subwf	___lldiv@dividend& (0+255),f,b
  8733  00292A  0100               	movlb	0	; () banked
  8734  00292C  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
  8735  00292E  0100               	movlb	0	; () banked
  8736  002930  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  8737  002932  0100               	movlb	0	; () banked
  8738  002934  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
  8739  002936  0100               	movlb	0	; () banked
  8740  002938  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  8741  00293A  0100               	movlb	0	; () banked
  8742  00293C  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
  8743  00293E  0100               	movlb	0	; () banked
  8744  002940  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  8745                           
  8746                           ; BSR set to: 0
  8747  002942  0100               	movlb	0	; () banked
  8748  002944  8188               	bsf	___lldiv@quotient& (0+255),0,b
  8749  002946                     l4842:
  8750                           
  8751                           ; BSR set to: 0
  8752  002946  0100               	movlb	0	; () banked
  8753  002948  90D8               	bcf	status,0,c
  8754  00294A  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  8755  00294C  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  8756  00294E  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  8757  002950  3384               	rrcf	___lldiv@divisor& (0+255),f,b
  8758                           
  8759                           ; BSR set to: 0
  8760  002952  0100               	movlb	0	; () banked
  8761  002954  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
  8762  002956  D7CD               	goto	l4834
  8763  002958                     l914:
  8764                           
  8765                           ; BSR set to: 0
  8766  002958  C088  F080         	movff	___lldiv@quotient,?___lldiv
  8767  00295C  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
  8768  002960  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
  8769  002964  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
  8770                           
  8771                           ; BSR set to: 0
  8772  002968  0012               	return		;funcret
  8773  00296A                     __end_of___lldiv:
  8774                           	opt stack 0
  8775                           tosu	equ	0xFFF
  8776                           tosh	equ	0xFFE
  8777                           tosl	equ	0xFFD
  8778                           pclath	equ	0xFFA
  8779                           tblptru	equ	0xFF8
  8780                           tblptrh	equ	0xFF7
  8781                           tblptrl	equ	0xFF6
  8782                           tablat	equ	0xFF5
  8783                           prodh	equ	0xFF4
  8784                           prodl	equ	0xFF3
  8785                           intcon	equ	0xFF2
  8786                           intcon2	equ	0xFF1
  8787                           intcon3	equ	0xFF0
  8788                           indf0	equ	0xFEF
  8789                           postinc0	equ	0xFEE
  8790                           fsr0h	equ	0xFEA
  8791                           fsr0l	equ	0xFE9
  8792                           wreg	equ	0xFE8
  8793                           indf1	equ	0xFE7
  8794                           postinc1	equ	0xFE6
  8795                           postdec1	equ	0xFE5
  8796                           fsr1h	equ	0xFE2
  8797                           fsr1l	equ	0xFE1
  8798                           indf2	equ	0xFDF
  8799                           postinc2	equ	0xFDE
  8800                           postdec2	equ	0xFDD
  8801                           fsr2h	equ	0xFDA
  8802                           fsr2l	equ	0xFD9
  8803                           status	equ	0xFD8
  8804                           
  8805 ;; *************** function _keypressed *****************
  8806 ;; Defined at:
  8807 ;;		line 298 in file "main.c"
  8808 ;; Parameters:    Size  Location     Type
  8809 ;;		None
  8810 ;; Auto vars:     Size  Location     Type
  8811 ;;  i               2   58[COMRAM] int 
  8812 ;;  keypress        1   60[COMRAM] unsigned char 
  8813 ;; Return value:  Size  Location     Type
  8814 ;;                  1    wreg      void 
  8815 ;; Registers used:
  8816 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  8817 ;; Tracked objects:
  8818 ;;		On entry : 0/0
  8819 ;;		On exit  : 0/0
  8820 ;;		Unchanged: 0/0
  8821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8822 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8823 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8824 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8825 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8826 ;;Total ram usage:       19 bytes
  8827 ;; Hardware stack levels used:    1
  8828 ;; Hardware stack levels required when called:    4
  8829 ;; This function calls:
  8830 ;;		i2___awmod
  8831 ;;		i2_lcdInst
  8832 ;;		i2_printf
  8833 ;; This function is called by:
  8834 ;;		Interrupt level 2
  8835 ;; This function uses a non-reentrant model
  8836 ;;
  8837                           
  8838                           	psect	intcode
  8839  000008                     __pintcode:
  8840                           	opt stack 0
  8841  000008                     _keypressed:
  8842                           	opt stack 20
  8843                           
  8844                           ; BSR set to: 0
  8845                           ;incstack = 0
  8846  000008  8277               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8847  00000A  EDF7  F008         	call	int_func,f	;refresh shadow registers
  8848                           tosu	equ	0xFFF
  8849                           tosh	equ	0xFFE
  8850                           tosl	equ	0xFFD
  8851                           pclath	equ	0xFFA
  8852                           tblptru	equ	0xFF8
  8853                           tblptrh	equ	0xFF7
  8854                           tblptrl	equ	0xFF6
  8855                           tablat	equ	0xFF5
  8856                           prodh	equ	0xFF4
  8857                           prodl	equ	0xFF3
  8858                           intcon	equ	0xFF2
  8859                           intcon2	equ	0xFF1
  8860                           intcon3	equ	0xFF0
  8861                           indf0	equ	0xFEF
  8862                           postinc0	equ	0xFEE
  8863                           fsr0h	equ	0xFEA
  8864                           fsr0l	equ	0xFE9
  8865                           wreg	equ	0xFE8
  8866                           indf1	equ	0xFE7
  8867                           postinc1	equ	0xFE6
  8868                           postdec1	equ	0xFE5
  8869                           fsr1h	equ	0xFE2
  8870                           fsr1l	equ	0xFE1
  8871                           indf2	equ	0xFDF
  8872                           postinc2	equ	0xFDE
  8873                           postdec2	equ	0xFDD
  8874                           fsr2h	equ	0xFDA
  8875                           fsr2l	equ	0xFD9
  8876                           status	equ	0xFD8
  8877                           
  8878                           	psect	intcode_body
  8879  0011EE                     __pintcode_body:
  8880                           	opt stack 20
  8881  0011EE                     int_func:
  8882                           	opt stack 20
  8883  0011EE  0006               	pop		; remove dummy address from shadow register refresh
  8884  0011F0  CFFA F02D          	movff	pclath,??_keypressed+2
  8885  0011F4  CFFB F02E          	movff	pclatu,??_keypressed+3
  8886  0011F8  CFE9 F02F          	movff	fsr0l,??_keypressed+4
  8887  0011FC  CFEA F030          	movff	fsr0h,??_keypressed+5
  8888  001200  CFE1 F031          	movff	fsr1l,??_keypressed+6
  8889  001204  CFE2 F032          	movff	fsr1h,??_keypressed+7
  8890  001208  CFD9 F033          	movff	fsr2l,??_keypressed+8
  8891  00120C  CFDA F034          	movff	fsr2h,??_keypressed+9
  8892  001210  CFF3 F035          	movff	prodl,??_keypressed+10
  8893  001214  CFF4 F036          	movff	prodh,??_keypressed+11
  8894  001218  CFF6 F037          	movff	tblptrl,??_keypressed+12
  8895  00121C  CFF7 F038          	movff	tblptrh,??_keypressed+13
  8896  001220  CFF8 F039          	movff	tblptru,??_keypressed+14
  8897  001224  CFF5 F03A          	movff	tablat,??_keypressed+15
  8898                           
  8899                           ;main.c: 300: if(INT1IF){
  8900  001228  A0F0               	btfss	intcon3,0,c	;volatile
  8901  00122A  D2A9               	goto	i2l375
  8902                           
  8903                           ;main.c: 301: int i;
  8904                           ;main.c: 302: unsigned char keypress = (PORTB & 0xF0) >> 4;
  8905  00122C  3881               	swapf	3969,w,c	;volatile
  8906  00122E  0B0F               	andlw	15
  8907  001230  0B0F               	andlw	15
  8908  001232  6E3D               	movwf	keypressed@keypress,c
  8909                           
  8910                           ;main.c: 303: switch(state)
  8911  001234  D28E               	goto	i2l8252
  8912  001236                     i2l8098:
  8913                           
  8914                           ;main.c: 305: for (i=0;i<7;i++)
  8915  001236  0E00               	movlw	0
  8916  001238  6E3C               	movwf	keypressed@i+1,c
  8917  00123A  0E00               	movlw	0
  8918  00123C  6E3B               	movwf	keypressed@i,c
  8919  00123E                     i2l8100:
  8920  00123E  BE3C               	btfsc	keypressed@i+1,7,c
  8921  001240  D006               	goto	i2l8104
  8922  001242  503C               	movf	keypressed@i+1,w,c
  8923  001244  E11D               	bnz	i2l8110
  8924  001246  0E07               	movlw	7
  8925  001248  5C3B               	subwf	keypressed@i,w,c
  8926  00124A  B0D8               	btfsc	status,0,c
  8927  00124C  D019               	goto	i2l8110
  8928  00124E                     i2l8104:
  8929                           
  8930                           ;main.c: 306: startTime[i]=time_i[i];
  8931  00124E  90D8               	bcf	status,0,c
  8932  001250  343B               	rlcf	keypressed@i,w,c
  8933  001252  6ED9               	movwf	fsr2l,c
  8934  001254  343C               	rlcf	keypressed@i+1,w,c
  8935  001256  6EDA               	movwf	fsr2h,c
  8936  001258  0E3E               	movlw	low _time_i
  8937  00125A  26D9               	addwf	fsr2l,f,c
  8938  00125C  0E00               	movlw	high _time_i
  8939  00125E  22DA               	addwfc	fsr2h,f,c
  8940  001260  90D8               	bcf	status,0,c
  8941  001262  343B               	rlcf	keypressed@i,w,c
  8942  001264  6EE1               	movwf	fsr1l,c
  8943  001266  343C               	rlcf	keypressed@i+1,w,c
  8944  001268  6EE2               	movwf	fsr1h,c
  8945  00126A  0E0E               	movlw	low _startTime
  8946  00126C  26E1               	addwf	fsr1l,f,c
  8947  00126E  0E01               	movlw	high _startTime
  8948  001270  22E2               	addwfc	fsr1h,f,c
  8949  001272  CFDE FFE6          	movff	postinc2,postinc1
  8950  001276  CFDD FFE5          	movff	postdec2,postdec1
  8951  00127A  4A3B               	infsnz	keypressed@i,f,c
  8952  00127C  2A3C               	incf	keypressed@i+1,f,c
  8953  00127E  D7DF               	goto	i2l8100
  8954  001280                     i2l8110:
  8955                           
  8956                           ;main.c: 307: if (keys[keypress]=='B'&&menuIndex<menuSize)
  8957  001280  503D               	movf	keypressed@keypress,w,c
  8958  001282  0D01               	mullw	1
  8959  001284  0ED5               	movlw	low _keys
  8960  001286  24F3               	addwf	prodl,w,c
  8961  001288  6EF6               	movwf	tblptrl,c
  8962  00128A  0EFE               	movlw	high _keys
  8963  00128C  20F4               	addwfc	prodh,w,c
  8964  00128E  6EF7               	movwf	tblptrh,c
  8965  001290                     	if	1	;There are 3 active tblptr bytes
  8966  001290  6AF8               	clrf	tblptru,c
  8967  001292  0E00               	movlw	low (__mediumconst shr (0+16))
  8968  001294  22F8               	addwfc	tblptru,f,c
  8969  001296                     	endif
  8970  001296  0008               	tblrd		*
  8971  001298  50F5               	movf	tablat,w,c
  8972  00129A  0A42               	xorlw	66
  8973  00129C  A4D8               	btfss	status,2,c
  8974  00129E  D012               	goto	i2l8116
  8975  0012A0  0100               	movlb	0	; () banked
  8976  0012A2  51F8               	movf	_menuSize& (0+255),w,b
  8977  0012A4  0100               	movlb	0	; () banked
  8978  0012A6  5DF6               	subwf	_menuIndex& (0+255),w,b
  8979  0012A8  0100               	movlb	0	; () banked
  8980  0012AA  51F7               	movf	(_menuIndex+1)& (0+255),w,b
  8981  0012AC  0A80               	xorlw	128
  8982  0012AE  6E2B               	movwf	??_keypressed& (0+255),c
  8983  0012B0  0100               	movlb	0	; () banked
  8984  0012B2  51F9               	movf	(_menuSize+1)& (0+255),w,b
  8985  0012B4  0A80               	xorlw	128
  8986  0012B6  582B               	subwfb	??_keypressed& (0+255),w,c
  8987  0012B8  B0D8               	btfsc	status,0,c
  8988  0012BA  D004               	goto	i2l8116
  8989                           
  8990                           ; BSR set to: 0
  8991                           ;main.c: 308: menuIndex++;
  8992  0012BC  0100               	movlb	0	; () banked
  8993  0012BE  4BF6               	infsnz	_menuIndex& (0+255),f,b
  8994  0012C0  2BF7               	incf	(_menuIndex+1)& (0+255),f,b
  8995  0012C2  D25C               	goto	i2l338
  8996  0012C4                     i2l8116:
  8997                           
  8998                           ;main.c: 309: else if (keys[keypress]=='A'&&menuIndex>1)
  8999  0012C4  503D               	movf	keypressed@keypress,w,c
  9000  0012C6  0D01               	mullw	1
  9001  0012C8  0ED5               	movlw	low _keys
  9002  0012CA  24F3               	addwf	prodl,w,c
  9003  0012CC  6EF6               	movwf	tblptrl,c
  9004  0012CE  0EFE               	movlw	high _keys
  9005  0012D0  20F4               	addwfc	prodh,w,c
  9006  0012D2  6EF7               	movwf	tblptrh,c
  9007  0012D4                     	if	1	;There are 3 active tblptr bytes
  9008  0012D4  6AF8               	clrf	tblptru,c
  9009  0012D6  0E00               	movlw	low (__mediumconst shr (0+16))
  9010  0012D8  22F8               	addwfc	tblptru,f,c
  9011  0012DA                     	endif
  9012  0012DA  0008               	tblrd		*
  9013  0012DC  50F5               	movf	tablat,w,c
  9014  0012DE  0A41               	xorlw	65
  9015  0012E0  A4D8               	btfss	status,2,c
  9016  0012E2  D010               	goto	i2l8122
  9017  0012E4  0100               	movlb	0	; () banked
  9018  0012E6  BFF7               	btfsc	(_menuIndex+1)& (0+255),7,b
  9019  0012E8  D00D               	goto	i2l8122
  9020  0012EA  0100               	movlb	0	; () banked
  9021  0012EC  51F7               	movf	(_menuIndex+1)& (0+255),w,b
  9022  0012EE  E105               	bnz	i2u1278_40
  9023  0012F0  0E02               	movlw	2
  9024  0012F2  0100               	movlb	0	; () banked
  9025  0012F4  5DF6               	subwf	_menuIndex& (0+255),w,b
  9026  0012F6  A0D8               	btfss	status,0,c
  9027  0012F8  D005               	goto	i2l8122
  9028  0012FA                     i2u1278_40:
  9029                           
  9030                           ; BSR set to: 0
  9031                           ;main.c: 310: menuIndex--;
  9032  0012FA  0100               	movlb	0	; () banked
  9033  0012FC  07F6               	decf	_menuIndex& (0+255),f,b
  9034  0012FE  A0D8               	btfss	status,0,c
  9035  001300  07F7               	decf	(_menuIndex+1)& (0+255),f,b
  9036  001302  D23C               	goto	i2l338
  9037  001304                     i2l8122:
  9038                           
  9039                           ;main.c: 311: else if (keys[keypress]=='C'){
  9040  001304  503D               	movf	keypressed@keypress,w,c
  9041  001306  0D01               	mullw	1
  9042  001308  0ED5               	movlw	low _keys
  9043  00130A  24F3               	addwf	prodl,w,c
  9044  00130C  6EF6               	movwf	tblptrl,c
  9045  00130E  0EFE               	movlw	high _keys
  9046  001310  20F4               	addwfc	prodh,w,c
  9047  001312  6EF7               	movwf	tblptrh,c
  9048  001314                     	if	1	;There are 3 active tblptr bytes
  9049  001314  6AF8               	clrf	tblptru,c
  9050  001316  0E00               	movlw	low (__mediumconst shr (0+16))
  9051  001318  22F8               	addwfc	tblptru,f,c
  9052  00131A                     	endif
  9053  00131A  0008               	tblrd		*
  9054  00131C  50F5               	movf	tablat,w,c
  9055  00131E  0A43               	xorlw	67
  9056  001320  B4D8               	btfsc	status,2,c
  9057  001322  D01D               	goto	i2l8142
  9058  001324  D22B               	goto	i2l338
  9059  001326                     i2l8126:
  9060  001326  0E73               	movlw	115
  9061  001328  D20A               	goto	L7
  9062  00132A                     i2l8128:
  9063  00132A  0E6C               	movlw	108
  9064  00132C  D208               	goto	L7
  9065  00132E                     i2l8130:
  9066  00132E  0E63               	movlw	99
  9067  001330  D206               	goto	L7
  9068  001332                     i2l8132:
  9069                           
  9070                           ;main.c: 320: lcdInst(0b10000000);;
  9071  001332  0E80               	movlw	128
  9072  001334  ECBA  F018         	call	i2_lcdInst
  9073                           
  9074                           ;main.c: 321: printf("invalid");
  9075  001338  0EE4               	movlw	low STR_15
  9076  00133A  6E23               	movwf	i2printf@f,c
  9077  00133C  0EFF               	movlw	high STR_15
  9078  00133E  6E24               	movwf	i2printf@f+1,c
  9079  001340  ECED  F017         	call	i2_printf	;wreg free
  9080                           
  9081                           ;main.c: 322: lcdInst(0b11000000);;
  9082  001344  0EC0               	movlw	192
  9083  001346  ECBA  F018         	call	i2_lcdInst
  9084                           
  9085                           ;main.c: 323: printf("menu selection");
  9086  00134A  0EC7               	movlw	low STR_16
  9087  00134C  6E23               	movwf	i2printf@f,c
  9088  00134E  0EFF               	movlw	high STR_16
  9089  001350  6E24               	movwf	i2printf@f+1,c
  9090  001352  ECED  F017         	call	i2_printf	;wreg free
  9091                           
  9092                           ;main.c: 324: lcdInst(0b10010000);;
  9093  001356  0E90               	movlw	144
  9094  001358  ECBA  F018         	call	i2_lcdInst
  9095                           
  9096                           ;main.c: 326: }
  9097                           
  9098                           ;main.c: 325: break;
  9099  00135C  D20F               	goto	i2l338
  9100  00135E                     i2l8142:
  9101  00135E  C0F6  F02B         	movff	_menuIndex,??_keypressed
  9102  001362  C0F7  F02C         	movff	_menuIndex+1,??_keypressed+1
  9103                           
  9104                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  9105                           ; Switch size 1, requested type "space"
  9106                           ; Number of cases is 1, Range of values is 0 to 0
  9107                           ; switch strategies available:
  9108                           ; Name         Instructions Cycles
  9109                           ; simple_byte            4     3 (average)
  9110                           ;	Chosen strategy is simple_byte
  9111  001366  502C               	movf	??_keypressed+1,w,c
  9112  001368  0A00               	xorlw	0	; case 0
  9113  00136A  A4D8               	btfss	status,2,c
  9114  00136C  D7E2               	goto	i2l8132
  9115                           
  9116                           ; Switch size 1, requested type "space"
  9117                           ; Number of cases is 3, Range of values is 1 to 3
  9118                           ; switch strategies available:
  9119                           ; Name         Instructions Cycles
  9120                           ; simple_byte           10     6 (average)
  9121                           ;	Chosen strategy is simple_byte
  9122  00136E  502B               	movf	??_keypressed,w,c
  9123  001370  0A01               	xorlw	1	; case 1
  9124  001372  B4D8               	btfsc	status,2,c
  9125  001374  D7D8               	goto	i2l8126
  9126  001376  0A03               	xorlw	3	; case 2
  9127  001378  B4D8               	btfsc	status,2,c
  9128  00137A  D7D7               	goto	i2l8128
  9129  00137C  0A01               	xorlw	1	; case 3
  9130  00137E  B4D8               	btfsc	status,2,c
  9131  001380  D7D6               	goto	i2l8130
  9132  001382  D7D7               	goto	i2l8132
  9133  001384                     i2l8146:
  9134                           
  9135                           ; BSR set to: 0
  9136                           ;main.c: 334: for (i=0;i<7;i++)
  9137  001384  0E00               	movlw	0
  9138  001386  6E3C               	movwf	keypressed@i+1,c
  9139  001388  0E00               	movlw	0
  9140  00138A  6E3B               	movwf	keypressed@i,c
  9141  00138C                     i2l8148:
  9142                           
  9143                           ; BSR set to: 0
  9144  00138C  BE3C               	btfsc	keypressed@i+1,7,c
  9145  00138E  D006               	goto	i2l8152
  9146  001390  503C               	movf	keypressed@i+1,w,c
  9147  001392  E11D               	bnz	i2l8158
  9148  001394  0E07               	movlw	7
  9149  001396  5C3B               	subwf	keypressed@i,w,c
  9150  001398  B0D8               	btfsc	status,0,c
  9151  00139A  D019               	goto	i2l8158
  9152  00139C                     i2l8152:
  9153                           
  9154                           ;main.c: 335: startTime[i]=time_i[i];
  9155  00139C  90D8               	bcf	status,0,c
  9156  00139E  343B               	rlcf	keypressed@i,w,c
  9157  0013A0  6ED9               	movwf	fsr2l,c
  9158  0013A2  343C               	rlcf	keypressed@i+1,w,c
  9159  0013A4  6EDA               	movwf	fsr2h,c
  9160  0013A6  0E3E               	movlw	low _time_i
  9161  0013A8  26D9               	addwf	fsr2l,f,c
  9162  0013AA  0E00               	movlw	high _time_i
  9163  0013AC  22DA               	addwfc	fsr2h,f,c
  9164  0013AE  90D8               	bcf	status,0,c
  9165  0013B0  343B               	rlcf	keypressed@i,w,c
  9166  0013B2  6EE1               	movwf	fsr1l,c
  9167  0013B4  343C               	rlcf	keypressed@i+1,w,c
  9168  0013B6  6EE2               	movwf	fsr1h,c
  9169  0013B8  0E0E               	movlw	low _startTime
  9170  0013BA  26E1               	addwf	fsr1l,f,c
  9171  0013BC  0E01               	movlw	high _startTime
  9172  0013BE  22E2               	addwfc	fsr1h,f,c
  9173  0013C0  CFDE FFE6          	movff	postinc2,postinc1
  9174  0013C4  CFDD FFE5          	movff	postdec2,postdec1
  9175  0013C8  4A3B               	infsnz	keypressed@i,f,c
  9176  0013CA  2A3C               	incf	keypressed@i+1,f,c
  9177  0013CC  D7DF               	goto	i2l8148
  9178  0013CE                     i2l8158:
  9179                           
  9180                           ;main.c: 337: if (keys[keypress]=='B'&&logIndex<events){
  9181  0013CE  503D               	movf	keypressed@keypress,w,c
  9182  0013D0  0D01               	mullw	1
  9183  0013D2  0ED5               	movlw	low _keys
  9184  0013D4  24F3               	addwf	prodl,w,c
  9185  0013D6  6EF6               	movwf	tblptrl,c
  9186  0013D8  0EFE               	movlw	high _keys
  9187  0013DA  20F4               	addwfc	prodh,w,c
  9188  0013DC  6EF7               	movwf	tblptrh,c
  9189  0013DE                     	if	1	;There are 3 active tblptr bytes
  9190  0013DE  6AF8               	clrf	tblptru,c
  9191  0013E0  0E00               	movlw	low (__mediumconst shr (0+16))
  9192  0013E2  22F8               	addwfc	tblptru,f,c
  9193  0013E4                     	endif
  9194  0013E4  0008               	tblrd		*
  9195  0013E6  50F5               	movf	tablat,w,c
  9196  0013E8  0A42               	xorlw	66
  9197  0013EA  A4D8               	btfss	status,2,c
  9198  0013EC  D012               	goto	i2l8164
  9199  0013EE  0100               	movlb	0	; () banked
  9200  0013F0  51F2               	movf	_events& (0+255),w,b
  9201  0013F2  0100               	movlb	0	; () banked
  9202  0013F4  5DF4               	subwf	_logIndex& (0+255),w,b
  9203  0013F6  0100               	movlb	0	; () banked
  9204  0013F8  51F5               	movf	(_logIndex+1)& (0+255),w,b
  9205  0013FA  0A80               	xorlw	128
  9206  0013FC  6E2B               	movwf	??_keypressed& (0+255),c
  9207  0013FE  0100               	movlb	0	; () banked
  9208  001400  51F3               	movf	(_events+1)& (0+255),w,b
  9209  001402  0A80               	xorlw	128
  9210  001404  582B               	subwfb	??_keypressed& (0+255),w,c
  9211  001406  B0D8               	btfsc	status,0,c
  9212  001408  D004               	goto	i2l8164
  9213                           
  9214                           ; BSR set to: 0
  9215                           ;main.c: 341: logIndex++;
  9216  00140A  0100               	movlb	0	; () banked
  9217  00140C  4BF4               	infsnz	_logIndex& (0+255),f,b
  9218  00140E  2BF5               	incf	(_logIndex+1)& (0+255),f,b
  9219                           
  9220                           ;main.c: 342: }
  9221  001410  D1B5               	goto	i2l338
  9222  001412                     i2l8164:
  9223                           
  9224                           ;main.c: 343: else if (keys[keypress]=='A'&&logIndex>1)
  9225  001412  503D               	movf	keypressed@keypress,w,c
  9226  001414  0D01               	mullw	1
  9227  001416  0ED5               	movlw	low _keys
  9228  001418  24F3               	addwf	prodl,w,c
  9229  00141A  6EF6               	movwf	tblptrl,c
  9230  00141C  0EFE               	movlw	high _keys
  9231  00141E  20F4               	addwfc	prodh,w,c
  9232  001420  6EF7               	movwf	tblptrh,c
  9233  001422                     	if	1	;There are 3 active tblptr bytes
  9234  001422  6AF8               	clrf	tblptru,c
  9235  001424  0E00               	movlw	low (__mediumconst shr (0+16))
  9236  001426  22F8               	addwfc	tblptru,f,c
  9237  001428                     	endif
  9238  001428  0008               	tblrd		*
  9239  00142A  50F5               	movf	tablat,w,c
  9240  00142C  0A41               	xorlw	65
  9241  00142E  A4D8               	btfss	status,2,c
  9242  001430  D077               	goto	i2l8198
  9243  001432  0100               	movlb	0	; () banked
  9244  001434  BFF5               	btfsc	(_logIndex+1)& (0+255),7,b
  9245  001436  D074               	goto	i2l8198
  9246  001438  0100               	movlb	0	; () banked
  9247  00143A  51F5               	movf	(_logIndex+1)& (0+255),w,b
  9248  00143C  E105               	bnz	i2u1285_40
  9249  00143E  0E02               	movlw	2
  9250  001440  0100               	movlb	0	; () banked
  9251  001442  5DF4               	subwf	_logIndex& (0+255),w,b
  9252  001444  A0D8               	btfss	status,0,c
  9253  001446  D06C               	goto	i2l8198
  9254  001448                     i2u1285_40:
  9255                           
  9256                           ; BSR set to: 0
  9257                           ;main.c: 344: logIndex--;
  9258  001448  0100               	movlb	0	; () banked
  9259  00144A  07F4               	decf	_logIndex& (0+255),f,b
  9260  00144C  A0D8               	btfss	status,0,c
  9261  00144E  07F5               	decf	(_logIndex+1)& (0+255),f,b
  9262  001450  D195               	goto	i2l338
  9263  001452                     i2l8174:
  9264                           
  9265                           ; BSR set to: 0
  9266                           ;main.c: 349: for (i=0;i<7;i++)
  9267  001452  0E00               	movlw	0
  9268  001454  6E3C               	movwf	keypressed@i+1,c
  9269  001456  0E00               	movlw	0
  9270  001458  6E3B               	movwf	keypressed@i,c
  9271  00145A                     i2l8176:
  9272                           
  9273                           ; BSR set to: 0
  9274  00145A  BE3C               	btfsc	keypressed@i+1,7,c
  9275  00145C  D006               	goto	i2l8180
  9276  00145E  503C               	movf	keypressed@i+1,w,c
  9277  001460  E11D               	bnz	i2l8186
  9278  001462  0E07               	movlw	7
  9279  001464  5C3B               	subwf	keypressed@i,w,c
  9280  001466  B0D8               	btfsc	status,0,c
  9281  001468  D019               	goto	i2l8186
  9282  00146A                     i2l8180:
  9283                           
  9284                           ;main.c: 350: startTime[i]=time_i[i];
  9285  00146A  90D8               	bcf	status,0,c
  9286  00146C  343B               	rlcf	keypressed@i,w,c
  9287  00146E  6ED9               	movwf	fsr2l,c
  9288  001470  343C               	rlcf	keypressed@i+1,w,c
  9289  001472  6EDA               	movwf	fsr2h,c
  9290  001474  0E3E               	movlw	low _time_i
  9291  001476  26D9               	addwf	fsr2l,f,c
  9292  001478  0E00               	movlw	high _time_i
  9293  00147A  22DA               	addwfc	fsr2h,f,c
  9294  00147C  90D8               	bcf	status,0,c
  9295  00147E  343B               	rlcf	keypressed@i,w,c
  9296  001480  6EE1               	movwf	fsr1l,c
  9297  001482  343C               	rlcf	keypressed@i+1,w,c
  9298  001484  6EE2               	movwf	fsr1h,c
  9299  001486  0E0E               	movlw	low _startTime
  9300  001488  26E1               	addwf	fsr1l,f,c
  9301  00148A  0E01               	movlw	high _startTime
  9302  00148C  22E2               	addwfc	fsr1h,f,c
  9303  00148E  CFDE FFE6          	movff	postinc2,postinc1
  9304  001492  CFDD FFE5          	movff	postdec2,postdec1
  9305  001496  4A3B               	infsnz	keypressed@i,f,c
  9306  001498  2A3C               	incf	keypressed@i+1,f,c
  9307  00149A  D7DF               	goto	i2l8176
  9308  00149C                     i2l8186:
  9309                           
  9310                           ;main.c: 352: if (keys[keypress]=='B'&&creditIndex<creditSize)
  9311  00149C  503D               	movf	keypressed@keypress,w,c
  9312  00149E  0D01               	mullw	1
  9313  0014A0  0ED5               	movlw	low _keys
  9314  0014A2  24F3               	addwf	prodl,w,c
  9315  0014A4  6EF6               	movwf	tblptrl,c
  9316  0014A6  0EFE               	movlw	high _keys
  9317  0014A8  20F4               	addwfc	prodh,w,c
  9318  0014AA  6EF7               	movwf	tblptrh,c
  9319  0014AC                     	if	1	;There are 3 active tblptr bytes
  9320  0014AC  6AF8               	clrf	tblptru,c
  9321  0014AE  0E00               	movlw	low (__mediumconst shr (0+16))
  9322  0014B0  22F8               	addwfc	tblptru,f,c
  9323  0014B2                     	endif
  9324  0014B2  0008               	tblrd		*
  9325  0014B4  50F5               	movf	tablat,w,c
  9326  0014B6  0A42               	xorlw	66
  9327  0014B8  A4D8               	btfss	status,2,c
  9328  0014BA  D012               	goto	i2l8192
  9329  0014BC  0100               	movlb	0	; () banked
  9330  0014BE  51EC               	movf	_creditSize& (0+255),w,b
  9331  0014C0  0100               	movlb	0	; () banked
  9332  0014C2  5DEA               	subwf	_creditIndex& (0+255),w,b
  9333  0014C4  0100               	movlb	0	; () banked
  9334  0014C6  51EB               	movf	(_creditIndex+1)& (0+255),w,b
  9335  0014C8  0A80               	xorlw	128
  9336  0014CA  6E2B               	movwf	??_keypressed& (0+255),c
  9337  0014CC  0100               	movlb	0	; () banked
  9338  0014CE  51ED               	movf	(_creditSize+1)& (0+255),w,b
  9339  0014D0  0A80               	xorlw	128
  9340  0014D2  582B               	subwfb	??_keypressed& (0+255),w,c
  9341  0014D4  B0D8               	btfsc	status,0,c
  9342  0014D6  D004               	goto	i2l8192
  9343                           
  9344                           ; BSR set to: 0
  9345                           ;main.c: 353: creditIndex++;
  9346  0014D8  0100               	movlb	0	; () banked
  9347  0014DA  4BEA               	infsnz	_creditIndex& (0+255),f,b
  9348  0014DC  2BEB               	incf	(_creditIndex+1)& (0+255),f,b
  9349  0014DE  D14E               	goto	i2l338
  9350  0014E0                     i2l8192:
  9351                           
  9352                           ;main.c: 354: else if (keys[keypress]=='A'&&creditIndex>1)
  9353  0014E0  503D               	movf	keypressed@keypress,w,c
  9354  0014E2  0D01               	mullw	1
  9355  0014E4  0ED5               	movlw	low _keys
  9356  0014E6  24F3               	addwf	prodl,w,c
  9357  0014E8  6EF6               	movwf	tblptrl,c
  9358  0014EA  0EFE               	movlw	high _keys
  9359  0014EC  20F4               	addwfc	prodh,w,c
  9360  0014EE  6EF7               	movwf	tblptrh,c
  9361  0014F0                     	if	1	;There are 3 active tblptr bytes
  9362  0014F0  6AF8               	clrf	tblptru,c
  9363  0014F2  0E00               	movlw	low (__mediumconst shr (0+16))
  9364  0014F4  22F8               	addwfc	tblptru,f,c
  9365  0014F6                     	endif
  9366  0014F6  0008               	tblrd		*
  9367  0014F8  50F5               	movf	tablat,w,c
  9368  0014FA  0A41               	xorlw	65
  9369  0014FC  A4D8               	btfss	status,2,c
  9370  0014FE  D010               	goto	i2l8198
  9371  001500  0100               	movlb	0	; () banked
  9372  001502  BFEB               	btfsc	(_creditIndex+1)& (0+255),7,b
  9373  001504  D00D               	goto	i2l8198
  9374  001506  0100               	movlb	0	; () banked
  9375  001508  51EB               	movf	(_creditIndex+1)& (0+255),w,b
  9376  00150A  E105               	bnz	i2u1292_40
  9377  00150C  0E02               	movlw	2
  9378  00150E  0100               	movlb	0	; () banked
  9379  001510  5DEA               	subwf	_creditIndex& (0+255),w,b
  9380  001512  A0D8               	btfss	status,0,c
  9381  001514  D005               	goto	i2l8198
  9382  001516                     i2u1292_40:
  9383                           
  9384                           ; BSR set to: 0
  9385                           ;main.c: 355: creditIndex--;
  9386  001516  0100               	movlb	0	; () banked
  9387  001518  07EA               	decf	_creditIndex& (0+255),f,b
  9388  00151A  A0D8               	btfss	status,0,c
  9389  00151C  07EB               	decf	(_creditIndex+1)& (0+255),f,b
  9390  00151E  D12E               	goto	i2l338
  9391  001520                     i2l8198:
  9392                           
  9393                           ;main.c: 356: else if(keys[keypress]=='D')
  9394  001520  503D               	movf	keypressed@keypress,w,c
  9395  001522  0D01               	mullw	1
  9396  001524  0ED5               	movlw	low _keys
  9397  001526  24F3               	addwf	prodl,w,c
  9398  001528  6EF6               	movwf	tblptrl,c
  9399  00152A  0EFE               	movlw	high _keys
  9400  00152C  20F4               	addwfc	prodh,w,c
  9401  00152E  6EF7               	movwf	tblptrh,c
  9402  001530                     	if	1	;There are 3 active tblptr bytes
  9403  001530  6AF8               	clrf	tblptru,c
  9404  001532  0E00               	movlw	low (__mediumconst shr (0+16))
  9405  001534  22F8               	addwfc	tblptru,f,c
  9406  001536                     	endif
  9407  001536  0008               	tblrd		*
  9408  001538  50F5               	movf	tablat,w,c
  9409  00153A  0A44               	xorlw	68
  9410  00153C  A4D8               	btfss	status,2,c
  9411  00153E  D11E               	goto	i2l338
  9412  001540                     i2l8200:
  9413                           
  9414                           ;main.c: 357: nstate='m';
  9415  001540  0E6D               	movlw	109
  9416  001542  D0FD               	goto	L7
  9417  001544                     i2l8202:
  9418                           
  9419                           ; BSR set to: 0
  9420                           ;main.c: 360: if (keys[keypress]=='1'){
  9421  001544  503D               	movf	keypressed@keypress,w,c
  9422  001546  0D01               	mullw	1
  9423  001548  0ED5               	movlw	low _keys
  9424  00154A  24F3               	addwf	prodl,w,c
  9425  00154C  6EF6               	movwf	tblptrl,c
  9426  00154E  0EFE               	movlw	high _keys
  9427  001550  20F4               	addwfc	prodh,w,c
  9428  001552  6EF7               	movwf	tblptrh,c
  9429  001554                     	if	1	;There are 3 active tblptr bytes
  9430  001554  6AF8               	clrf	tblptru,c
  9431  001556  0E00               	movlw	low (__mediumconst shr (0+16))
  9432  001558  22F8               	addwfc	tblptru,f,c
  9433  00155A                     	endif
  9434  00155A  0008               	tblrd		*
  9435  00155C  50F5               	movf	tablat,w,c
  9436  00155E  0A31               	xorlw	49
  9437  001560  A4D8               	btfss	status,2,c
  9438  001562  D012               	goto	i2l8208
  9439                           
  9440                           ; BSR set to: 0
  9441                           ;main.c: 361: eskaNoCap++;
  9442  001564  0100               	movlb	0	; () banked
  9443  001566  4BD5               	infsnz	_eskaNoCap& (0+255),f,b
  9444  001568  2BD6               	incf	(_eskaNoCap+1)& (0+255),f,b
  9445                           
  9446                           ; BSR set to: 0
  9447                           ;main.c: 362: eskaNoCap%=100;
  9448  00156A  C0D5  F001         	movff	_eskaNoCap,i2___awmod@dividend
  9449  00156E  C0D6  F002         	movff	_eskaNoCap+1,i2___awmod@dividend+1
  9450  001572  0E00               	movlw	0
  9451  001574  6E04               	movwf	i2___awmod@divisor+1,c
  9452  001576  0E64               	movlw	100
  9453  001578  6E03               	movwf	i2___awmod@divisor,c
  9454  00157A  EC8B  F015         	call	i2___awmod	;wreg free
  9455  00157E  C001  F0D5         	movff	?i2___awmod,_eskaNoCap
  9456  001582  C002  F0D6         	movff	?i2___awmod+1,_eskaNoCap+1
  9457                           
  9458                           ;main.c: 363: }
  9459  001586  D0FA               	goto	i2l338
  9460  001588                     i2l8208:
  9461                           
  9462                           ;main.c: 364: else if (keys[keypress]=='2'){
  9463  001588  503D               	movf	keypressed@keypress,w,c
  9464  00158A  0D01               	mullw	1
  9465  00158C  0ED5               	movlw	low _keys
  9466  00158E  24F3               	addwf	prodl,w,c
  9467  001590  6EF6               	movwf	tblptrl,c
  9468  001592  0EFE               	movlw	high _keys
  9469  001594  20F4               	addwfc	prodh,w,c
  9470  001596  6EF7               	movwf	tblptrh,c
  9471  001598                     	if	1	;There are 3 active tblptr bytes
  9472  001598  6AF8               	clrf	tblptru,c
  9473  00159A  0E00               	movlw	low (__mediumconst shr (0+16))
  9474  00159C  22F8               	addwfc	tblptru,f,c
  9475  00159E                     	endif
  9476  00159E  0008               	tblrd		*
  9477  0015A0  50F5               	movf	tablat,w,c
  9478  0015A2  0A32               	xorlw	50
  9479  0015A4  A4D8               	btfss	status,2,c
  9480  0015A6  D012               	goto	i2l8214
  9481                           
  9482                           ;main.c: 365: eskaWCap++;
  9483  0015A8  0100               	movlb	0	; () banked
  9484  0015AA  4BD7               	infsnz	_eskaWCap& (0+255),f,b
  9485  0015AC  2BD8               	incf	(_eskaWCap+1)& (0+255),f,b
  9486                           
  9487                           ; BSR set to: 0
  9488                           ;main.c: 366: eskaWCap%=100;
  9489  0015AE  C0D7  F001         	movff	_eskaWCap,i2___awmod@dividend
  9490  0015B2  C0D8  F002         	movff	_eskaWCap+1,i2___awmod@dividend+1
  9491  0015B6  0E00               	movlw	0
  9492  0015B8  6E04               	movwf	i2___awmod@divisor+1,c
  9493  0015BA  0E64               	movlw	100
  9494  0015BC  6E03               	movwf	i2___awmod@divisor,c
  9495  0015BE  EC8B  F015         	call	i2___awmod	;wreg free
  9496  0015C2  C001  F0D7         	movff	?i2___awmod,_eskaWCap
  9497  0015C6  C002  F0D8         	movff	?i2___awmod+1,_eskaWCap+1
  9498                           
  9499                           ;main.c: 367: }
  9500  0015CA  D0D8               	goto	i2l338
  9501  0015CC                     i2l8214:
  9502                           
  9503                           ;main.c: 368: else if (keys[keypress]=='4'){
  9504  0015CC  503D               	movf	keypressed@keypress,w,c
  9505  0015CE  0D01               	mullw	1
  9506  0015D0  0ED5               	movlw	low _keys
  9507  0015D2  24F3               	addwf	prodl,w,c
  9508  0015D4  6EF6               	movwf	tblptrl,c
  9509  0015D6  0EFE               	movlw	high _keys
  9510  0015D8  20F4               	addwfc	prodh,w,c
  9511  0015DA  6EF7               	movwf	tblptrh,c
  9512  0015DC                     	if	1	;There are 3 active tblptr bytes
  9513  0015DC  6AF8               	clrf	tblptru,c
  9514  0015DE  0E00               	movlw	low (__mediumconst shr (0+16))
  9515  0015E0  22F8               	addwfc	tblptru,f,c
  9516  0015E2                     	endif
  9517  0015E2  0008               	tblrd		*
  9518  0015E4  50F5               	movf	tablat,w,c
  9519  0015E6  0A34               	xorlw	52
  9520  0015E8  A4D8               	btfss	status,2,c
  9521  0015EA  D012               	goto	i2l8220
  9522                           
  9523                           ;main.c: 369: yopNoCap++;
  9524  0015EC  0100               	movlb	0	; () banked
  9525  0015EE  4BDF               	infsnz	_yopNoCap& (0+255),f,b
  9526  0015F0  2BE0               	incf	(_yopNoCap+1)& (0+255),f,b
  9527                           
  9528                           ; BSR set to: 0
  9529                           ;main.c: 370: yopNoCap%=100;
  9530  0015F2  C0DF  F001         	movff	_yopNoCap,i2___awmod@dividend
  9531  0015F6  C0E0  F002         	movff	_yopNoCap+1,i2___awmod@dividend+1
  9532  0015FA  0E00               	movlw	0
  9533  0015FC  6E04               	movwf	i2___awmod@divisor+1,c
  9534  0015FE  0E64               	movlw	100
  9535  001600  6E03               	movwf	i2___awmod@divisor,c
  9536  001602  EC8B  F015         	call	i2___awmod	;wreg free
  9537  001606  C001  F0DF         	movff	?i2___awmod,_yopNoCap
  9538  00160A  C002  F0E0         	movff	?i2___awmod+1,_yopNoCap+1
  9539                           
  9540                           ;main.c: 371: }
  9541  00160E  D0B6               	goto	i2l338
  9542  001610                     i2l8220:
  9543                           
  9544                           ;main.c: 372: else if (keys[keypress]=='5'){
  9545  001610  503D               	movf	keypressed@keypress,w,c
  9546  001612  0D01               	mullw	1
  9547  001614  0ED5               	movlw	low _keys
  9548  001616  24F3               	addwf	prodl,w,c
  9549  001618  6EF6               	movwf	tblptrl,c
  9550  00161A  0EFE               	movlw	high _keys
  9551  00161C  20F4               	addwfc	prodh,w,c
  9552  00161E  6EF7               	movwf	tblptrh,c
  9553  001620                     	if	1	;There are 3 active tblptr bytes
  9554  001620  6AF8               	clrf	tblptru,c
  9555  001622  0E00               	movlw	low (__mediumconst shr (0+16))
  9556  001624  22F8               	addwfc	tblptru,f,c
  9557  001626                     	endif
  9558  001626  0008               	tblrd		*
  9559  001628  50F5               	movf	tablat,w,c
  9560  00162A  0A35               	xorlw	53
  9561  00162C  A4D8               	btfss	status,2,c
  9562  00162E  D012               	goto	i2l8226
  9563                           
  9564                           ;main.c: 373: yopWCap++;
  9565  001630  0100               	movlb	0	; () banked
  9566  001632  4BE1               	infsnz	_yopWCap& (0+255),f,b
  9567  001634  2BE2               	incf	(_yopWCap+1)& (0+255),f,b
  9568                           
  9569                           ; BSR set to: 0
  9570                           ;main.c: 374: yopWCap%=100;
  9571  001636  C0E1  F001         	movff	_yopWCap,i2___awmod@dividend
  9572  00163A  C0E2  F002         	movff	_yopWCap+1,i2___awmod@dividend+1
  9573  00163E  0E00               	movlw	0
  9574  001640  6E04               	movwf	i2___awmod@divisor+1,c
  9575  001642  0E64               	movlw	100
  9576  001644  6E03               	movwf	i2___awmod@divisor,c
  9577  001646  EC8B  F015         	call	i2___awmod	;wreg free
  9578  00164A  C001  F0E1         	movff	?i2___awmod,_yopWCap
  9579  00164E  C002  F0E2         	movff	?i2___awmod+1,_yopWCap+1
  9580                           
  9581                           ;main.c: 375: }
  9582  001652  D094               	goto	i2l338
  9583  001654                     i2l8226:
  9584                           
  9585                           ;main.c: 376: else if (keys[keypress]=='7'||keys[keypress]=='8')
  9586  001654  503D               	movf	keypressed@keypress,w,c
  9587  001656  0D01               	mullw	1
  9588  001658  0ED5               	movlw	low _keys
  9589  00165A  24F3               	addwf	prodl,w,c
  9590  00165C  6EF6               	movwf	tblptrl,c
  9591  00165E  0EFE               	movlw	high _keys
  9592  001660  20F4               	addwfc	prodh,w,c
  9593  001662  6EF7               	movwf	tblptrh,c
  9594  001664                     	if	1	;There are 3 active tblptr bytes
  9595  001664  6AF8               	clrf	tblptru,c
  9596  001666  0E00               	movlw	low (__mediumconst shr (0+16))
  9597  001668  22F8               	addwfc	tblptru,f,c
  9598  00166A                     	endif
  9599  00166A  0008               	tblrd		*
  9600  00166C  50F5               	movf	tablat,w,c
  9601  00166E  0A37               	xorlw	55
  9602  001670  B4D8               	btfsc	status,2,c
  9603  001672  D010               	goto	i2l8230
  9604  001674  503D               	movf	keypressed@keypress,w,c
  9605  001676  0D01               	mullw	1
  9606  001678  0ED5               	movlw	low _keys
  9607  00167A  24F3               	addwf	prodl,w,c
  9608  00167C  6EF6               	movwf	tblptrl,c
  9609  00167E  0EFE               	movlw	high _keys
  9610  001680  20F4               	addwfc	prodh,w,c
  9611  001682  6EF7               	movwf	tblptrh,c
  9612  001684                     	if	1	;There are 3 active tblptr bytes
  9613  001684  6AF8               	clrf	tblptru,c
  9614  001686  0E00               	movlw	low (__mediumconst shr (0+16))
  9615  001688  22F8               	addwfc	tblptru,f,c
  9616  00168A                     	endif
  9617  00168A  0008               	tblrd		*
  9618  00168C  50F5               	movf	tablat,w,c
  9619  00168E  0A38               	xorlw	56
  9620  001690  A4D8               	btfss	status,2,c
  9621  001692  D074               	goto	i2l338
  9622  001694                     i2l8230:
  9623                           
  9624                           ;main.c: 377: nstate='e';
  9625  001694  0E65               	movlw	101
  9626  001696  D053               	goto	L7
  9627  001698                     i2l8232:
  9628                           
  9629                           ; BSR set to: 0
  9630                           ;main.c: 380: if (keys[keypress]=='B'&&endIndex<endSize)
  9631  001698  503D               	movf	keypressed@keypress,w,c
  9632  00169A  0D01               	mullw	1
  9633  00169C  0ED5               	movlw	low _keys
  9634  00169E  24F3               	addwf	prodl,w,c
  9635  0016A0  6EF6               	movwf	tblptrl,c
  9636  0016A2  0EFE               	movlw	high _keys
  9637  0016A4  20F4               	addwfc	prodh,w,c
  9638  0016A6  6EF7               	movwf	tblptrh,c
  9639  0016A8                     	if	1	;There are 3 active tblptr bytes
  9640  0016A8  6AF8               	clrf	tblptru,c
  9641  0016AA  0E00               	movlw	low (__mediumconst shr (0+16))
  9642  0016AC  22F8               	addwfc	tblptru,f,c
  9643  0016AE                     	endif
  9644  0016AE  0008               	tblrd		*
  9645  0016B0  50F5               	movf	tablat,w,c
  9646  0016B2  0A42               	xorlw	66
  9647  0016B4  A4D8               	btfss	status,2,c
  9648  0016B6  D012               	goto	i2l8238
  9649                           
  9650                           ; BSR set to: 0
  9651  0016B8  0100               	movlb	0	; () banked
  9652  0016BA  51F0               	movf	_endSize& (0+255),w,b
  9653  0016BC  0100               	movlb	0	; () banked
  9654  0016BE  5DEE               	subwf	_endIndex& (0+255),w,b
  9655  0016C0  0100               	movlb	0	; () banked
  9656  0016C2  51EF               	movf	(_endIndex+1)& (0+255),w,b
  9657  0016C4  0A80               	xorlw	128
  9658  0016C6  6E2B               	movwf	??_keypressed& (0+255),c
  9659  0016C8  0100               	movlb	0	; () banked
  9660  0016CA  51F1               	movf	(_endSize+1)& (0+255),w,b
  9661  0016CC  0A80               	xorlw	128
  9662  0016CE  582B               	subwfb	??_keypressed& (0+255),w,c
  9663  0016D0  B0D8               	btfsc	status,0,c
  9664  0016D2  D004               	goto	i2l8238
  9665                           
  9666                           ; BSR set to: 0
  9667                           ;main.c: 381: endIndex++;
  9668  0016D4  0100               	movlb	0	; () banked
  9669  0016D6  4BEE               	infsnz	_endIndex& (0+255),f,b
  9670  0016D8  2BEF               	incf	(_endIndex+1)& (0+255),f,b
  9671  0016DA  D050               	goto	i2l338
  9672  0016DC                     i2l8238:
  9673                           
  9674                           ; BSR set to: 0
  9675                           ;main.c: 382: else if (keys[keypress]=='A'&&endIndex>1)
  9676  0016DC  503D               	movf	keypressed@keypress,w,c
  9677  0016DE  0D01               	mullw	1
  9678  0016E0  0ED5               	movlw	low _keys
  9679  0016E2  24F3               	addwf	prodl,w,c
  9680  0016E4  6EF6               	movwf	tblptrl,c
  9681  0016E6  0EFE               	movlw	high _keys
  9682  0016E8  20F4               	addwfc	prodh,w,c
  9683  0016EA  6EF7               	movwf	tblptrh,c
  9684  0016EC                     	if	1	;There are 3 active tblptr bytes
  9685  0016EC  6AF8               	clrf	tblptru,c
  9686  0016EE  0E00               	movlw	low (__mediumconst shr (0+16))
  9687  0016F0  22F8               	addwfc	tblptru,f,c
  9688  0016F2                     	endif
  9689  0016F2  0008               	tblrd		*
  9690  0016F4  50F5               	movf	tablat,w,c
  9691  0016F6  0A41               	xorlw	65
  9692  0016F8  A4D8               	btfss	status,2,c
  9693  0016FA  D010               	goto	i2l8244
  9694                           
  9695                           ; BSR set to: 0
  9696  0016FC  0100               	movlb	0	; () banked
  9697  0016FE  BFEF               	btfsc	(_endIndex+1)& (0+255),7,b
  9698  001700  D00D               	goto	i2l8244
  9699  001702  0100               	movlb	0	; () banked
  9700  001704  51EF               	movf	(_endIndex+1)& (0+255),w,b
  9701  001706  E105               	bnz	i2u1303_40
  9702  001708  0E02               	movlw	2
  9703  00170A  0100               	movlb	0	; () banked
  9704  00170C  5DEE               	subwf	_endIndex& (0+255),w,b
  9705  00170E  A0D8               	btfss	status,0,c
  9706  001710  D005               	goto	i2l8244
  9707  001712                     i2u1303_40:
  9708                           
  9709                           ; BSR set to: 0
  9710                           ;main.c: 383: endIndex--;
  9711  001712  0100               	movlb	0	; () banked
  9712  001714  07EE               	decf	_endIndex& (0+255),f,b
  9713  001716  A0D8               	btfss	status,0,c
  9714  001718  07EF               	decf	(_endIndex+1)& (0+255),f,b
  9715  00171A  D030               	goto	i2l338
  9716  00171C                     i2l8244:
  9717                           
  9718                           ; BSR set to: 0
  9719                           ;main.c: 384: else if (keys[keypress]=='C')
  9720  00171C  503D               	movf	keypressed@keypress,w,c
  9721  00171E  0D01               	mullw	1
  9722  001720  0ED5               	movlw	low _keys
  9723  001722  24F3               	addwf	prodl,w,c
  9724  001724  6EF6               	movwf	tblptrl,c
  9725  001726  0EFE               	movlw	high _keys
  9726  001728  20F4               	addwfc	prodh,w,c
  9727  00172A  6EF7               	movwf	tblptrh,c
  9728  00172C                     	if	1	;There are 3 active tblptr bytes
  9729  00172C  6AF8               	clrf	tblptru,c
  9730  00172E  0E00               	movlw	low (__mediumconst shr (0+16))
  9731  001730  22F8               	addwfc	tblptru,f,c
  9732  001732                     	endif
  9733  001732  0008               	tblrd		*
  9734  001734  50F5               	movf	tablat,w,c
  9735  001736  0A43               	xorlw	67
  9736  001738  A4D8               	btfss	status,2,c
  9737  00173A  D020               	goto	i2l338
  9738                           
  9739                           ; BSR set to: 0
  9740                           ;main.c: 385: nstate='r';
  9741  00173C  0E72               	movlw	114
  9742  00173E                     L7:
  9743  00173E  0100               	movlb	0	; () banked
  9744  001740  6FE8               	movwf	_nstate& (0+255),b
  9745                           
  9746                           ; BSR set to: 0
  9747                           ;main.c: 386: break;
  9748                           
  9749                           ; BSR set to: 0
  9750                           
  9751                           ; BSR set to: 0
  9752  001742  D01C               	goto	i2l338
  9753  001744                     i2l8248:
  9754                           
  9755                           ; BSR set to: 0
  9756                           ;main.c: 388: printf("no page found");
  9757  001744  0ED6               	movlw	low STR_17
  9758  001746  6E23               	movwf	i2printf@f,c
  9759  001748  0EFF               	movlw	high STR_17
  9760  00174A  6E24               	movwf	i2printf@f+1,c
  9761  00174C  ECED  F017         	call	i2_printf	;wreg free
  9762                           
  9763                           ;main.c: 390: }
  9764                           
  9765                           ;main.c: 389: break;
  9766  001750  D015               	goto	i2l338
  9767  001752                     i2l8252:
  9768  001752  0100               	movlb	0	; () banked
  9769  001754  51E9               	movf	_state& (0+255),w,b
  9770                           
  9771                           ; Switch size 1, requested type "space"
  9772                           ; Number of cases is 6, Range of values is 99 to 115
  9773                           ; switch strategies available:
  9774                           ; Name         Instructions Cycles
  9775                           ; simple_byte           19    10 (average)
  9776                           ;	Chosen strategy is simple_byte
  9777  001756  0A63               	xorlw	99	; case 99
  9778  001758  B4D8               	btfsc	status,2,c
  9779  00175A  D67B               	goto	i2l8174
  9780  00175C  0A06               	xorlw	6	; case 101
  9781  00175E  B4D8               	btfsc	status,2,c
  9782  001760  D79B               	goto	i2l8232
  9783  001762  0A09               	xorlw	9	; case 108
  9784  001764  B4D8               	btfsc	status,2,c
  9785  001766  D60E               	goto	i2l8146
  9786  001768  0A01               	xorlw	1	; case 109
  9787  00176A  B4D8               	btfsc	status,2,c
  9788  00176C  D564               	goto	i2l8098
  9789  00176E  0A1F               	xorlw	31	; case 114
  9790  001770  B4D8               	btfsc	status,2,c
  9791  001772  D6E6               	goto	i2l8200
  9792  001774  0A01               	xorlw	1	; case 115
  9793  001776  B4D8               	btfsc	status,2,c
  9794  001778  D6E5               	goto	i2l8202
  9795  00177A  D7E4               	goto	i2l8248
  9796  00177C                     i2l338:
  9797                           
  9798                           ;main.c: 391: INT1IF = 0;
  9799  00177C  90F0               	bcf	intcon3,0,c	;volatile
  9800  00177E                     i2l375:
  9801  00177E  C03A  FFF5         	movff	??_keypressed+15,tablat
  9802  001782  C039  FFF8         	movff	??_keypressed+14,tblptru
  9803  001786  C038  FFF7         	movff	??_keypressed+13,tblptrh
  9804  00178A  C037  FFF6         	movff	??_keypressed+12,tblptrl
  9805  00178E  C036  FFF4         	movff	??_keypressed+11,prodh
  9806  001792  C035  FFF3         	movff	??_keypressed+10,prodl
  9807  001796  C034  FFDA         	movff	??_keypressed+9,fsr2h
  9808  00179A  C033  FFD9         	movff	??_keypressed+8,fsr2l
  9809  00179E  C032  FFE2         	movff	??_keypressed+7,fsr1h
  9810  0017A2  C031  FFE1         	movff	??_keypressed+6,fsr1l
  9811  0017A6  C030  FFEA         	movff	??_keypressed+5,fsr0h
  9812  0017AA  C02F  FFE9         	movff	??_keypressed+4,fsr0l
  9813  0017AE  C02E  FFFB         	movff	??_keypressed+3,pclatu
  9814  0017B2  C02D  FFFA         	movff	??_keypressed+2,pclath
  9815  0017B6  9277               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9816  0017B8  0011               	retfie		f
  9817  0017BA                     __end_of_keypressed:
  9818                           	opt stack 0
  9819                           tosu	equ	0xFFF
  9820                           tosh	equ	0xFFE
  9821                           tosl	equ	0xFFD
  9822                           pclatu	equ	0xFFB
  9823                           pclath	equ	0xFFA
  9824                           tblptru	equ	0xFF8
  9825                           tblptrh	equ	0xFF7
  9826                           tblptrl	equ	0xFF6
  9827                           tablat	equ	0xFF5
  9828                           prodh	equ	0xFF4
  9829                           prodl	equ	0xFF3
  9830                           intcon	equ	0xFF2
  9831                           intcon2	equ	0xFF1
  9832                           intcon3	equ	0xFF0
  9833                           indf0	equ	0xFEF
  9834                           postinc0	equ	0xFEE
  9835                           fsr0h	equ	0xFEA
  9836                           fsr0l	equ	0xFE9
  9837                           wreg	equ	0xFE8
  9838                           indf1	equ	0xFE7
  9839                           postinc1	equ	0xFE6
  9840                           postdec1	equ	0xFE5
  9841                           fsr1h	equ	0xFE2
  9842                           fsr1l	equ	0xFE1
  9843                           indf2	equ	0xFDF
  9844                           postinc2	equ	0xFDE
  9845                           postdec2	equ	0xFDD
  9846                           fsr2h	equ	0xFDA
  9847                           fsr2l	equ	0xFD9
  9848                           status	equ	0xFD8
  9849                           
  9850 ;; *************** function i2_printf *****************
  9851 ;; Defined at:
  9852 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  9853 ;; Parameters:    Size  Location     Type
  9854 ;;  f               2   34[COMRAM] PTR const unsigned char 
  9855 ;;		 -> STR_17(14), STR_16(15), STR_15(8), display1(18), 
  9856 ;;		 -> display0(18), 
  9857 ;; Auto vars:     Size  Location     Type
  9858 ;;  printf          4   38[COMRAM] struct __prbuf
  9859 ;;  printf          2   36[COMRAM] PTR void [1]
  9860 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
  9861 ;; Return value:  Size  Location     Type
  9862 ;;                  2   34[COMRAM] int 
  9863 ;; Registers used:
  9864 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9865 ;; Tracked objects:
  9866 ;;		On entry : 0/0
  9867 ;;		On exit  : 0/0
  9868 ;;		Unchanged: 0/0
  9869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9870 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9871 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9873 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9874 ;;Total ram usage:        8 bytes
  9875 ;; Hardware stack levels used:    1
  9876 ;; Hardware stack levels required when called:    3
  9877 ;; This function calls:
  9878 ;;		i2__doprnt
  9879 ;; This function is called by:
  9880 ;;		_keypressed
  9881 ;; This function uses a non-reentrant model
  9882 ;;
  9883                           
  9884                           	psect	text32
  9885  002FDA                     __ptext32:
  9886                           	opt stack 0
  9887  002FDA                     i2_printf:
  9888                           	opt stack 20
  9889                           
  9890                           ;incstack = 0
  9891  002FDA  0E00               	movlw	0
  9892  002FDC  6E27               	movwf	i2printf@pb,c
  9893  002FDE  0E00               	movlw	0
  9894  002FE0  6E28               	movwf	i2printf@pb+1,c
  9895  002FE2  0E68               	movlw	low i2_putch
  9896  002FE4  6E29               	movwf	i2printf@pb+2,c
  9897  002FE6  0E31               	movlw	high i2_putch
  9898  002FE8  6E2A               	movwf	i2printf@pb+3,c
  9899  002FEA  0E25               	movlw	low (?i2_printf+2)
  9900  002FEC  6E25               	movwf	i2printf@ap,c
  9901  002FEE  0E00               	movlw	high (?i2_printf+2)
  9902  002FF0  6E26               	movwf	i2printf@ap+1,c
  9903                           
  9904                           ;	Return value of i2_printf is never used
  9905  002FF2  0E27               	movlw	low i2printf@pb
  9906  002FF4  6E0D               	movwf	i2__doprnt@pb,c
  9907  002FF6  0E00               	movlw	high i2printf@pb
  9908  002FF8  6E0E               	movwf	i2__doprnt@pb+1,c
  9909  002FFA  C023  F00F         	movff	i2printf@f,i2__doprnt@f
  9910  002FFE  C024  F010         	movff	i2printf@f+1,i2__doprnt@f+1
  9911  003002  0E25               	movlw	low i2printf@ap
  9912  003004  6E11               	movwf	i2__doprnt@ap,c
  9913  003006  0E00               	movlw	high i2printf@ap
  9914  003008  6E12               	movwf	i2__doprnt@ap+1,c
  9915  00300A  ECCB  F004         	call	i2__doprnt	;wreg free
  9916  00300E  0012               	return	
  9917  003010                     __end_ofi2_printf:
  9918                           	opt stack 0
  9919                           tosu	equ	0xFFF
  9920                           tosh	equ	0xFFE
  9921                           tosl	equ	0xFFD
  9922                           pclatu	equ	0xFFB
  9923                           pclath	equ	0xFFA
  9924                           tblptru	equ	0xFF8
  9925                           tblptrh	equ	0xFF7
  9926                           tblptrl	equ	0xFF6
  9927                           tablat	equ	0xFF5
  9928                           prodh	equ	0xFF4
  9929                           prodl	equ	0xFF3
  9930                           intcon	equ	0xFF2
  9931                           intcon2	equ	0xFF1
  9932                           intcon3	equ	0xFF0
  9933                           indf0	equ	0xFEF
  9934                           postinc0	equ	0xFEE
  9935                           fsr0h	equ	0xFEA
  9936                           fsr0l	equ	0xFE9
  9937                           wreg	equ	0xFE8
  9938                           indf1	equ	0xFE7
  9939                           postinc1	equ	0xFE6
  9940                           postdec1	equ	0xFE5
  9941                           fsr1h	equ	0xFE2
  9942                           fsr1l	equ	0xFE1
  9943                           indf2	equ	0xFDF
  9944                           postinc2	equ	0xFDE
  9945                           postdec2	equ	0xFDD
  9946                           fsr2h	equ	0xFDA
  9947                           fsr2l	equ	0xFD9
  9948                           status	equ	0xFD8
  9949                           
  9950 ;; *************** function i2__doprnt *****************
  9951 ;; Defined at:
  9952 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  9953 ;; Parameters:    Size  Location     Type
  9954 ;;  pb              2   12[COMRAM] PTR struct __prbuf
  9955 ;;		 -> sprintf@pb(4), printf@pb(4), 
  9956 ;;  f               2   14[COMRAM] PTR const unsigned char 
  9957 ;;		 -> STR_17(14), STR_16(15), STR_15(8), STR_14(5), 
  9958 ;;		 -> STR_13(5), STR_12(5), STR_11(5), STR_10(20), 
  9959 ;;		 -> STR_9(20), STR_8(22), STR_7(19), menu(720), 
  9960 ;;		 -> STR_6(15), STR_5(6), STR_4(16), STR_3(25), 
  9961 ;;		 -> STR_2(23), STR_1(23), display1(18), display0(18), 
  9962 ;;  ap              2   16[COMRAM] PTR PTR void 
  9963 ;;		 -> sprintf@ap(2), printf@ap(2), 
  9964 ;; Auto vars:     Size  Location     Type
  9965 ;;  _doprnt         4    0        struct .
  9966 ;;  _doprnt         2   31[COMRAM] int 
  9967 ;;  _doprnt         2   28[COMRAM] unsigned int 
  9968 ;;  _doprnt         2   26[COMRAM] PTR const unsigned char 
  9969 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_18(7), 
  9970 ;;		 -> _doprnt@c(1), menu(720), ndisplay1(18), ndisplay0(18), 
  9971 ;;  _doprnt         2   24[COMRAM] unsigned int 
  9972 ;;  _doprnt         1   33[COMRAM] char 
  9973 ;;  _doprnt         1   30[COMRAM] unsigned char 
  9974 ;;  _doprnt         1   23[COMRAM] char 
  9975 ;;  _doprnt         1   22[COMRAM] unsigned char 
  9976 ;; Return value:  Size  Location     Type
  9977 ;;                  2   12[COMRAM] int 
  9978 ;; Registers used:
  9979 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9980 ;; Tracked objects:
  9981 ;;		On entry : 0/0
  9982 ;;		On exit  : 0/0
  9983 ;;		Unchanged: 0/0
  9984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9985 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9986 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9987 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9988 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9989 ;;Total ram usage:       22 bytes
  9990 ;; Hardware stack levels used:    1
  9991 ;; Hardware stack levels required when called:    2
  9992 ;; This function calls:
  9993 ;;		Absolute function
  9994 ;;		i2___lwdiv
  9995 ;;		i2___lwmod
  9996 ;;		i2___wmul
  9997 ;;		i2_isdigit
  9998 ;;		i2_putch
  9999 ;; This function is called by:
 10000 ;;		i2_printf
 10001 ;; This function uses a non-reentrant model
 10002 ;;
 10003                           
 10004                           	psect	text33
 10005  000996                     __ptext33:
 10006                           	opt stack 0
 10007  000996                     i2__doprnt:
 10008                           	opt stack 20
 10009                           
 10010                           ;doprnt.c: 499: signed char c;
 10011                           ;doprnt.c: 501: int width;
 10012                           ;doprnt.c: 506: signed char prec;
 10013                           ;doprnt.c: 508: unsigned char flag;
 10014                           ;doprnt.c: 523: union {
 10015                           ;doprnt.c: 524: unsigned long vd;
 10016                           ;doprnt.c: 525: double integ;
 10017                           ;doprnt.c: 526: } tmpval;
 10018                           ;doprnt.c: 528: unsigned int val;
 10019                           ;doprnt.c: 529: unsigned len;
 10020                           ;doprnt.c: 530: const char * cp;
 10021                           ;doprnt.c: 536: while(c = *f++) {
 10022                           
 10023                           ;incstack = 0
 10024  000996  EFD6  F008         	goto	i2l7936
 10025  00099A                     i2l7730:
 10026                           
 10027                           ;doprnt.c: 538: if(c != '%')
 10028  00099A  0E25               	movlw	37
 10029  00099C  1822               	xorwf	i2__doprnt@c,w,c
 10030  00099E  B4D8               	btfsc	status,2,c
 10031  0009A0  D036               	goto	i2l7740
 10032                           
 10033                           ;doprnt.c: 540: {
 10034                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 10035  0009A2  EE20 F002          	lfsr	2,2
 10036  0009A6  500D               	movf	i2__doprnt@pb,w,c
 10037  0009A8  26D9               	addwf	fsr2l,f,c
 10038  0009AA  500E               	movf	i2__doprnt@pb+1,w,c
 10039  0009AC  22DA               	addwfc	fsr2h,f,c
 10040  0009AE  50DE               	movf	postinc2,w,c
 10041  0009B0  10DE               	iorwf	postinc2,w,c
 10042  0009B2  B4D8               	btfsc	status,2,c
 10043  0009B4  D016               	goto	i2l7736
 10044  0009B6  EE20 F002          	lfsr	2,2
 10045  0009BA  500D               	movf	i2__doprnt@pb,w,c
 10046  0009BC  26D9               	addwf	fsr2l,f,c
 10047  0009BE  500E               	movf	i2__doprnt@pb+1,w,c
 10048  0009C0  22DA               	addwfc	fsr2h,f,c
 10049  0009C2  CFDE F013          	movff	postinc2,??i2__doprnt
 10050  0009C6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10051  0009CA  D801               	call	i2u1199_48
 10052  0009CC  D3EF               	goto	i2l7936
 10053  0009CE                     i2u1199_48:
 10054  0009CE  0005               	push	
 10055  0009D0  6EFA               	movwf	pclath,c
 10056  0009D2  5013               	movf	??i2__doprnt,w,c
 10057  0009D4  6EFD               	movwf	tosl,c
 10058  0009D6  5014               	movf	??i2__doprnt+1,w,c
 10059  0009D8  6EFE               	movwf	tosh,c
 10060  0009DA  6AFF               	clrf	tosu,c
 10061  0009DC  50FA               	movf	pclath,w,c
 10062  0009DE  5022               	movf	i2__doprnt@c,w,c
 10063  0009E0  0012               	return		;indir
 10064  0009E2                     i2l7736:
 10065  0009E2  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10066  0009E6  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10067  0009EA  CFDE F013          	movff	postinc2,??i2__doprnt
 10068  0009EE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10069  0009F2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10070  0009F6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10071  0009FA  C022  FFDF         	movff	i2__doprnt@c,indf2
 10072  0009FE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10073  000A02  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10074  000A06  2ADE               	incf	postinc2,f,c
 10075  000A08  0E00               	movlw	0
 10076  000A0A  22DD               	addwfc	postdec2,f,c
 10077                           
 10078                           ;doprnt.c: 542: continue;
 10079  000A0C  D3CF               	goto	i2l7936
 10080  000A0E                     i2l7740:
 10081                           
 10082                           ;doprnt.c: 543: }
 10083                           ;doprnt.c: 546: width = 0;
 10084  000A0E  0E00               	movlw	0
 10085  000A10  6E21               	movwf	i2__doprnt@width+1,c
 10086  000A12  0E00               	movlw	0
 10087  000A14  6E20               	movwf	i2__doprnt@width,c
 10088                           
 10089                           ;doprnt.c: 548: flag = 0;
 10090  000A16  0E00               	movlw	0
 10091  000A18  6E1F               	movwf	i2__doprnt@flag,c
 10092                           
 10093                           ;doprnt.c: 551: switch(*f) {
 10094                           
 10095                           ;doprnt.c: 550: for(;;) {
 10096  000A1A  D003               	goto	i2l7746
 10097  000A1C                     i2l7742:
 10098                           
 10099                           ;doprnt.c: 580: flag |= 0x04;
 10100  000A1C  841F               	bsf	i2__doprnt@flag,2,c
 10101                           
 10102                           ;doprnt.c: 581: f++;
 10103  000A1E  4A0F               	infsnz	i2__doprnt@f,f,c
 10104  000A20  2A10               	incf	i2__doprnt@f+1,f,c
 10105  000A22                     i2l7746:
 10106  000A22  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 10107  000A26  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 10108  000A2A  0E00               	movlw	low (__mediumconst shr (0+16))
 10109  000A2C  6EF8               	movwf	tblptru,c
 10110  000A2E  0E0F               	movlw	(high __ramtop+-1)
 10111  000A30  64F7               	cpfsgt	tblptrh,c
 10112  000A32  D003               	bra	i2u1200_47
 10113  000A34  0008               	tblrd		*
 10114  000A36  50F5               	movf	tablat,w,c
 10115  000A38  D005               	bra	i2u1200_40
 10116  000A3A                     i2u1200_47:
 10117  000A3A  CFF6 FFE9          	movff	tblptrl,fsr0l
 10118  000A3E  CFF7 FFEA          	movff	tblptrh,fsr0h
 10119  000A42  50EF               	movf	indf0,w,c
 10120  000A44                     i2u1200_40:
 10121                           
 10122                           ; Switch size 1, requested type "space"
 10123                           ; Number of cases is 1, Range of values is 48 to 48
 10124                           ; switch strategies available:
 10125                           ; Name         Instructions Cycles
 10126                           ; simple_byte            4     3 (average)
 10127                           ;	Chosen strategy is simple_byte
 10128  000A44  0A30               	xorlw	48	; case 48
 10129  000A46  B4D8               	btfsc	status,2,c
 10130  000A48  D7E9               	goto	i2l7742
 10131                           
 10132                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 10133                           
 10134                           ;doprnt.c: 586: }
 10135                           
 10136                           ;doprnt.c: 585: break;
 10137  000A4A  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 10138  000A4E  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 10139  000A52  0E00               	movlw	low (__mediumconst shr (0+16))
 10140  000A54  6EF8               	movwf	tblptru,c
 10141  000A56  0E0F               	movlw	(high __ramtop+-1)
 10142  000A58  64F7               	cpfsgt	tblptrh,c
 10143  000A5A  D003               	bra	i2u1201_47
 10144  000A5C  0008               	tblrd		*
 10145  000A5E  50F5               	movf	tablat,w,c
 10146  000A60  D005               	bra	i2u1201_40
 10147  000A62                     i2u1201_47:
 10148  000A62  CFF6 FFE9          	movff	tblptrl,fsr0l
 10149  000A66  CFF7 FFEA          	movff	tblptrh,fsr0h
 10150  000A6A  50EF               	movf	indf0,w,c
 10151  000A6C                     i2u1201_40:
 10152  000A6C  EC76  F018         	call	i2_isdigit
 10153  000A70  A0D8               	btfss	status,0,c
 10154  000A72  D154               	goto	i2l7812
 10155                           
 10156                           ;doprnt.c: 598: width = 0;
 10157  000A74  0E00               	movlw	0
 10158  000A76  6E21               	movwf	i2__doprnt@width+1,c
 10159  000A78  0E00               	movlw	0
 10160  000A7A  6E20               	movwf	i2__doprnt@width,c
 10161  000A7C                     i2l7752:
 10162                           
 10163                           ;doprnt.c: 600: width *= 10;
 10164  000A7C  C020  F001         	movff	i2__doprnt@width,i2___wmul@multiplier
 10165  000A80  C021  F002         	movff	i2__doprnt@width+1,i2___wmul@multiplier+1
 10166  000A84  0E00               	movlw	0
 10167  000A86  6E04               	movwf	i2___wmul@multiplicand+1,c
 10168  000A88  0E0A               	movlw	10
 10169  000A8A  6E03               	movwf	i2___wmul@multiplicand,c
 10170  000A8C  EC63  F018         	call	i2___wmul	;wreg free
 10171  000A90  C001  F020         	movff	?i2___wmul,i2__doprnt@width
 10172  000A94  C002  F021         	movff	?i2___wmul+1,i2__doprnt@width+1
 10173                           
 10174                           ;doprnt.c: 601: width += *f++ - '0';
 10175  000A98  0ED0               	movlw	208
 10176  000A9A  6E13               	movwf	??i2__doprnt& (0+255),c
 10177  000A9C  0EFF               	movlw	255
 10178  000A9E  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 10179  000AA0  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 10180  000AA4  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 10181  000AA8  0E00               	movlw	low (__mediumconst shr (0+16))
 10182  000AAA  6EF8               	movwf	tblptru,c
 10183  000AAC  0E0F               	movlw	(high __ramtop+-1)
 10184  000AAE  64F7               	cpfsgt	tblptrh,c
 10185  000AB0  D003               	bra	i2u1203_47
 10186  000AB2  0008               	tblrd		*
 10187  000AB4  50F5               	movf	tablat,w,c
 10188  000AB6  D005               	bra	i2u1203_40
 10189  000AB8                     i2u1203_47:
 10190  000AB8  CFF6 FFE9          	movff	tblptrl,fsr0l
 10191  000ABC  CFF7 FFEA          	movff	tblptrh,fsr0h
 10192  000AC0  50EF               	movf	indf0,w,c
 10193  000AC2                     i2u1203_40:
 10194  000AC2  6E15               	movwf	(??i2__doprnt+2)& (0+255),c
 10195  000AC4  6A16               	clrf	(??i2__doprnt+3)& (0+255),c
 10196  000AC6  5013               	movf	??i2__doprnt,w,c
 10197  000AC8  2615               	addwf	??i2__doprnt+2,f,c
 10198  000ACA  5014               	movf	??i2__doprnt+1,w,c
 10199  000ACC  2216               	addwfc	??i2__doprnt+3,f,c
 10200  000ACE  5015               	movf	??i2__doprnt+2,w,c
 10201  000AD0  2620               	addwf	i2__doprnt@width,f,c
 10202  000AD2  5016               	movf	??i2__doprnt+3,w,c
 10203  000AD4  2221               	addwfc	i2__doprnt@width+1,f,c
 10204  000AD6  4A0F               	infsnz	i2__doprnt@f,f,c
 10205  000AD8  2A10               	incf	i2__doprnt@f+1,f,c
 10206                           
 10207                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 10208  000ADA  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 10209  000ADE  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 10210  000AE2  0E00               	movlw	low (__mediumconst shr (0+16))
 10211  000AE4  6EF8               	movwf	tblptru,c
 10212  000AE6  0E0F               	movlw	(high __ramtop+-1)
 10213  000AE8  64F7               	cpfsgt	tblptrh,c
 10214  000AEA  D003               	bra	i2u1204_47
 10215  000AEC  0008               	tblrd		*
 10216  000AEE  50F5               	movf	tablat,w,c
 10217  000AF0  D005               	bra	i2u1204_40
 10218  000AF2                     i2u1204_47:
 10219  000AF2  CFF6 FFE9          	movff	tblptrl,fsr0l
 10220  000AF6  CFF7 FFEA          	movff	tblptrh,fsr0h
 10221  000AFA  50EF               	movf	indf0,w,c
 10222  000AFC                     i2u1204_40:
 10223  000AFC  EC76  F018         	call	i2_isdigit
 10224  000B00  A0D8               	btfss	status,0,c
 10225  000B02  D10C               	goto	i2l7812
 10226  000B04  D7BB               	goto	i2l7752
 10227  000B06                     i2l7760:
 10228                           
 10229                           ;doprnt.c: 721: flag |= 0x80;
 10230  000B06  8E1F               	bsf	i2__doprnt@flag,7,c
 10231                           
 10232                           ;doprnt.c: 723: break;
 10233  000B08  D135               	goto	i2l493
 10234  000B0A                     i2l7762:
 10235                           
 10236                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 10237  000B0A  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 10238  000B0E  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 10239  000B12  CFDF F013          	movff	indf2,??i2__doprnt
 10240  000B16  0E02               	movlw	2
 10241  000B18  26DE               	addwf	postinc2,f,c
 10242  000B1A  CFDF F014          	movff	indf2,??i2__doprnt+1
 10243  000B1E  0E00               	movlw	0
 10244  000B20  22DD               	addwfc	postdec2,f,c
 10245  000B22  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10246  000B26  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10247  000B2A  CFDE F01B          	movff	postinc2,i2__doprnt@cp
 10248  000B2E  CFDD F01C          	movff	postdec2,i2__doprnt@cp+1
 10249                           
 10250                           ;doprnt.c: 740: if(!cp)
 10251  000B32  501B               	movf	i2__doprnt@cp,w,c
 10252  000B34  101C               	iorwf	i2__doprnt@cp+1,w,c
 10253  000B36  A4D8               	btfss	status,2,c
 10254  000B38  D004               	goto	i2l7768
 10255                           
 10256                           ;doprnt.c: 741: cp = "(null)";
 10257  000B3A  0EEC               	movlw	low STR_18
 10258  000B3C  6E1B               	movwf	i2__doprnt@cp,c
 10259  000B3E  0EFF               	movlw	high STR_18
 10260  000B40  6E1C               	movwf	i2__doprnt@cp+1,c
 10261  000B42                     i2l7768:
 10262                           
 10263                           ;doprnt.c: 745: len = 0;
 10264  000B42  0E00               	movlw	0
 10265  000B44  6E1A               	movwf	i2__doprnt@len+1,c
 10266  000B46  0E00               	movlw	0
 10267  000B48  6E19               	movwf	i2__doprnt@len,c
 10268                           
 10269                           ;doprnt.c: 746: while(cp[len])
 10270  000B4A  D002               	goto	i2l7772
 10271  000B4C                     i2l7770:
 10272                           
 10273                           ;doprnt.c: 747: len++;
 10274  000B4C  4A19               	infsnz	i2__doprnt@len,f,c
 10275  000B4E  2A1A               	incf	i2__doprnt@len+1,f,c
 10276  000B50                     i2l7772:
 10277  000B50  5019               	movf	i2__doprnt@len,w,c
 10278  000B52  241B               	addwf	i2__doprnt@cp,w,c
 10279  000B54  6E13               	movwf	??i2__doprnt& (0+255),c
 10280  000B56  501A               	movf	i2__doprnt@len+1,w,c
 10281  000B58  201C               	addwfc	i2__doprnt@cp+1,w,c
 10282  000B5A  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 10283  000B5C  C013  FFF6         	movff	??i2__doprnt,tblptrl
 10284  000B60  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 10285  000B64  0E00               	movlw	low (__mediumconst shr (0+16))
 10286  000B66  6EF8               	movwf	tblptru,c
 10287  000B68  0E0F               	movlw	(high __ramtop+-1)
 10288  000B6A  64F7               	cpfsgt	tblptrh,c
 10289  000B6C  D003               	bra	i2u1207_47
 10290  000B6E  0008               	tblrd		*
 10291  000B70  50F5               	movf	tablat,w,c
 10292  000B72  D005               	bra	i2u1207_40
 10293  000B74                     i2u1207_47:
 10294  000B74  CFF6 FFE9          	movff	tblptrl,fsr0l
 10295  000B78  CFF7 FFEA          	movff	tblptrh,fsr0h
 10296  000B7C  50EF               	movf	indf0,w,c
 10297  000B7E                     i2u1207_40:
 10298  000B7E  0900               	iorlw	0
 10299  000B80  A4D8               	btfss	status,2,c
 10300  000B82  D7E4               	goto	i2l7770
 10301  000B84                     i2l7774:
 10302                           
 10303                           ;doprnt.c: 757: if(width > len)
 10304  000B84  5020               	movf	i2__doprnt@width,w,c
 10305  000B86  5C19               	subwf	i2__doprnt@len,w,c
 10306  000B88  5021               	movf	i2__doprnt@width+1,w,c
 10307  000B8A  581A               	subwfb	i2__doprnt@len+1,w,c
 10308  000B8C  B0D8               	btfsc	status,0,c
 10309  000B8E  D005               	goto	i2l7778
 10310                           
 10311                           ;doprnt.c: 758: width -= len;
 10312  000B90  5019               	movf	i2__doprnt@len,w,c
 10313  000B92  5E20               	subwf	i2__doprnt@width,f,c
 10314  000B94  501A               	movf	i2__doprnt@len+1,w,c
 10315  000B96  5A21               	subwfb	i2__doprnt@width+1,f,c
 10316  000B98  D03A               	goto	i2l7788
 10317  000B9A                     i2l7778:
 10318                           
 10319                           ;doprnt.c: 759: else
 10320                           ;doprnt.c: 760: width = 0;
 10321  000B9A  0E00               	movlw	0
 10322  000B9C  6E21               	movwf	i2__doprnt@width+1,c
 10323  000B9E  0E00               	movlw	0
 10324  000BA0  6E20               	movwf	i2__doprnt@width,c
 10325                           
 10326                           ;doprnt.c: 764: while(width--)
 10327  000BA2  D035               	goto	i2l7788
 10328  000BA4                     i2l7780:
 10329                           
 10330                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 10331  000BA4  EE20 F002          	lfsr	2,2
 10332  000BA8  500D               	movf	i2__doprnt@pb,w,c
 10333  000BAA  26D9               	addwf	fsr2l,f,c
 10334  000BAC  500E               	movf	i2__doprnt@pb+1,w,c
 10335  000BAE  22DA               	addwfc	fsr2h,f,c
 10336  000BB0  50DE               	movf	postinc2,w,c
 10337  000BB2  10DE               	iorwf	postinc2,w,c
 10338  000BB4  B4D8               	btfsc	status,2,c
 10339  000BB6  D016               	goto	i2l7784
 10340  000BB8  EE20 F002          	lfsr	2,2
 10341  000BBC  500D               	movf	i2__doprnt@pb,w,c
 10342  000BBE  26D9               	addwf	fsr2l,f,c
 10343  000BC0  500E               	movf	i2__doprnt@pb+1,w,c
 10344  000BC2  22DA               	addwfc	fsr2h,f,c
 10345  000BC4  CFDE F013          	movff	postinc2,??i2__doprnt
 10346  000BC8  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10347  000BCC  D801               	call	i2u1211_48
 10348  000BCE  D01F               	goto	i2l7788
 10349  000BD0                     i2u1211_48:
 10350  000BD0  0005               	push	
 10351  000BD2  6EFA               	movwf	pclath,c
 10352  000BD4  5013               	movf	??i2__doprnt,w,c
 10353  000BD6  6EFD               	movwf	tosl,c
 10354  000BD8  5014               	movf	??i2__doprnt+1,w,c
 10355  000BDA  6EFE               	movwf	tosh,c
 10356  000BDC  6AFF               	clrf	tosu,c
 10357  000BDE  50FA               	movf	pclath,w,c
 10358  000BE0  0E20               	movlw	32
 10359  000BE2  0012               	return		;indir
 10360  000BE4                     i2l7784:
 10361  000BE4  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10362  000BE8  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10363  000BEC  CFDE F013          	movff	postinc2,??i2__doprnt
 10364  000BF0  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10365  000BF4  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10366  000BF8  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10367  000BFC  0E20               	movlw	32
 10368  000BFE  6EDF               	movwf	indf2,c
 10369  000C00  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10370  000C04  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10371  000C08  2ADE               	incf	postinc2,f,c
 10372  000C0A  0E00               	movlw	0
 10373  000C0C  22DD               	addwfc	postdec2,f,c
 10374  000C0E                     i2l7788:
 10375  000C0E  0620               	decf	i2__doprnt@width,f,c
 10376  000C10  A0D8               	btfss	status,0,c
 10377  000C12  0621               	decf	i2__doprnt@width+1,f,c
 10378  000C14  2820               	incf	i2__doprnt@width,w,c
 10379  000C16  E1C6               	bnz	i2l7780
 10380  000C18  2821               	incf	i2__doprnt@width+1,w,c
 10381  000C1A  B4D8               	btfsc	status,2,c
 10382  000C1C  D05B               	goto	i2l7802
 10383  000C1E  D7C2               	goto	i2l7780
 10384  000C20                     i2l7790:
 10385                           
 10386                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 10387  000C20  EE20 F002          	lfsr	2,2
 10388  000C24  500D               	movf	i2__doprnt@pb,w,c
 10389  000C26  26D9               	addwf	fsr2l,f,c
 10390  000C28  500E               	movf	i2__doprnt@pb+1,w,c
 10391  000C2A  22DA               	addwfc	fsr2h,f,c
 10392  000C2C  50DE               	movf	postinc2,w,c
 10393  000C2E  10DE               	iorwf	postinc2,w,c
 10394  000C30  B4D8               	btfsc	status,2,c
 10395  000C32  D029               	goto	i2l7796
 10396  000C34  EE20 F002          	lfsr	2,2
 10397  000C38  500D               	movf	i2__doprnt@pb,w,c
 10398  000C3A  26D9               	addwf	fsr2l,f,c
 10399  000C3C  500E               	movf	i2__doprnt@pb+1,w,c
 10400  000C3E  22DA               	addwfc	fsr2h,f,c
 10401  000C40  CFDE F013          	movff	postinc2,??i2__doprnt
 10402  000C44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10403  000C48  D801               	call	i2u1214_48
 10404  000C4A  D01A               	goto	i2l7794
 10405  000C4C                     i2u1214_48:
 10406  000C4C  0005               	push	
 10407  000C4E  6EFA               	movwf	pclath,c
 10408  000C50  5013               	movf	??i2__doprnt,w,c
 10409  000C52  6EFD               	movwf	tosl,c
 10410  000C54  5014               	movf	??i2__doprnt+1,w,c
 10411  000C56  6EFE               	movwf	tosh,c
 10412  000C58  6AFF               	clrf	tosu,c
 10413  000C5A  50FA               	movf	pclath,w,c
 10414  000C5C  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 10415  000C60  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 10416  000C64  0E00               	movlw	low (__mediumconst shr (0+16))
 10417  000C66  6EF8               	movwf	tblptru,c
 10418  000C68  0E0F               	movlw	(high __ramtop+-1)
 10419  000C6A  64F7               	cpfsgt	tblptrh,c
 10420  000C6C  D003               	bra	i2u1215_47
 10421  000C6E  0008               	tblrd		*
 10422  000C70  50F5               	movf	tablat,w,c
 10423  000C72  D005               	bra	i2u1215_40
 10424  000C74                     i2u1215_47:
 10425  000C74  CFF6 FFE9          	movff	tblptrl,fsr0l
 10426  000C78  CFF7 FFEA          	movff	tblptrh,fsr0h
 10427  000C7C  50EF               	movf	indf0,w,c
 10428  000C7E                     i2u1215_40:
 10429  000C7E  0012               	return		;indir
 10430  000C80                     i2l7794:
 10431  000C80  4A1B               	infsnz	i2__doprnt@cp,f,c
 10432  000C82  2A1C               	incf	i2__doprnt@cp+1,f,c
 10433  000C84  D027               	goto	i2l7802
 10434  000C86                     i2l7796:
 10435  000C86  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 10436  000C8A  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 10437  000C8E  0E00               	movlw	low (__mediumconst shr (0+16))
 10438  000C90  6EF8               	movwf	tblptru,c
 10439  000C92  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10440  000C96  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10441  000C9A  CFDE F013          	movff	postinc2,??i2__doprnt
 10442  000C9E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10443  000CA2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10444  000CA6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10445  000CAA  0E0F               	movlw	(high __ramtop+-1)
 10446  000CAC  64F7               	cpfsgt	tblptrh,c
 10447  000CAE  D003               	bra	i2u1216_47
 10448  000CB0  0008               	tblrd		*
 10449  000CB2  50F5               	movf	tablat,w,c
 10450  000CB4  D005               	bra	i2u1216_40
 10451  000CB6                     i2u1216_47:
 10452  000CB6  CFF6 FFE9          	movff	tblptrl,fsr0l
 10453  000CBA  CFF7 FFEA          	movff	tblptrh,fsr0h
 10454  000CBE  50EF               	movf	indf0,w,c
 10455  000CC0                     i2u1216_40:
 10456  000CC0  6EDF               	movwf	indf2,c
 10457  000CC2  4A1B               	infsnz	i2__doprnt@cp,f,c
 10458  000CC4  2A1C               	incf	i2__doprnt@cp+1,f,c
 10459  000CC6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10460  000CCA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10461  000CCE  2ADE               	incf	postinc2,f,c
 10462  000CD0  0E00               	movlw	0
 10463  000CD2  22DD               	addwfc	postdec2,f,c
 10464  000CD4                     i2l7802:
 10465  000CD4  0619               	decf	i2__doprnt@len,f,c
 10466  000CD6  A0D8               	btfss	status,0,c
 10467  000CD8  061A               	decf	i2__doprnt@len+1,f,c
 10468  000CDA  2819               	incf	i2__doprnt@len,w,c
 10469  000CDC  E1A1               	bnz	i2l7790
 10470  000CDE  281A               	incf	i2__doprnt@len+1,w,c
 10471  000CE0  B4D8               	btfsc	status,2,c
 10472  000CE2  D264               	goto	i2l7936
 10473  000CE4  D79D               	goto	i2l7790
 10474  000CE6                     i2l7804:
 10475                           
 10476                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 10477  000CE6  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 10478  000CEA  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 10479  000CEE  CFDF F013          	movff	indf2,??i2__doprnt
 10480  000CF2  0E02               	movlw	2
 10481  000CF4  26DE               	addwf	postinc2,f,c
 10482  000CF6  CFDF F014          	movff	indf2,??i2__doprnt+1
 10483  000CFA  0E00               	movlw	0
 10484  000CFC  22DD               	addwfc	postdec2,f,c
 10485  000CFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10486  000D02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10487  000D06  50DF               	movf	indf2,w,c
 10488  000D08  6E22               	movwf	i2__doprnt@c,c
 10489  000D0A                     i2l7806:
 10490                           
 10491                           ;doprnt.c: 805: cp = (char *)&c;
 10492  000D0A  0E22               	movlw	low i2__doprnt@c
 10493  000D0C  6E1B               	movwf	i2__doprnt@cp,c
 10494  000D0E  0E00               	movlw	high i2__doprnt@c
 10495  000D10  6E1C               	movwf	i2__doprnt@cp+1,c
 10496                           
 10497                           ;doprnt.c: 806: len = 1;
 10498  000D12  0E00               	movlw	0
 10499  000D14  6E1A               	movwf	i2__doprnt@len+1,c
 10500  000D16  0E01               	movlw	1
 10501  000D18  6E19               	movwf	i2__doprnt@len,c
 10502                           
 10503                           ;doprnt.c: 807: goto dostring;
 10504  000D1A  D734               	goto	i2l7774
 10505  000D1C                     i2l7812:
 10506  000D1C  500F               	movf	i2__doprnt@f,w,c
 10507  000D1E  6E13               	movwf	??i2__doprnt& (0+255),c
 10508  000D20  5010               	movf	i2__doprnt@f+1,w,c
 10509  000D22  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 10510  000D24  4A0F               	infsnz	i2__doprnt@f,f,c
 10511  000D26  2A10               	incf	i2__doprnt@f+1,f,c
 10512  000D28  C013  FFF6         	movff	??i2__doprnt,tblptrl
 10513  000D2C  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 10514  000D30  0E00               	movlw	low (__mediumconst shr (0+16))
 10515  000D32  6EF8               	movwf	tblptru,c
 10516  000D34  0E0F               	movlw	(high __ramtop+-1)
 10517  000D36  64F7               	cpfsgt	tblptrh,c
 10518  000D38  D003               	bra	i2u1218_47
 10519  000D3A  0008               	tblrd		*
 10520  000D3C  50F5               	movf	tablat,w,c
 10521  000D3E  D005               	bra	i2u1218_40
 10522  000D40                     i2u1218_47:
 10523  000D40  CFF6 FFE9          	movff	tblptrl,fsr0l
 10524  000D44  CFF7 FFEA          	movff	tblptrh,fsr0h
 10525  000D48  50EF               	movf	indf0,w,c
 10526  000D4A                     i2u1218_40:
 10527  000D4A  6E22               	movwf	i2__doprnt@c,c
 10528  000D4C  5022               	movf	i2__doprnt@c,w,c
 10529                           
 10530                           ; Switch size 1, requested type "space"
 10531                           ; Number of cases is 6, Range of values is 0 to 120
 10532                           ; switch strategies available:
 10533                           ; Name         Instructions Cycles
 10534                           ; simple_byte           19    10 (average)
 10535                           ;	Chosen strategy is simple_byte
 10536  000D4E  0A00               	xorlw	0	; case 0
 10537  000D50  B4D8               	btfsc	status,2,c
 10538  000D52  D248               	goto	i2l7938
 10539  000D54  0A63               	xorlw	99	; case 99
 10540  000D56  B4D8               	btfsc	status,2,c
 10541  000D58  D7C6               	goto	i2l7804
 10542  000D5A  0A07               	xorlw	7	; case 100
 10543  000D5C  B4D8               	btfsc	status,2,c
 10544  000D5E  D00A               	goto	i2l493
 10545  000D60  0A0D               	xorlw	13	; case 105
 10546  000D62  B4D8               	btfsc	status,2,c
 10547  000D64  D007               	goto	i2l493
 10548  000D66  0A1A               	xorlw	26	; case 115
 10549  000D68  B4D8               	btfsc	status,2,c
 10550  000D6A  D6CF               	goto	i2l7762
 10551  000D6C  0A0B               	xorlw	11	; case 120
 10552  000D6E  B4D8               	btfsc	status,2,c
 10553  000D70  D6CA               	goto	i2l7760
 10554  000D72  D7CB               	goto	i2l7806
 10555  000D74                     i2l493:
 10556                           
 10557                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 10558  000D74  BE1F               	btfsc	i2__doprnt@flag,7,c
 10559  000D76  D01D               	goto	i2l7822
 10560                           
 10561                           ;doprnt.c: 1253: {
 10562                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 10563  000D78  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 10564  000D7C  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 10565  000D80  CFDF F013          	movff	indf2,??i2__doprnt
 10566  000D84  0E02               	movlw	2
 10567  000D86  26DE               	addwf	postinc2,f,c
 10568  000D88  CFDF F014          	movff	indf2,??i2__doprnt+1
 10569  000D8C  0E00               	movlw	0
 10570  000D8E  22DD               	addwfc	postdec2,f,c
 10571  000D90  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10572  000D94  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10573  000D98  CFDE F01D          	movff	postinc2,i2__doprnt@val
 10574  000D9C  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 10575                           
 10576                           ;doprnt.c: 1261: if((int)val < 0) {
 10577  000DA0  AE1E               	btfss	i2__doprnt@val+1,7,c
 10578  000DA2  D052               	goto	i2l7854
 10579                           
 10580                           ;doprnt.c: 1262: flag |= 0x03;
 10581  000DA4  0E03               	movlw	3
 10582  000DA6  121F               	iorwf	i2__doprnt@flag,f,c
 10583                           
 10584                           ;doprnt.c: 1263: val = -val;
 10585  000DA8  6C1D               	negf	i2__doprnt@val,c
 10586  000DAA  1E1E               	comf	i2__doprnt@val+1,f,c
 10587  000DAC  B0D8               	btfsc	status,0,c
 10588  000DAE  2A1E               	incf	i2__doprnt@val+1,f,c
 10589                           
 10590                           ;doprnt.c: 1264: }
 10591                           ;doprnt.c: 1266: }
 10592  000DB0  D04B               	goto	i2l7854
 10593  000DB2                     i2l7822:
 10594                           
 10595                           ;doprnt.c: 1268: else
 10596                           ;doprnt.c: 1273: {
 10597                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 10598  000DB2  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 10599  000DB6  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 10600  000DBA  CFDF F013          	movff	indf2,??i2__doprnt
 10601  000DBE  0E02               	movlw	2
 10602  000DC0  26DE               	addwf	postinc2,f,c
 10603  000DC2  CFDF F014          	movff	indf2,??i2__doprnt+1
 10604  000DC6  0E00               	movlw	0
 10605  000DC8  22DD               	addwfc	postdec2,f,c
 10606  000DCA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10607  000DCE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10608  000DD2  CFDE F01D          	movff	postinc2,i2__doprnt@val
 10609  000DD6  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 10610                           
 10611                           ;doprnt.c: 1287: }
 10612                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 10613  000DDA  D036               	goto	i2l7854
 10614  000DDC                     i2l7824:
 10615                           
 10616                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 10617  000DDC  0E01               	movlw	1
 10618  000DDE  6E22               	movwf	i2__doprnt@c,c
 10619  000DE0                     i2l7826:
 10620  000DE0  0E05               	movlw	5
 10621  000DE2  1822               	xorwf	i2__doprnt@c,w,c
 10622  000DE4  B4D8               	btfsc	status,2,c
 10623  000DE6  D038               	goto	i2l7856
 10624                           
 10625                           ;doprnt.c: 1306: if(val < dpowers[c])
 10626  000DE8  5022               	movf	i2__doprnt@c,w,c
 10627  000DEA  0D02               	mullw	2
 10628  000DEC  0EE6               	movlw	low _dpowers
 10629  000DEE  24F3               	addwf	prodl,w,c
 10630  000DF0  6EF6               	movwf	tblptrl,c
 10631  000DF2  0EFE               	movlw	high _dpowers
 10632  000DF4  20F4               	addwfc	prodh,w,c
 10633  000DF6  6EF7               	movwf	tblptrh,c
 10634  000DF8                     	if	1	;There are 3 active tblptr bytes
 10635  000DF8  6AF8               	clrf	tblptru,c
 10636  000DFA  0E00               	movlw	low (__mediumconst shr (0+16))
 10637  000DFC  22F8               	addwfc	tblptru,f,c
 10638  000DFE                     	endif
 10639  000DFE  0009               	tblrd		*+
 10640  000E00  50F5               	movf	tablat,w,c
 10641  000E02  5C1D               	subwf	i2__doprnt@val,w,c
 10642  000E04  0009               	tblrd		*+
 10643  000E06  50F5               	movf	tablat,w,c
 10644  000E08  581E               	subwfb	i2__doprnt@val+1,w,c
 10645  000E0A  A0D8               	btfss	status,0,c
 10646  000E0C  D025               	goto	i2l7856
 10647                           
 10648                           ;doprnt.c: 1307: break;
 10649  000E0E  2A22               	incf	i2__doprnt@c,f,c
 10650  000E10  D7E7               	goto	i2l7826
 10651  000E12                     i2l7838:
 10652                           
 10653                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 10654  000E12  0E01               	movlw	1
 10655  000E14  6E22               	movwf	i2__doprnt@c,c
 10656  000E16                     i2l7840:
 10657  000E16  0E04               	movlw	4
 10658  000E18  1822               	xorwf	i2__doprnt@c,w,c
 10659  000E1A  B4D8               	btfsc	status,2,c
 10660  000E1C  D01D               	goto	i2l7856
 10661                           
 10662                           ;doprnt.c: 1317: if(val < hexpowers[c])
 10663  000E1E  5022               	movf	i2__doprnt@c,w,c
 10664  000E20  0D02               	mullw	2
 10665  000E22  0EF0               	movlw	low _hexpowers
 10666  000E24  24F3               	addwf	prodl,w,c
 10667  000E26  6EF6               	movwf	tblptrl,c
 10668  000E28  0EFE               	movlw	high _hexpowers
 10669  000E2A  20F4               	addwfc	prodh,w,c
 10670  000E2C  6EF7               	movwf	tblptrh,c
 10671  000E2E                     	if	1	;There are 3 active tblptr bytes
 10672  000E2E  6AF8               	clrf	tblptru,c
 10673  000E30  0E00               	movlw	low (__mediumconst shr (0+16))
 10674  000E32  22F8               	addwfc	tblptru,f,c
 10675  000E34                     	endif
 10676  000E34  0009               	tblrd		*+
 10677  000E36  50F5               	movf	tablat,w,c
 10678  000E38  5C1D               	subwf	i2__doprnt@val,w,c
 10679  000E3A  0009               	tblrd		*+
 10680  000E3C  50F5               	movf	tablat,w,c
 10681  000E3E  581E               	subwfb	i2__doprnt@val+1,w,c
 10682  000E40  A0D8               	btfss	status,0,c
 10683  000E42  D00A               	goto	i2l7856
 10684                           
 10685                           ;doprnt.c: 1318: break;
 10686  000E44  2A22               	incf	i2__doprnt@c,f,c
 10687  000E46  D7E7               	goto	i2l7840
 10688  000E48                     i2l7854:
 10689  000E48  501F               	movf	i2__doprnt@flag,w,c
 10690  000E4A  0B80               	andlw	128
 10691                           
 10692                           ; Switch size 1, requested type "space"
 10693                           ; Number of cases is 2, Range of values is 0 to 128
 10694                           ; switch strategies available:
 10695                           ; Name         Instructions Cycles
 10696                           ; simple_byte            7     4 (average)
 10697                           ;	Chosen strategy is simple_byte
 10698  000E4C  0A00               	xorlw	0	; case 0
 10699  000E4E  B4D8               	btfsc	status,2,c
 10700  000E50  D7C5               	goto	i2l7824
 10701  000E52  0A80               	xorlw	128	; case 128
 10702  000E54  B4D8               	btfsc	status,2,c
 10703  000E56  D7DD               	goto	i2l7838
 10704  000E58                     i2l7856:
 10705                           
 10706                           ;doprnt.c: 1345: if(width && flag & 0x03)
 10707  000E58  5020               	movf	i2__doprnt@width,w,c
 10708  000E5A  1021               	iorwf	i2__doprnt@width+1,w,c
 10709  000E5C  B4D8               	btfsc	status,2,c
 10710  000E5E  D009               	goto	i2l7862
 10711  000E60  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 10712  000E64  0E03               	movlw	3
 10713  000E66  1613               	andwf	??i2__doprnt,f,c
 10714  000E68  B4D8               	btfsc	status,2,c
 10715  000E6A  D003               	goto	i2l7862
 10716                           
 10717                           ;doprnt.c: 1346: width--;
 10718  000E6C  0620               	decf	i2__doprnt@width,f,c
 10719  000E6E  A0D8               	btfss	status,0,c
 10720  000E70  0621               	decf	i2__doprnt@width+1,f,c
 10721  000E72                     i2l7862:
 10722                           
 10723                           ;doprnt.c: 1381: if(width > c)
 10724  000E72  0E80               	movlw	128
 10725  000E74  BE22               	btfsc	i2__doprnt@c,7,c
 10726  000E76  0E7F               	movlw	127
 10727  000E78  6E13               	movwf	??i2__doprnt& (0+255),c
 10728  000E7A  5020               	movf	i2__doprnt@width,w,c
 10729  000E7C  5C22               	subwf	i2__doprnt@c,w,c
 10730  000E7E  5021               	movf	i2__doprnt@width+1,w,c
 10731  000E80  0A80               	xorlw	128
 10732  000E82  5813               	subwfb	??i2__doprnt& (0+255),w,c
 10733  000E84  B0D8               	btfsc	status,0,c
 10734  000E86  D007               	goto	i2l7866
 10735                           
 10736                           ;doprnt.c: 1382: width -= c;
 10737  000E88  5022               	movf	i2__doprnt@c,w,c
 10738  000E8A  5E20               	subwf	i2__doprnt@width,f,c
 10739  000E8C  0E00               	movlw	0
 10740  000E8E  BE22               	btfsc	i2__doprnt@c,7,c
 10741  000E90  0EFF               	movlw	255
 10742  000E92  5A21               	subwfb	i2__doprnt@width+1,f,c
 10743  000E94  D004               	goto	i2l7868
 10744  000E96                     i2l7866:
 10745                           
 10746                           ;doprnt.c: 1383: else
 10747                           ;doprnt.c: 1384: width = 0;
 10748  000E96  0E00               	movlw	0
 10749  000E98  6E21               	movwf	i2__doprnt@width+1,c
 10750  000E9A  0E00               	movlw	0
 10751  000E9C  6E20               	movwf	i2__doprnt@width,c
 10752  000E9E                     i2l7868:
 10753                           
 10754                           ;doprnt.c: 1387: if(flag & 0x04) {
 10755  000E9E  A41F               	btfss	i2__doprnt@flag,2,c
 10756  000EA0  D078               	goto	i2l7892
 10757                           
 10758                           ;doprnt.c: 1392: if(flag & 0x03)
 10759  000EA2  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 10760  000EA6  0E03               	movlw	3
 10761  000EA8  1613               	andwf	??i2__doprnt,f,c
 10762  000EAA  B4D8               	btfsc	status,2,c
 10763  000EAC  D035               	goto	i2l7880
 10764                           
 10765                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 10766  000EAE  EE20 F002          	lfsr	2,2
 10767  000EB2  500D               	movf	i2__doprnt@pb,w,c
 10768  000EB4  26D9               	addwf	fsr2l,f,c
 10769  000EB6  500E               	movf	i2__doprnt@pb+1,w,c
 10770  000EB8  22DA               	addwfc	fsr2h,f,c
 10771  000EBA  50DE               	movf	postinc2,w,c
 10772  000EBC  10DE               	iorwf	postinc2,w,c
 10773  000EBE  B4D8               	btfsc	status,2,c
 10774  000EC0  D016               	goto	i2l7876
 10775  000EC2  EE20 F002          	lfsr	2,2
 10776  000EC6  500D               	movf	i2__doprnt@pb,w,c
 10777  000EC8  26D9               	addwf	fsr2l,f,c
 10778  000ECA  500E               	movf	i2__doprnt@pb+1,w,c
 10779  000ECC  22DA               	addwfc	fsr2h,f,c
 10780  000ECE  CFDE F013          	movff	postinc2,??i2__doprnt
 10781  000ED2  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10782  000ED6  D801               	call	i2u1233_48
 10783  000ED8  D01F               	goto	i2l7880
 10784  000EDA                     i2u1233_48:
 10785  000EDA  0005               	push	
 10786  000EDC  6EFA               	movwf	pclath,c
 10787  000EDE  5013               	movf	??i2__doprnt,w,c
 10788  000EE0  6EFD               	movwf	tosl,c
 10789  000EE2  5014               	movf	??i2__doprnt+1,w,c
 10790  000EE4  6EFE               	movwf	tosh,c
 10791  000EE6  6AFF               	clrf	tosu,c
 10792  000EE8  50FA               	movf	pclath,w,c
 10793  000EEA  0E2D               	movlw	45
 10794  000EEC  0012               	return		;indir
 10795  000EEE                     i2l7876:
 10796  000EEE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10797  000EF2  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10798  000EF6  CFDE F013          	movff	postinc2,??i2__doprnt
 10799  000EFA  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10800  000EFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10801  000F02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10802  000F06  0E2D               	movlw	45
 10803  000F08  6EDF               	movwf	indf2,c
 10804  000F0A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10805  000F0E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10806  000F12  2ADE               	incf	postinc2,f,c
 10807  000F14  0E00               	movlw	0
 10808  000F16  22DD               	addwfc	postdec2,f,c
 10809  000F18                     i2l7880:
 10810                           
 10811                           ;doprnt.c: 1415: if(width)
 10812  000F18  5020               	movf	i2__doprnt@width,w,c
 10813  000F1A  1021               	iorwf	i2__doprnt@width+1,w,c
 10814  000F1C  B4D8               	btfsc	status,2,c
 10815  000F1E  D0B4               	goto	i2l7914
 10816                           
 10817                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 10818                           
 10819                           ;doprnt.c: 1416: do
 10820  000F20  EE20 F002          	lfsr	2,2
 10821  000F24  500D               	movf	i2__doprnt@pb,w,c
 10822  000F26  26D9               	addwf	fsr2l,f,c
 10823  000F28  500E               	movf	i2__doprnt@pb+1,w,c
 10824  000F2A  22DA               	addwfc	fsr2h,f,c
 10825  000F2C  50DE               	movf	postinc2,w,c
 10826  000F2E  10DE               	iorwf	postinc2,w,c
 10827  000F30  B4D8               	btfsc	status,2,c
 10828  000F32  D016               	goto	i2l7886
 10829  000F34  EE20 F002          	lfsr	2,2
 10830  000F38  500D               	movf	i2__doprnt@pb,w,c
 10831  000F3A  26D9               	addwf	fsr2l,f,c
 10832  000F3C  500E               	movf	i2__doprnt@pb+1,w,c
 10833  000F3E  22DA               	addwfc	fsr2h,f,c
 10834  000F40  CFDE F013          	movff	postinc2,??i2__doprnt
 10835  000F44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10836  000F48  D801               	call	i2u1236_48
 10837  000F4A  D01F               	goto	i2l7890
 10838  000F4C                     i2u1236_48:
 10839  000F4C  0005               	push	
 10840  000F4E  6EFA               	movwf	pclath,c
 10841  000F50  5013               	movf	??i2__doprnt,w,c
 10842  000F52  6EFD               	movwf	tosl,c
 10843  000F54  5014               	movf	??i2__doprnt+1,w,c
 10844  000F56  6EFE               	movwf	tosh,c
 10845  000F58  6AFF               	clrf	tosu,c
 10846  000F5A  50FA               	movf	pclath,w,c
 10847  000F5C  0E30               	movlw	48
 10848  000F5E  0012               	return		;indir
 10849  000F60                     i2l7886:
 10850  000F60  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10851  000F64  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10852  000F68  CFDE F013          	movff	postinc2,??i2__doprnt
 10853  000F6C  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10854  000F70  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10855  000F74  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10856  000F78  0E30               	movlw	48
 10857  000F7A  6EDF               	movwf	indf2,c
 10858  000F7C  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10859  000F80  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10860  000F84  2ADE               	incf	postinc2,f,c
 10861  000F86  0E00               	movlw	0
 10862  000F88  22DD               	addwfc	postdec2,f,c
 10863  000F8A                     i2l7890:
 10864                           
 10865                           ;doprnt.c: 1418: while(--width);
 10866  000F8A  0620               	decf	i2__doprnt@width,f,c
 10867  000F8C  A0D8               	btfss	status,0,c
 10868  000F8E  0621               	decf	i2__doprnt@width+1,f,c
 10869  000F90  D7C3               	goto	i2l7880
 10870  000F92                     i2l7892:
 10871                           
 10872                           ;doprnt.c: 1422: {
 10873                           ;doprnt.c: 1424: if(width
 10874                           ;doprnt.c: 1428: )
 10875  000F92  5020               	movf	i2__doprnt@width,w,c
 10876  000F94  1021               	iorwf	i2__doprnt@width+1,w,c
 10877  000F96  B4D8               	btfsc	status,2,c
 10878  000F98  D03C               	goto	i2l7904
 10879  000F9A                     i2l7894:
 10880                           
 10881                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 10882  000F9A  EE20 F002          	lfsr	2,2
 10883  000F9E  500D               	movf	i2__doprnt@pb,w,c
 10884  000FA0  26D9               	addwf	fsr2l,f,c
 10885  000FA2  500E               	movf	i2__doprnt@pb+1,w,c
 10886  000FA4  22DA               	addwfc	fsr2h,f,c
 10887  000FA6  50DE               	movf	postinc2,w,c
 10888  000FA8  10DE               	iorwf	postinc2,w,c
 10889  000FAA  B4D8               	btfsc	status,2,c
 10890  000FAC  D016               	goto	i2l7898
 10891  000FAE  EE20 F002          	lfsr	2,2
 10892  000FB2  500D               	movf	i2__doprnt@pb,w,c
 10893  000FB4  26D9               	addwf	fsr2l,f,c
 10894  000FB6  500E               	movf	i2__doprnt@pb+1,w,c
 10895  000FB8  22DA               	addwfc	fsr2h,f,c
 10896  000FBA  CFDE F013          	movff	postinc2,??i2__doprnt
 10897  000FBE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10898  000FC2  D801               	call	i2u1240_48
 10899  000FC4  D01F               	goto	i2l7902
 10900  000FC6                     i2u1240_48:
 10901  000FC6  0005               	push	
 10902  000FC8  6EFA               	movwf	pclath,c
 10903  000FCA  5013               	movf	??i2__doprnt,w,c
 10904  000FCC  6EFD               	movwf	tosl,c
 10905  000FCE  5014               	movf	??i2__doprnt+1,w,c
 10906  000FD0  6EFE               	movwf	tosh,c
 10907  000FD2  6AFF               	clrf	tosu,c
 10908  000FD4  50FA               	movf	pclath,w,c
 10909  000FD6  0E20               	movlw	32
 10910  000FD8  0012               	return		;indir
 10911  000FDA                     i2l7898:
 10912  000FDA  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10913  000FDE  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10914  000FE2  CFDE F013          	movff	postinc2,??i2__doprnt
 10915  000FE6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10916  000FEA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10917  000FEE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10918  000FF2  0E20               	movlw	32
 10919  000FF4  6EDF               	movwf	indf2,c
 10920  000FF6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10921  000FFA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10922  000FFE  2ADE               	incf	postinc2,f,c
 10923  001000  0E00               	movlw	0
 10924  001002  22DD               	addwfc	postdec2,f,c
 10925  001004                     i2l7902:
 10926                           
 10927                           ;doprnt.c: 1431: while(--width);
 10928  001004  0620               	decf	i2__doprnt@width,f,c
 10929  001006  A0D8               	btfss	status,0,c
 10930  001008  0621               	decf	i2__doprnt@width+1,f,c
 10931  00100A  5020               	movf	i2__doprnt@width,w,c
 10932  00100C  1021               	iorwf	i2__doprnt@width+1,w,c
 10933  00100E  A4D8               	btfss	status,2,c
 10934  001010  D7C4               	goto	i2l7894
 10935  001012                     i2l7904:
 10936                           
 10937                           ;doprnt.c: 1438: if(flag & 0x03)
 10938  001012  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 10939  001016  0E03               	movlw	3
 10940  001018  1613               	andwf	??i2__doprnt,f,c
 10941  00101A  B4D8               	btfsc	status,2,c
 10942  00101C  D035               	goto	i2l7914
 10943                           
 10944                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 10945  00101E  EE20 F002          	lfsr	2,2
 10946  001022  500D               	movf	i2__doprnt@pb,w,c
 10947  001024  26D9               	addwf	fsr2l,f,c
 10948  001026  500E               	movf	i2__doprnt@pb+1,w,c
 10949  001028  22DA               	addwfc	fsr2h,f,c
 10950  00102A  50DE               	movf	postinc2,w,c
 10951  00102C  10DE               	iorwf	postinc2,w,c
 10952  00102E  B4D8               	btfsc	status,2,c
 10953  001030  D016               	goto	i2l7910
 10954  001032  EE20 F002          	lfsr	2,2
 10955  001036  500D               	movf	i2__doprnt@pb,w,c
 10956  001038  26D9               	addwf	fsr2l,f,c
 10957  00103A  500E               	movf	i2__doprnt@pb+1,w,c
 10958  00103C  22DA               	addwfc	fsr2h,f,c
 10959  00103E  CFDE F013          	movff	postinc2,??i2__doprnt
 10960  001042  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10961  001046  D801               	call	i2u1244_48
 10962  001048  D01F               	goto	i2l7914
 10963  00104A                     i2u1244_48:
 10964  00104A  0005               	push	
 10965  00104C  6EFA               	movwf	pclath,c
 10966  00104E  5013               	movf	??i2__doprnt,w,c
 10967  001050  6EFD               	movwf	tosl,c
 10968  001052  5014               	movf	??i2__doprnt+1,w,c
 10969  001054  6EFE               	movwf	tosh,c
 10970  001056  6AFF               	clrf	tosu,c
 10971  001058  50FA               	movf	pclath,w,c
 10972  00105A  0E2D               	movlw	45
 10973  00105C  0012               	return		;indir
 10974  00105E                     i2l7910:
 10975  00105E  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10976  001062  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10977  001066  CFDE F013          	movff	postinc2,??i2__doprnt
 10978  00106A  CFDD F014          	movff	postdec2,??i2__doprnt+1
 10979  00106E  C013  FFD9         	movff	??i2__doprnt,fsr2l
 10980  001072  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 10981  001076  0E2D               	movlw	45
 10982  001078  6EDF               	movwf	indf2,c
 10983  00107A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 10984  00107E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 10985  001082  2ADE               	incf	postinc2,f,c
 10986  001084  0E00               	movlw	0
 10987  001086  22DD               	addwfc	postdec2,f,c
 10988  001088                     i2l7914:
 10989                           
 10990                           ;doprnt.c: 1469: }
 10991                           ;doprnt.c: 1472: prec = c;
 10992  001088  C022  F018         	movff	i2__doprnt@c,i2__doprnt@prec
 10993                           
 10994                           ;doprnt.c: 1474: while(prec--) {
 10995  00108C  D08B               	goto	i2l7934
 10996  00108E                     i2l7916:
 10997                           
 10998                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 10999  00108E  5018               	movf	i2__doprnt@prec,w,c
 11000  001090  0D02               	mullw	2
 11001  001092  0EE6               	movlw	low _dpowers
 11002  001094  24F3               	addwf	prodl,w,c
 11003  001096  6EF6               	movwf	tblptrl,c
 11004  001098  0EFE               	movlw	high _dpowers
 11005  00109A  20F4               	addwfc	prodh,w,c
 11006  00109C  6EF7               	movwf	tblptrh,c
 11007  00109E                     	if	1	;There are 3 active tblptr bytes
 11008  00109E  6AF8               	clrf	tblptru,c
 11009  0010A0  0E00               	movlw	low (__mediumconst shr (0+16))
 11010  0010A2  22F8               	addwfc	tblptru,f,c
 11011  0010A4                     	endif
 11012  0010A4  0009               	tblrd		*+
 11013  0010A6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 11014  0010AA  000A               	tblrd		*-
 11015  0010AC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 11016  0010B0  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 11017  0010B4  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 11018  0010B8  EC3E  F017         	call	i2___lwdiv
 11019  0010BC  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 11020  0010C0  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 11021  0010C4  0E00               	movlw	0
 11022  0010C6  6E0B               	movwf	i2___lwmod@divisor+1,c
 11023  0010C8  0E0A               	movlw	10
 11024  0010CA  6E0A               	movwf	i2___lwmod@divisor,c
 11025  0010CC  ECB1  F017         	call	i2___lwmod	;wreg free
 11026  0010D0  5008               	movf	?i2___lwmod,w,c
 11027  0010D2  0F30               	addlw	48
 11028  0010D4  6E22               	movwf	i2__doprnt@c,c
 11029                           
 11030                           ;doprnt.c: 1491: break;
 11031  0010D6  D031               	goto	i2l7926
 11032  0010D8                     i2l7918:
 11033                           
 11034                           ;doprnt.c: 1499: {
 11035                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 11036  0010D8  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 11037  0010DC  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 11038  0010E0  5018               	movf	i2__doprnt@prec,w,c
 11039  0010E2  0D02               	mullw	2
 11040  0010E4  0EF0               	movlw	low _hexpowers
 11041  0010E6  24F3               	addwf	prodl,w,c
 11042  0010E8  6EF6               	movwf	tblptrl,c
 11043  0010EA  0EFE               	movlw	high _hexpowers
 11044  0010EC  20F4               	addwfc	prodh,w,c
 11045  0010EE  6EF7               	movwf	tblptrh,c
 11046  0010F0                     	if	1	;There are 3 active tblptr bytes
 11047  0010F0  6AF8               	clrf	tblptru,c
 11048  0010F2  0E00               	movlw	low (__mediumconst shr (0+16))
 11049  0010F4  22F8               	addwfc	tblptru,f,c
 11050  0010F6                     	endif
 11051  0010F6  0009               	tblrd		*+
 11052  0010F8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 11053  0010FC  000A               	tblrd		*-
 11054  0010FE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 11055  001102  EC3E  F017         	call	i2___lwdiv	;wreg free
 11056  001106  5001               	movf	?i2___lwdiv,w,c
 11057  001108  0B0F               	andlw	15
 11058  00110A  6E17               	movwf	i2__doprnt@idx,c
 11059                           
 11060                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 11061  00110C  5017               	movf	i2__doprnt@idx,w,c
 11062  00110E  0D01               	mullw	1
 11063  001110  0E97               	movlw	low STR_19
 11064  001112  24F3               	addwf	prodl,w,c
 11065  001114  6EF6               	movwf	tblptrl,c
 11066  001116  0EFF               	movlw	high STR_19
 11067  001118  20F4               	addwfc	prodh,w,c
 11068  00111A  6EF7               	movwf	tblptrh,c
 11069  00111C                     	if	1	;There are 3 active tblptr bytes
 11070  00111C  6AF8               	clrf	tblptru,c
 11071  00111E  0E00               	movlw	low (__mediumconst shr (0+16))
 11072  001120  22F8               	addwfc	tblptru,f,c
 11073  001122                     	endif
 11074  001122  0008               	tblrd		*
 11075  001124  CFF5 F022          	movff	tablat,i2__doprnt@c
 11076                           
 11077                           ;doprnt.c: 1523: }
 11078                           
 11079                           ;doprnt.c: 1508: }
 11080                           ;doprnt.c: 1510: break;
 11081  001128  D008               	goto	i2l7926
 11082  00112A                     i2l7924:
 11083  00112A  501F               	movf	i2__doprnt@flag,w,c
 11084  00112C  0B80               	andlw	128
 11085                           
 11086                           ; Switch size 1, requested type "space"
 11087                           ; Number of cases is 2, Range of values is 0 to 128
 11088                           ; switch strategies available:
 11089                           ; Name         Instructions Cycles
 11090                           ; simple_byte            7     4 (average)
 11091                           ;	Chosen strategy is simple_byte
 11092  00112E  0A00               	xorlw	0	; case 0
 11093  001130  B4D8               	btfsc	status,2,c
 11094  001132  D7AD               	goto	i2l7916
 11095  001134  0A80               	xorlw	128	; case 128
 11096  001136  B4D8               	btfsc	status,2,c
 11097  001138  D7CF               	goto	i2l7918
 11098  00113A                     i2l7926:
 11099                           
 11100                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 11101  00113A  EE20 F002          	lfsr	2,2
 11102  00113E  500D               	movf	i2__doprnt@pb,w,c
 11103  001140  26D9               	addwf	fsr2l,f,c
 11104  001142  500E               	movf	i2__doprnt@pb+1,w,c
 11105  001144  22DA               	addwfc	fsr2h,f,c
 11106  001146  50DE               	movf	postinc2,w,c
 11107  001148  10DE               	iorwf	postinc2,w,c
 11108  00114A  B4D8               	btfsc	status,2,c
 11109  00114C  D016               	goto	i2l7930
 11110  00114E  EE20 F002          	lfsr	2,2
 11111  001152  500D               	movf	i2__doprnt@pb,w,c
 11112  001154  26D9               	addwf	fsr2l,f,c
 11113  001156  500E               	movf	i2__doprnt@pb+1,w,c
 11114  001158  22DA               	addwfc	fsr2h,f,c
 11115  00115A  CFDE F013          	movff	postinc2,??i2__doprnt
 11116  00115E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11117  001162  D801               	call	i2u1246_48
 11118  001164  D01F               	goto	i2l7934
 11119  001166                     i2u1246_48:
 11120  001166  0005               	push	
 11121  001168  6EFA               	movwf	pclath,c
 11122  00116A  5013               	movf	??i2__doprnt,w,c
 11123  00116C  6EFD               	movwf	tosl,c
 11124  00116E  5014               	movf	??i2__doprnt+1,w,c
 11125  001170  6EFE               	movwf	tosh,c
 11126  001172  6AFF               	clrf	tosu,c
 11127  001174  50FA               	movf	pclath,w,c
 11128  001176  5022               	movf	i2__doprnt@c,w,c
 11129  001178  0012               	return		;indir
 11130  00117A                     i2l7930:
 11131  00117A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11132  00117E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11133  001182  CFDE F013          	movff	postinc2,??i2__doprnt
 11134  001186  CFDD F014          	movff	postdec2,??i2__doprnt+1
 11135  00118A  C013  FFD9         	movff	??i2__doprnt,fsr2l
 11136  00118E  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 11137  001192  C022  FFDF         	movff	i2__doprnt@c,indf2
 11138  001196  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 11139  00119A  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 11140  00119E  2ADE               	incf	postinc2,f,c
 11141  0011A0  0E00               	movlw	0
 11142  0011A2  22DD               	addwfc	postdec2,f,c
 11143  0011A4                     i2l7934:
 11144  0011A4  0618               	decf	i2__doprnt@prec,f,c
 11145  0011A6  2818               	incf	i2__doprnt@prec,w,c
 11146  0011A8  A4D8               	btfss	status,2,c
 11147  0011AA  D7BF               	goto	i2l7924
 11148  0011AC                     i2l7936:
 11149  0011AC  500F               	movf	i2__doprnt@f,w,c
 11150  0011AE  6E13               	movwf	??i2__doprnt& (0+255),c
 11151  0011B0  5010               	movf	i2__doprnt@f+1,w,c
 11152  0011B2  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 11153  0011B4  4A0F               	infsnz	i2__doprnt@f,f,c
 11154  0011B6  2A10               	incf	i2__doprnt@f+1,f,c
 11155  0011B8  C013  FFF6         	movff	??i2__doprnt,tblptrl
 11156  0011BC  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 11157  0011C0  0E00               	movlw	low (__mediumconst shr (0+16))
 11158  0011C2  6EF8               	movwf	tblptru,c
 11159  0011C4  0E0F               	movlw	(high __ramtop+-1)
 11160  0011C6  64F7               	cpfsgt	tblptrh,c
 11161  0011C8  D003               	bra	i2u1248_47
 11162  0011CA  0008               	tblrd		*
 11163  0011CC  50F5               	movf	tablat,w,c
 11164  0011CE  D005               	bra	i2u1248_40
 11165  0011D0                     i2u1248_47:
 11166  0011D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 11167  0011D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 11168  0011D8  50EF               	movf	indf0,w,c
 11169  0011DA                     i2u1248_40:
 11170  0011DA  6E22               	movwf	i2__doprnt@c,c
 11171  0011DC  5022               	movf	i2__doprnt@c,w,c
 11172  0011DE  A4D8               	btfss	status,2,c
 11173  0011E0  EFCD  F004         	goto	i2l7730
 11174  0011E4                     i2l7938:
 11175                           
 11176                           ;doprnt.c: 1540: return 0;
 11177  0011E4  0E00               	movlw	0
 11178  0011E6  6E0E               	movwf	?i2__doprnt+1,c
 11179  0011E8  0E00               	movlw	0
 11180  0011EA  6E0D               	movwf	?i2__doprnt,c
 11181  0011EC  0012               	return	
 11182  0011EE                     __end_ofi2__doprnt:
 11183                           	opt stack 0
 11184                           tosu	equ	0xFFF
 11185                           tosh	equ	0xFFE
 11186                           tosl	equ	0xFFD
 11187                           pclatu	equ	0xFFB
 11188                           pclath	equ	0xFFA
 11189                           tblptru	equ	0xFF8
 11190                           tblptrh	equ	0xFF7
 11191                           tblptrl	equ	0xFF6
 11192                           tablat	equ	0xFF5
 11193                           prodh	equ	0xFF4
 11194                           prodl	equ	0xFF3
 11195                           intcon	equ	0xFF2
 11196                           intcon2	equ	0xFF1
 11197                           intcon3	equ	0xFF0
 11198                           indf0	equ	0xFEF
 11199                           postinc0	equ	0xFEE
 11200                           fsr0h	equ	0xFEA
 11201                           fsr0l	equ	0xFE9
 11202                           wreg	equ	0xFE8
 11203                           indf1	equ	0xFE7
 11204                           postinc1	equ	0xFE6
 11205                           postdec1	equ	0xFE5
 11206                           fsr1h	equ	0xFE2
 11207                           fsr1l	equ	0xFE1
 11208                           indf2	equ	0xFDF
 11209                           postinc2	equ	0xFDE
 11210                           postdec2	equ	0xFDD
 11211                           fsr2h	equ	0xFDA
 11212                           fsr2l	equ	0xFD9
 11213                           status	equ	0xFD8
 11214                           
 11215 ;; *************** function i2_putch *****************
 11216 ;; Defined at:
 11217 ;;		line 30 in file "lcd.c"
 11218 ;; Parameters:    Size  Location     Type
 11219 ;;  data            1    wreg     unsigned char 
 11220 ;; Auto vars:     Size  Location     Type
 11221 ;;  data            1    2[COMRAM] unsigned char 
 11222 ;; Return value:  Size  Location     Type
 11223 ;;                  1    wreg      void 
 11224 ;; Registers used:
 11225 ;;		wreg, status,2, status,0, cstack
 11226 ;; Tracked objects:
 11227 ;;		On entry : 0/0
 11228 ;;		On exit  : 0/0
 11229 ;;		Unchanged: 0/0
 11230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11231 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11232 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11233 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11234 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11235 ;;Total ram usage:        1 bytes
 11236 ;; Hardware stack levels used:    1
 11237 ;; Hardware stack levels required when called:    1
 11238 ;; This function calls:
 11239 ;;		i2_lcdNibble
 11240 ;; This function is called by:
 11241 ;;		i2_printf
 11242 ;; This function uses a non-reentrant model
 11243 ;;
 11244                           
 11245                           	psect	text34
 11246  003168                     __ptext34:
 11247                           	opt stack 0
 11248  003168                     i2_putch:
 11249                           	opt stack 20
 11250                           
 11251                           ;incstack = 0
 11252                           ;i2putch@data stored from wreg
 11253  003168  6E03               	movwf	i2putch@data,c
 11254                           
 11255                           ;lcd.c: 31: LATDbits.LATD2 = 1;
 11256  00316A  848C               	bsf	3980,2,c	;volatile
 11257                           
 11258                           ;lcd.c: 32: lcdNibble(data);
 11259  00316C  5003               	movf	i2putch@data,w,c
 11260  00316E  ECEA  F016         	call	i2_lcdNibble
 11261  003172  0012               	return		;funcret
 11262  003174                     __end_ofi2_putch:
 11263                           	opt stack 0
 11264                           tosu	equ	0xFFF
 11265                           tosh	equ	0xFFE
 11266                           tosl	equ	0xFFD
 11267                           pclatu	equ	0xFFB
 11268                           pclath	equ	0xFFA
 11269                           tblptru	equ	0xFF8
 11270                           tblptrh	equ	0xFF7
 11271                           tblptrl	equ	0xFF6
 11272                           tablat	equ	0xFF5
 11273                           prodh	equ	0xFF4
 11274                           prodl	equ	0xFF3
 11275                           intcon	equ	0xFF2
 11276                           intcon2	equ	0xFF1
 11277                           intcon3	equ	0xFF0
 11278                           indf0	equ	0xFEF
 11279                           postinc0	equ	0xFEE
 11280                           fsr0h	equ	0xFEA
 11281                           fsr0l	equ	0xFE9
 11282                           wreg	equ	0xFE8
 11283                           indf1	equ	0xFE7
 11284                           postinc1	equ	0xFE6
 11285                           postdec1	equ	0xFE5
 11286                           fsr1h	equ	0xFE2
 11287                           fsr1l	equ	0xFE1
 11288                           indf2	equ	0xFDF
 11289                           postinc2	equ	0xFDE
 11290                           postdec2	equ	0xFDD
 11291                           fsr2h	equ	0xFDA
 11292                           fsr2l	equ	0xFD9
 11293                           status	equ	0xFD8
 11294                           
 11295 ;; *************** function i2_isdigit *****************
 11296 ;; Defined at:
 11297 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 11298 ;; Parameters:    Size  Location     Type
 11299 ;;  c               1    wreg     unsigned char 
 11300 ;; Auto vars:     Size  Location     Type
 11301 ;;  c               1    2[COMRAM] unsigned char 
 11302 ;; Return value:  Size  Location     Type
 11303 ;;		None               void
 11304 ;; Registers used:
 11305 ;;		wreg, status,2, status,0
 11306 ;; Tracked objects:
 11307 ;;		On entry : 0/0
 11308 ;;		On exit  : 0/0
 11309 ;;		Unchanged: 0/0
 11310 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11311 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11312 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11313 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11314 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11315 ;;Total ram usage:        3 bytes
 11316 ;; Hardware stack levels used:    1
 11317 ;; This function calls:
 11318 ;;		Nothing
 11319 ;; This function is called by:
 11320 ;;		i2__doprnt
 11321 ;; This function uses a non-reentrant model
 11322 ;;
 11323                           
 11324                           	psect	text35
 11325  0030EC                     __ptext35:
 11326                           	opt stack 0
 11327  0030EC                     i2_isdigit:
 11328                           	opt stack 21
 11329                           
 11330                           ;incstack = 0
 11331                           ;i2isdigit@c stored from wreg
 11332  0030EC  6E03               	movwf	i2isdigit@c,c
 11333  0030EE  0E00               	movlw	0
 11334  0030F0  6E02               	movwf	i2_isdigit$714,c
 11335  0030F2  0E3A               	movlw	58
 11336  0030F4  6003               	cpfslt	i2isdigit@c,c
 11337  0030F6  D005               	goto	i2l3104
 11338  0030F8  0E2F               	movlw	47
 11339  0030FA  6403               	cpfsgt	i2isdigit@c,c
 11340  0030FC  D002               	goto	i2l3104
 11341  0030FE  0E01               	movlw	1
 11342  003100  6E02               	movwf	i2_isdigit$714,c
 11343  003102                     i2l3104:
 11344  003102  C002  F001         	movff	i2_isdigit$714,??i2_isdigit
 11345  003106  3001               	rrcf	??i2_isdigit,w,c
 11346  003108  0012               	return	
 11347  00310A                     __end_ofi2_isdigit:
 11348                           	opt stack 0
 11349                           tosu	equ	0xFFF
 11350                           tosh	equ	0xFFE
 11351                           tosl	equ	0xFFD
 11352                           pclatu	equ	0xFFB
 11353                           pclath	equ	0xFFA
 11354                           tblptru	equ	0xFF8
 11355                           tblptrh	equ	0xFF7
 11356                           tblptrl	equ	0xFF6
 11357                           tablat	equ	0xFF5
 11358                           prodh	equ	0xFF4
 11359                           prodl	equ	0xFF3
 11360                           intcon	equ	0xFF2
 11361                           intcon2	equ	0xFF1
 11362                           intcon3	equ	0xFF0
 11363                           indf0	equ	0xFEF
 11364                           postinc0	equ	0xFEE
 11365                           fsr0h	equ	0xFEA
 11366                           fsr0l	equ	0xFE9
 11367                           wreg	equ	0xFE8
 11368                           indf1	equ	0xFE7
 11369                           postinc1	equ	0xFE6
 11370                           postdec1	equ	0xFE5
 11371                           fsr1h	equ	0xFE2
 11372                           fsr1l	equ	0xFE1
 11373                           indf2	equ	0xFDF
 11374                           postinc2	equ	0xFDE
 11375                           postdec2	equ	0xFDD
 11376                           fsr2h	equ	0xFDA
 11377                           fsr2l	equ	0xFD9
 11378                           status	equ	0xFD8
 11379                           
 11380 ;; *************** function i2___wmul *****************
 11381 ;; Defined at:
 11382 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 11383 ;; Parameters:    Size  Location     Type
 11384 ;;  multiplier      2    0[COMRAM] unsigned int 
 11385 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11386 ;; Auto vars:     Size  Location     Type
 11387 ;;  __wmul          2    4[COMRAM] unsigned int 
 11388 ;; Return value:  Size  Location     Type
 11389 ;;                  2    0[COMRAM] unsigned int 
 11390 ;; Registers used:
 11391 ;;		wreg, status,2, status,0, prodl, prodh
 11392 ;; Tracked objects:
 11393 ;;		On entry : 0/0
 11394 ;;		On exit  : 0/0
 11395 ;;		Unchanged: 0/0
 11396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11397 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11398 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11399 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11400 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11401 ;;Total ram usage:        6 bytes
 11402 ;; Hardware stack levels used:    1
 11403 ;; This function calls:
 11404 ;;		Nothing
 11405 ;; This function is called by:
 11406 ;;		i2__doprnt
 11407 ;; This function uses a non-reentrant model
 11408 ;;
 11409                           
 11410                           	psect	text36
 11411  0030C6                     __ptext36:
 11412                           	opt stack 0
 11413  0030C6                     i2___wmul:
 11414                           	opt stack 21
 11415                           
 11416                           ;incstack = 0
 11417  0030C6  5001               	movf	i2___wmul@multiplier,w,c
 11418  0030C8  0203               	mulwf	i2___wmul@multiplicand,c
 11419  0030CA  CFF3 F005          	movff	prodl,i2___wmul@product
 11420  0030CE  CFF4 F006          	movff	prodh,i2___wmul@product+1
 11421  0030D2  5001               	movf	i2___wmul@multiplier,w,c
 11422  0030D4  0204               	mulwf	i2___wmul@multiplicand+1,c
 11423  0030D6  50F3               	movf	prodl,w,c
 11424  0030D8  2606               	addwf	i2___wmul@product+1,f,c
 11425  0030DA  5002               	movf	i2___wmul@multiplier+1,w,c
 11426  0030DC  0203               	mulwf	i2___wmul@multiplicand,c
 11427  0030DE  50F3               	movf	prodl,w,c
 11428  0030E0  2606               	addwf	i2___wmul@product+1,f,c
 11429  0030E2  C005  F001         	movff	i2___wmul@product,?i2___wmul
 11430  0030E6  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 11431  0030EA  0012               	return	
 11432  0030EC                     __end_ofi2___wmul:
 11433                           	opt stack 0
 11434                           tosu	equ	0xFFF
 11435                           tosh	equ	0xFFE
 11436                           tosl	equ	0xFFD
 11437                           pclatu	equ	0xFFB
 11438                           pclath	equ	0xFFA
 11439                           tblptru	equ	0xFF8
 11440                           tblptrh	equ	0xFF7
 11441                           tblptrl	equ	0xFF6
 11442                           tablat	equ	0xFF5
 11443                           prodh	equ	0xFF4
 11444                           prodl	equ	0xFF3
 11445                           intcon	equ	0xFF2
 11446                           intcon2	equ	0xFF1
 11447                           intcon3	equ	0xFF0
 11448                           indf0	equ	0xFEF
 11449                           postinc0	equ	0xFEE
 11450                           fsr0h	equ	0xFEA
 11451                           fsr0l	equ	0xFE9
 11452                           wreg	equ	0xFE8
 11453                           indf1	equ	0xFE7
 11454                           postinc1	equ	0xFE6
 11455                           postdec1	equ	0xFE5
 11456                           fsr1h	equ	0xFE2
 11457                           fsr1l	equ	0xFE1
 11458                           indf2	equ	0xFDF
 11459                           postinc2	equ	0xFDE
 11460                           postdec2	equ	0xFDD
 11461                           fsr2h	equ	0xFDA
 11462                           fsr2l	equ	0xFD9
 11463                           status	equ	0xFD8
 11464                           
 11465 ;; *************** function i2___lwmod *****************
 11466 ;; Defined at:
 11467 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 11468 ;; Parameters:    Size  Location     Type
 11469 ;;  dividend        2    7[COMRAM] unsigned int 
 11470 ;;  divisor         2    9[COMRAM] unsigned int 
 11471 ;; Auto vars:     Size  Location     Type
 11472 ;;  __lwmod         1   11[COMRAM] unsigned char 
 11473 ;; Return value:  Size  Location     Type
 11474 ;;                  2    7[COMRAM] unsigned int 
 11475 ;; Registers used:
 11476 ;;		wreg, status,2, status,0
 11477 ;; Tracked objects:
 11478 ;;		On entry : 0/0
 11479 ;;		On exit  : 0/0
 11480 ;;		Unchanged: 0/0
 11481 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11482 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11483 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11485 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11486 ;;Total ram usage:        5 bytes
 11487 ;; Hardware stack levels used:    1
 11488 ;; This function calls:
 11489 ;;		Nothing
 11490 ;; This function is called by:
 11491 ;;		i2__doprnt
 11492 ;; This function uses a non-reentrant model
 11493 ;;
 11494                           
 11495                           	psect	text37
 11496  002F62                     __ptext37:
 11497                           	opt stack 0
 11498  002F62                     i2___lwmod:
 11499                           	opt stack 21
 11500                           
 11501                           ;incstack = 0
 11502  002F62  500A               	movf	i2___lwmod@divisor,w,c
 11503  002F64  100B               	iorwf	i2___lwmod@divisor+1,w,c
 11504  002F66  B4D8               	btfsc	status,2,c
 11505  002F68  D018               	goto	i2l977
 11506  002F6A  0E01               	movlw	1
 11507  002F6C  6E0C               	movwf	i2___lwmod@counter,c
 11508  002F6E  D004               	goto	i2l3136
 11509  002F70                     i2l3134:
 11510  002F70  90D8               	bcf	status,0,c
 11511  002F72  360A               	rlcf	i2___lwmod@divisor,f,c
 11512  002F74  360B               	rlcf	i2___lwmod@divisor+1,f,c
 11513  002F76  2A0C               	incf	i2___lwmod@counter,f,c
 11514  002F78                     i2l3136:
 11515  002F78  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 11516  002F7A  D7FA               	goto	i2l3134
 11517  002F7C                     i2l3138:
 11518  002F7C  500A               	movf	i2___lwmod@divisor,w,c
 11519  002F7E  5C08               	subwf	i2___lwmod@dividend,w,c
 11520  002F80  500B               	movf	i2___lwmod@divisor+1,w,c
 11521  002F82  5809               	subwfb	i2___lwmod@dividend+1,w,c
 11522  002F84  A0D8               	btfss	status,0,c
 11523  002F86  D004               	goto	i2l3142
 11524  002F88  500A               	movf	i2___lwmod@divisor,w,c
 11525  002F8A  5E08               	subwf	i2___lwmod@dividend,f,c
 11526  002F8C  500B               	movf	i2___lwmod@divisor+1,w,c
 11527  002F8E  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 11528  002F90                     i2l3142:
 11529  002F90  90D8               	bcf	status,0,c
 11530  002F92  320B               	rrcf	i2___lwmod@divisor+1,f,c
 11531  002F94  320A               	rrcf	i2___lwmod@divisor,f,c
 11532  002F96  2E0C               	decfsz	i2___lwmod@counter,f,c
 11533  002F98  D7F1               	goto	i2l3138
 11534  002F9A                     i2l977:
 11535  002F9A  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 11536  002F9E  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 11537  002FA2  0012               	return		;funcret
 11538  002FA4                     __end_ofi2___lwmod:
 11539                           	opt stack 0
 11540                           tosu	equ	0xFFF
 11541                           tosh	equ	0xFFE
 11542                           tosl	equ	0xFFD
 11543                           pclatu	equ	0xFFB
 11544                           pclath	equ	0xFFA
 11545                           tblptru	equ	0xFF8
 11546                           tblptrh	equ	0xFF7
 11547                           tblptrl	equ	0xFF6
 11548                           tablat	equ	0xFF5
 11549                           prodh	equ	0xFF4
 11550                           prodl	equ	0xFF3
 11551                           intcon	equ	0xFF2
 11552                           intcon2	equ	0xFF1
 11553                           intcon3	equ	0xFF0
 11554                           indf0	equ	0xFEF
 11555                           postinc0	equ	0xFEE
 11556                           fsr0h	equ	0xFEA
 11557                           fsr0l	equ	0xFE9
 11558                           wreg	equ	0xFE8
 11559                           indf1	equ	0xFE7
 11560                           postinc1	equ	0xFE6
 11561                           postdec1	equ	0xFE5
 11562                           fsr1h	equ	0xFE2
 11563                           fsr1l	equ	0xFE1
 11564                           indf2	equ	0xFDF
 11565                           postinc2	equ	0xFDE
 11566                           postdec2	equ	0xFDD
 11567                           fsr2h	equ	0xFDA
 11568                           fsr2l	equ	0xFD9
 11569                           status	equ	0xFD8
 11570                           
 11571 ;; *************** function i2___lwdiv *****************
 11572 ;; Defined at:
 11573 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 11574 ;; Parameters:    Size  Location     Type
 11575 ;;  dividend        2    0[COMRAM] unsigned int 
 11576 ;;  divisor         2    2[COMRAM] unsigned int 
 11577 ;; Auto vars:     Size  Location     Type
 11578 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 11579 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 11580 ;; Return value:  Size  Location     Type
 11581 ;;                  2    0[COMRAM] unsigned int 
 11582 ;; Registers used:
 11583 ;;		wreg, status,2, status,0
 11584 ;; Tracked objects:
 11585 ;;		On entry : 0/0
 11586 ;;		On exit  : 0/0
 11587 ;;		Unchanged: 0/0
 11588 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11589 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11590 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11591 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11592 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11593 ;;Total ram usage:        7 bytes
 11594 ;; Hardware stack levels used:    1
 11595 ;; This function calls:
 11596 ;;		Nothing
 11597 ;; This function is called by:
 11598 ;;		i2__doprnt
 11599 ;; This function uses a non-reentrant model
 11600 ;;
 11601                           
 11602                           	psect	text38
 11603  002E7C                     __ptext38:
 11604                           	opt stack 0
 11605  002E7C                     i2___lwdiv:
 11606                           	opt stack 21
 11607                           
 11608                           ;incstack = 0
 11609  002E7C  0E00               	movlw	0
 11610  002E7E  6E06               	movwf	i2___lwdiv@quotient+1,c
 11611  002E80  0E00               	movlw	0
 11612  002E82  6E05               	movwf	i2___lwdiv@quotient,c
 11613  002E84  5003               	movf	i2___lwdiv@divisor,w,c
 11614  002E86  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 11615  002E88  B4D8               	btfsc	status,2,c
 11616  002E8A  D01C               	goto	i2l967
 11617  002E8C  0E01               	movlw	1
 11618  002E8E  6E07               	movwf	i2___lwdiv@counter,c
 11619  002E90  D004               	goto	i2l3116
 11620  002E92                     i2l3114:
 11621  002E92  90D8               	bcf	status,0,c
 11622  002E94  3603               	rlcf	i2___lwdiv@divisor,f,c
 11623  002E96  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 11624  002E98  2A07               	incf	i2___lwdiv@counter,f,c
 11625  002E9A                     i2l3116:
 11626  002E9A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 11627  002E9C  D7FA               	goto	i2l3114
 11628  002E9E                     i2l3118:
 11629  002E9E  90D8               	bcf	status,0,c
 11630  002EA0  3605               	rlcf	i2___lwdiv@quotient,f,c
 11631  002EA2  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 11632  002EA4  5003               	movf	i2___lwdiv@divisor,w,c
 11633  002EA6  5C01               	subwf	i2___lwdiv@dividend,w,c
 11634  002EA8  5004               	movf	i2___lwdiv@divisor+1,w,c
 11635  002EAA  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 11636  002EAC  A0D8               	btfss	status,0,c
 11637  002EAE  D005               	goto	i2l3126
 11638  002EB0  5003               	movf	i2___lwdiv@divisor,w,c
 11639  002EB2  5E01               	subwf	i2___lwdiv@dividend,f,c
 11640  002EB4  5004               	movf	i2___lwdiv@divisor+1,w,c
 11641  002EB6  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 11642  002EB8  8005               	bsf	i2___lwdiv@quotient,0,c
 11643  002EBA                     i2l3126:
 11644  002EBA  90D8               	bcf	status,0,c
 11645  002EBC  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 11646  002EBE  3203               	rrcf	i2___lwdiv@divisor,f,c
 11647  002EC0  2E07               	decfsz	i2___lwdiv@counter,f,c
 11648  002EC2  D7ED               	goto	i2l3118
 11649  002EC4                     i2l967:
 11650  002EC4  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 11651  002EC8  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 11652  002ECC  0012               	return		;funcret
 11653  002ECE                     __end_ofi2___lwdiv:
 11654                           	opt stack 0
 11655                           tosu	equ	0xFFF
 11656                           tosh	equ	0xFFE
 11657                           tosl	equ	0xFFD
 11658                           pclatu	equ	0xFFB
 11659                           pclath	equ	0xFFA
 11660                           tblptru	equ	0xFF8
 11661                           tblptrh	equ	0xFF7
 11662                           tblptrl	equ	0xFF6
 11663                           tablat	equ	0xFF5
 11664                           prodh	equ	0xFF4
 11665                           prodl	equ	0xFF3
 11666                           intcon	equ	0xFF2
 11667                           intcon2	equ	0xFF1
 11668                           intcon3	equ	0xFF0
 11669                           indf0	equ	0xFEF
 11670                           postinc0	equ	0xFEE
 11671                           fsr0h	equ	0xFEA
 11672                           fsr0l	equ	0xFE9
 11673                           wreg	equ	0xFE8
 11674                           indf1	equ	0xFE7
 11675                           postinc1	equ	0xFE6
 11676                           postdec1	equ	0xFE5
 11677                           fsr1h	equ	0xFE2
 11678                           fsr1l	equ	0xFE1
 11679                           indf2	equ	0xFDF
 11680                           postinc2	equ	0xFDE
 11681                           postdec2	equ	0xFDD
 11682                           fsr2h	equ	0xFDA
 11683                           fsr2l	equ	0xFD9
 11684                           status	equ	0xFD8
 11685                           
 11686 ;; *************** function i2_lcdInst *****************
 11687 ;; Defined at:
 11688 ;;		line 25 in file "lcd.c"
 11689 ;; Parameters:    Size  Location     Type
 11690 ;;  data            1    wreg     unsigned char 
 11691 ;; Auto vars:     Size  Location     Type
 11692 ;;  data            1    2[COMRAM] unsigned char 
 11693 ;; Return value:  Size  Location     Type
 11694 ;;                  1    wreg      void 
 11695 ;; Registers used:
 11696 ;;		wreg, status,2, status,0, cstack
 11697 ;; Tracked objects:
 11698 ;;		On entry : 0/0
 11699 ;;		On exit  : 0/0
 11700 ;;		Unchanged: 0/0
 11701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11702 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11703 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11705 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11706 ;;Total ram usage:        1 bytes
 11707 ;; Hardware stack levels used:    1
 11708 ;; Hardware stack levels required when called:    1
 11709 ;; This function calls:
 11710 ;;		i2_lcdNibble
 11711 ;; This function is called by:
 11712 ;;		_keypressed
 11713 ;; This function uses a non-reentrant model
 11714 ;;
 11715                           
 11716                           	psect	text39
 11717  003174                     __ptext39:
 11718                           	opt stack 0
 11719  003174                     i2_lcdInst:
 11720                           	opt stack 22
 11721                           
 11722                           ;incstack = 0
 11723                           ;i2lcdInst@data stored from wreg
 11724  003174  6E03               	movwf	i2lcdInst@data,c
 11725                           
 11726                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 11727  003176  948C               	bcf	3980,2,c	;volatile
 11728                           
 11729                           ;lcd.c: 27: lcdNibble(data);
 11730  003178  5003               	movf	i2lcdInst@data,w,c
 11731  00317A  ECEA  F016         	call	i2_lcdNibble
 11732  00317E  0012               	return		;funcret
 11733  003180                     __end_ofi2_lcdInst:
 11734                           	opt stack 0
 11735                           tosu	equ	0xFFF
 11736                           tosh	equ	0xFFE
 11737                           tosl	equ	0xFFD
 11738                           pclatu	equ	0xFFB
 11739                           pclath	equ	0xFFA
 11740                           tblptru	equ	0xFF8
 11741                           tblptrh	equ	0xFF7
 11742                           tblptrl	equ	0xFF6
 11743                           tablat	equ	0xFF5
 11744                           prodh	equ	0xFF4
 11745                           prodl	equ	0xFF3
 11746                           intcon	equ	0xFF2
 11747                           intcon2	equ	0xFF1
 11748                           intcon3	equ	0xFF0
 11749                           indf0	equ	0xFEF
 11750                           postinc0	equ	0xFEE
 11751                           fsr0h	equ	0xFEA
 11752                           fsr0l	equ	0xFE9
 11753                           wreg	equ	0xFE8
 11754                           indf1	equ	0xFE7
 11755                           postinc1	equ	0xFE6
 11756                           postdec1	equ	0xFE5
 11757                           fsr1h	equ	0xFE2
 11758                           fsr1l	equ	0xFE1
 11759                           indf2	equ	0xFDF
 11760                           postinc2	equ	0xFDE
 11761                           postdec2	equ	0xFDD
 11762                           fsr2h	equ	0xFDA
 11763                           fsr2l	equ	0xFD9
 11764                           status	equ	0xFD8
 11765                           
 11766 ;; *************** function i2_lcdNibble *****************
 11767 ;; Defined at:
 11768 ;;		line 35 in file "lcd.c"
 11769 ;; Parameters:    Size  Location     Type
 11770 ;;  data            1    wreg     unsigned char 
 11771 ;; Auto vars:     Size  Location     Type
 11772 ;;  data            1    1[COMRAM] unsigned char 
 11773 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 11774 ;; Return value:  Size  Location     Type
 11775 ;;                  1    wreg      void 
 11776 ;; Registers used:
 11777 ;;		wreg, status,2, status,0
 11778 ;; Tracked objects:
 11779 ;;		On entry : 0/0
 11780 ;;		On exit  : 0/0
 11781 ;;		Unchanged: 0/0
 11782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11784 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11786 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11787 ;;Total ram usage:        2 bytes
 11788 ;; Hardware stack levels used:    1
 11789 ;; This function calls:
 11790 ;;		Nothing
 11791 ;; This function is called by:
 11792 ;;		i2_lcdInst
 11793 ;;		i2_putch
 11794 ;; This function uses a non-reentrant model
 11795 ;;
 11796                           
 11797                           	psect	text40
 11798  002DD4                     __ptext40:
 11799                           	opt stack 0
 11800  002DD4                     i2_lcdNibble:
 11801                           	opt stack 20
 11802                           
 11803                           ;incstack = 0
 11804                           ;i2lcdNibble@data stored from wreg
 11805  002DD4  6E02               	movwf	i2lcdNibble@data,c
 11806                           
 11807                           ;lcd.c: 37: char temp = data & 0xF0;
 11808  002DD6  5002               	movf	i2lcdNibble@data,w,c
 11809  002DD8  0BF0               	andlw	240
 11810  002DDA  6E01               	movwf	i2lcdNibble@temp,c
 11811                           
 11812                           ;lcd.c: 38: LATD = LATD & 0x0F;
 11813  002DDC  508C               	movf	3980,w,c	;volatile
 11814  002DDE  0B0F               	andlw	15
 11815  002DE0  6E8C               	movwf	3980,c	;volatile
 11816                           
 11817                           ;lcd.c: 39: LATD = temp | LATD;
 11818  002DE2  5001               	movf	i2lcdNibble@temp,w,c
 11819  002DE4  108C               	iorwf	3980,w,c	;volatile
 11820  002DE6  6E8C               	movwf	3980,c	;volatile
 11821                           
 11822                           ;lcd.c: 41: LATDbits.LATD3 = 0;
 11823  002DE8  968C               	bcf	3980,3,c	;volatile
 11824                           
 11825                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11826  002DEA  0E14               	movlw	20
 11827  002DEC                     i2u1314_47:
 11828  002DEC  2EE8               	decfsz	wreg,f,c
 11829  002DEE  D7FE               	bra	i2u1314_47
 11830  002DF0  D000               	nop2	
 11831                           
 11832                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 11833  002DF2  868C               	bsf	3980,3,c	;volatile
 11834                           
 11835                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11836  002DF4  0E14               	movlw	20
 11837  002DF6                     i2u1315_47:
 11838  002DF6  2EE8               	decfsz	wreg,f,c
 11839  002DF8  D7FE               	bra	i2u1315_47
 11840  002DFA  D000               	nop2	
 11841                           
 11842                           ;lcd.c: 46: data = data << 4;
 11843  002DFC  3802               	swapf	i2lcdNibble@data,w,c
 11844  002DFE  0BF0               	andlw	240
 11845  002E00  6E02               	movwf	i2lcdNibble@data,c
 11846                           
 11847                           ;lcd.c: 48: temp = data & 0xF0;
 11848  002E02  5002               	movf	i2lcdNibble@data,w,c
 11849  002E04  0BF0               	andlw	240
 11850  002E06  6E01               	movwf	i2lcdNibble@temp,c
 11851                           
 11852                           ;lcd.c: 49: LATD = LATD & 0x0F;
 11853  002E08  508C               	movf	3980,w,c	;volatile
 11854  002E0A  0B0F               	andlw	15
 11855  002E0C  6E8C               	movwf	3980,c	;volatile
 11856                           
 11857                           ;lcd.c: 50: LATD = temp | LATD;
 11858  002E0E  5001               	movf	i2lcdNibble@temp,w,c
 11859  002E10  108C               	iorwf	3980,w,c	;volatile
 11860  002E12  6E8C               	movwf	3980,c	;volatile
 11861                           
 11862                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 11863  002E14  968C               	bcf	3980,3,c	;volatile
 11864                           
 11865                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11866  002E16  0E14               	movlw	20
 11867  002E18                     i2u1316_47:
 11868  002E18  2EE8               	decfsz	wreg,f,c
 11869  002E1A  D7FE               	bra	i2u1316_47
 11870  002E1C  D000               	nop2	
 11871                           
 11872                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 11873  002E1E  868C               	bsf	3980,3,c	;volatile
 11874                           
 11875                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
 11876  002E20  0E14               	movlw	20
 11877  002E22                     i2u1317_47:
 11878  002E22  2EE8               	decfsz	wreg,f,c
 11879  002E24  D7FE               	bra	i2u1317_47
 11880  002E26  D000               	nop2	
 11881  002E28  0012               	return		;funcret
 11882  002E2A                     __end_ofi2_lcdNibble:
 11883                           	opt stack 0
 11884                           tosu	equ	0xFFF
 11885                           tosh	equ	0xFFE
 11886                           tosl	equ	0xFFD
 11887                           pclatu	equ	0xFFB
 11888                           pclath	equ	0xFFA
 11889                           tblptru	equ	0xFF8
 11890                           tblptrh	equ	0xFF7
 11891                           tblptrl	equ	0xFF6
 11892                           tablat	equ	0xFF5
 11893                           prodh	equ	0xFF4
 11894                           prodl	equ	0xFF3
 11895                           intcon	equ	0xFF2
 11896                           intcon2	equ	0xFF1
 11897                           intcon3	equ	0xFF0
 11898                           indf0	equ	0xFEF
 11899                           postinc0	equ	0xFEE
 11900                           fsr0h	equ	0xFEA
 11901                           fsr0l	equ	0xFE9
 11902                           wreg	equ	0xFE8
 11903                           indf1	equ	0xFE7
 11904                           postinc1	equ	0xFE6
 11905                           postdec1	equ	0xFE5
 11906                           fsr1h	equ	0xFE2
 11907                           fsr1l	equ	0xFE1
 11908                           indf2	equ	0xFDF
 11909                           postinc2	equ	0xFDE
 11910                           postdec2	equ	0xFDD
 11911                           fsr2h	equ	0xFDA
 11912                           fsr2l	equ	0xFD9
 11913                           status	equ	0xFD8
 11914                           
 11915 ;; *************** function i2___awmod *****************
 11916 ;; Defined at:
 11917 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 11918 ;; Parameters:    Size  Location     Type
 11919 ;;  dividend        2    0[COMRAM] int 
 11920 ;;  divisor         2    2[COMRAM] int 
 11921 ;; Auto vars:     Size  Location     Type
 11922 ;;  __awmod         1    5[COMRAM] unsigned char 
 11923 ;;  __awmod         1    4[COMRAM] unsigned char 
 11924 ;; Return value:  Size  Location     Type
 11925 ;;                  2    0[COMRAM] int 
 11926 ;; Registers used:
 11927 ;;		wreg, status,2, status,0
 11928 ;; Tracked objects:
 11929 ;;		On entry : 0/0
 11930 ;;		On exit  : 0/0
 11931 ;;		Unchanged: 0/0
 11932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11933 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11934 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11936 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11937 ;;Total ram usage:        6 bytes
 11938 ;; Hardware stack levels used:    1
 11939 ;; This function calls:
 11940 ;;		Nothing
 11941 ;; This function is called by:
 11942 ;;		_keypressed
 11943 ;; This function uses a non-reentrant model
 11944 ;;
 11945                           
 11946                           	psect	text41
 11947  002B16                     __ptext41:
 11948                           	opt stack 0
 11949  002B16                     i2___awmod:
 11950                           	opt stack 23
 11951                           
 11952                           ;incstack = 0
 11953  002B16  0E00               	movlw	0
 11954  002B18  6E06               	movwf	i2___awmod@sign,c
 11955  002B1A  AE02               	btfss	i2___awmod@dividend+1,7,c
 11956  002B1C  D006               	goto	i2l3788
 11957  002B1E  6C01               	negf	i2___awmod@dividend,c
 11958  002B20  1E02               	comf	i2___awmod@dividend+1,f,c
 11959  002B22  B0D8               	btfsc	status,0,c
 11960  002B24  2A02               	incf	i2___awmod@dividend+1,f,c
 11961  002B26  0E01               	movlw	1
 11962  002B28  6E06               	movwf	i2___awmod@sign,c
 11963  002B2A                     i2l3788:
 11964  002B2A  AE04               	btfss	i2___awmod@divisor+1,7,c
 11965  002B2C  D004               	goto	i2l3792
 11966  002B2E  6C03               	negf	i2___awmod@divisor,c
 11967  002B30  1E04               	comf	i2___awmod@divisor+1,f,c
 11968  002B32  B0D8               	btfsc	status,0,c
 11969  002B34  2A04               	incf	i2___awmod@divisor+1,f,c
 11970  002B36                     i2l3792:
 11971  002B36  5003               	movf	i2___awmod@divisor,w,c
 11972  002B38  1004               	iorwf	i2___awmod@divisor+1,w,c
 11973  002B3A  B4D8               	btfsc	status,2,c
 11974  002B3C  D018               	goto	i2l3808
 11975  002B3E  0E01               	movlw	1
 11976  002B40  6E05               	movwf	i2___awmod@counter,c
 11977  002B42  D004               	goto	i2l3798
 11978  002B44                     i2l3796:
 11979  002B44  90D8               	bcf	status,0,c
 11980  002B46  3603               	rlcf	i2___awmod@divisor,f,c
 11981  002B48  3604               	rlcf	i2___awmod@divisor+1,f,c
 11982  002B4A  2A05               	incf	i2___awmod@counter,f,c
 11983  002B4C                     i2l3798:
 11984  002B4C  AE04               	btfss	i2___awmod@divisor+1,7,c
 11985  002B4E  D7FA               	goto	i2l3796
 11986  002B50                     i2l3800:
 11987  002B50  5003               	movf	i2___awmod@divisor,w,c
 11988  002B52  5C01               	subwf	i2___awmod@dividend,w,c
 11989  002B54  5004               	movf	i2___awmod@divisor+1,w,c
 11990  002B56  5802               	subwfb	i2___awmod@dividend+1,w,c
 11991  002B58  A0D8               	btfss	status,0,c
 11992  002B5A  D004               	goto	i2l3804
 11993  002B5C  5003               	movf	i2___awmod@divisor,w,c
 11994  002B5E  5E01               	subwf	i2___awmod@dividend,f,c
 11995  002B60  5004               	movf	i2___awmod@divisor+1,w,c
 11996  002B62  5A02               	subwfb	i2___awmod@dividend+1,f,c
 11997  002B64                     i2l3804:
 11998  002B64  90D8               	bcf	status,0,c
 11999  002B66  3204               	rrcf	i2___awmod@divisor+1,f,c
 12000  002B68  3203               	rrcf	i2___awmod@divisor,f,c
 12001  002B6A  2E05               	decfsz	i2___awmod@counter,f,c
 12002  002B6C  D7F1               	goto	i2l3800
 12003  002B6E                     i2l3808:
 12004  002B6E  5006               	movf	i2___awmod@sign,w,c
 12005  002B70  B4D8               	btfsc	status,2,c
 12006  002B72  D004               	goto	i2l3812
 12007  002B74  6C01               	negf	i2___awmod@dividend,c
 12008  002B76  1E02               	comf	i2___awmod@dividend+1,f,c
 12009  002B78  B0D8               	btfsc	status,0,c
 12010  002B7A  2A02               	incf	i2___awmod@dividend+1,f,c
 12011  002B7C                     i2l3812:
 12012  002B7C  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 12013  002B80  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 12014  002B84  0012               	return	
 12015  002B86                     __end_ofi2___awmod:
 12016                           	opt stack 0
 12017                           tosu	equ	0xFFF
 12018                           tosh	equ	0xFFE
 12019                           tosl	equ	0xFFD
 12020                           pclatu	equ	0xFFB
 12021                           pclath	equ	0xFFA
 12022                           tblptru	equ	0xFF8
 12023                           tblptrh	equ	0xFF7
 12024                           tblptrl	equ	0xFF6
 12025                           tablat	equ	0xFF5
 12026                           prodh	equ	0xFF4
 12027                           prodl	equ	0xFF3
 12028                           intcon	equ	0xFF2
 12029                           intcon2	equ	0xFF1
 12030                           intcon3	equ	0xFF0
 12031                           indf0	equ	0xFEF
 12032                           postinc0	equ	0xFEE
 12033                           fsr0h	equ	0xFEA
 12034                           fsr0l	equ	0xFE9
 12035                           wreg	equ	0xFE8
 12036                           indf1	equ	0xFE7
 12037                           postinc1	equ	0xFE6
 12038                           postdec1	equ	0xFE5
 12039                           fsr1h	equ	0xFE2
 12040                           fsr1l	equ	0xFE1
 12041                           indf2	equ	0xFDF
 12042                           postinc2	equ	0xFDE
 12043                           postdec2	equ	0xFDD
 12044                           fsr2h	equ	0xFDA
 12045                           fsr2l	equ	0xFD9
 12046                           status	equ	0xFD8
 12047                           tosu	equ	0xFFF
 12048                           tosh	equ	0xFFE
 12049                           tosl	equ	0xFFD
 12050                           pclatu	equ	0xFFB
 12051                           pclath	equ	0xFFA
 12052                           tblptru	equ	0xFF8
 12053                           tblptrh	equ	0xFF7
 12054                           tblptrl	equ	0xFF6
 12055                           tablat	equ	0xFF5
 12056                           prodh	equ	0xFF4
 12057                           prodl	equ	0xFF3
 12058                           intcon	equ	0xFF2
 12059                           intcon2	equ	0xFF1
 12060                           intcon3	equ	0xFF0
 12061                           indf0	equ	0xFEF
 12062                           postinc0	equ	0xFEE
 12063                           fsr0h	equ	0xFEA
 12064                           fsr0l	equ	0xFE9
 12065                           wreg	equ	0xFE8
 12066                           indf1	equ	0xFE7
 12067                           postinc1	equ	0xFE6
 12068                           postdec1	equ	0xFE5
 12069                           fsr1h	equ	0xFE2
 12070                           fsr1l	equ	0xFE1
 12071                           indf2	equ	0xFDF
 12072                           postinc2	equ	0xFDE
 12073                           postdec2	equ	0xFDD
 12074                           fsr2h	equ	0xFDA
 12075                           fsr2l	equ	0xFD9
 12076                           status	equ	0xFD8
 12077                           
 12078                           	psect	text42
 12079  000000                     __ptext42:
 12080                           	opt stack 0
 12081                           tosu	equ	0xFFF
 12082                           tosh	equ	0xFFE
 12083                           tosl	equ	0xFFD
 12084                           pclatu	equ	0xFFB
 12085                           pclath	equ	0xFFA
 12086                           tblptru	equ	0xFF8
 12087                           tblptrh	equ	0xFF7
 12088                           tblptrl	equ	0xFF6
 12089                           tablat	equ	0xFF5
 12090                           prodh	equ	0xFF4
 12091                           prodl	equ	0xFF3
 12092                           intcon	equ	0xFF2
 12093                           intcon2	equ	0xFF1
 12094                           intcon3	equ	0xFF0
 12095                           indf0	equ	0xFEF
 12096                           postinc0	equ	0xFEE
 12097                           fsr0h	equ	0xFEA
 12098                           fsr0l	equ	0xFE9
 12099                           wreg	equ	0xFE8
 12100                           indf1	equ	0xFE7
 12101                           postinc1	equ	0xFE6
 12102                           postdec1	equ	0xFE5
 12103                           fsr1h	equ	0xFE2
 12104                           fsr1l	equ	0xFE1
 12105                           indf2	equ	0xFDF
 12106                           postinc2	equ	0xFDE
 12107                           postdec2	equ	0xFDD
 12108                           fsr2h	equ	0xFDA
 12109                           fsr2l	equ	0xFD9
 12110                           status	equ	0xFD8
 12111                           
 12112                           	psect	rparam
 12113  0000                     tosu	equ	0xFFF
 12114                           tosh	equ	0xFFE
 12115                           tosl	equ	0xFFD
 12116                           pclatu	equ	0xFFB
 12117                           pclath	equ	0xFFA
 12118                           tblptru	equ	0xFF8
 12119                           tblptrh	equ	0xFF7
 12120                           tblptrl	equ	0xFF6
 12121                           tablat	equ	0xFF5
 12122                           prodh	equ	0xFF4
 12123                           prodl	equ	0xFF3
 12124                           intcon	equ	0xFF2
 12125                           intcon2	equ	0xFF1
 12126                           intcon3	equ	0xFF0
 12127                           indf0	equ	0xFEF
 12128                           postinc0	equ	0xFEE
 12129                           fsr0h	equ	0xFEA
 12130                           fsr0l	equ	0xFE9
 12131                           wreg	equ	0xFE8
 12132                           indf1	equ	0xFE7
 12133                           postinc1	equ	0xFE6
 12134                           postdec1	equ	0xFE5
 12135                           fsr1h	equ	0xFE2
 12136                           fsr1l	equ	0xFE1
 12137                           indf2	equ	0xFDF
 12138                           postinc2	equ	0xFDE
 12139                           postdec2	equ	0xFDD
 12140                           fsr2h	equ	0xFDA
 12141                           fsr2l	equ	0xFD9
 12142                           status	equ	0xFD8
 12143                           
 12144                           	psect	temp
 12145  000077                     btemp:
 12146                           	opt stack 0
 12147  000077                     	ds	1
 12148  0000                     int$flags	set	btemp
 12149                           tosu	equ	0xFFF
 12150                           tosh	equ	0xFFE
 12151                           tosl	equ	0xFFD
 12152                           pclatu	equ	0xFFB
 12153                           pclath	equ	0xFFA
 12154                           tblptru	equ	0xFF8
 12155                           tblptrh	equ	0xFF7
 12156                           tblptrl	equ	0xFF6
 12157                           tablat	equ	0xFF5
 12158                           prodh	equ	0xFF4
 12159                           prodl	equ	0xFF3
 12160                           intcon	equ	0xFF2
 12161                           intcon2	equ	0xFF1
 12162                           intcon3	equ	0xFF0
 12163                           indf0	equ	0xFEF
 12164                           postinc0	equ	0xFEE
 12165                           fsr0h	equ	0xFEA
 12166                           fsr0l	equ	0xFE9
 12167                           wreg	equ	0xFE8
 12168                           indf1	equ	0xFE7
 12169                           postinc1	equ	0xFE6
 12170                           postdec1	equ	0xFE5
 12171                           fsr1h	equ	0xFE2
 12172                           fsr1l	equ	0xFE1
 12173                           indf2	equ	0xFDF
 12174                           postinc2	equ	0xFDE
 12175                           postdec2	equ	0xFDD
 12176                           fsr2h	equ	0xFDA
 12177                           fsr2l	equ	0xFD9
 12178                           status	equ	0xFD8


Data Sizes:
    Strings     255
    Constant    42
    Data        754
    BSS         197
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     61     118
    BANK0           128     58     122
    BANK1           256     10     120
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    display_menu$1104	PTR const unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_14(CODE[5]), STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), 
		 -> STR_10(CODE[20]), STR_9(CODE[20]), STR_8(CODE[22]), STR_7(CODE[19]), 
		 -> menu(BIGRAM[720]), STR_6(CODE[15]), STR_5(CODE[6]), STR_4(CODE[16]), 
		 -> STR_3(CODE[25]), STR_2(CODE[23]), STR_1(CODE[23]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_17(CODE[14]), STR_16(CODE[15]), STR_15(CODE[8]), display1(BANK1[18]), 
		 -> display0(BANK1[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> i2_putch(), Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), NULL(NULL[0]), STR_18(CODE[7]), 
		 -> _doprnt@c(BANK0[1]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_17(CODE[14]), STR_16(CODE[15]), STR_15(CODE[8]), STR_14(CODE[5]), 
		 -> STR_13(CODE[5]), STR_12(CODE[5]), STR_11(CODE[5]), STR_10(CODE[20]), 
		 -> STR_9(CODE[20]), STR_8(CODE[22]), STR_7(CODE[19]), menu(BIGRAM[720]), 
		 -> STR_6(CODE[15]), STR_5(CODE[6]), STR_4(CODE[16]), STR_3(CODE[25]), 
		 -> STR_2(CODE[23]), STR_1(CODE[23]), display1(BANK1[18]), display0(BANK1[18]), 

    S454__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S454__prbuf$ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    display_menu@menuSizePtr	PTR int  size(2) Largest target is 2
		 -> endSize(BANK0[2]), menuSize(BANK0[2]), creditSize(BANK0[2]), events(BANK0[2]), 

    display_menu@menuIndexPtr	PTR int  size(2) Largest target is 2
		 -> endIndex(BANK0[2]), creditIndex(BANK0[2]), logIndex(BANK0[2]), menuIndex(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    i2_printf->i2__doprnt
    i2__doprnt->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _update_state->_sprintf
    _update_lcd->_printf
    _printf->__doprnt
    _update_display->_display_menu
    _display_menu->_sprintf
    _sprintf->__doprnt
    __doprnt->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _update_RTC->___wmul
    _I2C_Master_Read->_I2C_Master_Wait
    _set_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _read_sensors->_readADC
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    _update_display->_display_menu

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   88199
                                             57 BANK0      1     1      0
                    _I2C_Master_Init
                            _initLCD
                       _read_sensors
                           _set_time
                         _update_RTC
                     _update_display
                         _update_lcd
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         4     4      0   21430
                                             52 BANK0      4     4      0
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _update_lcd                                           7     7      0   15264
                                             42 BANK0      3     3      0
                            _lcdInst
                             _printf
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     417
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4     441
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     6      2   14096
                                             34 BANK0      8     6      2
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _update_display                                       0     0      0   46200
                            ___awdiv
                            ___awmod
                       _display_menu
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _display_menu                                        25    25      0   25080
                                             52 BANK0      5     5      0
                                              0 BANK1     10    10      0
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             18     6     12   17904
                                             34 BANK0     18     6     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            __doprnt
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             26    20      6   11868
                                             12 BANK0     22    16      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    2463
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     753
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _update_RTC                                           5     5      0    3606
                                              6 BANK0      5     5      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2856
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0     592
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     493
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_sensors                                         3     3      0     409
                                              2 BANK0      3     3      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _keypressed                                          19    19      0   11412
                                             42 COMRAM    19    19      0
                          i2___awmod
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_printf                                             8     6      2    8568
                                             34 COMRAM     8     6      2
                          i2__doprnt
 ---------------------------------------------------------------------------------
 (9) i2__doprnt                                           26    20      6    8036
                                             12 COMRAM    22    16      6
                   Absolute function *
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch *
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i2___awmod                                            6     2      4     504
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _read_sensors
     _readADC
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _update_RTC
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
   _update_display
     ___awdiv
     ___awmod
     _display_menu
       ___wmul
       _sprintf
         ___awdiv (ARG)
         ___awmod (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
   _update_lcd
     _lcdInst
       _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _strcmp
     _strcpy
   _update_state
     ___awdiv
     ___awmod
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble

 _keypressed (ROOT)
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2__doprnt
       Absolute function(Fake) *
       i2___lwdiv *
       i2___lwmod *
         i2___lwdiv (ARG)
       i2___wmul *
       i2_isdigit *
       i2_putch *
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0     2D0      37       18.1%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      A      78       7       46.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     3A      7A       5       95.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3D      76       1       93.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     168      34        0.0%
DATA                 0      0     438       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Sat Feb 25 01:55:32 2017

             _update_state 1F24                         l34 3136               ___awdiv@sign 0085  
      ___wmul@multiplicand 0082         i2___lwdiv@dividend 0001                __CFG_BORV$3 000000  
           _update_display 241A               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l493 0480                        l914 2958                        l967 2B0C  
                      l977 2CB2                        _IR1 00C4               __CFG_CPB$OFF 000000  
                      _IR2 011C              ?_display_menu 0001                        _PEN 007E2A  
             __CFG_CPD$OFF 000000                        _SEN 007E28               ___awmod@sign 0085  
                      prod 000FF3                        tosl 000FFD                        wreg 000FE8  
             __CFG_LVP$OFF 000000               __CFG_WDT$OFF 000000                       l5102 25C2  
                     l4400 2CA4                       l5130 21F8                       l5114 265A  
                     l5106 25CC                       l5126 21EE                       l5136 235C  
                     l5090 2CEC                       l4372 2ABC                       l4356 30BC  
                     l5086 2CE2                       l4374 2AC8                       l5096 2D18  
                     l4800 2996                       l4384 2AFE                       l4376 2ACE  
                     l4392 2C6E                       l8000 2196                       l4650 3068  
                     l4394 2C7A                       l8010 241C                       l4740 3084  
                     l4820 2A02                       l4812 29E0                       l4804 29AA  
                     l4396 2C80                       l8012 2486                       l8020 255C  
                     l8004 21AA                       l4830 28DC                       l4742 3096  
                     l4806 29B6                       l8014 248C                       l4662 2D80  
                     l8030 274A                       l4832 28EC                       l4752 280C  
                     l4808 29BC                       l4816 29EE                       l8016 2522  
                     l4664 2D8C                       l4842 2946                       l4834 28F2  
                     l4674 301A                       l4764 2840                       l4780 2890  
                     l7500 0272                       l4668 2DC4                       l4676 3026  
                     l8036 2798                       l4766 284C                       l4758 2822  
                     l7502 027E                       l7510 02EE                       l4784 28A4  
                     l4776 2882                       l4768 2852                       l7512 0306  
                     l7602 066E                       l7506 02C4                       l4796 2986  
                     l7620 0746                       l7612 06EA                       l7516 036C  
                     l7524 03C4                       l7452 0016                       l8076 2BC6  
                     l7614 06F4                       l7526 03DC                       l7518 0374  
                     l7534 041A                       l7462 0098                       l7640 085A  
                     l7632 07D8                       l7624 0770                       l7616 0700  
                     l7608 06C0                       l7560 0532                       l7544 04C6  
                     l7528 0402                       l7464 00AA                       l7704 1858  
                     l7626 0784                       l7562 0538                       l7546 04F0  
                     l7490 01FA                       l7482 01B4                       l7474 0110  
                     l7458 006A                       l7722 1B12                       l7706 1872  
                     l7652 090E                       l7636 0802                       l7548 04F6  
                     l7492 0206                       l7484 01BA                       l7660 098A  
                     l7468 00B4                       l7716 19D2                       l7638 0808  
                     l7646 08B4                       l7590 05EA                       l7494 020C  
                     l7648 08C6                       l7656 0938                       l7584 05A8  
                     l7576 0574                       l7496 024C                       l7680 17C6  
                     l7578 0586                       l7658 0944                       l7588 05E0  
                     l7692 1806                       _ADON 007E10                       l7598 0644  
                     l7686 17E6                       l7950 1F4C                       l7952 1F56  
                     l7698 1834                       l7962 1FA8                       l7946 1F38  
                     l7980 211C                       l7972 202C                       l7956 1F6C  
                     l7990 2156                       l7986 213A                       STR_1 FF18  
                     STR_2 FF2F                       STR_3 FEFF                       STR_4 FFA8  
                     STR_5 FFF3                       STR_6 FFB8                       STR_7 FF84  
                     STR_8 FF46                       STR_9 FF5C                       _LATB 000F8A  
                     _LATC 000F8B                       _LATD 000F8C                       u7014 23DC  
                     u7015 23D6                       u7024 2404                       u7025 23FE  
                     u6170 3066                       _RCEN 007E2B                       u6935 2D4E  
                     _RSEN 007E29                       _main 2B86                i2__doprnt@c 0022  
              i2__doprnt@f 000F                       _menu 0178                       _keys FED5  
                     _time 00CE                       fsr0h 000FEA                       fsr1h 000FE2  
       i2___lwdiv@quotient 0005                       indf0 000FEF                       fsr2h 000FDA  
                     fsr0l 000FE9                       indf1 000FE7                       indf2 000FDF  
                     fsr1l 000FE1                       fsr2l 000FD9                       btemp 0077  
                     prodh 000FF4                       prodl 000FF3                       start 000E  
            __CFG_IESO$OFF 000000            __end_ofi2_putch 3174              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                i2_lcdNibble 2DD4     __end_of_update_display 2586  
       _discretize_counter 0064           ?_I2C_Master_Init 008D           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001             ??_display_menu 00B4  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
          __end_of___awdiv 28AE                      STR_10 FF70                      STR_11 FFF9  
                    STR_12 FFF9                      STR_13 FFF9                      STR_14 FFF9  
                    STR_15 FFE4                      STR_16 FFC7                      STR_17 FFD6  
                    STR_18 FFEC                      STR_19 FF97            __end_of___awmod 2A0C  
          __end_of___lldiv 296A                      _DIST1 00BA            ___awdiv@divisor 0082  
                    u11600 036A                      u11520 0246                      u11610 03AE  
                    u11450 00D6                      u13107 2C12                      u11460 00FE  
                    u13117 2C1C                      u11630 0452                      u13127 2C48  
                    u11607 0360                      u11527 023C                      u11480 015C  
                    u11448 0052                      u13137 2C52                      u11617 03A4  
                    u11457 00CC                      u13057 2BE6                      u11490 01AA  
                    u11467 00F4                      u13067 27B2                      u13077 308C  
                    u11637 0448                      u12630 2150                      u13087 2F20  
                    u11487 0152                      u11568 02AE                      u13097 2F56  
                    u11497 01A0                      u11930 097C                      u11818 06AA  
                    u12570 2026                      u11918 08F6                      u11598 0336  
                    u11937 0972                      u11858 0730                      u11788 062E  
                    u11898 07C2            __end_of___lwdiv 2B16            __end_of___lwmod 2CBC  
                    i2l338 177C                      i2l375 177E                      i2l493 0D74  
          ___awdiv@counter 0084                      i2l967 2EC4                      i2l977 2F9A  
                    _PORTB 000F81                      _PORTE 000F84                      _PROX1 004C  
                    _PROX2 0056            __end_of__doprnt 0996                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95                      _TRISE 000F96  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 315A  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
          __end_of_readADC 309C            __end_of_initLCD 2F62             __CFG_EBTRB$OFF 000000  
               i2isdigit@c 0003            __end_of_dpowers FEF0               i2__doprnt@ap 0011  
             i2__doprnt@cp 001B               i2__doprnt@pb 000D            __end_of_isdigit 30C6  
                    _state 00E9                      _putch 310A                      pclath 000FFA  
                    tablat 000FF5           __end_ofi2___wmul 30EC                      status 000FD8  
          __end_of_sprintf 2E7C         __size_ofi2___awmod 0070             __CFG_PBADEN$ON 000000  
         __end_ofi2_printf 3010         __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042  
       __size_ofi2__doprnt 0858            __initialization 2A0C         __size_ofi2_lcdInst 000C  
             __end_of_main 2BF2               __end_of_keys FEE6                 i2printf@ap 0025  
               i2printf@pb 0027            ?_update_display 0001         __size_ofi2_isdigit 001E  
          _IR_THRESHOLD_HI 006E                     ??_main 00B9              __activetblptr 000003  
        ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0081     _latestSortedBottleTime 0100  
       ??_I2C_Master_Start 0081                     _ADCON0 000FC2                     _ADCON1 000FC1  
       ??_I2C_Master_Write 0083                     _ADRESH 000FC4                     _ADRESL 000FC3  
         ___awdiv@dividend 0080            i2lcdNibble@data 0002                     ?_putch 0001  
          i2lcdNibble@temp 0001                     _INT1IE 007F83                     _INT1IF 007F80  
                   i2l3104 3102                     i2l3114 2E92                     i2l3116 2E9A  
                   i2l3126 2EBA                     i2l3118 2E9E                     i2l3142 2F90  
                   i2l3134 2F70                     i2l3136 2F78                     i2l3138 2F7C  
                   i2l3800 2B50                     i2l3812 2B7C                     i2l3804 2B64  
                   i2l3808 2B6E                     i2l8100 123E                     i2l8110 1280  
                   i2l3792 2B36                     i2l8200 1540                     i2l8104 124E  
                   i2l8202 1544                     i2l8130 132E                     i2l8122 1304  
                   i2l3796 2B44                     i2l3788 2B2A                     i2l8220 1610  
                   i2l8132 1332                     i2l8116 12C4                     i2l3798 2B4C  
                   i2l8230 1694                     i2l8214 15CC                     i2l8126 1326  
                   i2l8142 135E                     i2l8232 1698                     i2l8208 1588  
                   i2l8152 139C                     i2l8128 132A                     i2l8226 1654  
                   i2l8146 1384                     i2l8244 171C                     i2l8180 146A  
                   i2l8164 1412                     i2l8148 138C                     i2l8252 1752  
                   i2l8238 16DC                     i2l8174 1452                     i2l8158 13CE  
                   i2l8248 1744                     i2l8192 14E0                     i2l8176 145A  
                   i2l7802 0CD4                     i2l7730 099A                     i2l8186 149C  
                   i2l8098 1236                     i2l7804 0CE6                     i2l7812 0D1C  
                   i2l7740 0A0E                     i2l7910 105E                     i2l7902 1004  
                   i2l7822 0DB2                     i2l7806 0D0A                     i2l7742 0A1C  
                   i2l8198 1520                     i2l7904 1012                     i2l7840 0E16  
                   i2l7824 0DDC                     i2l7760 0B06                     i2l7752 0A7C  
                   i2l7736 09E2                     i2l7930 117A                     i2l7914 1088  
                   i2l7826 0DE0                     i2l7770 0B4C                     i2l7762 0B0A  
                   i2l7746 0A22                     i2l7916 108E                     i2l7924 112A  
                   i2l7780 0BA4                     i2l7772 0B50                     i2l7918 10D8  
                   i2l7926 113A                     i2l7934 11A4                     i2l7862 0E72  
                   i2l7838 0E12                     i2l7854 0E48                     i2l7790 0C20  
                   i2l7774 0B84                     i2l7880 0F18                     i2l7856 0E58  
                   i2l7784 0BE4                     i2l7768 0B42                     i2l7936 11AC  
                   i2l7890 0F8A                     i2l7866 0E96                     i2l7794 0C80  
                   i2l7778 0B9A                     i2l7938 11E4                     i2l7876 0EEE  
                   i2l7892 0F92                     i2l7868 0E9E                     i2l7796 0C86  
                   i2l7788 0C0E                     i2l7894 0F9A                     i2l7886 0F60  
                   i2l7898 0FDA                  ??i2_putch 0003                     _SSPADD 000FC8  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
           __CFG_XINST$OFF 000000                     ___wmul 2FA4                  ??___awdiv 0084  
           __CFG_STVREN$ON 000000                  ??___awmod 0084                  ??___lldiv 0088  
                ??___lwdiv 0084                  ??___lwmod 008B              ?_read_sensors 0001  
          _release_counter 0068                  ??__doprnt 0092                     _events 00F2  
            i2__doprnt@idx 0017              i2__doprnt@len 0019              i2__doprnt@val 001D  
                   clear_0 2A76                     clear_1 2A82                     clear_2 2A8E  
         ___awdiv@quotient 0086            ___awmod@divisor 0082                     _time_i 003E  
             __doprnt@flag 009E                     _nstate 00E8            ___awmod@counter 0084  
                ??_lcdInst 0082                     _printf 2ECE               __doprnt@prec 0097  
                   _strcmp 2D7E                     _strcpy 3010                  ??_readADC 0080  
                ??_initLCD 0083               __pdataBIGRAM 0178               __pdataCOMRAM 006A  
                ??_isdigit 0080           __end_of_set_time 2D1E          __end_ofi2___awmod 2B86  
        __end_ofi2___lwdiv 2ECE               __mediumconst FED4          __end_ofi2___lwmod 2FA4  
                   tblptrh 000FF7                     tblptrl 000FF6                     tblptru 000FF8  
        __end_ofi2__doprnt 11EE             i2___awmod@sign 0006          __end_ofi2_lcdInst 3180  
                ??_sprintf 00AE          __end_ofi2_isdigit 310A                 __accesstop 0080  
  __end_of__initialization 2A94       __end_of_display_menu 1C54              ___rparam_used 000001  
display_menu@menuSelection 0172         i2___lwmod@dividend 0008             __pcstackCOMRAM 0001  
             __pidataBANK0 3120             ??_read_sensors 0082              __end_of_putch 3120  
                ?i2___wmul 0001         __size_of_lcdNibble 0068                i2putch@data 0003  
              keypressed@i 003B                  ?i2_printf 0023              update_state@i 00B6  
         _IR_THRESHOLD_LOW 0070                 __doprnt@ap 0090                 __doprnt@cp 009A  
               __doprnt@pb 008C                    ??_putch 0082                 __pbssBANK0 00BA  
               __pbssBANK1 0100               ?i2_lcdNibble 0001                    ?___wmul 0080  
           _sorted_bottles 00DB                    ?_printf 00A2                    ?_strcmp 0080  
                  ?_strcpy 0080                 ??i2___wmul 0005                    _IR1_PIN 00E5  
                  _IR2_PIN 00E6                 _creditSize 00EC                 _discretize 0062  
               ??i2_printf 0025                    _SSPCON1 000FC6                    _SSPCON2 000FC5  
                  _SSPSTAT 000FC7                    i2_putch 3168          __end_of_lcdNibble 2C5A  
         ??_update_display 00B9                    __Hparam 0000                    __Lparam 0000  
           _manualDateTime FEF8                  ?_set_time 0001                    ___awdiv 27F0  
                  ___awmod 296A                    ___lldiv 28AE            __size_of___wmul 0036  
                  ___lwdiv 2A9E                    ___lwmod 2C5A                    __doprnt 0012  
                _DIST1_PIN 00E3                    __pcinit 2A0C                    __ramtop 1000  
                  _endSize 00F0                    _lcdInst 314A                    __ptext0 2B86  
                  __ptext1 1F24                    __ptext2 26F2                    __ptext3 3010  
                  __ptext4 2D7E                    __ptext5 2ECE                    __ptext6 241A  
                  __ptext7 17BA                    __ptext8 2E2A                    __ptext9 0012  
          __size_of_printf 004A            __size_of_strcmp 0056                    _readADC 3070  
          __size_of_strcpy 0032                    _initLCD 2F18          __end_of_hexpowers FEF8  
            i2_isdigit$714 0002                    _dpowers FEE6                    _measure 0072  
                  _isdigit 309C             i2__doprnt@flag 001F           ___awmod@dividend 0080  
           i2__doprnt@prec 0018                    _release 0074                 _keypressed 0008  
 __size_of_I2C_Master_Init 0060   __size_of_I2C_Master_Read 002E   __size_of_I2C_Master_Wait 0014  
 __size_of_I2C_Master_Stop 0008                    _runTime 00D9                    _yopWCap 00E1  
                  _sprintf 2E2A              __doprnt@width 009F      __size_of_display_menu 049A  
           __pintcode_body 11EE         _DIST_THRESHOLD_LOW 006C       end_of_initialization 2A94  
     __end_of_read_sensors 241A                    int_func 11EE        i2___wmul@multiplier 0001  
                i2u1200_40 0A44                  i2u1200_47 0A3A                  i2u1201_40 0A6C  
                i2u1201_47 0A62                  i2u1203_40 0AC2                  i2u1203_47 0AB8  
                i2u1211_48 0BD0                  i2u1204_40 0AFC                  i2u1204_47 0AF2  
                i2u1215_40 0C7E                  i2u1214_48 0C4C                  i2u1207_40 0B7E  
                i2u1303_40 1712                  i2u1215_47 0C74                  i2u1207_47 0B74  
                i2u1216_40 0CC0                  i2u1216_47 0CB6                  i2u1240_48 0FC6  
                i2u1233_48 0EDA                  i2u1218_40 0D4A                  i2u1314_47 2DEC  
                i2u1218_47 0D40                  i2u1315_47 2DF6                  i2u1316_47 2E18  
                i2u1244_48 104A                  i2u1236_48 0F4C                  i2u1317_47 2E22  
                i2u1246_48 1166                  i2u1248_40 11DA                  i2u1248_47 11D0  
                i2u1292_40 1516                  i2u1285_40 1448                  i2u1278_40 12FA  
                i2u1199_48 09CE     __end_of_manualDateTime FEFF  __size_of_I2C_Master_Start 0008  
__size_of_I2C_Master_Write 000A            ___lldiv@divisor 0084            ___lldiv@counter 008C  
               ??_set_time 0083                    printf@f 00A2           I2C_Master_Init@c 008D  
         I2C_Master_Read@a 0081                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc1 000FE6                    postinc2 000FDE  
                  strcmp@r 0085                  _PROX1_PIN 00E4                  _PROX2_PIN 00E7  
             _display_menu 17BA                 _update_RTC 2586                 _update_lcd 26F2  
                i2___awmod 2B16          i2___lwdiv@divisor 0003                  i2___lwdiv 2E7C  
                i2___lwmod 2F62          i2___lwdiv@counter 0007                  i2__doprnt 0996  
                i2_lcdInst 3174                  i2_isdigit 30EC              ?_update_state 0001  
            __pidataBIGRAM 1C54             __end_of___wmul 2FDA       __size_ofi2_lcdNibble 0056  
            __pidataCOMRAM 315A              i2lcdInst@data 0003           i2___wmul@product 0005  
           __end_of_printf 2F18                update_RTC@i 008A             __end_of_strcmp 2DD4  
           __end_of_strcpy 3042             update_lcd@flag 00AB        start_initialization 2A0C  
              ?_keypressed 0001          __size_ofi2___wmul 0026                  i2printf@f 0023  
               ?i2___awmod 0001                 ?i2___lwdiv 0001                 ?i2___lwmod 0008  
        __size_ofi2_printf 0036                 ?i2__doprnt 000D          ??_I2C_Master_Init 0091  
        ??_I2C_Master_Read 0081          ??_I2C_Master_Wait 0080                 ?i2_lcdInst 0001  
        ??_I2C_Master_Stop 0081                 ?i2_isdigit 0001             ??_update_state 00B4  
                 ??___wmul 0084                __doprnt@idx 0096                __doprnt@len 0098  
              __doprnt@val 009C                __pdataBANK0 00E5           __CFG_LPT1OSC$OFF 000000  
                 ??_printf 00A4                   ??_strcmp 0084                   ??_strcpy 0084  
              __pbssCOMRAM 003E                ?_update_RTC 0001      __size_of_read_sensors 023C  
            __pcstackBANK0 0080              __pcstackBANK1 016E                ?_update_lcd 0001  
        i2___lwmod@divisor 000A          i2___lwmod@counter 000C                   ?i2_putch 0001  
                __doprnt@c 00A1                  __doprnt@f 008E           _I2C_Master_Start 3192  
         _I2C_Master_Write 3180           ___lwdiv@dividend 0080          __CFG_CCP2MX$PORTC 000000  
      __size_of_keypressed 17B2                  __pintcode 0008              __pmediumconst FED4  
                _lcdNibble 2BF2                   ?___awdiv 0080                   ?___awmod 0080  
                 ?___lldiv 0080                   ?___lwdiv 0080                   ?___lwmod 0087  
        __size_of_set_time 0062                   ?__doprnt 008C               _read_sensors 21DE  
                 ?_lcdInst 0001                  _eskaNoCap 00D5                   ?_readADC 0001  
                 ?_initLCD 0001          _display_menu$1104 0174                   ?_isdigit 0001  
                _hexpowers FEF0                  _menuIndex 00F6           ___lwdiv@quotient 0085  
              ??i2___awmod 0005                   ?_sprintf 00A2                ??i2___lwdiv 0005  
                _ndisplay0 014A                ??i2___lwmod 000C                  _ndisplay1 015C  
           __size_of_putch 0016                ??i2__doprnt 0013                _creditIndex 00EA  
              ??i2_lcdInst 0003             ___wmul@product 0084                   _LATDbits 000F8C  
        _DIST_THRESHOLD_HI 006A                ??i2_isdigit 0001        __size_of_update_RTC 016C  
         __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001        __size_of_update_lcd 00FE  
               _ADCON0bits 000FC2          ___wmul@multiplier 0080                  _startTime 010E  
                 i2___wmul 30C6              lcdNibble@data 0081              lcdNibble@temp 0080  
                 i2_printf 2FDA       __end_of_update_state 21DE        I2C_Master_Read@temp 0082  
              _bottle_type 0060                  copy_data0 2A20                  copy_data1 2A44  
                copy_data2 2A64         i2___awmod@dividend 0001           __size_ofi2_putch 000C  
       keypressed@keypress 003D                   __Hrparam 0000                   __Lrparam 0000  
       __CFG_BOREN$SBORDIS 000000           __size_of___awdiv 00BE           __size_of___awmod 00A2  
    i2___wmul@multiplicand 0003           __size_of___lldiv 00BC           __size_of___lwdiv 0078  
         __size_of___lwmod 0062             readADC@channel 0081           __size_of__doprnt 0984  
  __size_of_update_display 016C                _isdigit$714 0081            _putch$intlevel0 3110  
 display_menu@menuIndexPtr 0176           __size_of_lcdInst 0010            _I2C_Master_Init 2D1E  
         __size_of_readADC 002C            _I2C_Master_Read 3042           __size_of_initLCD 004A  
          _I2C_Master_Wait 3136            _I2C_Master_Stop 318A                 _DIST1_TRIG 0076  
             ??_keypressed 002B           __size_of_isdigit 002A                   _endIndex 00EE  
          ___lwdiv@divisor 0082            ___lwdiv@counter 0084                   __ptext10 310A  
                 __ptext11 309C                   __ptext20 3180                   __ptext12 2C5A  
                 __ptext21 318A                   __ptext13 2A9E                   __ptext30 28AE  
                 __ptext22 3192                   __ptext14 296A                   __ptext23 3136  
                 __ptext15 27F0                   __ptext40 2DD4                   __ptext32 2FDA  
                 __ptext24 21DE                   __ptext16 2586                   __ptext41 2B16  
                 __ptext33 0996                   __ptext25 3070                   __ptext17 2FA4  
                 __ptext42 0000                   __ptext34 3168                   __ptext26 2F18  
                 __ptext18 3042                   __ptext35 30EC                   __ptext27 314A  
                 __ptext19 2CBC                   __ptext36 30C6                   __ptext28 2BF2  
                 __ptext37 2F62                   __ptext29 2D1E                   __ptext38 2E7C  
                 __ptext39 3174                   _display0 0126                   _eskaWCap 00D7  
                 _display1 0138           __size_of_sprintf 0052                 strcpy@from 0082  
                 _logIndex 00F4              __size_of_main 006C                   _menuSize 00F8  
          i2__doprnt@width 0020                  set_time@i 0083                   _timeDiff 00DD  
                 _set_time 2CBC              ??i2_lcdNibble 0001                ??_lcdNibble 0080  
       __end_of_keypressed 17BA                   int$flags 0077                   _yopNoCap 00DF  
        i2___awmod@divisor 0003                  putch@data 0082          i2___awmod@counter 0005  
 __end_of_I2C_Master_Start 319A   __end_of_I2C_Master_Write 318A                 _INTCONbits 000FF2  
             ??_update_RTC 0086               ??_update_lcd 00AA                   isdigit@c 0082  
                 intlevel2 0000                  sprintf@ap 00AE                  sprintf@pb 00B0  
                sprintf@wh 00A2            _measure_counter 0066           ___lwmod@dividend 0087  
         ___lldiv@dividend 0080    display_menu@menuSizePtr 0170         __end_of_update_RTC 26F2  
                 printf@ap 00A4                   printf@pb 00A6         __end_of_update_lcd 27F0  
  __end_of_I2C_Master_Init 2D7E    __end_of_I2C_Master_Read 3070    __end_of_I2C_Master_Wait 314A  
  __end_of_I2C_Master_Stop 3192                lcdInst@data 0082        __end_ofi2_lcdNibble 2E2A  
                 sprintf@f 00A4      __size_of_update_state 02BA                   strcmp@s1 0080  
                 strcmp@s2 0082           ___lldiv@quotient 0088          I2C_Master_Write@d 0081  
          ___lwmod@divisor 0089                   strcpy@cp 0084                   strcpy@to 0080  
          ___lwmod@counter 008B              read_sensors@i 0084       display_menu@selector 016E  
