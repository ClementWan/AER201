

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Feb 28 07:47:41 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    12                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    14                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    17                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	text0,global,reloc=2,class=CODE,delta=1
    22                           	psect	text1,global,reloc=2,class=CODE,delta=1
    23                           	psect	text2,global,reloc=2,class=CODE,delta=1
    24                           	psect	text3,global,reloc=2,class=CODE,delta=1
    25                           	psect	text4,global,reloc=2,class=CODE,delta=1
    26                           	psect	text5,global,reloc=2,class=CODE,delta=1
    27                           	psect	text6,global,reloc=2,class=CODE,delta=1
    28                           	psect	text7,global,reloc=2,class=CODE,delta=1
    29                           	psect	text8,global,reloc=2,class=CODE,delta=1
    30                           	psect	text9,global,reloc=2,class=CODE,delta=1
    31                           	psect	text10,global,reloc=2,class=CODE,delta=1
    32                           	psect	text11,global,reloc=2,class=CODE,delta=1
    33                           	psect	text12,global,reloc=2,class=CODE,delta=1
    34                           	psect	text13,global,reloc=2,class=CODE,delta=1
    35                           	psect	text14,global,reloc=2,class=CODE,delta=1
    36                           	psect	text15,global,reloc=2,class=CODE,delta=1
    37                           	psect	text16,global,reloc=2,class=CODE,delta=1
    38                           	psect	text17,global,reloc=2,class=CODE,delta=1
    39                           	psect	text18,global,reloc=2,class=CODE,delta=1
    40                           	psect	text19,global,reloc=2,class=CODE,delta=1
    41                           	psect	text20,global,reloc=2,class=CODE,delta=1
    42                           	psect	text21,global,reloc=2,class=CODE,delta=1
    43                           	psect	text22,global,reloc=2,class=CODE,delta=1
    44                           	psect	text23,global,reloc=2,class=CODE,delta=1
    45                           	psect	text24,global,reloc=2,class=CODE,delta=1
    46                           	psect	text25,global,reloc=2,class=CODE,delta=1
    47                           	psect	text26,global,reloc=2,class=CODE,delta=1
    48                           	psect	text27,global,reloc=2,class=CODE,delta=1
    49                           	psect	text28,global,reloc=2,class=CODE,delta=1
    50                           	psect	text29,global,reloc=2,class=CODE,delta=1
    51                           	psect	text30,global,reloc=2,class=CODE,delta=1
    52                           	psect	text31,global,reloc=2,class=CODE,delta=1
    53                           	psect	text32,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	text34,global,reloc=2,class=CODE,delta=1
    57                           	psect	text35,global,reloc=2,class=CODE,delta=1
    58                           	psect	text36,global,reloc=2,class=CODE,delta=1
    59                           	psect	text37,global,reloc=2,class=CODE,delta=1
    60                           	psect	text38,global,reloc=2,class=CODE,delta=1
    61                           	psect	text39,global,reloc=2,class=CODE,delta=1
    62                           	psect	text40,global,reloc=2,class=CODE,delta=1
    63                           	psect	text41,global,reloc=2,class=CODE,delta=1
    64                           	psect	text42,global,reloc=2,class=CODE,delta=1
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    69                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    70  0000                     
    71                           ; Version 1.40
    72                           ; Generated 01/12/2016 GMT
    73                           ; 
    74                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    75                           ; All rights reserved.
    76                           ; 
    77                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    78                           ; 
    79                           ; Redistribution and use in source and binary forms, with or without modification, are
    80                           ; permitted provided that the following conditions are met:
    81                           ; 
    82                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    83                           ;        conditions and the following disclaimer.
    84                           ; 
    85                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    86                           ;        of conditions and the following disclaimer in the documentation and/or other
    87                           ;        materials provided with the distribution.
    88                           ; 
    89                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    90                           ;        software without specific prior written permission.
    91                           ; 
    92                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    93                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    94                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    95                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    96                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    97                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    98                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    99                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   100                           ; 
   101                           ; 
   102                           ; Code-generator required, PIC18F4620 Definitions
   103                           ; 
   104                           ; SFR Addresses
   105  0000                     
   106                           	psect	idataCOMRAM
   107  003D2E                     __pidataCOMRAM:
   108                           	opt stack 0
   109                           
   110                           ;initializer for _sortSize
   111  003D2E  0005               	dw	5
   112                           
   113                           ;initializer for _DIST1_TRIG
   114  003D30  05                 	db	5
   115                           
   116                           ;initializer for _IR1_PIN
   117  003D31  01                 	db	1
   118                           
   119                           ;initializer for _IR2_PIN
   120  003D32  02                 	db	2
   121                           
   122                           ;initializer for _PROX2_PIN
   123  003D33  02                 	db	2
   124                           
   125                           	psect	idataBIGRAM
   126  002B88                     __pidataBIGRAM:
   127                           	opt stack 0
   128                           
   129                           ;initializer for _menu
   130  002B88  31                 	db	49
   131  002B89  2E                 	db	46
   132  002B8A  20                 	db	32
   133  002B8B  53                 	db	83
   134  002B8C  6F                 	db	111
   135  002B8D  72                 	db	114
   136  002B8E  74                 	db	116
   137  002B8F  20                 	db	32
   138  002B90  20                 	db	32
   139  002B91  20                 	db	32
   140  002B92  20                 	db	32
   141  002B93  20                 	db	32
   142  002B94  20                 	db	32
   143  002B95  20                 	db	32
   144  002B96  20                 	db	32
   145  002B97  00                 	db	0
   146  002B98  00                 	db	0
   147  002B99  00                 	db	0
   148  002B9A  32                 	db	50
   149  002B9B  2E                 	db	46
   150  002B9C  20                 	db	32
   151  002B9D  50                 	db	80
   152  002B9E  20                 	db	32
   153  002B9F  4C                 	db	76
   154  002BA0  6F                 	db	111
   155  002BA1  67                 	db	103
   156  002BA2  73                 	db	115
   157  002BA3  20                 	db	32
   158  002BA4  20                 	db	32
   159  002BA5  20                 	db	32
   160  002BA6  20                 	db	32
   161  002BA7  20                 	db	32
   162  002BA8  20                 	db	32
   163  002BA9  00                 	db	0
   164  002BAA  00                 	db	0
   165  002BAB  00                 	db	0
   166  002BAC  33                 	db	51
   167  002BAD  2E                 	db	46
   168  002BAE  20                 	db	32
   169  002BAF  43                 	db	67
   170  002BB0  72                 	db	114
   171  002BB1  65                 	db	101
   172  002BB2  64                 	db	100
   173  002BB3  69                 	db	105
   174  002BB4  74                 	db	116
   175  002BB5  73                 	db	115
   176  002BB6  20                 	db	32
   177  002BB7  20                 	db	32
   178  002BB8  20                 	db	32
   179  002BB9  20                 	db	32
   180  002BBA  20                 	db	32
   181  002BBB  00                 	db	0
   182  002BBC  00                 	db	0
   183  002BBD  00                 	db	0
   184  002BBE  00                 	db	0
   185  002BBF  00                 	db	0
   186  002BC0  00                 	db	0
   187  002BC1  00                 	db	0
   188  002BC2  00                 	db	0
   189  002BC3  00                 	db	0
   190  002BC4  00                 	db	0
   191  002BC5  00                 	db	0
   192  002BC6  00                 	db	0
   193  002BC7  00                 	db	0
   194  002BC8  00                 	db	0
   195  002BC9  00                 	db	0
   196  002BCA  00                 	db	0
   197  002BCB  00                 	db	0
   198  002BCC  00                 	db	0
   199  002BCD  00                 	db	0
   200  002BCE  00                 	db	0
   201  002BCF  00                 	db	0
   202  002BD0  00                 	db	0
   203  002BD1  00                 	db	0
   204  002BD2  00                 	db	0
   205  002BD3  00                 	db	0
   206  002BD4  00                 	db	0
   207  002BD5  00                 	db	0
   208  002BD6  00                 	db	0
   209  002BD7  00                 	db	0
   210  002BD8  00                 	db	0
   211  002BD9  00                 	db	0
   212  002BDA  00                 	db	0
   213  002BDB  00                 	db	0
   214  002BDC  00                 	db	0
   215  002BDD  00                 	db	0
   216  002BDE  00                 	db	0
   217  002BDF  00                 	db	0
   218  002BE0  00                 	db	0
   219  002BE1  00                 	db	0
   220  002BE2  00                 	db	0
   221  002BE3  00                 	db	0
   222  002BE4  00                 	db	0
   223  002BE5  00                 	db	0
   224  002BE6  00                 	db	0
   225  002BE7  00                 	db	0
   226  002BE8  00                 	db	0
   227  002BE9  00                 	db	0
   228  002BEA  00                 	db	0
   229  002BEB  00                 	db	0
   230  002BEC  00                 	db	0
   231  002BED  00                 	db	0
   232  002BEE  00                 	db	0
   233  002BEF  00                 	db	0
   234  002BF0  00                 	db	0
   235  002BF1  00                 	db	0
   236  002BF2  00                 	db	0
   237  002BF3  00                 	db	0
   238  002BF4  00                 	db	0
   239  002BF5  00                 	db	0
   240  002BF6  00                 	db	0
   241  002BF7  00                 	db	0
   242  002BF8  00                 	db	0
   243  002BF9  00                 	db	0
   244  002BFA  00                 	db	0
   245  002BFB  00                 	db	0
   246  002BFC  00                 	db	0
   247  002BFD  00                 	db	0
   248  002BFE  00                 	db	0
   249  002BFF  00                 	db	0
   250  002C00  00                 	db	0
   251  002C01  00                 	db	0
   252  002C02  00                 	db	0
   253  002C03  00                 	db	0
   254  002C04  00                 	db	0
   255  002C05  00                 	db	0
   256  002C06  00                 	db	0
   257  002C07  00                 	db	0
   258  002C08  00                 	db	0
   259  002C09  00                 	db	0
   260  002C0A  00                 	db	0
   261  002C0B  00                 	db	0
   262  002C0C  00                 	db	0
   263  002C0D  00                 	db	0
   264  002C0E  00                 	db	0
   265  002C0F  00                 	db	0
   266  002C10  00                 	db	0
   267  002C11  00                 	db	0
   268  002C12  00                 	db	0
   269  002C13  00                 	db	0
   270  002C14  00                 	db	0
   271  002C15  00                 	db	0
   272  002C16  00                 	db	0
   273  002C17  00                 	db	0
   274  002C18  00                 	db	0
   275  002C19  00                 	db	0
   276  002C1A  00                 	db	0
   277  002C1B  00                 	db	0
   278  002C1C  00                 	db	0
   279  002C1D  00                 	db	0
   280  002C1E  00                 	db	0
   281  002C1F  00                 	db	0
   282  002C20  00                 	db	0
   283  002C21  00                 	db	0
   284  002C22  00                 	db	0
   285  002C23  00                 	db	0
   286  002C24  00                 	db	0
   287  002C25  00                 	db	0
   288  002C26  00                 	db	0
   289  002C27  00                 	db	0
   290  002C28  00                 	db	0
   291  002C29  00                 	db	0
   292  002C2A  00                 	db	0
   293  002C2B  00                 	db	0
   294  002C2C  00                 	db	0
   295  002C2D  00                 	db	0
   296  002C2E  00                 	db	0
   297  002C2F  00                 	db	0
   298  002C30  00                 	db	0
   299  002C31  00                 	db	0
   300  002C32  00                 	db	0
   301  002C33  00                 	db	0
   302  002C34  00                 	db	0
   303  002C35  00                 	db	0
   304  002C36  00                 	db	0
   305  002C37  00                 	db	0
   306  002C38  00                 	db	0
   307  002C39  00                 	db	0
   308  002C3A  00                 	db	0
   309  002C3B  00                 	db	0
   310  002C3C  65                 	db	101
   311  002C3D  76                 	db	118
   312  002C3E  65                 	db	101
   313  002C3F  6E                 	db	110
   314  002C40  74                 	db	116
   315  002C41  31                 	db	49
   316  002C42  20                 	db	32
   317  002C43  20                 	db	32
   318  002C44  20                 	db	32
   319  002C45  20                 	db	32
   320  002C46  20                 	db	32
   321  002C47  20                 	db	32
   322  002C48  20                 	db	32
   323  002C49  20                 	db	32
   324  002C4A  20                 	db	32
   325  002C4B  00                 	db	0
   326  002C4C  00                 	db	0
   327  002C4D  00                 	db	0
   328  002C4E  65                 	db	101
   329  002C4F  76                 	db	118
   330  002C50  65                 	db	101
   331  002C51  6E                 	db	110
   332  002C52  74                 	db	116
   333  002C53  32                 	db	50
   334  002C54  20                 	db	32
   335  002C55  20                 	db	32
   336  002C56  20                 	db	32
   337  002C57  20                 	db	32
   338  002C58  20                 	db	32
   339  002C59  20                 	db	32
   340  002C5A  20                 	db	32
   341  002C5B  20                 	db	32
   342  002C5C  20                 	db	32
   343  002C5D  00                 	db	0
   344  002C5E  00                 	db	0
   345  002C5F  00                 	db	0
   346  002C60  65                 	db	101
   347  002C61  76                 	db	118
   348  002C62  65                 	db	101
   349  002C63  6E                 	db	110
   350  002C64  74                 	db	116
   351  002C65  33                 	db	51
   352  002C66  20                 	db	32
   353  002C67  20                 	db	32
   354  002C68  20                 	db	32
   355  002C69  20                 	db	32
   356  002C6A  20                 	db	32
   357  002C6B  20                 	db	32
   358  002C6C  20                 	db	32
   359  002C6D  20                 	db	32
   360  002C6E  20                 	db	32
   361  002C6F  00                 	db	0
   362  002C70  00                 	db	0
   363  002C71  00                 	db	0
   364  002C72  00                 	db	0
   365  002C73  00                 	db	0
   366  002C74  00                 	db	0
   367  002C75  00                 	db	0
   368  002C76  00                 	db	0
   369  002C77  00                 	db	0
   370  002C78  00                 	db	0
   371  002C79  00                 	db	0
   372  002C7A  00                 	db	0
   373  002C7B  00                 	db	0
   374  002C7C  00                 	db	0
   375  002C7D  00                 	db	0
   376  002C7E  00                 	db	0
   377  002C7F  00                 	db	0
   378  002C80  00                 	db	0
   379  002C81  00                 	db	0
   380  002C82  00                 	db	0
   381  002C83  00                 	db	0
   382  002C84  00                 	db	0
   383  002C85  00                 	db	0
   384  002C86  00                 	db	0
   385  002C87  00                 	db	0
   386  002C88  00                 	db	0
   387  002C89  00                 	db	0
   388  002C8A  00                 	db	0
   389  002C8B  00                 	db	0
   390  002C8C  00                 	db	0
   391  002C8D  00                 	db	0
   392  002C8E  00                 	db	0
   393  002C8F  00                 	db	0
   394  002C90  00                 	db	0
   395  002C91  00                 	db	0
   396  002C92  00                 	db	0
   397  002C93  00                 	db	0
   398  002C94  00                 	db	0
   399  002C95  00                 	db	0
   400  002C96  00                 	db	0
   401  002C97  00                 	db	0
   402  002C98  00                 	db	0
   403  002C99  00                 	db	0
   404  002C9A  00                 	db	0
   405  002C9B  00                 	db	0
   406  002C9C  00                 	db	0
   407  002C9D  00                 	db	0
   408  002C9E  00                 	db	0
   409  002C9F  00                 	db	0
   410  002CA0  00                 	db	0
   411  002CA1  00                 	db	0
   412  002CA2  00                 	db	0
   413  002CA3  00                 	db	0
   414  002CA4  00                 	db	0
   415  002CA5  00                 	db	0
   416  002CA6  00                 	db	0
   417  002CA7  00                 	db	0
   418  002CA8  00                 	db	0
   419  002CA9  00                 	db	0
   420  002CAA  00                 	db	0
   421  002CAB  00                 	db	0
   422  002CAC  00                 	db	0
   423  002CAD  00                 	db	0
   424  002CAE  00                 	db	0
   425  002CAF  00                 	db	0
   426  002CB0  00                 	db	0
   427  002CB1  00                 	db	0
   428  002CB2  00                 	db	0
   429  002CB3  00                 	db	0
   430  002CB4  00                 	db	0
   431  002CB5  00                 	db	0
   432  002CB6  00                 	db	0
   433  002CB7  00                 	db	0
   434  002CB8  00                 	db	0
   435  002CB9  00                 	db	0
   436  002CBA  00                 	db	0
   437  002CBB  00                 	db	0
   438  002CBC  00                 	db	0
   439  002CBD  00                 	db	0
   440  002CBE  00                 	db	0
   441  002CBF  00                 	db	0
   442  002CC0  00                 	db	0
   443  002CC1  00                 	db	0
   444  002CC2  00                 	db	0
   445  002CC3  00                 	db	0
   446  002CC4  00                 	db	0
   447  002CC5  00                 	db	0
   448  002CC6  00                 	db	0
   449  002CC7  00                 	db	0
   450  002CC8  00                 	db	0
   451  002CC9  00                 	db	0
   452  002CCA  00                 	db	0
   453  002CCB  00                 	db	0
   454  002CCC  00                 	db	0
   455  002CCD  00                 	db	0
   456  002CCE  00                 	db	0
   457  002CCF  00                 	db	0
   458  002CD0  00                 	db	0
   459  002CD1  00                 	db	0
   460  002CD2  00                 	db	0
   461  002CD3  00                 	db	0
   462  002CD4  00                 	db	0
   463  002CD5  00                 	db	0
   464  002CD6  00                 	db	0
   465  002CD7  00                 	db	0
   466  002CD8  00                 	db	0
   467  002CD9  00                 	db	0
   468  002CDA  00                 	db	0
   469  002CDB  00                 	db	0
   470  002CDC  00                 	db	0
   471  002CDD  00                 	db	0
   472  002CDE  00                 	db	0
   473  002CDF  00                 	db	0
   474  002CE0  00                 	db	0
   475  002CE1  00                 	db	0
   476  002CE2  00                 	db	0
   477  002CE3  00                 	db	0
   478  002CE4  00                 	db	0
   479  002CE5  00                 	db	0
   480  002CE6  00                 	db	0
   481  002CE7  00                 	db	0
   482  002CE8  00                 	db	0
   483  002CE9  00                 	db	0
   484  002CEA  00                 	db	0
   485  002CEB  00                 	db	0
   486  002CEC  00                 	db	0
   487  002CED  00                 	db	0
   488  002CEE  00                 	db	0
   489  002CEF  00                 	db	0
   490  002CF0  4D                 	db	77
   491  002CF1  69                 	db	105
   492  002CF2  63                 	db	99
   493  002CF3  72                 	db	114
   494  002CF4  6F                 	db	111
   495  002CF5  63                 	db	99
   496  002CF6  6F                 	db	111
   497  002CF7  6E                 	db	110
   498  002CF8  74                 	db	116
   499  002CF9  72                 	db	114
   500  002CFA  6F                 	db	111
   501  002CFB  6C                 	db	108
   502  002CFC  3A                 	db	58
   503  002CFD  20                 	db	32
   504  002CFE  20                 	db	32
   505  002CFF  00                 	db	0
   506  002D00  00                 	db	0
   507  002D01  00                 	db	0
   508  002D02  43                 	db	67
   509  002D03  6C                 	db	108
   510  002D04  65                 	db	101
   511  002D05  6D                 	db	109
   512  002D06  65                 	db	101
   513  002D07  6E                 	db	110
   514  002D08  74                 	db	116
   515  002D09  20                 	db	32
   516  002D0A  57                 	db	87
   517  002D0B  61                 	db	97
   518  002D0C  6E                 	db	110
   519  002D0D  20                 	db	32
   520  002D0E  20                 	db	32
   521  002D0F  20                 	db	32
   522  002D10  20                 	db	32
   523  002D11  00                 	db	0
   524  002D12  00                 	db	0
   525  002D13  00                 	db	0
   526  002D14  43                 	db	67
   527  002D15  69                 	db	105
   528  002D16  72                 	db	114
   529  002D17  63                 	db	99
   530  002D18  75                 	db	117
   531  002D19  69                 	db	105
   532  002D1A  74                 	db	116
   533  002D1B  73                 	db	115
   534  002D1C  3A                 	db	58
   535  002D1D  20                 	db	32
   536  002D1E  20                 	db	32
   537  002D1F  20                 	db	32
   538  002D20  20                 	db	32
   539  002D21  20                 	db	32
   540  002D22  20                 	db	32
   541  002D23  00                 	db	0
   542  002D24  00                 	db	0
   543  002D25  00                 	db	0
   544  002D26  4A                 	db	74
   545  002D27  75                 	db	117
   546  002D28  73                 	db	115
   547  002D29  74                 	db	116
   548  002D2A  69                 	db	105
   549  002D2B  6E                 	db	110
   550  002D2C  20                 	db	32
   551  002D2D  51                 	db	81
   552  002D2E  75                 	db	117
   553  002D2F  20                 	db	32
   554  002D30  20                 	db	32
   555  002D31  20                 	db	32
   556  002D32  20                 	db	32
   557  002D33  20                 	db	32
   558  002D34  20                 	db	32
   559  002D35  00                 	db	0
   560  002D36  00                 	db	0
   561  002D37  00                 	db	0
   562  002D38  45                 	db	69
   563  002D39  6C                 	db	108
   564  002D3A  65                 	db	101
   565  002D3B  63                 	db	99
   566  002D3C  74                 	db	116
   567  002D3D  72                 	db	114
   568  002D3E  6F                 	db	111
   569  002D3F  6D                 	db	109
   570  002D40  65                 	db	101
   571  002D41  63                 	db	99
   572  002D42  68                 	db	104
   573  002D43  3A                 	db	58
   574  002D44  20                 	db	32
   575  002D45  20                 	db	32
   576  002D46  20                 	db	32
   577  002D47  00                 	db	0
   578  002D48  00                 	db	0
   579  002D49  00                 	db	0
   580  002D4A  50                 	db	80
   581  002D4B  65                 	db	101
   582  002D4C  74                 	db	116
   583  002D4D  65                 	db	101
   584  002D4E  72                 	db	114
   585  002D4F  20                 	db	32
   586  002D50  46                 	db	70
   587  002D51  65                 	db	101
   588  002D52  6E                 	db	110
   589  002D53  67                 	db	103
   590  002D54  20                 	db	32
   591  002D55  20                 	db	32
   592  002D56  20                 	db	32
   593  002D57  20                 	db	32
   594  002D58  20                 	db	32
   595  002D59  00                 	db	0
   596  002D5A  00                 	db	0
   597  002D5B  00                 	db	0
   598  002D5C  00                 	db	0
   599  002D5D  00                 	db	0
   600  002D5E  00                 	db	0
   601  002D5F  00                 	db	0
   602  002D60  00                 	db	0
   603  002D61  00                 	db	0
   604  002D62  00                 	db	0
   605  002D63  00                 	db	0
   606  002D64  00                 	db	0
   607  002D65  00                 	db	0
   608  002D66  00                 	db	0
   609  002D67  00                 	db	0
   610  002D68  00                 	db	0
   611  002D69  00                 	db	0
   612  002D6A  00                 	db	0
   613  002D6B  00                 	db	0
   614  002D6C  00                 	db	0
   615  002D6D  00                 	db	0
   616  002D6E  00                 	db	0
   617  002D6F  00                 	db	0
   618  002D70  00                 	db	0
   619  002D71  00                 	db	0
   620  002D72  00                 	db	0
   621  002D73  00                 	db	0
   622  002D74  00                 	db	0
   623  002D75  00                 	db	0
   624  002D76  00                 	db	0
   625  002D77  00                 	db	0
   626  002D78  00                 	db	0
   627  002D79  00                 	db	0
   628  002D7A  00                 	db	0
   629  002D7B  00                 	db	0
   630  002D7C  00                 	db	0
   631  002D7D  00                 	db	0
   632  002D7E  00                 	db	0
   633  002D7F  00                 	db	0
   634  002D80  00                 	db	0
   635  002D81  00                 	db	0
   636  002D82  00                 	db	0
   637  002D83  00                 	db	0
   638  002D84  00                 	db	0
   639  002D85  00                 	db	0
   640  002D86  00                 	db	0
   641  002D87  00                 	db	0
   642  002D88  00                 	db	0
   643  002D89  00                 	db	0
   644  002D8A  00                 	db	0
   645  002D8B  00                 	db	0
   646  002D8C  00                 	db	0
   647  002D8D  00                 	db	0
   648  002D8E  00                 	db	0
   649  002D8F  00                 	db	0
   650  002D90  00                 	db	0
   651  002D91  00                 	db	0
   652  002D92  00                 	db	0
   653  002D93  00                 	db	0
   654  002D94  00                 	db	0
   655  002D95  00                 	db	0
   656  002D96  00                 	db	0
   657  002D97  00                 	db	0
   658  002D98  00                 	db	0
   659  002D99  00                 	db	0
   660  002D9A  00                 	db	0
   661  002D9B  00                 	db	0
   662  002D9C  00                 	db	0
   663  002D9D  00                 	db	0
   664  002D9E  00                 	db	0
   665  002D9F  00                 	db	0
   666  002DA0  00                 	db	0
   667  002DA1  00                 	db	0
   668  002DA2  00                 	db	0
   669  002DA3  00                 	db	0
   670  002DA4  00                 	db	0
   671  002DA5  00                 	db	0
   672  002DA6  00                 	db	0
   673  002DA7  00                 	db	0
   674  002DA8  00                 	db	0
   675  002DA9  00                 	db	0
   676  002DAA  00                 	db	0
   677  002DAB  00                 	db	0
   678  002DAC  00                 	db	0
   679  002DAD  00                 	db	0
   680  002DAE  00                 	db	0
   681  002DAF  00                 	db	0
   682  002DB0  00                 	db	0
   683  002DB1  00                 	db	0
   684  002DB2  00                 	db	0
   685  002DB3  00                 	db	0
   686  002DB4  00                 	db	0
   687  002DB5  00                 	db	0
   688  002DB6  00                 	db	0
   689  002DB7  00                 	db	0
   690  002DB8  00                 	db	0
   691  002DB9  00                 	db	0
   692  002DBA  00                 	db	0
   693  002DBB  00                 	db	0
   694  002DBC  00                 	db	0
   695  002DBD  00                 	db	0
   696  002DBE  00                 	db	0
   697  002DBF  00                 	db	0
   698  002DC0  00                 	db	0
   699  002DC1  00                 	db	0
   700  002DC2  00                 	db	0
   701  002DC3  00                 	db	0
   702  002DC4  00                 	db	0
   703  002DC5  00                 	db	0
   704  002DC6  00                 	db	0
   705  002DC7  00                 	db	0
   706  002DC8  00                 	db	0
   707  002DC9  00                 	db	0
   708  002DCA  00                 	db	0
   709  002DCB  00                 	db	0
   710  002DCC  00                 	db	0
   711  002DCD  00                 	db	0
   712  002DCE  00                 	db	0
   713  002DCF  00                 	db	0
   714  002DD0  00                 	db	0
   715  002DD1  00                 	db	0
   716  002DD2  00                 	db	0
   717  002DD3  00                 	db	0
   718  002DD4  00                 	db	0
   719  002DD5  00                 	db	0
   720  002DD6  00                 	db	0
   721  002DD7  00                 	db	0
   722  002DD8  00                 	db	0
   723  002DD9  00                 	db	0
   724  002DDA  00                 	db	0
   725  002DDB  00                 	db	0
   726  002DDC  00                 	db	0
   727  002DDD  00                 	db	0
   728  002DDE  00                 	db	0
   729  002DDF  00                 	db	0
   730  002DE0  00                 	db	0
   731  002DE1  00                 	db	0
   732  002DE2  00                 	db	0
   733  002DE3  00                 	db	0
   734  002DE4  00                 	db	0
   735  002DE5  00                 	db	0
   736  002DE6  00                 	db	0
   737  002DE7  00                 	db	0
   738  002DE8  00                 	db	0
   739  002DE9  00                 	db	0
   740  002DEA  00                 	db	0
   741  002DEB  00                 	db	0
   742  002DEC  00                 	db	0
   743  002DED  00                 	db	0
   744  002DEE  00                 	db	0
   745  002DEF  00                 	db	0
   746  002DF0  00                 	db	0
   747  002DF1  00                 	db	0
   748  002DF2  00                 	db	0
   749  002DF3  00                 	db	0
   750  002DF4  00                 	db	0
   751  002DF5  00                 	db	0
   752  002DF6  00                 	db	0
   753  002DF7  00                 	db	0
   754  002DF8  00                 	db	0
   755  002DF9  00                 	db	0
   756  002DFA  00                 	db	0
   757  002DFB  00                 	db	0
   758  002DFC  00                 	db	0
   759  002DFD  00                 	db	0
   760  002DFE  00                 	db	0
   761  002DFF  00                 	db	0
   762  002E00  00                 	db	0
   763  002E01  00                 	db	0
   764  002E02  00                 	db	0
   765  002E03  00                 	db	0
   766  002E04  00                 	db	0
   767  002E05  00                 	db	0
   768  002E06  00                 	db	0
   769  002E07  00                 	db	0
   770  002E08  00                 	db	0
   771  002E09  00                 	db	0
   772  002E0A  00                 	db	0
   773  002E0B  00                 	db	0
   774  002E0C  00                 	db	0
   775  002E0D  00                 	db	0
   776  002E0E  00                 	db	0
   777  002E0F  00                 	db	0
   778  002E10  00                 	db	0
   779  002E11  00                 	db	0
   780  002E12  00                 	db	0
   781  002E13  00                 	db	0
   782  002E14  00                 	db	0
   783  002E15  00                 	db	0
   784  002E16  00                 	db	0
   785  002E17  00                 	db	0
   786  002E18  00                 	db	0
   787  002E19  00                 	db	0
   788  002E1A  00                 	db	0
   789  002E1B  00                 	db	0
   790  002E1C  00                 	db	0
   791  002E1D  00                 	db	0
   792  002E1E  00                 	db	0
   793  002E1F  00                 	db	0
   794  002E20  00                 	db	0
   795  002E21  00                 	db	0
   796  002E22  00                 	db	0
   797  002E23  00                 	db	0
   798  002E24  00                 	db	0
   799  002E25  00                 	db	0
   800  002E26  00                 	db	0
   801  002E27  00                 	db	0
   802  002E28  00                 	db	0
   803  002E29  00                 	db	0
   804  002E2A  00                 	db	0
   805  002E2B  00                 	db	0
   806  002E2C  00                 	db	0
   807  002E2D  00                 	db	0
   808  002E2E  00                 	db	0
   809  002E2F  00                 	db	0
   810  002E30  00                 	db	0
   811  002E31  00                 	db	0
   812  002E32  00                 	db	0
   813  002E33  00                 	db	0
   814  002E34  00                 	db	0
   815  002E35  00                 	db	0
   816  002E36  00                 	db	0
   817  002E37  00                 	db	0
   818  002E38  00                 	db	0
   819  002E39  00                 	db	0
   820  002E3A  00                 	db	0
   821  002E3B  00                 	db	0
   822  002E3C  00                 	db	0
   823  002E3D  00                 	db	0
   824  002E3E  00                 	db	0
   825  002E3F  00                 	db	0
   826  002E40  00                 	db	0
   827  002E41  00                 	db	0
   828  002E42  00                 	db	0
   829  002E43  00                 	db	0
   830  002E44  00                 	db	0
   831  002E45  00                 	db	0
   832  002E46  00                 	db	0
   833  002E47  00                 	db	0
   834  002E48  00                 	db	0
   835  002E49  00                 	db	0
   836  002E4A  00                 	db	0
   837  002E4B  00                 	db	0
   838  002E4C  00                 	db	0
   839  002E4D  00                 	db	0
   840  002E4E  00                 	db	0
   841  002E4F  00                 	db	0
   842  002E50  00                 	db	0
   843  002E51  00                 	db	0
   844  002E52  00                 	db	0
   845  002E53  00                 	db	0
   846  002E54  00                 	db	0
   847  002E55  00                 	db	0
   848  002E56  00                 	db	0
   849  002E57  00                 	db	0
   850                           
   851                           	psect	idataBANK0
   852  003CA6                     __pidataBANK0:
   853                           	opt stack 0
   854                           
   855                           ;initializer for _DIST_THRESHOLD_HI
   856  003CA6  02FF               	dw	767
   857                           
   858                           ;initializer for _DIST_THRESHOLD_LOW
   859  003CA8  00FF               	dw	255
   860                           
   861                           ;initializer for _IR_THRESHOLD_HI
   862  003CAA  02FF               	dw	767
   863                           
   864                           ;initializer for _IR_THRESHOLD_LOW
   865  003CAC  00FF               	dw	255
   866                           
   867                           ;initializer for _sortIndex
   868  003CAE  0001               	dw	1
   869                           
   870                           ;initializer for _nstate
   871  003CB0  72                 	db	114
   872                           
   873                           ;initializer for _state
   874  003CB1  72                 	db	114
   875                           
   876                           ;initializer for _creditIndex
   877  003CB2  0001               	dw	1
   878                           
   879                           ;initializer for _creditSize
   880  003CB4  0005               	dw	5
   881                           
   882                           ;initializer for _endIndex
   883  003CB6  0001               	dw	1
   884                           
   885                           ;initializer for _endSize
   886  003CB8  0003               	dw	3
   887                           
   888                           ;initializer for _events
   889  003CBA  0002               	dw	2
   890                           
   891                           ;initializer for _logIndex
   892  003CBC  0001               	dw	1
   893                           
   894                           ;initializer for _menuIndex
   895  003CBE  0001               	dw	1
   896                           
   897                           ;initializer for _menuSize
   898  003CC0  0003               	dw	3
   899                           
   900                           	psect	mediumconst
   901  00FE56                     __pmediumconst:
   902                           	opt stack 0
   903  00FE56  00                 	db	0
   904  00FE57                     _keys:
   905                           	opt stack 0
   906  00FE57  31                 	db	49
   907  00FE58  32                 	db	50
   908  00FE59  33                 	db	51
   909  00FE5A  41                 	db	65
   910  00FE5B  34                 	db	52
   911  00FE5C  35                 	db	53
   912  00FE5D  36                 	db	54
   913  00FE5E  42                 	db	66
   914  00FE5F  37                 	db	55
   915  00FE60  38                 	db	56
   916  00FE61  39                 	db	57
   917  00FE62  43                 	db	67
   918  00FE63  2A                 	db	42
   919  00FE64  30                 	db	48
   920  00FE65  23                 	db	35
   921  00FE66  44                 	db	68
   922  00FE67  00                 	db	0
   923  00FE68                     __end_of_keys:
   924                           	opt stack 0
   925  00FE68                     _dpowers:
   926                           	opt stack 0
   927  00FE68  0001               	dw	1
   928  00FE6A  000A               	dw	10
   929  00FE6C  0064               	dw	100
   930  00FE6E  03E8               	dw	1000
   931  00FE70  2710               	dw	10000
   932  00FE72                     __end_of_dpowers:
   933                           	opt stack 0
   934  00FE72                     _hexpowers:
   935                           	opt stack 0
   936  00FE72  0001               	dw	1
   937  00FE74  0010               	dw	16
   938  00FE76  0100               	dw	256
   939  00FE78  1000               	dw	4096
   940  00FE7A                     __end_of_hexpowers:
   941                           	opt stack 0
   942  00FE7A                     _manualDateTime:
   943                           	opt stack 0
   944  00FE7A  00                 	db	0
   945  00FE7B  00                 	db	0
   946  00FE7C  00                 	db	0
   947  00FE7D  00                 	db	0
   948  00FE7E  01                 	db	1
   949  00FE7F  00                 	db	0
   950  00FE80  17                 	db	23
   951  00FE81                     __end_of_manualDateTime:
   952                           	opt stack 0
   953  00FE81                     STR_3:
   954  00FE81  25                 	db	37
   955  00FE82  64                 	db	100	;'d'
   956  00FE83  3A                 	db	58	;':'
   957  00FE84  25                 	db	37
   958  00FE85  30                 	db	48	;'0'
   959  00FE86  32                 	db	50	;'2'
   960  00FE87  64                 	db	100	;'d'
   961  00FE88  20                 	db	32
   962  00FE89  65                 	db	101	;'e'
   963  00FE8A  6E                 	db	110	;'n'
   964  00FE8B  3A                 	db	58	;':'
   965  00FE8C  25                 	db	37
   966  00FE8D  30                 	db	48	;'0'
   967  00FE8E  32                 	db	50	;'2'
   968  00FE8F  64                 	db	100	;'d'
   969  00FE90  20                 	db	32
   970  00FE91  65                 	db	101	;'e'
   971  00FE92  63                 	db	99	;'c'
   972  00FE93  3A                 	db	58	;':'
   973  00FE94  25                 	db	37
   974  00FE95  30                 	db	48	;'0'
   975  00FE96  32                 	db	50	;'2'
   976  00FE97  64                 	db	100	;'d'
   977  00FE98  20                 	db	32
   978  00FE99  00                 	db	0
   979  00FE9A                     STR_1:
   980  00FE9A  25                 	db	37
   981  00FE9B  30                 	db	48	;'0'
   982  00FE9C  32                 	db	50	;'2'
   983  00FE9D  78                 	db	120	;'x'
   984  00FE9E  2F                 	db	47
   985  00FE9F  25                 	db	37
   986  00FEA0  30                 	db	48	;'0'
   987  00FEA1  32                 	db	50	;'2'
   988  00FEA2  78                 	db	120	;'x'
   989  00FEA3  2F                 	db	47
   990  00FEA4  25                 	db	37
   991  00FEA5  30                 	db	48	;'0'
   992  00FEA6  32                 	db	50	;'2'
   993  00FEA7  78                 	db	120	;'x'
   994  00FEA8  20                 	db	32
   995  00FEA9  50                 	db	80	;'P'
   996  00FEAA  55                 	db	85	;'U'
   997  00FEAB  53                 	db	83	;'S'
   998  00FEAC  48                 	db	72	;'H'
   999  00FEAD  20                 	db	32
  1000  00FEAE  54                 	db	84	;'T'
  1001  00FEAF  4F                 	db	79	;'O'
  1002  00FEB0  00                 	db	0
  1003  00FEB1                     STR_2:
  1004  00FEB1  25                 	db	37
  1005  00FEB2  30                 	db	48	;'0'
  1006  00FEB3  32                 	db	50	;'2'
  1007  00FEB4  78                 	db	120	;'x'
  1008  00FEB5  3A                 	db	58	;':'
  1009  00FEB6  25                 	db	37
  1010  00FEB7  30                 	db	48	;'0'
  1011  00FEB8  32                 	db	50	;'2'
  1012  00FEB9  78                 	db	120	;'x'
  1013  00FEBA  3A                 	db	58	;':'
  1014  00FEBB  25                 	db	37
  1015  00FEBC  30                 	db	48	;'0'
  1016  00FEBD  32                 	db	50	;'2'
  1017  00FEBE  78                 	db	120	;'x'
  1018  00FEBF  20                 	db	32
  1019  00FEC0  20                 	db	32
  1020  00FEC1  20                 	db	32
  1021  00FEC2  53                 	db	83	;'S'
  1022  00FEC3  54                 	db	84	;'T'
  1023  00FEC4  41                 	db	65	;'A'
  1024  00FEC5  52                 	db	82	;'R'
  1025  00FEC6  54                 	db	84	;'T'
  1026  00FEC7  00                 	db	0
  1027  00FEC8                     STR_16:
  1028  00FEC8  72                 	db	114	;'r'
  1029  00FEC9  75                 	db	117	;'u'
  1030  00FECA  6E                 	db	110	;'n'
  1031  00FECB  20                 	db	32
  1032  00FECC  74                 	db	116	;'t'
  1033  00FECD  69                 	db	105	;'i'
  1034  00FECE  6D                 	db	109	;'m'
  1035  00FECF  65                 	db	101	;'e'
  1036  00FED0  3A                 	db	58	;':'
  1037  00FED1  20                 	db	32
  1038  00FED2  25                 	db	37
  1039  00FED3  30                 	db	48	;'0'
  1040  00FED4  31                 	db	49	;'1'
  1041  00FED5  64                 	db	100	;'d'
  1042  00FED6  3A                 	db	58	;':'
  1043  00FED7  25                 	db	37
  1044  00FED8  30                 	db	48	;'0'
  1045  00FED9  32                 	db	50	;'2'
  1046  00FEDA  64                 	db	100	;'d'
  1047  00FEDB  20                 	db	32
  1048  00FEDC  00                 	db	0
  1049  00FEDD  00                 	db	0
  1050  00FEDE                     STR_17:
  1051  00FEDE  65                 	db	101	;'e'
  1052  00FEDF  6E                 	db	110	;'n'
  1053  00FEE0  3A                 	db	58	;':'
  1054  00FEE1  25                 	db	37
  1055  00FEE2  30                 	db	48	;'0'
  1056  00FEE3  32                 	db	50	;'2'
  1057  00FEE4  64                 	db	100	;'d'
  1058  00FEE5  20                 	db	32
  1059  00FEE6  65                 	db	101	;'e'
  1060  00FEE7  63                 	db	99	;'c'
  1061  00FEE8  3A                 	db	58	;':'
  1062  00FEE9  25                 	db	37
  1063  00FEEA  30                 	db	48	;'0'
  1064  00FEEB  32                 	db	50	;'2'
  1065  00FEEC  64                 	db	100	;'d'
  1066  00FEED  20                 	db	32
  1067  00FEEE  20                 	db	32
  1068  00FEEF  20                 	db	32
  1069  00FEF0  20                 	db	32
  1070  00FEF1  00                 	db	0
  1071  00FEF2                     STR_18:
  1072  00FEF2  79                 	db	121	;'y'
  1073  00FEF3  6E                 	db	110	;'n'
  1074  00FEF4  3A                 	db	58	;':'
  1075  00FEF5  25                 	db	37
  1076  00FEF6  30                 	db	48	;'0'
  1077  00FEF7  32                 	db	50	;'2'
  1078  00FEF8  64                 	db	100	;'d'
  1079  00FEF9  20                 	db	32
  1080  00FEFA  79                 	db	121	;'y'
  1081  00FEFB  63                 	db	99	;'c'
  1082  00FEFC  3A                 	db	58	;':'
  1083  00FEFD  25                 	db	37
  1084  00FEFE  30                 	db	48	;'0'
  1085  00FEFF  32                 	db	50	;'2'
  1086  00FF00  64                 	db	100	;'d'
  1087  00FF01  20                 	db	32
  1088  00FF02  20                 	db	32
  1089  00FF03  20                 	db	32
  1090  00FF04  20                 	db	32
  1091  00FF05  00                 	db	0
  1092  00FF06                     STR_15:
  1093  00FF06  62                 	db	98	;'b'
  1094  00FF07  6F                 	db	111	;'o'
  1095  00FF08  74                 	db	116	;'t'
  1096  00FF09  74                 	db	116	;'t'
  1097  00FF0A  6C                 	db	108	;'l'
  1098  00FF0B  65                 	db	101	;'e'
  1099  00FF0C  73                 	db	115	;'s'
  1100  00FF0D  3A                 	db	58	;':'
  1101  00FF0E  20                 	db	32
  1102  00FF0F  25                 	db	37
  1103  00FF10  30                 	db	48	;'0'
  1104  00FF11  32                 	db	50	;'2'
  1105  00FF12  64                 	db	100	;'d'
  1106  00FF13  20                 	db	32
  1107  00FF14  20                 	db	32
  1108  00FF15  20                 	db	32
  1109  00FF16  20                 	db	32
  1110  00FF17  00                 	db	0
  1111  00FF18  00                 	db	0
  1112  00FF19                     STR_8:
  1113  00FF19  50                 	db	80	;'P'
  1114  00FF1A  32                 	db	50	;'2'
  1115  00FF1B  5B                 	db	91	;'['
  1116  00FF1C  30                 	db	48	;'0'
  1117  00FF1D  2D                 	db	45
  1118  00FF1E  31                 	db	49	;'1'
  1119  00FF1F  5D                 	db	93	;']'
  1120  00FF20  3A                 	db	58	;':'
  1121  00FF21  25                 	db	37
  1122  00FF22  64                 	db	100	;'d'
  1123  00FF23  2C                 	db	44
  1124  00FF24  25                 	db	37
  1125  00FF25  64                 	db	100	;'d'
  1126  00FF26  20                 	db	32
  1127  00FF27  4D                 	db	77	;'M'
  1128  00FF28  3A                 	db	58	;':'
  1129  00FF29  25                 	db	37
  1130  00FF2A  64                 	db	100	;'d'
  1131  00FF2B  00                 	db	0
  1132  00FF2C                     STR_11:
  1133  00FF2C  50                 	db	80	;'P'
  1134  00FF2D  49                 	db	73	;'I'
  1135  00FF2E  52                 	db	82	;'R'
  1136  00FF2F  3A                 	db	58	;':'
  1137  00FF30  25                 	db	37
  1138  00FF31  64                 	db	100	;'d'
  1139  00FF32  25                 	db	37
  1140  00FF33  64                 	db	100	;'d'
  1141  00FF34  2C                 	db	44
  1142  00FF35  25                 	db	37
  1143  00FF36  30                 	db	48	;'0'
  1144  00FF37  34                 	db	52	;'4'
  1145  00FF38  64                 	db	100	;'d'
  1146  00FF39  2C                 	db	44
  1147  00FF3A  25                 	db	37
  1148  00FF3B  30                 	db	48	;'0'
  1149  00FF3C  34                 	db	52	;'4'
  1150  00FF3D  64                 	db	100	;'d'
  1151  00FF3E  00                 	db	0
  1152  00FF3F                     STR_12:
  1153  00FF3F  44                 	db	68	;'D'
  1154  00FF40  49                 	db	73	;'I'
  1155  00FF41  53                 	db	83	;'S'
  1156  00FF42  54                 	db	84	;'T'
  1157  00FF43  5B                 	db	91	;'['
  1158  00FF44  30                 	db	48	;'0'
  1159  00FF45  5D                 	db	93	;']'
  1160  00FF46  3A                 	db	58	;':'
  1161  00FF47  25                 	db	37
  1162  00FF48  30                 	db	48	;'0'
  1163  00FF49  34                 	db	52	;'4'
  1164  00FF4A  64                 	db	100	;'d'
  1165  00FF4B  20                 	db	32
  1166  00FF4C  4D                 	db	77	;'M'
  1167  00FF4D  3A                 	db	58	;':'
  1168  00FF4E  25                 	db	37
  1169  00FF4F  64                 	db	100	;'d'
  1170  00FF50  00                 	db	0
  1171  00FF51                     STR_27:
  1172  00FF51  30                 	db	48	;'0'
  1173  00FF52  31                 	db	49	;'1'
  1174  00FF53  32                 	db	50	;'2'
  1175  00FF54  33                 	db	51	;'3'
  1176  00FF55  34                 	db	52	;'4'
  1177  00FF56  35                 	db	53	;'5'
  1178  00FF57  36                 	db	54	;'6'
  1179  00FF58  37                 	db	55	;'7'
  1180  00FF59  38                 	db	56	;'8'
  1181  00FF5A  39                 	db	57	;'9'
  1182  00FF5B  61                 	db	97	;'a'
  1183  00FF5C  62                 	db	98	;'b'
  1184  00FF5D  63                 	db	99	;'c'
  1185  00FF5E  64                 	db	100	;'d'
  1186  00FF5F  65                 	db	101	;'e'
  1187  00FF60  66                 	db	102	;'f'
  1188  00FF61  00                 	db	0
  1189  00FF62                     STR_7:
  1190  00FF62  50                 	db	80	;'P'
  1191  00FF63  31                 	db	49	;'1'
  1192  00FF64  5B                 	db	91	;'['
  1193  00FF65  30                 	db	48	;'0'
  1194  00FF66  2D                 	db	45
  1195  00FF67  32                 	db	50	;'2'
  1196  00FF68  5D                 	db	93	;']'
  1197  00FF69  3A                 	db	58	;':'
  1198  00FF6A  25                 	db	37
  1199  00FF6B  64                 	db	100	;'d'
  1200  00FF6C  2C                 	db	44
  1201  00FF6D  25                 	db	37
  1202  00FF6E  64                 	db	100	;'d'
  1203  00FF6F  2C                 	db	44
  1204  00FF70  25                 	db	37
  1205  00FF71  64                 	db	100	;'d'
  1206  00FF72  00                 	db	0
  1207  00FF73                     STR_10:
  1208  00FF73  49                 	db	73	;'I'
  1209  00FF74  52                 	db	82	;'R'
  1210  00FF75  32                 	db	50	;'2'
  1211  00FF76  5B                 	db	91	;'['
  1212  00FF77  30                 	db	48	;'0'
  1213  00FF78  5D                 	db	93	;']'
  1214  00FF79  3A                 	db	58	;':'
  1215  00FF7A  25                 	db	37
  1216  00FF7B  30                 	db	48	;'0'
  1217  00FF7C  34                 	db	52	;'4'
  1218  00FF7D  64                 	db	100	;'d'
  1219  00FF7E  4D                 	db	77	;'M'
  1220  00FF7F  3A                 	db	58	;':'
  1221  00FF80  25                 	db	37
  1222  00FF81  64                 	db	100	;'d'
  1223  00FF82  00                 	db	0
  1224  00FF83                     STR_4:
  1225  00FF83  79                 	db	121	;'y'
  1226  00FF84  6E                 	db	110	;'n'
  1227  00FF85  3A                 	db	58	;':'
  1228  00FF86  25                 	db	37
  1229  00FF87  30                 	db	48	;'0'
  1230  00FF88  32                 	db	50	;'2'
  1231  00FF89  64                 	db	100	;'d'
  1232  00FF8A  20                 	db	32
  1233  00FF8B  79                 	db	121	;'y'
  1234  00FF8C  63                 	db	99	;'c'
  1235  00FF8D  3A                 	db	58	;':'
  1236  00FF8E  25                 	db	37
  1237  00FF8F  30                 	db	48	;'0'
  1238  00FF90  32                 	db	50	;'2'
  1239  00FF91  64                 	db	100	;'d'
  1240  00FF92  00                 	db	0
  1241  00FF93                     STR_14:
  1242  00FF93  45                 	db	69	;'E'
  1243  00FF94  4D                 	db	77	;'M'
  1244  00FF95  45                 	db	69	;'E'
  1245  00FF96  52                 	db	82	;'R'
  1246  00FF97  47                 	db	71	;'G'
  1247  00FF98  45                 	db	69	;'E'
  1248  00FF99  4E                 	db	78	;'N'
  1249  00FF9A  43                 	db	67	;'C'
  1250  00FF9B  59                 	db	89	;'Y'
  1251  00FF9C  20                 	db	32
  1252  00FF9D  53                 	db	83	;'S'
  1253  00FF9E  54                 	db	84	;'T'
  1254  00FF9F  4F                 	db	79	;'O'
  1255  00FFA0  50                 	db	80	;'P'
  1256  00FFA1  00                 	db	0
  1257  00FFA2                     STR_24:
  1258  00FFA2  6D                 	db	109	;'m'
  1259  00FFA3  65                 	db	101	;'e'
  1260  00FFA4  6E                 	db	110	;'n'
  1261  00FFA5  75                 	db	117	;'u'
  1262  00FFA6  20                 	db	32
  1263  00FFA7  73                 	db	115	;'s'
  1264  00FFA8  65                 	db	101	;'e'
  1265  00FFA9  6C                 	db	108	;'l'
  1266  00FFAA  65                 	db	101	;'e'
  1267  00FFAB  63                 	db	99	;'c'
  1268  00FFAC  74                 	db	116	;'t'
  1269  00FFAD  69                 	db	105	;'i'
  1270  00FFAE  6F                 	db	111	;'o'
  1271  00FFAF  6E                 	db	110	;'n'
  1272  00FFB0  00                 	db	0
  1273  00FFB1                     STR_6:
  1274  00FFB1  44                 	db	68	;'D'
  1275  00FFB2  43                 	db	67	;'C'
  1276  00FFB3  3A                 	db	58	;':'
  1277  00FFB4  25                 	db	37
  1278  00FFB5  64                 	db	100	;'d'
  1279  00FFB6  20                 	db	32
  1280  00FFB7  4D                 	db	77	;'M'
  1281  00FFB8  45                 	db	69	;'E'
  1282  00FFB9  41                 	db	65	;'A'
  1283  00FFBA  53                 	db	83	;'S'
  1284  00FFBB  3A                 	db	58	;':'
  1285  00FFBC  25                 	db	37
  1286  00FFBD  64                 	db	100	;'d'
  1287  00FFBE  00                 	db	0
  1288  00FFBF                     STR_25:
  1289  00FFBF  6E                 	db	110	;'n'
  1290  00FFC0  6F                 	db	111	;'o'
  1291  00FFC1  20                 	db	32
  1292  00FFC2  70                 	db	112	;'p'
  1293  00FFC3  61                 	db	97	;'a'
  1294  00FFC4  67                 	db	103	;'g'
  1295  00FFC5  65                 	db	101	;'e'
  1296  00FFC6  20                 	db	32
  1297  00FFC7  66                 	db	102	;'f'
  1298  00FFC8  6F                 	db	111	;'o'
  1299  00FFC9  75                 	db	117	;'u'
  1300  00FFCA  6E                 	db	110	;'n'
  1301  00FFCB  64                 	db	100	;'d'
  1302  00FFCC  00                 	db	0
  1303  00FFCD                     STR_5:
  1304  00FFCD  52                 	db	82	;'R'
  1305  00FFCE  43                 	db	67	;'C'
  1306  00FFCF  3A                 	db	58	;':'
  1307  00FFD0  25                 	db	37
  1308  00FFD1  64                 	db	100	;'d'
  1309  00FFD2  20                 	db	32
  1310  00FFD3  4D                 	db	77	;'M'
  1311  00FFD4  43                 	db	67	;'C'
  1312  00FFD5  3A                 	db	58	;':'
  1313  00FFD6  25                 	db	37
  1314  00FFD7  64                 	db	100	;'d'
  1315  00FFD8  00                 	db	0
  1316  00FFD9                     STR_9:
  1317  00FFD9  49                 	db	73	;'I'
  1318  00FFDA  52                 	db	82	;'R'
  1319  00FFDB  31                 	db	49	;'1'
  1320  00FFDC  5B                 	db	91	;'['
  1321  00FFDD  30                 	db	48	;'0'
  1322  00FFDE  5D                 	db	93	;']'
  1323  00FFDF  3A                 	db	58	;':'
  1324  00FFE0  25                 	db	37
  1325  00FFE1  30                 	db	48	;'0'
  1326  00FFE2  34                 	db	52	;'4'
  1327  00FFE3  64                 	db	100	;'d'
  1328  00FFE4  00                 	db	0
  1329  00FFE5                     STR_23:
  1330  00FFE5  69                 	db	105	;'i'
  1331  00FFE6  6E                 	db	110	;'n'
  1332  00FFE7  76                 	db	118	;'v'
  1333  00FFE8  61                 	db	97	;'a'
  1334  00FFE9  6C                 	db	108	;'l'
  1335  00FFEA  69                 	db	105	;'i'
  1336  00FFEB  64                 	db	100	;'d'
  1337  00FFEC  00                 	db	0
  1338  00FFED                     STR_26:
  1339  00FFED  28                 	db	40
  1340  00FFEE  6E                 	db	110	;'n'
  1341  00FFEF  75                 	db	117	;'u'
  1342  00FFF0  6C                 	db	108	;'l'
  1343  00FFF1  6C                 	db	108	;'l'
  1344  00FFF2  29                 	db	41
  1345  00FFF3  00                 	db	0
  1346  00FFF4                     STR_13:
  1347  00FFF4  45                 	db	69	;'E'
  1348  00FFF5  52                 	db	82	;'R'
  1349  00FFF6  52                 	db	82	;'R'
  1350  00FFF7  4F                 	db	79	;'O'
  1351  00FFF8  52                 	db	82	;'R'
  1352  00FFF9  00                 	db	0
  1353  00FFFA                     STR_19:
  1354  00FFFA  25                 	db	37
  1355  00FFFB  73                 	db	115	;'s'
  1356  00FFFC  25                 	db	37
  1357  00FFFD  63                 	db	99	;'c'
  1358  00FFFE  00                 	db	0
  1359  0000                     
  1360                           ; #config settings
  1361  00FFFF  00                 	db	0	; dummy byte at the end
  1362  0000                     
  1363                           	psect	nvCOMRAM
  1364  000079                     __pnvCOMRAM:
  1365                           	opt stack 0
  1366  000079                     _measure:
  1367                           	opt stack 0
  1368  000079                     	ds	2
  1369                           
  1370                           	psect	nvBANK0
  1371  0000F6                     __pnvBANK0:
  1372                           	opt stack 0
  1373  0000F6                     _discretize:
  1374                           	opt stack 0
  1375  0000F6                     	ds	2
  1376  0000F8                     _release:
  1377                           	opt stack 0
  1378  0000F8                     	ds	2
  1379  0000                     _ADCON0	set	4034
  1380  0000                     _ADCON0bits	set	4034
  1381  0000                     _ADCON1	set	4033
  1382  0000                     _ADRESL	set	4035
  1383  0000                     _CMCONbits	set	4020
  1384  0000                     _CVRCON	set	4021
  1385  0000                     _INTCONbits	set	4082
  1386  0000                     _LATA	set	3977
  1387  0000                     _LATB	set	3978
  1388  0000                     _LATC	set	3979
  1389  0000                     _LATD	set	3980
  1390  0000                     _LATDbits	set	3980
  1391  0000                     _LATE	set	3981
  1392  0000                     _PORTB	set	3969
  1393  0000                     _SSPADD	set	4040
  1394  0000                     _SSPBUF	set	4041
  1395  0000                     _SSPCON1	set	4038
  1396  0000                     _SSPCON2	set	4037
  1397  0000                     _SSPSTAT	set	4039
  1398  0000                     _TRISA	set	3986
  1399  0000                     _TRISB	set	3987
  1400  0000                     _TRISC	set	3988
  1401  0000                     _TRISD	set	3989
  1402  0000                     _TRISE	set	3990
  1403  0000                     _ADRESH	set	4036
  1404  0000                     _ACKDT	set	32301
  1405  0000                     _ACKEN	set	32300
  1406  0000                     _ADFM	set	32263
  1407  0000                     _ADON	set	32272
  1408  0000                     _INT1IE	set	32643
  1409  0000                     _INT1IF	set	32640
  1410  0000                     _PEN	set	32298
  1411  0000                     _RCEN	set	32299
  1412  0000                     _RSEN	set	32297
  1413  0000                     _SEN	set	32296
  1414  0000                     _TRISC3	set	31907
  1415  0000                     _TRISC4	set	31908
  1416  0000                     _nRBPU	set	32655
  1417                           
  1418                           	psect	cinit
  1419  003614                     __pcinit:
  1420                           	opt stack 0
  1421  003614                     start_initialization:
  1422                           	opt stack 0
  1423  003614                     __initialization:
  1424                           	opt stack 0
  1425                           
  1426                           ; Initialize objects allocated to BIGRAM (720 bytes)
  1427                           ; load TBLPTR registers with __pidataBIGRAM
  1428  003614  0E88               	movlw	low __pidataBIGRAM
  1429  003616  6EF6               	movwf	tblptrl,c
  1430  003618  0E2B               	movlw	high __pidataBIGRAM
  1431  00361A  6EF7               	movwf	tblptrh,c
  1432  00361C  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
  1433  00361E  6EF8               	movwf	tblptru,c
  1434  003620  EE01  F078         	lfsr	0,__pdataBIGRAM
  1435  003624  EE12 F0D0          	lfsr	1,720
  1436  003628                     copy_data0:
  1437  003628  0009               	tblrd		*+
  1438  00362A  CFF5 FFEE          	movff	tablat,postinc0
  1439  00362E  50E5               	movf	postdec1,w,c
  1440  003630  50E1               	movf	fsr1l,w,c
  1441  003632  E1FA               	bnz	copy_data0
  1442  003634  50E2               	movf	fsr1h,w,c
  1443  003636  E1F8               	bnz	copy_data0
  1444                           
  1445                           ; Initialize objects allocated to BANK0 (28 bytes)
  1446                           ; load TBLPTR registers with __pidataBANK0
  1447  003638  0EA6               	movlw	low __pidataBANK0
  1448  00363A  6EF6               	movwf	tblptrl,c
  1449  00363C  0E3C               	movlw	high __pidataBANK0
  1450  00363E  6EF7               	movwf	tblptrh,c
  1451  003640  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1452  003642  6EF8               	movwf	tblptru,c
  1453  003644  EE00  F0DA         	lfsr	0,__pdataBANK0
  1454  003648  EE10 F01C          	lfsr	1,28
  1455  00364C                     copy_data1:
  1456  00364C  0009               	tblrd		*+
  1457  00364E  CFF5 FFEE          	movff	tablat,postinc0
  1458  003652  50E5               	movf	postdec1,w,c
  1459  003654  50E1               	movf	fsr1l,w,c
  1460  003656  E1FA               	bnz	copy_data1
  1461                           
  1462                           ; Initialize objects allocated to COMRAM (6 bytes)
  1463                           ; load TBLPTR registers with __pidataCOMRAM
  1464  003658  0E2E               	movlw	low __pidataCOMRAM
  1465  00365A  6EF6               	movwf	tblptrl,c
  1466  00365C  0E3D               	movlw	high __pidataCOMRAM
  1467  00365E  6EF7               	movwf	tblptrh,c
  1468  003660  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1469  003662  6EF8               	movwf	tblptru,c
  1470  003664  EE00  F073         	lfsr	0,__pdataCOMRAM
  1471  003668  EE10 F006          	lfsr	1,6
  1472  00366C                     copy_data2:
  1473  00366C  0009               	tblrd		*+
  1474  00366E  CFF5 FFEE          	movff	tablat,postinc0
  1475  003672  50E5               	movf	postdec1,w,c
  1476  003674  50E1               	movf	fsr1l,w,c
  1477  003676  E1FA               	bnz	copy_data2
  1478                           
  1479                           ; Clear objects allocated to BANK1 (110 bytes)
  1480  003678  EE01  F000         	lfsr	0,__pbssBANK1
  1481  00367C  0E6E               	movlw	110
  1482  00367E                     clear_0:
  1483  00367E  6AEE               	clrf	postinc0,c
  1484  003680  06E8               	decf	wreg,f,c
  1485  003682  E1FD               	bnz	clear_0
  1486                           
  1487                           ; Clear objects allocated to BANK0 (32 bytes)
  1488  003684  EE00  F0BA         	lfsr	0,__pbssBANK0
  1489  003688  0E20               	movlw	32
  1490  00368A                     clear_1:
  1491  00368A  6AEE               	clrf	postinc0,c
  1492  00368C  06E8               	decf	wreg,f,c
  1493  00368E  E1FD               	bnz	clear_1
  1494                           
  1495                           ; Clear objects allocated to COMRAM (53 bytes)
  1496  003690  EE00  F03E         	lfsr	0,__pbssCOMRAM
  1497  003694  0E35               	movlw	53
  1498  003696                     clear_2:
  1499  003696  6AEE               	clrf	postinc0,c
  1500  003698  06E8               	decf	wreg,f,c
  1501  00369A  E1FD               	bnz	clear_2
  1502  00369C                     end_of_initialization:
  1503                           	opt stack 0
  1504  00369C                     __end_of__initialization:
  1505                           	opt stack 0
  1506  00369C  907B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1507  00369E  927B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1508  0036A0  0100               	movlb	0
  1509  0036A2  EF62  F01A         	goto	_main	;jump to C main() function
  1510                           tblptru	equ	0xFF8
  1511                           tblptrh	equ	0xFF7
  1512                           tblptrl	equ	0xFF6
  1513                           tablat	equ	0xFF5
  1514                           postinc0	equ	0xFEE
  1515                           wreg	equ	0xFE8
  1516                           postdec1	equ	0xFE5
  1517                           fsr1h	equ	0xFE2
  1518                           fsr1l	equ	0xFE1
  1519                           
  1520                           	psect	bssCOMRAM
  1521  00003E                     __pbssCOMRAM:
  1522                           	opt stack 0
  1523  00003E                     _time_i:
  1524                           	opt stack 0
  1525  00003E                     	ds	14
  1526  00004C                     _DIST1:
  1527                           	opt stack 0
  1528  00004C                     	ds	10
  1529  000056                     _IR1:
  1530                           	opt stack 0
  1531  000056                     	ds	10
  1532  000060                     _PROX2:
  1533                           	opt stack 0
  1534  000060                     	ds	10
  1535  00006A                     _time:
  1536                           	opt stack 0
  1537  00006A                     	ds	7
  1538  000071                     _DIST1_PIN:
  1539                           	opt stack 0
  1540  000071                     	ds	1
  1541  000072                     _PROX1_PIN:
  1542                           	opt stack 0
  1543  000072                     	ds	1
  1544                           tblptru	equ	0xFF8
  1545                           tblptrh	equ	0xFF7
  1546                           tblptrl	equ	0xFF6
  1547                           tablat	equ	0xFF5
  1548                           postinc0	equ	0xFEE
  1549                           wreg	equ	0xFE8
  1550                           postdec1	equ	0xFE5
  1551                           fsr1h	equ	0xFE2
  1552                           fsr1l	equ	0xFE1
  1553                           
  1554                           	psect	dataCOMRAM
  1555  000073                     __pdataCOMRAM:
  1556                           	opt stack 0
  1557  000073                     _sortSize:
  1558                           	opt stack 0
  1559  000073                     	ds	2
  1560  000075                     _DIST1_TRIG:
  1561                           	opt stack 0
  1562  000075                     	ds	1
  1563  000076                     _IR1_PIN:
  1564                           	opt stack 0
  1565  000076                     	ds	1
  1566  000077                     _IR2_PIN:
  1567                           	opt stack 0
  1568  000077                     	ds	1
  1569  000078                     _PROX2_PIN:
  1570                           	opt stack 0
  1571  000078                     	ds	1
  1572                           tblptru	equ	0xFF8
  1573                           tblptrh	equ	0xFF7
  1574                           tblptrl	equ	0xFF6
  1575                           tablat	equ	0xFF5
  1576                           postinc0	equ	0xFEE
  1577                           wreg	equ	0xFE8
  1578                           postdec1	equ	0xFE5
  1579                           fsr1h	equ	0xFE2
  1580                           fsr1l	equ	0xFE1
  1581                           
  1582                           	psect	bssBANK0
  1583  0000BA                     __pbssBANK0:
  1584                           	opt stack 0
  1585  0000BA                     _PROX1:
  1586                           	opt stack 0
  1587  0000BA                     	ds	10
  1588  0000C4                     _bottle_type:
  1589                           	opt stack 0
  1590  0000C4                     	ds	2
  1591  0000C6                     _discretize_counter:
  1592                           	opt stack 0
  1593  0000C6                     	ds	2
  1594  0000C8                     _eskaNoCap:
  1595                           	opt stack 0
  1596  0000C8                     	ds	2
  1597  0000CA                     _eskaWCap:
  1598                           	opt stack 0
  1599  0000CA                     	ds	2
  1600  0000CC                     _measure_counter:
  1601                           	opt stack 0
  1602  0000CC                     	ds	2
  1603  0000CE                     _release_counter:
  1604                           	opt stack 0
  1605  0000CE                     	ds	2
  1606  0000D0                     _runTime:
  1607                           	opt stack 0
  1608  0000D0                     	ds	2
  1609  0000D2                     _sorted_bottles:
  1610                           	opt stack 0
  1611  0000D2                     	ds	2
  1612  0000D4                     _timeDiff:
  1613                           	opt stack 0
  1614  0000D4                     	ds	2
  1615  0000D6                     _yopNoCap:
  1616                           	opt stack 0
  1617  0000D6                     	ds	2
  1618  0000D8                     _yopWCap:
  1619                           	opt stack 0
  1620  0000D8                     	ds	2
  1621                           tblptru	equ	0xFF8
  1622                           tblptrh	equ	0xFF7
  1623                           tblptrl	equ	0xFF6
  1624                           tablat	equ	0xFF5
  1625                           postinc0	equ	0xFEE
  1626                           wreg	equ	0xFE8
  1627                           postdec1	equ	0xFE5
  1628                           fsr1h	equ	0xFE2
  1629                           fsr1l	equ	0xFE1
  1630                           
  1631                           	psect	dataBANK0
  1632  0000DA                     __pdataBANK0:
  1633                           	opt stack 0
  1634  0000DA                     _DIST_THRESHOLD_HI:
  1635                           	opt stack 0
  1636  0000DA                     	ds	2
  1637  0000DC                     _DIST_THRESHOLD_LOW:
  1638                           	opt stack 0
  1639  0000DC                     	ds	2
  1640  0000DE                     _IR_THRESHOLD_HI:
  1641                           	opt stack 0
  1642  0000DE                     	ds	2
  1643  0000E0                     _IR_THRESHOLD_LOW:
  1644                           	opt stack 0
  1645  0000E0                     	ds	2
  1646  0000E2                     _sortIndex:
  1647                           	opt stack 0
  1648  0000E2                     	ds	2
  1649  0000E4                     _nstate:
  1650                           	opt stack 0
  1651  0000E4                     	ds	1
  1652  0000E5                     _state:
  1653                           	opt stack 0
  1654  0000E5                     	ds	1
  1655  0000E6                     _creditIndex:
  1656                           	opt stack 0
  1657  0000E6                     	ds	2
  1658  0000E8                     _creditSize:
  1659                           	opt stack 0
  1660  0000E8                     	ds	2
  1661  0000EA                     _endIndex:
  1662                           	opt stack 0
  1663  0000EA                     	ds	2
  1664  0000EC                     _endSize:
  1665                           	opt stack 0
  1666  0000EC                     	ds	2
  1667  0000EE                     _events:
  1668                           	opt stack 0
  1669  0000EE                     	ds	2
  1670  0000F0                     _logIndex:
  1671                           	opt stack 0
  1672  0000F0                     	ds	2
  1673  0000F2                     _menuIndex:
  1674                           	opt stack 0
  1675  0000F2                     	ds	2
  1676  0000F4                     _menuSize:
  1677                           	opt stack 0
  1678  0000F4                     	ds	2
  1679                           tblptru	equ	0xFF8
  1680                           tblptrh	equ	0xFF7
  1681                           tblptrl	equ	0xFF6
  1682                           tablat	equ	0xFF5
  1683                           postinc0	equ	0xFEE
  1684                           wreg	equ	0xFE8
  1685                           postdec1	equ	0xFE5
  1686                           fsr1h	equ	0xFE2
  1687                           fsr1l	equ	0xFE1
  1688                           
  1689                           	psect	bssBANK1
  1690  000100                     __pbssBANK1:
  1691                           	opt stack 0
  1692  000100                     _latestSortedBottleTime:
  1693                           	opt stack 0
  1694  000100                     	ds	14
  1695  00010E                     _startTime:
  1696                           	opt stack 0
  1697  00010E                     	ds	14
  1698  00011C                     _IR2:
  1699                           	opt stack 0
  1700  00011C                     	ds	10
  1701  000126                     _display0:
  1702                           	opt stack 0
  1703  000126                     	ds	18
  1704  000138                     _display1:
  1705                           	opt stack 0
  1706  000138                     	ds	18
  1707  00014A                     _ndisplay0:
  1708                           	opt stack 0
  1709  00014A                     	ds	18
  1710  00015C                     _ndisplay1:
  1711                           	opt stack 0
  1712  00015C                     	ds	18
  1713                           tblptru	equ	0xFF8
  1714                           tblptrh	equ	0xFF7
  1715                           tblptrl	equ	0xFF6
  1716                           tablat	equ	0xFF5
  1717                           postinc0	equ	0xFEE
  1718                           wreg	equ	0xFE8
  1719                           postdec1	equ	0xFE5
  1720                           fsr1h	equ	0xFE2
  1721                           fsr1l	equ	0xFE1
  1722                           
  1723                           	psect	dataBIGRAM
  1724  000178                     __pdataBIGRAM:
  1725                           	opt stack 0
  1726  000178                     _menu:
  1727                           	opt stack 0
  1728  000178                     	ds	720
  1729                           tblptru	equ	0xFF8
  1730                           tblptrh	equ	0xFF7
  1731                           tblptrl	equ	0xFF6
  1732                           tablat	equ	0xFF5
  1733                           postinc0	equ	0xFEE
  1734                           wreg	equ	0xFE8
  1735                           postdec1	equ	0xFE5
  1736                           fsr1h	equ	0xFE2
  1737                           fsr1l	equ	0xFE1
  1738                           
  1739                           	psect	cstackBANK1
  1740  00016E                     __pcstackBANK1:
  1741                           	opt stack 0
  1742  00016E                     display_menu@selector:
  1743                           	opt stack 0
  1744                           
  1745                           ; 2 bytes @ 0x0
  1746  00016E                     	ds	2
  1747  000170                     display_menu@menuSizePtr:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0x2
  1751  000170                     	ds	2
  1752  000172                     display_menu@menuSelection:
  1753                           	opt stack 0
  1754                           
  1755                           ; 2 bytes @ 0x4
  1756  000172                     	ds	2
  1757  000174                     _display_menu$1161:
  1758                           	opt stack 0
  1759                           
  1760                           ; 2 bytes @ 0x6
  1761  000174                     	ds	2
  1762  000176                     display_menu@menuIndexPtr:
  1763                           	opt stack 0
  1764                           
  1765                           ; 2 bytes @ 0x8
  1766  000176                     	ds	2
  1767                           tblptru	equ	0xFF8
  1768                           tblptrh	equ	0xFF7
  1769                           tblptrl	equ	0xFF6
  1770                           tablat	equ	0xFF5
  1771                           postinc0	equ	0xFEE
  1772                           wreg	equ	0xFE8
  1773                           postdec1	equ	0xFE5
  1774                           fsr1h	equ	0xFE2
  1775                           fsr1l	equ	0xFE1
  1776                           
  1777                           	psect	cstackBANK0
  1778  000080                     __pcstackBANK0:
  1779                           	opt stack 0
  1780  000080                     ??_readADC:
  1781  000080                     ??_isdigit:
  1782  000080                     ??_I2C_Master_Wait:
  1783  000080                     ?_strcmp:
  1784                           	opt stack 0
  1785  000080                     ?___wmul:
  1786                           	opt stack 0
  1787  000080                     ?___awdiv:
  1788                           	opt stack 0
  1789  000080                     ?___awmod:
  1790                           	opt stack 0
  1791  000080                     ?___lwdiv:
  1792                           	opt stack 0
  1793  000080                     ?___lldiv:
  1794                           	opt stack 0
  1795  000080                     lcdNibble@temp:
  1796                           	opt stack 0
  1797  000080                     ___wmul@multiplier:
  1798                           	opt stack 0
  1799  000080                     ___awdiv@dividend:
  1800                           	opt stack 0
  1801  000080                     ___awmod@dividend:
  1802                           	opt stack 0
  1803  000080                     ___lwdiv@dividend:
  1804                           	opt stack 0
  1805  000080                     strcmp@s1:
  1806                           	opt stack 0
  1807  000080                     strcpy@to:
  1808                           	opt stack 0
  1809  000080                     ___lldiv@dividend:
  1810                           	opt stack 0
  1811                           
  1812                           ; 4 bytes @ 0x0
  1813  000080                     	ds	1
  1814  000081                     I2C_Master_Read@a:
  1815                           	opt stack 0
  1816  000081                     lcdNibble@data:
  1817                           	opt stack 0
  1818  000081                     readADC@channel:
  1819                           	opt stack 0
  1820  000081                     _isdigit$774:
  1821                           	opt stack 0
  1822  000081                     I2C_Master_Write@d:
  1823                           	opt stack 0
  1824                           
  1825                           ; 2 bytes @ 0x1
  1826  000081                     	ds	1
  1827  000082                     ??_read_sensors:
  1828  000082                     I2C_Master_Read@temp:
  1829                           	opt stack 0
  1830  000082                     lcdInst@data:
  1831                           	opt stack 0
  1832  000082                     putch@data:
  1833                           	opt stack 0
  1834  000082                     isdigit@c:
  1835                           	opt stack 0
  1836  000082                     ___wmul@multiplicand:
  1837                           	opt stack 0
  1838  000082                     ___awdiv@divisor:
  1839                           	opt stack 0
  1840  000082                     ___awmod@divisor:
  1841                           	opt stack 0
  1842  000082                     ___lwdiv@divisor:
  1843                           	opt stack 0
  1844  000082                     strcmp@s2:
  1845                           	opt stack 0
  1846  000082                     strcpy@from:
  1847                           	opt stack 0
  1848                           
  1849                           ; 2 bytes @ 0x2
  1850  000082                     	ds	1
  1851  000083                     ??_initLCD:
  1852  000083                     set_time@i:
  1853                           	opt stack 0
  1854                           
  1855                           ; 1 bytes @ 0x3
  1856  000083                     	ds	1
  1857  000084                     ??_strcmp:
  1858  000084                     ___awdiv@counter:
  1859                           	opt stack 0
  1860  000084                     ___awmod@counter:
  1861                           	opt stack 0
  1862  000084                     ___lwdiv@counter:
  1863                           	opt stack 0
  1864  000084                     ___wmul@product:
  1865                           	opt stack 0
  1866  000084                     strcpy@cp:
  1867                           	opt stack 0
  1868  000084                     ___lldiv@divisor:
  1869                           	opt stack 0
  1870                           
  1871                           ; 4 bytes @ 0x4
  1872  000084                     	ds	1
  1873  000085                     ___awdiv@sign:
  1874                           	opt stack 0
  1875  000085                     ___awmod@sign:
  1876                           	opt stack 0
  1877  000085                     strcmp@r:
  1878                           	opt stack 0
  1879  000085                     ___lwdiv@quotient:
  1880                           	opt stack 0
  1881                           
  1882                           ; 2 bytes @ 0x5
  1883  000085                     	ds	1
  1884  000086                     ??_update_RTC:
  1885  000086                     ?__measure:
  1886                           	opt stack 0
  1887  000086                     read_sensors@i:
  1888                           	opt stack 0
  1889  000086                     ___awdiv@quotient:
  1890                           	opt stack 0
  1891                           
  1892                           ; 2 bytes @ 0x6
  1893  000086                     	ds	1
  1894  000087                     ?___lwmod:
  1895                           	opt stack 0
  1896  000087                     ___lwmod@dividend:
  1897                           	opt stack 0
  1898                           
  1899                           ; 2 bytes @ 0x7
  1900  000087                     	ds	1
  1901  000088                     ___lldiv@quotient:
  1902                           	opt stack 0
  1903                           
  1904                           ; 4 bytes @ 0x8
  1905  000088                     	ds	1
  1906  000089                     ___lwmod@divisor:
  1907                           	opt stack 0
  1908                           
  1909                           ; 2 bytes @ 0x9
  1910  000089                     	ds	1
  1911  00008A                     update_RTC@i:
  1912                           	opt stack 0
  1913  00008A                     __measure@i:
  1914                           	opt stack 0
  1915                           
  1916                           ; 1 bytes @ 0xA
  1917  00008A                     	ds	1
  1918  00008B                     __measure@i_496:
  1919                           	opt stack 0
  1920  00008B                     ___lwmod@counter:
  1921                           	opt stack 0
  1922                           
  1923                           ; 1 bytes @ 0xB
  1924  00008B                     	ds	1
  1925  00008C                     ?__doprnt:
  1926                           	opt stack 0
  1927  00008C                     __measure@i_497:
  1928                           	opt stack 0
  1929  00008C                     ___lldiv@counter:
  1930                           	opt stack 0
  1931  00008C                     __doprnt@pb:
  1932                           	opt stack 0
  1933                           
  1934                           ; 2 bytes @ 0xC
  1935  00008C                     	ds	1
  1936  00008D                     __measure@i_498:
  1937                           	opt stack 0
  1938  00008D                     I2C_Master_Init@c:
  1939                           	opt stack 0
  1940                           
  1941                           ; 4 bytes @ 0xD
  1942  00008D                     	ds	1
  1943  00008E                     __measure@i_499:
  1944                           	opt stack 0
  1945  00008E                     __doprnt@f:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0xE
  1949  00008E                     	ds	1
  1950  00008F                     __measure@i_500:
  1951                           	opt stack 0
  1952                           
  1953                           ; 1 bytes @ 0xF
  1954  00008F                     	ds	1
  1955  000090                     __measure@i_501:
  1956                           	opt stack 0
  1957  000090                     __doprnt@ap:
  1958                           	opt stack 0
  1959                           
  1960                           ; 2 bytes @ 0x10
  1961  000090                     	ds	1
  1962  000091                     ??_I2C_Master_Init:
  1963  000091                     __measure@i_502:
  1964                           	opt stack 0
  1965                           
  1966                           ; 1 bytes @ 0x11
  1967  000091                     	ds	1
  1968  000092                     ??__doprnt:
  1969  000092                     __measure@measurement:
  1970                           	opt stack 0
  1971                           
  1972                           ; 2 bytes @ 0x12
  1973  000092                     	ds	2
  1974  000094                     ??_sort:
  1975                           
  1976                           ; 1 bytes @ 0x14
  1977  000094                     	ds	2
  1978  000096                     __doprnt@idx:
  1979                           	opt stack 0
  1980                           
  1981                           ; 1 bytes @ 0x16
  1982  000096                     	ds	1
  1983  000097                     __doprnt@prec:
  1984                           	opt stack 0
  1985                           
  1986                           ; 1 bytes @ 0x17
  1987  000097                     	ds	1
  1988  000098                     sort@i:
  1989                           	opt stack 0
  1990  000098                     __doprnt@len:
  1991                           	opt stack 0
  1992                           
  1993                           ; 2 bytes @ 0x18
  1994  000098                     	ds	2
  1995  00009A                     __doprnt@cp:
  1996                           	opt stack 0
  1997                           
  1998                           ; 2 bytes @ 0x1A
  1999  00009A                     	ds	2
  2000  00009C                     __doprnt@val:
  2001                           	opt stack 0
  2002                           
  2003                           ; 2 bytes @ 0x1C
  2004  00009C                     	ds	2
  2005  00009E                     __doprnt@flag:
  2006                           	opt stack 0
  2007                           
  2008                           ; 1 bytes @ 0x1E
  2009  00009E                     	ds	1
  2010  00009F                     __doprnt@width:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0x1F
  2014  00009F                     	ds	2
  2015  0000A1                     __doprnt@c:
  2016                           	opt stack 0
  2017                           
  2018                           ; 1 bytes @ 0x21
  2019  0000A1                     	ds	1
  2020  0000A2                     ?_printf:
  2021                           	opt stack 0
  2022  0000A2                     ?_sprintf:
  2023                           	opt stack 0
  2024  0000A2                     printf@f:
  2025                           	opt stack 0
  2026  0000A2                     sprintf@wh:
  2027                           	opt stack 0
  2028                           
  2029                           ; 2 bytes @ 0x22
  2030  0000A2                     	ds	2
  2031  0000A4                     printf@ap:
  2032                           	opt stack 0
  2033  0000A4                     sprintf@f:
  2034                           	opt stack 0
  2035                           
  2036                           ; 2 bytes @ 0x24
  2037  0000A4                     	ds	2
  2038  0000A6                     printf@pb:
  2039                           	opt stack 0
  2040                           
  2041                           ; 4 bytes @ 0x26
  2042  0000A6                     	ds	4
  2043  0000AA                     ??_update_lcd:
  2044                           
  2045                           ; 1 bytes @ 0x2A
  2046  0000AA                     	ds	1
  2047  0000AB                     update_lcd@flag:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0x2B
  2051  0000AB                     	ds	3
  2052  0000AE                     sprintf@ap:
  2053                           	opt stack 0
  2054                           
  2055                           ; 2 bytes @ 0x2E
  2056  0000AE                     	ds	2
  2057  0000B0                     sprintf@pb:
  2058                           	opt stack 0
  2059                           
  2060                           ; 4 bytes @ 0x30
  2061  0000B0                     	ds	4
  2062  0000B4                     ??_update_state:
  2063  0000B4                     ??_display_menu:
  2064                           
  2065                           ; 1 bytes @ 0x34
  2066  0000B4                     	ds	2
  2067  0000B6                     update_state@i:
  2068                           	opt stack 0
  2069                           
  2070                           ; 1 bytes @ 0x36
  2071  0000B6                     	ds	3
  2072  0000B9                     ??_main:
  2073                           
  2074                           ; 1 bytes @ 0x39
  2075  0000B9                     	ds	1
  2076                           tblptru	equ	0xFF8
  2077                           tblptrh	equ	0xFF7
  2078                           tblptrl	equ	0xFF6
  2079                           tablat	equ	0xFF5
  2080                           postinc0	equ	0xFEE
  2081                           wreg	equ	0xFE8
  2082                           postdec1	equ	0xFE5
  2083                           fsr1h	equ	0xFE2
  2084                           fsr1l	equ	0xFE1
  2085                           
  2086                           	psect	cstackCOMRAM
  2087  000001                     __pcstackCOMRAM:
  2088                           	opt stack 0
  2089  000001                     ??i2_isdigit:
  2090  000001                     ?i2___wmul:
  2091                           	opt stack 0
  2092  000001                     ?i2___awmod:
  2093                           	opt stack 0
  2094  000001                     ?i2___lwdiv:
  2095                           	opt stack 0
  2096  000001                     i2lcdNibble@temp:
  2097                           	opt stack 0
  2098  000001                     i2___wmul@multiplier:
  2099                           	opt stack 0
  2100  000001                     i2___awmod@dividend:
  2101                           	opt stack 0
  2102  000001                     i2___lwdiv@dividend:
  2103                           	opt stack 0
  2104                           
  2105                           ; 2 bytes @ 0x0
  2106  000001                     	ds	1
  2107  000002                     i2lcdNibble@data:
  2108                           	opt stack 0
  2109  000002                     i2_isdigit$774:
  2110                           	opt stack 0
  2111                           
  2112                           ; 1 bytes @ 0x1
  2113  000002                     	ds	1
  2114  000003                     i2lcdInst@data:
  2115                           	opt stack 0
  2116  000003                     i2putch@data:
  2117                           	opt stack 0
  2118  000003                     i2isdigit@c:
  2119                           	opt stack 0
  2120  000003                     i2___wmul@multiplicand:
  2121                           	opt stack 0
  2122  000003                     i2___awmod@divisor:
  2123                           	opt stack 0
  2124  000003                     i2___lwdiv@divisor:
  2125                           	opt stack 0
  2126                           
  2127                           ; 2 bytes @ 0x2
  2128  000003                     	ds	2
  2129  000005                     i2___awmod@counter:
  2130                           	opt stack 0
  2131  000005                     i2___wmul@product:
  2132                           	opt stack 0
  2133  000005                     i2___lwdiv@quotient:
  2134                           	opt stack 0
  2135                           
  2136                           ; 2 bytes @ 0x4
  2137  000005                     	ds	1
  2138  000006                     i2___awmod@sign:
  2139                           	opt stack 0
  2140                           
  2141                           ; 1 bytes @ 0x5
  2142  000006                     	ds	1
  2143  000007                     i2___lwdiv@counter:
  2144                           	opt stack 0
  2145                           
  2146                           ; 1 bytes @ 0x6
  2147  000007                     	ds	1
  2148  000008                     ?i2___lwmod:
  2149                           	opt stack 0
  2150  000008                     i2___lwmod@dividend:
  2151                           	opt stack 0
  2152                           
  2153                           ; 2 bytes @ 0x7
  2154  000008                     	ds	2
  2155  00000A                     i2___lwmod@divisor:
  2156                           	opt stack 0
  2157                           
  2158                           ; 2 bytes @ 0x9
  2159  00000A                     	ds	2
  2160  00000C                     i2___lwmod@counter:
  2161                           	opt stack 0
  2162                           
  2163                           ; 1 bytes @ 0xB
  2164  00000C                     	ds	1
  2165  00000D                     ?i2__doprnt:
  2166                           	opt stack 0
  2167  00000D                     i2__doprnt@pb:
  2168                           	opt stack 0
  2169                           
  2170                           ; 2 bytes @ 0xC
  2171  00000D                     	ds	2
  2172  00000F                     i2__doprnt@f:
  2173                           	opt stack 0
  2174                           
  2175                           ; 2 bytes @ 0xE
  2176  00000F                     	ds	2
  2177  000011                     i2__doprnt@ap:
  2178                           	opt stack 0
  2179                           
  2180                           ; 2 bytes @ 0x10
  2181  000011                     	ds	2
  2182  000013                     ??i2__doprnt:
  2183                           
  2184                           ; 1 bytes @ 0x12
  2185  000013                     	ds	4
  2186  000017                     i2__doprnt@idx:
  2187                           	opt stack 0
  2188                           
  2189                           ; 1 bytes @ 0x16
  2190  000017                     	ds	1
  2191  000018                     i2__doprnt@prec:
  2192                           	opt stack 0
  2193                           
  2194                           ; 1 bytes @ 0x17
  2195  000018                     	ds	1
  2196  000019                     i2__doprnt@len:
  2197                           	opt stack 0
  2198                           
  2199                           ; 2 bytes @ 0x18
  2200  000019                     	ds	2
  2201  00001B                     i2__doprnt@cp:
  2202                           	opt stack 0
  2203                           
  2204                           ; 2 bytes @ 0x1A
  2205  00001B                     	ds	2
  2206  00001D                     i2__doprnt@val:
  2207                           	opt stack 0
  2208                           
  2209                           ; 2 bytes @ 0x1C
  2210  00001D                     	ds	2
  2211  00001F                     i2__doprnt@flag:
  2212                           	opt stack 0
  2213                           
  2214                           ; 1 bytes @ 0x1E
  2215  00001F                     	ds	1
  2216  000020                     i2__doprnt@width:
  2217                           	opt stack 0
  2218                           
  2219                           ; 2 bytes @ 0x1F
  2220  000020                     	ds	2
  2221  000022                     i2__doprnt@c:
  2222                           	opt stack 0
  2223                           
  2224                           ; 1 bytes @ 0x21
  2225  000022                     	ds	1
  2226  000023                     ?i2_printf:
  2227                           	opt stack 0
  2228  000023                     i2printf@f:
  2229                           	opt stack 0
  2230                           
  2231                           ; 2 bytes @ 0x22
  2232  000023                     	ds	2
  2233  000025                     i2printf@ap:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0x24
  2237  000025                     	ds	2
  2238  000027                     i2printf@pb:
  2239                           	opt stack 0
  2240                           
  2241                           ; 4 bytes @ 0x26
  2242  000027                     	ds	4
  2243  00002B                     ??_keypressed:
  2244                           
  2245                           ; 1 bytes @ 0x2A
  2246  00002B                     	ds	16
  2247  00003B                     keypressed@i:
  2248                           	opt stack 0
  2249                           
  2250                           ; 2 bytes @ 0x3A
  2251  00003B                     	ds	2
  2252  00003D                     keypressed@keypress:
  2253                           	opt stack 0
  2254                           
  2255                           ; 1 bytes @ 0x3C
  2256  00003D                     	ds	1
  2257                           tblptru	equ	0xFF8
  2258                           tblptrh	equ	0xFF7
  2259                           tblptrl	equ	0xFF6
  2260                           tablat	equ	0xFF5
  2261                           postinc0	equ	0xFEE
  2262                           wreg	equ	0xFE8
  2263                           postdec1	equ	0xFE5
  2264                           fsr1h	equ	0xFE2
  2265                           fsr1l	equ	0xFE1
  2266                           
  2267 ;;
  2268 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2269 ;;
  2270 ;; *************** function _main *****************
  2271 ;; Defined at:
  2272 ;;		line 105 in file "main.c"
  2273 ;; Parameters:    Size  Location     Type
  2274 ;;		None
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;		None
  2277 ;; Return value:  Size  Location     Type
  2278 ;;                  1    wreg      void 
  2279 ;; Registers used:
  2280 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2281 ;; Tracked objects:
  2282 ;;		On entry : 0/0
  2283 ;;		On exit  : 0/0
  2284 ;;		Unchanged: 0/0
  2285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2287 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2288 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2289 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2290 ;;Total ram usage:        1 bytes
  2291 ;; Hardware stack levels required when called:   11
  2292 ;; This function calls:
  2293 ;;		_I2C_Master_Init
  2294 ;;		_initLCD
  2295 ;;		_read_sensors
  2296 ;;		_set_time
  2297 ;;		_sort
  2298 ;;		_update_RTC
  2299 ;;		_update_display
  2300 ;;		_update_lcd
  2301 ;;		_update_state
  2302 ;; This function is called by:
  2303 ;;		Startup code after reset
  2304 ;; This function uses a non-reentrant model
  2305 ;;
  2306                           
  2307                           	psect	text0
  2308  0034C4                     __ptext0:
  2309                           	opt stack 0
  2310  0034C4                     _main:
  2311                           	opt stack 20
  2312                           
  2313                           ;main.c: 107: discretize=3000/(40);
  2314                           
  2315                           ;incstack = 0
  2316  0034C4  0E00               	movlw	0
  2317  0034C6  0100               	movlb	0	; () banked
  2318  0034C8  6FF7               	movwf	(_discretize+1)& (0+255),b
  2319  0034CA  0E4B               	movlw	75
  2320  0034CC  6FF6               	movwf	_discretize& (0+255),b
  2321                           
  2322                           ;main.c: 108: release=(4000)/(40);
  2323  0034CE  0E00               	movlw	0
  2324  0034D0  0100               	movlb	0	; () banked
  2325  0034D2  6FF9               	movwf	(_release+1)& (0+255),b
  2326  0034D4  0E64               	movlw	100
  2327  0034D6  6FF8               	movwf	_release& (0+255),b
  2328                           
  2329                           ;main.c: 109: measure=5+500/(40);
  2330  0034D8  0E00               	movlw	0
  2331  0034DA  6E7A               	movwf	_measure+1,c
  2332  0034DC  0E11               	movlw	17
  2333  0034DE  6E79               	movwf	_measure,c
  2334                           
  2335                           ;main.c: 114: TRISA = 0xE7;
  2336  0034E0  0EE7               	movlw	231
  2337  0034E2  6E92               	movwf	3986,c	;volatile
  2338                           
  2339                           ;main.c: 115: TRISC = 0x00;
  2340  0034E4  0E00               	movlw	0
  2341  0034E6  6E94               	movwf	3988,c	;volatile
  2342                           
  2343                           ;main.c: 116: TRISD = 0x00;
  2344  0034E8  0E00               	movlw	0
  2345  0034EA  6E95               	movwf	3989,c	;volatile
  2346                           
  2347                           ; BSR set to: 0
  2348                           ;main.c: 117: TRISB = 0xFF;
  2349  0034EC  6893               	setf	3987,c	;volatile
  2350                           
  2351                           ; BSR set to: 0
  2352                           ;main.c: 118: TRISE = 0xFF;
  2353  0034EE  6896               	setf	3990,c	;volatile
  2354                           
  2355                           ;main.c: 119: LATB = 0x00;
  2356  0034F0  0E00               	movlw	0
  2357  0034F2  6E8A               	movwf	3978,c	;volatile
  2358                           
  2359                           ;main.c: 121: LATE= 0x00;
  2360  0034F4  0E00               	movlw	0
  2361  0034F6  6E8D               	movwf	3981,c	;volatile
  2362                           
  2363                           ;main.c: 123: ADCON0 = 0x00;
  2364  0034F8  0E00               	movlw	0
  2365  0034FA  6EC2               	movwf	4034,c	;volatile
  2366                           
  2367                           ;main.c: 124: ADCON1 = 0x0B;
  2368  0034FC  0E0B               	movlw	11
  2369  0034FE  6EC1               	movwf	4033,c	;volatile
  2370                           
  2371                           ;main.c: 125: CVRCON = 0x00;
  2372  003500  0E00               	movlw	0
  2373  003502  6EB5               	movwf	4021,c	;volatile
  2374                           
  2375                           ; BSR set to: 0
  2376                           ;main.c: 126: CMCONbits.CIS = 0;
  2377  003504  96B4               	bcf	4020,3,c	;volatile
  2378                           
  2379                           ; BSR set to: 0
  2380                           ;main.c: 127: ADFM = 1;
  2381  003506  8EC0               	bsf	4032,7,c	;volatile
  2382                           
  2383                           ; BSR set to: 0
  2384                           ;main.c: 129: initLCD();
  2385  003508  EC5A  F01D         	call	_initLCD	;wreg free
  2386                           
  2387                           ;main.c: 130: INT1IE = 1;
  2388  00350C  86F0               	bsf	intcon3,3,c	;volatile
  2389                           
  2390                           ;main.c: 131: nRBPU = 0;
  2391  00350E  9EF1               	bcf	intcon2,7,c	;volatile
  2392                           
  2393                           ;main.c: 132: I2C_Master_Init(10000);
  2394  003510  0E10               	movlw	16
  2395  003512  0100               	movlb	0	; () banked
  2396  003514  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2397  003516  0E27               	movlw	39
  2398  003518  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2399  00351A  0E00               	movlw	0
  2400  00351C  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2401  00351E  0E00               	movlw	0
  2402  003520  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2403  003522  EC5D  F01C         	call	_I2C_Master_Init	;wreg free
  2404                           
  2405                           ;main.c: 134: (INTCONbits.GIE = 0);
  2406  003526  9EF2               	bcf	intcon,7,c	;volatile
  2407                           
  2408                           ;main.c: 135: set_time();
  2409  003528  EC2C  F01C         	call	_set_time	;wreg free
  2410  00352C                     l8418:
  2411                           
  2412                           ;main.c: 137: (INTCONbits.GIE = 0);
  2413  00352C  9EF2               	bcf	intcon,7,c	;volatile
  2414                           
  2415                           ;main.c: 138: update_RTC();
  2416  00352E  EC71  F018         	call	_update_RTC	;wreg free
  2417                           
  2418                           ;main.c: 139: if (state=='s'){
  2419  003532  0E73               	movlw	115
  2420  003534  0100               	movlb	0	; () banked
  2421  003536  19E5               	xorwf	_state& (0+255),w,b
  2422  003538  A4D8               	btfss	status,2,c
  2423  00353A  D004               	goto	l8426
  2424                           
  2425                           ; BSR set to: 0
  2426                           ;main.c: 140: read_sensors();
  2427  00353C  EC2C  F017         	call	_read_sensors	;wreg free
  2428                           
  2429                           ;main.c: 141: sort();
  2430  003540  EC8A  F010         	call	_sort	;wreg free
  2431  003544                     l8426:
  2432                           
  2433                           ;main.c: 142: }
  2434                           ;main.c: 143: update_state();
  2435  003544  EC45  F014         	call	_update_state	;wreg free
  2436                           
  2437                           ;main.c: 144: update_display();
  2438  003548  ECA5  F012         	call	_update_display	;wreg free
  2439                           
  2440                           ;main.c: 145: update_lcd();
  2441  00354C  EC26  F019         	call	_update_lcd	;wreg free
  2442  003550                     l8432:
  2443  003550  0E78               	movlw	120
  2444  003552  0100               	movlb	0	; () banked
  2445  003554  19E5               	xorwf	_state& (0+255),w,b
  2446  003556  B4D8               	btfsc	status,2,c
  2447  003558  D7FB               	goto	l8432
  2448                           
  2449                           ; BSR set to: 0
  2450                           ;main.c: 147: (INTCONbits.GIE = 1);
  2451  00355A  8EF2               	bsf	intcon,7,c	;volatile
  2452                           
  2453                           ; BSR set to: 0
  2454                           ;main.c: 148: _delay((unsigned long)((40-10)*(10000000/4000.0)));
  2455  00355C  0E62               	movlw	98
  2456  00355E  0100               	movlb	0	; () banked
  2457  003560  6FB9               	movwf	??_main& (0+255),b
  2458  003562  0E65               	movlw	101
  2459  003564                     u14257:
  2460  003564  2EE8               	decfsz	wreg,f,c
  2461  003566  D7FE               	bra	u14257
  2462  003568  2FB9               	decfsz	??_main& (0+255),f,b
  2463  00356A  D7FC               	bra	u14257
  2464  00356C  D000               	nop2	
  2465                           
  2466                           ;main.c: 149: (INTCONbits.GIE = 0);
  2467  00356E  9EF2               	bcf	intcon,7,c	;volatile
  2468  003570  D7DD               	goto	l8418
  2469  003572                     __end_of_main:
  2470                           	opt stack 0
  2471                           tblptru	equ	0xFF8
  2472                           tblptrh	equ	0xFF7
  2473                           tblptrl	equ	0xFF6
  2474                           tablat	equ	0xFF5
  2475                           intcon	equ	0xFF2
  2476                           intcon2	equ	0xFF1
  2477                           intcon3	equ	0xFF0
  2478                           postinc0	equ	0xFEE
  2479                           wreg	equ	0xFE8
  2480                           postdec1	equ	0xFE5
  2481                           fsr1h	equ	0xFE2
  2482                           fsr1l	equ	0xFE1
  2483                           status	equ	0xFD8
  2484                           
  2485 ;; *************** function _update_state *****************
  2486 ;; Defined at:
  2487 ;;		line 266 in file "main.c"
  2488 ;; Parameters:    Size  Location     Type
  2489 ;;		None
  2490 ;; Auto vars:     Size  Location     Type
  2491 ;;  i               1   54[BANK0 ] unsigned char 
  2492 ;; Return value:  Size  Location     Type
  2493 ;;                  1    wreg      void 
  2494 ;; Registers used:
  2495 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2496 ;; Tracked objects:
  2497 ;;		On entry : 0/0
  2498 ;;		On exit  : 0/0
  2499 ;;		Unchanged: 0/0
  2500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2501 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2502 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2503 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2504 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2505 ;;Total ram usage:        3 bytes
  2506 ;; Hardware stack levels used:    1
  2507 ;; Hardware stack levels required when called:    9
  2508 ;; This function calls:
  2509 ;;		___awdiv
  2510 ;;		___awmod
  2511 ;;		_sprintf
  2512 ;; This function is called by:
  2513 ;;		_main
  2514 ;; This function uses a non-reentrant model
  2515 ;;
  2516                           
  2517                           	psect	text1
  2518  00288A                     __ptext1:
  2519                           	opt stack 0
  2520  00288A                     _update_state:
  2521                           	opt stack 21
  2522                           
  2523                           ;main.c: 267: if ((nstate=='s'&&state!='s')||(nstate=='m'&&state!='m')){
  2524                           
  2525                           ;incstack = 0
  2526  00288A  0E73               	movlw	115
  2527  00288C  0100               	movlb	0	; () banked
  2528  00288E  19E4               	xorwf	_nstate& (0+255),w,b
  2529  002890  A4D8               	btfss	status,2,c
  2530  002892  D005               	goto	l8256
  2531                           
  2532                           ; BSR set to: 0
  2533  002894  0E73               	movlw	115
  2534  002896  0100               	movlb	0	; () banked
  2535  002898  19E5               	xorwf	_state& (0+255),w,b
  2536  00289A  A4D8               	btfss	status,2,c
  2537  00289C  D00A               	goto	l8260
  2538  00289E                     l8256:
  2539                           
  2540                           ; BSR set to: 0
  2541  00289E  0E6D               	movlw	109
  2542  0028A0  0100               	movlb	0	; () banked
  2543  0028A2  19E4               	xorwf	_nstate& (0+255),w,b
  2544  0028A4  A4D8               	btfss	status,2,c
  2545  0028A6  D04B               	goto	l8278
  2546                           
  2547                           ; BSR set to: 0
  2548  0028A8  0E6D               	movlw	109
  2549  0028AA  0100               	movlb	0	; () banked
  2550  0028AC  19E5               	xorwf	_state& (0+255),w,b
  2551  0028AE  B4D8               	btfsc	status,2,c
  2552  0028B0  D046               	goto	l8278
  2553  0028B2                     l8260:
  2554                           
  2555                           ; BSR set to: 0
  2556                           ;main.c: 268: for (char i=0;i<7;i++){
  2557  0028B2  0E00               	movlw	0
  2558  0028B4  0100               	movlb	0	; () banked
  2559  0028B6  6FB6               	movwf	update_state@i& (0+255),b
  2560  0028B8                     l8262:
  2561                           
  2562                           ; BSR set to: 0
  2563  0028B8  0E06               	movlw	6
  2564  0028BA  0100               	movlb	0	; () banked
  2565  0028BC  65B6               	cpfsgt	update_state@i& (0+255),b
  2566  0028BE  D001               	goto	l8266
  2567  0028C0  D03E               	goto	l8278
  2568  0028C2                     l8266:
  2569                           
  2570                           ; BSR set to: 0
  2571                           ;main.c: 269: startTime[i]=time_i[i];
  2572  0028C2  0100               	movlb	0	; () banked
  2573  0028C4  51B6               	movf	update_state@i& (0+255),w,b
  2574  0028C6  0D02               	mullw	2
  2575  0028C8  0E3E               	movlw	low _time_i
  2576  0028CA  24F3               	addwf	prodl,w,c
  2577  0028CC  6ED9               	movwf	fsr2l,c
  2578  0028CE  0E00               	movlw	high _time_i
  2579  0028D0  20F4               	addwfc	prodh,w,c
  2580  0028D2  6EDA               	movwf	fsr2h,c
  2581  0028D4  0100               	movlb	0	; () banked
  2582  0028D6  51B6               	movf	update_state@i& (0+255),w,b
  2583  0028D8  0D02               	mullw	2
  2584  0028DA  0E0E               	movlw	low _startTime
  2585  0028DC  24F3               	addwf	prodl,w,c
  2586  0028DE  6EE1               	movwf	fsr1l,c
  2587  0028E0  0E01               	movlw	high _startTime
  2588  0028E2  20F4               	addwfc	prodh,w,c
  2589  0028E4  6EE2               	movwf	fsr1h,c
  2590  0028E6  CFDE FFE6          	movff	postinc2,postinc1
  2591  0028EA  CFDD FFE5          	movff	postdec2,postdec1
  2592                           
  2593                           ;main.c: 270: latestSortedBottleTime[i]=time_i[i];
  2594  0028EE  0100               	movlb	0	; () banked
  2595  0028F0  51B6               	movf	update_state@i& (0+255),w,b
  2596  0028F2  0D02               	mullw	2
  2597  0028F4  0E3E               	movlw	low _time_i
  2598  0028F6  24F3               	addwf	prodl,w,c
  2599  0028F8  6ED9               	movwf	fsr2l,c
  2600  0028FA  0E00               	movlw	high _time_i
  2601  0028FC  20F4               	addwfc	prodh,w,c
  2602  0028FE  6EDA               	movwf	fsr2h,c
  2603  002900  0100               	movlb	0	; () banked
  2604  002902  51B6               	movf	update_state@i& (0+255),w,b
  2605  002904  0D02               	mullw	2
  2606  002906  0E00               	movlw	low _latestSortedBottleTime
  2607  002908  24F3               	addwf	prodl,w,c
  2608  00290A  6EE1               	movwf	fsr1l,c
  2609  00290C  0E01               	movlw	high _latestSortedBottleTime
  2610  00290E  20F4               	addwfc	prodh,w,c
  2611  002910  6EE2               	movwf	fsr1h,c
  2612  002912  CFDE FFE6          	movff	postinc2,postinc1
  2613  002916  CFDD FFE5          	movff	postdec2,postdec1
  2614                           
  2615                           ; BSR set to: 0
  2616                           ;main.c: 271: discretize_counter=3000/40;
  2617  00291A  0E00               	movlw	0
  2618  00291C  0100               	movlb	0	; () banked
  2619  00291E  6FC7               	movwf	(_discretize_counter+1)& (0+255),b
  2620  002920  0E4B               	movlw	75
  2621  002922  6FC6               	movwf	_discretize_counter& (0+255),b
  2622                           
  2623                           ; BSR set to: 0
  2624                           ;main.c: 272: measure_counter=0;
  2625  002924  0E00               	movlw	0
  2626  002926  0100               	movlb	0	; () banked
  2627  002928  6FCD               	movwf	(_measure_counter+1)& (0+255),b
  2628  00292A  0E00               	movlw	0
  2629  00292C  6FCC               	movwf	_measure_counter& (0+255),b
  2630                           
  2631                           ; BSR set to: 0
  2632                           ;main.c: 273: release_counter=0;
  2633  00292E  0E00               	movlw	0
  2634  002930  0100               	movlb	0	; () banked
  2635  002932  6FCF               	movwf	(_release_counter+1)& (0+255),b
  2636  002934  0E00               	movlw	0
  2637  002936  6FCE               	movwf	_release_counter& (0+255),b
  2638                           
  2639                           ; BSR set to: 0
  2640  002938  0100               	movlb	0	; () banked
  2641  00293A  2BB6               	incf	update_state@i& (0+255),f,b
  2642  00293C  D7BD               	goto	l8262
  2643  00293E                     l8278:
  2644                           
  2645                           ; BSR set to: 0
  2646                           ;main.c: 274: }
  2647                           ;main.c: 275: }
  2648                           ;main.c: 276: sorted_bottles=eskaNoCap+eskaWCap+yopNoCap+yopWCap;
  2649  00293E  0100               	movlb	0	; () banked
  2650  002940  51CA               	movf	_eskaWCap& (0+255),w,b
  2651  002942  0100               	movlb	0	; () banked
  2652  002944  25C8               	addwf	_eskaNoCap& (0+255),w,b
  2653  002946  0100               	movlb	0	; () banked
  2654  002948  6FB4               	movwf	??_update_state& (0+255),b
  2655  00294A  0100               	movlb	0	; () banked
  2656  00294C  51CB               	movf	(_eskaWCap+1)& (0+255),w,b
  2657  00294E  0100               	movlb	0	; () banked
  2658  002950  21C9               	addwfc	(_eskaNoCap+1)& (0+255),w,b
  2659  002952  0100               	movlb	0	; () banked
  2660  002954  6FB5               	movwf	(??_update_state+1)& (0+255),b
  2661  002956  0100               	movlb	0	; () banked
  2662  002958  51D6               	movf	_yopNoCap& (0+255),w,b
  2663  00295A  0100               	movlb	0	; () banked
  2664  00295C  27B4               	addwf	??_update_state& (0+255),f,b
  2665  00295E  0100               	movlb	0	; () banked
  2666  002960  51D7               	movf	(_yopNoCap+1)& (0+255),w,b
  2667  002962  0100               	movlb	0	; () banked
  2668  002964  23B5               	addwfc	(??_update_state+1)& (0+255),f,b
  2669  002966  0100               	movlb	0	; () banked
  2670  002968  51D8               	movf	_yopWCap& (0+255),w,b
  2671  00296A  0100               	movlb	0	; () banked
  2672  00296C  25B4               	addwf	??_update_state& (0+255),w,b
  2673  00296E  0100               	movlb	0	; () banked
  2674  002970  6FD2               	movwf	_sorted_bottles& (0+255),b
  2675  002972  0100               	movlb	0	; () banked
  2676  002974  51D9               	movf	(_yopWCap+1)& (0+255),w,b
  2677  002976  0100               	movlb	0	; () banked
  2678  002978  21B5               	addwfc	(??_update_state+1)& (0+255),w,b
  2679  00297A  0100               	movlb	0	; () banked
  2680  00297C  6FD3               	movwf	(_sorted_bottles+1)& (0+255),b
  2681                           
  2682                           ; BSR set to: 0
  2683                           ;main.c: 277: sorted_bottles%=100;
  2684  00297E  C0D2  F080         	movff	_sorted_bottles,___awmod@dividend
  2685  002982  C0D3  F081         	movff	_sorted_bottles+1,___awmod@dividend+1
  2686  002986  0E00               	movlw	0
  2687  002988  0100               	movlb	0	; () banked
  2688  00298A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2689  00298C  0E64               	movlw	100
  2690  00298E  6F82               	movwf	___awmod@divisor& (0+255),b
  2691  002990  ECB9  F01A         	call	___awmod	;wreg free
  2692  002994  C080  F0D2         	movff	?___awmod,_sorted_bottles
  2693  002998  C081  F0D3         	movff	?___awmod+1,_sorted_bottles+1
  2694                           
  2695                           ;main.c: 278: if (state=='s'&&timeDiff>=180){
  2696  00299C  0E73               	movlw	115
  2697  00299E  0100               	movlb	0	; () banked
  2698  0029A0  19E5               	xorwf	_state& (0+255),w,b
  2699  0029A2  A4D8               	btfss	status,2,c
  2700  0029A4  D00E               	goto	l8288
  2701                           
  2702                           ; BSR set to: 0
  2703  0029A6  0100               	movlb	0	; () banked
  2704  0029A8  BFD5               	btfsc	(_timeDiff+1)& (0+255),7,b
  2705  0029AA  D00B               	goto	l8288
  2706  0029AC  0100               	movlb	0	; () banked
  2707  0029AE  51D5               	movf	(_timeDiff+1)& (0+255),w,b
  2708  0029B0  E105               	bnz	u13650
  2709  0029B2  0EB4               	movlw	180
  2710  0029B4  0100               	movlb	0	; () banked
  2711  0029B6  5DD4               	subwf	_timeDiff& (0+255),w,b
  2712  0029B8  A0D8               	btfss	status,0,c
  2713  0029BA  D003               	goto	l8288
  2714  0029BC                     u13650:
  2715                           
  2716                           ; BSR set to: 0
  2717                           ;main.c: 279: nstate='e';
  2718  0029BC  0E65               	movlw	101
  2719  0029BE  0100               	movlb	0	; () banked
  2720  0029C0  6FE4               	movwf	_nstate& (0+255),b
  2721  0029C2                     l8288:
  2722                           
  2723                           ; BSR set to: 0
  2724                           ;main.c: 280: }
  2725                           ;main.c: 281: if (nstate=='e'&&state!='e'){
  2726  0029C2  0E65               	movlw	101
  2727  0029C4  0100               	movlb	0	; () banked
  2728  0029C6  19E4               	xorwf	_nstate& (0+255),w,b
  2729  0029C8  A4D8               	btfss	status,2,c
  2730  0029CA  D073               	goto	l8296
  2731                           
  2732                           ; BSR set to: 0
  2733  0029CC  0E65               	movlw	101
  2734  0029CE  0100               	movlb	0	; () banked
  2735  0029D0  19E5               	xorwf	_state& (0+255),w,b
  2736  0029D2  B4D8               	btfsc	status,2,c
  2737  0029D4  D06E               	goto	l8296
  2738                           
  2739                           ; BSR set to: 0
  2740                           ;main.c: 282: runTime=timeDiff;
  2741  0029D6  C0D4  F0D0         	movff	_timeDiff,_runTime
  2742  0029DA  C0D5  F0D1         	movff	_timeDiff+1,_runTime+1
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;main.c: 283: sprintf(menu[3][0],"bottles: %02d    \0", sorted_bottles);
  2746  0029DE  0E94               	movlw	low (_menu+540)
  2747  0029E0  0100               	movlb	0	; () banked
  2748  0029E2  6FA2               	movwf	sprintf@wh& (0+255),b
  2749  0029E4  0E03               	movlw	high (_menu+540)
  2750  0029E6  0100               	movlb	0	; () banked
  2751  0029E8  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2752  0029EA  0E06               	movlw	low STR_15
  2753  0029EC  0100               	movlb	0	; () banked
  2754  0029EE  6FA4               	movwf	sprintf@f& (0+255),b
  2755  0029F0  0EFF               	movlw	high STR_15
  2756  0029F2  0100               	movlb	0	; () banked
  2757  0029F4  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2758  0029F6  C0D2  F0A6         	movff	_sorted_bottles,?_sprintf+4
  2759  0029FA  C0D3  F0A7         	movff	_sorted_bottles+1,?_sprintf+5
  2760  0029FE  ECE3  F01C         	call	_sprintf	;wreg free
  2761                           
  2762                           ;main.c: 284: sprintf(menu[3][1],"run time: %01d:%02d \0",(runTime/60),timeDiff%60);
  2763  002A02  0EA6               	movlw	low (_menu+558)
  2764  002A04  0100               	movlb	0	; () banked
  2765  002A06  6FA2               	movwf	sprintf@wh& (0+255),b
  2766  002A08  0E03               	movlw	high (_menu+558)
  2767  002A0A  0100               	movlb	0	; () banked
  2768  002A0C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2769  002A0E  0EC8               	movlw	low STR_16
  2770  002A10  0100               	movlb	0	; () banked
  2771  002A12  6FA4               	movwf	sprintf@f& (0+255),b
  2772  002A14  0EFE               	movlw	high STR_16
  2773  002A16  0100               	movlb	0	; () banked
  2774  002A18  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2775  002A1A  C0D0  F080         	movff	_runTime,___awdiv@dividend
  2776  002A1E  C0D1  F081         	movff	_runTime+1,___awdiv@dividend+1
  2777  002A22  0E00               	movlw	0
  2778  002A24  0100               	movlb	0	; () banked
  2779  002A26  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2780  002A28  0E3C               	movlw	60
  2781  002A2A  6F82               	movwf	___awdiv@divisor& (0+255),b
  2782  002A2C  ECA5  F019         	call	___awdiv	;wreg free
  2783  002A30  C080  F0A6         	movff	?___awdiv,?_sprintf+4
  2784  002A34  C081  F0A7         	movff	?___awdiv+1,?_sprintf+5
  2785  002A38  C0D4  F080         	movff	_timeDiff,___awmod@dividend
  2786  002A3C  C0D5  F081         	movff	_timeDiff+1,___awmod@dividend+1
  2787  002A40  0E00               	movlw	0
  2788  002A42  0100               	movlb	0	; () banked
  2789  002A44  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2790  002A46  0E3C               	movlw	60
  2791  002A48  6F82               	movwf	___awmod@divisor& (0+255),b
  2792  002A4A  ECB9  F01A         	call	___awmod	;wreg free
  2793  002A4E  C080  F0A8         	movff	?___awmod,?_sprintf+6
  2794  002A52  C081  F0A9         	movff	?___awmod+1,?_sprintf+7
  2795  002A56  ECE3  F01C         	call	_sprintf	;wreg free
  2796                           
  2797                           ;main.c: 285: sprintf(menu[3][2],"en:%02d ec:%02d    ", eskaNoCap,eskaWCap);
  2798  002A5A  0EB8               	movlw	low (_menu+576)
  2799  002A5C  0100               	movlb	0	; () banked
  2800  002A5E  6FA2               	movwf	sprintf@wh& (0+255),b
  2801  002A60  0E03               	movlw	high (_menu+576)
  2802  002A62  0100               	movlb	0	; () banked
  2803  002A64  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2804  002A66  0EDE               	movlw	low STR_17
  2805  002A68  0100               	movlb	0	; () banked
  2806  002A6A  6FA4               	movwf	sprintf@f& (0+255),b
  2807  002A6C  0EFE               	movlw	high STR_17
  2808  002A6E  0100               	movlb	0	; () banked
  2809  002A70  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2810  002A72  C0C8  F0A6         	movff	_eskaNoCap,?_sprintf+4
  2811  002A76  C0C9  F0A7         	movff	_eskaNoCap+1,?_sprintf+5
  2812  002A7A  C0CA  F0A8         	movff	_eskaWCap,?_sprintf+6
  2813  002A7E  C0CB  F0A9         	movff	_eskaWCap+1,?_sprintf+7
  2814  002A82  ECE3  F01C         	call	_sprintf	;wreg free
  2815                           
  2816                           ;main.c: 286: sprintf(menu[3][3],"yn:%02d yc:%02d    ", yopNoCap, yopWCap);
  2817  002A86  0ECA               	movlw	low (_menu+594)
  2818  002A88  0100               	movlb	0	; () banked
  2819  002A8A  6FA2               	movwf	sprintf@wh& (0+255),b
  2820  002A8C  0E03               	movlw	high (_menu+594)
  2821  002A8E  0100               	movlb	0	; () banked
  2822  002A90  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2823  002A92  0EF2               	movlw	low STR_18
  2824  002A94  0100               	movlb	0	; () banked
  2825  002A96  6FA4               	movwf	sprintf@f& (0+255),b
  2826  002A98  0EFE               	movlw	high STR_18
  2827  002A9A  0100               	movlb	0	; () banked
  2828  002A9C  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2829  002A9E  C0D6  F0A6         	movff	_yopNoCap,?_sprintf+4
  2830  002AA2  C0D7  F0A7         	movff	_yopNoCap+1,?_sprintf+5
  2831  002AA6  C0D8  F0A8         	movff	_yopWCap,?_sprintf+6
  2832  002AAA  C0D9  F0A9         	movff	_yopWCap+1,?_sprintf+7
  2833  002AAE  ECE3  F01C         	call	_sprintf	;wreg free
  2834  002AB2                     l8296:
  2835                           
  2836                           ;main.c: 287: }
  2837                           ;main.c: 288: if ((state=='m'||state=='l'||state=='c')&&timeDiff>=10){
  2838  002AB2  0E6D               	movlw	109
  2839  002AB4  0100               	movlb	0	; () banked
  2840  002AB6  19E5               	xorwf	_state& (0+255),w,b
  2841  002AB8  B4D8               	btfsc	status,2,c
  2842  002ABA  D00A               	goto	l8302
  2843                           
  2844                           ; BSR set to: 0
  2845  002ABC  0E6C               	movlw	108
  2846  002ABE  0100               	movlb	0	; () banked
  2847  002AC0  19E5               	xorwf	_state& (0+255),w,b
  2848  002AC2  B4D8               	btfsc	status,2,c
  2849  002AC4  D005               	goto	l8302
  2850                           
  2851                           ; BSR set to: 0
  2852  002AC6  0E63               	movlw	99
  2853  002AC8  0100               	movlb	0	; () banked
  2854  002ACA  19E5               	xorwf	_state& (0+255),w,b
  2855  002ACC  A4D8               	btfss	status,2,c
  2856  002ACE  D00E               	goto	l8306
  2857  002AD0                     l8302:
  2858                           
  2859                           ; BSR set to: 0
  2860  002AD0  0100               	movlb	0	; () banked
  2861  002AD2  BFD5               	btfsc	(_timeDiff+1)& (0+255),7,b
  2862  002AD4  D00B               	goto	l8306
  2863  002AD6  0100               	movlb	0	; () banked
  2864  002AD8  51D5               	movf	(_timeDiff+1)& (0+255),w,b
  2865  002ADA  E105               	bnz	u13710
  2866  002ADC  0E0A               	movlw	10
  2867  002ADE  0100               	movlb	0	; () banked
  2868  002AE0  5DD4               	subwf	_timeDiff& (0+255),w,b
  2869  002AE2  A0D8               	btfss	status,0,c
  2870  002AE4  D003               	goto	l8306
  2871  002AE6                     u13710:
  2872                           
  2873                           ; BSR set to: 0
  2874                           ;main.c: 289: nstate='r';
  2875  002AE6  0E72               	movlw	114
  2876  002AE8  0100               	movlb	0	; () banked
  2877  002AEA  6FE4               	movwf	_nstate& (0+255),b
  2878  002AEC                     l8306:
  2879                           
  2880                           ; BSR set to: 0
  2881                           ;main.c: 290: }
  2882                           ;main.c: 292: if (nstate!='m'&&nstate!='l'&&nstate!='c')
  2883  002AEC  0E6D               	movlw	109
  2884  002AEE  0100               	movlb	0	; () banked
  2885  002AF0  19E4               	xorwf	_nstate& (0+255),w,b
  2886  002AF2  B4D8               	btfsc	status,2,c
  2887  002AF4  D019               	goto	l8314
  2888                           
  2889                           ; BSR set to: 0
  2890  002AF6  0E6C               	movlw	108
  2891  002AF8  0100               	movlb	0	; () banked
  2892  002AFA  19E4               	xorwf	_nstate& (0+255),w,b
  2893  002AFC  B4D8               	btfsc	status,2,c
  2894  002AFE  D014               	goto	l8314
  2895                           
  2896                           ; BSR set to: 0
  2897  002B00  0E63               	movlw	99
  2898  002B02  0100               	movlb	0	; () banked
  2899  002B04  19E4               	xorwf	_nstate& (0+255),w,b
  2900  002B06  B4D8               	btfsc	status,2,c
  2901  002B08  D00F               	goto	l8314
  2902                           
  2903                           ; BSR set to: 0
  2904                           ;main.c: 293: {
  2905                           ;main.c: 294: menuIndex=1;
  2906  002B0A  0E00               	movlw	0
  2907  002B0C  0100               	movlb	0	; () banked
  2908  002B0E  6FF3               	movwf	(_menuIndex+1)& (0+255),b
  2909  002B10  0E01               	movlw	1
  2910  002B12  6FF2               	movwf	_menuIndex& (0+255),b
  2911                           
  2912                           ;main.c: 295: logIndex=1;
  2913  002B14  0E00               	movlw	0
  2914  002B16  0100               	movlb	0	; () banked
  2915  002B18  6FF1               	movwf	(_logIndex+1)& (0+255),b
  2916  002B1A  0E01               	movlw	1
  2917  002B1C  6FF0               	movwf	_logIndex& (0+255),b
  2918                           
  2919                           ;main.c: 296: creditIndex=1;
  2920  002B1E  0E00               	movlw	0
  2921  002B20  0100               	movlb	0	; () banked
  2922  002B22  6FE7               	movwf	(_creditIndex+1)& (0+255),b
  2923  002B24  0E01               	movlw	1
  2924  002B26  6FE6               	movwf	_creditIndex& (0+255),b
  2925  002B28                     l8314:
  2926                           
  2927                           ; BSR set to: 0
  2928                           ;main.c: 297: }
  2929                           ;main.c: 298: if (nstate!='s')
  2930  002B28  0E73               	movlw	115
  2931  002B2A  0100               	movlb	0	; () banked
  2932  002B2C  19E4               	xorwf	_nstate& (0+255),w,b
  2933  002B2E  B4D8               	btfsc	status,2,c
  2934  002B30  D005               	goto	l8318
  2935                           
  2936                           ; BSR set to: 0
  2937                           ;main.c: 299: sortIndex=1;
  2938  002B32  0E00               	movlw	0
  2939  002B34  0100               	movlb	0	; () banked
  2940  002B36  6FE3               	movwf	(_sortIndex+1)& (0+255),b
  2941  002B38  0E01               	movlw	1
  2942  002B3A  6FE2               	movwf	_sortIndex& (0+255),b
  2943  002B3C                     l8318:
  2944                           
  2945                           ; BSR set to: 0
  2946                           ;main.c: 300: if (nstate!='e')
  2947  002B3C  0E65               	movlw	101
  2948  002B3E  0100               	movlb	0	; () banked
  2949  002B40  19E4               	xorwf	_nstate& (0+255),w,b
  2950  002B42  B4D8               	btfsc	status,2,c
  2951  002B44  D005               	goto	l8322
  2952                           
  2953                           ; BSR set to: 0
  2954                           ;main.c: 301: endIndex=1;
  2955  002B46  0E00               	movlw	0
  2956  002B48  0100               	movlb	0	; () banked
  2957  002B4A  6FEB               	movwf	(_endIndex+1)& (0+255),b
  2958  002B4C  0E01               	movlw	1
  2959  002B4E  6FEA               	movwf	_endIndex& (0+255),b
  2960  002B50                     l8322:
  2961                           
  2962                           ; BSR set to: 0
  2963                           ;main.c: 303: state=nstate;
  2964  002B50  C0E4  F0E5         	movff	_nstate,_state
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;main.c: 311: if (state=='r'){
  2968  002B54  0E72               	movlw	114
  2969  002B56  0100               	movlb	0	; () banked
  2970  002B58  19E5               	xorwf	_state& (0+255),w,b
  2971  002B5A  A4D8               	btfss	status,2,c
  2972  002B5C  0012               	return	
  2973                           
  2974                           ; BSR set to: 0
  2975                           ;main.c: 312: eskaNoCap=0;
  2976  002B5E  0E00               	movlw	0
  2977  002B60  0100               	movlb	0	; () banked
  2978  002B62  6FC9               	movwf	(_eskaNoCap+1)& (0+255),b
  2979  002B64  0E00               	movlw	0
  2980  002B66  6FC8               	movwf	_eskaNoCap& (0+255),b
  2981                           
  2982                           ;main.c: 313: eskaWCap=0;
  2983  002B68  0E00               	movlw	0
  2984  002B6A  0100               	movlb	0	; () banked
  2985  002B6C  6FCB               	movwf	(_eskaWCap+1)& (0+255),b
  2986  002B6E  0E00               	movlw	0
  2987  002B70  6FCA               	movwf	_eskaWCap& (0+255),b
  2988                           
  2989                           ;main.c: 314: yopNoCap=0;
  2990  002B72  0E00               	movlw	0
  2991  002B74  0100               	movlb	0	; () banked
  2992  002B76  6FD7               	movwf	(_yopNoCap+1)& (0+255),b
  2993  002B78  0E00               	movlw	0
  2994  002B7A  6FD6               	movwf	_yopNoCap& (0+255),b
  2995                           
  2996                           ;main.c: 315: yopWCap=0;
  2997  002B7C  0E00               	movlw	0
  2998  002B7E  0100               	movlb	0	; () banked
  2999  002B80  6FD9               	movwf	(_yopWCap+1)& (0+255),b
  3000  002B82  0E00               	movlw	0
  3001  002B84  6FD8               	movwf	_yopWCap& (0+255),b
  3002  002B86  0012               	return	
  3003  002B88                     __end_of_update_state:
  3004                           	opt stack 0
  3005                           tblptru	equ	0xFF8
  3006                           tblptrh	equ	0xFF7
  3007                           tblptrl	equ	0xFF6
  3008                           tablat	equ	0xFF5
  3009                           prodh	equ	0xFF4
  3010                           prodl	equ	0xFF3
  3011                           intcon	equ	0xFF2
  3012                           intcon2	equ	0xFF1
  3013                           intcon3	equ	0xFF0
  3014                           postinc0	equ	0xFEE
  3015                           wreg	equ	0xFE8
  3016                           postinc1	equ	0xFE6
  3017                           postdec1	equ	0xFE5
  3018                           fsr1h	equ	0xFE2
  3019                           fsr1l	equ	0xFE1
  3020                           postinc2	equ	0xFDE
  3021                           postdec2	equ	0xFDD
  3022                           fsr2h	equ	0xFDA
  3023                           fsr2l	equ	0xFD9
  3024                           status	equ	0xFD8
  3025                           
  3026 ;; *************** function _update_lcd *****************
  3027 ;; Defined at:
  3028 ;;		line 161 in file "main.c"
  3029 ;; Parameters:    Size  Location     Type
  3030 ;;		None
  3031 ;; Auto vars:     Size  Location     Type
  3032 ;;  flag            2   43[BANK0 ] int 
  3033 ;;  j               2    0        int 
  3034 ;;  i               2    0        int 
  3035 ;; Return value:  Size  Location     Type
  3036 ;;                  1    wreg      void 
  3037 ;; Registers used:
  3038 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3039 ;; Tracked objects:
  3040 ;;		On entry : 0/0
  3041 ;;		On exit  : 0/0
  3042 ;;		Unchanged: 0/0
  3043 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3044 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3045 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3046 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3047 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;Total ram usage:        3 bytes
  3049 ;; Hardware stack levels used:    1
  3050 ;; Hardware stack levels required when called:    9
  3051 ;; This function calls:
  3052 ;;		_lcdInst
  3053 ;;		_printf
  3054 ;;		_strcmp
  3055 ;;		_strcpy
  3056 ;; This function is called by:
  3057 ;;		_main
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           	psect	text2
  3062  00324C                     __ptext2:
  3063                           	opt stack 0
  3064  00324C                     _update_lcd:
  3065                           	opt stack 21
  3066                           
  3067                           ;main.c: 162: int flag=0;
  3068                           
  3069                           ; BSR set to: 0
  3070                           ;incstack = 0
  3071  00324C  0E00               	movlw	0
  3072  00324E  0100               	movlb	0	; () banked
  3073  003250  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  3074  003252  0E00               	movlw	0
  3075  003254  6FAB               	movwf	update_lcd@flag& (0+255),b
  3076                           
  3077                           ; BSR set to: 0
  3078                           ;main.c: 163: int i,j;
  3079                           ;main.c: 165: if (strcmp(display0, ndisplay0)!=0){
  3080  003256  0E26               	movlw	low _display0
  3081  003258  0100               	movlb	0	; () banked
  3082  00325A  6F80               	movwf	strcmp@s1& (0+255),b
  3083  00325C  0E01               	movlw	high _display0
  3084  00325E  0100               	movlb	0	; () banked
  3085  003260  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  3086  003262  0E4A               	movlw	low _ndisplay0
  3087  003264  0100               	movlb	0	; () banked
  3088  003266  6F82               	movwf	strcmp@s2& (0+255),b
  3089  003268  0E01               	movlw	high _ndisplay0
  3090  00326A  0100               	movlb	0	; () banked
  3091  00326C  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  3092  00326E  EC8D  F01C         	call	_strcmp	;wreg free
  3093  003272  0100               	movlb	0	; () banked
  3094  003274  5180               	movf	?_strcmp& (0+255),w,b
  3095  003276  0100               	movlb	0	; () banked
  3096  003278  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  3097  00327A  B4D8               	btfsc	status,2,c
  3098  00327C  D013               	goto	l8368
  3099                           
  3100                           ; BSR set to: 0
  3101                           ;main.c: 166: strcpy(display0,ndisplay0);
  3102  00327E  0E26               	movlw	low _display0
  3103  003280  0100               	movlb	0	; () banked
  3104  003282  6F80               	movwf	strcpy@to& (0+255),b
  3105  003284  0E01               	movlw	high _display0
  3106  003286  0100               	movlb	0	; () banked
  3107  003288  6F81               	movwf	(strcpy@to+1)& (0+255),b
  3108  00328A  0E4A               	movlw	low _ndisplay0
  3109  00328C  0100               	movlb	0	; () banked
  3110  00328E  6F82               	movwf	strcpy@from& (0+255),b
  3111  003290  0E01               	movlw	high _ndisplay0
  3112  003292  0100               	movlb	0	; () banked
  3113  003294  6F83               	movwf	(strcpy@from+1)& (0+255),b
  3114  003296  ECD6  F01D         	call	_strcpy	;wreg free
  3115                           
  3116                           ;main.c: 167: flag=1;
  3117  00329A  0E00               	movlw	0
  3118  00329C  0100               	movlb	0	; () banked
  3119  00329E  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  3120  0032A0  0E01               	movlw	1
  3121  0032A2  6FAB               	movwf	update_lcd@flag& (0+255),b
  3122  0032A4                     l8368:
  3123                           
  3124                           ; BSR set to: 0
  3125                           ;main.c: 168: }
  3126                           ;main.c: 169: if (strcmp(display1, ndisplay1)!=0){
  3127  0032A4  0E38               	movlw	low _display1
  3128  0032A6  0100               	movlb	0	; () banked
  3129  0032A8  6F80               	movwf	strcmp@s1& (0+255),b
  3130  0032AA  0E01               	movlw	high _display1
  3131  0032AC  0100               	movlb	0	; () banked
  3132  0032AE  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  3133  0032B0  0E5C               	movlw	low _ndisplay1
  3134  0032B2  0100               	movlb	0	; () banked
  3135  0032B4  6F82               	movwf	strcmp@s2& (0+255),b
  3136  0032B6  0E01               	movlw	high _ndisplay1
  3137  0032B8  0100               	movlb	0	; () banked
  3138  0032BA  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  3139  0032BC  EC8D  F01C         	call	_strcmp	;wreg free
  3140  0032C0  0100               	movlb	0	; () banked
  3141  0032C2  5180               	movf	?_strcmp& (0+255),w,b
  3142  0032C4  0100               	movlb	0	; () banked
  3143  0032C6  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  3144  0032C8  B4D8               	btfsc	status,2,c
  3145  0032CA  D013               	goto	l8374
  3146                           
  3147                           ; BSR set to: 0
  3148                           ;main.c: 170: strcpy(display1,ndisplay1);
  3149  0032CC  0E38               	movlw	low _display1
  3150  0032CE  0100               	movlb	0	; () banked
  3151  0032D0  6F80               	movwf	strcpy@to& (0+255),b
  3152  0032D2  0E01               	movlw	high _display1
  3153  0032D4  0100               	movlb	0	; () banked
  3154  0032D6  6F81               	movwf	(strcpy@to+1)& (0+255),b
  3155  0032D8  0E5C               	movlw	low _ndisplay1
  3156  0032DA  0100               	movlb	0	; () banked
  3157  0032DC  6F82               	movwf	strcpy@from& (0+255),b
  3158  0032DE  0E01               	movlw	high _ndisplay1
  3159  0032E0  0100               	movlb	0	; () banked
  3160  0032E2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  3161  0032E4  ECD6  F01D         	call	_strcpy	;wreg free
  3162                           
  3163                           ;main.c: 171: flag=1;
  3164  0032E8  0E00               	movlw	0
  3165  0032EA  0100               	movlb	0	; () banked
  3166  0032EC  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  3167  0032EE  0E01               	movlw	1
  3168  0032F0  6FAB               	movwf	update_lcd@flag& (0+255),b
  3169  0032F2                     l8374:
  3170                           
  3171                           ; BSR set to: 0
  3172                           ;main.c: 172: }
  3173                           ;main.c: 173: if (flag){
  3174  0032F2  0100               	movlb	0	; () banked
  3175  0032F4  51AB               	movf	update_lcd@flag& (0+255),w,b
  3176  0032F6  0100               	movlb	0	; () banked
  3177  0032F8  11AC               	iorwf	(update_lcd@flag+1)& (0+255),w,b
  3178  0032FA  B4D8               	btfsc	status,2,c
  3179  0032FC  0012               	return	
  3180                           
  3181                           ; BSR set to: 0
  3182                           ;main.c: 174: lcdInst(0x01);_delay((unsigned long)((10)*(10000000/4000.0)));;
  3183  0032FE  0E01               	movlw	1
  3184  003300  EC76  F01E         	call	_lcdInst
  3185  003304  0E21               	movlw	33
  3186  003306  0100               	movlb	0	; () banked
  3187  003308  6FAA               	movwf	??_update_lcd& (0+255),b
  3188  00330A  0E76               	movlw	118
  3189  00330C                     u14267:
  3190  00330C  2EE8               	decfsz	wreg,f,c
  3191  00330E  D7FE               	bra	u14267
  3192  003310  2FAA               	decfsz	??_update_lcd& (0+255),f,b
  3193  003312  D7FC               	bra	u14267
  3194  003314  F000               	nop	
  3195                           
  3196                           ;main.c: 175: lcdInst(0b10000000);;
  3197  003316  0E80               	movlw	128
  3198  003318  EC76  F01E         	call	_lcdInst
  3199                           
  3200                           ;main.c: 176: printf(display0);
  3201  00331C  0E26               	movlw	low _display0
  3202  00331E  0100               	movlb	0	; () banked
  3203  003320  6FA2               	movwf	printf@f& (0+255),b
  3204  003322  0E01               	movlw	high _display0
  3205  003324  0100               	movlb	0	; () banked
  3206  003326  6FA3               	movwf	(printf@f+1)& (0+255),b
  3207  003328  EC35  F01D         	call	_printf	;wreg free
  3208                           
  3209                           ;main.c: 177: lcdInst(0b11000000);;
  3210  00332C  0EC0               	movlw	192
  3211  00332E  EC76  F01E         	call	_lcdInst
  3212                           
  3213                           ;main.c: 178: printf(display1);
  3214  003332  0E38               	movlw	low _display1
  3215  003334  0100               	movlb	0	; () banked
  3216  003336  6FA2               	movwf	printf@f& (0+255),b
  3217  003338  0E01               	movlw	high _display1
  3218  00333A  0100               	movlb	0	; () banked
  3219  00333C  6FA3               	movwf	(printf@f+1)& (0+255),b
  3220  00333E  EC35  F01D         	call	_printf	;wreg free
  3221                           
  3222                           ;main.c: 179: lcdInst(0b10010000);;
  3223  003342  0E90               	movlw	144
  3224  003344  EC76  F01E         	call	_lcdInst
  3225  003348  0012               	return	
  3226  00334A                     __end_of_update_lcd:
  3227                           	opt stack 0
  3228                           tblptru	equ	0xFF8
  3229                           tblptrh	equ	0xFF7
  3230                           tblptrl	equ	0xFF6
  3231                           tablat	equ	0xFF5
  3232                           prodh	equ	0xFF4
  3233                           prodl	equ	0xFF3
  3234                           intcon	equ	0xFF2
  3235                           intcon2	equ	0xFF1
  3236                           intcon3	equ	0xFF0
  3237                           postinc0	equ	0xFEE
  3238                           wreg	equ	0xFE8
  3239                           postinc1	equ	0xFE6
  3240                           postdec1	equ	0xFE5
  3241                           fsr1h	equ	0xFE2
  3242                           fsr1l	equ	0xFE1
  3243                           postinc2	equ	0xFDE
  3244                           postdec2	equ	0xFDD
  3245                           fsr2h	equ	0xFDA
  3246                           fsr2l	equ	0xFD9
  3247                           status	equ	0xFD8
  3248                           
  3249 ;; *************** function _strcpy *****************
  3250 ;; Defined at:
  3251 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  3252 ;; Parameters:    Size  Location     Type
  3253 ;;  to              2    0[BANK0 ] PTR unsigned char 
  3254 ;;		 -> display1(18), display0(18), 
  3255 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  3256 ;;		 -> ndisplay1(18), ndisplay0(18), 
  3257 ;; Auto vars:     Size  Location     Type
  3258 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  3259 ;;		 -> display1(18), display0(18), 
  3260 ;; Return value:  Size  Location     Type
  3261 ;;                  2    0[BANK0 ] PTR unsigned char 
  3262 ;; Registers used:
  3263 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3264 ;; Tracked objects:
  3265 ;;		On entry : 0/0
  3266 ;;		On exit  : 0/0
  3267 ;;		Unchanged: 0/0
  3268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3269 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3270 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3272 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3273 ;;Total ram usage:        6 bytes
  3274 ;; Hardware stack levels used:    1
  3275 ;; Hardware stack levels required when called:    5
  3276 ;; This function calls:
  3277 ;;		Nothing
  3278 ;; This function is called by:
  3279 ;;		_update_lcd
  3280 ;; This function uses a non-reentrant model
  3281 ;;
  3282                           
  3283                           	psect	text3
  3284  003BAC                     __ptext3:
  3285                           	opt stack 0
  3286  003BAC                     _strcpy:
  3287                           	opt stack 24
  3288                           
  3289                           ;incstack = 0
  3290  003BAC  C080  F084         	movff	strcpy@to,strcpy@cp
  3291  003BB0  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  3292  003BB4  D006               	goto	l4870
  3293  003BB6                     l4868:
  3294  003BB6  0100               	movlb	0	; () banked
  3295  003BB8  4B84               	infsnz	strcpy@cp& (0+255),f,b
  3296  003BBA  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  3297  003BBC  0100               	movlb	0	; () banked
  3298  003BBE  4B82               	infsnz	strcpy@from& (0+255),f,b
  3299  003BC0  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  3300  003BC2                     l4870:
  3301  003BC2  C082  FFD9         	movff	strcpy@from,fsr2l
  3302  003BC6  C083  FFDA         	movff	strcpy@from+1,fsr2h
  3303  003BCA  C084  FFE1         	movff	strcpy@cp,fsr1l
  3304  003BCE  C085  FFE2         	movff	strcpy@cp+1,fsr1h
  3305  003BD2  CFDF FFE7          	movff	indf2,indf1
  3306  003BD6  50E7               	movf	indf1,w,c
  3307  003BD8  B4D8               	btfsc	status,2,c
  3308  003BDA  0012               	return	
  3309  003BDC  D7EC               	goto	l4868
  3310  003BDE                     __end_of_strcpy:
  3311                           	opt stack 0
  3312                           tblptru	equ	0xFF8
  3313                           tblptrh	equ	0xFF7
  3314                           tblptrl	equ	0xFF6
  3315                           tablat	equ	0xFF5
  3316                           prodh	equ	0xFF4
  3317                           prodl	equ	0xFF3
  3318                           intcon	equ	0xFF2
  3319                           intcon2	equ	0xFF1
  3320                           intcon3	equ	0xFF0
  3321                           postinc0	equ	0xFEE
  3322                           wreg	equ	0xFE8
  3323                           indf1	equ	0xFE7
  3324                           postinc1	equ	0xFE6
  3325                           postdec1	equ	0xFE5
  3326                           fsr1h	equ	0xFE2
  3327                           fsr1l	equ	0xFE1
  3328                           indf2	equ	0xFDF
  3329                           postinc2	equ	0xFDE
  3330                           postdec2	equ	0xFDD
  3331                           fsr2h	equ	0xFDA
  3332                           fsr2l	equ	0xFD9
  3333                           status	equ	0xFD8
  3334                           
  3335 ;; *************** function _strcmp *****************
  3336 ;; Defined at:
  3337 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3340 ;;		 -> display1(18), display0(18), 
  3341 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  3342 ;;		 -> ndisplay1(18), ndisplay0(18), 
  3343 ;; Auto vars:     Size  Location     Type
  3344 ;;  r               1    5[BANK0 ] char 
  3345 ;; Return value:  Size  Location     Type
  3346 ;;                  2    0[BANK0 ] int 
  3347 ;; Registers used:
  3348 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3349 ;; Tracked objects:
  3350 ;;		On entry : 0/0
  3351 ;;		On exit  : 0/0
  3352 ;;		Unchanged: 0/0
  3353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3354 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3355 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3356 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3357 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3358 ;;Total ram usage:        6 bytes
  3359 ;; Hardware stack levels used:    1
  3360 ;; Hardware stack levels required when called:    5
  3361 ;; This function calls:
  3362 ;;		Nothing
  3363 ;; This function is called by:
  3364 ;;		_update_lcd
  3365 ;; This function uses a non-reentrant model
  3366 ;;
  3367                           
  3368                           	psect	text4
  3369  00391A                     __ptext4:
  3370                           	opt stack 0
  3371  00391A                     _strcmp:
  3372                           	opt stack 24
  3373                           
  3374                           ;incstack = 0
  3375  00391A  D006               	goto	l4858
  3376  00391C                     l4856:
  3377  00391C  0100               	movlb	0	; () banked
  3378  00391E  4B80               	infsnz	strcmp@s1& (0+255),f,b
  3379  003920  2B81               	incf	(strcmp@s1+1)& (0+255),f,b
  3380  003922  0100               	movlb	0	; () banked
  3381  003924  4B82               	infsnz	strcmp@s2& (0+255),f,b
  3382  003926  2B83               	incf	(strcmp@s2+1)& (0+255),f,b
  3383  003928                     l4858:
  3384  003928  C080  FFD9         	movff	strcmp@s1,fsr2l
  3385  00392C  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3386  003930  50DF               	movf	indf2,w,c
  3387  003932  0100               	movlb	0	; () banked
  3388  003934  6F84               	movwf	??_strcmp& (0+255),b
  3389  003936  C082  FFD9         	movff	strcmp@s2,fsr2l
  3390  00393A  C083  FFDA         	movff	strcmp@s2+1,fsr2h
  3391  00393E  50DF               	movf	indf2,w,c
  3392  003940  0800               	sublw	0
  3393  003942  0100               	movlb	0	; () banked
  3394  003944  2584               	addwf	??_strcmp& (0+255),w,b
  3395  003946  0100               	movlb	0	; () banked
  3396  003948  6F85               	movwf	strcmp@r& (0+255),b
  3397  00394A  0100               	movlb	0	; () banked
  3398  00394C  5185               	movf	strcmp@r& (0+255),w,b
  3399  00394E  A4D8               	btfss	status,2,c
  3400  003950  D007               	goto	l4862
  3401                           
  3402                           ; BSR set to: 0
  3403  003952  C080  FFD9         	movff	strcmp@s1,fsr2l
  3404  003956  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3405  00395A  50DF               	movf	indf2,w,c
  3406  00395C  A4D8               	btfss	status,2,c
  3407  00395E  D7DE               	goto	l4856
  3408  003960                     l4862:
  3409                           
  3410                           ; BSR set to: 0
  3411  003960  0100               	movlb	0	; () banked
  3412  003962  5185               	movf	strcmp@r& (0+255),w,b
  3413  003964  0100               	movlb	0	; () banked
  3414  003966  6F80               	movwf	?_strcmp& (0+255),b
  3415  003968  6B81               	clrf	(?_strcmp+1)& (0+255),b
  3416  00396A  BF80               	btfsc	?_strcmp& (0+255),7,b
  3417  00396C  0781               	decf	(?_strcmp+1)& (0+255),f,b
  3418  00396E  0012               	return	
  3419  003970                     __end_of_strcmp:
  3420                           	opt stack 0
  3421                           tblptru	equ	0xFF8
  3422                           tblptrh	equ	0xFF7
  3423                           tblptrl	equ	0xFF6
  3424                           tablat	equ	0xFF5
  3425                           prodh	equ	0xFF4
  3426                           prodl	equ	0xFF3
  3427                           intcon	equ	0xFF2
  3428                           intcon2	equ	0xFF1
  3429                           intcon3	equ	0xFF0
  3430                           postinc0	equ	0xFEE
  3431                           wreg	equ	0xFE8
  3432                           indf1	equ	0xFE7
  3433                           postinc1	equ	0xFE6
  3434                           postdec1	equ	0xFE5
  3435                           fsr1h	equ	0xFE2
  3436                           fsr1l	equ	0xFE1
  3437                           indf2	equ	0xFDF
  3438                           postinc2	equ	0xFDE
  3439                           postdec2	equ	0xFDD
  3440                           fsr2h	equ	0xFDA
  3441                           fsr2l	equ	0xFD9
  3442                           status	equ	0xFD8
  3443                           
  3444 ;; *************** function _printf *****************
  3445 ;; Defined at:
  3446 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  3447 ;; Parameters:    Size  Location     Type
  3448 ;;  f               2   34[BANK0 ] PTR const unsigned char 
  3449 ;;		 -> STR_25(14), STR_24(15), STR_23(8), display1(18), 
  3450 ;;		 -> display0(18), 
  3451 ;; Auto vars:     Size  Location     Type
  3452 ;;  pb              4   38[BANK0 ] struct __prbuf
  3453 ;;  ap              2   36[BANK0 ] PTR void [1]
  3454 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
  3455 ;; Return value:  Size  Location     Type
  3456 ;;                  2   34[BANK0 ] int 
  3457 ;; Registers used:
  3458 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3459 ;; Tracked objects:
  3460 ;;		On entry : 0/0
  3461 ;;		On exit  : 0/0
  3462 ;;		Unchanged: 0/0
  3463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3464 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3465 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3467 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3468 ;;Total ram usage:        8 bytes
  3469 ;; Hardware stack levels used:    1
  3470 ;; Hardware stack levels required when called:    8
  3471 ;; This function calls:
  3472 ;;		__doprnt
  3473 ;; This function is called by:
  3474 ;;		_update_lcd
  3475 ;; This function uses a non-reentrant model
  3476 ;;
  3477                           
  3478                           	psect	text5
  3479  003A6A                     __ptext5:
  3480                           	opt stack 0
  3481  003A6A                     _printf:
  3482                           	opt stack 21
  3483                           
  3484                           ; BSR set to: 0
  3485                           ;incstack = 0
  3486  003A6A  0E00               	movlw	0
  3487  003A6C  0100               	movlb	0	; () banked
  3488  003A6E  6FA6               	movwf	printf@pb& (0+255),b
  3489  003A70  0E00               	movlw	0
  3490  003A72  0100               	movlb	0	; () banked
  3491  003A74  6FA7               	movwf	(printf@pb+1)& (0+255),b
  3492  003A76  0EC2               	movlw	low _putch
  3493  003A78  0100               	movlb	0	; () banked
  3494  003A7A  6FA8               	movwf	(printf@pb+2)& (0+255),b
  3495  003A7C  0E3C               	movlw	high _putch
  3496  003A7E  0100               	movlb	0	; () banked
  3497  003A80  6FA9               	movwf	(printf@pb+3)& (0+255),b
  3498  003A82  0EA4               	movlw	low (?_printf+2)
  3499  003A84  0100               	movlb	0	; () banked
  3500  003A86  6FA4               	movwf	printf@ap& (0+255),b
  3501  003A88  0E00               	movlw	high (?_printf+2)
  3502  003A8A  0100               	movlb	0	; () banked
  3503  003A8C  6FA5               	movwf	(printf@ap+1)& (0+255),b
  3504                           
  3505                           ; BSR set to: 0
  3506                           ;	Return value of _printf is never used
  3507  003A8E  0EA6               	movlw	low printf@pb
  3508  003A90  0100               	movlb	0	; () banked
  3509  003A92  6F8C               	movwf	__doprnt@pb& (0+255),b
  3510  003A94  0E00               	movlw	high printf@pb
  3511  003A96  0100               	movlb	0	; () banked
  3512  003A98  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  3513  003A9A  C0A2  F08E         	movff	printf@f,__doprnt@f
  3514  003A9E  C0A3  F08F         	movff	printf@f+1,__doprnt@f+1
  3515  003AA2  0EA4               	movlw	low printf@ap
  3516  003AA4  0100               	movlb	0	; () banked
  3517  003AA6  6F90               	movwf	__doprnt@ap& (0+255),b
  3518  003AA8  0E00               	movlw	high printf@ap
  3519  003AAA  0100               	movlb	0	; () banked
  3520  003AAC  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  3521  003AAE  EC09  F000         	call	__doprnt	;wreg free
  3522  003AB2  0012               	return	
  3523  003AB4                     __end_of_printf:
  3524                           	opt stack 0
  3525                           tblptru	equ	0xFF8
  3526                           tblptrh	equ	0xFF7
  3527                           tblptrl	equ	0xFF6
  3528                           tablat	equ	0xFF5
  3529                           prodh	equ	0xFF4
  3530                           prodl	equ	0xFF3
  3531                           intcon	equ	0xFF2
  3532                           intcon2	equ	0xFF1
  3533                           intcon3	equ	0xFF0
  3534                           postinc0	equ	0xFEE
  3535                           wreg	equ	0xFE8
  3536                           indf1	equ	0xFE7
  3537                           postinc1	equ	0xFE6
  3538                           postdec1	equ	0xFE5
  3539                           fsr1h	equ	0xFE2
  3540                           fsr1l	equ	0xFE1
  3541                           indf2	equ	0xFDF
  3542                           postinc2	equ	0xFDE
  3543                           postdec2	equ	0xFDD
  3544                           fsr2h	equ	0xFDA
  3545                           fsr2l	equ	0xFD9
  3546                           status	equ	0xFD8
  3547                           
  3548 ;; *************** function _update_display *****************
  3549 ;; Defined at:
  3550 ;;		line 201 in file "main.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;		None
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;		None
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  1    wreg      void 
  3557 ;; Registers used:
  3558 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3568 ;;Total ram usage:        0 bytes
  3569 ;; Hardware stack levels used:    1
  3570 ;; Hardware stack levels required when called:   10
  3571 ;; This function calls:
  3572 ;;		___awdiv
  3573 ;;		___awmod
  3574 ;;		__measure
  3575 ;;		_display_menu
  3576 ;;		_sprintf
  3577 ;; This function is called by:
  3578 ;;		_main
  3579 ;; This function uses a non-reentrant model
  3580 ;;
  3581                           
  3582                           	psect	text6
  3583  00254A                     __ptext6:
  3584                           	opt stack 0
  3585  00254A                     _update_display:
  3586                           	opt stack 20
  3587                           
  3588                           ;main.c: 202: switch(state)
  3589                           
  3590                           ;incstack = 0
  3591  00254A  D18A               	goto	l8358
  3592  00254C                     l8330:
  3593                           
  3594                           ;main.c: 205: sprintf(ndisplay0,"%02x/%02x/%02x PUSH TO", time[6],time[5],time[4]);
  3595  00254C  0E4A               	movlw	low _ndisplay0
  3596  00254E  0100               	movlb	0	; () banked
  3597  002550  6FA2               	movwf	sprintf@wh& (0+255),b
  3598  002552  0E01               	movlw	high _ndisplay0
  3599  002554  0100               	movlb	0	; () banked
  3600  002556  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3601  002558  0E9A               	movlw	low STR_1
  3602  00255A  0100               	movlb	0	; () banked
  3603  00255C  6FA4               	movwf	sprintf@f& (0+255),b
  3604  00255E  0EFE               	movlw	high STR_1
  3605  002560  0100               	movlb	0	; () banked
  3606  002562  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3607  002564  C070  F0A6         	movff	_time+6,?_sprintf+4
  3608  002568  0100               	movlb	0	; () banked
  3609  00256A  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3610  00256C  C06F  F0A8         	movff	_time+5,?_sprintf+6
  3611  002570  0100               	movlb	0	; () banked
  3612  002572  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3613  002574  C06E  F0AA         	movff	_time+4,?_sprintf+8
  3614  002578  0100               	movlb	0	; () banked
  3615  00257A  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3616  00257C  ECE3  F01C         	call	_sprintf	;wreg free
  3617                           
  3618                           ;main.c: 206: sprintf(ndisplay1,"%02x:%02x:%02x   START", time[2],time[1],time[0]);
  3619  002580  0E5C               	movlw	low _ndisplay1
  3620  002582  0100               	movlb	0	; () banked
  3621  002584  6FA2               	movwf	sprintf@wh& (0+255),b
  3622  002586  0E01               	movlw	high _ndisplay1
  3623  002588  0100               	movlb	0	; () banked
  3624  00258A  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3625  00258C  0EB1               	movlw	low STR_2
  3626  00258E  0100               	movlb	0	; () banked
  3627  002590  6FA4               	movwf	sprintf@f& (0+255),b
  3628  002592  0EFE               	movlw	high STR_2
  3629  002594  0100               	movlb	0	; () banked
  3630  002596  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3631  002598  C06C  F0A6         	movff	_time+2,?_sprintf+4
  3632  00259C  0100               	movlb	0	; () banked
  3633  00259E  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3634  0025A0  C06B  F0A8         	movff	_time+1,?_sprintf+6
  3635  0025A4  0100               	movlb	0	; () banked
  3636  0025A6  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3637  0025A8  C06A  F0AA         	movff	_time,?_sprintf+8
  3638  0025AC  0100               	movlb	0	; () banked
  3639  0025AE  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3640  0025B0  ECE3  F01C         	call	_sprintf	;wreg free
  3641                           
  3642                           ;main.c: 207: break;
  3643  0025B4  0012               	return	
  3644  0025B6                     l8332:
  3645                           
  3646                           ;main.c: 209: case 'l':
  3647                           ;main.c: 210: case 'c':
  3648                           ;main.c: 211: case 'e':
  3649                           ;main.c: 212: display_menu();
  3650  0025B6  EC1D  F00C         	call	_display_menu	;wreg free
  3651                           
  3652                           ;main.c: 213: break;
  3653  0025BA  0012               	return	
  3654  0025BC                     l8334:
  3655                           
  3656                           ;main.c: 216: if (sortIndex==1){
  3657  0025BC  0100               	movlb	0	; () banked
  3658  0025BE  05E2               	decf	_sortIndex& (0+255),w,b
  3659  0025C0  0100               	movlb	0	; () banked
  3660  0025C2  11E3               	iorwf	(_sortIndex+1)& (0+255),w,b
  3661  0025C4  A4D8               	btfss	status,2,c
  3662  0025C6  D04B               	goto	l8338
  3663                           
  3664                           ; BSR set to: 0
  3665                           ;main.c: 217: sprintf(ndisplay0,"%d:%02d en:%02d ec:%02d ",(timeDiff/60),timeDiff%60, es
      +                          kaNoCap,eskaWCap);
  3666  0025C8  0E4A               	movlw	low _ndisplay0
  3667  0025CA  0100               	movlb	0	; () banked
  3668  0025CC  6FA2               	movwf	sprintf@wh& (0+255),b
  3669  0025CE  0E01               	movlw	high _ndisplay0
  3670  0025D0  0100               	movlb	0	; () banked
  3671  0025D2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3672  0025D4  0E81               	movlw	low STR_3
  3673  0025D6  0100               	movlb	0	; () banked
  3674  0025D8  6FA4               	movwf	sprintf@f& (0+255),b
  3675  0025DA  0EFE               	movlw	high STR_3
  3676  0025DC  0100               	movlb	0	; () banked
  3677  0025DE  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3678  0025E0  C0D4  F080         	movff	_timeDiff,___awdiv@dividend
  3679  0025E4  C0D5  F081         	movff	_timeDiff+1,___awdiv@dividend+1
  3680  0025E8  0E00               	movlw	0
  3681  0025EA  0100               	movlb	0	; () banked
  3682  0025EC  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  3683  0025EE  0E3C               	movlw	60
  3684  0025F0  6F82               	movwf	___awdiv@divisor& (0+255),b
  3685  0025F2  ECA5  F019         	call	___awdiv	;wreg free
  3686  0025F6  C080  F0A6         	movff	?___awdiv,?_sprintf+4
  3687  0025FA  C081  F0A7         	movff	?___awdiv+1,?_sprintf+5
  3688  0025FE  C0D4  F080         	movff	_timeDiff,___awmod@dividend
  3689  002602  C0D5  F081         	movff	_timeDiff+1,___awmod@dividend+1
  3690  002606  0E00               	movlw	0
  3691  002608  0100               	movlb	0	; () banked
  3692  00260A  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3693  00260C  0E3C               	movlw	60
  3694  00260E  6F82               	movwf	___awmod@divisor& (0+255),b
  3695  002610  ECB9  F01A         	call	___awmod	;wreg free
  3696  002614  C080  F0A8         	movff	?___awmod,?_sprintf+6
  3697  002618  C081  F0A9         	movff	?___awmod+1,?_sprintf+7
  3698  00261C  C0C8  F0AA         	movff	_eskaNoCap,?_sprintf+8
  3699  002620  C0C9  F0AB         	movff	_eskaNoCap+1,?_sprintf+9
  3700  002624  C0CA  F0AC         	movff	_eskaWCap,?_sprintf+10
  3701  002628  C0CB  F0AD         	movff	_eskaWCap+1,?_sprintf+11
  3702  00262C  ECE3  F01C         	call	_sprintf	;wreg free
  3703                           
  3704                           ;main.c: 218: sprintf(ndisplay1,"yn:%02d yc:%02d", yopNoCap, yopWCap);
  3705  002630  0E5C               	movlw	low _ndisplay1
  3706  002632  0100               	movlb	0	; () banked
  3707  002634  6FA2               	movwf	sprintf@wh& (0+255),b
  3708  002636  0E01               	movlw	high _ndisplay1
  3709  002638  0100               	movlb	0	; () banked
  3710  00263A  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3711  00263C  0E83               	movlw	low STR_4
  3712  00263E  0100               	movlb	0	; () banked
  3713  002640  6FA4               	movwf	sprintf@f& (0+255),b
  3714  002642  0EFF               	movlw	high STR_4
  3715  002644  0100               	movlb	0	; () banked
  3716  002646  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3717  002648  C0D6  F0A6         	movff	_yopNoCap,?_sprintf+4
  3718  00264C  C0D7  F0A7         	movff	_yopNoCap+1,?_sprintf+5
  3719  002650  C0D8  F0A8         	movff	_yopWCap,?_sprintf+6
  3720  002654  C0D9  F0A9         	movff	_yopWCap+1,?_sprintf+7
  3721  002658  ECE3  F01C         	call	_sprintf	;wreg free
  3722                           
  3723                           ;main.c: 219: }
  3724  00265C  0012               	return	
  3725  00265E                     l8338:
  3726                           
  3727                           ;main.c: 221: else if (sortIndex==2){
  3728  00265E  0E02               	movlw	2
  3729  002660  0100               	movlb	0	; () banked
  3730  002662  19E2               	xorwf	_sortIndex& (0+255),w,b
  3731  002664  0100               	movlb	0	; () banked
  3732  002666  11E3               	iorwf	(_sortIndex+1)& (0+255),w,b
  3733  002668  A4D8               	btfss	status,2,c
  3734  00266A  D02F               	goto	l8342
  3735                           
  3736                           ; BSR set to: 0
  3737                           ;main.c: 222: sprintf(ndisplay0, "RC:%d MC:%d", release_counter, measure_counter);
  3738  00266C  0E4A               	movlw	low _ndisplay0
  3739  00266E  0100               	movlb	0	; () banked
  3740  002670  6FA2               	movwf	sprintf@wh& (0+255),b
  3741  002672  0E01               	movlw	high _ndisplay0
  3742  002674  0100               	movlb	0	; () banked
  3743  002676  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3744  002678  0ECD               	movlw	low STR_5
  3745  00267A  0100               	movlb	0	; () banked
  3746  00267C  6FA4               	movwf	sprintf@f& (0+255),b
  3747  00267E  0EFF               	movlw	high STR_5
  3748  002680  0100               	movlb	0	; () banked
  3749  002682  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3750  002684  C0CE  F0A6         	movff	_release_counter,?_sprintf+4
  3751  002688  C0CF  F0A7         	movff	_release_counter+1,?_sprintf+5
  3752  00268C  C0CC  F0A8         	movff	_measure_counter,?_sprintf+6
  3753  002690  C0CD  F0A9         	movff	_measure_counter+1,?_sprintf+7
  3754  002694  ECE3  F01C         	call	_sprintf	;wreg free
  3755                           
  3756                           ;main.c: 223: sprintf(ndisplay1, "DC:%d MEAS:%d", discretize_counter, _measure());
  3757  002698  0E5C               	movlw	low _ndisplay1
  3758  00269A  0100               	movlb	0	; () banked
  3759  00269C  6FA2               	movwf	sprintf@wh& (0+255),b
  3760  00269E  0E01               	movlw	high _ndisplay1
  3761  0026A0  0100               	movlb	0	; () banked
  3762  0026A2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3763  0026A4  0EB1               	movlw	low STR_6
  3764  0026A6  0100               	movlb	0	; () banked
  3765  0026A8  6FA4               	movwf	sprintf@f& (0+255),b
  3766  0026AA  0EFF               	movlw	high STR_6
  3767  0026AC  0100               	movlb	0	; () banked
  3768  0026AE  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3769  0026B0  C0C6  F0A6         	movff	_discretize_counter,?_sprintf+4
  3770  0026B4  C0C7  F0A7         	movff	_discretize_counter+1,?_sprintf+5
  3771  0026B8  EC6A  F00E         	call	__measure	;wreg free
  3772  0026BC  C086  F0A8         	movff	?__measure,?_sprintf+6
  3773  0026C0  C087  F0A9         	movff	?__measure+1,?_sprintf+7
  3774  0026C4  ECE3  F01C         	call	_sprintf	;wreg free
  3775                           
  3776                           ;main.c: 224: }
  3777  0026C8  0012               	return	
  3778  0026CA                     l8342:
  3779                           
  3780                           ;main.c: 240: else if (sortIndex==3){
  3781  0026CA  0E03               	movlw	3
  3782  0026CC  0100               	movlb	0	; () banked
  3783  0026CE  19E2               	xorwf	_sortIndex& (0+255),w,b
  3784  0026D0  0100               	movlb	0	; () banked
  3785  0026D2  11E3               	iorwf	(_sortIndex+1)& (0+255),w,b
  3786  0026D4  A4D8               	btfss	status,2,c
  3787  0026D6  D037               	goto	l8346
  3788                           
  3789                           ; BSR set to: 0
  3790                           ;main.c: 242: sprintf(ndisplay0, "P1[0-2]:%d,%d,%d", PROX1[0], PROX1[1], PROX1[2]);
  3791  0026D8  0E4A               	movlw	low _ndisplay0
  3792  0026DA  0100               	movlb	0	; () banked
  3793  0026DC  6FA2               	movwf	sprintf@wh& (0+255),b
  3794  0026DE  0E01               	movlw	high _ndisplay0
  3795  0026E0  0100               	movlb	0	; () banked
  3796  0026E2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3797  0026E4  0E62               	movlw	low STR_7
  3798  0026E6  0100               	movlb	0	; () banked
  3799  0026E8  6FA4               	movwf	sprintf@f& (0+255),b
  3800  0026EA  0EFF               	movlw	high STR_7
  3801  0026EC  0100               	movlb	0	; () banked
  3802  0026EE  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3803  0026F0  C0BA  F0A6         	movff	_PROX1,?_sprintf+4
  3804  0026F4  C0BB  F0A7         	movff	_PROX1+1,?_sprintf+5
  3805  0026F8  C0BC  F0A8         	movff	_PROX1+2,?_sprintf+6
  3806  0026FC  C0BD  F0A9         	movff	_PROX1+3,?_sprintf+7
  3807  002700  C0BE  F0AA         	movff	_PROX1+4,?_sprintf+8
  3808  002704  C0BF  F0AB         	movff	_PROX1+5,?_sprintf+9
  3809  002708  ECE3  F01C         	call	_sprintf	;wreg free
  3810                           
  3811                           ;main.c: 243: sprintf(ndisplay1, "P2[0-1]:%d,%d M:%d",PROX2[0],PROX2[1], _measure());
  3812  00270C  0E5C               	movlw	low _ndisplay1
  3813  00270E  0100               	movlb	0	; () banked
  3814  002710  6FA2               	movwf	sprintf@wh& (0+255),b
  3815  002712  0E01               	movlw	high _ndisplay1
  3816  002714  0100               	movlb	0	; () banked
  3817  002716  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3818  002718  0E19               	movlw	low STR_8
  3819  00271A  0100               	movlb	0	; () banked
  3820  00271C  6FA4               	movwf	sprintf@f& (0+255),b
  3821  00271E  0EFF               	movlw	high STR_8
  3822  002720  0100               	movlb	0	; () banked
  3823  002722  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3824  002724  C060  F0A6         	movff	_PROX2,?_sprintf+4
  3825  002728  C061  F0A7         	movff	_PROX2+1,?_sprintf+5
  3826  00272C  C062  F0A8         	movff	_PROX2+2,?_sprintf+6
  3827  002730  C063  F0A9         	movff	_PROX2+3,?_sprintf+7
  3828  002734  EC6A  F00E         	call	__measure	;wreg free
  3829  002738  C086  F0AA         	movff	?__measure,?_sprintf+8
  3830  00273C  C087  F0AB         	movff	?__measure+1,?_sprintf+9
  3831  002740  ECE3  F01C         	call	_sprintf	;wreg free
  3832                           
  3833                           ;main.c: 244: }
  3834  002744  0012               	return	
  3835  002746                     l8346:
  3836                           
  3837                           ;main.c: 245: else if (sortIndex==4){
  3838  002746  0E04               	movlw	4
  3839  002748  0100               	movlb	0	; () banked
  3840  00274A  19E2               	xorwf	_sortIndex& (0+255),w,b
  3841  00274C  0100               	movlb	0	; () banked
  3842  00274E  11E3               	iorwf	(_sortIndex+1)& (0+255),w,b
  3843  002750  A4D8               	btfss	status,2,c
  3844  002752  D02B               	goto	l8350
  3845                           
  3846                           ; BSR set to: 0
  3847                           ;main.c: 247: sprintf(ndisplay0, "IR1[0]:%04d", IR1[0]);
  3848  002754  0E4A               	movlw	low _ndisplay0
  3849  002756  0100               	movlb	0	; () banked
  3850  002758  6FA2               	movwf	sprintf@wh& (0+255),b
  3851  00275A  0E01               	movlw	high _ndisplay0
  3852  00275C  0100               	movlb	0	; () banked
  3853  00275E  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3854  002760  0ED9               	movlw	low STR_9
  3855  002762  0100               	movlb	0	; () banked
  3856  002764  6FA4               	movwf	sprintf@f& (0+255),b
  3857  002766  0EFF               	movlw	high STR_9
  3858  002768  0100               	movlb	0	; () banked
  3859  00276A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3860  00276C  C056  F0A6         	movff	_IR1,?_sprintf+4
  3861  002770  C057  F0A7         	movff	_IR1+1,?_sprintf+5
  3862  002774  ECE3  F01C         	call	_sprintf	;wreg free
  3863                           
  3864                           ;main.c: 248: sprintf(ndisplay1, "IR2[0]:%04dM:%d",IR2[0], _measure());
  3865  002778  0E5C               	movlw	low _ndisplay1
  3866  00277A  0100               	movlb	0	; () banked
  3867  00277C  6FA2               	movwf	sprintf@wh& (0+255),b
  3868  00277E  0E01               	movlw	high _ndisplay1
  3869  002780  0100               	movlb	0	; () banked
  3870  002782  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3871  002784  0E73               	movlw	low STR_10
  3872  002786  0100               	movlb	0	; () banked
  3873  002788  6FA4               	movwf	sprintf@f& (0+255),b
  3874  00278A  0EFF               	movlw	high STR_10
  3875  00278C  0100               	movlb	0	; () banked
  3876  00278E  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3877  002790  C11C  F0A6         	movff	_IR2,?_sprintf+4
  3878  002794  C11D  F0A7         	movff	_IR2+1,?_sprintf+5
  3879  002798  EC6A  F00E         	call	__measure	;wreg free
  3880  00279C  C086  F0A8         	movff	?__measure,?_sprintf+6
  3881  0027A0  C087  F0A9         	movff	?__measure+1,?_sprintf+7
  3882  0027A4  ECE3  F01C         	call	_sprintf	;wreg free
  3883                           
  3884                           ;main.c: 249: }
  3885  0027A8  0012               	return	
  3886  0027AA                     l8350:
  3887                           
  3888                           ;main.c: 250: else if (sortIndex==5){
  3889  0027AA  0E05               	movlw	5
  3890  0027AC  0100               	movlb	0	; () banked
  3891  0027AE  19E2               	xorwf	_sortIndex& (0+255),w,b
  3892  0027B0  0100               	movlb	0	; () banked
  3893  0027B2  11E3               	iorwf	(_sortIndex+1)& (0+255),w,b
  3894  0027B4  A4D8               	btfss	status,2,c
  3895  0027B6  0012               	return	
  3896                           
  3897                           ; BSR set to: 0
  3898                           ;main.c: 252: sprintf(ndisplay0, "PIR:%d%d,%04d,%04d",PROX1[0], PROX2[0], IR1[0], IR2[0]
      +                          );
  3899  0027B8  0E4A               	movlw	low _ndisplay0
  3900  0027BA  0100               	movlb	0	; () banked
  3901  0027BC  6FA2               	movwf	sprintf@wh& (0+255),b
  3902  0027BE  0E01               	movlw	high _ndisplay0
  3903  0027C0  0100               	movlb	0	; () banked
  3904  0027C2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3905  0027C4  0E2C               	movlw	low STR_11
  3906  0027C6  0100               	movlb	0	; () banked
  3907  0027C8  6FA4               	movwf	sprintf@f& (0+255),b
  3908  0027CA  0EFF               	movlw	high STR_11
  3909  0027CC  0100               	movlb	0	; () banked
  3910  0027CE  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3911  0027D0  C0BA  F0A6         	movff	_PROX1,?_sprintf+4
  3912  0027D4  C0BB  F0A7         	movff	_PROX1+1,?_sprintf+5
  3913  0027D8  C060  F0A8         	movff	_PROX2,?_sprintf+6
  3914  0027DC  C061  F0A9         	movff	_PROX2+1,?_sprintf+7
  3915  0027E0  C056  F0AA         	movff	_IR1,?_sprintf+8
  3916  0027E4  C057  F0AB         	movff	_IR1+1,?_sprintf+9
  3917  0027E8  C11C  F0AC         	movff	_IR2,?_sprintf+10
  3918  0027EC  C11D  F0AD         	movff	_IR2+1,?_sprintf+11
  3919  0027F0  ECE3  F01C         	call	_sprintf	;wreg free
  3920                           
  3921                           ;main.c: 253: sprintf(ndisplay1, "DIST[0]:%04d M:%d",DIST1[0], _measure());
  3922  0027F4  0E5C               	movlw	low _ndisplay1
  3923  0027F6  0100               	movlb	0	; () banked
  3924  0027F8  6FA2               	movwf	sprintf@wh& (0+255),b
  3925  0027FA  0E01               	movlw	high _ndisplay1
  3926  0027FC  0100               	movlb	0	; () banked
  3927  0027FE  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3928  002800  0E3F               	movlw	low STR_12
  3929  002802  0100               	movlb	0	; () banked
  3930  002804  6FA4               	movwf	sprintf@f& (0+255),b
  3931  002806  0EFF               	movlw	high STR_12
  3932  002808  0100               	movlb	0	; () banked
  3933  00280A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3934  00280C  C04C  F0A6         	movff	_DIST1,?_sprintf+4
  3935  002810  C04D  F0A7         	movff	_DIST1+1,?_sprintf+5
  3936  002814  EC6A  F00E         	call	__measure	;wreg free
  3937  002818  C086  F0A8         	movff	?__measure,?_sprintf+6
  3938  00281C  C087  F0A9         	movff	?__measure+1,?_sprintf+7
  3939  002820  ECE3  F01C         	call	_sprintf	;wreg free
  3940                           
  3941                           ;main.c: 254: }
  3942                           ;main.c: 258: break;
  3943  002824  0012               	return	
  3944  002826                     l8354:
  3945                           
  3946                           ;main.c: 260: sprintf(ndisplay0, "ERROR");
  3947  002826  0E4A               	movlw	low _ndisplay0
  3948  002828  0100               	movlb	0	; () banked
  3949  00282A  6FA2               	movwf	sprintf@wh& (0+255),b
  3950  00282C  0E01               	movlw	high _ndisplay0
  3951  00282E  0100               	movlb	0	; () banked
  3952  002830  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3953  002832  0EF4               	movlw	low STR_13
  3954  002834  0100               	movlb	0	; () banked
  3955  002836  6FA4               	movwf	sprintf@f& (0+255),b
  3956  002838  0EFF               	movlw	high STR_13
  3957  00283A  0100               	movlb	0	; () banked
  3958  00283C  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3959  00283E  ECE3  F01C         	call	_sprintf	;wreg free
  3960                           
  3961                           ;main.c: 261: sprintf(ndisplay1, "EMERGENCY STOP");
  3962  002842  0E5C               	movlw	low _ndisplay1
  3963  002844  0100               	movlb	0	; () banked
  3964  002846  6FA2               	movwf	sprintf@wh& (0+255),b
  3965  002848  0E01               	movlw	high _ndisplay1
  3966  00284A  0100               	movlb	0	; () banked
  3967  00284C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3968  00284E  0E93               	movlw	low STR_14
  3969  002850  0100               	movlb	0	; () banked
  3970  002852  6FA4               	movwf	sprintf@f& (0+255),b
  3971  002854  0EFF               	movlw	high STR_14
  3972  002856  0100               	movlb	0	; () banked
  3973  002858  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3974  00285A  ECE3  F01C         	call	_sprintf	;wreg free
  3975                           
  3976                           ;main.c: 264: }
  3977                           
  3978                           ;main.c: 262: break;
  3979  00285E  0012               	return	
  3980  002860                     l8358:
  3981  002860  0100               	movlb	0	; () banked
  3982  002862  51E5               	movf	_state& (0+255),w,b
  3983                           
  3984                           ; Switch size 1, requested type "space"
  3985                           ; Number of cases is 6, Range of values is 99 to 115
  3986                           ; switch strategies available:
  3987                           ; Name         Instructions Cycles
  3988                           ; simple_byte           19    10 (average)
  3989                           ;	Chosen strategy is simple_byte
  3990  002864  0A63               	xorlw	99	; case 99
  3991  002866  B4D8               	btfsc	status,2,c
  3992  002868  D6A6               	goto	l8332
  3993  00286A  0A06               	xorlw	6	; case 101
  3994  00286C  B4D8               	btfsc	status,2,c
  3995  00286E  D6A3               	goto	l8332
  3996  002870  0A09               	xorlw	9	; case 108
  3997  002872  B4D8               	btfsc	status,2,c
  3998  002874  D6A0               	goto	l8332
  3999  002876  0A01               	xorlw	1	; case 109
  4000  002878  B4D8               	btfsc	status,2,c
  4001  00287A  D69D               	goto	l8332
  4002  00287C  0A1F               	xorlw	31	; case 114
  4003  00287E  B4D8               	btfsc	status,2,c
  4004  002880  D665               	goto	l8330
  4005  002882  0A01               	xorlw	1	; case 115
  4006  002884  B4D8               	btfsc	status,2,c
  4007  002886  D69A               	goto	l8334
  4008  002888  D7CE               	goto	l8354
  4009  00288A                     __end_of_update_display:
  4010                           	opt stack 0
  4011                           tblptru	equ	0xFF8
  4012                           tblptrh	equ	0xFF7
  4013                           tblptrl	equ	0xFF6
  4014                           tablat	equ	0xFF5
  4015                           prodh	equ	0xFF4
  4016                           prodl	equ	0xFF3
  4017                           intcon	equ	0xFF2
  4018                           intcon2	equ	0xFF1
  4019                           intcon3	equ	0xFF0
  4020                           postinc0	equ	0xFEE
  4021                           wreg	equ	0xFE8
  4022                           indf1	equ	0xFE7
  4023                           postinc1	equ	0xFE6
  4024                           postdec1	equ	0xFE5
  4025                           fsr1h	equ	0xFE2
  4026                           fsr1l	equ	0xFE1
  4027                           indf2	equ	0xFDF
  4028                           postinc2	equ	0xFDE
  4029                           postdec2	equ	0xFDD
  4030                           fsr2h	equ	0xFDA
  4031                           fsr2l	equ	0xFD9
  4032                           status	equ	0xFD8
  4033                           
  4034 ;; *************** function _display_menu *****************
  4035 ;; Defined at:
  4036 ;;		line 318 in file "main.c"
  4037 ;; Parameters:    Size  Location     Type
  4038 ;;		None
  4039 ;; Auto vars:     Size  Location     Type
  4040 ;;  menuIndexPtr    2    8[BANK1 ] PTR int 
  4041 ;;		 -> endIndex(2), creditIndex(2), logIndex(2), menuIndex(2), 
  4042 ;;  menuSelectio    2    4[BANK1 ] int 
  4043 ;;  menuSizePtr     2    2[BANK1 ] PTR int 
  4044 ;;		 -> endSize(2), menuSize(2), creditSize(2), events(2), 
  4045 ;;  selector        2    0[BANK1 ] int 
  4046 ;; Return value:  Size  Location     Type
  4047 ;;                  1    wreg      void 
  4048 ;; Registers used:
  4049 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4050 ;; Tracked objects:
  4051 ;;		On entry : 0/0
  4052 ;;		On exit  : 0/0
  4053 ;;		Unchanged: 0/0
  4054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4055 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4056 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4057 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4058 ;;      Totals:         0       5      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4059 ;;Total ram usage:       15 bytes
  4060 ;; Hardware stack levels used:    1
  4061 ;; Hardware stack levels required when called:    9
  4062 ;; This function calls:
  4063 ;;		___wmul
  4064 ;;		_sprintf
  4065 ;; This function is called by:
  4066 ;;		_update_display
  4067 ;; This function uses a non-reentrant model
  4068 ;;
  4069                           
  4070                           	psect	text7
  4071  00183A                     __ptext7:
  4072                           	opt stack 0
  4073  00183A                     _display_menu:
  4074                           	opt stack 20
  4075                           
  4076                           ;main.c: 319: int menuSelection;
  4077                           ;main.c: 320: int* menuIndexPtr;
  4078                           ;main.c: 321: int* menuSizePtr;
  4079                           ;main.c: 322: int selector=0;
  4080                           
  4081                           ;incstack = 0
  4082  00183A  0E00               	movlw	0
  4083  00183C  0101               	movlb	1	; () banked
  4084  00183E  6F6F               	movwf	(display_menu@selector+1)& (0+255),b
  4085  001840  0E00               	movlw	0
  4086  001842  6F6E               	movwf	display_menu@selector& (0+255),b
  4087                           
  4088                           ;main.c: 323: switch(state)
  4089  001844  D049               	goto	l8014
  4090  001846                     l7990:
  4091                           
  4092                           ;main.c: 326: menuSelection=1;
  4093  001846  0E00               	movlw	0
  4094  001848  0101               	movlb	1	; () banked
  4095  00184A  6F73               	movwf	(display_menu@menuSelection+1)& (0+255),b
  4096  00184C  0E01               	movlw	1
  4097  00184E  6F72               	movwf	display_menu@menuSelection& (0+255),b
  4098                           
  4099                           ; BSR set to: 1
  4100                           ;main.c: 327: menuIndexPtr=&logIndex;
  4101  001850  0EF0               	movlw	low _logIndex
  4102  001852  0101               	movlb	1	; () banked
  4103  001854  6F76               	movwf	display_menu@menuIndexPtr& (0+255),b
  4104  001856  0E00               	movlw	high _logIndex
  4105  001858  0101               	movlb	1	; () banked
  4106  00185A  6F77               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  4107                           
  4108                           ; BSR set to: 1
  4109                           ;main.c: 328: menuSizePtr=&events;
  4110  00185C  0EEE               	movlw	low _events
  4111  00185E  0101               	movlb	1	; () banked
  4112  001860  6F70               	movwf	display_menu@menuSizePtr& (0+255),b
  4113  001862  0E00               	movlw	high _events
  4114  001864  D036               	goto	L2
  4115  001866                     l7996:
  4116                           
  4117                           ;main.c: 331: menuSelection=2;
  4118  001866  0E00               	movlw	0
  4119  001868  0101               	movlb	1	; () banked
  4120  00186A  6F73               	movwf	(display_menu@menuSelection+1)& (0+255),b
  4121  00186C  0E02               	movlw	2
  4122  00186E  6F72               	movwf	display_menu@menuSelection& (0+255),b
  4123                           
  4124                           ; BSR set to: 1
  4125                           ;main.c: 332: menuIndexPtr=&creditIndex;
  4126  001870  0EE6               	movlw	low _creditIndex
  4127  001872  0101               	movlb	1	; () banked
  4128  001874  6F76               	movwf	display_menu@menuIndexPtr& (0+255),b
  4129  001876  0E00               	movlw	high _creditIndex
  4130  001878  0101               	movlb	1	; () banked
  4131  00187A  6F77               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  4132                           
  4133                           ; BSR set to: 1
  4134                           ;main.c: 333: menuSizePtr=&creditSize;
  4135  00187C  0EE8               	movlw	low _creditSize
  4136  00187E  0101               	movlb	1	; () banked
  4137  001880  6F70               	movwf	display_menu@menuSizePtr& (0+255),b
  4138  001882  0E00               	movlw	high _creditSize
  4139  001884  D026               	goto	L2
  4140  001886                     l8002:
  4141                           
  4142                           ;main.c: 337: menuSelection=0;
  4143  001886  0E00               	movlw	0
  4144  001888  0101               	movlb	1	; () banked
  4145  00188A  6F73               	movwf	(display_menu@menuSelection+1)& (0+255),b
  4146  00188C  0E00               	movlw	0
  4147  00188E  6F72               	movwf	display_menu@menuSelection& (0+255),b
  4148                           
  4149                           ; BSR set to: 1
  4150                           ;main.c: 338: menuIndexPtr=&menuIndex;
  4151  001890  0EF2               	movlw	low _menuIndex
  4152  001892  0101               	movlb	1	; () banked
  4153  001894  6F76               	movwf	display_menu@menuIndexPtr& (0+255),b
  4154  001896  0E00               	movlw	high _menuIndex
  4155  001898  0101               	movlb	1	; () banked
  4156  00189A  6F77               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  4157                           
  4158                           ; BSR set to: 1
  4159                           ;main.c: 339: menuSizePtr=&menuSize;
  4160  00189C  0EF4               	movlw	low _menuSize
  4161  00189E  0101               	movlb	1	; () banked
  4162  0018A0  6F70               	movwf	display_menu@menuSizePtr& (0+255),b
  4163  0018A2  0E00               	movlw	high _menuSize
  4164  0018A4  0101               	movlb	1	; () banked
  4165  0018A6  6F71               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  4166                           
  4167                           ;main.c: 340: selector=1;
  4168  0018A8  0E00               	movlw	0
  4169  0018AA  0101               	movlb	1	; () banked
  4170  0018AC  6F6F               	movwf	(display_menu@selector+1)& (0+255),b
  4171  0018AE  0E01               	movlw	1
  4172  0018B0  6F6E               	movwf	display_menu@selector& (0+255),b
  4173                           
  4174                           ;main.c: 341: break;
  4175  0018B2  D01F               	goto	l8016
  4176  0018B4                     l8008:
  4177                           
  4178                           ;main.c: 343: menuSelection=3;
  4179  0018B4  0E00               	movlw	0
  4180  0018B6  0101               	movlb	1	; () banked
  4181  0018B8  6F73               	movwf	(display_menu@menuSelection+1)& (0+255),b
  4182  0018BA  0E03               	movlw	3
  4183  0018BC  6F72               	movwf	display_menu@menuSelection& (0+255),b
  4184                           
  4185                           ; BSR set to: 1
  4186                           ;main.c: 344: menuIndexPtr=&endIndex;
  4187  0018BE  0EEA               	movlw	low _endIndex
  4188  0018C0  0101               	movlb	1	; () banked
  4189  0018C2  6F76               	movwf	display_menu@menuIndexPtr& (0+255),b
  4190  0018C4  0E00               	movlw	high _endIndex
  4191  0018C6  0101               	movlb	1	; () banked
  4192  0018C8  6F77               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  4193                           
  4194                           ; BSR set to: 1
  4195                           ;main.c: 345: menuSizePtr=&endSize;
  4196  0018CA  0EEC               	movlw	low _endSize
  4197  0018CC  0101               	movlb	1	; () banked
  4198  0018CE  6F70               	movwf	display_menu@menuSizePtr& (0+255),b
  4199  0018D0  0E00               	movlw	high _endSize
  4200  0018D2                     L2:
  4201  0018D2  0101               	movlb	1	; () banked
  4202  0018D4  6F71               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  4203                           
  4204                           ;main.c: 346: }
  4205  0018D6  D00D               	goto	l8016
  4206  0018D8                     l8014:
  4207                           
  4208                           ; BSR set to: 1
  4209  0018D8  0100               	movlb	0	; () banked
  4210  0018DA  51E5               	movf	_state& (0+255),w,b
  4211                           
  4212                           ; Switch size 1, requested type "space"
  4213                           ; Number of cases is 4, Range of values is 99 to 109
  4214                           ; switch strategies available:
  4215                           ; Name         Instructions Cycles
  4216                           ; simple_byte           13     7 (average)
  4217                           ;	Chosen strategy is simple_byte
  4218  0018DC  0A63               	xorlw	99	; case 99
  4219  0018DE  B4D8               	btfsc	status,2,c
  4220  0018E0  D7C2               	goto	l7996
  4221  0018E2  0A06               	xorlw	6	; case 101
  4222  0018E4  B4D8               	btfsc	status,2,c
  4223  0018E6  D7E6               	goto	l8008
  4224  0018E8  0A09               	xorlw	9	; case 108
  4225  0018EA  B4D8               	btfsc	status,2,c
  4226  0018EC  D7AC               	goto	l7990
  4227  0018EE  0A01               	xorlw	1	; case 109
  4228  0018F0  D7CA               	goto	l8002
  4229  0018F2                     l8016:
  4230                           
  4231                           ;main.c: 347: if (selector){
  4232  0018F2  0101               	movlb	1	; () banked
  4233  0018F4  516E               	movf	display_menu@selector& (0+255),w,b
  4234  0018F6  0101               	movlb	1	; () banked
  4235  0018F8  116F               	iorwf	(display_menu@selector+1)& (0+255),w,b
  4236  0018FA  B4D8               	btfsc	status,2,c
  4237  0018FC  D14A               	goto	l8032
  4238                           
  4239                           ; BSR set to: 1
  4240                           ;main.c: 348: if (*menuIndexPtr<*menuSizePtr){
  4241  0018FE  C170  FFD9         	movff	display_menu@menuSizePtr,fsr2l
  4242  001902  C171  FFDA         	movff	display_menu@menuSizePtr+1,fsr2h
  4243  001906  C176  FFE1         	movff	display_menu@menuIndexPtr,fsr1l
  4244  00190A  C177  FFE2         	movff	display_menu@menuIndexPtr+1,fsr1h
  4245  00190E  50DE               	movf	postinc2,w,c
  4246  001910  5CE6               	subwf	postinc1,w,c
  4247  001912  50E6               	movf	postinc1,w,c
  4248  001914  0A80               	xorlw	128
  4249  001916  0100               	movlb	0	; () banked
  4250  001918  6FB8               	movwf	(??_display_menu+4)& (0+255),b
  4251  00191A  50DE               	movf	postinc2,w,c
  4252  00191C  0A80               	xorlw	128
  4253  00191E  0100               	movlb	0	; () banked
  4254  001920  59B8               	subwfb	(??_display_menu+4)& (0+255),w,b
  4255  001922  B0D8               	btfsc	status,0,c
  4256  001924  D096               	goto	l8026
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;main.c: 349: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4260  001926  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4261  00192A  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4262  00192E  0E00               	movlw	0
  4263  001930  0100               	movlb	0	; () banked
  4264  001932  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4265  001934  0EB4               	movlw	180
  4266  001936  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4267  001938  ECA0  F01D         	call	___wmul	;wreg free
  4268  00193C  0E78               	movlw	low _menu
  4269  00193E  0100               	movlb	0	; () banked
  4270  001940  6FB4               	movwf	??_display_menu& (0+255),b
  4271  001942  0E01               	movlw	high _menu
  4272  001944  0100               	movlb	0	; () banked
  4273  001946  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4274  001948  0100               	movlb	0	; () banked
  4275  00194A  5180               	movf	?___wmul& (0+255),w,b
  4276  00194C  0100               	movlb	0	; () banked
  4277  00194E  27B4               	addwf	??_display_menu& (0+255),f,b
  4278  001950  0100               	movlb	0	; () banked
  4279  001952  5181               	movf	(?___wmul+1)& (0+255),w,b
  4280  001954  0100               	movlb	0	; () banked
  4281  001956  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4282  001958  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4283  00195C  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4284  001960  CFDE F0B6          	movff	postinc2,??_display_menu+2
  4285  001964  CFDD F0B7          	movff	postdec2,??_display_menu+3
  4286  001968  0EFF               	movlw	255
  4287  00196A  0100               	movlb	0	; () banked
  4288  00196C  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  4289  00196E  0100               	movlb	0	; () banked
  4290  001970  6F80               	movwf	___wmul@multiplier& (0+255),b
  4291  001972  0EFF               	movlw	255
  4292  001974  0100               	movlb	0	; () banked
  4293  001976  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  4294  001978  0100               	movlb	0	; () banked
  4295  00197A  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4296  00197C  0E00               	movlw	0
  4297  00197E  0100               	movlb	0	; () banked
  4298  001980  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4299  001982  0E12               	movlw	18
  4300  001984  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4301  001986  ECA0  F01D         	call	___wmul	;wreg free
  4302  00198A  0100               	movlb	0	; () banked
  4303  00198C  5180               	movf	?___wmul& (0+255),w,b
  4304  00198E  0100               	movlb	0	; () banked
  4305  001990  25B4               	addwf	??_display_menu& (0+255),w,b
  4306  001992  0101               	movlb	1	; () banked
  4307  001994  6F74               	movwf	_display_menu$1161& (0+255),b
  4308  001996  0100               	movlb	0	; () banked
  4309  001998  5181               	movf	(?___wmul+1)& (0+255),w,b
  4310  00199A  0100               	movlb	0	; () banked
  4311  00199C  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4312  00199E  0101               	movlb	1	; () banked
  4313  0019A0  6F75               	movwf	(_display_menu$1161+1)& (0+255),b
  4314                           
  4315                           ; BSR set to: 1
  4316                           ;main.c: 349: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4317  0019A2  0E4A               	movlw	low _ndisplay0
  4318  0019A4  0100               	movlb	0	; () banked
  4319  0019A6  6FA2               	movwf	sprintf@wh& (0+255),b
  4320  0019A8  0E01               	movlw	high _ndisplay0
  4321  0019AA  0100               	movlb	0	; () banked
  4322  0019AC  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4323  0019AE  0EFA               	movlw	low STR_19
  4324  0019B0  0100               	movlb	0	; () banked
  4325  0019B2  6FA4               	movwf	sprintf@f& (0+255),b
  4326  0019B4  0EFF               	movlw	high STR_19
  4327  0019B6  0100               	movlb	0	; () banked
  4328  0019B8  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4329  0019BA  C174  F0A6         	movff	_display_menu$1161,?_sprintf+4
  4330  0019BE  C175  F0A7         	movff	_display_menu$1161+1,?_sprintf+5
  4331  0019C2  0E00               	movlw	0
  4332  0019C4  0100               	movlb	0	; () banked
  4333  0019C6  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4334  0019C8  0E3C               	movlw	60
  4335  0019CA  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4336  0019CC  ECE3  F01C         	call	_sprintf	;wreg free
  4337                           
  4338                           ;main.c: 350: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  4339  0019D0  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4340  0019D4  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4341  0019D8  0E00               	movlw	0
  4342  0019DA  0100               	movlb	0	; () banked
  4343  0019DC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4344  0019DE  0EB4               	movlw	180
  4345  0019E0  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4346  0019E2  ECA0  F01D         	call	___wmul	;wreg free
  4347  0019E6  0E78               	movlw	low _menu
  4348  0019E8  0100               	movlb	0	; () banked
  4349  0019EA  6FB4               	movwf	??_display_menu& (0+255),b
  4350  0019EC  0E01               	movlw	high _menu
  4351  0019EE  0100               	movlb	0	; () banked
  4352  0019F0  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4353  0019F2  0100               	movlb	0	; () banked
  4354  0019F4  5180               	movf	?___wmul& (0+255),w,b
  4355  0019F6  0100               	movlb	0	; () banked
  4356  0019F8  27B4               	addwf	??_display_menu& (0+255),f,b
  4357  0019FA  0100               	movlb	0	; () banked
  4358  0019FC  5181               	movf	(?___wmul+1)& (0+255),w,b
  4359  0019FE  0100               	movlb	0	; () banked
  4360  001A00  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4361  001A02  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4362  001A06  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4363  001A0A  CFDE F080          	movff	postinc2,___wmul@multiplier
  4364  001A0E  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  4365  001A12  0E00               	movlw	0
  4366  001A14  0100               	movlb	0	; () banked
  4367  001A16  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4368  001A18  0E12               	movlw	18
  4369  001A1A  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4370  001A1C  ECA0  F01D         	call	___wmul	;wreg free
  4371  001A20  0100               	movlb	0	; () banked
  4372  001A22  5180               	movf	?___wmul& (0+255),w,b
  4373  001A24  0100               	movlb	0	; () banked
  4374  001A26  25B4               	addwf	??_display_menu& (0+255),w,b
  4375  001A28  0101               	movlb	1	; () banked
  4376  001A2A  6F74               	movwf	_display_menu$1161& (0+255),b
  4377  001A2C  0100               	movlb	0	; () banked
  4378  001A2E  5181               	movf	(?___wmul+1)& (0+255),w,b
  4379  001A30  0100               	movlb	0	; () banked
  4380  001A32  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4381  001A34  0101               	movlb	1	; () banked
  4382  001A36  6F75               	movwf	(_display_menu$1161+1)& (0+255),b
  4383                           
  4384                           ;main.c: 350: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  4385  001A38  0E5C               	movlw	low _ndisplay1
  4386  001A3A  0100               	movlb	0	; () banked
  4387  001A3C  6FA2               	movwf	sprintf@wh& (0+255),b
  4388  001A3E  0E01               	movlw	high _ndisplay1
  4389  001A40  0100               	movlb	0	; () banked
  4390  001A42  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4391  001A44  C174  F0A4         	movff	_display_menu$1161,sprintf@f
  4392  001A48  C175  F0A5         	movff	_display_menu$1161+1,sprintf@f+1
  4393  001A4C  ECE3  F01C         	call	_sprintf	;wreg free
  4394                           
  4395                           ;main.c: 351: }
  4396  001A50  0012               	return	
  4397  001A52                     l8026:
  4398                           
  4399                           ;main.c: 352: else{
  4400                           ;main.c: 353: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  4401  001A52  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4402  001A56  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4403  001A5A  0E00               	movlw	0
  4404  001A5C  0100               	movlb	0	; () banked
  4405  001A5E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4406  001A60  0EB4               	movlw	180
  4407  001A62  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4408  001A64  ECA0  F01D         	call	___wmul	;wreg free
  4409  001A68  0E78               	movlw	low _menu
  4410  001A6A  0100               	movlb	0	; () banked
  4411  001A6C  6FB4               	movwf	??_display_menu& (0+255),b
  4412  001A6E  0E01               	movlw	high _menu
  4413  001A70  0100               	movlb	0	; () banked
  4414  001A72  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4415  001A74  0100               	movlb	0	; () banked
  4416  001A76  5180               	movf	?___wmul& (0+255),w,b
  4417  001A78  0100               	movlb	0	; () banked
  4418  001A7A  27B4               	addwf	??_display_menu& (0+255),f,b
  4419  001A7C  0100               	movlb	0	; () banked
  4420  001A7E  5181               	movf	(?___wmul+1)& (0+255),w,b
  4421  001A80  0100               	movlb	0	; () banked
  4422  001A82  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4423  001A84  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4424  001A88  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4425  001A8C  CFDE F0B6          	movff	postinc2,??_display_menu+2
  4426  001A90  CFDD F0B7          	movff	postdec2,??_display_menu+3
  4427  001A94  0EFE               	movlw	254
  4428  001A96  0100               	movlb	0	; () banked
  4429  001A98  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  4430  001A9A  0100               	movlb	0	; () banked
  4431  001A9C  6F80               	movwf	___wmul@multiplier& (0+255),b
  4432  001A9E  0EFF               	movlw	255
  4433  001AA0  0100               	movlb	0	; () banked
  4434  001AA2  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  4435  001AA4  0100               	movlb	0	; () banked
  4436  001AA6  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4437  001AA8  0E00               	movlw	0
  4438  001AAA  0100               	movlb	0	; () banked
  4439  001AAC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4440  001AAE  0E12               	movlw	18
  4441  001AB0  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4442  001AB2  ECA0  F01D         	call	___wmul	;wreg free
  4443  001AB6  0100               	movlb	0	; () banked
  4444  001AB8  5180               	movf	?___wmul& (0+255),w,b
  4445  001ABA  0100               	movlb	0	; () banked
  4446  001ABC  25B4               	addwf	??_display_menu& (0+255),w,b
  4447  001ABE  0101               	movlb	1	; () banked
  4448  001AC0  6F74               	movwf	_display_menu$1161& (0+255),b
  4449  001AC2  0100               	movlb	0	; () banked
  4450  001AC4  5181               	movf	(?___wmul+1)& (0+255),w,b
  4451  001AC6  0100               	movlb	0	; () banked
  4452  001AC8  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4453  001ACA  0101               	movlb	1	; () banked
  4454  001ACC  6F75               	movwf	(_display_menu$1161+1)& (0+255),b
  4455                           
  4456                           ; BSR set to: 1
  4457                           ;main.c: 352: else{
  4458                           ;main.c: 353: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  4459  001ACE  0E4A               	movlw	low _ndisplay0
  4460  001AD0  0100               	movlb	0	; () banked
  4461  001AD2  6FA2               	movwf	sprintf@wh& (0+255),b
  4462  001AD4  0E01               	movlw	high _ndisplay0
  4463  001AD6  0100               	movlb	0	; () banked
  4464  001AD8  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4465  001ADA  C174  F0A4         	movff	_display_menu$1161,sprintf@f
  4466  001ADE  C175  F0A5         	movff	_display_menu$1161+1,sprintf@f+1
  4467  001AE2  ECE3  F01C         	call	_sprintf	;wreg free
  4468                           
  4469                           ;main.c: 354: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4470  001AE6  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4471  001AEA  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4472  001AEE  0E00               	movlw	0
  4473  001AF0  0100               	movlb	0	; () banked
  4474  001AF2  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4475  001AF4  0EB4               	movlw	180
  4476  001AF6  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4477  001AF8  ECA0  F01D         	call	___wmul	;wreg free
  4478  001AFC  0E78               	movlw	low _menu
  4479  001AFE  0100               	movlb	0	; () banked
  4480  001B00  6FB4               	movwf	??_display_menu& (0+255),b
  4481  001B02  0E01               	movlw	high _menu
  4482  001B04  0100               	movlb	0	; () banked
  4483  001B06  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4484  001B08  0100               	movlb	0	; () banked
  4485  001B0A  5180               	movf	?___wmul& (0+255),w,b
  4486  001B0C  0100               	movlb	0	; () banked
  4487  001B0E  27B4               	addwf	??_display_menu& (0+255),f,b
  4488  001B10  0100               	movlb	0	; () banked
  4489  001B12  5181               	movf	(?___wmul+1)& (0+255),w,b
  4490  001B14  0100               	movlb	0	; () banked
  4491  001B16  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4492  001B18  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4493  001B1C  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4494  001B20  CFDE F0B6          	movff	postinc2,??_display_menu+2
  4495  001B24  CFDD F0B7          	movff	postdec2,??_display_menu+3
  4496  001B28  0EFF               	movlw	255
  4497  001B2A  0100               	movlb	0	; () banked
  4498  001B2C  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  4499  001B2E  0100               	movlb	0	; () banked
  4500  001B30  6F80               	movwf	___wmul@multiplier& (0+255),b
  4501  001B32  0EFF               	movlw	255
  4502  001B34  0100               	movlb	0	; () banked
  4503  001B36  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  4504  001B38  0100               	movlb	0	; () banked
  4505  001B3A  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4506  001B3C  0E00               	movlw	0
  4507  001B3E  0100               	movlb	0	; () banked
  4508  001B40  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4509  001B42  0E12               	movlw	18
  4510  001B44  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4511  001B46  ECA0  F01D         	call	___wmul	;wreg free
  4512  001B4A  0100               	movlb	0	; () banked
  4513  001B4C  5180               	movf	?___wmul& (0+255),w,b
  4514  001B4E  0100               	movlb	0	; () banked
  4515  001B50  25B4               	addwf	??_display_menu& (0+255),w,b
  4516  001B52  0101               	movlb	1	; () banked
  4517  001B54  6F74               	movwf	_display_menu$1161& (0+255),b
  4518  001B56  0100               	movlb	0	; () banked
  4519  001B58  5181               	movf	(?___wmul+1)& (0+255),w,b
  4520  001B5A  0100               	movlb	0	; () banked
  4521  001B5C  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4522  001B5E  0101               	movlb	1	; () banked
  4523  001B60  6F75               	movwf	(_display_menu$1161+1)& (0+255),b
  4524                           
  4525                           ;main.c: 354: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4526  001B62  0E5C               	movlw	low _ndisplay1
  4527  001B64  0100               	movlb	0	; () banked
  4528  001B66  6FA2               	movwf	sprintf@wh& (0+255),b
  4529  001B68  0E01               	movlw	high _ndisplay1
  4530  001B6A  0100               	movlb	0	; () banked
  4531  001B6C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4532  001B6E  0EFA               	movlw	low STR_19
  4533  001B70  0100               	movlb	0	; () banked
  4534  001B72  6FA4               	movwf	sprintf@f& (0+255),b
  4535  001B74  0EFF               	movlw	high STR_19
  4536  001B76  0100               	movlb	0	; () banked
  4537  001B78  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4538  001B7A  C174  F0A6         	movff	_display_menu$1161,?_sprintf+4
  4539  001B7E  C175  F0A7         	movff	_display_menu$1161+1,?_sprintf+5
  4540  001B82  0E00               	movlw	0
  4541  001B84  0100               	movlb	0	; () banked
  4542  001B86  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4543  001B88  0E3C               	movlw	60
  4544  001B8A  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4545  001B8C  ECE3  F01C         	call	_sprintf	;wreg free
  4546                           
  4547                           ;main.c: 355: }
  4548                           ;main.c: 356: }
  4549  001B90  0012               	return	
  4550  001B92                     l8032:
  4551                           
  4552                           ;main.c: 357: else{
  4553                           ;main.c: 358: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  4554  001B92  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4555  001B96  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4556  001B9A  0E00               	movlw	0
  4557  001B9C  0100               	movlb	0	; () banked
  4558  001B9E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4559  001BA0  0EB4               	movlw	180
  4560  001BA2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4561  001BA4  ECA0  F01D         	call	___wmul	;wreg free
  4562  001BA8  0E78               	movlw	low _menu
  4563  001BAA  0100               	movlb	0	; () banked
  4564  001BAC  6FB4               	movwf	??_display_menu& (0+255),b
  4565  001BAE  0E01               	movlw	high _menu
  4566  001BB0  0100               	movlb	0	; () banked
  4567  001BB2  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4568  001BB4  0100               	movlb	0	; () banked
  4569  001BB6  5180               	movf	?___wmul& (0+255),w,b
  4570  001BB8  0100               	movlb	0	; () banked
  4571  001BBA  27B4               	addwf	??_display_menu& (0+255),f,b
  4572  001BBC  0100               	movlb	0	; () banked
  4573  001BBE  5181               	movf	(?___wmul+1)& (0+255),w,b
  4574  001BC0  0100               	movlb	0	; () banked
  4575  001BC2  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4576  001BC4  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4577  001BC8  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4578  001BCC  CFDE F0B6          	movff	postinc2,??_display_menu+2
  4579  001BD0  CFDD F0B7          	movff	postdec2,??_display_menu+3
  4580  001BD4  0EFF               	movlw	255
  4581  001BD6  0100               	movlb	0	; () banked
  4582  001BD8  25B6               	addwf	(??_display_menu+2)& (0+255),w,b
  4583  001BDA  0100               	movlb	0	; () banked
  4584  001BDC  6F80               	movwf	___wmul@multiplier& (0+255),b
  4585  001BDE  0EFF               	movlw	255
  4586  001BE0  0100               	movlb	0	; () banked
  4587  001BE2  21B7               	addwfc	(??_display_menu+3)& (0+255),w,b
  4588  001BE4  0100               	movlb	0	; () banked
  4589  001BE6  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4590  001BE8  0E00               	movlw	0
  4591  001BEA  0100               	movlb	0	; () banked
  4592  001BEC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4593  001BEE  0E12               	movlw	18
  4594  001BF0  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4595  001BF2  ECA0  F01D         	call	___wmul	;wreg free
  4596  001BF6  0100               	movlb	0	; () banked
  4597  001BF8  5180               	movf	?___wmul& (0+255),w,b
  4598  001BFA  0100               	movlb	0	; () banked
  4599  001BFC  25B4               	addwf	??_display_menu& (0+255),w,b
  4600  001BFE  0101               	movlb	1	; () banked
  4601  001C00  6F74               	movwf	_display_menu$1161& (0+255),b
  4602  001C02  0100               	movlb	0	; () banked
  4603  001C04  5181               	movf	(?___wmul+1)& (0+255),w,b
  4604  001C06  0100               	movlb	0	; () banked
  4605  001C08  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4606  001C0A  0101               	movlb	1	; () banked
  4607  001C0C  6F75               	movwf	(_display_menu$1161+1)& (0+255),b
  4608                           
  4609                           ; BSR set to: 1
  4610                           ;main.c: 357: else{
  4611                           ;main.c: 358: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  4612  001C0E  0E4A               	movlw	low _ndisplay0
  4613  001C10  0100               	movlb	0	; () banked
  4614  001C12  6FA2               	movwf	sprintf@wh& (0+255),b
  4615  001C14  0E01               	movlw	high _ndisplay0
  4616  001C16  0100               	movlb	0	; () banked
  4617  001C18  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4618  001C1A  0EFA               	movlw	low STR_19
  4619  001C1C  0100               	movlb	0	; () banked
  4620  001C1E  6FA4               	movwf	sprintf@f& (0+255),b
  4621  001C20  0EFF               	movlw	high STR_19
  4622  001C22  0100               	movlb	0	; () banked
  4623  001C24  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4624  001C26  C174  F0A6         	movff	_display_menu$1161,?_sprintf+4
  4625  001C2A  C175  F0A7         	movff	_display_menu$1161+1,?_sprintf+5
  4626  001C2E  0E00               	movlw	0
  4627  001C30  0100               	movlb	0	; () banked
  4628  001C32  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4629  001C34  0E5E               	movlw	94
  4630  001C36  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4631  001C38  ECE3  F01C         	call	_sprintf	;wreg free
  4632                           
  4633                           ;main.c: 359: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4634  001C3C  C172  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4635  001C40  C173  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4636  001C44  0E00               	movlw	0
  4637  001C46  0100               	movlb	0	; () banked
  4638  001C48  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4639  001C4A  0EB4               	movlw	180
  4640  001C4C  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4641  001C4E  ECA0  F01D         	call	___wmul	;wreg free
  4642  001C52  0E78               	movlw	low _menu
  4643  001C54  0100               	movlb	0	; () banked
  4644  001C56  6FB4               	movwf	??_display_menu& (0+255),b
  4645  001C58  0E01               	movlw	high _menu
  4646  001C5A  0100               	movlb	0	; () banked
  4647  001C5C  6FB5               	movwf	(??_display_menu+1)& (0+255),b
  4648  001C5E  0100               	movlb	0	; () banked
  4649  001C60  5180               	movf	?___wmul& (0+255),w,b
  4650  001C62  0100               	movlb	0	; () banked
  4651  001C64  27B4               	addwf	??_display_menu& (0+255),f,b
  4652  001C66  0100               	movlb	0	; () banked
  4653  001C68  5181               	movf	(?___wmul+1)& (0+255),w,b
  4654  001C6A  0100               	movlb	0	; () banked
  4655  001C6C  23B5               	addwfc	(??_display_menu+1)& (0+255),f,b
  4656  001C6E  C176  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4657  001C72  C177  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4658  001C76  CFDE F080          	movff	postinc2,___wmul@multiplier
  4659  001C7A  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  4660  001C7E  0E00               	movlw	0
  4661  001C80  0100               	movlb	0	; () banked
  4662  001C82  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4663  001C84  0E12               	movlw	18
  4664  001C86  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4665  001C88  ECA0  F01D         	call	___wmul	;wreg free
  4666  001C8C  0100               	movlb	0	; () banked
  4667  001C8E  5180               	movf	?___wmul& (0+255),w,b
  4668  001C90  0100               	movlb	0	; () banked
  4669  001C92  25B4               	addwf	??_display_menu& (0+255),w,b
  4670  001C94  0101               	movlb	1	; () banked
  4671  001C96  6F74               	movwf	_display_menu$1161& (0+255),b
  4672  001C98  0100               	movlb	0	; () banked
  4673  001C9A  5181               	movf	(?___wmul+1)& (0+255),w,b
  4674  001C9C  0100               	movlb	0	; () banked
  4675  001C9E  21B5               	addwfc	(??_display_menu+1)& (0+255),w,b
  4676  001CA0  0101               	movlb	1	; () banked
  4677  001CA2  6F75               	movwf	(_display_menu$1161+1)& (0+255),b
  4678                           
  4679                           ;main.c: 359: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4680  001CA4  0E5C               	movlw	low _ndisplay1
  4681  001CA6  0100               	movlb	0	; () banked
  4682  001CA8  6FA2               	movwf	sprintf@wh& (0+255),b
  4683  001CAA  0E01               	movlw	high _ndisplay1
  4684  001CAC  0100               	movlb	0	; () banked
  4685  001CAE  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4686  001CB0  0EFA               	movlw	low STR_19
  4687  001CB2  0100               	movlb	0	; () banked
  4688  001CB4  6FA4               	movwf	sprintf@f& (0+255),b
  4689  001CB6  0EFF               	movlw	high STR_19
  4690  001CB8  0100               	movlb	0	; () banked
  4691  001CBA  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4692  001CBC  C174  F0A6         	movff	_display_menu$1161,?_sprintf+4
  4693  001CC0  C175  F0A7         	movff	_display_menu$1161+1,?_sprintf+5
  4694  001CC4  0E00               	movlw	0
  4695  001CC6  0100               	movlb	0	; () banked
  4696  001CC8  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4697  001CCA  0E5E               	movlw	94
  4698  001CCC  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4699  001CCE  ECE3  F01C         	call	_sprintf	;wreg free
  4700  001CD2  0012               	return	
  4701  001CD4                     __end_of_display_menu:
  4702                           	opt stack 0
  4703                           tblptru	equ	0xFF8
  4704                           tblptrh	equ	0xFF7
  4705                           tblptrl	equ	0xFF6
  4706                           tablat	equ	0xFF5
  4707                           prodh	equ	0xFF4
  4708                           prodl	equ	0xFF3
  4709                           intcon	equ	0xFF2
  4710                           intcon2	equ	0xFF1
  4711                           intcon3	equ	0xFF0
  4712                           postinc0	equ	0xFEE
  4713                           wreg	equ	0xFE8
  4714                           indf1	equ	0xFE7
  4715                           postinc1	equ	0xFE6
  4716                           postdec1	equ	0xFE5
  4717                           fsr1h	equ	0xFE2
  4718                           fsr1l	equ	0xFE1
  4719                           indf2	equ	0xFDF
  4720                           postinc2	equ	0xFDE
  4721                           postdec2	equ	0xFDD
  4722                           fsr2h	equ	0xFDA
  4723                           fsr2l	equ	0xFD9
  4724                           status	equ	0xFD8
  4725                           
  4726 ;; *************** function _sprintf *****************
  4727 ;; Defined at:
  4728 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;  wh              2   34[BANK0 ] PTR unsigned char 
  4731 ;;		 -> menu(720), ndisplay1(18), ndisplay0(18), 
  4732 ;;  f               2   36[BANK0 ] PTR const unsigned char 
  4733 ;;		 -> STR_22(5), STR_21(5), STR_20(5), STR_19(5), 
  4734 ;;		 -> STR_18(20), STR_17(20), STR_16(22), STR_15(19), 
  4735 ;;		 -> menu(720), STR_14(15), STR_13(6), STR_12(18), 
  4736 ;;		 -> STR_11(19), STR_10(16), STR_9(12), STR_8(19), 
  4737 ;;		 -> STR_7(17), STR_6(14), STR_5(12), STR_4(16), 
  4738 ;;		 -> STR_3(25), STR_2(23), STR_1(23), 
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;  pb              4   48[BANK0 ] struct __prbuf
  4741 ;;  ap              2   46[BANK0 ] PTR void [1]
  4742 ;;		 -> ?_sprintf(2), ?_printf(2), 
  4743 ;; Return value:  Size  Location     Type
  4744 ;;                  2   34[BANK0 ] int 
  4745 ;; Registers used:
  4746 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4747 ;; Tracked objects:
  4748 ;;		On entry : 0/0
  4749 ;;		On exit  : 0/0
  4750 ;;		Unchanged: 0/0
  4751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4752 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4753 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4755 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4756 ;;Total ram usage:       18 bytes
  4757 ;; Hardware stack levels used:    1
  4758 ;; Hardware stack levels required when called:    8
  4759 ;; This function calls:
  4760 ;;		__doprnt
  4761 ;; This function is called by:
  4762 ;;		_update_display
  4763 ;;		_update_state
  4764 ;;		_display_menu
  4765 ;; This function uses a non-reentrant model
  4766 ;;
  4767                           
  4768                           	psect	text8
  4769  0039C6                     __ptext8:
  4770                           	opt stack 0
  4771  0039C6                     _sprintf:
  4772                           	opt stack 21
  4773                           
  4774                           ;incstack = 0
  4775  0039C6  C0A2  F0B0         	movff	sprintf@wh,sprintf@pb
  4776  0039CA  C0A3  F0B1         	movff	sprintf@wh+1,sprintf@pb+1
  4777  0039CE  0E00               	movlw	0
  4778  0039D0  0100               	movlb	0	; () banked
  4779  0039D2  6FB2               	movwf	(sprintf@pb+2)& (0+255),b
  4780  0039D4  0E00               	movlw	0
  4781  0039D6  0100               	movlb	0	; () banked
  4782  0039D8  6FB3               	movwf	(sprintf@pb+3)& (0+255),b
  4783  0039DA  0EA6               	movlw	low (?_sprintf+4)
  4784  0039DC  0100               	movlb	0	; () banked
  4785  0039DE  6FAE               	movwf	sprintf@ap& (0+255),b
  4786  0039E0  0E00               	movlw	high (?_sprintf+4)
  4787  0039E2  0100               	movlb	0	; () banked
  4788  0039E4  6FAF               	movwf	(sprintf@ap+1)& (0+255),b
  4789                           
  4790                           ; BSR set to: 0
  4791  0039E6  0EB0               	movlw	low sprintf@pb
  4792  0039E8  0100               	movlb	0	; () banked
  4793  0039EA  6F8C               	movwf	__doprnt@pb& (0+255),b
  4794  0039EC  0E00               	movlw	high sprintf@pb
  4795  0039EE  0100               	movlb	0	; () banked
  4796  0039F0  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  4797  0039F2  C0A4  F08E         	movff	sprintf@f,__doprnt@f
  4798  0039F6  C0A5  F08F         	movff	sprintf@f+1,__doprnt@f+1
  4799  0039FA  0EAE               	movlw	low sprintf@ap
  4800  0039FC  0100               	movlb	0	; () banked
  4801  0039FE  6F90               	movwf	__doprnt@ap& (0+255),b
  4802  003A00  0E00               	movlw	high sprintf@ap
  4803  003A02  0100               	movlb	0	; () banked
  4804  003A04  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  4805  003A06  EC09  F000         	call	__doprnt	;wreg free
  4806  003A0A  C0B0  FFD9         	movff	sprintf@pb,fsr2l
  4807  003A0E  C0B1  FFDA         	movff	sprintf@pb+1,fsr2h
  4808  003A12  0E00               	movlw	0
  4809  003A14  6EDF               	movwf	indf2,c
  4810  003A16  0012               	return	
  4811  003A18                     __end_of_sprintf:
  4812                           	opt stack 0
  4813                           tblptru	equ	0xFF8
  4814                           tblptrh	equ	0xFF7
  4815                           tblptrl	equ	0xFF6
  4816                           tablat	equ	0xFF5
  4817                           prodh	equ	0xFF4
  4818                           prodl	equ	0xFF3
  4819                           intcon	equ	0xFF2
  4820                           intcon2	equ	0xFF1
  4821                           intcon3	equ	0xFF0
  4822                           postinc0	equ	0xFEE
  4823                           wreg	equ	0xFE8
  4824                           indf1	equ	0xFE7
  4825                           postinc1	equ	0xFE6
  4826                           postdec1	equ	0xFE5
  4827                           fsr1h	equ	0xFE2
  4828                           fsr1l	equ	0xFE1
  4829                           indf2	equ	0xFDF
  4830                           postinc2	equ	0xFDE
  4831                           postdec2	equ	0xFDD
  4832                           fsr2h	equ	0xFDA
  4833                           fsr2l	equ	0xFD9
  4834                           status	equ	0xFD8
  4835                           
  4836 ;; *************** function __doprnt *****************
  4837 ;; Defined at:
  4838 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  4839 ;; Parameters:    Size  Location     Type
  4840 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
  4841 ;;		 -> sprintf@pb(4), printf@pb(4), 
  4842 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  4843 ;;		 -> STR_25(14), STR_24(15), STR_23(8), STR_22(5), 
  4844 ;;		 -> STR_21(5), STR_20(5), STR_19(5), STR_18(20), 
  4845 ;;		 -> STR_17(20), STR_16(22), STR_15(19), menu(720), 
  4846 ;;		 -> STR_14(15), STR_13(6), STR_12(18), STR_11(19), 
  4847 ;;		 -> STR_10(16), STR_9(12), STR_8(19), STR_7(17), 
  4848 ;;		 -> STR_6(14), STR_5(12), STR_4(16), STR_3(25), 
  4849 ;;		 -> STR_2(23), STR_1(23), display1(18), display0(18), 
  4850 ;;  ap              2   16[BANK0 ] PTR PTR void 
  4851 ;;		 -> sprintf@ap(2), printf@ap(2), 
  4852 ;; Auto vars:     Size  Location     Type
  4853 ;;  idx             1   22[BANK0 ] unsigned char 
  4854 ;;  tmpval          4    0        struct .
  4855 ;;  width           2   31[BANK0 ] int 
  4856 ;;  val             2   28[BANK0 ] unsigned int 
  4857 ;;  cp              2   26[BANK0 ] PTR const unsigned char 
  4858 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_26(7), 
  4859 ;;		 -> _doprnt@c(1), ADRESH(1), menu(720), ndisplay1(18), 
  4860 ;;		 -> ndisplay0(18), 
  4861 ;;  len             2   24[BANK0 ] unsigned int 
  4862 ;;  c               1   33[BANK0 ] char 
  4863 ;;  flag            1   30[BANK0 ] unsigned char 
  4864 ;;  prec            1   23[BANK0 ] char 
  4865 ;; Return value:  Size  Location     Type
  4866 ;;                  2   12[BANK0 ] int 
  4867 ;; Registers used:
  4868 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4869 ;; Tracked objects:
  4870 ;;		On entry : 0/0
  4871 ;;		On exit  : 0/0
  4872 ;;		Unchanged: 0/0
  4873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4874 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4875 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4878 ;;Total ram usage:       22 bytes
  4879 ;; Hardware stack levels used:    1
  4880 ;; Hardware stack levels required when called:    7
  4881 ;; This function calls:
  4882 ;;		Absolute function
  4883 ;;		___lwdiv
  4884 ;;		___lwmod
  4885 ;;		___wmul
  4886 ;;		_isdigit
  4887 ;;		_putch
  4888 ;; This function is called by:
  4889 ;;		_printf
  4890 ;;		_sprintf
  4891 ;; This function uses a non-reentrant model
  4892 ;;
  4893                           
  4894                           	psect	text9
  4895  000012                     __ptext9:
  4896                           	opt stack 0
  4897  000012                     __doprnt:
  4898                           	opt stack 21
  4899                           
  4900                           ;doprnt.c: 499: signed char c;
  4901                           ;doprnt.c: 501: int width;
  4902                           ;doprnt.c: 506: signed char prec;
  4903                           ;doprnt.c: 508: unsigned char flag;
  4904                           ;doprnt.c: 523: union {
  4905                           ;doprnt.c: 524: unsigned long vd;
  4906                           ;doprnt.c: 525: double integ;
  4907                           ;doprnt.c: 526: } tmpval;
  4908                           ;doprnt.c: 528: unsigned int val;
  4909                           ;doprnt.c: 529: unsigned len;
  4910                           ;doprnt.c: 530: const char * cp;
  4911                           ;doprnt.c: 536: while(c = *f++) {
  4912                           
  4913                           ;incstack = 0
  4914  000012  EFA2  F004         	goto	l7968
  4915  000016                     l7762:
  4916                           
  4917                           ;doprnt.c: 538: if(c != '%')
  4918  000016  0E25               	movlw	37
  4919  000018  0100               	movlb	0	; () banked
  4920  00001A  19A1               	xorwf	__doprnt@c& (0+255),w,b
  4921  00001C  B4D8               	btfsc	status,2,c
  4922  00001E  D03C               	goto	l7772
  4923                           
  4924                           ; BSR set to: 0
  4925                           ;doprnt.c: 540: {
  4926                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  4927  000020  0100               	movlb	0	; () banked
  4928  000022  EE20 F002          	lfsr	2,2
  4929  000026  518C               	movf	__doprnt@pb& (0+255),w,b
  4930  000028  26D9               	addwf	fsr2l,f,c
  4931  00002A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4932  00002C  22DA               	addwfc	fsr2h,f,c
  4933  00002E  50DE               	movf	postinc2,w,c
  4934  000030  10DE               	iorwf	postinc2,w,c
  4935  000032  B4D8               	btfsc	status,2,c
  4936  000034  D01A               	goto	l7768
  4937                           
  4938                           ; BSR set to: 0
  4939  000036  0100               	movlb	0	; () banked
  4940  000038  EE20 F002          	lfsr	2,2
  4941  00003C  518C               	movf	__doprnt@pb& (0+255),w,b
  4942  00003E  26D9               	addwf	fsr2l,f,c
  4943  000040  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  4944  000042  22DA               	addwfc	fsr2h,f,c
  4945  000044  CFDE F092          	movff	postinc2,??__doprnt
  4946  000048  CFDD F093          	movff	postdec2,??__doprnt+1
  4947  00004C  D802               	call	u12528
  4948  00004E  EFA2  F004         	goto	l7968
  4949  000052                     u12528:
  4950  000052  0005               	push	
  4951  000054  6EFA               	movwf	pclath,c
  4952  000056  0100               	movlb	0	; () banked
  4953  000058  5192               	movf	??__doprnt& (0+255),w,b
  4954  00005A  6EFD               	movwf	tosl,c
  4955  00005C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  4956  00005E  6EFE               	movwf	tosh,c
  4957  000060  6AFF               	clrf	tosu,c
  4958  000062  50FA               	movf	pclath,w,c
  4959  000064  0100               	movlb	0	; () banked
  4960  000066  51A1               	movf	__doprnt@c& (0+255),w,b
  4961  000068  0012               	return		;indir
  4962  00006A                     l7768:
  4963  00006A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4964  00006E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4965  000072  CFDE F092          	movff	postinc2,??__doprnt
  4966  000076  CFDD F093          	movff	postdec2,??__doprnt+1
  4967  00007A  C092  FFD9         	movff	??__doprnt,fsr2l
  4968  00007E  C093  FFDA         	movff	??__doprnt+1,fsr2h
  4969  000082  C0A1  FFDF         	movff	__doprnt@c,indf2
  4970  000086  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  4971  00008A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  4972  00008E  2ADE               	incf	postinc2,f,c
  4973  000090  0E00               	movlw	0
  4974  000092  22DD               	addwfc	postdec2,f,c
  4975                           
  4976                           ;doprnt.c: 542: continue;
  4977  000094  EFA2  F004         	goto	l7968
  4978  000098                     l7772:
  4979                           
  4980                           ;doprnt.c: 543: }
  4981                           ;doprnt.c: 546: width = 0;
  4982  000098  0E00               	movlw	0
  4983  00009A  0100               	movlb	0	; () banked
  4984  00009C  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  4985  00009E  0E00               	movlw	0
  4986  0000A0  6F9F               	movwf	__doprnt@width& (0+255),b
  4987                           
  4988                           ;doprnt.c: 548: flag = 0;
  4989  0000A2  0E00               	movlw	0
  4990  0000A4  0100               	movlb	0	; () banked
  4991  0000A6  6F9E               	movwf	__doprnt@flag& (0+255),b
  4992                           
  4993                           ; BSR set to: 0
  4994                           ;doprnt.c: 551: switch(*f) {
  4995                           
  4996                           ;doprnt.c: 550: for(;;) {
  4997  0000A8  D005               	goto	l7778
  4998  0000AA                     l7774:
  4999                           
  5000                           ;doprnt.c: 580: flag |= 0x04;
  5001  0000AA  0100               	movlb	0	; () banked
  5002  0000AC  859E               	bsf	__doprnt@flag& (0+255),2,b
  5003                           
  5004                           ;doprnt.c: 581: f++;
  5005  0000AE  0100               	movlb	0	; () banked
  5006  0000B0  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5007  0000B2  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5008  0000B4                     l7778:
  5009  0000B4  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5010  0000B8  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5011  0000BC  0E00               	movlw	low (__mediumconst shr (0+16))
  5012  0000BE  6EF8               	movwf	tblptru,c
  5013  0000C0  0E0F               	movlw	(high __ramtop+-1)
  5014  0000C2  64F7               	cpfsgt	tblptrh,c
  5015  0000C4  D003               	bra	u12537
  5016  0000C6  0008               	tblrd		*
  5017  0000C8  50F5               	movf	tablat,w,c
  5018  0000CA  D005               	bra	u12530
  5019  0000CC                     u12537:
  5020  0000CC  CFF6 FFE9          	movff	tblptrl,fsr0l
  5021  0000D0  CFF7 FFEA          	movff	tblptrh,fsr0h
  5022  0000D4  50EF               	movf	indf0,w,c
  5023  0000D6                     u12530:
  5024                           
  5025                           ; Switch size 1, requested type "space"
  5026                           ; Number of cases is 1, Range of values is 48 to 48
  5027                           ; switch strategies available:
  5028                           ; Name         Instructions Cycles
  5029                           ; simple_byte            4     3 (average)
  5030                           ;	Chosen strategy is simple_byte
  5031  0000D6  0A30               	xorlw	48	; case 48
  5032  0000D8  B4D8               	btfsc	status,2,c
  5033  0000DA  D7E7               	goto	l7774
  5034                           
  5035                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5036                           
  5037                           ;doprnt.c: 586: }
  5038                           
  5039                           ;doprnt.c: 585: break;
  5040  0000DC  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5041  0000E0  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5042  0000E4  0E00               	movlw	low (__mediumconst shr (0+16))
  5043  0000E6  6EF8               	movwf	tblptru,c
  5044  0000E8  0E0F               	movlw	(high __ramtop+-1)
  5045  0000EA  64F7               	cpfsgt	tblptrh,c
  5046  0000EC  D003               	bra	u12547
  5047  0000EE  0008               	tblrd		*
  5048  0000F0  50F5               	movf	tablat,w,c
  5049  0000F2  D005               	bra	u12540
  5050  0000F4                     u12547:
  5051  0000F4  CFF6 FFE9          	movff	tblptrl,fsr0l
  5052  0000F8  CFF7 FFEA          	movff	tblptrh,fsr0h
  5053  0000FC  50EF               	movf	indf0,w,c
  5054  0000FE                     u12540:
  5055  0000FE  EC1C  F01E         	call	_isdigit
  5056  000102  A0D8               	btfss	status,0,c
  5057  000104  D18A               	goto	l7844
  5058                           
  5059                           ;doprnt.c: 598: width = 0;
  5060  000106  0E00               	movlw	0
  5061  000108  0100               	movlb	0	; () banked
  5062  00010A  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5063  00010C  0E00               	movlw	0
  5064  00010E  6F9F               	movwf	__doprnt@width& (0+255),b
  5065  000110                     l7784:
  5066                           
  5067                           ;doprnt.c: 600: width *= 10;
  5068  000110  C09F  F080         	movff	__doprnt@width,___wmul@multiplier
  5069  000114  C0A0  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
  5070  000118  0E00               	movlw	0
  5071  00011A  0100               	movlb	0	; () banked
  5072  00011C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5073  00011E  0E0A               	movlw	10
  5074  000120  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5075  000122  ECA0  F01D         	call	___wmul	;wreg free
  5076  000126  C080  F09F         	movff	?___wmul,__doprnt@width
  5077  00012A  C081  F0A0         	movff	?___wmul+1,__doprnt@width+1
  5078                           
  5079                           ;doprnt.c: 601: width += *f++ - '0';
  5080  00012E  0ED0               	movlw	208
  5081  000130  0100               	movlb	0	; () banked
  5082  000132  6F92               	movwf	??__doprnt& (0+255),b
  5083  000134  0EFF               	movlw	255
  5084  000136  0100               	movlb	0	; () banked
  5085  000138  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5086  00013A  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5087  00013E  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5088  000142  0E00               	movlw	low (__mediumconst shr (0+16))
  5089  000144  6EF8               	movwf	tblptru,c
  5090  000146  0E0F               	movlw	(high __ramtop+-1)
  5091  000148  64F7               	cpfsgt	tblptrh,c
  5092  00014A  D003               	bra	u12567
  5093  00014C  0008               	tblrd		*
  5094  00014E  50F5               	movf	tablat,w,c
  5095  000150  D005               	bra	u12560
  5096  000152                     u12567:
  5097  000152  CFF6 FFE9          	movff	tblptrl,fsr0l
  5098  000156  CFF7 FFEA          	movff	tblptrh,fsr0h
  5099  00015A  50EF               	movf	indf0,w,c
  5100  00015C                     u12560:
  5101  00015C  0100               	movlb	0	; () banked
  5102  00015E  6F94               	movwf	(??__doprnt+2)& (0+255),b
  5103  000160  6B95               	clrf	(??__doprnt+3)& (0+255),b
  5104  000162  0100               	movlb	0	; () banked
  5105  000164  5192               	movf	??__doprnt& (0+255),w,b
  5106  000166  0100               	movlb	0	; () banked
  5107  000168  2794               	addwf	(??__doprnt+2)& (0+255),f,b
  5108  00016A  0100               	movlb	0	; () banked
  5109  00016C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5110  00016E  0100               	movlb	0	; () banked
  5111  000170  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
  5112  000172  0100               	movlb	0	; () banked
  5113  000174  5194               	movf	(??__doprnt+2)& (0+255),w,b
  5114  000176  0100               	movlb	0	; () banked
  5115  000178  279F               	addwf	__doprnt@width& (0+255),f,b
  5116  00017A  0100               	movlb	0	; () banked
  5117  00017C  5195               	movf	(??__doprnt+3)& (0+255),w,b
  5118  00017E  0100               	movlb	0	; () banked
  5119  000180  23A0               	addwfc	(__doprnt@width+1)& (0+255),f,b
  5120                           
  5121                           ; BSR set to: 0
  5122  000182  0100               	movlb	0	; () banked
  5123  000184  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5124  000186  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5128  000188  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5129  00018C  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5130  000190  0E00               	movlw	low (__mediumconst shr (0+16))
  5131  000192  6EF8               	movwf	tblptru,c
  5132  000194  0E0F               	movlw	(high __ramtop+-1)
  5133  000196  64F7               	cpfsgt	tblptrh,c
  5134  000198  D003               	bra	u12577
  5135  00019A  0008               	tblrd		*
  5136  00019C  50F5               	movf	tablat,w,c
  5137  00019E  D005               	bra	u12570
  5138  0001A0                     u12577:
  5139  0001A0  CFF6 FFE9          	movff	tblptrl,fsr0l
  5140  0001A4  CFF7 FFEA          	movff	tblptrh,fsr0h
  5141  0001A8  50EF               	movf	indf0,w,c
  5142  0001AA                     u12570:
  5143  0001AA  EC1C  F01E         	call	_isdigit
  5144  0001AE  A0D8               	btfss	status,0,c
  5145  0001B0  D134               	goto	l7844
  5146  0001B2  D7AE               	goto	l7784
  5147  0001B4                     l7792:
  5148                           
  5149                           ;doprnt.c: 721: flag |= 0x80;
  5150  0001B4  0100               	movlb	0	; () banked
  5151  0001B6  8F9E               	bsf	__doprnt@flag& (0+255),7,b
  5152                           
  5153                           ;doprnt.c: 723: break;
  5154  0001B8  D163               	goto	l531
  5155  0001BA                     l7794:
  5156                           
  5157                           ; BSR set to: 0
  5158                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5159  0001BA  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5160  0001BE  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5161  0001C2  CFDF F092          	movff	indf2,??__doprnt
  5162  0001C6  0E02               	movlw	2
  5163  0001C8  26DE               	addwf	postinc2,f,c
  5164  0001CA  CFDF F093          	movff	indf2,??__doprnt+1
  5165  0001CE  0E00               	movlw	0
  5166  0001D0  22DD               	addwfc	postdec2,f,c
  5167  0001D2  C092  FFD9         	movff	??__doprnt,fsr2l
  5168  0001D6  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5169  0001DA  CFDE F09A          	movff	postinc2,__doprnt@cp
  5170  0001DE  CFDD F09B          	movff	postdec2,__doprnt@cp+1
  5171                           
  5172                           ; BSR set to: 0
  5173                           ;doprnt.c: 740: if(!cp)
  5174  0001E2  0100               	movlb	0	; () banked
  5175  0001E4  519A               	movf	__doprnt@cp& (0+255),w,b
  5176  0001E6  0100               	movlb	0	; () banked
  5177  0001E8  119B               	iorwf	(__doprnt@cp+1)& (0+255),w,b
  5178  0001EA  A4D8               	btfss	status,2,c
  5179  0001EC  D006               	goto	l7800
  5180                           
  5181                           ; BSR set to: 0
  5182                           ;doprnt.c: 741: cp = "(null)";
  5183  0001EE  0EED               	movlw	low STR_26
  5184  0001F0  0100               	movlb	0	; () banked
  5185  0001F2  6F9A               	movwf	__doprnt@cp& (0+255),b
  5186  0001F4  0EFF               	movlw	high STR_26
  5187  0001F6  0100               	movlb	0	; () banked
  5188  0001F8  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  5189  0001FA                     l7800:
  5190                           
  5191                           ; BSR set to: 0
  5192                           ;doprnt.c: 745: len = 0;
  5193  0001FA  0E00               	movlw	0
  5194  0001FC  0100               	movlb	0	; () banked
  5195  0001FE  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  5196  000200  0E00               	movlw	0
  5197  000202  6F98               	movwf	__doprnt@len& (0+255),b
  5198                           
  5199                           ;doprnt.c: 746: while(cp[len])
  5200  000204  D003               	goto	l7804
  5201  000206                     l7802:
  5202                           
  5203                           ;doprnt.c: 747: len++;
  5204  000206  0100               	movlb	0	; () banked
  5205  000208  4B98               	infsnz	__doprnt@len& (0+255),f,b
  5206  00020A  2B99               	incf	(__doprnt@len+1)& (0+255),f,b
  5207  00020C                     l7804:
  5208                           
  5209                           ; BSR set to: 0
  5210  00020C  0100               	movlb	0	; () banked
  5211  00020E  5198               	movf	__doprnt@len& (0+255),w,b
  5212  000210  0100               	movlb	0	; () banked
  5213  000212  259A               	addwf	__doprnt@cp& (0+255),w,b
  5214  000214  0100               	movlb	0	; () banked
  5215  000216  6F92               	movwf	??__doprnt& (0+255),b
  5216  000218  0100               	movlb	0	; () banked
  5217  00021A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  5218  00021C  0100               	movlb	0	; () banked
  5219  00021E  219B               	addwfc	(__doprnt@cp+1)& (0+255),w,b
  5220  000220  0100               	movlb	0	; () banked
  5221  000222  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5222  000224  C092  FFF6         	movff	??__doprnt,tblptrl
  5223  000228  C093  FFF7         	movff	??__doprnt+1,tblptrh
  5224  00022C  0E00               	movlw	low (__mediumconst shr (0+16))
  5225  00022E  6EF8               	movwf	tblptru,c
  5226  000230  0E0F               	movlw	(high __ramtop+-1)
  5227  000232  64F7               	cpfsgt	tblptrh,c
  5228  000234  D003               	bra	u12607
  5229  000236  0008               	tblrd		*
  5230  000238  50F5               	movf	tablat,w,c
  5231  00023A  D005               	bra	u12600
  5232  00023C                     u12607:
  5233  00023C  CFF6 FFE9          	movff	tblptrl,fsr0l
  5234  000240  CFF7 FFEA          	movff	tblptrh,fsr0h
  5235  000244  50EF               	movf	indf0,w,c
  5236  000246                     u12600:
  5237  000246  0900               	iorlw	0
  5238  000248  A4D8               	btfss	status,2,c
  5239  00024A  D7DD               	goto	l7802
  5240  00024C                     l7806:
  5241                           
  5242                           ;doprnt.c: 757: if(width > len)
  5243  00024C  0100               	movlb	0	; () banked
  5244  00024E  519F               	movf	__doprnt@width& (0+255),w,b
  5245  000250  0100               	movlb	0	; () banked
  5246  000252  5D98               	subwf	__doprnt@len& (0+255),w,b
  5247  000254  0100               	movlb	0	; () banked
  5248  000256  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  5249  000258  0100               	movlb	0	; () banked
  5250  00025A  5999               	subwfb	(__doprnt@len+1)& (0+255),w,b
  5251  00025C  B0D8               	btfsc	status,0,c
  5252  00025E  D009               	goto	l7810
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;doprnt.c: 758: width -= len;
  5256  000260  0100               	movlb	0	; () banked
  5257  000262  5198               	movf	__doprnt@len& (0+255),w,b
  5258  000264  0100               	movlb	0	; () banked
  5259  000266  5F9F               	subwf	__doprnt@width& (0+255),f,b
  5260  000268  0100               	movlb	0	; () banked
  5261  00026A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  5262  00026C  0100               	movlb	0	; () banked
  5263  00026E  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5264  000270  D03E               	goto	l7820
  5265  000272                     l7810:
  5266                           
  5267                           ; BSR set to: 0
  5268                           ;doprnt.c: 759: else
  5269                           ;doprnt.c: 760: width = 0;
  5270  000272  0E00               	movlw	0
  5271  000274  0100               	movlb	0	; () banked
  5272  000276  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5273  000278  0E00               	movlw	0
  5274  00027A  6F9F               	movwf	__doprnt@width& (0+255),b
  5275                           
  5276                           ; BSR set to: 0
  5277                           ;doprnt.c: 764: while(width--)
  5278  00027C  D038               	goto	l7820
  5279  00027E                     l7812:
  5280                           
  5281                           ; BSR set to: 0
  5282                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5283  00027E  0100               	movlb	0	; () banked
  5284  000280  EE20 F002          	lfsr	2,2
  5285  000284  518C               	movf	__doprnt@pb& (0+255),w,b
  5286  000286  26D9               	addwf	fsr2l,f,c
  5287  000288  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5288  00028A  22DA               	addwfc	fsr2h,f,c
  5289  00028C  50DE               	movf	postinc2,w,c
  5290  00028E  10DE               	iorwf	postinc2,w,c
  5291  000290  B4D8               	btfsc	status,2,c
  5292  000292  D018               	goto	l7816
  5293                           
  5294                           ; BSR set to: 0
  5295  000294  0100               	movlb	0	; () banked
  5296  000296  EE20 F002          	lfsr	2,2
  5297  00029A  518C               	movf	__doprnt@pb& (0+255),w,b
  5298  00029C  26D9               	addwf	fsr2l,f,c
  5299  00029E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5300  0002A0  22DA               	addwfc	fsr2h,f,c
  5301  0002A2  CFDE F092          	movff	postinc2,??__doprnt
  5302  0002A6  CFDD F093          	movff	postdec2,??__doprnt+1
  5303  0002AA  D801               	call	u12648
  5304  0002AC  D020               	goto	l7820
  5305  0002AE                     u12648:
  5306  0002AE  0005               	push	
  5307  0002B0  6EFA               	movwf	pclath,c
  5308  0002B2  0100               	movlb	0	; () banked
  5309  0002B4  5192               	movf	??__doprnt& (0+255),w,b
  5310  0002B6  6EFD               	movwf	tosl,c
  5311  0002B8  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5312  0002BA  6EFE               	movwf	tosh,c
  5313  0002BC  6AFF               	clrf	tosu,c
  5314  0002BE  50FA               	movf	pclath,w,c
  5315  0002C0  0E20               	movlw	32
  5316  0002C2  0012               	return		;indir
  5317  0002C4                     l7816:
  5318  0002C4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5319  0002C8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5320  0002CC  CFDE F092          	movff	postinc2,??__doprnt
  5321  0002D0  CFDD F093          	movff	postdec2,??__doprnt+1
  5322  0002D4  C092  FFD9         	movff	??__doprnt,fsr2l
  5323  0002D8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5324  0002DC  0E20               	movlw	32
  5325  0002DE  6EDF               	movwf	indf2,c
  5326  0002E0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5327  0002E4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5328  0002E8  2ADE               	incf	postinc2,f,c
  5329  0002EA  0E00               	movlw	0
  5330  0002EC  22DD               	addwfc	postdec2,f,c
  5331  0002EE                     l7820:
  5332  0002EE  0100               	movlb	0	; () banked
  5333  0002F0  079F               	decf	__doprnt@width& (0+255),f,b
  5334  0002F2  A0D8               	btfss	status,0,c
  5335  0002F4  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5336  0002F6  0100               	movlb	0	; () banked
  5337  0002F8  299F               	incf	__doprnt@width& (0+255),w,b
  5338  0002FA  E1C1               	bnz	l7812
  5339  0002FC  0100               	movlb	0	; () banked
  5340  0002FE  29A0               	incf	(__doprnt@width+1)& (0+255),w,b
  5341  000300  B4D8               	btfsc	status,2,c
  5342  000302  D060               	goto	l7834
  5343  000304  D7BC               	goto	l7812
  5344  000306                     l7822:
  5345                           
  5346                           ; BSR set to: 0
  5347                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  5348  000306  0100               	movlb	0	; () banked
  5349  000308  EE20 F002          	lfsr	2,2
  5350  00030C  518C               	movf	__doprnt@pb& (0+255),w,b
  5351  00030E  26D9               	addwf	fsr2l,f,c
  5352  000310  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5353  000312  22DA               	addwfc	fsr2h,f,c
  5354  000314  50DE               	movf	postinc2,w,c
  5355  000316  10DE               	iorwf	postinc2,w,c
  5356  000318  B4D8               	btfsc	status,2,c
  5357  00031A  D02C               	goto	l7828
  5358                           
  5359                           ; BSR set to: 0
  5360  00031C  0100               	movlb	0	; () banked
  5361  00031E  EE20 F002          	lfsr	2,2
  5362  000322  518C               	movf	__doprnt@pb& (0+255),w,b
  5363  000324  26D9               	addwf	fsr2l,f,c
  5364  000326  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5365  000328  22DA               	addwfc	fsr2h,f,c
  5366  00032A  CFDE F092          	movff	postinc2,??__doprnt
  5367  00032E  CFDD F093          	movff	postdec2,??__doprnt+1
  5368  000332  D801               	call	u12678
  5369  000334  D01B               	goto	l7826
  5370  000336                     u12678:
  5371  000336  0005               	push	
  5372  000338  6EFA               	movwf	pclath,c
  5373  00033A  0100               	movlb	0	; () banked
  5374  00033C  5192               	movf	??__doprnt& (0+255),w,b
  5375  00033E  6EFD               	movwf	tosl,c
  5376  000340  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5377  000342  6EFE               	movwf	tosh,c
  5378  000344  6AFF               	clrf	tosu,c
  5379  000346  50FA               	movf	pclath,w,c
  5380  000348  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  5381  00034C  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  5382  000350  0E00               	movlw	low (__mediumconst shr (0+16))
  5383  000352  6EF8               	movwf	tblptru,c
  5384  000354  0E0F               	movlw	(high __ramtop+-1)
  5385  000356  64F7               	cpfsgt	tblptrh,c
  5386  000358  D003               	bra	u12687
  5387  00035A  0008               	tblrd		*
  5388  00035C  50F5               	movf	tablat,w,c
  5389  00035E  D005               	bra	u12680
  5390  000360                     u12687:
  5391  000360  CFF6 FFE9          	movff	tblptrl,fsr0l
  5392  000364  CFF7 FFEA          	movff	tblptrh,fsr0h
  5393  000368  50EF               	movf	indf0,w,c
  5394  00036A                     u12680:
  5395  00036A  0012               	return		;indir
  5396  00036C                     l7826:
  5397  00036C  0100               	movlb	0	; () banked
  5398  00036E  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  5399  000370  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  5400  000372  D028               	goto	l7834
  5401  000374                     l7828:
  5402                           
  5403                           ; BSR set to: 0
  5404  000374  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  5405  000378  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  5406  00037C  0E00               	movlw	low (__mediumconst shr (0+16))
  5407  00037E  6EF8               	movwf	tblptru,c
  5408  000380  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5409  000384  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5410  000388  CFDE F092          	movff	postinc2,??__doprnt
  5411  00038C  CFDD F093          	movff	postdec2,??__doprnt+1
  5412  000390  C092  FFD9         	movff	??__doprnt,fsr2l
  5413  000394  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5414  000398  0E0F               	movlw	(high __ramtop+-1)
  5415  00039A  64F7               	cpfsgt	tblptrh,c
  5416  00039C  D003               	bra	u12697
  5417  00039E  0008               	tblrd		*
  5418  0003A0  50F5               	movf	tablat,w,c
  5419  0003A2  D005               	bra	u12690
  5420  0003A4                     u12697:
  5421  0003A4  CFF6 FFE9          	movff	tblptrl,fsr0l
  5422  0003A8  CFF7 FFEA          	movff	tblptrh,fsr0h
  5423  0003AC  50EF               	movf	indf0,w,c
  5424  0003AE                     u12690:
  5425  0003AE  6EDF               	movwf	indf2,c
  5426  0003B0  0100               	movlb	0	; () banked
  5427  0003B2  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  5428  0003B4  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  5429                           
  5430                           ; BSR set to: 0
  5431  0003B6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5432  0003BA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5433  0003BE  2ADE               	incf	postinc2,f,c
  5434  0003C0  0E00               	movlw	0
  5435  0003C2  22DD               	addwfc	postdec2,f,c
  5436  0003C4                     l7834:
  5437                           
  5438                           ; BSR set to: 0
  5439  0003C4  0100               	movlb	0	; () banked
  5440  0003C6  0798               	decf	__doprnt@len& (0+255),f,b
  5441  0003C8  A0D8               	btfss	status,0,c
  5442  0003CA  0799               	decf	(__doprnt@len+1)& (0+255),f,b
  5443  0003CC  0100               	movlb	0	; () banked
  5444  0003CE  2998               	incf	__doprnt@len& (0+255),w,b
  5445  0003D0  E19A               	bnz	l7822
  5446  0003D2  0100               	movlb	0	; () banked
  5447  0003D4  2999               	incf	(__doprnt@len+1)& (0+255),w,b
  5448  0003D6  B4D8               	btfsc	status,2,c
  5449  0003D8  D2B5               	goto	l7968
  5450  0003DA  D795               	goto	l7822
  5451  0003DC                     l7836:
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5455  0003DC  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5456  0003E0  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5457  0003E4  CFDF F092          	movff	indf2,??__doprnt
  5458  0003E8  0E02               	movlw	2
  5459  0003EA  26DE               	addwf	postinc2,f,c
  5460  0003EC  CFDF F093          	movff	indf2,??__doprnt+1
  5461  0003F0  0E00               	movlw	0
  5462  0003F2  22DD               	addwfc	postdec2,f,c
  5463  0003F4  C092  FFD9         	movff	??__doprnt,fsr2l
  5464  0003F8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5465  0003FC  50DF               	movf	indf2,w,c
  5466  0003FE  0100               	movlb	0	; () banked
  5467  000400  6FA1               	movwf	__doprnt@c& (0+255),b
  5468  000402                     l7838:
  5469                           
  5470                           ; BSR set to: 0
  5471                           ;doprnt.c: 805: cp = (char *)&c;
  5472  000402  0EA1               	movlw	low __doprnt@c
  5473  000404  0100               	movlb	0	; () banked
  5474  000406  6F9A               	movwf	__doprnt@cp& (0+255),b
  5475  000408  0E00               	movlw	high __doprnt@c
  5476  00040A  0100               	movlb	0	; () banked
  5477  00040C  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;doprnt.c: 806: len = 1;
  5481  00040E  0E00               	movlw	0
  5482  000410  0100               	movlb	0	; () banked
  5483  000412  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  5484  000414  0E01               	movlw	1
  5485  000416  6F98               	movwf	__doprnt@len& (0+255),b
  5486                           
  5487                           ;doprnt.c: 807: goto dostring;
  5488  000418  D719               	goto	l7806
  5489  00041A                     l7844:
  5490  00041A  0100               	movlb	0	; () banked
  5491  00041C  518E               	movf	__doprnt@f& (0+255),w,b
  5492  00041E  0100               	movlb	0	; () banked
  5493  000420  6F92               	movwf	??__doprnt& (0+255),b
  5494  000422  0100               	movlb	0	; () banked
  5495  000424  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  5496  000426  0100               	movlb	0	; () banked
  5497  000428  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5498  00042A  0100               	movlb	0	; () banked
  5499  00042C  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5500  00042E  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5501  000430  C092  FFF6         	movff	??__doprnt,tblptrl
  5502  000434  C093  FFF7         	movff	??__doprnt+1,tblptrh
  5503  000438  0E00               	movlw	low (__mediumconst shr (0+16))
  5504  00043A  6EF8               	movwf	tblptru,c
  5505  00043C  0E0F               	movlw	(high __ramtop+-1)
  5506  00043E  64F7               	cpfsgt	tblptrh,c
  5507  000440  D003               	bra	u12717
  5508  000442  0008               	tblrd		*
  5509  000444  50F5               	movf	tablat,w,c
  5510  000446  D005               	bra	u12710
  5511  000448                     u12717:
  5512  000448  CFF6 FFE9          	movff	tblptrl,fsr0l
  5513  00044C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5514  000450  50EF               	movf	indf0,w,c
  5515  000452                     u12710:
  5516  000452  0100               	movlb	0	; () banked
  5517  000454  6FA1               	movwf	__doprnt@c& (0+255),b
  5518  000456  0100               	movlb	0	; () banked
  5519  000458  51A1               	movf	__doprnt@c& (0+255),w,b
  5520                           
  5521                           ; Switch size 1, requested type "space"
  5522                           ; Number of cases is 6, Range of values is 0 to 120
  5523                           ; switch strategies available:
  5524                           ; Name         Instructions Cycles
  5525                           ; simple_byte           19    10 (average)
  5526                           ;	Chosen strategy is simple_byte
  5527  00045A  0A00               	xorlw	0	; case 0
  5528  00045C  B4D8               	btfsc	status,2,c
  5529  00045E  D295               	goto	l7970
  5530  000460  0A63               	xorlw	99	; case 99
  5531  000462  B4D8               	btfsc	status,2,c
  5532  000464  D7BB               	goto	l7836
  5533  000466  0A07               	xorlw	7	; case 100
  5534  000468  B4D8               	btfsc	status,2,c
  5535  00046A  D00A               	goto	l531
  5536  00046C  0A0D               	xorlw	13	; case 105
  5537  00046E  B4D8               	btfsc	status,2,c
  5538  000470  D007               	goto	l531
  5539  000472  0A1A               	xorlw	26	; case 115
  5540  000474  B4D8               	btfsc	status,2,c
  5541  000476  D6A1               	goto	l7794
  5542  000478  0A0B               	xorlw	11	; case 120
  5543  00047A  B4D8               	btfsc	status,2,c
  5544  00047C  D69B               	goto	l7792
  5545  00047E  D7C1               	goto	l7838
  5546  000480                     l531:
  5547                           
  5548                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5549  000480  0100               	movlb	0	; () banked
  5550  000482  BF9E               	btfsc	__doprnt@flag& (0+255),7,b
  5551  000484  D020               	goto	l7854
  5552                           
  5553                           ; BSR set to: 0
  5554                           ;doprnt.c: 1253: {
  5555                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5556  000486  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5557  00048A  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5558  00048E  CFDF F092          	movff	indf2,??__doprnt
  5559  000492  0E02               	movlw	2
  5560  000494  26DE               	addwf	postinc2,f,c
  5561  000496  CFDF F093          	movff	indf2,??__doprnt+1
  5562  00049A  0E00               	movlw	0
  5563  00049C  22DD               	addwfc	postdec2,f,c
  5564  00049E  C092  FFD9         	movff	??__doprnt,fsr2l
  5565  0004A2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5566  0004A6  CFDE F09C          	movff	postinc2,__doprnt@val
  5567  0004AA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  5568                           
  5569                           ; BSR set to: 0
  5570                           ;doprnt.c: 1261: if((int)val < 0) {
  5571  0004AE  0100               	movlb	0	; () banked
  5572  0004B0  AF9D               	btfss	(__doprnt@val+1)& (0+255),7,b
  5573  0004B2  D060               	goto	l7886
  5574                           
  5575                           ; BSR set to: 0
  5576                           ;doprnt.c: 1262: flag |= 0x03;
  5577  0004B4  0E03               	movlw	3
  5578  0004B6  0100               	movlb	0	; () banked
  5579  0004B8  139E               	iorwf	__doprnt@flag& (0+255),f,b
  5580                           
  5581                           ; BSR set to: 0
  5582                           ;doprnt.c: 1263: val = -val;
  5583  0004BA  0100               	movlb	0	; () banked
  5584  0004BC  6D9C               	negf	__doprnt@val& (0+255),b
  5585  0004BE  1F9D               	comf	(__doprnt@val+1)& (0+255),f,b
  5586  0004C0  B0D8               	btfsc	status,0,c
  5587  0004C2  2B9D               	incf	(__doprnt@val+1)& (0+255),f,b
  5588                           
  5589                           ; BSR set to: 0
  5590                           ;doprnt.c: 1264: }
  5591                           ;doprnt.c: 1266: }
  5592  0004C4  D057               	goto	l7886
  5593  0004C6                     l7854:
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;doprnt.c: 1268: else
  5597                           ;doprnt.c: 1273: {
  5598                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5599  0004C6  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5600  0004CA  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5601  0004CE  CFDF F092          	movff	indf2,??__doprnt
  5602  0004D2  0E02               	movlw	2
  5603  0004D4  26DE               	addwf	postinc2,f,c
  5604  0004D6  CFDF F093          	movff	indf2,??__doprnt+1
  5605  0004DA  0E00               	movlw	0
  5606  0004DC  22DD               	addwfc	postdec2,f,c
  5607  0004DE  C092  FFD9         	movff	??__doprnt,fsr2l
  5608  0004E2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5609  0004E6  CFDE F09C          	movff	postinc2,__doprnt@val
  5610  0004EA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  5611                           
  5612                           ; BSR set to: 0
  5613                           ;doprnt.c: 1287: }
  5614                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5615  0004EE  D042               	goto	l7886
  5616  0004F0                     l7856:
  5617                           
  5618                           ; BSR set to: 0
  5619                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5620  0004F0  0E01               	movlw	1
  5621  0004F2  0100               	movlb	0	; () banked
  5622  0004F4  6FA1               	movwf	__doprnt@c& (0+255),b
  5623  0004F6                     l7858:
  5624                           
  5625                           ; BSR set to: 0
  5626  0004F6  0E05               	movlw	5
  5627  0004F8  0100               	movlb	0	; () banked
  5628  0004FA  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5629  0004FC  B4D8               	btfsc	status,2,c
  5630  0004FE  D043               	goto	l7888
  5631                           
  5632                           ; BSR set to: 0
  5633                           ;doprnt.c: 1306: if(val < dpowers[c])
  5634                           
  5635                           ; BSR set to: 0
  5636                           
  5637                           ; BSR set to: 0
  5638  000500  0100               	movlb	0	; () banked
  5639  000502  51A1               	movf	__doprnt@c& (0+255),w,b
  5640  000504  0D02               	mullw	2
  5641  000506  0E68               	movlw	low _dpowers
  5642  000508  24F3               	addwf	prodl,w,c
  5643  00050A  6EF6               	movwf	tblptrl,c
  5644  00050C  0EFE               	movlw	high _dpowers
  5645  00050E  20F4               	addwfc	prodh,w,c
  5646  000510  6EF7               	movwf	tblptrh,c
  5647  000512                     	if	1	;There are 3 active tblptr bytes
  5648  000512  6AF8               	clrf	tblptru,c
  5649  000514  0E00               	movlw	low (__mediumconst shr (0+16))
  5650  000516  22F8               	addwfc	tblptru,f,c
  5651  000518                     	endif
  5652  000518  0009               	tblrd		*+
  5653  00051A  50F5               	movf	tablat,w,c
  5654  00051C  0100               	movlb	0	; () banked
  5655  00051E  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5656  000520  0009               	tblrd		*+
  5657  000522  50F5               	movf	tablat,w,c
  5658  000524  0100               	movlb	0	; () banked
  5659  000526  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5660  000528  A0D8               	btfss	status,0,c
  5661  00052A  D02D               	goto	l7888
  5662                           
  5663                           ; BSR set to: 0
  5664                           
  5665                           ; BSR set to: 0
  5666                           
  5667                           ; BSR set to: 0
  5668                           ;doprnt.c: 1307: break;
  5669  00052C  0100               	movlb	0	; () banked
  5670  00052E  2BA1               	incf	__doprnt@c& (0+255),f,b
  5671  000530  D7E2               	goto	l7858
  5672  000532                     l7870:
  5673                           
  5674                           ; BSR set to: 0
  5675                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5676  000532  0E01               	movlw	1
  5677  000534  0100               	movlb	0	; () banked
  5678  000536  6FA1               	movwf	__doprnt@c& (0+255),b
  5679  000538                     l7872:
  5680                           
  5681                           ; BSR set to: 0
  5682  000538  0E04               	movlw	4
  5683  00053A  0100               	movlb	0	; () banked
  5684  00053C  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5685  00053E  B4D8               	btfsc	status,2,c
  5686  000540  D022               	goto	l7888
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5690                           
  5691                           ; BSR set to: 0
  5692                           
  5693                           ; BSR set to: 0
  5694  000542  0100               	movlb	0	; () banked
  5695  000544  51A1               	movf	__doprnt@c& (0+255),w,b
  5696  000546  0D02               	mullw	2
  5697  000548  0E72               	movlw	low _hexpowers
  5698  00054A  24F3               	addwf	prodl,w,c
  5699  00054C  6EF6               	movwf	tblptrl,c
  5700  00054E  0EFE               	movlw	high _hexpowers
  5701  000550  20F4               	addwfc	prodh,w,c
  5702  000552  6EF7               	movwf	tblptrh,c
  5703  000554                     	if	1	;There are 3 active tblptr bytes
  5704  000554  6AF8               	clrf	tblptru,c
  5705  000556  0E00               	movlw	low (__mediumconst shr (0+16))
  5706  000558  22F8               	addwfc	tblptru,f,c
  5707  00055A                     	endif
  5708  00055A  0009               	tblrd		*+
  5709  00055C  50F5               	movf	tablat,w,c
  5710  00055E  0100               	movlb	0	; () banked
  5711  000560  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5712  000562  0009               	tblrd		*+
  5713  000564  50F5               	movf	tablat,w,c
  5714  000566  0100               	movlb	0	; () banked
  5715  000568  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5716  00056A  A0D8               	btfss	status,0,c
  5717  00056C  D00C               	goto	l7888
  5718                           
  5719                           ; BSR set to: 0
  5720                           
  5721                           ; BSR set to: 0
  5722                           
  5723                           ; BSR set to: 0
  5724                           ;doprnt.c: 1318: break;
  5725  00056E  0100               	movlb	0	; () banked
  5726  000570  2BA1               	incf	__doprnt@c& (0+255),f,b
  5727  000572  D7E2               	goto	l7872
  5728  000574                     l7886:
  5729                           
  5730                           ; BSR set to: 0
  5731  000574  0100               	movlb	0	; () banked
  5732  000576  519E               	movf	__doprnt@flag& (0+255),w,b
  5733  000578  0B80               	andlw	128
  5734                           
  5735                           ; Switch size 1, requested type "space"
  5736                           ; Number of cases is 2, Range of values is 0 to 128
  5737                           ; switch strategies available:
  5738                           ; Name         Instructions Cycles
  5739                           ; simple_byte            7     4 (average)
  5740                           ;	Chosen strategy is simple_byte
  5741  00057A  0A00               	xorlw	0	; case 0
  5742  00057C  B4D8               	btfsc	status,2,c
  5743  00057E  D7B8               	goto	l7856
  5744  000580  0A80               	xorlw	128	; case 128
  5745  000582  B4D8               	btfsc	status,2,c
  5746  000584  D7D6               	goto	l7870
  5747  000586                     l7888:
  5748                           
  5749                           ; BSR set to: 0
  5750                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5751  000586  0100               	movlb	0	; () banked
  5752  000588  519F               	movf	__doprnt@width& (0+255),w,b
  5753  00058A  0100               	movlb	0	; () banked
  5754  00058C  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5755  00058E  B4D8               	btfsc	status,2,c
  5756  000590  D00B               	goto	l7894
  5757                           
  5758                           ; BSR set to: 0
  5759  000592  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5760  000596  0E03               	movlw	3
  5761  000598  0100               	movlb	0	; () banked
  5762  00059A  1792               	andwf	??__doprnt& (0+255),f,b
  5763  00059C  B4D8               	btfsc	status,2,c
  5764  00059E  D004               	goto	l7894
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;doprnt.c: 1346: width--;
  5768  0005A0  0100               	movlb	0	; () banked
  5769  0005A2  079F               	decf	__doprnt@width& (0+255),f,b
  5770  0005A4  A0D8               	btfss	status,0,c
  5771  0005A6  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5772  0005A8                     l7894:
  5773                           
  5774                           ; BSR set to: 0
  5775                           ;doprnt.c: 1381: if(width > c)
  5776  0005A8  0E80               	movlw	128
  5777  0005AA  0100               	movlb	0	; () banked
  5778  0005AC  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  5779  0005AE  0E7F               	movlw	127
  5780  0005B0  0100               	movlb	0	; () banked
  5781  0005B2  6F92               	movwf	??__doprnt& (0+255),b
  5782  0005B4  0100               	movlb	0	; () banked
  5783  0005B6  519F               	movf	__doprnt@width& (0+255),w,b
  5784  0005B8  0100               	movlb	0	; () banked
  5785  0005BA  5DA1               	subwf	__doprnt@c& (0+255),w,b
  5786  0005BC  0100               	movlb	0	; () banked
  5787  0005BE  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  5788  0005C0  0A80               	xorlw	128
  5789  0005C2  0100               	movlb	0	; () banked
  5790  0005C4  5992               	subwfb	??__doprnt& (0+255),w,b
  5791  0005C6  B0D8               	btfsc	status,0,c
  5792  0005C8  D00B               	goto	l7898
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;doprnt.c: 1382: width -= c;
  5796  0005CA  0100               	movlb	0	; () banked
  5797  0005CC  51A1               	movf	__doprnt@c& (0+255),w,b
  5798  0005CE  0100               	movlb	0	; () banked
  5799  0005D0  5F9F               	subwf	__doprnt@width& (0+255),f,b
  5800  0005D2  0E00               	movlw	0
  5801  0005D4  0100               	movlb	0	; () banked
  5802  0005D6  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  5803  0005D8  0EFF               	movlw	255
  5804  0005DA  0100               	movlb	0	; () banked
  5805  0005DC  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5806  0005DE  D005               	goto	l7900
  5807  0005E0                     l7898:
  5808                           
  5809                           ; BSR set to: 0
  5810                           ;doprnt.c: 1383: else
  5811                           ;doprnt.c: 1384: width = 0;
  5812  0005E0  0E00               	movlw	0
  5813  0005E2  0100               	movlb	0	; () banked
  5814  0005E4  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5815  0005E6  0E00               	movlw	0
  5816  0005E8  6F9F               	movwf	__doprnt@width& (0+255),b
  5817  0005EA                     l7900:
  5818                           
  5819                           ; BSR set to: 0
  5820                           ;doprnt.c: 1387: if(flag & 0x04) {
  5821  0005EA  0100               	movlb	0	; () banked
  5822  0005EC  A59E               	btfss	__doprnt@flag& (0+255),2,b
  5823  0005EE  D082               	goto	l7924
  5824                           
  5825                           ; BSR set to: 0
  5826                           ;doprnt.c: 1392: if(flag & 0x03)
  5827  0005F0  C09E  F092         	movff	__doprnt@flag,??__doprnt
  5828  0005F4  0E03               	movlw	3
  5829  0005F6  0100               	movlb	0	; () banked
  5830  0005F8  1792               	andwf	??__doprnt& (0+255),f,b
  5831  0005FA  B4D8               	btfsc	status,2,c
  5832  0005FC  D038               	goto	l7912
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  5836  0005FE  0100               	movlb	0	; () banked
  5837  000600  EE20 F002          	lfsr	2,2
  5838  000604  518C               	movf	__doprnt@pb& (0+255),w,b
  5839  000606  26D9               	addwf	fsr2l,f,c
  5840  000608  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5841  00060A  22DA               	addwfc	fsr2h,f,c
  5842  00060C  50DE               	movf	postinc2,w,c
  5843  00060E  10DE               	iorwf	postinc2,w,c
  5844  000610  B4D8               	btfsc	status,2,c
  5845  000612  D018               	goto	l7908
  5846                           
  5847                           ; BSR set to: 0
  5848  000614  0100               	movlb	0	; () banked
  5849  000616  EE20 F002          	lfsr	2,2
  5850  00061A  518C               	movf	__doprnt@pb& (0+255),w,b
  5851  00061C  26D9               	addwf	fsr2l,f,c
  5852  00061E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5853  000620  22DA               	addwfc	fsr2h,f,c
  5854  000622  CFDE F092          	movff	postinc2,??__doprnt
  5855  000626  CFDD F093          	movff	postdec2,??__doprnt+1
  5856  00062A  D801               	call	u12868
  5857  00062C  D020               	goto	l7912
  5858  00062E                     u12868:
  5859  00062E  0005               	push	
  5860  000630  6EFA               	movwf	pclath,c
  5861  000632  0100               	movlb	0	; () banked
  5862  000634  5192               	movf	??__doprnt& (0+255),w,b
  5863  000636  6EFD               	movwf	tosl,c
  5864  000638  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5865  00063A  6EFE               	movwf	tosh,c
  5866  00063C  6AFF               	clrf	tosu,c
  5867  00063E  50FA               	movf	pclath,w,c
  5868  000640  0E2D               	movlw	45
  5869  000642  0012               	return		;indir
  5870  000644                     l7908:
  5871  000644  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5872  000648  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5873  00064C  CFDE F092          	movff	postinc2,??__doprnt
  5874  000650  CFDD F093          	movff	postdec2,??__doprnt+1
  5875  000654  C092  FFD9         	movff	??__doprnt,fsr2l
  5876  000658  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5877  00065C  0E2D               	movlw	45
  5878  00065E  6EDF               	movwf	indf2,c
  5879  000660  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5880  000664  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5881  000668  2ADE               	incf	postinc2,f,c
  5882  00066A  0E00               	movlw	0
  5883  00066C  22DD               	addwfc	postdec2,f,c
  5884  00066E                     l7912:
  5885                           
  5886                           ;doprnt.c: 1415: if(width)
  5887  00066E  0100               	movlb	0	; () banked
  5888  000670  519F               	movf	__doprnt@width& (0+255),w,b
  5889  000672  0100               	movlb	0	; () banked
  5890  000674  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5891  000676  B4D8               	btfsc	status,2,c
  5892  000678  D0C4               	goto	l7946
  5893                           
  5894                           ; BSR set to: 0
  5895                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  5896                           
  5897                           ; BSR set to: 0
  5898                           
  5899                           ;doprnt.c: 1416: do
  5900  00067A  0100               	movlb	0	; () banked
  5901  00067C  EE20 F002          	lfsr	2,2
  5902  000680  518C               	movf	__doprnt@pb& (0+255),w,b
  5903  000682  26D9               	addwf	fsr2l,f,c
  5904  000684  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5905  000686  22DA               	addwfc	fsr2h,f,c
  5906  000688  50DE               	movf	postinc2,w,c
  5907  00068A  10DE               	iorwf	postinc2,w,c
  5908  00068C  B4D8               	btfsc	status,2,c
  5909  00068E  D018               	goto	l7918
  5910                           
  5911                           ; BSR set to: 0
  5912  000690  0100               	movlb	0	; () banked
  5913  000692  EE20 F002          	lfsr	2,2
  5914  000696  518C               	movf	__doprnt@pb& (0+255),w,b
  5915  000698  26D9               	addwf	fsr2l,f,c
  5916  00069A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5917  00069C  22DA               	addwfc	fsr2h,f,c
  5918  00069E  CFDE F092          	movff	postinc2,??__doprnt
  5919  0006A2  CFDD F093          	movff	postdec2,??__doprnt+1
  5920  0006A6  D801               	call	u12898
  5921  0006A8  D020               	goto	l7922
  5922  0006AA                     u12898:
  5923  0006AA  0005               	push	
  5924  0006AC  6EFA               	movwf	pclath,c
  5925  0006AE  0100               	movlb	0	; () banked
  5926  0006B0  5192               	movf	??__doprnt& (0+255),w,b
  5927  0006B2  6EFD               	movwf	tosl,c
  5928  0006B4  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5929  0006B6  6EFE               	movwf	tosh,c
  5930  0006B8  6AFF               	clrf	tosu,c
  5931  0006BA  50FA               	movf	pclath,w,c
  5932  0006BC  0E30               	movlw	48
  5933  0006BE  0012               	return		;indir
  5934  0006C0                     l7918:
  5935  0006C0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5936  0006C4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5937  0006C8  CFDE F092          	movff	postinc2,??__doprnt
  5938  0006CC  CFDD F093          	movff	postdec2,??__doprnt+1
  5939  0006D0  C092  FFD9         	movff	??__doprnt,fsr2l
  5940  0006D4  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5941  0006D8  0E30               	movlw	48
  5942  0006DA  6EDF               	movwf	indf2,c
  5943  0006DC  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5944  0006E0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5945  0006E4  2ADE               	incf	postinc2,f,c
  5946  0006E6  0E00               	movlw	0
  5947  0006E8  22DD               	addwfc	postdec2,f,c
  5948  0006EA                     l7922:
  5949                           
  5950                           ;doprnt.c: 1418: while(--width);
  5951  0006EA  0100               	movlb	0	; () banked
  5952  0006EC  079F               	decf	__doprnt@width& (0+255),f,b
  5953  0006EE  A0D8               	btfss	status,0,c
  5954  0006F0  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5955  0006F2  D7BD               	goto	l7912
  5956  0006F4                     l7924:
  5957                           
  5958                           ; BSR set to: 0
  5959                           ;doprnt.c: 1422: {
  5960                           ;doprnt.c: 1424: if(width
  5961                           ;doprnt.c: 1428: )
  5962  0006F4  0100               	movlb	0	; () banked
  5963  0006F6  519F               	movf	__doprnt@width& (0+255),w,b
  5964  0006F8  0100               	movlb	0	; () banked
  5965  0006FA  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  5966  0006FC  B4D8               	btfsc	status,2,c
  5967  0006FE  D042               	goto	l7936
  5968  000700                     l7926:
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5972  000700  0100               	movlb	0	; () banked
  5973  000702  EE20 F002          	lfsr	2,2
  5974  000706  518C               	movf	__doprnt@pb& (0+255),w,b
  5975  000708  26D9               	addwf	fsr2l,f,c
  5976  00070A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5977  00070C  22DA               	addwfc	fsr2h,f,c
  5978  00070E  50DE               	movf	postinc2,w,c
  5979  000710  10DE               	iorwf	postinc2,w,c
  5980  000712  B4D8               	btfsc	status,2,c
  5981  000714  D018               	goto	l7930
  5982                           
  5983                           ; BSR set to: 0
  5984  000716  0100               	movlb	0	; () banked
  5985  000718  EE20 F002          	lfsr	2,2
  5986  00071C  518C               	movf	__doprnt@pb& (0+255),w,b
  5987  00071E  26D9               	addwf	fsr2l,f,c
  5988  000720  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5989  000722  22DA               	addwfc	fsr2h,f,c
  5990  000724  CFDE F092          	movff	postinc2,??__doprnt
  5991  000728  CFDD F093          	movff	postdec2,??__doprnt+1
  5992  00072C  D801               	call	u12938
  5993  00072E  D020               	goto	l7934
  5994  000730                     u12938:
  5995  000730  0005               	push	
  5996  000732  6EFA               	movwf	pclath,c
  5997  000734  0100               	movlb	0	; () banked
  5998  000736  5192               	movf	??__doprnt& (0+255),w,b
  5999  000738  6EFD               	movwf	tosl,c
  6000  00073A  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6001  00073C  6EFE               	movwf	tosh,c
  6002  00073E  6AFF               	clrf	tosu,c
  6003  000740  50FA               	movf	pclath,w,c
  6004  000742  0E20               	movlw	32
  6005  000744  0012               	return		;indir
  6006  000746                     l7930:
  6007  000746  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6008  00074A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6009  00074E  CFDE F092          	movff	postinc2,??__doprnt
  6010  000752  CFDD F093          	movff	postdec2,??__doprnt+1
  6011  000756  C092  FFD9         	movff	??__doprnt,fsr2l
  6012  00075A  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6013  00075E  0E20               	movlw	32
  6014  000760  6EDF               	movwf	indf2,c
  6015  000762  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6016  000766  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6017  00076A  2ADE               	incf	postinc2,f,c
  6018  00076C  0E00               	movlw	0
  6019  00076E  22DD               	addwfc	postdec2,f,c
  6020  000770                     l7934:
  6021                           
  6022                           ;doprnt.c: 1431: while(--width);
  6023  000770  0100               	movlb	0	; () banked
  6024  000772  079F               	decf	__doprnt@width& (0+255),f,b
  6025  000774  A0D8               	btfss	status,0,c
  6026  000776  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  6027  000778  0100               	movlb	0	; () banked
  6028  00077A  519F               	movf	__doprnt@width& (0+255),w,b
  6029  00077C  0100               	movlb	0	; () banked
  6030  00077E  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  6031  000780  A4D8               	btfss	status,2,c
  6032  000782  D7BE               	goto	l7926
  6033  000784                     l7936:
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;doprnt.c: 1438: if(flag & 0x03)
  6037  000784  C09E  F092         	movff	__doprnt@flag,??__doprnt
  6038  000788  0E03               	movlw	3
  6039  00078A  0100               	movlb	0	; () banked
  6040  00078C  1792               	andwf	??__doprnt& (0+255),f,b
  6041  00078E  B4D8               	btfsc	status,2,c
  6042  000790  D038               	goto	l7946
  6043                           
  6044                           ; BSR set to: 0
  6045                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  6046  000792  0100               	movlb	0	; () banked
  6047  000794  EE20 F002          	lfsr	2,2
  6048  000798  518C               	movf	__doprnt@pb& (0+255),w,b
  6049  00079A  26D9               	addwf	fsr2l,f,c
  6050  00079C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6051  00079E  22DA               	addwfc	fsr2h,f,c
  6052  0007A0  50DE               	movf	postinc2,w,c
  6053  0007A2  10DE               	iorwf	postinc2,w,c
  6054  0007A4  B4D8               	btfsc	status,2,c
  6055  0007A6  D018               	goto	l7942
  6056                           
  6057                           ; BSR set to: 0
  6058  0007A8  0100               	movlb	0	; () banked
  6059  0007AA  EE20 F002          	lfsr	2,2
  6060  0007AE  518C               	movf	__doprnt@pb& (0+255),w,b
  6061  0007B0  26D9               	addwf	fsr2l,f,c
  6062  0007B2  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6063  0007B4  22DA               	addwfc	fsr2h,f,c
  6064  0007B6  CFDE F092          	movff	postinc2,??__doprnt
  6065  0007BA  CFDD F093          	movff	postdec2,??__doprnt+1
  6066  0007BE  D801               	call	u12978
  6067  0007C0  D020               	goto	l7946
  6068  0007C2                     u12978:
  6069  0007C2  0005               	push	
  6070  0007C4  6EFA               	movwf	pclath,c
  6071  0007C6  0100               	movlb	0	; () banked
  6072  0007C8  5192               	movf	??__doprnt& (0+255),w,b
  6073  0007CA  6EFD               	movwf	tosl,c
  6074  0007CC  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6075  0007CE  6EFE               	movwf	tosh,c
  6076  0007D0  6AFF               	clrf	tosu,c
  6077  0007D2  50FA               	movf	pclath,w,c
  6078  0007D4  0E2D               	movlw	45
  6079  0007D6  0012               	return		;indir
  6080  0007D8                     l7942:
  6081  0007D8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6082  0007DC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6083  0007E0  CFDE F092          	movff	postinc2,??__doprnt
  6084  0007E4  CFDD F093          	movff	postdec2,??__doprnt+1
  6085  0007E8  C092  FFD9         	movff	??__doprnt,fsr2l
  6086  0007EC  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6087  0007F0  0E2D               	movlw	45
  6088  0007F2  6EDF               	movwf	indf2,c
  6089  0007F4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6090  0007F8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6091  0007FC  2ADE               	incf	postinc2,f,c
  6092  0007FE  0E00               	movlw	0
  6093  000800  22DD               	addwfc	postdec2,f,c
  6094  000802                     l7946:
  6095                           
  6096                           ;doprnt.c: 1469: }
  6097                           ;doprnt.c: 1472: prec = c;
  6098  000802  C0A1  F097         	movff	__doprnt@c,__doprnt@prec
  6099                           
  6100                           ;doprnt.c: 1474: while(prec--) {
  6101  000806  D098               	goto	l7966
  6102  000808                     l7948:
  6103                           
  6104                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6105  000808  0100               	movlb	0	; () banked
  6106  00080A  5197               	movf	__doprnt@prec& (0+255),w,b
  6107  00080C  0D02               	mullw	2
  6108  00080E  0E68               	movlw	low _dpowers
  6109  000810  24F3               	addwf	prodl,w,c
  6110  000812  6EF6               	movwf	tblptrl,c
  6111  000814  0EFE               	movlw	high _dpowers
  6112  000816  20F4               	addwfc	prodh,w,c
  6113  000818  6EF7               	movwf	tblptrh,c
  6114  00081A                     	if	1	;There are 3 active tblptr bytes
  6115  00081A  6AF8               	clrf	tblptru,c
  6116  00081C  0E00               	movlw	low (__mediumconst shr (0+16))
  6117  00081E  22F8               	addwfc	tblptru,f,c
  6118  000820                     	endif
  6119  000820  0009               	tblrd		*+
  6120  000822  CFF5 F082          	movff	tablat,___lwdiv@divisor
  6121  000826  000A               	tblrd		*-
  6122  000828  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  6123  00082C  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  6124  000830  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  6125  000834  EC53  F01B         	call	___lwdiv
  6126  000838  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  6127  00083C  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  6128  000840  0E00               	movlw	0
  6129  000842  0100               	movlb	0	; () banked
  6130  000844  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  6131  000846  0E0A               	movlw	10
  6132  000848  6F89               	movwf	___lwmod@divisor& (0+255),b
  6133  00084A  ECFB  F01B         	call	___lwmod	;wreg free
  6134  00084E  0100               	movlb	0	; () banked
  6135  000850  5187               	movf	?___lwmod& (0+255),w,b
  6136  000852  0F30               	addlw	48
  6137  000854  0100               	movlb	0	; () banked
  6138  000856  6FA1               	movwf	__doprnt@c& (0+255),b
  6139                           
  6140                           ;doprnt.c: 1491: break;
  6141  000858  D036               	goto	l7958
  6142  00085A                     l7950:
  6143                           
  6144                           ; BSR set to: 0
  6145                           ;doprnt.c: 1499: {
  6146                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6147  00085A  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  6148  00085E  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  6149  000862  0100               	movlb	0	; () banked
  6150  000864  5197               	movf	__doprnt@prec& (0+255),w,b
  6151  000866  0D02               	mullw	2
  6152  000868  0E72               	movlw	low _hexpowers
  6153  00086A  24F3               	addwf	prodl,w,c
  6154  00086C  6EF6               	movwf	tblptrl,c
  6155  00086E  0EFE               	movlw	high _hexpowers
  6156  000870  20F4               	addwfc	prodh,w,c
  6157  000872  6EF7               	movwf	tblptrh,c
  6158  000874                     	if	1	;There are 3 active tblptr bytes
  6159  000874  6AF8               	clrf	tblptru,c
  6160  000876  0E00               	movlw	low (__mediumconst shr (0+16))
  6161  000878  22F8               	addwfc	tblptru,f,c
  6162  00087A                     	endif
  6163  00087A  0009               	tblrd		*+
  6164  00087C  CFF5 F082          	movff	tablat,___lwdiv@divisor
  6165  000880  000A               	tblrd		*-
  6166  000882  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  6167  000886  EC53  F01B         	call	___lwdiv	;wreg free
  6168  00088A  0100               	movlb	0	; () banked
  6169  00088C  5180               	movf	?___lwdiv& (0+255),w,b
  6170  00088E  0B0F               	andlw	15
  6171  000890  0100               	movlb	0	; () banked
  6172  000892  6F96               	movwf	__doprnt@idx& (0+255),b
  6173                           
  6174                           ; BSR set to: 0
  6175                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6176  000894  0100               	movlb	0	; () banked
  6177  000896  5196               	movf	__doprnt@idx& (0+255),w,b
  6178  000898  0D01               	mullw	1
  6179  00089A  0E51               	movlw	low STR_27
  6180  00089C  24F3               	addwf	prodl,w,c
  6181  00089E  6EF6               	movwf	tblptrl,c
  6182  0008A0  0EFF               	movlw	high STR_27
  6183  0008A2  20F4               	addwfc	prodh,w,c
  6184  0008A4  6EF7               	movwf	tblptrh,c
  6185  0008A6                     	if	1	;There are 3 active tblptr bytes
  6186  0008A6  6AF8               	clrf	tblptru,c
  6187  0008A8  0E00               	movlw	low (__mediumconst shr (0+16))
  6188  0008AA  22F8               	addwfc	tblptru,f,c
  6189  0008AC                     	endif
  6190  0008AC  0008               	tblrd		*
  6191  0008AE  CFF5 F0A1          	movff	tablat,__doprnt@c
  6192                           
  6193                           ; BSR set to: 0
  6194                           ;doprnt.c: 1523: }
  6195                           
  6196                           ;doprnt.c: 1508: }
  6197                           ;doprnt.c: 1510: break;
  6198  0008B2  D009               	goto	l7958
  6199  0008B4                     l7956:
  6200  0008B4  0100               	movlb	0	; () banked
  6201  0008B6  519E               	movf	__doprnt@flag& (0+255),w,b
  6202  0008B8  0B80               	andlw	128
  6203                           
  6204                           ; Switch size 1, requested type "space"
  6205                           ; Number of cases is 2, Range of values is 0 to 128
  6206                           ; switch strategies available:
  6207                           ; Name         Instructions Cycles
  6208                           ; simple_byte            7     4 (average)
  6209                           ;	Chosen strategy is simple_byte
  6210  0008BA  0A00               	xorlw	0	; case 0
  6211  0008BC  B4D8               	btfsc	status,2,c
  6212  0008BE  D7A4               	goto	l7948
  6213  0008C0  0A80               	xorlw	128	; case 128
  6214  0008C2  B4D8               	btfsc	status,2,c
  6215  0008C4  D7CA               	goto	l7950
  6216  0008C6                     l7958:
  6217                           
  6218                           ; BSR set to: 0
  6219                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  6220  0008C6  0100               	movlb	0	; () banked
  6221  0008C8  EE20 F002          	lfsr	2,2
  6222  0008CC  518C               	movf	__doprnt@pb& (0+255),w,b
  6223  0008CE  26D9               	addwf	fsr2l,f,c
  6224  0008D0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6225  0008D2  22DA               	addwfc	fsr2h,f,c
  6226  0008D4  50DE               	movf	postinc2,w,c
  6227  0008D6  10DE               	iorwf	postinc2,w,c
  6228  0008D8  B4D8               	btfsc	status,2,c
  6229  0008DA  D019               	goto	l7962
  6230                           
  6231                           ; BSR set to: 0
  6232  0008DC  0100               	movlb	0	; () banked
  6233  0008DE  EE20 F002          	lfsr	2,2
  6234  0008E2  518C               	movf	__doprnt@pb& (0+255),w,b
  6235  0008E4  26D9               	addwf	fsr2l,f,c
  6236  0008E6  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6237  0008E8  22DA               	addwfc	fsr2h,f,c
  6238  0008EA  CFDE F092          	movff	postinc2,??__doprnt
  6239  0008EE  CFDD F093          	movff	postdec2,??__doprnt+1
  6240  0008F2  D801               	call	u12998
  6241  0008F4  D021               	goto	l7966
  6242  0008F6                     u12998:
  6243  0008F6  0005               	push	
  6244  0008F8  6EFA               	movwf	pclath,c
  6245  0008FA  0100               	movlb	0	; () banked
  6246  0008FC  5192               	movf	??__doprnt& (0+255),w,b
  6247  0008FE  6EFD               	movwf	tosl,c
  6248  000900  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6249  000902  6EFE               	movwf	tosh,c
  6250  000904  6AFF               	clrf	tosu,c
  6251  000906  50FA               	movf	pclath,w,c
  6252  000908  0100               	movlb	0	; () banked
  6253  00090A  51A1               	movf	__doprnt@c& (0+255),w,b
  6254  00090C  0012               	return		;indir
  6255  00090E                     l7962:
  6256  00090E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6257  000912  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6258  000916  CFDE F092          	movff	postinc2,??__doprnt
  6259  00091A  CFDD F093          	movff	postdec2,??__doprnt+1
  6260  00091E  C092  FFD9         	movff	??__doprnt,fsr2l
  6261  000922  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6262  000926  C0A1  FFDF         	movff	__doprnt@c,indf2
  6263  00092A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6264  00092E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6265  000932  2ADE               	incf	postinc2,f,c
  6266  000934  0E00               	movlw	0
  6267  000936  22DD               	addwfc	postdec2,f,c
  6268  000938                     l7966:
  6269  000938  0100               	movlb	0	; () banked
  6270  00093A  0797               	decf	__doprnt@prec& (0+255),f,b
  6271  00093C  0100               	movlb	0	; () banked
  6272  00093E  2997               	incf	__doprnt@prec& (0+255),w,b
  6273  000940  A4D8               	btfss	status,2,c
  6274  000942  D7B8               	goto	l7956
  6275  000944                     l7968:
  6276  000944  0100               	movlb	0	; () banked
  6277  000946  518E               	movf	__doprnt@f& (0+255),w,b
  6278  000948  0100               	movlb	0	; () banked
  6279  00094A  6F92               	movwf	??__doprnt& (0+255),b
  6280  00094C  0100               	movlb	0	; () banked
  6281  00094E  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  6282  000950  0100               	movlb	0	; () banked
  6283  000952  6F93               	movwf	(??__doprnt+1)& (0+255),b
  6284  000954  0100               	movlb	0	; () banked
  6285  000956  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  6286  000958  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  6287  00095A  C092  FFF6         	movff	??__doprnt,tblptrl
  6288  00095E  C093  FFF7         	movff	??__doprnt+1,tblptrh
  6289  000962  0E00               	movlw	low (__mediumconst shr (0+16))
  6290  000964  6EF8               	movwf	tblptru,c
  6291  000966  0E0F               	movlw	(high __ramtop+-1)
  6292  000968  64F7               	cpfsgt	tblptrh,c
  6293  00096A  D003               	bra	u13017
  6294  00096C  0008               	tblrd		*
  6295  00096E  50F5               	movf	tablat,w,c
  6296  000970  D005               	bra	u13010
  6297  000972                     u13017:
  6298  000972  CFF6 FFE9          	movff	tblptrl,fsr0l
  6299  000976  CFF7 FFEA          	movff	tblptrh,fsr0h
  6300  00097A  50EF               	movf	indf0,w,c
  6301  00097C                     u13010:
  6302  00097C  0100               	movlb	0	; () banked
  6303  00097E  6FA1               	movwf	__doprnt@c& (0+255),b
  6304  000980  0100               	movlb	0	; () banked
  6305  000982  51A1               	movf	__doprnt@c& (0+255),w,b
  6306  000984  A4D8               	btfss	status,2,c
  6307  000986  EF0B  F000         	goto	l7762
  6308  00098A                     l7970:
  6309                           
  6310                           ;doprnt.c: 1540: return 0;
  6311  00098A  0E00               	movlw	0
  6312  00098C  0100               	movlb	0	; () banked
  6313  00098E  6F8D               	movwf	(?__doprnt+1)& (0+255),b
  6314  000990  0E00               	movlw	0
  6315  000992  6F8C               	movwf	?__doprnt& (0+255),b
  6316  000994  0012               	return	
  6317  000996                     __end_of__doprnt:
  6318                           	opt stack 0
  6319                           tosu	equ	0xFFF
  6320                           tosh	equ	0xFFE
  6321                           tosl	equ	0xFFD
  6322                           pclath	equ	0xFFA
  6323                           tblptru	equ	0xFF8
  6324                           tblptrh	equ	0xFF7
  6325                           tblptrl	equ	0xFF6
  6326                           tablat	equ	0xFF5
  6327                           prodh	equ	0xFF4
  6328                           prodl	equ	0xFF3
  6329                           intcon	equ	0xFF2
  6330                           intcon2	equ	0xFF1
  6331                           intcon3	equ	0xFF0
  6332                           indf0	equ	0xFEF
  6333                           postinc0	equ	0xFEE
  6334                           fsr0h	equ	0xFEA
  6335                           fsr0l	equ	0xFE9
  6336                           wreg	equ	0xFE8
  6337                           indf1	equ	0xFE7
  6338                           postinc1	equ	0xFE6
  6339                           postdec1	equ	0xFE5
  6340                           fsr1h	equ	0xFE2
  6341                           fsr1l	equ	0xFE1
  6342                           indf2	equ	0xFDF
  6343                           postinc2	equ	0xFDE
  6344                           postdec2	equ	0xFDD
  6345                           fsr2h	equ	0xFDA
  6346                           fsr2l	equ	0xFD9
  6347                           status	equ	0xFD8
  6348                           
  6349 ;; *************** function _putch *****************
  6350 ;; Defined at:
  6351 ;;		line 30 in file "lcd.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;  data            1    wreg     unsigned char 
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;  data            1    2[BANK0 ] unsigned char 
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  1    wreg      void 
  6358 ;; Registers used:
  6359 ;;		wreg, status,2, status,0, cstack
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6366 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;Total ram usage:        1 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; Hardware stack levels required when called:    6
  6372 ;; This function calls:
  6373 ;;		_lcdNibble
  6374 ;; This function is called by:
  6375 ;;		_printf
  6376 ;;		__doprnt
  6377 ;;		i2__doprnt
  6378 ;; This function uses a non-reentrant model
  6379 ;;
  6380                           
  6381                           	psect	text10
  6382  003CC2                     __ptext10:
  6383                           	opt stack 0
  6384  003CC2                     _putch:
  6385                           	opt stack 0
  6386                           
  6387                           ; BSR set to: 0
  6388                           ;Skip over the trampoline to the duplicate function for level 2
  6389  003CC2  B27B               	btfsc	btemp,1,c
  6390  003CC4  EF7E  F01E         	goto	i2_putch
  6391  003CC8                     _putch$intlevel0:
  6392                           	opt stack 21
  6393                           
  6394                           ;incstack = 0
  6395                           ;putch@data stored from wreg
  6396  003CC8  0100               	movlb	0	; () banked
  6397  003CCA  6F82               	movwf	putch@data& (0+255),b
  6398                           
  6399                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  6400  003CCC  848C               	bsf	3980,2,c	;volatile
  6401                           
  6402                           ;lcd.c: 32: lcdNibble(data);
  6403  003CCE  0100               	movlb	0	; () banked
  6404  003CD0  5182               	movf	putch@data& (0+255),w,b
  6405  003CD2  ECC7  F01B         	call	_lcdNibble
  6406  003CD6  0012               	return		;funcret
  6407  003CD8                     __end_of_putch:
  6408                           	opt stack 0
  6409                           tosu	equ	0xFFF
  6410                           tosh	equ	0xFFE
  6411                           tosl	equ	0xFFD
  6412                           pclath	equ	0xFFA
  6413                           tblptru	equ	0xFF8
  6414                           tblptrh	equ	0xFF7
  6415                           tblptrl	equ	0xFF6
  6416                           tablat	equ	0xFF5
  6417                           prodh	equ	0xFF4
  6418                           prodl	equ	0xFF3
  6419                           intcon	equ	0xFF2
  6420                           intcon2	equ	0xFF1
  6421                           intcon3	equ	0xFF0
  6422                           indf0	equ	0xFEF
  6423                           postinc0	equ	0xFEE
  6424                           fsr0h	equ	0xFEA
  6425                           fsr0l	equ	0xFE9
  6426                           wreg	equ	0xFE8
  6427                           indf1	equ	0xFE7
  6428                           postinc1	equ	0xFE6
  6429                           postdec1	equ	0xFE5
  6430                           fsr1h	equ	0xFE2
  6431                           fsr1l	equ	0xFE1
  6432                           indf2	equ	0xFDF
  6433                           postinc2	equ	0xFDE
  6434                           postdec2	equ	0xFDD
  6435                           fsr2h	equ	0xFDA
  6436                           fsr2l	equ	0xFD9
  6437                           status	equ	0xFD8
  6438                           
  6439 ;; *************** function _isdigit *****************
  6440 ;; Defined at:
  6441 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;  c               1    wreg     unsigned char 
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;  c               1    2[BANK0 ] unsigned char 
  6446 ;; Return value:  Size  Location     Type
  6447 ;;		None               void
  6448 ;; Registers used:
  6449 ;;		wreg, status,2, status,0
  6450 ;; Tracked objects:
  6451 ;;		On entry : 0/0
  6452 ;;		On exit  : 0/0
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6456 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6457 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6458 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6459 ;;Total ram usage:        3 bytes
  6460 ;; Hardware stack levels used:    1
  6461 ;; Hardware stack levels required when called:    5
  6462 ;; This function calls:
  6463 ;;		Nothing
  6464 ;; This function is called by:
  6465 ;;		__doprnt
  6466 ;; This function uses a non-reentrant model
  6467 ;;
  6468                           
  6469                           	psect	text11
  6470  003C38                     __ptext11:
  6471                           	opt stack 0
  6472  003C38                     _isdigit:
  6473                           	opt stack 22
  6474                           
  6475                           ;incstack = 0
  6476                           ;isdigit@c stored from wreg
  6477  003C38  0100               	movlb	0	; () banked
  6478  003C3A  6F82               	movwf	isdigit@c& (0+255),b
  6479  003C3C  0E00               	movlw	0
  6480  003C3E  0100               	movlb	0	; () banked
  6481  003C40  6F81               	movwf	_isdigit$774& (0+255),b
  6482                           
  6483                           ; BSR set to: 0
  6484  003C42  0E3A               	movlw	58
  6485  003C44  0100               	movlb	0	; () banked
  6486  003C46  6182               	cpfslt	isdigit@c& (0+255),b
  6487  003C48  D007               	goto	l4514
  6488                           
  6489                           ; BSR set to: 0
  6490  003C4A  0E2F               	movlw	47
  6491  003C4C  0100               	movlb	0	; () banked
  6492  003C4E  6582               	cpfsgt	isdigit@c& (0+255),b
  6493  003C50  D003               	goto	l4514
  6494                           
  6495                           ; BSR set to: 0
  6496  003C52  0E01               	movlw	1
  6497  003C54  0100               	movlb	0	; () banked
  6498  003C56  6F81               	movwf	_isdigit$774& (0+255),b
  6499  003C58                     l4514:
  6500                           
  6501                           ; BSR set to: 0
  6502  003C58  C081  F080         	movff	_isdigit$774,??_isdigit
  6503  003C5C  0100               	movlb	0	; () banked
  6504  003C5E  3180               	rrcf	??_isdigit& (0+255),w,b
  6505  003C60  0012               	return	
  6506  003C62                     __end_of_isdigit:
  6507                           	opt stack 0
  6508                           tosu	equ	0xFFF
  6509                           tosh	equ	0xFFE
  6510                           tosl	equ	0xFFD
  6511                           pclath	equ	0xFFA
  6512                           tblptru	equ	0xFF8
  6513                           tblptrh	equ	0xFF7
  6514                           tblptrl	equ	0xFF6
  6515                           tablat	equ	0xFF5
  6516                           prodh	equ	0xFF4
  6517                           prodl	equ	0xFF3
  6518                           intcon	equ	0xFF2
  6519                           intcon2	equ	0xFF1
  6520                           intcon3	equ	0xFF0
  6521                           indf0	equ	0xFEF
  6522                           postinc0	equ	0xFEE
  6523                           fsr0h	equ	0xFEA
  6524                           fsr0l	equ	0xFE9
  6525                           wreg	equ	0xFE8
  6526                           indf1	equ	0xFE7
  6527                           postinc1	equ	0xFE6
  6528                           postdec1	equ	0xFE5
  6529                           fsr1h	equ	0xFE2
  6530                           fsr1l	equ	0xFE1
  6531                           indf2	equ	0xFDF
  6532                           postinc2	equ	0xFDE
  6533                           postdec2	equ	0xFDD
  6534                           fsr2h	equ	0xFDA
  6535                           fsr2l	equ	0xFD9
  6536                           status	equ	0xFD8
  6537                           
  6538 ;; *************** function ___lwmod *****************
  6539 ;; Defined at:
  6540 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6541 ;; Parameters:    Size  Location     Type
  6542 ;;  dividend        2    7[BANK0 ] unsigned int 
  6543 ;;  divisor         2    9[BANK0 ] unsigned int 
  6544 ;; Auto vars:     Size  Location     Type
  6545 ;;  counter         1   11[BANK0 ] unsigned char 
  6546 ;; Return value:  Size  Location     Type
  6547 ;;                  2    7[BANK0 ] unsigned int 
  6548 ;; Registers used:
  6549 ;;		wreg, status,2, status,0
  6550 ;; Tracked objects:
  6551 ;;		On entry : 0/0
  6552 ;;		On exit  : 0/0
  6553 ;;		Unchanged: 0/0
  6554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6555 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6556 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6558 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6559 ;;Total ram usage:        5 bytes
  6560 ;; Hardware stack levels used:    1
  6561 ;; Hardware stack levels required when called:    5
  6562 ;; This function calls:
  6563 ;;		Nothing
  6564 ;; This function is called by:
  6565 ;;		__doprnt
  6566 ;; This function uses a non-reentrant model
  6567 ;;
  6568                           
  6569                           	psect	text12
  6570  0037F6                     __ptext12:
  6571                           	opt stack 0
  6572  0037F6                     ___lwmod:
  6573                           	opt stack 22
  6574                           
  6575                           ; BSR set to: 0
  6576                           ;incstack = 0
  6577  0037F6  0100               	movlb	0	; () banked
  6578  0037F8  5189               	movf	___lwmod@divisor& (0+255),w,b
  6579  0037FA  0100               	movlb	0	; () banked
  6580  0037FC  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6581  0037FE  B4D8               	btfsc	status,2,c
  6582  003800  D026               	goto	l1015
  6583                           
  6584                           ; BSR set to: 0
  6585  003802  0E01               	movlw	1
  6586  003804  0100               	movlb	0	; () banked
  6587  003806  6F8B               	movwf	___lwmod@counter& (0+255),b
  6588  003808  D006               	goto	l4552
  6589  00380A                     l4550:
  6590                           
  6591                           ; BSR set to: 0
  6592  00380A  0100               	movlb	0	; () banked
  6593  00380C  90D8               	bcf	status,0,c
  6594  00380E  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  6595  003810  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6596  003812  0100               	movlb	0	; () banked
  6597  003814  2B8B               	incf	___lwmod@counter& (0+255),f,b
  6598  003816                     l4552:
  6599                           
  6600                           ; BSR set to: 0
  6601  003816  0100               	movlb	0	; () banked
  6602  003818  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6603  00381A  D7F7               	goto	l4550
  6604  00381C                     l4554:
  6605                           
  6606                           ; BSR set to: 0
  6607  00381C  0100               	movlb	0	; () banked
  6608  00381E  5189               	movf	___lwmod@divisor& (0+255),w,b
  6609  003820  0100               	movlb	0	; () banked
  6610  003822  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  6611  003824  0100               	movlb	0	; () banked
  6612  003826  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6613  003828  0100               	movlb	0	; () banked
  6614  00382A  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6615  00382C  A0D8               	btfss	status,0,c
  6616  00382E  D008               	goto	l4558
  6617                           
  6618                           ; BSR set to: 0
  6619  003830  0100               	movlb	0	; () banked
  6620  003832  5189               	movf	___lwmod@divisor& (0+255),w,b
  6621  003834  0100               	movlb	0	; () banked
  6622  003836  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  6623  003838  0100               	movlb	0	; () banked
  6624  00383A  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6625  00383C  0100               	movlb	0	; () banked
  6626  00383E  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6627  003840                     l4558:
  6628                           
  6629                           ; BSR set to: 0
  6630  003840  0100               	movlb	0	; () banked
  6631  003842  90D8               	bcf	status,0,c
  6632  003844  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6633  003846  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  6634                           
  6635                           ; BSR set to: 0
  6636  003848  0100               	movlb	0	; () banked
  6637  00384A  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  6638  00384C  D7E7               	goto	l4554
  6639  00384E                     l1015:
  6640                           
  6641                           ; BSR set to: 0
  6642  00384E  C087  F087         	movff	___lwmod@dividend,?___lwmod
  6643  003852  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  6644                           
  6645                           ; BSR set to: 0
  6646  003856  0012               	return		;funcret
  6647  003858                     __end_of___lwmod:
  6648                           	opt stack 0
  6649                           tosu	equ	0xFFF
  6650                           tosh	equ	0xFFE
  6651                           tosl	equ	0xFFD
  6652                           pclath	equ	0xFFA
  6653                           tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodh	equ	0xFF4
  6658                           prodl	equ	0xFF3
  6659                           intcon	equ	0xFF2
  6660                           intcon2	equ	0xFF1
  6661                           intcon3	equ	0xFF0
  6662                           indf0	equ	0xFEF
  6663                           postinc0	equ	0xFEE
  6664                           fsr0h	equ	0xFEA
  6665                           fsr0l	equ	0xFE9
  6666                           wreg	equ	0xFE8
  6667                           indf1	equ	0xFE7
  6668                           postinc1	equ	0xFE6
  6669                           postdec1	equ	0xFE5
  6670                           fsr1h	equ	0xFE2
  6671                           fsr1l	equ	0xFE1
  6672                           indf2	equ	0xFDF
  6673                           postinc2	equ	0xFDE
  6674                           postdec2	equ	0xFDD
  6675                           fsr2h	equ	0xFDA
  6676                           fsr2l	equ	0xFD9
  6677                           status	equ	0xFD8
  6678                           
  6679 ;; *************** function ___lwdiv *****************
  6680 ;; Defined at:
  6681 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6682 ;; Parameters:    Size  Location     Type
  6683 ;;  dividend        2    0[BANK0 ] unsigned int 
  6684 ;;  divisor         2    2[BANK0 ] unsigned int 
  6685 ;; Auto vars:     Size  Location     Type
  6686 ;;  quotient        2    5[BANK0 ] unsigned int 
  6687 ;;  counter         1    4[BANK0 ] unsigned char 
  6688 ;; Return value:  Size  Location     Type
  6689 ;;                  2    0[BANK0 ] unsigned int 
  6690 ;; Registers used:
  6691 ;;		wreg, status,2, status,0
  6692 ;; Tracked objects:
  6693 ;;		On entry : 0/0
  6694 ;;		On exit  : 0/0
  6695 ;;		Unchanged: 0/0
  6696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6697 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6698 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6700 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6701 ;;Total ram usage:        7 bytes
  6702 ;; Hardware stack levels used:    1
  6703 ;; Hardware stack levels required when called:    5
  6704 ;; This function calls:
  6705 ;;		Nothing
  6706 ;; This function is called by:
  6707 ;;		__doprnt
  6708 ;; This function uses a non-reentrant model
  6709 ;;
  6710                           
  6711                           	psect	text13
  6712  0036A6                     __ptext13:
  6713                           	opt stack 0
  6714  0036A6                     ___lwdiv:
  6715                           	opt stack 22
  6716                           
  6717                           ; BSR set to: 0
  6718                           ;incstack = 0
  6719  0036A6  0E00               	movlw	0
  6720  0036A8  0100               	movlb	0	; () banked
  6721  0036AA  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6722  0036AC  0E00               	movlw	0
  6723  0036AE  6F85               	movwf	___lwdiv@quotient& (0+255),b
  6724                           
  6725                           ; BSR set to: 0
  6726  0036B0  0100               	movlb	0	; () banked
  6727  0036B2  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6728  0036B4  0100               	movlb	0	; () banked
  6729  0036B6  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6730  0036B8  B4D8               	btfsc	status,2,c
  6731  0036BA  D02C               	goto	l1005
  6732                           
  6733                           ; BSR set to: 0
  6734  0036BC  0E01               	movlw	1
  6735  0036BE  0100               	movlb	0	; () banked
  6736  0036C0  6F84               	movwf	___lwdiv@counter& (0+255),b
  6737  0036C2  D006               	goto	l4532
  6738  0036C4                     l4530:
  6739                           
  6740                           ; BSR set to: 0
  6741  0036C4  0100               	movlb	0	; () banked
  6742  0036C6  90D8               	bcf	status,0,c
  6743  0036C8  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  6744  0036CA  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6745  0036CC  0100               	movlb	0	; () banked
  6746  0036CE  2B84               	incf	___lwdiv@counter& (0+255),f,b
  6747  0036D0                     l4532:
  6748                           
  6749                           ; BSR set to: 0
  6750  0036D0  0100               	movlb	0	; () banked
  6751  0036D2  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6752  0036D4  D7F7               	goto	l4530
  6753  0036D6                     l4534:
  6754                           
  6755                           ; BSR set to: 0
  6756  0036D6  0100               	movlb	0	; () banked
  6757  0036D8  90D8               	bcf	status,0,c
  6758  0036DA  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  6759  0036DC  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6760                           
  6761                           ; BSR set to: 0
  6762  0036DE  0100               	movlb	0	; () banked
  6763  0036E0  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6764  0036E2  0100               	movlb	0	; () banked
  6765  0036E4  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  6766  0036E6  0100               	movlb	0	; () banked
  6767  0036E8  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6768  0036EA  0100               	movlb	0	; () banked
  6769  0036EC  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6770  0036EE  A0D8               	btfss	status,0,c
  6771  0036F0  D00A               	goto	l4542
  6772                           
  6773                           ; BSR set to: 0
  6774  0036F2  0100               	movlb	0	; () banked
  6775  0036F4  5182               	movf	___lwdiv@divisor& (0+255),w,b
  6776  0036F6  0100               	movlb	0	; () banked
  6777  0036F8  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  6778  0036FA  0100               	movlb	0	; () banked
  6779  0036FC  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6780  0036FE  0100               	movlb	0	; () banked
  6781  003700  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6782                           
  6783                           ; BSR set to: 0
  6784  003702  0100               	movlb	0	; () banked
  6785  003704  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  6786  003706                     l4542:
  6787                           
  6788                           ; BSR set to: 0
  6789  003706  0100               	movlb	0	; () banked
  6790  003708  90D8               	bcf	status,0,c
  6791  00370A  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6792  00370C  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  6793                           
  6794                           ; BSR set to: 0
  6795  00370E  0100               	movlb	0	; () banked
  6796  003710  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  6797  003712  D7E1               	goto	l4534
  6798  003714                     l1005:
  6799                           
  6800                           ; BSR set to: 0
  6801  003714  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  6802  003718  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6803                           
  6804                           ; BSR set to: 0
  6805  00371C  0012               	return		;funcret
  6806  00371E                     __end_of___lwdiv:
  6807                           	opt stack 0
  6808                           tosu	equ	0xFFF
  6809                           tosh	equ	0xFFE
  6810                           tosl	equ	0xFFD
  6811                           pclath	equ	0xFFA
  6812                           tblptru	equ	0xFF8
  6813                           tblptrh	equ	0xFF7
  6814                           tblptrl	equ	0xFF6
  6815                           tablat	equ	0xFF5
  6816                           prodh	equ	0xFF4
  6817                           prodl	equ	0xFF3
  6818                           intcon	equ	0xFF2
  6819                           intcon2	equ	0xFF1
  6820                           intcon3	equ	0xFF0
  6821                           indf0	equ	0xFEF
  6822                           postinc0	equ	0xFEE
  6823                           fsr0h	equ	0xFEA
  6824                           fsr0l	equ	0xFE9
  6825                           wreg	equ	0xFE8
  6826                           indf1	equ	0xFE7
  6827                           postinc1	equ	0xFE6
  6828                           postdec1	equ	0xFE5
  6829                           fsr1h	equ	0xFE2
  6830                           fsr1l	equ	0xFE1
  6831                           indf2	equ	0xFDF
  6832                           postinc2	equ	0xFDE
  6833                           postdec2	equ	0xFDD
  6834                           fsr2h	equ	0xFDA
  6835                           fsr2l	equ	0xFD9
  6836                           status	equ	0xFD8
  6837                           
  6838 ;; *************** function ___awdiv *****************
  6839 ;; Defined at:
  6840 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  6841 ;; Parameters:    Size  Location     Type
  6842 ;;  dividend        2    0[BANK0 ] int 
  6843 ;;  divisor         2    2[BANK0 ] int 
  6844 ;; Auto vars:     Size  Location     Type
  6845 ;;  quotient        2    6[BANK0 ] int 
  6846 ;;  sign            1    5[BANK0 ] unsigned char 
  6847 ;;  counter         1    4[BANK0 ] unsigned char 
  6848 ;; Return value:  Size  Location     Type
  6849 ;;                  2    0[BANK0 ] int 
  6850 ;; Registers used:
  6851 ;;		wreg, status,2, status,0
  6852 ;; Tracked objects:
  6853 ;;		On entry : 0/0
  6854 ;;		On exit  : 0/0
  6855 ;;		Unchanged: 0/0
  6856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6857 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6858 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6860 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6861 ;;Total ram usage:        8 bytes
  6862 ;; Hardware stack levels used:    1
  6863 ;; Hardware stack levels required when called:    5
  6864 ;; This function calls:
  6865 ;;		Nothing
  6866 ;; This function is called by:
  6867 ;;		_update_display
  6868 ;;		_update_state
  6869 ;; This function uses a non-reentrant model
  6870 ;;
  6871                           
  6872                           	psect	text14
  6873  00334A                     __ptext14:
  6874                           	opt stack 0
  6875  00334A                     ___awdiv:
  6876                           	opt stack 24
  6877                           
  6878                           ; BSR set to: 0
  6879                           ;incstack = 0
  6880  00334A  0E00               	movlw	0
  6881  00334C  0100               	movlb	0	; () banked
  6882  00334E  6F85               	movwf	___awdiv@sign& (0+255),b
  6883                           
  6884                           ; BSR set to: 0
  6885  003350  0100               	movlb	0	; () banked
  6886  003352  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6887  003354  D008               	goto	l5116
  6888                           
  6889                           ; BSR set to: 0
  6890  003356  0100               	movlb	0	; () banked
  6891  003358  6D82               	negf	___awdiv@divisor& (0+255),b
  6892  00335A  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6893  00335C  B0D8               	btfsc	status,0,c
  6894  00335E  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6895                           
  6896                           ; BSR set to: 0
  6897  003360  0E01               	movlw	1
  6898  003362  0100               	movlb	0	; () banked
  6899  003364  6F85               	movwf	___awdiv@sign& (0+255),b
  6900  003366                     l5116:
  6901                           
  6902                           ; BSR set to: 0
  6903  003366  0100               	movlb	0	; () banked
  6904  003368  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6905  00336A  D008               	goto	l5122
  6906                           
  6907                           ; BSR set to: 0
  6908  00336C  0100               	movlb	0	; () banked
  6909  00336E  6D80               	negf	___awdiv@dividend& (0+255),b
  6910  003370  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6911  003372  B0D8               	btfsc	status,0,c
  6912  003374  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6913                           
  6914                           ; BSR set to: 0
  6915  003376  0E01               	movlw	1
  6916  003378  0100               	movlb	0	; () banked
  6917  00337A  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  6918  00337C                     l5122:
  6919                           
  6920                           ; BSR set to: 0
  6921  00337C  0E00               	movlw	0
  6922  00337E  0100               	movlb	0	; () banked
  6923  003380  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  6924  003382  0E00               	movlw	0
  6925  003384  6F86               	movwf	___awdiv@quotient& (0+255),b
  6926                           
  6927                           ; BSR set to: 0
  6928  003386  0100               	movlb	0	; () banked
  6929  003388  5182               	movf	___awdiv@divisor& (0+255),w,b
  6930  00338A  0100               	movlb	0	; () banked
  6931  00338C  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6932  00338E  B4D8               	btfsc	status,2,c
  6933  003390  D02C               	goto	l5144
  6934                           
  6935                           ; BSR set to: 0
  6936  003392  0E01               	movlw	1
  6937  003394  0100               	movlb	0	; () banked
  6938  003396  6F84               	movwf	___awdiv@counter& (0+255),b
  6939  003398  D006               	goto	l5130
  6940  00339A                     l5128:
  6941                           
  6942                           ; BSR set to: 0
  6943  00339A  0100               	movlb	0	; () banked
  6944  00339C  90D8               	bcf	status,0,c
  6945  00339E  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  6946  0033A0  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6947  0033A2  0100               	movlb	0	; () banked
  6948  0033A4  2B84               	incf	___awdiv@counter& (0+255),f,b
  6949  0033A6                     l5130:
  6950                           
  6951                           ; BSR set to: 0
  6952  0033A6  0100               	movlb	0	; () banked
  6953  0033A8  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6954  0033AA  D7F7               	goto	l5128
  6955  0033AC                     l5132:
  6956                           
  6957                           ; BSR set to: 0
  6958  0033AC  0100               	movlb	0	; () banked
  6959  0033AE  90D8               	bcf	status,0,c
  6960  0033B0  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  6961  0033B2  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6962                           
  6963                           ; BSR set to: 0
  6964  0033B4  0100               	movlb	0	; () banked
  6965  0033B6  5182               	movf	___awdiv@divisor& (0+255),w,b
  6966  0033B8  0100               	movlb	0	; () banked
  6967  0033BA  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  6968  0033BC  0100               	movlb	0	; () banked
  6969  0033BE  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6970  0033C0  0100               	movlb	0	; () banked
  6971  0033C2  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6972  0033C4  A0D8               	btfss	status,0,c
  6973  0033C6  D00A               	goto	l5140
  6974                           
  6975                           ; BSR set to: 0
  6976  0033C8  0100               	movlb	0	; () banked
  6977  0033CA  5182               	movf	___awdiv@divisor& (0+255),w,b
  6978  0033CC  0100               	movlb	0	; () banked
  6979  0033CE  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  6980  0033D0  0100               	movlb	0	; () banked
  6981  0033D2  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6982  0033D4  0100               	movlb	0	; () banked
  6983  0033D6  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6984                           
  6985                           ; BSR set to: 0
  6986  0033D8  0100               	movlb	0	; () banked
  6987  0033DA  8186               	bsf	___awdiv@quotient& (0+255),0,b
  6988  0033DC                     l5140:
  6989                           
  6990                           ; BSR set to: 0
  6991  0033DC  0100               	movlb	0	; () banked
  6992  0033DE  90D8               	bcf	status,0,c
  6993  0033E0  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6994  0033E2  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  6995                           
  6996                           ; BSR set to: 0
  6997  0033E4  0100               	movlb	0	; () banked
  6998  0033E6  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  6999  0033E8  D7E1               	goto	l5132
  7000  0033EA                     l5144:
  7001                           
  7002                           ; BSR set to: 0
  7003  0033EA  0100               	movlb	0	; () banked
  7004  0033EC  5185               	movf	___awdiv@sign& (0+255),w,b
  7005  0033EE  0100               	movlb	0	; () banked
  7006  0033F0  B4D8               	btfsc	status,2,c
  7007  0033F2  D005               	goto	l5148
  7008                           
  7009                           ; BSR set to: 0
  7010  0033F4  0100               	movlb	0	; () banked
  7011  0033F6  6D86               	negf	___awdiv@quotient& (0+255),b
  7012  0033F8  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7013  0033FA  B0D8               	btfsc	status,0,c
  7014  0033FC  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7015  0033FE                     l5148:
  7016                           
  7017                           ; BSR set to: 0
  7018  0033FE  C086  F080         	movff	___awdiv@quotient,?___awdiv
  7019  003402  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  7020  003406  0012               	return	
  7021  003408                     __end_of___awdiv:
  7022                           	opt stack 0
  7023                           tosu	equ	0xFFF
  7024                           tosh	equ	0xFFE
  7025                           tosl	equ	0xFFD
  7026                           pclath	equ	0xFFA
  7027                           tblptru	equ	0xFF8
  7028                           tblptrh	equ	0xFF7
  7029                           tblptrl	equ	0xFF6
  7030                           tablat	equ	0xFF5
  7031                           prodh	equ	0xFF4
  7032                           prodl	equ	0xFF3
  7033                           intcon	equ	0xFF2
  7034                           intcon2	equ	0xFF1
  7035                           intcon3	equ	0xFF0
  7036                           indf0	equ	0xFEF
  7037                           postinc0	equ	0xFEE
  7038                           fsr0h	equ	0xFEA
  7039                           fsr0l	equ	0xFE9
  7040                           wreg	equ	0xFE8
  7041                           indf1	equ	0xFE7
  7042                           postinc1	equ	0xFE6
  7043                           postdec1	equ	0xFE5
  7044                           fsr1h	equ	0xFE2
  7045                           fsr1l	equ	0xFE1
  7046                           indf2	equ	0xFDF
  7047                           postinc2	equ	0xFDE
  7048                           postdec2	equ	0xFDD
  7049                           fsr2h	equ	0xFDA
  7050                           fsr2l	equ	0xFD9
  7051                           status	equ	0xFD8
  7052                           
  7053 ;; *************** function _update_RTC *****************
  7054 ;; Defined at:
  7055 ;;		line 182 in file "main.c"
  7056 ;; Parameters:    Size  Location     Type
  7057 ;;		None
  7058 ;; Auto vars:     Size  Location     Type
  7059 ;;  i               1   10[BANK0 ] unsigned char 
  7060 ;; Return value:  Size  Location     Type
  7061 ;;                  1    wreg      void 
  7062 ;; Registers used:
  7063 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7064 ;; Tracked objects:
  7065 ;;		On entry : 0/0
  7066 ;;		On exit  : 0/0
  7067 ;;		Unchanged: 0/0
  7068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7070 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7071 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7072 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7073 ;;Total ram usage:        5 bytes
  7074 ;; Hardware stack levels used:    1
  7075 ;; Hardware stack levels required when called:    7
  7076 ;; This function calls:
  7077 ;;		_I2C_Master_Read
  7078 ;;		_I2C_Master_Start
  7079 ;;		_I2C_Master_Stop
  7080 ;;		_I2C_Master_Write
  7081 ;;		___wmul
  7082 ;; This function is called by:
  7083 ;;		_main
  7084 ;; This function uses a non-reentrant model
  7085 ;;
  7086                           
  7087                           	psect	text15
  7088  0030E2                     __ptext15:
  7089                           	opt stack 0
  7090  0030E2                     _update_RTC:
  7091                           	opt stack 23
  7092                           
  7093                           ;main.c: 185: I2C_Master_Start();
  7094                           
  7095                           ; BSR set to: 0
  7096                           ;incstack = 0
  7097  0030E2  EC93  F01E         	call	_I2C_Master_Start	;wreg free
  7098                           
  7099                           ;main.c: 186: I2C_Master_Write(0b11010000);
  7100  0030E6  0E00               	movlw	0
  7101  0030E8  0100               	movlb	0	; () banked
  7102  0030EA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7103  0030EC  0ED0               	movlw	208
  7104  0030EE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7105  0030F0  EC8A  F01E         	call	_I2C_Master_Write	;wreg free
  7106                           
  7107                           ;main.c: 187: I2C_Master_Write(0x00);
  7108  0030F4  0E00               	movlw	0
  7109  0030F6  0100               	movlb	0	; () banked
  7110  0030F8  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7111  0030FA  0E00               	movlw	0
  7112  0030FC  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7113  0030FE  EC8A  F01E         	call	_I2C_Master_Write	;wreg free
  7114                           
  7115                           ;main.c: 188: I2C_Master_Stop();
  7116  003102  EC8F  F01E         	call	_I2C_Master_Stop	;wreg free
  7117                           
  7118                           ;main.c: 191: I2C_Master_Start();
  7119  003106  EC93  F01E         	call	_I2C_Master_Start	;wreg free
  7120                           
  7121                           ;main.c: 192: I2C_Master_Write(0b11010001);
  7122  00310A  0E00               	movlw	0
  7123  00310C  0100               	movlb	0	; () banked
  7124  00310E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7125  003110  0ED1               	movlw	209
  7126  003112  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7127  003114  EC8A  F01E         	call	_I2C_Master_Write	;wreg free
  7128                           
  7129                           ;main.c: 193: for(unsigned char i=0;i<0x06;i++){
  7130  003118  0E00               	movlw	0
  7131  00311A  0100               	movlb	0	; () banked
  7132  00311C  6F8A               	movwf	update_RTC@i& (0+255),b
  7133  00311E                     l5430:
  7134                           
  7135                           ; BSR set to: 0
  7136  00311E  0E05               	movlw	5
  7137  003120  0100               	movlb	0	; () banked
  7138  003122  658A               	cpfsgt	update_RTC@i& (0+255),b
  7139  003124  D001               	goto	l5434
  7140  003126  D047               	goto	l5442
  7141  003128                     l5434:
  7142                           
  7143                           ; BSR set to: 0
  7144                           ;main.c: 194: time[i] = I2C_Master_Read(1);
  7145  003128  0100               	movlb	0	; () banked
  7146  00312A  518A               	movf	update_RTC@i& (0+255),w,b
  7147  00312C  0D01               	mullw	1
  7148  00312E  0E6A               	movlw	low _time
  7149  003130  24F3               	addwf	prodl,w,c
  7150  003132  6ED9               	movwf	fsr2l,c
  7151  003134  0E00               	movlw	high _time
  7152  003136  20F4               	addwfc	prodh,w,c
  7153  003138  6EDA               	movwf	fsr2h,c
  7154  00313A  0E01               	movlw	1
  7155  00313C  ECEF  F01D         	call	_I2C_Master_Read
  7156  003140  6EDF               	movwf	indf2,c
  7157                           
  7158                           ;main.c: 195: time_i[i]=(time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7159  003142  0100               	movlb	0	; () banked
  7160  003144  518A               	movf	update_RTC@i& (0+255),w,b
  7161  003146  0D01               	mullw	1
  7162  003148  0E6A               	movlw	low _time
  7163  00314A  24F3               	addwf	prodl,w,c
  7164  00314C  6ED9               	movwf	fsr2l,c
  7165  00314E  0E00               	movlw	high _time
  7166  003150  20F4               	addwfc	prodh,w,c
  7167  003152  6EDA               	movwf	fsr2h,c
  7168  003154  50DF               	movf	indf2,w,c
  7169  003156  0B0F               	andlw	15
  7170  003158  0100               	movlb	0	; () banked
  7171  00315A  6F86               	movwf	??_update_RTC& (0+255),b
  7172  00315C  6B87               	clrf	(??_update_RTC+1)& (0+255),b
  7173  00315E  0100               	movlb	0	; () banked
  7174  003160  518A               	movf	update_RTC@i& (0+255),w,b
  7175  003162  0D01               	mullw	1
  7176  003164  0E6A               	movlw	low _time
  7177  003166  24F3               	addwf	prodl,w,c
  7178  003168  6ED9               	movwf	fsr2l,c
  7179  00316A  0E00               	movlw	high _time
  7180  00316C  20F4               	addwfc	prodh,w,c
  7181  00316E  6EDA               	movwf	fsr2h,c
  7182  003170  50DF               	movf	indf2,w,c
  7183  003172  0100               	movlb	0	; () banked
  7184  003174  6F88               	movwf	(??_update_RTC+2)& (0+255),b
  7185  003176  0100               	movlb	0	; () banked
  7186  003178  3B88               	swapf	(??_update_RTC+2)& (0+255),f,b
  7187  00317A  0E0F               	movlw	15
  7188  00317C  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  7189  00317E  0E0F               	movlw	15
  7190  003180  0100               	movlb	0	; () banked
  7191  003182  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  7192  003184  0100               	movlb	0	; () banked
  7193  003186  5188               	movf	(??_update_RTC+2)& (0+255),w,b
  7194  003188  0D0A               	mullw	10
  7195  00318A  50F3               	movf	prodl,w,c
  7196  00318C  0100               	movlb	0	; () banked
  7197  00318E  2786               	addwf	??_update_RTC& (0+255),f,b
  7198  003190  50F4               	movf	prodh,w,c
  7199  003192  0100               	movlb	0	; () banked
  7200  003194  2387               	addwfc	(??_update_RTC+1)& (0+255),f,b
  7201  003196  0100               	movlb	0	; () banked
  7202  003198  518A               	movf	update_RTC@i& (0+255),w,b
  7203  00319A  0D02               	mullw	2
  7204  00319C  0E3E               	movlw	low _time_i
  7205  00319E  24F3               	addwf	prodl,w,c
  7206  0031A0  6ED9               	movwf	fsr2l,c
  7207  0031A2  0E00               	movlw	high _time_i
  7208  0031A4  20F4               	addwfc	prodh,w,c
  7209  0031A6  6EDA               	movwf	fsr2h,c
  7210  0031A8  C086  FFDE         	movff	??_update_RTC,postinc2
  7211  0031AC  C087  FFDD         	movff	??_update_RTC+1,postdec2
  7212                           
  7213                           ; BSR set to: 0
  7214  0031B0  0100               	movlb	0	; () banked
  7215  0031B2  2B8A               	incf	update_RTC@i& (0+255),f,b
  7216  0031B4  D7B4               	goto	l5430
  7217  0031B6                     l5442:
  7218                           
  7219                           ; BSR set to: 0
  7220                           ;main.c: 196: }
  7221                           ;main.c: 197: timeDiff=time_i[1]*60-startTime[1]*60+time_i[0]-startTime[0];
  7222  0031B6  C10E  F086         	movff	_startTime,??_update_RTC
  7223  0031BA  C10F  F087         	movff	_startTime+1,??_update_RTC+1
  7224  0031BE  0100               	movlb	0	; () banked
  7225  0031C0  1F86               	comf	??_update_RTC& (0+255),f,b
  7226  0031C2  1F87               	comf	(??_update_RTC+1)& (0+255),f,b
  7227  0031C4  4B86               	infsnz	??_update_RTC& (0+255),f,b
  7228  0031C6  2B87               	incf	(??_update_RTC+1)& (0+255),f,b
  7229  0031C8  C040  F080         	movff	_time_i+2,___wmul@multiplier
  7230  0031CC  C041  F081         	movff	_time_i+3,___wmul@multiplier+1
  7231  0031D0  0E00               	movlw	0
  7232  0031D2  0100               	movlb	0	; () banked
  7233  0031D4  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7234  0031D6  0E3C               	movlw	60
  7235  0031D8  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7236  0031DA  ECA0  F01D         	call	___wmul	;wreg free
  7237  0031DE  C080  F088         	movff	?___wmul,??_update_RTC+2
  7238  0031E2  C081  F089         	movff	?___wmul+1,??_update_RTC+3
  7239  0031E6  C110  F080         	movff	_startTime+2,___wmul@multiplier
  7240  0031EA  C111  F081         	movff	_startTime+3,___wmul@multiplier+1
  7241  0031EE  0E00               	movlw	0
  7242  0031F0  0100               	movlb	0	; () banked
  7243  0031F2  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7244  0031F4  0E3C               	movlw	60
  7245  0031F6  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7246  0031F8  ECA0  F01D         	call	___wmul	;wreg free
  7247  0031FC  0100               	movlb	0	; () banked
  7248  0031FE  1F80               	comf	?___wmul& (0+255),f,b
  7249  003200  0100               	movlb	0	; () banked
  7250  003202  1F81               	comf	(?___wmul+1)& (0+255),f,b
  7251  003204  0100               	movlb	0	; () banked
  7252  003206  4B80               	infsnz	?___wmul& (0+255),f,b
  7253  003208  2B81               	incf	(?___wmul+1)& (0+255),f,b
  7254  00320A  0100               	movlb	0	; () banked
  7255  00320C  5180               	movf	?___wmul& (0+255),w,b
  7256  00320E  0100               	movlb	0	; () banked
  7257  003210  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  7258  003212  0100               	movlb	0	; () banked
  7259  003214  5181               	movf	(?___wmul+1)& (0+255),w,b
  7260  003216  0100               	movlb	0	; () banked
  7261  003218  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  7262  00321A  0100               	movlb	0	; () banked
  7263  00321C  5186               	movf	??_update_RTC& (0+255),w,b
  7264  00321E  0100               	movlb	0	; () banked
  7265  003220  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  7266  003222  0100               	movlb	0	; () banked
  7267  003224  5187               	movf	(??_update_RTC+1)& (0+255),w,b
  7268  003226  0100               	movlb	0	; () banked
  7269  003228  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  7270  00322A  503E               	movf	_time_i,w,c
  7271  00322C  0100               	movlb	0	; () banked
  7272  00322E  2588               	addwf	(??_update_RTC+2)& (0+255),w,b
  7273  003230  0100               	movlb	0	; () banked
  7274  003232  6FD4               	movwf	_timeDiff& (0+255),b
  7275  003234  503F               	movf	_time_i+1,w,c
  7276  003236  0100               	movlb	0	; () banked
  7277  003238  2189               	addwfc	(??_update_RTC+3)& (0+255),w,b
  7278  00323A  0100               	movlb	0	; () banked
  7279  00323C  6FD5               	movwf	(_timeDiff+1)& (0+255),b
  7280                           
  7281                           ; BSR set to: 0
  7282                           ;main.c: 198: time[6] = I2C_Master_Read(0);
  7283  00323E  0E00               	movlw	0
  7284  003240  ECEF  F01D         	call	_I2C_Master_Read
  7285  003244  6E70               	movwf	_time+6,c
  7286                           
  7287                           ;main.c: 199: I2C_Master_Stop();
  7288  003246  EC8F  F01E         	call	_I2C_Master_Stop	;wreg free
  7289  00324A  0012               	return		;funcret
  7290  00324C                     __end_of_update_RTC:
  7291                           	opt stack 0
  7292                           tosu	equ	0xFFF
  7293                           tosh	equ	0xFFE
  7294                           tosl	equ	0xFFD
  7295                           pclath	equ	0xFFA
  7296                           tblptru	equ	0xFF8
  7297                           tblptrh	equ	0xFF7
  7298                           tblptrl	equ	0xFF6
  7299                           tablat	equ	0xFF5
  7300                           prodh	equ	0xFF4
  7301                           prodl	equ	0xFF3
  7302                           intcon	equ	0xFF2
  7303                           intcon2	equ	0xFF1
  7304                           intcon3	equ	0xFF0
  7305                           indf0	equ	0xFEF
  7306                           postinc0	equ	0xFEE
  7307                           fsr0h	equ	0xFEA
  7308                           fsr0l	equ	0xFE9
  7309                           wreg	equ	0xFE8
  7310                           indf1	equ	0xFE7
  7311                           postinc1	equ	0xFE6
  7312                           postdec1	equ	0xFE5
  7313                           fsr1h	equ	0xFE2
  7314                           fsr1l	equ	0xFE1
  7315                           indf2	equ	0xFDF
  7316                           postinc2	equ	0xFDE
  7317                           postdec2	equ	0xFDD
  7318                           fsr2h	equ	0xFDA
  7319                           fsr2l	equ	0xFD9
  7320                           status	equ	0xFD8
  7321                           
  7322 ;; *************** function _I2C_Master_Read *****************
  7323 ;; Defined at:
  7324 ;;		line 53 in file "I2C.c"
  7325 ;; Parameters:    Size  Location     Type
  7326 ;;  a               1    wreg     unsigned char 
  7327 ;; Auto vars:     Size  Location     Type
  7328 ;;  a               1    1[BANK0 ] unsigned char 
  7329 ;;  temp            1    2[BANK0 ] unsigned char 
  7330 ;; Return value:  Size  Location     Type
  7331 ;;                  1    wreg      unsigned char 
  7332 ;; Registers used:
  7333 ;;		wreg, status,2, status,0, cstack
  7334 ;; Tracked objects:
  7335 ;;		On entry : 0/0
  7336 ;;		On exit  : 0/0
  7337 ;;		Unchanged: 0/0
  7338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7340 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7342 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7343 ;;Total ram usage:        2 bytes
  7344 ;; Hardware stack levels used:    1
  7345 ;; Hardware stack levels required when called:    6
  7346 ;; This function calls:
  7347 ;;		_I2C_Master_Wait
  7348 ;; This function is called by:
  7349 ;;		_update_RTC
  7350 ;; This function uses a non-reentrant model
  7351 ;;
  7352                           
  7353                           	psect	text16
  7354  003BDE                     __ptext16:
  7355                           	opt stack 0
  7356  003BDE                     _I2C_Master_Read:
  7357                           	opt stack 23
  7358                           
  7359                           ;incstack = 0
  7360                           ;I2C_Master_Read@a stored from wreg
  7361  003BDE  0100               	movlb	0	; () banked
  7362  003BE0  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7363                           
  7364                           ;I2C.c: 55: unsigned char temp;
  7365                           ;I2C.c: 56: I2C_Master_Wait();
  7366  003BE2  EC6C  F01E         	call	_I2C_Master_Wait	;wreg free
  7367                           
  7368                           ;I2C.c: 57: RCEN = 1;
  7369  003BE6  86C5               	bsf	4037,3,c	;volatile
  7370                           
  7371                           ;I2C.c: 58: I2C_Master_Wait();
  7372  003BE8  EC6C  F01E         	call	_I2C_Master_Wait	;wreg free
  7373                           
  7374                           ;I2C.c: 59: temp = SSPBUF;
  7375  003BEC  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7376                           
  7377                           ;I2C.c: 60: I2C_Master_Wait();
  7378  003BF0  EC6C  F01E         	call	_I2C_Master_Wait	;wreg free
  7379                           
  7380                           ;I2C.c: 61: ACKDT = (a)?0:1;
  7381  003BF4  0100               	movlb	0	; () banked
  7382  003BF6  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7383  003BF8  0100               	movlb	0	; () banked
  7384  003BFA  A4D8               	btfss	status,2,c
  7385  003BFC  D002               	goto	u6790
  7386  003BFE  8AC5               	bsf	4037,5,c	;volatile
  7387  003C00  D001               	goto	l4844
  7388  003C02                     u6790:
  7389  003C02  9AC5               	bcf	4037,5,c	;volatile
  7390  003C04                     l4844:
  7391                           
  7392                           ;I2C.c: 62: ACKEN = 1;
  7393  003C04  88C5               	bsf	4037,4,c	;volatile
  7394                           
  7395                           ;I2C.c: 63: return temp;
  7396  003C06  0100               	movlb	0	; () banked
  7397  003C08  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7398  003C0A  0012               	return	
  7399  003C0C                     __end_of_I2C_Master_Read:
  7400                           	opt stack 0
  7401                           tosu	equ	0xFFF
  7402                           tosh	equ	0xFFE
  7403                           tosl	equ	0xFFD
  7404                           pclath	equ	0xFFA
  7405                           tblptru	equ	0xFF8
  7406                           tblptrh	equ	0xFF7
  7407                           tblptrl	equ	0xFF6
  7408                           tablat	equ	0xFF5
  7409                           prodh	equ	0xFF4
  7410                           prodl	equ	0xFF3
  7411                           intcon	equ	0xFF2
  7412                           intcon2	equ	0xFF1
  7413                           intcon3	equ	0xFF0
  7414                           indf0	equ	0xFEF
  7415                           postinc0	equ	0xFEE
  7416                           fsr0h	equ	0xFEA
  7417                           fsr0l	equ	0xFE9
  7418                           wreg	equ	0xFE8
  7419                           indf1	equ	0xFE7
  7420                           postinc1	equ	0xFE6
  7421                           postdec1	equ	0xFE5
  7422                           fsr1h	equ	0xFE2
  7423                           fsr1l	equ	0xFE1
  7424                           indf2	equ	0xFDF
  7425                           postinc2	equ	0xFDE
  7426                           postdec2	equ	0xFDD
  7427                           fsr2h	equ	0xFDA
  7428                           fsr2l	equ	0xFD9
  7429                           status	equ	0xFD8
  7430                           
  7431 ;; *************** function _sort *****************
  7432 ;; Defined at:
  7433 ;;		line 522 in file "main.c"
  7434 ;; Parameters:    Size  Location     Type
  7435 ;;		None
  7436 ;; Auto vars:     Size  Location     Type
  7437 ;;  i               2   24[BANK0 ] int 
  7438 ;; Return value:  Size  Location     Type
  7439 ;;                  1    wreg      void 
  7440 ;; Registers used:
  7441 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7442 ;; Tracked objects:
  7443 ;;		On entry : 0/0
  7444 ;;		On exit  : 0/0
  7445 ;;		Unchanged: 0/0
  7446 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7447 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7448 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7449 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7450 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7451 ;;Total ram usage:        6 bytes
  7452 ;; Hardware stack levels used:    1
  7453 ;; Hardware stack levels required when called:    7
  7454 ;; This function calls:
  7455 ;;		___awmod
  7456 ;;		___wmul
  7457 ;;		__measure
  7458 ;; This function is called by:
  7459 ;;		_main
  7460 ;; This function uses a non-reentrant model
  7461 ;;
  7462                           
  7463                           	psect	text17
  7464  002114                     __ptext17:
  7465                           	opt stack 0
  7466  002114                     _sort:
  7467                           	opt stack 23
  7468                           
  7469                           ;main.c: 524: if (discretize_counter>2000/40)
  7470                           
  7471                           ; BSR set to: 0
  7472                           ;incstack = 0
  7473  002114  0100               	movlb	0	; () banked
  7474  002116  BFC7               	btfsc	(_discretize_counter+1)& (0+255),7,b
  7475  002118  D00A               	goto	l5480
  7476  00211A  0100               	movlb	0	; () banked
  7477  00211C  51C7               	movf	(_discretize_counter+1)& (0+255),w,b
  7478  00211E  E105               	bnz	u8010
  7479  002120  0E33               	movlw	51
  7480  002122  0100               	movlb	0	; () banked
  7481  002124  5DC6               	subwf	_discretize_counter& (0+255),w,b
  7482  002126  A0D8               	btfss	status,0,c
  7483  002128  D002               	goto	l5480
  7484  00212A                     u8010:
  7485                           
  7486                           ; BSR set to: 0
  7487                           ;main.c: 525: LATA|=1<<3;
  7488  00212A  8689               	bsf	3977,3,c	;volatile
  7489  00212C  D01E               	goto	l5492
  7490  00212E                     l5480:
  7491                           
  7492                           ; BSR set to: 0
  7493                           ;main.c: 526: else if (discretize_counter>1000/40)
  7494  00212E  0100               	movlb	0	; () banked
  7495  002130  BFC7               	btfsc	(_discretize_counter+1)& (0+255),7,b
  7496  002132  D00A               	goto	l5484
  7497  002134  0100               	movlb	0	; () banked
  7498  002136  51C7               	movf	(_discretize_counter+1)& (0+255),w,b
  7499  002138  E105               	bnz	u8020
  7500  00213A  0E1A               	movlw	26
  7501  00213C  0100               	movlb	0	; () banked
  7502  00213E  5DC6               	subwf	_discretize_counter& (0+255),w,b
  7503  002140  A0D8               	btfss	status,0,c
  7504  002142  D002               	goto	l5484
  7505  002144                     u8020:
  7506                           
  7507                           ; BSR set to: 0
  7508                           ;main.c: 527: LATA&=~(1<<3);
  7509  002144  9689               	bcf	3977,3,c	;volatile
  7510  002146  D011               	goto	l5492
  7511  002148                     l5484:
  7512                           
  7513                           ; BSR set to: 0
  7514                           ;main.c: 528: else if (discretize_counter>0){
  7515  002148  0100               	movlb	0	; () banked
  7516  00214A  BFC7               	btfsc	(_discretize_counter+1)& (0+255),7,b
  7517  00214C  D00E               	goto	l5492
  7518  00214E  0100               	movlb	0	; () banked
  7519  002150  51C7               	movf	(_discretize_counter+1)& (0+255),w,b
  7520  002152  E104               	bnz	u8030
  7521  002154  0100               	movlb	0	; () banked
  7522  002156  05C6               	decf	_discretize_counter& (0+255),w,b
  7523  002158  A0D8               	btfss	status,0,c
  7524  00215A  D007               	goto	l5492
  7525  00215C                     u8030:
  7526                           
  7527                           ; BSR set to: 0
  7528                           ;main.c: 529: LATA|=1<<4;
  7529  00215C  8889               	bsf	3977,4,c	;volatile
  7530                           
  7531                           ; BSR set to: 0
  7532                           ;main.c: 530: if (discretize_counter==1)
  7533  00215E  0100               	movlb	0	; () banked
  7534  002160  05C6               	decf	_discretize_counter& (0+255),w,b
  7535  002162  0100               	movlb	0	; () banked
  7536  002164  11C7               	iorwf	(_discretize_counter+1)& (0+255),w,b
  7537  002166  B4D8               	btfsc	status,2,c
  7538                           
  7539                           ; BSR set to: 0
  7540                           ;main.c: 531: LATA&=~(1<<4);
  7541  002168  9889               	bcf	3977,4,c	;volatile
  7542  00216A                     l5492:
  7543                           
  7544                           ; BSR set to: 0
  7545                           ;main.c: 532: }
  7546                           ;main.c: 537: if ((PROX1[0]+PROX2[0])&&measure_counter==0&&release_counter<=1000/40){
  7547  00216A  5060               	movf	_PROX2,w,c
  7548  00216C  0100               	movlb	0	; () banked
  7549  00216E  25BA               	addwf	_PROX1& (0+255),w,b
  7550  002170  0100               	movlb	0	; () banked
  7551  002172  6F94               	movwf	??_sort& (0+255),b
  7552  002174  5061               	movf	_PROX2+1,w,c
  7553  002176  0100               	movlb	0	; () banked
  7554  002178  21BB               	addwfc	(_PROX1+1)& (0+255),w,b
  7555  00217A  0100               	movlb	0	; () banked
  7556  00217C  6F95               	movwf	(??_sort+1)& (0+255),b
  7557  00217E  0100               	movlb	0	; () banked
  7558  002180  5194               	movf	??_sort& (0+255),w,b
  7559  002182  0100               	movlb	0	; () banked
  7560  002184  1195               	iorwf	(??_sort+1)& (0+255),w,b
  7561  002186  B4D8               	btfsc	status,2,c
  7562  002188  D043               	goto	l5512
  7563                           
  7564                           ; BSR set to: 0
  7565  00218A  0100               	movlb	0	; () banked
  7566  00218C  51CC               	movf	_measure_counter& (0+255),w,b
  7567  00218E  0100               	movlb	0	; () banked
  7568  002190  11CD               	iorwf	(_measure_counter+1)& (0+255),w,b
  7569  002192  A4D8               	btfss	status,2,c
  7570  002194  D03D               	goto	l5512
  7571                           
  7572                           ; BSR set to: 0
  7573  002196  0100               	movlb	0	; () banked
  7574  002198  BFCF               	btfsc	(_release_counter+1)& (0+255),7,b
  7575  00219A  D008               	goto	l5498
  7576  00219C  0100               	movlb	0	; () banked
  7577  00219E  51CF               	movf	(_release_counter+1)& (0+255),w,b
  7578  0021A0  E137               	bnz	l5512
  7579  0021A2  0E1A               	movlw	26
  7580  0021A4  0100               	movlb	0	; () banked
  7581  0021A6  5DCE               	subwf	_release_counter& (0+255),w,b
  7582  0021A8  B0D8               	btfsc	status,0,c
  7583  0021AA  D032               	goto	l5512
  7584  0021AC                     l5498:
  7585                           
  7586                           ; BSR set to: 0
  7587                           ;main.c: 538: measure_counter=measure;
  7588  0021AC  C079  F0CC         	movff	_measure,_measure_counter
  7589  0021B0  C07A  F0CD         	movff	_measure+1,_measure_counter+1
  7590                           
  7591                           ; BSR set to: 0
  7592                           ;main.c: 539: int i;
  7593                           ;main.c: 540: for (i=0;i<7;i++)
  7594  0021B4  0E00               	movlw	0
  7595  0021B6  0100               	movlb	0	; () banked
  7596  0021B8  6F99               	movwf	(sort@i+1)& (0+255),b
  7597  0021BA  0E00               	movlw	0
  7598  0021BC  6F98               	movwf	sort@i& (0+255),b
  7599  0021BE                     l5502:
  7600                           
  7601                           ; BSR set to: 0
  7602  0021BE  0100               	movlb	0	; () banked
  7603  0021C0  BF99               	btfsc	(sort@i+1)& (0+255),7,b
  7604  0021C2  D008               	goto	l5506
  7605  0021C4  0100               	movlb	0	; () banked
  7606  0021C6  5199               	movf	(sort@i+1)& (0+255),w,b
  7607  0021C8  E123               	bnz	l5512
  7608  0021CA  0E07               	movlw	7
  7609  0021CC  0100               	movlb	0	; () banked
  7610  0021CE  5D98               	subwf	sort@i& (0+255),w,b
  7611  0021D0  B0D8               	btfsc	status,0,c
  7612  0021D2  D01E               	goto	l5512
  7613  0021D4                     l5506:
  7614                           
  7615                           ; BSR set to: 0
  7616                           ;main.c: 541: latestSortedBottleTime[i]=time_i[i];
  7617  0021D4  90D8               	bcf	status,0,c
  7618  0021D6  0100               	movlb	0	; () banked
  7619  0021D8  3598               	rlcf	sort@i& (0+255),w,b
  7620  0021DA  6ED9               	movwf	fsr2l,c
  7621  0021DC  0100               	movlb	0	; () banked
  7622  0021DE  3599               	rlcf	(sort@i+1)& (0+255),w,b
  7623  0021E0  6EDA               	movwf	fsr2h,c
  7624  0021E2  0E3E               	movlw	low _time_i
  7625  0021E4  26D9               	addwf	fsr2l,f,c
  7626  0021E6  0E00               	movlw	high _time_i
  7627  0021E8  22DA               	addwfc	fsr2h,f,c
  7628  0021EA  90D8               	bcf	status,0,c
  7629  0021EC  0100               	movlb	0	; () banked
  7630  0021EE  3598               	rlcf	sort@i& (0+255),w,b
  7631  0021F0  6EE1               	movwf	fsr1l,c
  7632  0021F2  0100               	movlb	0	; () banked
  7633  0021F4  3599               	rlcf	(sort@i+1)& (0+255),w,b
  7634  0021F6  6EE2               	movwf	fsr1h,c
  7635  0021F8  0E00               	movlw	low _latestSortedBottleTime
  7636  0021FA  26E1               	addwf	fsr1l,f,c
  7637  0021FC  0E01               	movlw	high _latestSortedBottleTime
  7638  0021FE  22E2               	addwfc	fsr1h,f,c
  7639  002200  CFDE FFE6          	movff	postinc2,postinc1
  7640  002204  CFDD FFE5          	movff	postdec2,postdec1
  7641                           
  7642                           ; BSR set to: 0
  7643  002208  0100               	movlb	0	; () banked
  7644  00220A  4B98               	infsnz	sort@i& (0+255),f,b
  7645  00220C  2B99               	incf	(sort@i+1)& (0+255),f,b
  7646  00220E  D7D7               	goto	l5502
  7647  002210                     l5512:
  7648                           
  7649                           ; BSR set to: 0
  7650                           ;main.c: 542: }
  7651                           ;main.c: 543: if (measure_counter==1){
  7652  002210  0100               	movlb	0	; () banked
  7653  002212  05CC               	decf	_measure_counter& (0+255),w,b
  7654  002214  0100               	movlb	0	; () banked
  7655  002216  11CD               	iorwf	(_measure_counter+1)& (0+255),w,b
  7656  002218  A4D8               	btfss	status,2,c
  7657  00221A  D041               	goto	l5540
  7658                           
  7659                           ; BSR set to: 0
  7660                           ;main.c: 544: bottle_type=_measure();
  7661  00221C  EC6A  F00E         	call	__measure	;wreg free
  7662  002220  C086  F0C4         	movff	?__measure,_bottle_type
  7663  002224  C087  F0C5         	movff	?__measure+1,_bottle_type+1
  7664                           
  7665                           ;main.c: 546: if (bottle_type!=0&&release_counter==0){
  7666  002228  0100               	movlb	0	; () banked
  7667  00222A  51C4               	movf	_bottle_type& (0+255),w,b
  7668  00222C  0100               	movlb	0	; () banked
  7669  00222E  11C5               	iorwf	(_bottle_type+1)& (0+255),w,b
  7670  002230  B4D8               	btfsc	status,2,c
  7671  002232  D032               	goto	l5538
  7672                           
  7673                           ; BSR set to: 0
  7674  002234  0100               	movlb	0	; () banked
  7675  002236  51CE               	movf	_release_counter& (0+255),w,b
  7676  002238  0100               	movlb	0	; () banked
  7677  00223A  11CF               	iorwf	(_release_counter+1)& (0+255),w,b
  7678  00223C  A4D8               	btfss	status,2,c
  7679  00223E  D02C               	goto	l5538
  7680                           
  7681                           ; BSR set to: 0
  7682                           ;main.c: 547: release_counter=release;
  7683  002240  C0F8  F0CE         	movff	_release,_release_counter
  7684  002244  C0F9  F0CF         	movff	_release+1,_release_counter+1
  7685                           
  7686                           ; BSR set to: 0
  7687                           ;main.c: 548: if (bottle_type==1)
  7688  002248  0100               	movlb	0	; () banked
  7689  00224A  05C4               	decf	_bottle_type& (0+255),w,b
  7690  00224C  0100               	movlb	0	; () banked
  7691  00224E  11C5               	iorwf	(_bottle_type+1)& (0+255),w,b
  7692  002250  A4D8               	btfss	status,2,c
  7693  002252  D003               	goto	l5526
  7694                           
  7695                           ; BSR set to: 0
  7696                           ;main.c: 549: eskaNoCap++;
  7697  002254  0100               	movlb	0	; () banked
  7698  002256  4BC8               	infsnz	_eskaNoCap& (0+255),f,b
  7699  002258  2BC9               	incf	(_eskaNoCap+1)& (0+255),f,b
  7700  00225A                     l5526:
  7701                           
  7702                           ; BSR set to: 0
  7703                           ;main.c: 550: if (bottle_type==2)
  7704  00225A  0E02               	movlw	2
  7705  00225C  0100               	movlb	0	; () banked
  7706  00225E  19C4               	xorwf	_bottle_type& (0+255),w,b
  7707  002260  0100               	movlb	0	; () banked
  7708  002262  11C5               	iorwf	(_bottle_type+1)& (0+255),w,b
  7709  002264  A4D8               	btfss	status,2,c
  7710  002266  D003               	goto	l5530
  7711                           
  7712                           ; BSR set to: 0
  7713                           ;main.c: 551: eskaWCap++;
  7714  002268  0100               	movlb	0	; () banked
  7715  00226A  4BCA               	infsnz	_eskaWCap& (0+255),f,b
  7716  00226C  2BCB               	incf	(_eskaWCap+1)& (0+255),f,b
  7717  00226E                     l5530:
  7718                           
  7719                           ; BSR set to: 0
  7720                           ;main.c: 552: if (bottle_type==3)
  7721  00226E  0E03               	movlw	3
  7722  002270  0100               	movlb	0	; () banked
  7723  002272  19C4               	xorwf	_bottle_type& (0+255),w,b
  7724  002274  0100               	movlb	0	; () banked
  7725  002276  11C5               	iorwf	(_bottle_type+1)& (0+255),w,b
  7726  002278  A4D8               	btfss	status,2,c
  7727  00227A  D003               	goto	l5534
  7728                           
  7729                           ; BSR set to: 0
  7730                           ;main.c: 553: yopNoCap++;
  7731  00227C  0100               	movlb	0	; () banked
  7732  00227E  4BD6               	infsnz	_yopNoCap& (0+255),f,b
  7733  002280  2BD7               	incf	(_yopNoCap+1)& (0+255),f,b
  7734  002282                     l5534:
  7735                           
  7736                           ; BSR set to: 0
  7737                           ;main.c: 554: if (bottle_type==4)
  7738  002282  0E04               	movlw	4
  7739  002284  0100               	movlb	0	; () banked
  7740  002286  19C4               	xorwf	_bottle_type& (0+255),w,b
  7741  002288  0100               	movlb	0	; () banked
  7742  00228A  11C5               	iorwf	(_bottle_type+1)& (0+255),w,b
  7743  00228C  A4D8               	btfss	status,2,c
  7744  00228E  D007               	goto	l5540
  7745                           
  7746                           ; BSR set to: 0
  7747                           ;main.c: 555: yopWCap++;
  7748  002290  0100               	movlb	0	; () banked
  7749  002292  4BD8               	infsnz	_yopWCap& (0+255),f,b
  7750  002294  2BD9               	incf	(_yopWCap+1)& (0+255),f,b
  7751                           
  7752                           ; BSR set to: 0
  7753                           ;main.c: 556: }
  7754  002296  D003               	goto	l5540
  7755  002298                     l5538:
  7756                           
  7757                           ; BSR set to: 0
  7758                           ;main.c: 557: else
  7759                           ;main.c: 558: measure_counter+=1;
  7760  002298  0100               	movlb	0	; () banked
  7761  00229A  4BCC               	infsnz	_measure_counter& (0+255),f,b
  7762  00229C  2BCD               	incf	(_measure_counter+1)& (0+255),f,b
  7763  00229E                     l5540:
  7764                           
  7765                           ; BSR set to: 0
  7766                           ;main.c: 559: }
  7767                           ;main.c: 564: if (release_counter==1000/40)
  7768  00229E  0E19               	movlw	25
  7769  0022A0  0100               	movlb	0	; () banked
  7770  0022A2  19CE               	xorwf	_release_counter& (0+255),w,b
  7771  0022A4  0100               	movlb	0	; () banked
  7772  0022A6  11CF               	iorwf	(_release_counter+1)& (0+255),w,b
  7773  0022A8  A4D8               	btfss	status,2,c
  7774  0022AA  D005               	goto	l5544
  7775                           
  7776                           ; BSR set to: 0
  7777                           ;main.c: 565: discretize_counter=discretize;
  7778  0022AC  C0F6  F0C6         	movff	_discretize,_discretize_counter
  7779  0022B0  C0F7  F0C7         	movff	_discretize+1,_discretize_counter+1
  7780  0022B4  D0D1               	goto	l5574
  7781  0022B6                     l5544:
  7782                           
  7783                           ; BSR set to: 0
  7784                           ;main.c: 566: else if (release_counter>3500/40){
  7785  0022B6  0100               	movlb	0	; () banked
  7786  0022B8  BFCF               	btfsc	(_release_counter+1)& (0+255),7,b
  7787  0022BA  D029               	goto	l5548
  7788  0022BC  0100               	movlb	0	; () banked
  7789  0022BE  51CF               	movf	(_release_counter+1)& (0+255),w,b
  7790  0022C0  E105               	bnz	u8180
  7791  0022C2  0E58               	movlw	88
  7792  0022C4  0100               	movlb	0	; () banked
  7793  0022C6  5DCE               	subwf	_release_counter& (0+255),w,b
  7794  0022C8  A0D8               	btfss	status,0,c
  7795  0022CA  D021               	goto	l5548
  7796  0022CC                     u8180:
  7797                           
  7798                           ; BSR set to: 0
  7799                           ;main.c: 567: LATC|=1<<(bottle_type-1)%3;
  7800  0022CC  0EFF               	movlw	255
  7801  0022CE  0100               	movlb	0	; () banked
  7802  0022D0  25C4               	addwf	_bottle_type& (0+255),w,b
  7803  0022D2  0100               	movlb	0	; () banked
  7804  0022D4  6F80               	movwf	___awmod@dividend& (0+255),b
  7805  0022D6  0EFF               	movlw	255
  7806  0022D8  0100               	movlb	0	; () banked
  7807  0022DA  21C5               	addwfc	(_bottle_type+1)& (0+255),w,b
  7808  0022DC  0100               	movlb	0	; () banked
  7809  0022DE  6F81               	movwf	(___awmod@dividend+1)& (0+255),b
  7810  0022E0  0E00               	movlw	0
  7811  0022E2  0100               	movlb	0	; () banked
  7812  0022E4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7813  0022E6  0E03               	movlw	3
  7814  0022E8  6F82               	movwf	___awmod@divisor& (0+255),b
  7815  0022EA  ECB9  F01A         	call	___awmod	;wreg free
  7816  0022EE  0E01               	movlw	1
  7817  0022F0  0100               	movlb	0	; () banked
  7818  0022F2  6F94               	movwf	??_sort& (0+255),b
  7819  0022F4  0100               	movlb	0	; () banked
  7820  0022F6  2B80               	incf	?___awmod& (0+255),f,b
  7821  0022F8  D003               	goto	u8194
  7822  0022FA                     u8195:
  7823  0022FA  0100               	movlb	0	; () banked
  7824  0022FC  90D8               	bcf	status,0,c
  7825  0022FE  3794               	rlcf	??_sort& (0+255),f,b
  7826  002300                     u8194:
  7827  002300  0100               	movlb	0	; () banked
  7828  002302  2F80               	decfsz	?___awmod& (0+255),f,b
  7829  002304  D7FA               	goto	u8195
  7830  002306  0100               	movlb	0	; () banked
  7831  002308  5194               	movf	??_sort& (0+255),w,b
  7832  00230A  128B               	iorwf	3979,f,c	;volatile
  7833                           
  7834                           ;main.c: 568: }
  7835  00230C  D0A5               	goto	l5574
  7836  00230E                     l5548:
  7837                           
  7838                           ; BSR set to: 0
  7839                           ;main.c: 569: else if (release_counter>3000/40){
  7840  00230E  0100               	movlb	0	; () banked
  7841  002310  BFCF               	btfsc	(_release_counter+1)& (0+255),7,b
  7842  002312  D02B               	goto	l5554
  7843  002314  0100               	movlb	0	; () banked
  7844  002316  51CF               	movf	(_release_counter+1)& (0+255),w,b
  7845  002318  E105               	bnz	u8200
  7846  00231A  0E4C               	movlw	76
  7847  00231C  0100               	movlb	0	; () banked
  7848  00231E  5DCE               	subwf	_release_counter& (0+255),w,b
  7849  002320  A0D8               	btfss	status,0,c
  7850  002322  D023               	goto	l5554
  7851  002324                     u8200:
  7852                           
  7853                           ; BSR set to: 0
  7854                           ;main.c: 570: LATC&=~(1<<(bottle_type-1)%3);
  7855  002324  0EFF               	movlw	255
  7856  002326  0100               	movlb	0	; () banked
  7857  002328  25C4               	addwf	_bottle_type& (0+255),w,b
  7858  00232A  0100               	movlb	0	; () banked
  7859  00232C  6F80               	movwf	___awmod@dividend& (0+255),b
  7860  00232E  0EFF               	movlw	255
  7861  002330  0100               	movlb	0	; () banked
  7862  002332  21C5               	addwfc	(_bottle_type+1)& (0+255),w,b
  7863  002334  0100               	movlb	0	; () banked
  7864  002336  6F81               	movwf	(___awmod@dividend+1)& (0+255),b
  7865  002338  0E00               	movlw	0
  7866  00233A  0100               	movlb	0	; () banked
  7867  00233C  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7868  00233E  0E03               	movlw	3
  7869  002340  6F82               	movwf	___awmod@divisor& (0+255),b
  7870  002342  ECB9  F01A         	call	___awmod	;wreg free
  7871  002346  0E01               	movlw	1
  7872  002348  0100               	movlb	0	; () banked
  7873  00234A  6F94               	movwf	??_sort& (0+255),b
  7874  00234C  0100               	movlb	0	; () banked
  7875  00234E  2B80               	incf	?___awmod& (0+255),f,b
  7876  002350  D003               	goto	u8214
  7877  002352                     u8215:
  7878  002352  0100               	movlb	0	; () banked
  7879  002354  90D8               	bcf	status,0,c
  7880  002356  3794               	rlcf	??_sort& (0+255),f,b
  7881  002358                     u8214:
  7882  002358  0100               	movlb	0	; () banked
  7883  00235A  2F80               	decfsz	?___awmod& (0+255),f,b
  7884  00235C  D7FA               	goto	u8215
  7885  00235E  0100               	movlb	0	; () banked
  7886  002360  5194               	movf	??_sort& (0+255),w,b
  7887  002362  0AFF               	xorlw	255
  7888  002364  168B               	andwf	3979,f,c	;volatile
  7889                           
  7890                           ; BSR set to: 0
  7891                           ;main.c: 571: LATD|=0x01;
  7892  002366  808C               	bsf	3980,0,c	;volatile
  7893                           
  7894                           ;main.c: 572: }
  7895  002368  D077               	goto	l5574
  7896  00236A                     l5554:
  7897                           
  7898                           ; BSR set to: 0
  7899                           ;main.c: 573: else if (release_counter>2500/40){
  7900  00236A  0100               	movlb	0	; () banked
  7901  00236C  BFCF               	btfsc	(_release_counter+1)& (0+255),7,b
  7902  00236E  D00B               	goto	l5558
  7903  002370  0100               	movlb	0	; () banked
  7904  002372  51CF               	movf	(_release_counter+1)& (0+255),w,b
  7905  002374  E105               	bnz	u8220
  7906  002376  0E3F               	movlw	63
  7907  002378  0100               	movlb	0	; () banked
  7908  00237A  5DCE               	subwf	_release_counter& (0+255),w,b
  7909  00237C  A0D8               	btfss	status,0,c
  7910  00237E  D003               	goto	l5558
  7911  002380                     u8220:
  7912                           
  7913                           ; BSR set to: 0
  7914                           ;main.c: 574: LATD&=~(0x01);
  7915  002380  908C               	bcf	3980,0,c	;volatile
  7916                           
  7917                           ;main.c: 575: LATC|=0x20;
  7918  002382  8A8B               	bsf	3979,5,c	;volatile
  7919                           
  7920                           ;main.c: 576: }
  7921  002384  D069               	goto	l5574
  7922  002386                     l5558:
  7923                           
  7924                           ; BSR set to: 0
  7925                           ;main.c: 577: else if (release_counter>2000/40){
  7926  002386  0100               	movlb	0	; () banked
  7927  002388  BFCF               	btfsc	(_release_counter+1)& (0+255),7,b
  7928  00238A  D00A               	goto	l5562
  7929  00238C  0100               	movlb	0	; () banked
  7930  00238E  51CF               	movf	(_release_counter+1)& (0+255),w,b
  7931  002390  E105               	bnz	u8230
  7932  002392  0E33               	movlw	51
  7933  002394  0100               	movlb	0	; () banked
  7934  002396  5DCE               	subwf	_release_counter& (0+255),w,b
  7935  002398  A0D8               	btfss	status,0,c
  7936  00239A  D002               	goto	l5562
  7937  00239C                     u8230:
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;main.c: 578: LATC&=~(0x20);
  7941  00239C  9A8B               	bcf	3979,5,c	;volatile
  7942                           
  7943                           ;main.c: 579: }
  7944  00239E  D05C               	goto	l5574
  7945  0023A0                     l5562:
  7946                           
  7947                           ; BSR set to: 0
  7948                           ;main.c: 580: else if (release_counter>1000/40){
  7949  0023A0  0100               	movlb	0	; () banked
  7950  0023A2  BFCF               	btfsc	(_release_counter+1)& (0+255),7,b
  7951  0023A4  D008               	goto	l5566
  7952  0023A6  0100               	movlb	0	; () banked
  7953  0023A8  51CF               	movf	(_release_counter+1)& (0+255),w,b
  7954  0023AA  E156               	bnz	l5574
  7955  0023AC  0E1A               	movlw	26
  7956  0023AE  0100               	movlb	0	; () banked
  7957  0023B0  5DCE               	subwf	_release_counter& (0+255),w,b
  7958  0023B2  B0D8               	btfsc	status,0,c
  7959  0023B4  D051               	goto	l5574
  7960  0023B6                     l5566:
  7961                           
  7962                           ; BSR set to: 0
  7963                           ;main.c: 583: else if (release_counter>0){
  7964  0023B6  0100               	movlb	0	; () banked
  7965  0023B8  BFCF               	btfsc	(_release_counter+1)& (0+255),7,b
  7966  0023BA  D04E               	goto	l5574
  7967  0023BC  0100               	movlb	0	; () banked
  7968  0023BE  51CF               	movf	(_release_counter+1)& (0+255),w,b
  7969  0023C0  E104               	bnz	u8250
  7970  0023C2  0100               	movlb	0	; () banked
  7971  0023C4  05CE               	decf	_release_counter& (0+255),w,b
  7972  0023C6  A0D8               	btfss	status,0,c
  7973  0023C8  D047               	goto	l5574
  7974  0023CA                     u8250:
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;main.c: 584: LATE|=1<<(bottle_type-1)%3;
  7978  0023CA  0EFF               	movlw	255
  7979  0023CC  0100               	movlb	0	; () banked
  7980  0023CE  25C4               	addwf	_bottle_type& (0+255),w,b
  7981  0023D0  0100               	movlb	0	; () banked
  7982  0023D2  6F80               	movwf	___awmod@dividend& (0+255),b
  7983  0023D4  0EFF               	movlw	255
  7984  0023D6  0100               	movlb	0	; () banked
  7985  0023D8  21C5               	addwfc	(_bottle_type+1)& (0+255),w,b
  7986  0023DA  0100               	movlb	0	; () banked
  7987  0023DC  6F81               	movwf	(___awmod@dividend+1)& (0+255),b
  7988  0023DE  0E00               	movlw	0
  7989  0023E0  0100               	movlb	0	; () banked
  7990  0023E2  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  7991  0023E4  0E03               	movlw	3
  7992  0023E6  6F82               	movwf	___awmod@divisor& (0+255),b
  7993  0023E8  ECB9  F01A         	call	___awmod	;wreg free
  7994  0023EC  0E01               	movlw	1
  7995  0023EE  0100               	movlb	0	; () banked
  7996  0023F0  6F94               	movwf	??_sort& (0+255),b
  7997  0023F2  0100               	movlb	0	; () banked
  7998  0023F4  2B80               	incf	?___awmod& (0+255),f,b
  7999  0023F6  D003               	goto	u8264
  8000  0023F8                     u8265:
  8001  0023F8  0100               	movlb	0	; () banked
  8002  0023FA  90D8               	bcf	status,0,c
  8003  0023FC  3794               	rlcf	??_sort& (0+255),f,b
  8004  0023FE                     u8264:
  8005  0023FE  0100               	movlb	0	; () banked
  8006  002400  2F80               	decfsz	?___awmod& (0+255),f,b
  8007  002402  D7FA               	goto	u8265
  8008  002404  0100               	movlb	0	; () banked
  8009  002406  5194               	movf	??_sort& (0+255),w,b
  8010  002408  128D               	iorwf	3981,f,c	;volatile
  8011                           
  8012                           ; BSR set to: 0
  8013                           ;main.c: 585: if (release_counter==1)
  8014  00240A  0100               	movlb	0	; () banked
  8015  00240C  05CE               	decf	_release_counter& (0+255),w,b
  8016  00240E  0100               	movlb	0	; () banked
  8017  002410  11CF               	iorwf	(_release_counter+1)& (0+255),w,b
  8018  002412  A4D8               	btfss	status,2,c
  8019  002414  D021               	goto	l5574
  8020                           
  8021                           ; BSR set to: 0
  8022                           ;main.c: 586: LATE&=~(1<<(bottle_type-1)%3);
  8023  002416  0EFF               	movlw	255
  8024  002418  0100               	movlb	0	; () banked
  8025  00241A  25C4               	addwf	_bottle_type& (0+255),w,b
  8026  00241C  0100               	movlb	0	; () banked
  8027  00241E  6F80               	movwf	___awmod@dividend& (0+255),b
  8028  002420  0EFF               	movlw	255
  8029  002422  0100               	movlb	0	; () banked
  8030  002424  21C5               	addwfc	(_bottle_type+1)& (0+255),w,b
  8031  002426  0100               	movlb	0	; () banked
  8032  002428  6F81               	movwf	(___awmod@dividend+1)& (0+255),b
  8033  00242A  0E00               	movlw	0
  8034  00242C  0100               	movlb	0	; () banked
  8035  00242E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8036  002430  0E03               	movlw	3
  8037  002432  6F82               	movwf	___awmod@divisor& (0+255),b
  8038  002434  ECB9  F01A         	call	___awmod	;wreg free
  8039  002438  0E01               	movlw	1
  8040  00243A  0100               	movlb	0	; () banked
  8041  00243C  6F94               	movwf	??_sort& (0+255),b
  8042  00243E  0100               	movlb	0	; () banked
  8043  002440  2B80               	incf	?___awmod& (0+255),f,b
  8044  002442  D003               	goto	u8284
  8045  002444                     u8285:
  8046  002444  0100               	movlb	0	; () banked
  8047  002446  90D8               	bcf	status,0,c
  8048  002448  3794               	rlcf	??_sort& (0+255),f,b
  8049  00244A                     u8284:
  8050  00244A  0100               	movlb	0	; () banked
  8051  00244C  2F80               	decfsz	?___awmod& (0+255),f,b
  8052  00244E  D7FA               	goto	u8285
  8053  002450  0100               	movlb	0	; () banked
  8054  002452  5194               	movf	??_sort& (0+255),w,b
  8055  002454  0AFF               	xorlw	255
  8056  002456  168D               	andwf	3981,f,c	;volatile
  8057  002458                     l5574:
  8058                           
  8059                           ; BSR set to: 0
  8060                           ;main.c: 587: }
  8061                           ;main.c: 590: if (discretize_counter>0)
  8062  002458  0100               	movlb	0	; () banked
  8063  00245A  BFC7               	btfsc	(_discretize_counter+1)& (0+255),7,b
  8064  00245C  D00B               	goto	l5578
  8065  00245E  0100               	movlb	0	; () banked
  8066  002460  51C7               	movf	(_discretize_counter+1)& (0+255),w,b
  8067  002462  E104               	bnz	u8290
  8068  002464  0100               	movlb	0	; () banked
  8069  002466  05C6               	decf	_discretize_counter& (0+255),w,b
  8070  002468  A0D8               	btfss	status,0,c
  8071  00246A  D004               	goto	l5578
  8072  00246C                     u8290:
  8073                           
  8074                           ; BSR set to: 0
  8075                           ;main.c: 591: discretize_counter--;
  8076  00246C  0100               	movlb	0	; () banked
  8077  00246E  07C6               	decf	_discretize_counter& (0+255),f,b
  8078  002470  A0D8               	btfss	status,0,c
  8079  002472  07C7               	decf	(_discretize_counter+1)& (0+255),f,b
  8080  002474                     l5578:
  8081                           
  8082                           ; BSR set to: 0
  8083                           ;main.c: 592: if (measure_counter>0)
  8084  002474  0100               	movlb	0	; () banked
  8085  002476  BFCD               	btfsc	(_measure_counter+1)& (0+255),7,b
  8086  002478  D00B               	goto	l5582
  8087  00247A  0100               	movlb	0	; () banked
  8088  00247C  51CD               	movf	(_measure_counter+1)& (0+255),w,b
  8089  00247E  E104               	bnz	u8300
  8090  002480  0100               	movlb	0	; () banked
  8091  002482  05CC               	decf	_measure_counter& (0+255),w,b
  8092  002484  A0D8               	btfss	status,0,c
  8093  002486  D004               	goto	l5582
  8094  002488                     u8300:
  8095                           
  8096                           ; BSR set to: 0
  8097                           ;main.c: 593: measure_counter--;
  8098  002488  0100               	movlb	0	; () banked
  8099  00248A  07CC               	decf	_measure_counter& (0+255),f,b
  8100  00248C  A0D8               	btfss	status,0,c
  8101  00248E  07CD               	decf	(_measure_counter+1)& (0+255),f,b
  8102  002490                     l5582:
  8103                           
  8104                           ; BSR set to: 0
  8105                           ;main.c: 594: if (release_counter>0)
  8106  002490  0100               	movlb	0	; () banked
  8107  002492  BFCF               	btfsc	(_release_counter+1)& (0+255),7,b
  8108  002494  D00B               	goto	l5586
  8109  002496  0100               	movlb	0	; () banked
  8110  002498  51CF               	movf	(_release_counter+1)& (0+255),w,b
  8111  00249A  E104               	bnz	u8310
  8112  00249C  0100               	movlb	0	; () banked
  8113  00249E  05CE               	decf	_release_counter& (0+255),w,b
  8114  0024A0  A0D8               	btfss	status,0,c
  8115  0024A2  D004               	goto	l5586
  8116  0024A4                     u8310:
  8117                           
  8118                           ; BSR set to: 0
  8119                           ;main.c: 595: release_counter--;
  8120  0024A4  0100               	movlb	0	; () banked
  8121  0024A6  07CE               	decf	_release_counter& (0+255),f,b
  8122  0024A8  A0D8               	btfss	status,0,c
  8123  0024AA  07CF               	decf	(_release_counter+1)& (0+255),f,b
  8124  0024AC                     l5586:
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;main.c: 598: if (time_i[1]*60-latestSortedBottleTime[1]*60+time_i[0]-latestSortedBottle
      +                          Time[0]>=15)
  8128  0024AC  C100  F094         	movff	_latestSortedBottleTime,??_sort
  8129  0024B0  C101  F095         	movff	_latestSortedBottleTime+1,??_sort+1
  8130  0024B4  0100               	movlb	0	; () banked
  8131  0024B6  1F94               	comf	??_sort& (0+255),f,b
  8132  0024B8  1F95               	comf	(??_sort+1)& (0+255),f,b
  8133  0024BA  4B94               	infsnz	??_sort& (0+255),f,b
  8134  0024BC  2B95               	incf	(??_sort+1)& (0+255),f,b
  8135  0024BE  C040  F080         	movff	_time_i+2,___wmul@multiplier
  8136  0024C2  C041  F081         	movff	_time_i+3,___wmul@multiplier+1
  8137  0024C6  0E00               	movlw	0
  8138  0024C8  0100               	movlb	0	; () banked
  8139  0024CA  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8140  0024CC  0E3C               	movlw	60
  8141  0024CE  6F82               	movwf	___wmul@multiplicand& (0+255),b
  8142  0024D0  ECA0  F01D         	call	___wmul	;wreg free
  8143  0024D4  C080  F096         	movff	?___wmul,??_sort+2
  8144  0024D8  C081  F097         	movff	?___wmul+1,??_sort+3
  8145  0024DC  C102  F080         	movff	_latestSortedBottleTime+2,___wmul@multiplier
  8146  0024E0  C103  F081         	movff	_latestSortedBottleTime+3,___wmul@multiplier+1
  8147  0024E4  0E00               	movlw	0
  8148  0024E6  0100               	movlb	0	; () banked
  8149  0024E8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8150  0024EA  0E3C               	movlw	60
  8151  0024EC  6F82               	movwf	___wmul@multiplicand& (0+255),b
  8152  0024EE  ECA0  F01D         	call	___wmul	;wreg free
  8153  0024F2  0100               	movlb	0	; () banked
  8154  0024F4  1F80               	comf	?___wmul& (0+255),f,b
  8155  0024F6  0100               	movlb	0	; () banked
  8156  0024F8  1F81               	comf	(?___wmul+1)& (0+255),f,b
  8157  0024FA  0100               	movlb	0	; () banked
  8158  0024FC  4B80               	infsnz	?___wmul& (0+255),f,b
  8159  0024FE  2B81               	incf	(?___wmul+1)& (0+255),f,b
  8160  002500  0100               	movlb	0	; () banked
  8161  002502  5180               	movf	?___wmul& (0+255),w,b
  8162  002504  0100               	movlb	0	; () banked
  8163  002506  2796               	addwf	(??_sort+2)& (0+255),f,b
  8164  002508  0100               	movlb	0	; () banked
  8165  00250A  5181               	movf	(?___wmul+1)& (0+255),w,b
  8166  00250C  0100               	movlb	0	; () banked
  8167  00250E  2397               	addwfc	(??_sort+3)& (0+255),f,b
  8168  002510  0100               	movlb	0	; () banked
  8169  002512  5194               	movf	??_sort& (0+255),w,b
  8170  002514  0100               	movlb	0	; () banked
  8171  002516  2796               	addwf	(??_sort+2)& (0+255),f,b
  8172  002518  0100               	movlb	0	; () banked
  8173  00251A  5195               	movf	(??_sort+1)& (0+255),w,b
  8174  00251C  0100               	movlb	0	; () banked
  8175  00251E  2397               	addwfc	(??_sort+3)& (0+255),f,b
  8176  002520  503E               	movf	_time_i,w,c
  8177  002522  0100               	movlb	0	; () banked
  8178  002524  2796               	addwf	(??_sort+2)& (0+255),f,b
  8179  002526  503F               	movf	_time_i+1,w,c
  8180  002528  0100               	movlb	0	; () banked
  8181  00252A  2397               	addwfc	(??_sort+3)& (0+255),f,b
  8182  00252C  0100               	movlb	0	; () banked
  8183  00252E  BF97               	btfsc	(??_sort+3)& (0+255),7,b
  8184  002530  0012               	return	
  8185  002532  0100               	movlb	0	; () banked
  8186  002534  5197               	movf	(??_sort+3)& (0+255),w,b
  8187  002536  E105               	bnz	u8320
  8188  002538  0E0F               	movlw	15
  8189  00253A  0100               	movlb	0	; () banked
  8190  00253C  5D96               	subwf	(??_sort+2)& (0+255),w,b
  8191  00253E  A0D8               	btfss	status,0,c
  8192  002540  0012               	return	
  8193  002542                     u8320:
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;main.c: 599: nstate='e';
  8197  002542  0E65               	movlw	101
  8198  002544  0100               	movlb	0	; () banked
  8199  002546  6FE4               	movwf	_nstate& (0+255),b
  8200  002548  0012               	return	
  8201  00254A                     __end_of_sort:
  8202                           	opt stack 0
  8203                           tosu	equ	0xFFF
  8204                           tosh	equ	0xFFE
  8205                           tosl	equ	0xFFD
  8206                           pclath	equ	0xFFA
  8207                           tblptru	equ	0xFF8
  8208                           tblptrh	equ	0xFF7
  8209                           tblptrl	equ	0xFF6
  8210                           tablat	equ	0xFF5
  8211                           prodh	equ	0xFF4
  8212                           prodl	equ	0xFF3
  8213                           intcon	equ	0xFF2
  8214                           intcon2	equ	0xFF1
  8215                           intcon3	equ	0xFF0
  8216                           indf0	equ	0xFEF
  8217                           postinc0	equ	0xFEE
  8218                           fsr0h	equ	0xFEA
  8219                           fsr0l	equ	0xFE9
  8220                           wreg	equ	0xFE8
  8221                           indf1	equ	0xFE7
  8222                           postinc1	equ	0xFE6
  8223                           postdec1	equ	0xFE5
  8224                           fsr1h	equ	0xFE2
  8225                           fsr1l	equ	0xFE1
  8226                           indf2	equ	0xFDF
  8227                           postinc2	equ	0xFDE
  8228                           postdec2	equ	0xFDD
  8229                           fsr2h	equ	0xFDA
  8230                           fsr2l	equ	0xFD9
  8231                           status	equ	0xFD8
  8232                           
  8233 ;; *************** function __measure *****************
  8234 ;; Defined at:
  8235 ;;		line 630 in file "main.c"
  8236 ;; Parameters:    Size  Location     Type
  8237 ;;		None
  8238 ;; Auto vars:     Size  Location     Type
  8239 ;;  i               1   17[BANK0 ] unsigned char 
  8240 ;;  i               1   16[BANK0 ] unsigned char 
  8241 ;;  i               1   15[BANK0 ] unsigned char 
  8242 ;;  i               1   14[BANK0 ] unsigned char 
  8243 ;;  i               1   13[BANK0 ] unsigned char 
  8244 ;;  i               1   12[BANK0 ] unsigned char 
  8245 ;;  i               1   11[BANK0 ] unsigned char 
  8246 ;;  i               1   10[BANK0 ] unsigned char 
  8247 ;;  measurement     2   18[BANK0 ] int 
  8248 ;; Return value:  Size  Location     Type
  8249 ;;                  2    6[BANK0 ] int 
  8250 ;; Registers used:
  8251 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8252 ;; Tracked objects:
  8253 ;;		On entry : 0/0
  8254 ;;		On exit  : 0/0
  8255 ;;		Unchanged: 0/0
  8256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8257 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8258 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8259 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8260 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8261 ;;Total ram usage:       14 bytes
  8262 ;; Hardware stack levels used:    1
  8263 ;; Hardware stack levels required when called:    6
  8264 ;; This function calls:
  8265 ;;		___awmod
  8266 ;; This function is called by:
  8267 ;;		_update_display
  8268 ;;		_sort
  8269 ;; This function uses a non-reentrant model
  8270 ;;
  8271                           
  8272                           	psect	text18
  8273  001CD4                     __ptext18:
  8274                           	opt stack 0
  8275  001CD4                     __measure:
  8276                           	opt stack 23
  8277                           
  8278                           ;main.c: 642: int measurement=0;
  8279                           
  8280                           ; BSR set to: 0
  8281                           ;incstack = 0
  8282  001CD4  0E00               	movlw	0
  8283  001CD6  0100               	movlb	0	; () banked
  8284  001CD8  6F93               	movwf	(__measure@measurement+1)& (0+255),b
  8285  001CDA  0E00               	movlw	0
  8286  001CDC  6F92               	movwf	__measure@measurement& (0+255),b
  8287                           
  8288                           ;main.c: 645: for (char i=0;i<5;i++)
  8289  001CDE  0E00               	movlw	0
  8290  001CE0  0100               	movlb	0	; () banked
  8291  001CE2  6F8A               	movwf	__measure@i& (0+255),b
  8292  001CE4                     l4930:
  8293                           
  8294                           ; BSR set to: 0
  8295  001CE4  0E04               	movlw	4
  8296  001CE6  0100               	movlb	0	; () banked
  8297  001CE8  658A               	cpfsgt	__measure@i& (0+255),b
  8298  001CEA  D001               	goto	l4934
  8299  001CEC  D012               	goto	l4940
  8300  001CEE                     l4934:
  8301                           
  8302                           ; BSR set to: 0
  8303                           ;main.c: 646: measurement+=PROX1[i];
  8304  001CEE  0100               	movlb	0	; () banked
  8305  001CF0  518A               	movf	__measure@i& (0+255),w,b
  8306  001CF2  0D02               	mullw	2
  8307  001CF4  0EBA               	movlw	low _PROX1
  8308  001CF6  24F3               	addwf	prodl,w,c
  8309  001CF8  6ED9               	movwf	fsr2l,c
  8310  001CFA  0E00               	movlw	high _PROX1
  8311  001CFC  20F4               	addwfc	prodh,w,c
  8312  001CFE  6EDA               	movwf	fsr2h,c
  8313  001D00  50DE               	movf	postinc2,w,c
  8314  001D02  0100               	movlb	0	; () banked
  8315  001D04  2792               	addwf	__measure@measurement& (0+255),f,b
  8316  001D06  50DD               	movf	postdec2,w,c
  8317  001D08  0100               	movlb	0	; () banked
  8318  001D0A  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8319                           
  8320                           ; BSR set to: 0
  8321  001D0C  0100               	movlb	0	; () banked
  8322  001D0E  2B8A               	incf	__measure@i& (0+255),f,b
  8323  001D10  D7E9               	goto	l4930
  8324  001D12                     l4940:
  8325                           
  8326                           ; BSR set to: 0
  8327                           ;main.c: 647: if (measurement%5!=0)
  8328  001D12  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8329  001D16  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8330  001D1A  0E00               	movlw	0
  8331  001D1C  0100               	movlb	0	; () banked
  8332  001D1E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8333  001D20  0E05               	movlw	5
  8334  001D22  6F82               	movwf	___awmod@divisor& (0+255),b
  8335  001D24  ECB9  F01A         	call	___awmod	;wreg free
  8336  001D28  0100               	movlb	0	; () banked
  8337  001D2A  5180               	movf	?___awmod& (0+255),w,b
  8338  001D2C  0100               	movlb	0	; () banked
  8339  001D2E  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8340  001D30  B4D8               	btfsc	status,2,c
  8341  001D32  D006               	goto	l4946
  8342                           
  8343                           ; BSR set to: 0
  8344                           ;main.c: 648: return 0;
  8345  001D34  0E00               	movlw	0
  8346  001D36  0100               	movlb	0	; () banked
  8347  001D38  6F87               	movwf	(?__measure+1)& (0+255),b
  8348  001D3A  0E00               	movlw	0
  8349  001D3C  6F86               	movwf	?__measure& (0+255),b
  8350                           
  8351                           ; BSR set to: 0
  8352  001D3E  0012               	return	
  8353  001D40                     l4946:
  8354                           
  8355                           ; BSR set to: 0
  8356                           ;main.c: 649: for (char i=0;i<5;i++)
  8357  001D40  0E00               	movlw	0
  8358  001D42  0100               	movlb	0	; () banked
  8359  001D44  6F8B               	movwf	__measure@i_496& (0+255),b
  8360  001D46                     l4948:
  8361                           
  8362                           ; BSR set to: 0
  8363  001D46  0E04               	movlw	4
  8364  001D48  0100               	movlb	0	; () banked
  8365  001D4A  658B               	cpfsgt	__measure@i_496& (0+255),b
  8366  001D4C  D001               	goto	l4952
  8367  001D4E  D012               	goto	l4958
  8368  001D50                     l4952:
  8369                           
  8370                           ; BSR set to: 0
  8371                           ;main.c: 650: measurement+=PROX2[i];
  8372  001D50  0100               	movlb	0	; () banked
  8373  001D52  518B               	movf	__measure@i_496& (0+255),w,b
  8374  001D54  0D02               	mullw	2
  8375  001D56  0E60               	movlw	low _PROX2
  8376  001D58  24F3               	addwf	prodl,w,c
  8377  001D5A  6ED9               	movwf	fsr2l,c
  8378  001D5C  0E00               	movlw	high _PROX2
  8379  001D5E  20F4               	addwfc	prodh,w,c
  8380  001D60  6EDA               	movwf	fsr2h,c
  8381  001D62  50DE               	movf	postinc2,w,c
  8382  001D64  0100               	movlb	0	; () banked
  8383  001D66  2792               	addwf	__measure@measurement& (0+255),f,b
  8384  001D68  50DD               	movf	postdec2,w,c
  8385  001D6A  0100               	movlb	0	; () banked
  8386  001D6C  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8387                           
  8388                           ; BSR set to: 0
  8389  001D6E  0100               	movlb	0	; () banked
  8390  001D70  2B8B               	incf	__measure@i_496& (0+255),f,b
  8391  001D72  D7E9               	goto	l4948
  8392  001D74                     l4958:
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;main.c: 651: if (measurement%5!=0)
  8396  001D74  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8397  001D78  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8398  001D7C  0E00               	movlw	0
  8399  001D7E  0100               	movlb	0	; () banked
  8400  001D80  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8401  001D82  0E05               	movlw	5
  8402  001D84  6F82               	movwf	___awmod@divisor& (0+255),b
  8403  001D86  ECB9  F01A         	call	___awmod	;wreg free
  8404  001D8A  0100               	movlb	0	; () banked
  8405  001D8C  5180               	movf	?___awmod& (0+255),w,b
  8406  001D8E  0100               	movlb	0	; () banked
  8407  001D90  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8408  001D92  B4D8               	btfsc	status,2,c
  8409  001D94  D006               	goto	l4964
  8410                           
  8411                           ; BSR set to: 0
  8412                           ;main.c: 652: return 0;
  8413  001D96  0E00               	movlw	0
  8414  001D98  0100               	movlb	0	; () banked
  8415  001D9A  6F87               	movwf	(?__measure+1)& (0+255),b
  8416  001D9C  0E00               	movlw	0
  8417  001D9E  6F86               	movwf	?__measure& (0+255),b
  8418                           
  8419                           ; BSR set to: 0
  8420  001DA0  0012               	return	
  8421  001DA2                     l4964:
  8422                           
  8423                           ; BSR set to: 0
  8424                           ;main.c: 655: for (char i=0;i<5;i++)
  8425  001DA2  0E00               	movlw	0
  8426  001DA4  0100               	movlb	0	; () banked
  8427  001DA6  6F8C               	movwf	__measure@i_497& (0+255),b
  8428  001DA8                     l4966:
  8429                           
  8430                           ; BSR set to: 0
  8431  001DA8  0E04               	movlw	4
  8432  001DAA  0100               	movlb	0	; () banked
  8433  001DAC  658C               	cpfsgt	__measure@i_497& (0+255),b
  8434  001DAE  D001               	goto	l4970
  8435  001DB0  D01B               	goto	l4976
  8436  001DB2                     l4970:
  8437                           
  8438                           ; BSR set to: 0
  8439                           ;main.c: 656: measurement+=(DIST1[i]<DIST_THRESHOLD_LOW);
  8440  001DB2  0100               	movlb	0	; () banked
  8441  001DB4  518C               	movf	__measure@i_497& (0+255),w,b
  8442  001DB6  0D02               	mullw	2
  8443  001DB8  0E4C               	movlw	low _DIST1
  8444  001DBA  24F3               	addwf	prodl,w,c
  8445  001DBC  6ED9               	movwf	fsr2l,c
  8446  001DBE  0E00               	movlw	high _DIST1
  8447  001DC0  20F4               	addwfc	prodh,w,c
  8448  001DC2  6EDA               	movwf	fsr2h,c
  8449  001DC4  0100               	movlb	0	; () banked
  8450  001DC6  51DC               	movf	_DIST_THRESHOLD_LOW& (0+255),w,b
  8451  001DC8  5CDE               	subwf	postinc2,w,c
  8452  001DCA  0100               	movlb	0	; () banked
  8453  001DCC  51DD               	movf	(_DIST_THRESHOLD_LOW+1)& (0+255),w,b
  8454  001DCE  58DE               	subwfb	postinc2,w,c
  8455  001DD0  B0D8               	btfsc	status,0,c
  8456  001DD2  D002               	goto	u6930
  8457  001DD4  0E01               	movlw	1
  8458  001DD6  D001               	goto	u6940
  8459  001DD8                     u6930:
  8460  001DD8  0E00               	movlw	0
  8461  001DDA                     u6940:
  8462  001DDA  0100               	movlb	0	; () banked
  8463  001DDC  2792               	addwf	__measure@measurement& (0+255),f,b
  8464  001DDE  0E00               	movlw	0
  8465  001DE0  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8466                           
  8467                           ; BSR set to: 0
  8468  001DE2  0100               	movlb	0	; () banked
  8469  001DE4  2B8C               	incf	__measure@i_497& (0+255),f,b
  8470  001DE6  D7E0               	goto	l4966
  8471  001DE8                     l4976:
  8472                           
  8473                           ; BSR set to: 0
  8474                           ;main.c: 657: if (measurement%5!=0)
  8475  001DE8  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8476  001DEC  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8477  001DF0  0E00               	movlw	0
  8478  001DF2  0100               	movlb	0	; () banked
  8479  001DF4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8480  001DF6  0E05               	movlw	5
  8481  001DF8  6F82               	movwf	___awmod@divisor& (0+255),b
  8482  001DFA  ECB9  F01A         	call	___awmod	;wreg free
  8483  001DFE  0100               	movlb	0	; () banked
  8484  001E00  5180               	movf	?___awmod& (0+255),w,b
  8485  001E02  0100               	movlb	0	; () banked
  8486  001E04  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8487  001E06  B4D8               	btfsc	status,2,c
  8488  001E08  D006               	goto	l4982
  8489                           
  8490                           ; BSR set to: 0
  8491                           ;main.c: 658: return 0;
  8492  001E0A  0E00               	movlw	0
  8493  001E0C  0100               	movlb	0	; () banked
  8494  001E0E  6F87               	movwf	(?__measure+1)& (0+255),b
  8495  001E10  0E00               	movlw	0
  8496  001E12  6F86               	movwf	?__measure& (0+255),b
  8497                           
  8498                           ; BSR set to: 0
  8499  001E14  0012               	return	
  8500  001E16                     l4982:
  8501                           
  8502                           ; BSR set to: 0
  8503                           ;main.c: 659: for (char i=0;i<5;i++)
  8504  001E16  0E00               	movlw	0
  8505  001E18  0100               	movlb	0	; () banked
  8506  001E1A  6F8D               	movwf	__measure@i_498& (0+255),b
  8507  001E1C                     l4984:
  8508                           
  8509                           ; BSR set to: 0
  8510  001E1C  0E04               	movlw	4
  8511  001E1E  0100               	movlb	0	; () banked
  8512  001E20  658D               	cpfsgt	__measure@i_498& (0+255),b
  8513  001E22  D001               	goto	l4988
  8514  001E24  D01B               	goto	l4994
  8515  001E26                     l4988:
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;main.c: 660: measurement+=(DIST1[i]<DIST_THRESHOLD_HI);
  8519  001E26  0100               	movlb	0	; () banked
  8520  001E28  518D               	movf	__measure@i_498& (0+255),w,b
  8521  001E2A  0D02               	mullw	2
  8522  001E2C  0E4C               	movlw	low _DIST1
  8523  001E2E  24F3               	addwf	prodl,w,c
  8524  001E30  6ED9               	movwf	fsr2l,c
  8525  001E32  0E00               	movlw	high _DIST1
  8526  001E34  20F4               	addwfc	prodh,w,c
  8527  001E36  6EDA               	movwf	fsr2h,c
  8528  001E38  0100               	movlb	0	; () banked
  8529  001E3A  51DA               	movf	_DIST_THRESHOLD_HI& (0+255),w,b
  8530  001E3C  5CDE               	subwf	postinc2,w,c
  8531  001E3E  0100               	movlb	0	; () banked
  8532  001E40  51DB               	movf	(_DIST_THRESHOLD_HI+1)& (0+255),w,b
  8533  001E42  58DE               	subwfb	postinc2,w,c
  8534  001E44  B0D8               	btfsc	status,0,c
  8535  001E46  D002               	goto	u6980
  8536  001E48  0E01               	movlw	1
  8537  001E4A  D001               	goto	u6990
  8538  001E4C                     u6980:
  8539  001E4C  0E00               	movlw	0
  8540  001E4E                     u6990:
  8541  001E4E  0100               	movlb	0	; () banked
  8542  001E50  2792               	addwf	__measure@measurement& (0+255),f,b
  8543  001E52  0E00               	movlw	0
  8544  001E54  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8545                           
  8546                           ; BSR set to: 0
  8547  001E56  0100               	movlb	0	; () banked
  8548  001E58  2B8D               	incf	__measure@i_498& (0+255),f,b
  8549  001E5A  D7E0               	goto	l4984
  8550  001E5C                     l4994:
  8551                           
  8552                           ; BSR set to: 0
  8553                           ;main.c: 661: if (measurement%5!=0)
  8554  001E5C  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8555  001E60  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8556  001E64  0E00               	movlw	0
  8557  001E66  0100               	movlb	0	; () banked
  8558  001E68  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8559  001E6A  0E05               	movlw	5
  8560  001E6C  6F82               	movwf	___awmod@divisor& (0+255),b
  8561  001E6E  ECB9  F01A         	call	___awmod	;wreg free
  8562  001E72  0100               	movlb	0	; () banked
  8563  001E74  5180               	movf	?___awmod& (0+255),w,b
  8564  001E76  0100               	movlb	0	; () banked
  8565  001E78  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8566  001E7A  B4D8               	btfsc	status,2,c
  8567  001E7C  D006               	goto	l5000
  8568                           
  8569                           ; BSR set to: 0
  8570                           ;main.c: 662: return 0;
  8571  001E7E  0E00               	movlw	0
  8572  001E80  0100               	movlb	0	; () banked
  8573  001E82  6F87               	movwf	(?__measure+1)& (0+255),b
  8574  001E84  0E00               	movlw	0
  8575  001E86  6F86               	movwf	?__measure& (0+255),b
  8576                           
  8577                           ; BSR set to: 0
  8578  001E88  0012               	return	
  8579  001E8A                     l5000:
  8580                           
  8581                           ; BSR set to: 0
  8582                           ;main.c: 665: for (char i=0;i<5;i++)
  8583  001E8A  0E00               	movlw	0
  8584  001E8C  0100               	movlb	0	; () banked
  8585  001E8E  6F8E               	movwf	__measure@i_499& (0+255),b
  8586  001E90                     l5002:
  8587                           
  8588                           ; BSR set to: 0
  8589  001E90  0E04               	movlw	4
  8590  001E92  0100               	movlb	0	; () banked
  8591  001E94  658E               	cpfsgt	__measure@i_499& (0+255),b
  8592  001E96  D001               	goto	l5006
  8593  001E98  D01B               	goto	l5012
  8594  001E9A                     l5006:
  8595                           
  8596                           ; BSR set to: 0
  8597                           ;main.c: 666: measurement+=(IR1[i]<IR_THRESHOLD_LOW);
  8598  001E9A  0100               	movlb	0	; () banked
  8599  001E9C  518E               	movf	__measure@i_499& (0+255),w,b
  8600  001E9E  0D02               	mullw	2
  8601  001EA0  0E56               	movlw	low _IR1
  8602  001EA2  24F3               	addwf	prodl,w,c
  8603  001EA4  6ED9               	movwf	fsr2l,c
  8604  001EA6  0E00               	movlw	high _IR1
  8605  001EA8  20F4               	addwfc	prodh,w,c
  8606  001EAA  6EDA               	movwf	fsr2h,c
  8607  001EAC  0100               	movlb	0	; () banked
  8608  001EAE  51E0               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  8609  001EB0  5CDE               	subwf	postinc2,w,c
  8610  001EB2  0100               	movlb	0	; () banked
  8611  001EB4  51E1               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  8612  001EB6  58DE               	subwfb	postinc2,w,c
  8613  001EB8  B0D8               	btfsc	status,0,c
  8614  001EBA  D002               	goto	u7030
  8615  001EBC  0E01               	movlw	1
  8616  001EBE  D001               	goto	u7040
  8617  001EC0                     u7030:
  8618  001EC0  0E00               	movlw	0
  8619  001EC2                     u7040:
  8620  001EC2  0100               	movlb	0	; () banked
  8621  001EC4  2792               	addwf	__measure@measurement& (0+255),f,b
  8622  001EC6  0E00               	movlw	0
  8623  001EC8  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8624                           
  8625                           ; BSR set to: 0
  8626  001ECA  0100               	movlb	0	; () banked
  8627  001ECC  2B8E               	incf	__measure@i_499& (0+255),f,b
  8628  001ECE  D7E0               	goto	l5002
  8629  001ED0                     l5012:
  8630                           
  8631                           ; BSR set to: 0
  8632                           ;main.c: 667: if (measurement%5!=0)
  8633  001ED0  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8634  001ED4  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8635  001ED8  0E00               	movlw	0
  8636  001EDA  0100               	movlb	0	; () banked
  8637  001EDC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8638  001EDE  0E05               	movlw	5
  8639  001EE0  6F82               	movwf	___awmod@divisor& (0+255),b
  8640  001EE2  ECB9  F01A         	call	___awmod	;wreg free
  8641  001EE6  0100               	movlb	0	; () banked
  8642  001EE8  5180               	movf	?___awmod& (0+255),w,b
  8643  001EEA  0100               	movlb	0	; () banked
  8644  001EEC  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8645  001EEE  B4D8               	btfsc	status,2,c
  8646  001EF0  D006               	goto	l5018
  8647                           
  8648                           ; BSR set to: 0
  8649                           ;main.c: 668: return 0;
  8650  001EF2  0E00               	movlw	0
  8651  001EF4  0100               	movlb	0	; () banked
  8652  001EF6  6F87               	movwf	(?__measure+1)& (0+255),b
  8653  001EF8  0E00               	movlw	0
  8654  001EFA  6F86               	movwf	?__measure& (0+255),b
  8655                           
  8656                           ; BSR set to: 0
  8657  001EFC  0012               	return	
  8658  001EFE                     l5018:
  8659                           
  8660                           ; BSR set to: 0
  8661                           ;main.c: 670: for (char i=0;i<5;i++)
  8662  001EFE  0E00               	movlw	0
  8663  001F00  0100               	movlb	0	; () banked
  8664  001F02  6F8F               	movwf	__measure@i_500& (0+255),b
  8665  001F04                     l5020:
  8666                           
  8667                           ; BSR set to: 0
  8668  001F04  0E04               	movlw	4
  8669  001F06  0100               	movlb	0	; () banked
  8670  001F08  658F               	cpfsgt	__measure@i_500& (0+255),b
  8671  001F0A  D001               	goto	l5024
  8672  001F0C  D01B               	goto	l5030
  8673  001F0E                     l5024:
  8674                           
  8675                           ; BSR set to: 0
  8676                           ;main.c: 671: measurement+=(IR1[i]<IR_THRESHOLD_HI);
  8677  001F0E  0100               	movlb	0	; () banked
  8678  001F10  518F               	movf	__measure@i_500& (0+255),w,b
  8679  001F12  0D02               	mullw	2
  8680  001F14  0E56               	movlw	low _IR1
  8681  001F16  24F3               	addwf	prodl,w,c
  8682  001F18  6ED9               	movwf	fsr2l,c
  8683  001F1A  0E00               	movlw	high _IR1
  8684  001F1C  20F4               	addwfc	prodh,w,c
  8685  001F1E  6EDA               	movwf	fsr2h,c
  8686  001F20  0100               	movlb	0	; () banked
  8687  001F22  51DE               	movf	_IR_THRESHOLD_HI& (0+255),w,b
  8688  001F24  5CDE               	subwf	postinc2,w,c
  8689  001F26  0100               	movlb	0	; () banked
  8690  001F28  51DF               	movf	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  8691  001F2A  58DE               	subwfb	postinc2,w,c
  8692  001F2C  B0D8               	btfsc	status,0,c
  8693  001F2E  D002               	goto	u7080
  8694  001F30  0E01               	movlw	1
  8695  001F32  D001               	goto	u7090
  8696  001F34                     u7080:
  8697  001F34  0E00               	movlw	0
  8698  001F36                     u7090:
  8699  001F36  0100               	movlb	0	; () banked
  8700  001F38  2792               	addwf	__measure@measurement& (0+255),f,b
  8701  001F3A  0E00               	movlw	0
  8702  001F3C  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8703                           
  8704                           ; BSR set to: 0
  8705  001F3E  0100               	movlb	0	; () banked
  8706  001F40  2B8F               	incf	__measure@i_500& (0+255),f,b
  8707  001F42  D7E0               	goto	l5020
  8708  001F44                     l5030:
  8709                           
  8710                           ; BSR set to: 0
  8711                           ;main.c: 672: if (measurement%5!=0)
  8712  001F44  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8713  001F48  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8714  001F4C  0E00               	movlw	0
  8715  001F4E  0100               	movlb	0	; () banked
  8716  001F50  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8717  001F52  0E05               	movlw	5
  8718  001F54  6F82               	movwf	___awmod@divisor& (0+255),b
  8719  001F56  ECB9  F01A         	call	___awmod	;wreg free
  8720  001F5A  0100               	movlb	0	; () banked
  8721  001F5C  5180               	movf	?___awmod& (0+255),w,b
  8722  001F5E  0100               	movlb	0	; () banked
  8723  001F60  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8724  001F62  B4D8               	btfsc	status,2,c
  8725  001F64  D006               	goto	l5036
  8726                           
  8727                           ; BSR set to: 0
  8728                           ;main.c: 673: return 0;
  8729  001F66  0E00               	movlw	0
  8730  001F68  0100               	movlb	0	; () banked
  8731  001F6A  6F87               	movwf	(?__measure+1)& (0+255),b
  8732  001F6C  0E00               	movlw	0
  8733  001F6E  6F86               	movwf	?__measure& (0+255),b
  8734                           
  8735                           ; BSR set to: 0
  8736  001F70  0012               	return	
  8737  001F72                     l5036:
  8738                           
  8739                           ; BSR set to: 0
  8740                           ;main.c: 675: for (char i=0;i<5;i++)
  8741  001F72  0E00               	movlw	0
  8742  001F74  0100               	movlb	0	; () banked
  8743  001F76  6F90               	movwf	__measure@i_501& (0+255),b
  8744  001F78                     l5038:
  8745                           
  8746                           ; BSR set to: 0
  8747  001F78  0E04               	movlw	4
  8748  001F7A  0100               	movlb	0	; () banked
  8749  001F7C  6590               	cpfsgt	__measure@i_501& (0+255),b
  8750  001F7E  D001               	goto	l5042
  8751  001F80  D01B               	goto	l5048
  8752  001F82                     l5042:
  8753                           
  8754                           ; BSR set to: 0
  8755                           ;main.c: 676: measurement+=(IR2[i]<IR_THRESHOLD_LOW);
  8756  001F82  0100               	movlb	0	; () banked
  8757  001F84  5190               	movf	__measure@i_501& (0+255),w,b
  8758  001F86  0D02               	mullw	2
  8759  001F88  0E1C               	movlw	low _IR2
  8760  001F8A  24F3               	addwf	prodl,w,c
  8761  001F8C  6ED9               	movwf	fsr2l,c
  8762  001F8E  0E01               	movlw	high _IR2
  8763  001F90  20F4               	addwfc	prodh,w,c
  8764  001F92  6EDA               	movwf	fsr2h,c
  8765  001F94  0100               	movlb	0	; () banked
  8766  001F96  51E0               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  8767  001F98  5CDE               	subwf	postinc2,w,c
  8768  001F9A  0100               	movlb	0	; () banked
  8769  001F9C  51E1               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  8770  001F9E  58DE               	subwfb	postinc2,w,c
  8771  001FA0  B0D8               	btfsc	status,0,c
  8772  001FA2  D002               	goto	u7130
  8773  001FA4  0E01               	movlw	1
  8774  001FA6  D001               	goto	u7140
  8775  001FA8                     u7130:
  8776  001FA8  0E00               	movlw	0
  8777  001FAA                     u7140:
  8778  001FAA  0100               	movlb	0	; () banked
  8779  001FAC  2792               	addwf	__measure@measurement& (0+255),f,b
  8780  001FAE  0E00               	movlw	0
  8781  001FB0  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8782                           
  8783                           ; BSR set to: 0
  8784  001FB2  0100               	movlb	0	; () banked
  8785  001FB4  2B90               	incf	__measure@i_501& (0+255),f,b
  8786  001FB6  D7E0               	goto	l5038
  8787  001FB8                     l5048:
  8788                           
  8789                           ; BSR set to: 0
  8790                           ;main.c: 677: if (measurement%5!=0)
  8791  001FB8  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8792  001FBC  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8793  001FC0  0E00               	movlw	0
  8794  001FC2  0100               	movlb	0	; () banked
  8795  001FC4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8796  001FC6  0E05               	movlw	5
  8797  001FC8  6F82               	movwf	___awmod@divisor& (0+255),b
  8798  001FCA  ECB9  F01A         	call	___awmod	;wreg free
  8799  001FCE  0100               	movlb	0	; () banked
  8800  001FD0  5180               	movf	?___awmod& (0+255),w,b
  8801  001FD2  0100               	movlb	0	; () banked
  8802  001FD4  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8803  001FD6  B4D8               	btfsc	status,2,c
  8804  001FD8  D006               	goto	l5054
  8805                           
  8806                           ; BSR set to: 0
  8807                           ;main.c: 678: return 0;
  8808  001FDA  0E00               	movlw	0
  8809  001FDC  0100               	movlb	0	; () banked
  8810  001FDE  6F87               	movwf	(?__measure+1)& (0+255),b
  8811  001FE0  0E00               	movlw	0
  8812  001FE2  6F86               	movwf	?__measure& (0+255),b
  8813                           
  8814                           ; BSR set to: 0
  8815  001FE4  0012               	return	
  8816  001FE6                     l5054:
  8817                           
  8818                           ; BSR set to: 0
  8819                           ;main.c: 680: for (char i=0;i<5;i++)
  8820  001FE6  0E00               	movlw	0
  8821  001FE8  0100               	movlb	0	; () banked
  8822  001FEA  6F91               	movwf	__measure@i_502& (0+255),b
  8823  001FEC                     l5056:
  8824                           
  8825                           ; BSR set to: 0
  8826  001FEC  0E04               	movlw	4
  8827  001FEE  0100               	movlb	0	; () banked
  8828  001FF0  6591               	cpfsgt	__measure@i_502& (0+255),b
  8829  001FF2  D001               	goto	l5060
  8830  001FF4  D01B               	goto	l5066
  8831  001FF6                     l5060:
  8832                           
  8833                           ; BSR set to: 0
  8834                           ;main.c: 681: measurement+=(IR1[i]<IR_THRESHOLD_HI);
  8835  001FF6  0100               	movlb	0	; () banked
  8836  001FF8  5191               	movf	__measure@i_502& (0+255),w,b
  8837  001FFA  0D02               	mullw	2
  8838  001FFC  0E56               	movlw	low _IR1
  8839  001FFE  24F3               	addwf	prodl,w,c
  8840  002000  6ED9               	movwf	fsr2l,c
  8841  002002  0E00               	movlw	high _IR1
  8842  002004  20F4               	addwfc	prodh,w,c
  8843  002006  6EDA               	movwf	fsr2h,c
  8844  002008  0100               	movlb	0	; () banked
  8845  00200A  51DE               	movf	_IR_THRESHOLD_HI& (0+255),w,b
  8846  00200C  5CDE               	subwf	postinc2,w,c
  8847  00200E  0100               	movlb	0	; () banked
  8848  002010  51DF               	movf	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  8849  002012  58DE               	subwfb	postinc2,w,c
  8850  002014  B0D8               	btfsc	status,0,c
  8851  002016  D002               	goto	u7180
  8852  002018  0E01               	movlw	1
  8853  00201A  D001               	goto	u7190
  8854  00201C                     u7180:
  8855  00201C  0E00               	movlw	0
  8856  00201E                     u7190:
  8857  00201E  0100               	movlb	0	; () banked
  8858  002020  2792               	addwf	__measure@measurement& (0+255),f,b
  8859  002022  0E00               	movlw	0
  8860  002024  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8861                           
  8862                           ; BSR set to: 0
  8863  002026  0100               	movlb	0	; () banked
  8864  002028  2B91               	incf	__measure@i_502& (0+255),f,b
  8865  00202A  D7E0               	goto	l5056
  8866  00202C                     l5066:
  8867                           
  8868                           ; BSR set to: 0
  8869                           ;main.c: 682: if (measurement%5!=0)
  8870  00202C  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8871  002030  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8872  002034  0E00               	movlw	0
  8873  002036  0100               	movlb	0	; () banked
  8874  002038  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8875  00203A  0E05               	movlw	5
  8876  00203C  6F82               	movwf	___awmod@divisor& (0+255),b
  8877  00203E  ECB9  F01A         	call	___awmod	;wreg free
  8878  002042  0100               	movlb	0	; () banked
  8879  002044  5180               	movf	?___awmod& (0+255),w,b
  8880  002046  0100               	movlb	0	; () banked
  8881  002048  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8882  00204A  B4D8               	btfsc	status,2,c
  8883  00204C  D006               	goto	l5072
  8884                           
  8885                           ; BSR set to: 0
  8886                           ;main.c: 683: return 0;
  8887  00204E  0E00               	movlw	0
  8888  002050  0100               	movlb	0	; () banked
  8889  002052  6F87               	movwf	(?__measure+1)& (0+255),b
  8890  002054  0E00               	movlw	0
  8891  002056  6F86               	movwf	?__measure& (0+255),b
  8892                           
  8893                           ; BSR set to: 0
  8894  002058  0012               	return	
  8895  00205A                     l5072:
  8896                           
  8897                           ; BSR set to: 0
  8898                           ;main.c: 686: measurement=2;
  8899  00205A  0E00               	movlw	0
  8900  00205C  0100               	movlb	0	; () banked
  8901  00205E  6F93               	movwf	(__measure@measurement+1)& (0+255),b
  8902  002060  0E02               	movlw	2
  8903  002062  6F92               	movwf	__measure@measurement& (0+255),b
  8904                           
  8905                           ; BSR set to: 0
  8906                           ;main.c: 688: if (DIST1[0]>DIST_THRESHOLD_HI)
  8907  002064  504C               	movf	_DIST1,w,c
  8908  002066  0100               	movlb	0	; () banked
  8909  002068  5DDA               	subwf	_DIST_THRESHOLD_HI& (0+255),w,b
  8910  00206A  504D               	movf	_DIST1+1,w,c
  8911  00206C  0100               	movlb	0	; () banked
  8912  00206E  59DB               	subwfb	(_DIST_THRESHOLD_HI+1)& (0+255),w,b
  8913  002070  B0D8               	btfsc	status,0,c
  8914  002072  D006               	goto	l5080
  8915                           
  8916                           ; BSR set to: 0
  8917                           ;main.c: 689: return 0;
  8918  002074  0E00               	movlw	0
  8919  002076  0100               	movlb	0	; () banked
  8920  002078  6F87               	movwf	(?__measure+1)& (0+255),b
  8921  00207A  0E00               	movlw	0
  8922  00207C  6F86               	movwf	?__measure& (0+255),b
  8923                           
  8924                           ; BSR set to: 0
  8925  00207E  0012               	return	
  8926  002080                     l5080:
  8927                           
  8928                           ; BSR set to: 0
  8929                           ;main.c: 690: if (DIST1[0]>DIST_THRESHOLD_LOW){
  8930  002080  504C               	movf	_DIST1,w,c
  8931  002082  0100               	movlb	0	; () banked
  8932  002084  5DDC               	subwf	_DIST_THRESHOLD_LOW& (0+255),w,b
  8933  002086  504D               	movf	_DIST1+1,w,c
  8934  002088  0100               	movlb	0	; () banked
  8935  00208A  59DD               	subwfb	(_DIST_THRESHOLD_LOW+1)& (0+255),w,b
  8936  00208C  B0D8               	btfsc	status,0,c
  8937  00208E  D005               	goto	l5084
  8938                           
  8939                           ; BSR set to: 0
  8940                           ;main.c: 691: measurement-=PROX2[0];
  8941  002090  5060               	movf	_PROX2,w,c
  8942  002092  0100               	movlb	0	; () banked
  8943  002094  5F92               	subwf	__measure@measurement& (0+255),f,b
  8944  002096  5061               	movf	_PROX2+1,w,c
  8945  002098  D006               	goto	L3
  8946  00209A                     l5084:
  8947                           
  8948                           ; BSR set to: 0
  8949                           ;main.c: 693: else
  8950                           ;main.c: 694: measurement-=PROX1[0];
  8951  00209A  0100               	movlb	0	; () banked
  8952  00209C  51BA               	movf	_PROX1& (0+255),w,b
  8953  00209E  0100               	movlb	0	; () banked
  8954  0020A0  5F92               	subwf	__measure@measurement& (0+255),f,b
  8955  0020A2  0100               	movlb	0	; () banked
  8956  0020A4  51BB               	movf	(_PROX1+1)& (0+255),w,b
  8957  0020A6                     L3:
  8958  0020A6  0100               	movlb	0	; () banked
  8959  0020A8  5B93               	subwfb	(__measure@measurement+1)& (0+255),f,b
  8960                           
  8961                           ; BSR set to: 0
  8962                           ;main.c: 697: if (IR1[0]>IR_THRESHOLD_HI||IR2[0]>IR_THRESHOLD_HI);
  8963  0020AA  5056               	movf	_IR1,w,c
  8964  0020AC  0100               	movlb	0	; () banked
  8965  0020AE  5DDE               	subwf	_IR_THRESHOLD_HI& (0+255),w,b
  8966  0020B0  5057               	movf	_IR1+1,w,c
  8967  0020B2  0100               	movlb	0	; () banked
  8968  0020B4  59DF               	subwfb	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  8969  0020B6  A0D8               	btfss	status,0,c
  8970  0020B8  D028               	goto	l493
  8971                           
  8972                           ; BSR set to: 0
  8973  0020BA  0101               	movlb	1	; () banked
  8974  0020BC  511C               	movf	_IR2& (0+255),w,b
  8975  0020BE  0100               	movlb	0	; () banked
  8976  0020C0  5DDE               	subwf	_IR_THRESHOLD_HI& (0+255),w,b
  8977  0020C2  0101               	movlb	1	; () banked
  8978  0020C4  511D               	movf	(_IR2+1)& (0+255),w,b
  8979  0020C6  0100               	movlb	0	; () banked
  8980  0020C8  59DF               	subwfb	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  8981  0020CA  A0D8               	btfss	status,0,c
  8982  0020CC  D01E               	goto	l493
  8983                           
  8984                           ; BSR set to: 0
  8985                           ;main.c: 698: else if (IR1[0]<IR_THRESHOLD_LOW&&IR2[0]<IR_THRESHOLD_LOW)
  8986                           
  8987                           ; BSR set to: 0
  8988                           
  8989                           ; BSR set to: 0
  8990  0020CE  0100               	movlb	0	; () banked
  8991  0020D0  51E0               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  8992  0020D2  5C56               	subwf	_IR1,w,c
  8993  0020D4  0100               	movlb	0	; () banked
  8994  0020D6  51E1               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  8995  0020D8  5857               	subwfb	_IR1+1,w,c
  8996  0020DA  B0D8               	btfsc	status,0,c
  8997  0020DC  D010               	goto	l5094
  8998                           
  8999                           ; BSR set to: 0
  9000  0020DE  0100               	movlb	0	; () banked
  9001  0020E0  51E0               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  9002  0020E2  0101               	movlb	1	; () banked
  9003  0020E4  5D1C               	subwf	_IR2& (0+255),w,b
  9004  0020E6  0100               	movlb	0	; () banked
  9005  0020E8  51E1               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  9006  0020EA  0101               	movlb	1	; () banked
  9007  0020EC  591D               	subwfb	(_IR2+1)& (0+255),w,b
  9008  0020EE  B0D8               	btfsc	status,0,c
  9009  0020F0  D006               	goto	l5094
  9010                           
  9011                           ; BSR set to: 1
  9012                           ;main.c: 699: measurement+=2;
  9013  0020F2  0E02               	movlw	2
  9014  0020F4  0100               	movlb	0	; () banked
  9015  0020F6  2792               	addwf	__measure@measurement& (0+255),f,b
  9016  0020F8  0E00               	movlw	0
  9017  0020FA  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  9018  0020FC  D006               	goto	l493
  9019  0020FE                     l5094:
  9020                           
  9021                           ;main.c: 700: else
  9022                           ;main.c: 701: return 0;
  9023  0020FE  0E00               	movlw	0
  9024  002100  0100               	movlb	0	; () banked
  9025  002102  6F87               	movwf	(?__measure+1)& (0+255),b
  9026  002104  0E00               	movlw	0
  9027  002106  6F86               	movwf	?__measure& (0+255),b
  9028                           
  9029                           ; BSR set to: 0
  9030  002108  0012               	return	
  9031  00210A                     l493:
  9032                           
  9033                           ; BSR set to: 0
  9034                           ;main.c: 703: return measurement;
  9035  00210A  C092  F086         	movff	__measure@measurement,?__measure
  9036  00210E  C093  F087         	movff	__measure@measurement+1,?__measure+1
  9037                           
  9038                           ; BSR set to: 0
  9039  002112  0012               	return		;funcret
  9040  002114                     __end_of__measure:
  9041                           	opt stack 0
  9042                           tosu	equ	0xFFF
  9043                           tosh	equ	0xFFE
  9044                           tosl	equ	0xFFD
  9045                           pclath	equ	0xFFA
  9046                           tblptru	equ	0xFF8
  9047                           tblptrh	equ	0xFF7
  9048                           tblptrl	equ	0xFF6
  9049                           tablat	equ	0xFF5
  9050                           prodh	equ	0xFF4
  9051                           prodl	equ	0xFF3
  9052                           intcon	equ	0xFF2
  9053                           intcon2	equ	0xFF1
  9054                           intcon3	equ	0xFF0
  9055                           indf0	equ	0xFEF
  9056                           postinc0	equ	0xFEE
  9057                           fsr0h	equ	0xFEA
  9058                           fsr0l	equ	0xFE9
  9059                           wreg	equ	0xFE8
  9060                           indf1	equ	0xFE7
  9061                           postinc1	equ	0xFE6
  9062                           postdec1	equ	0xFE5
  9063                           fsr1h	equ	0xFE2
  9064                           fsr1l	equ	0xFE1
  9065                           indf2	equ	0xFDF
  9066                           postinc2	equ	0xFDE
  9067                           postdec2	equ	0xFDD
  9068                           fsr2h	equ	0xFDA
  9069                           fsr2l	equ	0xFD9
  9070                           status	equ	0xFD8
  9071                           
  9072 ;; *************** function ___awmod *****************
  9073 ;; Defined at:
  9074 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9075 ;; Parameters:    Size  Location     Type
  9076 ;;  dividend        2    0[BANK0 ] int 
  9077 ;;  divisor         2    2[BANK0 ] int 
  9078 ;; Auto vars:     Size  Location     Type
  9079 ;;  sign            1    5[BANK0 ] unsigned char 
  9080 ;;  counter         1    4[BANK0 ] unsigned char 
  9081 ;; Return value:  Size  Location     Type
  9082 ;;                  2    0[BANK0 ] int 
  9083 ;; Registers used:
  9084 ;;		wreg, status,2, status,0
  9085 ;; Tracked objects:
  9086 ;;		On entry : 0/0
  9087 ;;		On exit  : 0/0
  9088 ;;		Unchanged: 0/0
  9089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9090 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;Total ram usage:        6 bytes
  9095 ;; Hardware stack levels used:    1
  9096 ;; Hardware stack levels required when called:    5
  9097 ;; This function calls:
  9098 ;;		Nothing
  9099 ;; This function is called by:
  9100 ;;		_update_display
  9101 ;;		_update_state
  9102 ;;		_sort
  9103 ;;		__measure
  9104 ;; This function uses a non-reentrant model
  9105 ;;
  9106                           
  9107                           	psect	text19
  9108  003572                     __ptext19:
  9109                           	opt stack 0
  9110  003572                     ___awmod:
  9111                           	opt stack 24
  9112                           
  9113                           ; BSR set to: 0
  9114                           ;incstack = 0
  9115  003572  0E00               	movlw	0
  9116  003574  0100               	movlb	0	; () banked
  9117  003576  6F85               	movwf	___awmod@sign& (0+255),b
  9118                           
  9119                           ; BSR set to: 0
  9120  003578  0100               	movlb	0	; () banked
  9121  00357A  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9122  00357C  D008               	goto	l4796
  9123                           
  9124                           ; BSR set to: 0
  9125  00357E  0100               	movlb	0	; () banked
  9126  003580  6D80               	negf	___awmod@dividend& (0+255),b
  9127  003582  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9128  003584  B0D8               	btfsc	status,0,c
  9129  003586  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9130                           
  9131                           ; BSR set to: 0
  9132  003588  0E01               	movlw	1
  9133  00358A  0100               	movlb	0	; () banked
  9134  00358C  6F85               	movwf	___awmod@sign& (0+255),b
  9135  00358E                     l4796:
  9136                           
  9137                           ; BSR set to: 0
  9138  00358E  0100               	movlb	0	; () banked
  9139  003590  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9140  003592  D005               	goto	l4800
  9141                           
  9142                           ; BSR set to: 0
  9143  003594  0100               	movlb	0	; () banked
  9144  003596  6D82               	negf	___awmod@divisor& (0+255),b
  9145  003598  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9146  00359A  B0D8               	btfsc	status,0,c
  9147  00359C  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9148  00359E                     l4800:
  9149                           
  9150                           ; BSR set to: 0
  9151  00359E  0100               	movlb	0	; () banked
  9152  0035A0  5182               	movf	___awmod@divisor& (0+255),w,b
  9153  0035A2  0100               	movlb	0	; () banked
  9154  0035A4  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9155  0035A6  B4D8               	btfsc	status,2,c
  9156  0035A8  D026               	goto	l4816
  9157                           
  9158                           ; BSR set to: 0
  9159  0035AA  0E01               	movlw	1
  9160  0035AC  0100               	movlb	0	; () banked
  9161  0035AE  6F84               	movwf	___awmod@counter& (0+255),b
  9162  0035B0  D006               	goto	l4806
  9163  0035B2                     l4804:
  9164                           
  9165                           ; BSR set to: 0
  9166  0035B2  0100               	movlb	0	; () banked
  9167  0035B4  90D8               	bcf	status,0,c
  9168  0035B6  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9169  0035B8  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9170  0035BA  0100               	movlb	0	; () banked
  9171  0035BC  2B84               	incf	___awmod@counter& (0+255),f,b
  9172  0035BE                     l4806:
  9173                           
  9174                           ; BSR set to: 0
  9175  0035BE  0100               	movlb	0	; () banked
  9176  0035C0  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9177  0035C2  D7F7               	goto	l4804
  9178  0035C4                     l4808:
  9179                           
  9180                           ; BSR set to: 0
  9181  0035C4  0100               	movlb	0	; () banked
  9182  0035C6  5182               	movf	___awmod@divisor& (0+255),w,b
  9183  0035C8  0100               	movlb	0	; () banked
  9184  0035CA  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9185  0035CC  0100               	movlb	0	; () banked
  9186  0035CE  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9187  0035D0  0100               	movlb	0	; () banked
  9188  0035D2  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9189  0035D4  A0D8               	btfss	status,0,c
  9190  0035D6  D008               	goto	l4812
  9191                           
  9192                           ; BSR set to: 0
  9193  0035D8  0100               	movlb	0	; () banked
  9194  0035DA  5182               	movf	___awmod@divisor& (0+255),w,b
  9195  0035DC  0100               	movlb	0	; () banked
  9196  0035DE  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9197  0035E0  0100               	movlb	0	; () banked
  9198  0035E2  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9199  0035E4  0100               	movlb	0	; () banked
  9200  0035E6  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9201  0035E8                     l4812:
  9202                           
  9203                           ; BSR set to: 0
  9204  0035E8  0100               	movlb	0	; () banked
  9205  0035EA  90D8               	bcf	status,0,c
  9206  0035EC  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9207  0035EE  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9208                           
  9209                           ; BSR set to: 0
  9210  0035F0  0100               	movlb	0	; () banked
  9211  0035F2  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9212  0035F4  D7E7               	goto	l4808
  9213  0035F6                     l4816:
  9214                           
  9215                           ; BSR set to: 0
  9216  0035F6  0100               	movlb	0	; () banked
  9217  0035F8  5185               	movf	___awmod@sign& (0+255),w,b
  9218  0035FA  0100               	movlb	0	; () banked
  9219  0035FC  B4D8               	btfsc	status,2,c
  9220  0035FE  D005               	goto	l4820
  9221                           
  9222                           ; BSR set to: 0
  9223  003600  0100               	movlb	0	; () banked
  9224  003602  6D80               	negf	___awmod@dividend& (0+255),b
  9225  003604  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9226  003606  B0D8               	btfsc	status,0,c
  9227  003608  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9228  00360A                     l4820:
  9229                           
  9230                           ; BSR set to: 0
  9231  00360A  C080  F080         	movff	___awmod@dividend,?___awmod
  9232  00360E  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9233  003612  0012               	return	
  9234  003614                     __end_of___awmod:
  9235                           	opt stack 0
  9236                           tosu	equ	0xFFF
  9237                           tosh	equ	0xFFE
  9238                           tosl	equ	0xFFD
  9239                           pclath	equ	0xFFA
  9240                           tblptru	equ	0xFF8
  9241                           tblptrh	equ	0xFF7
  9242                           tblptrl	equ	0xFF6
  9243                           tablat	equ	0xFF5
  9244                           prodh	equ	0xFF4
  9245                           prodl	equ	0xFF3
  9246                           intcon	equ	0xFF2
  9247                           intcon2	equ	0xFF1
  9248                           intcon3	equ	0xFF0
  9249                           indf0	equ	0xFEF
  9250                           postinc0	equ	0xFEE
  9251                           fsr0h	equ	0xFEA
  9252                           fsr0l	equ	0xFE9
  9253                           wreg	equ	0xFE8
  9254                           indf1	equ	0xFE7
  9255                           postinc1	equ	0xFE6
  9256                           postdec1	equ	0xFE5
  9257                           fsr1h	equ	0xFE2
  9258                           fsr1l	equ	0xFE1
  9259                           indf2	equ	0xFDF
  9260                           postinc2	equ	0xFDE
  9261                           postdec2	equ	0xFDD
  9262                           fsr2h	equ	0xFDA
  9263                           fsr2l	equ	0xFD9
  9264                           status	equ	0xFD8
  9265                           
  9266 ;; *************** function ___wmul *****************
  9267 ;; Defined at:
  9268 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  9269 ;; Parameters:    Size  Location     Type
  9270 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9271 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9272 ;; Auto vars:     Size  Location     Type
  9273 ;;  product         2    4[BANK0 ] unsigned int 
  9274 ;; Return value:  Size  Location     Type
  9275 ;;                  2    0[BANK0 ] unsigned int 
  9276 ;; Registers used:
  9277 ;;		wreg, status,2, status,0, prodl, prodh
  9278 ;; Tracked objects:
  9279 ;;		On entry : 0/0
  9280 ;;		On exit  : 0/0
  9281 ;;		Unchanged: 0/0
  9282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9283 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9284 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9285 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9286 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9287 ;;Total ram usage:        6 bytes
  9288 ;; Hardware stack levels used:    1
  9289 ;; Hardware stack levels required when called:    5
  9290 ;; This function calls:
  9291 ;;		Nothing
  9292 ;; This function is called by:
  9293 ;;		_update_RTC
  9294 ;;		_display_menu
  9295 ;;		_sort
  9296 ;;		__doprnt
  9297 ;; This function uses a non-reentrant model
  9298 ;;
  9299                           
  9300                           	psect	text20
  9301  003B40                     __ptext20:
  9302                           	opt stack 0
  9303  003B40                     ___wmul:
  9304                           	opt stack 22
  9305                           
  9306                           ; BSR set to: 0
  9307                           ;incstack = 0
  9308  003B40  0100               	movlb	0	; () banked
  9309  003B42  5180               	movf	___wmul@multiplier& (0+255),w,b
  9310  003B44  0100               	movlb	0	; () banked
  9311  003B46  0382               	mulwf	___wmul@multiplicand& (0+255),b
  9312  003B48  CFF3 F084          	movff	prodl,___wmul@product
  9313  003B4C  CFF4 F085          	movff	prodh,___wmul@product+1
  9314  003B50  0100               	movlb	0	; () banked
  9315  003B52  5180               	movf	___wmul@multiplier& (0+255),w,b
  9316  003B54  0100               	movlb	0	; () banked
  9317  003B56  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9318  003B58  50F3               	movf	prodl,w,c
  9319  003B5A  0100               	movlb	0	; () banked
  9320  003B5C  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  9321  003B5E  0100               	movlb	0	; () banked
  9322  003B60  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9323  003B62  0100               	movlb	0	; () banked
  9324  003B64  0382               	mulwf	___wmul@multiplicand& (0+255),b
  9325  003B66  50F3               	movf	prodl,w,c
  9326  003B68  0100               	movlb	0	; () banked
  9327  003B6A  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  9328                           
  9329                           ; BSR set to: 0
  9330  003B6C  C084  F080         	movff	___wmul@product,?___wmul
  9331  003B70  C085  F081         	movff	___wmul@product+1,?___wmul+1
  9332  003B74  0012               	return	
  9333  003B76                     __end_of___wmul:
  9334                           	opt stack 0
  9335                           tosu	equ	0xFFF
  9336                           tosh	equ	0xFFE
  9337                           tosl	equ	0xFFD
  9338                           pclath	equ	0xFFA
  9339                           tblptru	equ	0xFF8
  9340                           tblptrh	equ	0xFF7
  9341                           tblptrl	equ	0xFF6
  9342                           tablat	equ	0xFF5
  9343                           prodh	equ	0xFF4
  9344                           prodl	equ	0xFF3
  9345                           intcon	equ	0xFF2
  9346                           intcon2	equ	0xFF1
  9347                           intcon3	equ	0xFF0
  9348                           indf0	equ	0xFEF
  9349                           postinc0	equ	0xFEE
  9350                           fsr0h	equ	0xFEA
  9351                           fsr0l	equ	0xFE9
  9352                           wreg	equ	0xFE8
  9353                           indf1	equ	0xFE7
  9354                           postinc1	equ	0xFE6
  9355                           postdec1	equ	0xFE5
  9356                           fsr1h	equ	0xFE2
  9357                           fsr1l	equ	0xFE1
  9358                           indf2	equ	0xFDF
  9359                           postinc2	equ	0xFDE
  9360                           postdec2	equ	0xFDD
  9361                           fsr2h	equ	0xFDA
  9362                           fsr2l	equ	0xFD9
  9363                           status	equ	0xFD8
  9364                           
  9365 ;; *************** function _set_time *****************
  9366 ;; Defined at:
  9367 ;;		line 471 in file "main.c"
  9368 ;; Parameters:    Size  Location     Type
  9369 ;;		None
  9370 ;; Auto vars:     Size  Location     Type
  9371 ;;  i               1    3[BANK0 ] unsigned char 
  9372 ;; Return value:  Size  Location     Type
  9373 ;;                  1    wreg      void 
  9374 ;; Registers used:
  9375 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9376 ;; Tracked objects:
  9377 ;;		On entry : 0/0
  9378 ;;		On exit  : 0/0
  9379 ;;		Unchanged: 0/0
  9380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9381 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9384 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9385 ;;Total ram usage:        1 bytes
  9386 ;; Hardware stack levels used:    1
  9387 ;; Hardware stack levels required when called:    7
  9388 ;; This function calls:
  9389 ;;		_I2C_Master_Start
  9390 ;;		_I2C_Master_Stop
  9391 ;;		_I2C_Master_Write
  9392 ;; This function is called by:
  9393 ;;		_main
  9394 ;; This function uses a non-reentrant model
  9395 ;;
  9396                           
  9397                           	psect	text21
  9398  003858                     __ptext21:
  9399                           	opt stack 0
  9400  003858                     _set_time:
  9401                           	opt stack 23
  9402                           
  9403                           ;main.c: 472: I2C_Master_Start();
  9404                           
  9405                           ; BSR set to: 0
  9406                           ;incstack = 0
  9407  003858  EC93  F01E         	call	_I2C_Master_Start	;wreg free
  9408                           
  9409                           ;main.c: 473: I2C_Master_Write(0b11010000);
  9410  00385C  0E00               	movlw	0
  9411  00385E  0100               	movlb	0	; () banked
  9412  003860  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9413  003862  0ED0               	movlw	208
  9414  003864  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9415  003866  EC8A  F01E         	call	_I2C_Master_Write	;wreg free
  9416                           
  9417                           ;main.c: 474: I2C_Master_Write(0x00);
  9418  00386A  0E00               	movlw	0
  9419  00386C  0100               	movlb	0	; () banked
  9420  00386E  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  9421  003870  0E00               	movlw	0
  9422  003872  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9423  003874  EC8A  F01E         	call	_I2C_Master_Write	;wreg free
  9424                           
  9425                           ;main.c: 475: for(char i=0; i<7; i++){
  9426  003878  0E00               	movlw	0
  9427  00387A  0100               	movlb	0	; () banked
  9428  00387C  6F83               	movwf	set_time@i& (0+255),b
  9429  00387E                     l5414:
  9430                           
  9431                           ; BSR set to: 0
  9432  00387E  0E06               	movlw	6
  9433  003880  0100               	movlb	0	; () banked
  9434  003882  6583               	cpfsgt	set_time@i& (0+255),b
  9435  003884  D001               	goto	l5418
  9436  003886  D016               	goto	l5424
  9437  003888                     l5418:
  9438                           
  9439                           ; BSR set to: 0
  9440                           ;main.c: 476: I2C_Master_Write(manualDateTime[i]);
  9441  003888  0100               	movlb	0	; () banked
  9442  00388A  5183               	movf	set_time@i& (0+255),w,b
  9443  00388C  0D01               	mullw	1
  9444  00388E  0E7A               	movlw	low _manualDateTime
  9445  003890  24F3               	addwf	prodl,w,c
  9446  003892  6EF6               	movwf	tblptrl,c
  9447  003894  0EFE               	movlw	high _manualDateTime
  9448  003896  20F4               	addwfc	prodh,w,c
  9449  003898  6EF7               	movwf	tblptrh,c
  9450  00389A                     	if	1	;There are 3 active tblptr bytes
  9451  00389A  6AF8               	clrf	tblptru,c
  9452  00389C  0E00               	movlw	low (__mediumconst shr (0+16))
  9453  00389E  22F8               	addwfc	tblptru,f,c
  9454  0038A0                     	endif
  9455  0038A0  0008               	tblrd		*
  9456  0038A2  50F5               	movf	tablat,w,c
  9457  0038A4  0100               	movlb	0	; () banked
  9458  0038A6  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  9459  0038A8  6B82               	clrf	(I2C_Master_Write@d+1)& (0+255),b
  9460  0038AA  EC8A  F01E         	call	_I2C_Master_Write	;wreg free
  9461  0038AE  0100               	movlb	0	; () banked
  9462  0038B0  2B83               	incf	set_time@i& (0+255),f,b
  9463  0038B2  D7E5               	goto	l5414
  9464  0038B4                     l5424:
  9465                           
  9466                           ; BSR set to: 0
  9467                           ;main.c: 477: }
  9468                           ;main.c: 478: I2C_Master_Stop();
  9469  0038B4  EC8F  F01E         	call	_I2C_Master_Stop	;wreg free
  9470  0038B8  0012               	return		;funcret
  9471  0038BA                     __end_of_set_time:
  9472                           	opt stack 0
  9473                           tosu	equ	0xFFF
  9474                           tosh	equ	0xFFE
  9475                           tosl	equ	0xFFD
  9476                           pclath	equ	0xFFA
  9477                           tblptru	equ	0xFF8
  9478                           tblptrh	equ	0xFF7
  9479                           tblptrl	equ	0xFF6
  9480                           tablat	equ	0xFF5
  9481                           prodh	equ	0xFF4
  9482                           prodl	equ	0xFF3
  9483                           intcon	equ	0xFF2
  9484                           intcon2	equ	0xFF1
  9485                           intcon3	equ	0xFF0
  9486                           indf0	equ	0xFEF
  9487                           postinc0	equ	0xFEE
  9488                           fsr0h	equ	0xFEA
  9489                           fsr0l	equ	0xFE9
  9490                           wreg	equ	0xFE8
  9491                           indf1	equ	0xFE7
  9492                           postinc1	equ	0xFE6
  9493                           postdec1	equ	0xFE5
  9494                           fsr1h	equ	0xFE2
  9495                           fsr1l	equ	0xFE1
  9496                           indf2	equ	0xFDF
  9497                           postinc2	equ	0xFDE
  9498                           postdec2	equ	0xFDD
  9499                           fsr2h	equ	0xFDA
  9500                           fsr2l	equ	0xFD9
  9501                           status	equ	0xFD8
  9502                           
  9503 ;; *************** function _I2C_Master_Write *****************
  9504 ;; Defined at:
  9505 ;;		line 47 in file "I2C.c"
  9506 ;; Parameters:    Size  Location     Type
  9507 ;;  d               2    1[BANK0 ] unsigned int 
  9508 ;; Auto vars:     Size  Location     Type
  9509 ;;		None
  9510 ;; Return value:  Size  Location     Type
  9511 ;;                  1    wreg      void 
  9512 ;; Registers used:
  9513 ;;		wreg, status,2, status,0, cstack
  9514 ;; Tracked objects:
  9515 ;;		On entry : 0/0
  9516 ;;		On exit  : 0/0
  9517 ;;		Unchanged: 0/0
  9518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9519 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9522 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9523 ;;Total ram usage:        2 bytes
  9524 ;; Hardware stack levels used:    1
  9525 ;; Hardware stack levels required when called:    6
  9526 ;; This function calls:
  9527 ;;		_I2C_Master_Wait
  9528 ;; This function is called by:
  9529 ;;		_update_RTC
  9530 ;;		_set_time
  9531 ;; This function uses a non-reentrant model
  9532 ;;
  9533                           
  9534                           	psect	text22
  9535  003D14                     __ptext22:
  9536                           	opt stack 0
  9537  003D14                     _I2C_Master_Write:
  9538                           	opt stack 23
  9539                           
  9540                           ;I2C.c: 49: I2C_Master_Wait();
  9541                           
  9542                           ;incstack = 0
  9543  003D14  EC6C  F01E         	call	_I2C_Master_Wait	;wreg free
  9544                           
  9545                           ;I2C.c: 50: SSPBUF = d;
  9546  003D18  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  9547  003D1C  0012               	return		;funcret
  9548  003D1E                     __end_of_I2C_Master_Write:
  9549                           	opt stack 0
  9550                           tosu	equ	0xFFF
  9551                           tosh	equ	0xFFE
  9552                           tosl	equ	0xFFD
  9553                           pclath	equ	0xFFA
  9554                           tblptru	equ	0xFF8
  9555                           tblptrh	equ	0xFF7
  9556                           tblptrl	equ	0xFF6
  9557                           tablat	equ	0xFF5
  9558                           prodh	equ	0xFF4
  9559                           prodl	equ	0xFF3
  9560                           intcon	equ	0xFF2
  9561                           intcon2	equ	0xFF1
  9562                           intcon3	equ	0xFF0
  9563                           indf0	equ	0xFEF
  9564                           postinc0	equ	0xFEE
  9565                           fsr0h	equ	0xFEA
  9566                           fsr0l	equ	0xFE9
  9567                           wreg	equ	0xFE8
  9568                           indf1	equ	0xFE7
  9569                           postinc1	equ	0xFE6
  9570                           postdec1	equ	0xFE5
  9571                           fsr1h	equ	0xFE2
  9572                           fsr1l	equ	0xFE1
  9573                           indf2	equ	0xFDF
  9574                           postinc2	equ	0xFDE
  9575                           postdec2	equ	0xFDD
  9576                           fsr2h	equ	0xFDA
  9577                           fsr2l	equ	0xFD9
  9578                           status	equ	0xFD8
  9579                           
  9580 ;; *************** function _I2C_Master_Stop *****************
  9581 ;; Defined at:
  9582 ;;		line 41 in file "I2C.c"
  9583 ;; Parameters:    Size  Location     Type
  9584 ;;		None
  9585 ;; Auto vars:     Size  Location     Type
  9586 ;;		None
  9587 ;; Return value:  Size  Location     Type
  9588 ;;                  1    wreg      void 
  9589 ;; Registers used:
  9590 ;;		wreg, status,2, status,0, cstack
  9591 ;; Tracked objects:
  9592 ;;		On entry : 0/0
  9593 ;;		On exit  : 0/0
  9594 ;;		Unchanged: 0/0
  9595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9600 ;;Total ram usage:        0 bytes
  9601 ;; Hardware stack levels used:    1
  9602 ;; Hardware stack levels required when called:    6
  9603 ;; This function calls:
  9604 ;;		_I2C_Master_Wait
  9605 ;; This function is called by:
  9606 ;;		_update_RTC
  9607 ;;		_set_time
  9608 ;; This function uses a non-reentrant model
  9609 ;;
  9610                           
  9611                           	psect	text23
  9612  003D1E                     __ptext23:
  9613                           	opt stack 0
  9614  003D1E                     _I2C_Master_Stop:
  9615                           	opt stack 23
  9616                           
  9617                           ;I2C.c: 43: I2C_Master_Wait();
  9618                           
  9619                           ;incstack = 0
  9620  003D1E  EC6C  F01E         	call	_I2C_Master_Wait	;wreg free
  9621                           
  9622                           ;I2C.c: 44: PEN = 1;
  9623  003D22  84C5               	bsf	4037,2,c	;volatile
  9624  003D24  0012               	return		;funcret
  9625  003D26                     __end_of_I2C_Master_Stop:
  9626                           	opt stack 0
  9627                           tosu	equ	0xFFF
  9628                           tosh	equ	0xFFE
  9629                           tosl	equ	0xFFD
  9630                           pclath	equ	0xFFA
  9631                           tblptru	equ	0xFF8
  9632                           tblptrh	equ	0xFF7
  9633                           tblptrl	equ	0xFF6
  9634                           tablat	equ	0xFF5
  9635                           prodh	equ	0xFF4
  9636                           prodl	equ	0xFF3
  9637                           intcon	equ	0xFF2
  9638                           intcon2	equ	0xFF1
  9639                           intcon3	equ	0xFF0
  9640                           indf0	equ	0xFEF
  9641                           postinc0	equ	0xFEE
  9642                           fsr0h	equ	0xFEA
  9643                           fsr0l	equ	0xFE9
  9644                           wreg	equ	0xFE8
  9645                           indf1	equ	0xFE7
  9646                           postinc1	equ	0xFE6
  9647                           postdec1	equ	0xFE5
  9648                           fsr1h	equ	0xFE2
  9649                           fsr1l	equ	0xFE1
  9650                           indf2	equ	0xFDF
  9651                           postinc2	equ	0xFDE
  9652                           postdec2	equ	0xFDD
  9653                           fsr2h	equ	0xFDA
  9654                           fsr2l	equ	0xFD9
  9655                           status	equ	0xFD8
  9656                           
  9657 ;; *************** function _I2C_Master_Start *****************
  9658 ;; Defined at:
  9659 ;;		line 29 in file "I2C.c"
  9660 ;; Parameters:    Size  Location     Type
  9661 ;;		None
  9662 ;; Auto vars:     Size  Location     Type
  9663 ;;		None
  9664 ;; Return value:  Size  Location     Type
  9665 ;;                  1    wreg      void 
  9666 ;; Registers used:
  9667 ;;		wreg, status,2, status,0, cstack
  9668 ;; Tracked objects:
  9669 ;;		On entry : 0/0
  9670 ;;		On exit  : 0/0
  9671 ;;		Unchanged: 0/0
  9672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9676 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9677 ;;Total ram usage:        0 bytes
  9678 ;; Hardware stack levels used:    1
  9679 ;; Hardware stack levels required when called:    6
  9680 ;; This function calls:
  9681 ;;		_I2C_Master_Wait
  9682 ;; This function is called by:
  9683 ;;		_update_RTC
  9684 ;;		_set_time
  9685 ;; This function uses a non-reentrant model
  9686 ;;
  9687                           
  9688                           	psect	text24
  9689  003D26                     __ptext24:
  9690                           	opt stack 0
  9691  003D26                     _I2C_Master_Start:
  9692                           	opt stack 23
  9693                           
  9694                           ;I2C.c: 31: I2C_Master_Wait();
  9695                           
  9696                           ;incstack = 0
  9697  003D26  EC6C  F01E         	call	_I2C_Master_Wait	;wreg free
  9698                           
  9699                           ;I2C.c: 32: SEN = 1;
  9700  003D2A  80C5               	bsf	4037,0,c	;volatile
  9701  003D2C  0012               	return		;funcret
  9702  003D2E                     __end_of_I2C_Master_Start:
  9703                           	opt stack 0
  9704                           tosu	equ	0xFFF
  9705                           tosh	equ	0xFFE
  9706                           tosl	equ	0xFFD
  9707                           pclath	equ	0xFFA
  9708                           tblptru	equ	0xFF8
  9709                           tblptrh	equ	0xFF7
  9710                           tblptrl	equ	0xFF6
  9711                           tablat	equ	0xFF5
  9712                           prodh	equ	0xFF4
  9713                           prodl	equ	0xFF3
  9714                           intcon	equ	0xFF2
  9715                           intcon2	equ	0xFF1
  9716                           intcon3	equ	0xFF0
  9717                           indf0	equ	0xFEF
  9718                           postinc0	equ	0xFEE
  9719                           fsr0h	equ	0xFEA
  9720                           fsr0l	equ	0xFE9
  9721                           wreg	equ	0xFE8
  9722                           indf1	equ	0xFE7
  9723                           postinc1	equ	0xFE6
  9724                           postdec1	equ	0xFE5
  9725                           fsr1h	equ	0xFE2
  9726                           fsr1l	equ	0xFE1
  9727                           indf2	equ	0xFDF
  9728                           postinc2	equ	0xFDE
  9729                           postdec2	equ	0xFDD
  9730                           fsr2h	equ	0xFDA
  9731                           fsr2l	equ	0xFD9
  9732                           status	equ	0xFD8
  9733                           
  9734 ;; *************** function _I2C_Master_Wait *****************
  9735 ;; Defined at:
  9736 ;;		line 24 in file "I2C.c"
  9737 ;; Parameters:    Size  Location     Type
  9738 ;;		None
  9739 ;; Auto vars:     Size  Location     Type
  9740 ;;		None
  9741 ;; Return value:  Size  Location     Type
  9742 ;;                  1    wreg      void 
  9743 ;; Registers used:
  9744 ;;		wreg, status,2, status,0
  9745 ;; Tracked objects:
  9746 ;;		On entry : 0/0
  9747 ;;		On exit  : 0/0
  9748 ;;		Unchanged: 0/0
  9749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9752 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9753 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9754 ;;Total ram usage:        1 bytes
  9755 ;; Hardware stack levels used:    1
  9756 ;; Hardware stack levels required when called:    5
  9757 ;; This function calls:
  9758 ;;		Nothing
  9759 ;; This function is called by:
  9760 ;;		_I2C_Master_Start
  9761 ;;		_I2C_Master_Stop
  9762 ;;		_I2C_Master_Write
  9763 ;;		_I2C_Master_Read
  9764 ;;		_I2C_Master_RepeatedStart
  9765 ;; This function uses a non-reentrant model
  9766 ;;
  9767                           
  9768                           	psect	text25
  9769  003CD8                     __ptext25:
  9770                           	opt stack 0
  9771  003CD8                     _I2C_Master_Wait:
  9772                           	opt stack 23
  9773  003CD8                     l34:
  9774  003CD8  B4C7               	btfsc	4039,2,c	;volatile
  9775  003CDA  D7FE               	goto	l34
  9776  003CDC  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  9777  003CE0  0E1F               	movlw	31
  9778  003CE2  0100               	movlb	0	; () banked
  9779  003CE4  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  9780  003CE6  B4D8               	btfsc	status,2,c
  9781  003CE8  0012               	return	
  9782  003CEA  D7F6               	goto	l34
  9783  003CEC                     __end_of_I2C_Master_Wait:
  9784                           	opt stack 0
  9785                           tosu	equ	0xFFF
  9786                           tosh	equ	0xFFE
  9787                           tosl	equ	0xFFD
  9788                           pclath	equ	0xFFA
  9789                           tblptru	equ	0xFF8
  9790                           tblptrh	equ	0xFF7
  9791                           tblptrl	equ	0xFF6
  9792                           tablat	equ	0xFF5
  9793                           prodh	equ	0xFF4
  9794                           prodl	equ	0xFF3
  9795                           intcon	equ	0xFF2
  9796                           intcon2	equ	0xFF1
  9797                           intcon3	equ	0xFF0
  9798                           indf0	equ	0xFEF
  9799                           postinc0	equ	0xFEE
  9800                           fsr0h	equ	0xFEA
  9801                           fsr0l	equ	0xFE9
  9802                           wreg	equ	0xFE8
  9803                           indf1	equ	0xFE7
  9804                           postinc1	equ	0xFE6
  9805                           postdec1	equ	0xFE5
  9806                           fsr1h	equ	0xFE2
  9807                           fsr1l	equ	0xFE1
  9808                           indf2	equ	0xFDF
  9809                           postinc2	equ	0xFDE
  9810                           postdec2	equ	0xFDD
  9811                           fsr2h	equ	0xFDA
  9812                           fsr2l	equ	0xFD9
  9813                           status	equ	0xFD8
  9814                           
  9815 ;; *************** function _read_sensors *****************
  9816 ;; Defined at:
  9817 ;;		line 482 in file "main.c"
  9818 ;; Parameters:    Size  Location     Type
  9819 ;;		None
  9820 ;; Auto vars:     Size  Location     Type
  9821 ;;  i               1    6[BANK0 ] unsigned char 
  9822 ;; Return value:  Size  Location     Type
  9823 ;;                  1    wreg      void 
  9824 ;; Registers used:
  9825 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9826 ;; Tracked objects:
  9827 ;;		On entry : 0/0
  9828 ;;		On exit  : 0/0
  9829 ;;		Unchanged: 0/0
  9830 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9832 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9833 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9834 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9835 ;;Total ram usage:        5 bytes
  9836 ;; Hardware stack levels used:    1
  9837 ;; Hardware stack levels required when called:    6
  9838 ;; This function calls:
  9839 ;;		_readADC
  9840 ;; This function is called by:
  9841 ;;		_main
  9842 ;; This function uses a non-reentrant model
  9843 ;;
  9844                           
  9845                           	psect	text26
  9846  002E58                     __ptext26:
  9847                           	opt stack 0
  9848  002E58                     _read_sensors:
  9849                           	opt stack 24
  9850                           
  9851                           ;main.c: 483: if (state!='s'){
  9852                           
  9853                           ; BSR set to: 0
  9854                           ;incstack = 0
  9855  002E58  0E73               	movlw	115
  9856  002E5A  0100               	movlb	0	; () banked
  9857  002E5C  19E5               	xorwf	_state& (0+255),w,b
  9858  002E5E  A4D8               	btfss	status,2,c
  9859  002E60  0012               	return	
  9860                           
  9861                           ; BSR set to: 0
  9862                           ;main.c: 485: }
  9863                           ;main.c: 487: for(char i=5-1;i>0;i--){
  9864                           
  9865                           ; BSR set to: 0
  9866                           
  9867                           ; BSR set to: 0
  9868                           ;main.c: 484: return;
  9869  002E62  0E04               	movlw	4
  9870  002E64  0100               	movlb	0	; () banked
  9871  002E66  6F86               	movwf	read_sensors@i& (0+255),b
  9872  002E68  0100               	movlb	0	; () banked
  9873  002E6A  5186               	movf	read_sensors@i& (0+255),w,b
  9874  002E6C  0100               	movlb	0	; () banked
  9875  002E6E  B4D8               	btfsc	status,2,c
  9876  002E70  D0DF               	goto	l5462
  9877                           
  9878                           ; BSR set to: 0
  9879                           ;main.c: 488: PROX1[i]=PROX1[i-1];
  9880                           
  9881                           ; BSR set to: 0
  9882                           
  9883                           ; BSR set to: 0
  9884  002E72  0EFE               	movlw	254
  9885  002E74  0100               	movlb	0	; () banked
  9886  002E76  6F82               	movwf	??_read_sensors& (0+255),b
  9887  002E78  0EFF               	movlw	255
  9888  002E7A  0100               	movlb	0	; () banked
  9889  002E7C  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9890  002E7E  0100               	movlb	0	; () banked
  9891  002E80  5186               	movf	read_sensors@i& (0+255),w,b
  9892  002E82  0100               	movlb	0	; () banked
  9893  002E84  6F84               	movwf	(??_read_sensors+2)& (0+255),b
  9894  002E86  6B85               	clrf	(??_read_sensors+3)& (0+255),b
  9895  002E88  90D8               	bcf	status,0,c
  9896  002E8A  0100               	movlb	0	; () banked
  9897  002E8C  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
  9898  002E8E  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
  9899  002E90  0100               	movlb	0	; () banked
  9900  002E92  5182               	movf	??_read_sensors& (0+255),w,b
  9901  002E94  0100               	movlb	0	; () banked
  9902  002E96  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
  9903  002E98  0100               	movlb	0	; () banked
  9904  002E9A  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9905  002E9C  0100               	movlb	0	; () banked
  9906  002E9E  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
  9907  002EA0  0EBA               	movlw	low _PROX1
  9908  002EA2  0100               	movlb	0	; () banked
  9909  002EA4  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
  9910  002EA6  6ED9               	movwf	fsr2l,c
  9911  002EA8  0E00               	movlw	high _PROX1
  9912  002EAA  0100               	movlb	0	; () banked
  9913  002EAC  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
  9914  002EAE  6EDA               	movwf	fsr2h,c
  9915  002EB0  0100               	movlb	0	; () banked
  9916  002EB2  5186               	movf	read_sensors@i& (0+255),w,b
  9917  002EB4  0D02               	mullw	2
  9918  002EB6  0EBA               	movlw	low _PROX1
  9919  002EB8  24F3               	addwf	prodl,w,c
  9920  002EBA  6EE1               	movwf	fsr1l,c
  9921  002EBC  0E00               	movlw	high _PROX1
  9922  002EBE  20F4               	addwfc	prodh,w,c
  9923  002EC0  6EE2               	movwf	fsr1h,c
  9924  002EC2  CFDE FFE6          	movff	postinc2,postinc1
  9925  002EC6  CFDD FFE5          	movff	postdec2,postdec1
  9926                           
  9927                           ;main.c: 489: PROX2[i]=PROX2[i-1];
  9928  002ECA  0EFE               	movlw	254
  9929  002ECC  0100               	movlb	0	; () banked
  9930  002ECE  6F82               	movwf	??_read_sensors& (0+255),b
  9931  002ED0  0EFF               	movlw	255
  9932  002ED2  0100               	movlb	0	; () banked
  9933  002ED4  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9934  002ED6  0100               	movlb	0	; () banked
  9935  002ED8  5186               	movf	read_sensors@i& (0+255),w,b
  9936  002EDA  0100               	movlb	0	; () banked
  9937  002EDC  6F84               	movwf	(??_read_sensors+2)& (0+255),b
  9938  002EDE  6B85               	clrf	(??_read_sensors+3)& (0+255),b
  9939  002EE0  90D8               	bcf	status,0,c
  9940  002EE2  0100               	movlb	0	; () banked
  9941  002EE4  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
  9942  002EE6  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
  9943  002EE8  0100               	movlb	0	; () banked
  9944  002EEA  5182               	movf	??_read_sensors& (0+255),w,b
  9945  002EEC  0100               	movlb	0	; () banked
  9946  002EEE  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
  9947  002EF0  0100               	movlb	0	; () banked
  9948  002EF2  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9949  002EF4  0100               	movlb	0	; () banked
  9950  002EF6  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
  9951  002EF8  0E60               	movlw	low _PROX2
  9952  002EFA  0100               	movlb	0	; () banked
  9953  002EFC  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
  9954  002EFE  6ED9               	movwf	fsr2l,c
  9955  002F00  0E00               	movlw	high _PROX2
  9956  002F02  0100               	movlb	0	; () banked
  9957  002F04  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
  9958  002F06  6EDA               	movwf	fsr2h,c
  9959  002F08  0100               	movlb	0	; () banked
  9960  002F0A  5186               	movf	read_sensors@i& (0+255),w,b
  9961  002F0C  0D02               	mullw	2
  9962  002F0E  0E60               	movlw	low _PROX2
  9963  002F10  24F3               	addwf	prodl,w,c
  9964  002F12  6EE1               	movwf	fsr1l,c
  9965  002F14  0E00               	movlw	high _PROX2
  9966  002F16  20F4               	addwfc	prodh,w,c
  9967  002F18  6EE2               	movwf	fsr1h,c
  9968  002F1A  CFDE FFE6          	movff	postinc2,postinc1
  9969  002F1E  CFDD FFE5          	movff	postdec2,postdec1
  9970                           
  9971                           ;main.c: 490: DIST1[i]=DIST1[i-1];
  9972  002F22  0EFE               	movlw	254
  9973  002F24  0100               	movlb	0	; () banked
  9974  002F26  6F82               	movwf	??_read_sensors& (0+255),b
  9975  002F28  0EFF               	movlw	255
  9976  002F2A  0100               	movlb	0	; () banked
  9977  002F2C  6F83               	movwf	(??_read_sensors+1)& (0+255),b
  9978  002F2E  0100               	movlb	0	; () banked
  9979  002F30  5186               	movf	read_sensors@i& (0+255),w,b
  9980  002F32  0100               	movlb	0	; () banked
  9981  002F34  6F84               	movwf	(??_read_sensors+2)& (0+255),b
  9982  002F36  6B85               	clrf	(??_read_sensors+3)& (0+255),b
  9983  002F38  90D8               	bcf	status,0,c
  9984  002F3A  0100               	movlb	0	; () banked
  9985  002F3C  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
  9986  002F3E  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
  9987  002F40  0100               	movlb	0	; () banked
  9988  002F42  5182               	movf	??_read_sensors& (0+255),w,b
  9989  002F44  0100               	movlb	0	; () banked
  9990  002F46  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
  9991  002F48  0100               	movlb	0	; () banked
  9992  002F4A  5183               	movf	(??_read_sensors+1)& (0+255),w,b
  9993  002F4C  0100               	movlb	0	; () banked
  9994  002F4E  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
  9995  002F50  0E4C               	movlw	low _DIST1
  9996  002F52  0100               	movlb	0	; () banked
  9997  002F54  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
  9998  002F56  6ED9               	movwf	fsr2l,c
  9999  002F58  0E00               	movlw	high _DIST1
 10000  002F5A  0100               	movlb	0	; () banked
 10001  002F5C  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
 10002  002F5E  6EDA               	movwf	fsr2h,c
 10003  002F60  0100               	movlb	0	; () banked
 10004  002F62  5186               	movf	read_sensors@i& (0+255),w,b
 10005  002F64  0D02               	mullw	2
 10006  002F66  0E4C               	movlw	low _DIST1
 10007  002F68  24F3               	addwf	prodl,w,c
 10008  002F6A  6EE1               	movwf	fsr1l,c
 10009  002F6C  0E00               	movlw	high _DIST1
 10010  002F6E  20F4               	addwfc	prodh,w,c
 10011  002F70  6EE2               	movwf	fsr1h,c
 10012  002F72  CFDE FFE6          	movff	postinc2,postinc1
 10013  002F76  CFDD FFE5          	movff	postdec2,postdec1
 10014                           
 10015                           ;main.c: 491: IR1[i]=IR1[i-1];
 10016  002F7A  0EFE               	movlw	254
 10017  002F7C  0100               	movlb	0	; () banked
 10018  002F7E  6F82               	movwf	??_read_sensors& (0+255),b
 10019  002F80  0EFF               	movlw	255
 10020  002F82  0100               	movlb	0	; () banked
 10021  002F84  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10022  002F86  0100               	movlb	0	; () banked
 10023  002F88  5186               	movf	read_sensors@i& (0+255),w,b
 10024  002F8A  0100               	movlb	0	; () banked
 10025  002F8C  6F84               	movwf	(??_read_sensors+2)& (0+255),b
 10026  002F8E  6B85               	clrf	(??_read_sensors+3)& (0+255),b
 10027  002F90  90D8               	bcf	status,0,c
 10028  002F92  0100               	movlb	0	; () banked
 10029  002F94  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
 10030  002F96  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
 10031  002F98  0100               	movlb	0	; () banked
 10032  002F9A  5182               	movf	??_read_sensors& (0+255),w,b
 10033  002F9C  0100               	movlb	0	; () banked
 10034  002F9E  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
 10035  002FA0  0100               	movlb	0	; () banked
 10036  002FA2  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10037  002FA4  0100               	movlb	0	; () banked
 10038  002FA6  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
 10039  002FA8  0E56               	movlw	low _IR1
 10040  002FAA  0100               	movlb	0	; () banked
 10041  002FAC  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
 10042  002FAE  6ED9               	movwf	fsr2l,c
 10043  002FB0  0E00               	movlw	high _IR1
 10044  002FB2  0100               	movlb	0	; () banked
 10045  002FB4  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
 10046  002FB6  6EDA               	movwf	fsr2h,c
 10047  002FB8  0100               	movlb	0	; () banked
 10048  002FBA  5186               	movf	read_sensors@i& (0+255),w,b
 10049  002FBC  0D02               	mullw	2
 10050  002FBE  0E56               	movlw	low _IR1
 10051  002FC0  24F3               	addwf	prodl,w,c
 10052  002FC2  6EE1               	movwf	fsr1l,c
 10053  002FC4  0E00               	movlw	high _IR1
 10054  002FC6  20F4               	addwfc	prodh,w,c
 10055  002FC8  6EE2               	movwf	fsr1h,c
 10056  002FCA  CFDE FFE6          	movff	postinc2,postinc1
 10057  002FCE  CFDD FFE5          	movff	postdec2,postdec1
 10058                           
 10059                           ;main.c: 492: IR2[i]=IR2[i-1];
 10060  002FD2  0EFE               	movlw	254
 10061  002FD4  0100               	movlb	0	; () banked
 10062  002FD6  6F82               	movwf	??_read_sensors& (0+255),b
 10063  002FD8  0EFF               	movlw	255
 10064  002FDA  0100               	movlb	0	; () banked
 10065  002FDC  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10066  002FDE  0100               	movlb	0	; () banked
 10067  002FE0  5186               	movf	read_sensors@i& (0+255),w,b
 10068  002FE2  0100               	movlb	0	; () banked
 10069  002FE4  6F84               	movwf	(??_read_sensors+2)& (0+255),b
 10070  002FE6  6B85               	clrf	(??_read_sensors+3)& (0+255),b
 10071  002FE8  90D8               	bcf	status,0,c
 10072  002FEA  0100               	movlb	0	; () banked
 10073  002FEC  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
 10074  002FEE  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
 10075  002FF0  0100               	movlb	0	; () banked
 10076  002FF2  5182               	movf	??_read_sensors& (0+255),w,b
 10077  002FF4  0100               	movlb	0	; () banked
 10078  002FF6  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
 10079  002FF8  0100               	movlb	0	; () banked
 10080  002FFA  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10081  002FFC  0100               	movlb	0	; () banked
 10082  002FFE  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
 10083  003000  0E1C               	movlw	low _IR2
 10084  003002  0100               	movlb	0	; () banked
 10085  003004  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
 10086  003006  6ED9               	movwf	fsr2l,c
 10087  003008  0E01               	movlw	high _IR2
 10088  00300A  0100               	movlb	0	; () banked
 10089  00300C  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
 10090  00300E  6EDA               	movwf	fsr2h,c
 10091  003010  0100               	movlb	0	; () banked
 10092  003012  5186               	movf	read_sensors@i& (0+255),w,b
 10093  003014  0D02               	mullw	2
 10094  003016  0E1C               	movlw	low _IR2
 10095  003018  24F3               	addwf	prodl,w,c
 10096  00301A  6EE1               	movwf	fsr1l,c
 10097  00301C  0E01               	movlw	high _IR2
 10098  00301E  20F4               	addwfc	prodh,w,c
 10099  003020  6EE2               	movwf	fsr1h,c
 10100  003022  CFDE FFE6          	movff	postinc2,postinc1
 10101  003026  CFDD FFE5          	movff	postdec2,postdec1
 10102                           
 10103                           ; BSR set to: 0
 10104  00302A  0100               	movlb	0	; () banked
 10105  00302C  0786               	decf	read_sensors@i& (0+255),f,b
 10106  00302E  D71C               	goto	L4
 10107  003030                     l5462:
 10108                           
 10109                           ; BSR set to: 0
 10110                           ;main.c: 493: }
 10111                           ;main.c: 498: readADC(DIST1_PIN);
 10112  003030  5071               	movf	_DIST1_PIN,w,c
 10113  003032  EC06  F01E         	call	_readADC
 10114                           
 10115                           ;main.c: 499: DIST1[0]=16*16*ADRESH+ADRESL;
 10116  003036  50C4               	movf	4036,w,c	;volatile
 10117  003038  0100               	movlb	0	; () banked
 10118  00303A  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10119  00303C  6B82               	clrf	??_read_sensors& (0+255),b
 10120  00303E  50C3               	movf	4035,w,c	;volatile
 10121  003040  0100               	movlb	0	; () banked
 10122  003042  2582               	addwf	??_read_sensors& (0+255),w,b
 10123  003044  6E4C               	movwf	_DIST1,c
 10124  003046  0E00               	movlw	0
 10125  003048  0100               	movlb	0	; () banked
 10126  00304A  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
 10127  00304C  6E4D               	movwf	_DIST1+1,c
 10128                           
 10129                           ; BSR set to: 0
 10130                           ;main.c: 500: readADC(IR1_PIN);
 10131  00304E  5076               	movf	_IR1_PIN,w,c
 10132  003050  EC06  F01E         	call	_readADC
 10133                           
 10134                           ;main.c: 501: IR1[0]=16*16*ADRESH+ADRESL;
 10135  003054  50C4               	movf	4036,w,c	;volatile
 10136  003056  0100               	movlb	0	; () banked
 10137  003058  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10138  00305A  6B82               	clrf	??_read_sensors& (0+255),b
 10139  00305C  50C3               	movf	4035,w,c	;volatile
 10140  00305E  0100               	movlb	0	; () banked
 10141  003060  2582               	addwf	??_read_sensors& (0+255),w,b
 10142  003062  6E56               	movwf	_IR1,c
 10143  003064  0E00               	movlw	0
 10144  003066  0100               	movlb	0	; () banked
 10145  003068  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
 10146  00306A  6E57               	movwf	_IR1+1,c
 10147                           
 10148                           ; BSR set to: 0
 10149                           ;main.c: 502: readADC(IR2_PIN);
 10150  00306C  5077               	movf	_IR2_PIN,w,c
 10151  00306E  EC06  F01E         	call	_readADC
 10152                           
 10153                           ;main.c: 503: IR2[0]=16*16*ADRESH+ADRESL;
 10154  003072  50C4               	movf	4036,w,c	;volatile
 10155  003074  0100               	movlb	0	; () banked
 10156  003076  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10157  003078  6B82               	clrf	??_read_sensors& (0+255),b
 10158  00307A  50C3               	movf	4035,w,c	;volatile
 10159  00307C  0100               	movlb	0	; () banked
 10160  00307E  2582               	addwf	??_read_sensors& (0+255),w,b
 10161  003080  0101               	movlb	1	; () banked
 10162  003082  6F1C               	movwf	_IR2& (0+255),b
 10163  003084  0E00               	movlw	0
 10164  003086  0100               	movlb	0	; () banked
 10165  003088  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
 10166  00308A  0101               	movlb	1	; () banked
 10167  00308C  6F1D               	movwf	(_IR2+1)& (0+255),b
 10168                           
 10169                           ; BSR set to: 1
 10170                           ;main.c: 505: PROX1[0]=(PORTB>>PROX1_PIN)&1;
 10171  00308E  C072  F082         	movff	_PROX1_PIN,??_read_sensors
 10172  003092  CF81 F083          	movff	3969,??_read_sensors+1	;volatile
 10173  003096  0100               	movlb	0	; () banked
 10174  003098  2B82               	incf	??_read_sensors& (0+255),f,b
 10175  00309A  D003               	goto	u7994
 10176  00309C                     u7995:
 10177  00309C  0100               	movlb	0	; () banked
 10178  00309E  90D8               	bcf	status,0,c
 10179  0030A0  3383               	rrcf	(??_read_sensors+1)& (0+255),f,b
 10180  0030A2                     u7994:
 10181  0030A2  0100               	movlb	0	; () banked
 10182  0030A4  2F82               	decfsz	??_read_sensors& (0+255),f,b
 10183  0030A6  D7FA               	goto	u7995
 10184  0030A8  0E01               	movlw	1
 10185  0030AA  0100               	movlb	0	; () banked
 10186  0030AC  1783               	andwf	(??_read_sensors+1)& (0+255),f,b
 10187  0030AE  0100               	movlb	0	; () banked
 10188  0030B0  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10189  0030B2  0100               	movlb	0	; () banked
 10190  0030B4  6FBA               	movwf	_PROX1& (0+255),b
 10191  0030B6  6BBB               	clrf	(_PROX1+1)& (0+255),b
 10192                           
 10193                           ; BSR set to: 0
 10194                           ;main.c: 506: PROX2[0]=(PORTB>>PROX2_PIN)&1;
 10195  0030B8  C078  F082         	movff	_PROX2_PIN,??_read_sensors
 10196  0030BC  CF81 F083          	movff	3969,??_read_sensors+1	;volatile
 10197  0030C0  0100               	movlb	0	; () banked
 10198  0030C2  2B82               	incf	??_read_sensors& (0+255),f,b
 10199  0030C4  D003               	goto	u8004
 10200  0030C6                     u8005:
 10201  0030C6  0100               	movlb	0	; () banked
 10202  0030C8  90D8               	bcf	status,0,c
 10203  0030CA  3383               	rrcf	(??_read_sensors+1)& (0+255),f,b
 10204  0030CC                     u8004:
 10205  0030CC  0100               	movlb	0	; () banked
 10206  0030CE  2F82               	decfsz	??_read_sensors& (0+255),f,b
 10207  0030D0  D7FA               	goto	u8005
 10208  0030D2  0E01               	movlw	1
 10209  0030D4  0100               	movlb	0	; () banked
 10210  0030D6  1783               	andwf	(??_read_sensors+1)& (0+255),f,b
 10211  0030D8  0100               	movlb	0	; () banked
 10212  0030DA  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10213  0030DC  6E60               	movwf	_PROX2,c
 10214  0030DE  6A61               	clrf	_PROX2+1,c
 10215                           
 10216                           ; BSR set to: 0
 10217  0030E0  0012               	return		;funcret
 10218  0030E2                     __end_of_read_sensors:
 10219                           	opt stack 0
 10220                           tosu	equ	0xFFF
 10221                           tosh	equ	0xFFE
 10222                           tosl	equ	0xFFD
 10223                           pclath	equ	0xFFA
 10224                           tblptru	equ	0xFF8
 10225                           tblptrh	equ	0xFF7
 10226                           tblptrl	equ	0xFF6
 10227                           tablat	equ	0xFF5
 10228                           prodh	equ	0xFF4
 10229                           prodl	equ	0xFF3
 10230                           intcon	equ	0xFF2
 10231                           intcon2	equ	0xFF1
 10232                           intcon3	equ	0xFF0
 10233                           indf0	equ	0xFEF
 10234                           postinc0	equ	0xFEE
 10235                           fsr0h	equ	0xFEA
 10236                           fsr0l	equ	0xFE9
 10237                           wreg	equ	0xFE8
 10238                           indf1	equ	0xFE7
 10239                           postinc1	equ	0xFE6
 10240                           postdec1	equ	0xFE5
 10241                           fsr1h	equ	0xFE2
 10242                           fsr1l	equ	0xFE1
 10243                           indf2	equ	0xFDF
 10244                           postinc2	equ	0xFDE
 10245                           postdec2	equ	0xFDD
 10246                           fsr2h	equ	0xFDA
 10247                           fsr2l	equ	0xFD9
 10248                           status	equ	0xFD8
 10249                           
 10250 ;; *************** function _readADC *****************
 10251 ;; Defined at:
 10252 ;;		line 705 in file "main.c"
 10253 ;; Parameters:    Size  Location     Type
 10254 ;;  channel         1    wreg     unsigned char 
 10255 ;; Auto vars:     Size  Location     Type
 10256 ;;  channel         1    1[BANK0 ] unsigned char 
 10257 ;; Return value:  Size  Location     Type
 10258 ;;                  1    wreg      void 
 10259 ;; Registers used:
 10260 ;;		wreg, status,2, status,0, cstack
 10261 ;; Tracked objects:
 10262 ;;		On entry : 0/0
 10263 ;;		On exit  : 0/0
 10264 ;;		Unchanged: 0/0
 10265 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10267 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10268 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10269 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10270 ;;Total ram usage:        2 bytes
 10271 ;; Hardware stack levels used:    1
 10272 ;; Hardware stack levels required when called:    5
 10273 ;; This function calls:
 10274 ;;		Nothing
 10275 ;; This function is called by:
 10276 ;;		_read_sensors
 10277 ;; This function uses a non-reentrant model
 10278 ;;
 10279                           
 10280                           	psect	text27
 10281  003C0C                     __ptext27:
 10282                           	opt stack 0
 10283  003C0C                     _readADC:
 10284                           	opt stack 24
 10285                           
 10286                           ; BSR set to: 0
 10287                           ;incstack = 0
 10288                           ;readADC@channel stored from wreg
 10289  003C0C  0100               	movlb	0	; () banked
 10290  003C0E  6F81               	movwf	readADC@channel& (0+255),b
 10291                           
 10292                           ;main.c: 707: ADCON0 = ((channel <<2));
 10293  003C10  0100               	movlb	0	; () banked
 10294  003C12  4581               	rlncf	readADC@channel& (0+255),w,b
 10295  003C14  46E8               	rlncf	wreg,f,c
 10296  003C16  0BFC               	andlw	252
 10297  003C18  6EC2               	movwf	4034,c	;volatile
 10298                           
 10299                           ; BSR set to: 0
 10300                           ;main.c: 708: ADON = 1;
 10301  003C1A  80C2               	bsf	4034,0,c	;volatile
 10302                           
 10303                           ; BSR set to: 0
 10304                           ;main.c: 709: ADCON0bits.GO = 1;
 10305  003C1C  82C2               	bsf	4034,1,c	;volatile
 10306                           
 10307                           ;main.c: 710: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(10000000/4000.0)
      +                          ));}
 10308  003C1E  D009               	goto	l5106
 10309  003C20                     l5104:
 10310  003C20  0E11               	movlw	17
 10311  003C22  0100               	movlb	0	; () banked
 10312  003C24  6F80               	movwf	??_readADC& (0+255),b
 10313  003C26  0E3A               	movlw	58
 10314  003C28                     u14277:
 10315  003C28  2EE8               	decfsz	wreg,f,c
 10316  003C2A  D7FE               	bra	u14277
 10317  003C2C  2F80               	decfsz	??_readADC& (0+255),f,b
 10318  003C2E  D7FC               	bra	u14277
 10319  003C30  F000               	nop	
 10320  003C32                     l5106:
 10321  003C32  A2C2               	btfss	4034,1,c	;volatile
 10322  003C34  0012               	return	
 10323  003C36  D7F4               	goto	l5104
 10324  003C38                     __end_of_readADC:
 10325                           	opt stack 0
 10326                           tosu	equ	0xFFF
 10327                           tosh	equ	0xFFE
 10328                           tosl	equ	0xFFD
 10329                           pclath	equ	0xFFA
 10330                           tblptru	equ	0xFF8
 10331                           tblptrh	equ	0xFF7
 10332                           tblptrl	equ	0xFF6
 10333                           tablat	equ	0xFF5
 10334                           prodh	equ	0xFF4
 10335                           prodl	equ	0xFF3
 10336                           intcon	equ	0xFF2
 10337                           intcon2	equ	0xFF1
 10338                           intcon3	equ	0xFF0
 10339                           indf0	equ	0xFEF
 10340                           postinc0	equ	0xFEE
 10341                           fsr0h	equ	0xFEA
 10342                           fsr0l	equ	0xFE9
 10343                           wreg	equ	0xFE8
 10344                           indf1	equ	0xFE7
 10345                           postinc1	equ	0xFE6
 10346                           postdec1	equ	0xFE5
 10347                           fsr1h	equ	0xFE2
 10348                           fsr1l	equ	0xFE1
 10349                           indf2	equ	0xFDF
 10350                           postinc2	equ	0xFDE
 10351                           postdec2	equ	0xFDD
 10352                           fsr2h	equ	0xFDA
 10353                           fsr2l	equ	0xFD9
 10354                           status	equ	0xFD8
 10355                           
 10356 ;; *************** function _initLCD *****************
 10357 ;; Defined at:
 10358 ;;		line 14 in file "lcd.c"
 10359 ;; Parameters:    Size  Location     Type
 10360 ;;		None
 10361 ;; Auto vars:     Size  Location     Type
 10362 ;;		None
 10363 ;; Return value:  Size  Location     Type
 10364 ;;                  1    wreg      void 
 10365 ;; Registers used:
 10366 ;;		wreg, status,2, status,0, cstack
 10367 ;; Tracked objects:
 10368 ;;		On entry : 0/0
 10369 ;;		On exit  : 0/0
 10370 ;;		Unchanged: 0/0
 10371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10374 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10375 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10376 ;;Total ram usage:        1 bytes
 10377 ;; Hardware stack levels used:    1
 10378 ;; Hardware stack levels required when called:    7
 10379 ;; This function calls:
 10380 ;;		_lcdInst
 10381 ;; This function is called by:
 10382 ;;		_main
 10383 ;; This function uses a non-reentrant model
 10384 ;;
 10385                           
 10386                           	psect	text28
 10387  003AB4                     __ptext28:
 10388                           	opt stack 0
 10389  003AB4                     _initLCD:
 10390                           	opt stack 23
 10391                           
 10392                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
 10393                           
 10394                           ;incstack = 0
 10395  003AB4  0E31               	movlw	49
 10396  003AB6  0100               	movlb	0	; () banked
 10397  003AB8  6F83               	movwf	??_initLCD& (0+255),b
 10398  003ABA  0EB2               	movlw	178
 10399  003ABC                     u14287:
 10400  003ABC  2EE8               	decfsz	wreg,f,c
 10401  003ABE  D7FE               	bra	u14287
 10402  003AC0  2F83               	decfsz	??_initLCD& (0+255),f,b
 10403  003AC2  D7FC               	bra	u14287
 10404  003AC4  F000               	nop	
 10405                           
 10406                           ;lcd.c: 16: lcdInst(0b00110011);
 10407  003AC6  0E33               	movlw	51
 10408  003AC8  EC76  F01E         	call	_lcdInst
 10409                           
 10410                           ;lcd.c: 17: lcdInst(0b00110010);
 10411  003ACC  0E32               	movlw	50
 10412  003ACE  EC76  F01E         	call	_lcdInst
 10413                           
 10414                           ;lcd.c: 18: lcdInst(0b00101000);
 10415  003AD2  0E28               	movlw	40
 10416  003AD4  EC76  F01E         	call	_lcdInst
 10417                           
 10418                           ;lcd.c: 19: lcdInst(0b00001111);
 10419  003AD8  0E0F               	movlw	15
 10420  003ADA  EC76  F01E         	call	_lcdInst
 10421                           
 10422                           ;lcd.c: 20: lcdInst(0b00000110);
 10423  003ADE  0E06               	movlw	6
 10424  003AE0  EC76  F01E         	call	_lcdInst
 10425                           
 10426                           ;lcd.c: 21: lcdInst(0b00000001);
 10427  003AE4  0E01               	movlw	1
 10428  003AE6  EC76  F01E         	call	_lcdInst
 10429                           
 10430                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
 10431  003AEA  0E31               	movlw	49
 10432  003AEC  0100               	movlb	0	; () banked
 10433  003AEE  6F83               	movwf	??_initLCD& (0+255),b
 10434  003AF0  0EB2               	movlw	178
 10435  003AF2                     u14297:
 10436  003AF2  2EE8               	decfsz	wreg,f,c
 10437  003AF4  D7FE               	bra	u14297
 10438  003AF6  2F83               	decfsz	??_initLCD& (0+255),f,b
 10439  003AF8  D7FC               	bra	u14297
 10440  003AFA  F000               	nop	
 10441  003AFC  0012               	return		;funcret
 10442  003AFE                     __end_of_initLCD:
 10443                           	opt stack 0
 10444                           tosu	equ	0xFFF
 10445                           tosh	equ	0xFFE
 10446                           tosl	equ	0xFFD
 10447                           pclath	equ	0xFFA
 10448                           tblptru	equ	0xFF8
 10449                           tblptrh	equ	0xFF7
 10450                           tblptrl	equ	0xFF6
 10451                           tablat	equ	0xFF5
 10452                           prodh	equ	0xFF4
 10453                           prodl	equ	0xFF3
 10454                           intcon	equ	0xFF2
 10455                           intcon2	equ	0xFF1
 10456                           intcon3	equ	0xFF0
 10457                           indf0	equ	0xFEF
 10458                           postinc0	equ	0xFEE
 10459                           fsr0h	equ	0xFEA
 10460                           fsr0l	equ	0xFE9
 10461                           wreg	equ	0xFE8
 10462                           indf1	equ	0xFE7
 10463                           postinc1	equ	0xFE6
 10464                           postdec1	equ	0xFE5
 10465                           fsr1h	equ	0xFE2
 10466                           fsr1l	equ	0xFE1
 10467                           indf2	equ	0xFDF
 10468                           postinc2	equ	0xFDE
 10469                           postdec2	equ	0xFDD
 10470                           fsr2h	equ	0xFDA
 10471                           fsr2l	equ	0xFD9
 10472                           status	equ	0xFD8
 10473                           
 10474 ;; *************** function _lcdInst *****************
 10475 ;; Defined at:
 10476 ;;		line 25 in file "lcd.c"
 10477 ;; Parameters:    Size  Location     Type
 10478 ;;  data            1    wreg     unsigned char 
 10479 ;; Auto vars:     Size  Location     Type
 10480 ;;  data            1    2[BANK0 ] unsigned char 
 10481 ;; Return value:  Size  Location     Type
 10482 ;;                  1    wreg      void 
 10483 ;; Registers used:
 10484 ;;		wreg, status,2, status,0, cstack
 10485 ;; Tracked objects:
 10486 ;;		On entry : 0/0
 10487 ;;		On exit  : 0/0
 10488 ;;		Unchanged: 0/0
 10489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10491 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10493 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10494 ;;Total ram usage:        1 bytes
 10495 ;; Hardware stack levels used:    1
 10496 ;; Hardware stack levels required when called:    6
 10497 ;; This function calls:
 10498 ;;		_lcdNibble
 10499 ;; This function is called by:
 10500 ;;		_initLCD
 10501 ;;		_update_lcd
 10502 ;; This function uses a non-reentrant model
 10503 ;;
 10504                           
 10505                           	psect	text29
 10506  003CEC                     __ptext29:
 10507                           	opt stack 0
 10508  003CEC                     _lcdInst:
 10509                           	opt stack 23
 10510                           
 10511                           ;incstack = 0
 10512                           ;lcdInst@data stored from wreg
 10513  003CEC  0100               	movlb	0	; () banked
 10514  003CEE  6F82               	movwf	lcdInst@data& (0+255),b
 10515                           
 10516                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 10517  003CF0  948C               	bcf	3980,2,c	;volatile
 10518                           
 10519                           ;lcd.c: 27: lcdNibble(data);
 10520  003CF2  0100               	movlb	0	; () banked
 10521  003CF4  5182               	movf	lcdInst@data& (0+255),w,b
 10522  003CF6  ECC7  F01B         	call	_lcdNibble
 10523  003CFA  0012               	return		;funcret
 10524  003CFC                     __end_of_lcdInst:
 10525                           	opt stack 0
 10526                           tosu	equ	0xFFF
 10527                           tosh	equ	0xFFE
 10528                           tosl	equ	0xFFD
 10529                           pclath	equ	0xFFA
 10530                           tblptru	equ	0xFF8
 10531                           tblptrh	equ	0xFF7
 10532                           tblptrl	equ	0xFF6
 10533                           tablat	equ	0xFF5
 10534                           prodh	equ	0xFF4
 10535                           prodl	equ	0xFF3
 10536                           intcon	equ	0xFF2
 10537                           intcon2	equ	0xFF1
 10538                           intcon3	equ	0xFF0
 10539                           indf0	equ	0xFEF
 10540                           postinc0	equ	0xFEE
 10541                           fsr0h	equ	0xFEA
 10542                           fsr0l	equ	0xFE9
 10543                           wreg	equ	0xFE8
 10544                           indf1	equ	0xFE7
 10545                           postinc1	equ	0xFE6
 10546                           postdec1	equ	0xFE5
 10547                           fsr1h	equ	0xFE2
 10548                           fsr1l	equ	0xFE1
 10549                           indf2	equ	0xFDF
 10550                           postinc2	equ	0xFDE
 10551                           postdec2	equ	0xFDD
 10552                           fsr2h	equ	0xFDA
 10553                           fsr2l	equ	0xFD9
 10554                           status	equ	0xFD8
 10555                           
 10556 ;; *************** function _lcdNibble *****************
 10557 ;; Defined at:
 10558 ;;		line 35 in file "lcd.c"
 10559 ;; Parameters:    Size  Location     Type
 10560 ;;  data            1    wreg     unsigned char 
 10561 ;; Auto vars:     Size  Location     Type
 10562 ;;  data            1    1[BANK0 ] unsigned char 
 10563 ;;  temp            1    0[BANK0 ] unsigned char 
 10564 ;; Return value:  Size  Location     Type
 10565 ;;                  1    wreg      void 
 10566 ;; Registers used:
 10567 ;;		wreg, status,2, status,0
 10568 ;; Tracked objects:
 10569 ;;		On entry : 0/0
 10570 ;;		On exit  : 0/0
 10571 ;;		Unchanged: 0/0
 10572 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10573 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10574 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10575 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10577 ;;Total ram usage:        2 bytes
 10578 ;; Hardware stack levels used:    1
 10579 ;; Hardware stack levels required when called:    5
 10580 ;; This function calls:
 10581 ;;		Nothing
 10582 ;; This function is called by:
 10583 ;;		_lcdInst
 10584 ;;		_putch
 10585 ;; This function uses a non-reentrant model
 10586 ;;
 10587                           
 10588                           	psect	text30
 10589  00378E                     __ptext30:
 10590                           	opt stack 0
 10591  00378E                     _lcdNibble:
 10592                           	opt stack 21
 10593                           
 10594                           ;incstack = 0
 10595                           ;lcdNibble@data stored from wreg
 10596  00378E  0100               	movlb	0	; () banked
 10597  003790  6F81               	movwf	lcdNibble@data& (0+255),b
 10598                           
 10599                           ;lcd.c: 37: char temp = data & 0xF0;
 10600  003792  0100               	movlb	0	; () banked
 10601  003794  5181               	movf	lcdNibble@data& (0+255),w,b
 10602  003796  0BF0               	andlw	240
 10603  003798  0100               	movlb	0	; () banked
 10604  00379A  6F80               	movwf	lcdNibble@temp& (0+255),b
 10605                           
 10606                           ;lcd.c: 38: LATD = LATD & 0x0F;
 10607  00379C  508C               	movf	3980,w,c	;volatile
 10608  00379E  0B0F               	andlw	15
 10609  0037A0  6E8C               	movwf	3980,c	;volatile
 10610                           
 10611                           ;lcd.c: 39: LATD = temp | LATD;
 10612  0037A2  0100               	movlb	0	; () banked
 10613  0037A4  5180               	movf	lcdNibble@temp& (0+255),w,b
 10614  0037A6  108C               	iorwf	3980,w,c	;volatile
 10615  0037A8  6E8C               	movwf	3980,c	;volatile
 10616                           
 10617                           ; BSR set to: 0
 10618                           ;lcd.c: 41: LATDbits.LATD3 = 0;
 10619  0037AA  968C               	bcf	3980,3,c	;volatile
 10620                           
 10621                           ; BSR set to: 0
 10622                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
 10623  0037AC  0E14               	movlw	20
 10624  0037AE                     u14307:
 10625  0037AE  2EE8               	decfsz	wreg,f,c
 10626  0037B0  D7FE               	bra	u14307
 10627  0037B2  D000               	nop2	
 10628                           
 10629                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 10630  0037B4  868C               	bsf	3980,3,c	;volatile
 10631                           
 10632                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
 10633  0037B6  0E14               	movlw	20
 10634  0037B8                     u14317:
 10635  0037B8  2EE8               	decfsz	wreg,f,c
 10636  0037BA  D7FE               	bra	u14317
 10637  0037BC  D000               	nop2	
 10638                           
 10639                           ;lcd.c: 46: data = data << 4;
 10640  0037BE  0100               	movlb	0	; () banked
 10641  0037C0  3981               	swapf	lcdNibble@data& (0+255),w,b
 10642  0037C2  0BF0               	andlw	240
 10643  0037C4  0100               	movlb	0	; () banked
 10644  0037C6  6F81               	movwf	lcdNibble@data& (0+255),b
 10645                           
 10646                           ;lcd.c: 48: temp = data & 0xF0;
 10647  0037C8  0100               	movlb	0	; () banked
 10648  0037CA  5181               	movf	lcdNibble@data& (0+255),w,b
 10649  0037CC  0BF0               	andlw	240
 10650  0037CE  0100               	movlb	0	; () banked
 10651  0037D0  6F80               	movwf	lcdNibble@temp& (0+255),b
 10652                           
 10653                           ;lcd.c: 49: LATD = LATD & 0x0F;
 10654  0037D2  508C               	movf	3980,w,c	;volatile
 10655  0037D4  0B0F               	andlw	15
 10656  0037D6  6E8C               	movwf	3980,c	;volatile
 10657                           
 10658                           ;lcd.c: 50: LATD = temp | LATD;
 10659  0037D8  0100               	movlb	0	; () banked
 10660  0037DA  5180               	movf	lcdNibble@temp& (0+255),w,b
 10661  0037DC  108C               	iorwf	3980,w,c	;volatile
 10662  0037DE  6E8C               	movwf	3980,c	;volatile
 10663                           
 10664                           ; BSR set to: 0
 10665                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 10666  0037E0  968C               	bcf	3980,3,c	;volatile
 10667                           
 10668                           ; BSR set to: 0
 10669                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
 10670  0037E2  0E14               	movlw	20
 10671  0037E4                     u14327:
 10672  0037E4  2EE8               	decfsz	wreg,f,c
 10673  0037E6  D7FE               	bra	u14327
 10674  0037E8  D000               	nop2	
 10675                           
 10676                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 10677  0037EA  868C               	bsf	3980,3,c	;volatile
 10678                           
 10679                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
 10680  0037EC  0E14               	movlw	20
 10681  0037EE                     u14337:
 10682  0037EE  2EE8               	decfsz	wreg,f,c
 10683  0037F0  D7FE               	bra	u14337
 10684  0037F2  D000               	nop2	
 10685  0037F4  0012               	return		;funcret
 10686  0037F6                     __end_of_lcdNibble:
 10687                           	opt stack 0
 10688                           tosu	equ	0xFFF
 10689                           tosh	equ	0xFFE
 10690                           tosl	equ	0xFFD
 10691                           pclath	equ	0xFFA
 10692                           tblptru	equ	0xFF8
 10693                           tblptrh	equ	0xFF7
 10694                           tblptrl	equ	0xFF6
 10695                           tablat	equ	0xFF5
 10696                           prodh	equ	0xFF4
 10697                           prodl	equ	0xFF3
 10698                           intcon	equ	0xFF2
 10699                           intcon2	equ	0xFF1
 10700                           intcon3	equ	0xFF0
 10701                           indf0	equ	0xFEF
 10702                           postinc0	equ	0xFEE
 10703                           fsr0h	equ	0xFEA
 10704                           fsr0l	equ	0xFE9
 10705                           wreg	equ	0xFE8
 10706                           indf1	equ	0xFE7
 10707                           postinc1	equ	0xFE6
 10708                           postdec1	equ	0xFE5
 10709                           fsr1h	equ	0xFE2
 10710                           fsr1l	equ	0xFE1
 10711                           indf2	equ	0xFDF
 10712                           postinc2	equ	0xFDE
 10713                           postdec2	equ	0xFDD
 10714                           fsr2h	equ	0xFDA
 10715                           fsr2l	equ	0xFD9
 10716                           status	equ	0xFD8
 10717                           
 10718 ;; *************** function _I2C_Master_Init *****************
 10719 ;; Defined at:
 10720 ;;		line 13 in file "I2C.c"
 10721 ;; Parameters:    Size  Location     Type
 10722 ;;  c               4   13[BANK0 ] const unsigned long 
 10723 ;; Auto vars:     Size  Location     Type
 10724 ;;		None
 10725 ;; Return value:  Size  Location     Type
 10726 ;;                  1    wreg      void 
 10727 ;; Registers used:
 10728 ;;		wreg, status,2, status,0, cstack
 10729 ;; Tracked objects:
 10730 ;;		On entry : 0/0
 10731 ;;		On exit  : 0/0
 10732 ;;		Unchanged: 0/0
 10733 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10734 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10736 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10737 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10738 ;;Total ram usage:        8 bytes
 10739 ;; Hardware stack levels used:    1
 10740 ;; Hardware stack levels required when called:    6
 10741 ;; This function calls:
 10742 ;;		___lldiv
 10743 ;; This function is called by:
 10744 ;;		_main
 10745 ;; This function uses a non-reentrant model
 10746 ;;
 10747                           
 10748                           	psect	text31
 10749  0038BA                     __ptext31:
 10750                           	opt stack 0
 10751  0038BA                     _I2C_Master_Init:
 10752                           	opt stack 24
 10753                           
 10754                           ;I2C.c: 16: SSPSTAT = 0b00000000;
 10755                           
 10756                           ;incstack = 0
 10757  0038BA  0E00               	movlw	0
 10758  0038BC  6EC7               	movwf	4039,c	;volatile
 10759                           
 10760                           ;I2C.c: 17: SSPCON1 = 0b00101000;
 10761  0038BE  0E28               	movlw	40
 10762  0038C0  6EC6               	movwf	4038,c	;volatile
 10763                           
 10764                           ;I2C.c: 18: SSPCON2 = 0b00000000;
 10765  0038C2  0E00               	movlw	0
 10766  0038C4  6EC5               	movwf	4037,c	;volatile
 10767                           
 10768                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
 10769  0038C6  0E80               	movlw	128
 10770  0038C8  0100               	movlb	0	; () banked
 10771  0038CA  6F80               	movwf	___lldiv@dividend& (0+255),b
 10772  0038CC  0E96               	movlw	150
 10773  0038CE  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 10774  0038D0  0E98               	movlw	152
 10775  0038D2  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 10776  0038D4  0E00               	movlw	0
 10777  0038D6  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 10778  0038D8  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 10779  0038DC  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 10780  0038E0  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 10781  0038E4  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 10782  0038E8  0E02               	movlw	2
 10783  0038EA                     u7915:
 10784  0038EA  90D8               	bcf	status,0,c
 10785  0038EC  0100               	movlb	0	; () banked
 10786  0038EE  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 10787  0038F0  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 10788  0038F2  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 10789  0038F4  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 10790  0038F6  2EE8               	decfsz	wreg,f,c
 10791  0038F8  D7F8               	goto	u7915
 10792  0038FA  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 10793  0038FE  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 10794  003902  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 10795  003906  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 10796  00390A  EC04  F01A         	call	___lldiv	;wreg free
 10797  00390E  0100               	movlb	0	; () banked
 10798  003910  0580               	decf	?___lldiv& (0+255),w,b
 10799  003912  6EC8               	movwf	4040,c	;volatile
 10800                           
 10801                           ; BSR set to: 0
 10802                           ;I2C.c: 20: TRISC3 = 1;
 10803  003914  8694               	bsf	3988,3,c	;volatile
 10804                           
 10805                           ; BSR set to: 0
 10806                           ;I2C.c: 21: TRISC4 = 1;
 10807  003916  8894               	bsf	3988,4,c	;volatile
 10808                           
 10809                           ; BSR set to: 0
 10810  003918  0012               	return		;funcret
 10811  00391A                     __end_of_I2C_Master_Init:
 10812                           	opt stack 0
 10813                           tosu	equ	0xFFF
 10814                           tosh	equ	0xFFE
 10815                           tosl	equ	0xFFD
 10816                           pclath	equ	0xFFA
 10817                           tblptru	equ	0xFF8
 10818                           tblptrh	equ	0xFF7
 10819                           tblptrl	equ	0xFF6
 10820                           tablat	equ	0xFF5
 10821                           prodh	equ	0xFF4
 10822                           prodl	equ	0xFF3
 10823                           intcon	equ	0xFF2
 10824                           intcon2	equ	0xFF1
 10825                           intcon3	equ	0xFF0
 10826                           indf0	equ	0xFEF
 10827                           postinc0	equ	0xFEE
 10828                           fsr0h	equ	0xFEA
 10829                           fsr0l	equ	0xFE9
 10830                           wreg	equ	0xFE8
 10831                           indf1	equ	0xFE7
 10832                           postinc1	equ	0xFE6
 10833                           postdec1	equ	0xFE5
 10834                           fsr1h	equ	0xFE2
 10835                           fsr1l	equ	0xFE1
 10836                           indf2	equ	0xFDF
 10837                           postinc2	equ	0xFDE
 10838                           postdec2	equ	0xFDD
 10839                           fsr2h	equ	0xFDA
 10840                           fsr2l	equ	0xFD9
 10841                           status	equ	0xFD8
 10842                           
 10843 ;; *************** function ___lldiv *****************
 10844 ;; Defined at:
 10845 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 10846 ;; Parameters:    Size  Location     Type
 10847 ;;  dividend        4    0[BANK0 ] unsigned long 
 10848 ;;  divisor         4    4[BANK0 ] unsigned long 
 10849 ;; Auto vars:     Size  Location     Type
 10850 ;;  quotient        4    8[BANK0 ] unsigned long 
 10851 ;;  counter         1   12[BANK0 ] unsigned char 
 10852 ;; Return value:  Size  Location     Type
 10853 ;;                  4    0[BANK0 ] unsigned long 
 10854 ;; Registers used:
 10855 ;;		wreg, status,2, status,0
 10856 ;; Tracked objects:
 10857 ;;		On entry : 0/0
 10858 ;;		On exit  : 0/0
 10859 ;;		Unchanged: 0/0
 10860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10861 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10862 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10863 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10864 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10865 ;;Total ram usage:       13 bytes
 10866 ;; Hardware stack levels used:    1
 10867 ;; Hardware stack levels required when called:    5
 10868 ;; This function calls:
 10869 ;;		Nothing
 10870 ;; This function is called by:
 10871 ;;		_I2C_Master_Init
 10872 ;; This function uses a non-reentrant model
 10873 ;;
 10874                           
 10875                           	psect	text32
 10876  003408                     __ptext32:
 10877                           	opt stack 0
 10878  003408                     ___lldiv:
 10879                           	opt stack 24
 10880                           
 10881                           ; BSR set to: 0
 10882                           ;incstack = 0
 10883  003408  0E00               	movlw	0
 10884  00340A  0100               	movlb	0	; () banked
 10885  00340C  6F88               	movwf	___lldiv@quotient& (0+255),b
 10886  00340E  0E00               	movlw	0
 10887  003410  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 10888  003412  0E00               	movlw	0
 10889  003414  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 10890  003416  0E00               	movlw	0
 10891  003418  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 10892                           
 10893                           ; BSR set to: 0
 10894  00341A  0100               	movlb	0	; () banked
 10895  00341C  5184               	movf	___lldiv@divisor& (0+255),w,b
 10896  00341E  0100               	movlb	0	; () banked
 10897  003420  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 10898  003422  0100               	movlb	0	; () banked
 10899  003424  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 10900  003426  0100               	movlb	0	; () banked
 10901  003428  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 10902  00342A  B4D8               	btfsc	status,2,c
 10903  00342C  D042               	goto	l952
 10904                           
 10905                           ; BSR set to: 0
 10906  00342E  0E01               	movlw	1
 10907  003430  0100               	movlb	0	; () banked
 10908  003432  6F8C               	movwf	___lldiv@counter& (0+255),b
 10909  003434  D008               	goto	l5160
 10910  003436                     l5158:
 10911                           
 10912                           ; BSR set to: 0
 10913  003436  0100               	movlb	0	; () banked
 10914  003438  90D8               	bcf	status,0,c
 10915  00343A  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 10916  00343C  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 10917  00343E  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 10918  003440  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 10919  003442  0100               	movlb	0	; () banked
 10920  003444  2B8C               	incf	___lldiv@counter& (0+255),f,b
 10921  003446                     l5160:
 10922                           
 10923                           ; BSR set to: 0
 10924  003446  0100               	movlb	0	; () banked
 10925  003448  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 10926  00344A  D7F5               	goto	l5158
 10927  00344C                     l5162:
 10928                           
 10929                           ; BSR set to: 0
 10930  00344C  0100               	movlb	0	; () banked
 10931  00344E  90D8               	bcf	status,0,c
 10932  003450  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 10933  003452  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 10934  003454  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 10935  003456  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 10936                           
 10937                           ; BSR set to: 0
 10938  003458  0100               	movlb	0	; () banked
 10939  00345A  5184               	movf	___lldiv@divisor& (0+255),w,b
 10940  00345C  0100               	movlb	0	; () banked
 10941  00345E  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 10942  003460  0100               	movlb	0	; () banked
 10943  003462  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10944  003464  0100               	movlb	0	; () banked
 10945  003466  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 10946  003468  0100               	movlb	0	; () banked
 10947  00346A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10948  00346C  0100               	movlb	0	; () banked
 10949  00346E  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 10950  003470  0100               	movlb	0	; () banked
 10951  003472  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10952  003474  0100               	movlb	0	; () banked
 10953  003476  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 10954  003478  A0D8               	btfss	status,0,c
 10955  00347A  D012               	goto	l5170
 10956                           
 10957                           ; BSR set to: 0
 10958  00347C  0100               	movlb	0	; () banked
 10959  00347E  5184               	movf	___lldiv@divisor& (0+255),w,b
 10960  003480  0100               	movlb	0	; () banked
 10961  003482  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 10962  003484  0100               	movlb	0	; () banked
 10963  003486  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 10964  003488  0100               	movlb	0	; () banked
 10965  00348A  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 10966  00348C  0100               	movlb	0	; () banked
 10967  00348E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 10968  003490  0100               	movlb	0	; () banked
 10969  003492  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 10970  003494  0100               	movlb	0	; () banked
 10971  003496  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 10972  003498  0100               	movlb	0	; () banked
 10973  00349A  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 10974                           
 10975                           ; BSR set to: 0
 10976  00349C  0100               	movlb	0	; () banked
 10977  00349E  8188               	bsf	___lldiv@quotient& (0+255),0,b
 10978  0034A0                     l5170:
 10979                           
 10980                           ; BSR set to: 0
 10981  0034A0  0100               	movlb	0	; () banked
 10982  0034A2  90D8               	bcf	status,0,c
 10983  0034A4  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 10984  0034A6  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 10985  0034A8  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 10986  0034AA  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 10987                           
 10988                           ; BSR set to: 0
 10989  0034AC  0100               	movlb	0	; () banked
 10990  0034AE  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 10991  0034B0  D7CD               	goto	l5162
 10992  0034B2                     l952:
 10993                           
 10994                           ; BSR set to: 0
 10995  0034B2  C088  F080         	movff	___lldiv@quotient,?___lldiv
 10996  0034B6  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 10997  0034BA  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 10998  0034BE  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 10999                           
 11000                           ; BSR set to: 0
 11001  0034C2  0012               	return		;funcret
 11002  0034C4                     __end_of___lldiv:
 11003                           	opt stack 0
 11004                           tosu	equ	0xFFF
 11005                           tosh	equ	0xFFE
 11006                           tosl	equ	0xFFD
 11007                           pclath	equ	0xFFA
 11008                           tblptru	equ	0xFF8
 11009                           tblptrh	equ	0xFF7
 11010                           tblptrl	equ	0xFF6
 11011                           tablat	equ	0xFF5
 11012                           prodh	equ	0xFF4
 11013                           prodl	equ	0xFF3
 11014                           intcon	equ	0xFF2
 11015                           intcon2	equ	0xFF1
 11016                           intcon3	equ	0xFF0
 11017                           indf0	equ	0xFEF
 11018                           postinc0	equ	0xFEE
 11019                           fsr0h	equ	0xFEA
 11020                           fsr0l	equ	0xFE9
 11021                           wreg	equ	0xFE8
 11022                           indf1	equ	0xFE7
 11023                           postinc1	equ	0xFE6
 11024                           postdec1	equ	0xFE5
 11025                           fsr1h	equ	0xFE2
 11026                           fsr1l	equ	0xFE1
 11027                           indf2	equ	0xFDF
 11028                           postinc2	equ	0xFDE
 11029                           postdec2	equ	0xFDD
 11030                           fsr2h	equ	0xFDA
 11031                           fsr2l	equ	0xFD9
 11032                           status	equ	0xFD8
 11033                           
 11034 ;; *************** function _keypressed *****************
 11035 ;; Defined at:
 11036 ;;		line 364 in file "main.c"
 11037 ;; Parameters:    Size  Location     Type
 11038 ;;		None
 11039 ;; Auto vars:     Size  Location     Type
 11040 ;;  i               2   58[COMRAM] int 
 11041 ;;  keypress        1   60[COMRAM] unsigned char 
 11042 ;; Return value:  Size  Location     Type
 11043 ;;                  1    wreg      void 
 11044 ;; Registers used:
 11045 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 11046 ;; Tracked objects:
 11047 ;;		On entry : 0/0
 11048 ;;		On exit  : 0/0
 11049 ;;		Unchanged: 0/0
 11050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11052 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11053 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11054 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11055 ;;Total ram usage:       19 bytes
 11056 ;; Hardware stack levels used:    1
 11057 ;; Hardware stack levels required when called:    4
 11058 ;; This function calls:
 11059 ;;		i2___awmod
 11060 ;;		i2_lcdInst
 11061 ;;		i2_printf
 11062 ;; This function is called by:
 11063 ;;		Interrupt level 2
 11064 ;; This function uses a non-reentrant model
 11065 ;;
 11066                           
 11067                           	psect	intcode
 11068  000008                     __pintcode:
 11069                           	opt stack 0
 11070  000008                     _keypressed:
 11071                           	opt stack 20
 11072                           
 11073                           ; BSR set to: 0
 11074                           ;incstack = 0
 11075  000008  827B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11076  00000A  EDF7  F008         	call	int_func,f	;refresh shadow registers
 11077                           tosu	equ	0xFFF
 11078                           tosh	equ	0xFFE
 11079                           tosl	equ	0xFFD
 11080                           pclath	equ	0xFFA
 11081                           tblptru	equ	0xFF8
 11082                           tblptrh	equ	0xFF7
 11083                           tblptrl	equ	0xFF6
 11084                           tablat	equ	0xFF5
 11085                           prodh	equ	0xFF4
 11086                           prodl	equ	0xFF3
 11087                           intcon	equ	0xFF2
 11088                           intcon2	equ	0xFF1
 11089                           intcon3	equ	0xFF0
 11090                           indf0	equ	0xFEF
 11091                           postinc0	equ	0xFEE
 11092                           fsr0h	equ	0xFEA
 11093                           fsr0l	equ	0xFE9
 11094                           wreg	equ	0xFE8
 11095                           indf1	equ	0xFE7
 11096                           postinc1	equ	0xFE6
 11097                           postdec1	equ	0xFE5
 11098                           fsr1h	equ	0xFE2
 11099                           fsr1l	equ	0xFE1
 11100                           indf2	equ	0xFDF
 11101                           postinc2	equ	0xFDE
 11102                           postdec2	equ	0xFDD
 11103                           fsr2h	equ	0xFDA
 11104                           fsr2l	equ	0xFD9
 11105                           status	equ	0xFD8
 11106                           
 11107                           	psect	intcode_body
 11108  0011EE                     __pintcode_body:
 11109                           	opt stack 20
 11110  0011EE                     int_func:
 11111                           	opt stack 20
 11112  0011EE  0006               	pop		; remove dummy address from shadow register refresh
 11113  0011F0  CFFA F02D          	movff	pclath,??_keypressed+2
 11114  0011F4  CFFB F02E          	movff	pclatu,??_keypressed+3
 11115  0011F8  CFE9 F02F          	movff	fsr0l,??_keypressed+4
 11116  0011FC  CFEA F030          	movff	fsr0h,??_keypressed+5
 11117  001200  CFE1 F031          	movff	fsr1l,??_keypressed+6
 11118  001204  CFE2 F032          	movff	fsr1h,??_keypressed+7
 11119  001208  CFD9 F033          	movff	fsr2l,??_keypressed+8
 11120  00120C  CFDA F034          	movff	fsr2h,??_keypressed+9
 11121  001210  CFF3 F035          	movff	prodl,??_keypressed+10
 11122  001214  CFF4 F036          	movff	prodh,??_keypressed+11
 11123  001218  CFF6 F037          	movff	tblptrl,??_keypressed+12
 11124  00121C  CFF7 F038          	movff	tblptrh,??_keypressed+13
 11125  001220  CFF8 F039          	movff	tblptru,??_keypressed+14
 11126  001224  CFF5 F03A          	movff	tablat,??_keypressed+15
 11127                           
 11128                           ;main.c: 366: if(INT1IF){
 11129  001228  A0F0               	btfss	intcon3,0,c	;volatile
 11130  00122A  D2E9               	goto	i2l411
 11131                           
 11132                           ;main.c: 367: int i;
 11133                           ;main.c: 368: unsigned char keypress = (PORTB & 0xF0) >> 4;
 11134  00122C  3881               	swapf	3969,w,c	;volatile
 11135  00122E  0B0F               	andlw	15
 11136  001230  0B0F               	andlw	15
 11137  001232  6E3D               	movwf	keypressed@keypress,c
 11138                           
 11139                           ;main.c: 369: switch(state)
 11140  001234  D2CE               	goto	i2l8608
 11141  001236                     i2l8442:
 11142                           
 11143                           ;main.c: 371: for (i=0;i<7;i++)
 11144  001236  0E00               	movlw	0
 11145  001238  6E3C               	movwf	keypressed@i+1,c
 11146  00123A  0E00               	movlw	0
 11147  00123C  6E3B               	movwf	keypressed@i,c
 11148  00123E                     i2l8444:
 11149  00123E  BE3C               	btfsc	keypressed@i+1,7,c
 11150  001240  D006               	goto	i2l8448
 11151  001242  503C               	movf	keypressed@i+1,w,c
 11152  001244  E11D               	bnz	i2l8454
 11153  001246  0E07               	movlw	7
 11154  001248  5C3B               	subwf	keypressed@i,w,c
 11155  00124A  B0D8               	btfsc	status,0,c
 11156  00124C  D019               	goto	i2l8454
 11157  00124E                     i2l8448:
 11158                           
 11159                           ;main.c: 372: startTime[i]=time_i[i];
 11160  00124E  90D8               	bcf	status,0,c
 11161  001250  343B               	rlcf	keypressed@i,w,c
 11162  001252  6ED9               	movwf	fsr2l,c
 11163  001254  343C               	rlcf	keypressed@i+1,w,c
 11164  001256  6EDA               	movwf	fsr2h,c
 11165  001258  0E3E               	movlw	low _time_i
 11166  00125A  26D9               	addwf	fsr2l,f,c
 11167  00125C  0E00               	movlw	high _time_i
 11168  00125E  22DA               	addwfc	fsr2h,f,c
 11169  001260  90D8               	bcf	status,0,c
 11170  001262  343B               	rlcf	keypressed@i,w,c
 11171  001264  6EE1               	movwf	fsr1l,c
 11172  001266  343C               	rlcf	keypressed@i+1,w,c
 11173  001268  6EE2               	movwf	fsr1h,c
 11174  00126A  0E0E               	movlw	low _startTime
 11175  00126C  26E1               	addwf	fsr1l,f,c
 11176  00126E  0E01               	movlw	high _startTime
 11177  001270  22E2               	addwfc	fsr1h,f,c
 11178  001272  CFDE FFE6          	movff	postinc2,postinc1
 11179  001276  CFDD FFE5          	movff	postdec2,postdec1
 11180  00127A  4A3B               	infsnz	keypressed@i,f,c
 11181  00127C  2A3C               	incf	keypressed@i+1,f,c
 11182  00127E  D7DF               	goto	i2l8444
 11183  001280                     i2l8454:
 11184                           
 11185                           ;main.c: 373: if (keys[keypress]=='B'&&menuIndex<menuSize)
 11186  001280  503D               	movf	keypressed@keypress,w,c
 11187  001282  0D01               	mullw	1
 11188  001284  0E57               	movlw	low _keys
 11189  001286  24F3               	addwf	prodl,w,c
 11190  001288  6EF6               	movwf	tblptrl,c
 11191  00128A  0EFE               	movlw	high _keys
 11192  00128C  20F4               	addwfc	prodh,w,c
 11193  00128E  6EF7               	movwf	tblptrh,c
 11194  001290                     	if	1	;There are 3 active tblptr bytes
 11195  001290  6AF8               	clrf	tblptru,c
 11196  001292  0E00               	movlw	low (__mediumconst shr (0+16))
 11197  001294  22F8               	addwfc	tblptru,f,c
 11198  001296                     	endif
 11199  001296  0008               	tblrd		*
 11200  001298  50F5               	movf	tablat,w,c
 11201  00129A  0A42               	xorlw	66
 11202  00129C  A4D8               	btfss	status,2,c
 11203  00129E  D012               	goto	i2l8460
 11204  0012A0  0100               	movlb	0	; () banked
 11205  0012A2  51F4               	movf	_menuSize& (0+255),w,b
 11206  0012A4  0100               	movlb	0	; () banked
 11207  0012A6  5DF2               	subwf	_menuIndex& (0+255),w,b
 11208  0012A8  0100               	movlb	0	; () banked
 11209  0012AA  51F3               	movf	(_menuIndex+1)& (0+255),w,b
 11210  0012AC  0A80               	xorlw	128
 11211  0012AE  6E2B               	movwf	??_keypressed& (0+255),c
 11212  0012B0  0100               	movlb	0	; () banked
 11213  0012B2  51F5               	movf	(_menuSize+1)& (0+255),w,b
 11214  0012B4  0A80               	xorlw	128
 11215  0012B6  582B               	subwfb	??_keypressed& (0+255),w,c
 11216  0012B8  B0D8               	btfsc	status,0,c
 11217  0012BA  D004               	goto	i2l8460
 11218                           
 11219                           ; BSR set to: 0
 11220                           ;main.c: 374: menuIndex++;
 11221  0012BC  0100               	movlb	0	; () banked
 11222  0012BE  4BF2               	infsnz	_menuIndex& (0+255),f,b
 11223  0012C0  2BF3               	incf	(_menuIndex+1)& (0+255),f,b
 11224  0012C2  D29C               	goto	i2l370
 11225  0012C4                     i2l8460:
 11226                           
 11227                           ;main.c: 375: else if (keys[keypress]=='A'&&menuIndex>1)
 11228  0012C4  503D               	movf	keypressed@keypress,w,c
 11229  0012C6  0D01               	mullw	1
 11230  0012C8  0E57               	movlw	low _keys
 11231  0012CA  24F3               	addwf	prodl,w,c
 11232  0012CC  6EF6               	movwf	tblptrl,c
 11233  0012CE  0EFE               	movlw	high _keys
 11234  0012D0  20F4               	addwfc	prodh,w,c
 11235  0012D2  6EF7               	movwf	tblptrh,c
 11236  0012D4                     	if	1	;There are 3 active tblptr bytes
 11237  0012D4  6AF8               	clrf	tblptru,c
 11238  0012D6  0E00               	movlw	low (__mediumconst shr (0+16))
 11239  0012D8  22F8               	addwfc	tblptru,f,c
 11240  0012DA                     	endif
 11241  0012DA  0008               	tblrd		*
 11242  0012DC  50F5               	movf	tablat,w,c
 11243  0012DE  0A41               	xorlw	65
 11244  0012E0  A4D8               	btfss	status,2,c
 11245  0012E2  D010               	goto	i2l8466
 11246  0012E4  0100               	movlb	0	; () banked
 11247  0012E6  BFF3               	btfsc	(_menuIndex+1)& (0+255),7,b
 11248  0012E8  D00D               	goto	i2l8466
 11249  0012EA  0100               	movlb	0	; () banked
 11250  0012EC  51F3               	movf	(_menuIndex+1)& (0+255),w,b
 11251  0012EE  E105               	bnz	i2u1394_40
 11252  0012F0  0E02               	movlw	2
 11253  0012F2  0100               	movlb	0	; () banked
 11254  0012F4  5DF2               	subwf	_menuIndex& (0+255),w,b
 11255  0012F6  A0D8               	btfss	status,0,c
 11256  0012F8  D005               	goto	i2l8466
 11257  0012FA                     i2u1394_40:
 11258                           
 11259                           ; BSR set to: 0
 11260                           ;main.c: 376: menuIndex--;
 11261  0012FA  0100               	movlb	0	; () banked
 11262  0012FC  07F2               	decf	_menuIndex& (0+255),f,b
 11263  0012FE  A0D8               	btfss	status,0,c
 11264  001300  07F3               	decf	(_menuIndex+1)& (0+255),f,b
 11265  001302  D27C               	goto	i2l370
 11266  001304                     i2l8466:
 11267                           
 11268                           ;main.c: 377: else if (keys[keypress]=='C'){
 11269  001304  503D               	movf	keypressed@keypress,w,c
 11270  001306  0D01               	mullw	1
 11271  001308  0E57               	movlw	low _keys
 11272  00130A  24F3               	addwf	prodl,w,c
 11273  00130C  6EF6               	movwf	tblptrl,c
 11274  00130E  0EFE               	movlw	high _keys
 11275  001310  20F4               	addwfc	prodh,w,c
 11276  001312  6EF7               	movwf	tblptrh,c
 11277  001314                     	if	1	;There are 3 active tblptr bytes
 11278  001314  6AF8               	clrf	tblptru,c
 11279  001316  0E00               	movlw	low (__mediumconst shr (0+16))
 11280  001318  22F8               	addwfc	tblptru,f,c
 11281  00131A                     	endif
 11282  00131A  0008               	tblrd		*
 11283  00131C  50F5               	movf	tablat,w,c
 11284  00131E  0A43               	xorlw	67
 11285  001320  B4D8               	btfsc	status,2,c
 11286  001322  D01D               	goto	i2l8486
 11287  001324  D26B               	goto	i2l370
 11288  001326                     i2l8470:
 11289  001326  0E73               	movlw	115
 11290  001328  D24A               	goto	L9
 11291  00132A                     i2l8472:
 11292  00132A  0E6C               	movlw	108
 11293  00132C  D248               	goto	L9
 11294  00132E                     i2l8474:
 11295  00132E  0E63               	movlw	99
 11296  001330  D246               	goto	L9
 11297  001332                     i2l8476:
 11298                           
 11299                           ;main.c: 386: lcdInst(0b10000000);;
 11300  001332  0E80               	movlw	128
 11301  001334  EC84  F01E         	call	i2_lcdInst
 11302                           
 11303                           ;main.c: 387: printf("invalid");
 11304  001338  0EE5               	movlw	low STR_23
 11305  00133A  6E23               	movwf	i2printf@f,c
 11306  00133C  0EFF               	movlw	high STR_23
 11307  00133E  6E24               	movwf	i2printf@f+1,c
 11308  001340  ECBB  F01D         	call	i2_printf	;wreg free
 11309                           
 11310                           ;main.c: 388: lcdInst(0b11000000);;
 11311  001344  0EC0               	movlw	192
 11312  001346  EC84  F01E         	call	i2_lcdInst
 11313                           
 11314                           ;main.c: 389: printf("menu selection");
 11315  00134A  0EA2               	movlw	low STR_24
 11316  00134C  6E23               	movwf	i2printf@f,c
 11317  00134E  0EFF               	movlw	high STR_24
 11318  001350  6E24               	movwf	i2printf@f+1,c
 11319  001352  ECBB  F01D         	call	i2_printf	;wreg free
 11320                           
 11321                           ;main.c: 390: lcdInst(0b10010000);;
 11322  001356  0E90               	movlw	144
 11323  001358  EC84  F01E         	call	i2_lcdInst
 11324                           
 11325                           ;main.c: 392: }
 11326                           
 11327                           ;main.c: 391: break;
 11328  00135C  D24F               	goto	i2l370
 11329  00135E                     i2l8486:
 11330  00135E  C0F2  F02B         	movff	_menuIndex,??_keypressed
 11331  001362  C0F3  F02C         	movff	_menuIndex+1,??_keypressed+1
 11332                           
 11333                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11334                           ; Switch size 1, requested type "space"
 11335                           ; Number of cases is 1, Range of values is 0 to 0
 11336                           ; switch strategies available:
 11337                           ; Name         Instructions Cycles
 11338                           ; simple_byte            4     3 (average)
 11339                           ;	Chosen strategy is simple_byte
 11340  001366  502C               	movf	??_keypressed+1,w,c
 11341  001368  0A00               	xorlw	0	; case 0
 11342  00136A  A4D8               	btfss	status,2,c
 11343  00136C  D7E2               	goto	i2l8476
 11344                           
 11345                           ; Switch size 1, requested type "space"
 11346                           ; Number of cases is 3, Range of values is 1 to 3
 11347                           ; switch strategies available:
 11348                           ; Name         Instructions Cycles
 11349                           ; simple_byte           10     6 (average)
 11350                           ;	Chosen strategy is simple_byte
 11351  00136E  502B               	movf	??_keypressed,w,c
 11352  001370  0A01               	xorlw	1	; case 1
 11353  001372  B4D8               	btfsc	status,2,c
 11354  001374  D7D8               	goto	i2l8470
 11355  001376  0A03               	xorlw	3	; case 2
 11356  001378  B4D8               	btfsc	status,2,c
 11357  00137A  D7D7               	goto	i2l8472
 11358  00137C  0A01               	xorlw	1	; case 3
 11359  00137E  B4D8               	btfsc	status,2,c
 11360  001380  D7D6               	goto	i2l8474
 11361  001382  D7D7               	goto	i2l8476
 11362  001384                     i2l8490:
 11363                           
 11364                           ; BSR set to: 0
 11365                           ;main.c: 400: for (i=0;i<7;i++)
 11366  001384  0E00               	movlw	0
 11367  001386  6E3C               	movwf	keypressed@i+1,c
 11368  001388  0E00               	movlw	0
 11369  00138A  6E3B               	movwf	keypressed@i,c
 11370  00138C                     i2l8492:
 11371                           
 11372                           ; BSR set to: 0
 11373  00138C  BE3C               	btfsc	keypressed@i+1,7,c
 11374  00138E  D006               	goto	i2l8496
 11375  001390  503C               	movf	keypressed@i+1,w,c
 11376  001392  E11D               	bnz	i2l8502
 11377  001394  0E07               	movlw	7
 11378  001396  5C3B               	subwf	keypressed@i,w,c
 11379  001398  B0D8               	btfsc	status,0,c
 11380  00139A  D019               	goto	i2l8502
 11381  00139C                     i2l8496:
 11382                           
 11383                           ;main.c: 401: startTime[i]=time_i[i];
 11384  00139C  90D8               	bcf	status,0,c
 11385  00139E  343B               	rlcf	keypressed@i,w,c
 11386  0013A0  6ED9               	movwf	fsr2l,c
 11387  0013A2  343C               	rlcf	keypressed@i+1,w,c
 11388  0013A4  6EDA               	movwf	fsr2h,c
 11389  0013A6  0E3E               	movlw	low _time_i
 11390  0013A8  26D9               	addwf	fsr2l,f,c
 11391  0013AA  0E00               	movlw	high _time_i
 11392  0013AC  22DA               	addwfc	fsr2h,f,c
 11393  0013AE  90D8               	bcf	status,0,c
 11394  0013B0  343B               	rlcf	keypressed@i,w,c
 11395  0013B2  6EE1               	movwf	fsr1l,c
 11396  0013B4  343C               	rlcf	keypressed@i+1,w,c
 11397  0013B6  6EE2               	movwf	fsr1h,c
 11398  0013B8  0E0E               	movlw	low _startTime
 11399  0013BA  26E1               	addwf	fsr1l,f,c
 11400  0013BC  0E01               	movlw	high _startTime
 11401  0013BE  22E2               	addwfc	fsr1h,f,c
 11402  0013C0  CFDE FFE6          	movff	postinc2,postinc1
 11403  0013C4  CFDD FFE5          	movff	postdec2,postdec1
 11404  0013C8  4A3B               	infsnz	keypressed@i,f,c
 11405  0013CA  2A3C               	incf	keypressed@i+1,f,c
 11406  0013CC  D7DF               	goto	i2l8492
 11407  0013CE                     i2l8502:
 11408                           
 11409                           ;main.c: 403: if (keys[keypress]=='B'&&logIndex<events){
 11410  0013CE  503D               	movf	keypressed@keypress,w,c
 11411  0013D0  0D01               	mullw	1
 11412  0013D2  0E57               	movlw	low _keys
 11413  0013D4  24F3               	addwf	prodl,w,c
 11414  0013D6  6EF6               	movwf	tblptrl,c
 11415  0013D8  0EFE               	movlw	high _keys
 11416  0013DA  20F4               	addwfc	prodh,w,c
 11417  0013DC  6EF7               	movwf	tblptrh,c
 11418  0013DE                     	if	1	;There are 3 active tblptr bytes
 11419  0013DE  6AF8               	clrf	tblptru,c
 11420  0013E0  0E00               	movlw	low (__mediumconst shr (0+16))
 11421  0013E2  22F8               	addwfc	tblptru,f,c
 11422  0013E4                     	endif
 11423  0013E4  0008               	tblrd		*
 11424  0013E6  50F5               	movf	tablat,w,c
 11425  0013E8  0A42               	xorlw	66
 11426  0013EA  A4D8               	btfss	status,2,c
 11427  0013EC  D012               	goto	i2l8508
 11428  0013EE  0100               	movlb	0	; () banked
 11429  0013F0  51EE               	movf	_events& (0+255),w,b
 11430  0013F2  0100               	movlb	0	; () banked
 11431  0013F4  5DF0               	subwf	_logIndex& (0+255),w,b
 11432  0013F6  0100               	movlb	0	; () banked
 11433  0013F8  51F1               	movf	(_logIndex+1)& (0+255),w,b
 11434  0013FA  0A80               	xorlw	128
 11435  0013FC  6E2B               	movwf	??_keypressed& (0+255),c
 11436  0013FE  0100               	movlb	0	; () banked
 11437  001400  51EF               	movf	(_events+1)& (0+255),w,b
 11438  001402  0A80               	xorlw	128
 11439  001404  582B               	subwfb	??_keypressed& (0+255),w,c
 11440  001406  B0D8               	btfsc	status,0,c
 11441  001408  D004               	goto	i2l8508
 11442                           
 11443                           ; BSR set to: 0
 11444                           ;main.c: 407: logIndex++;
 11445  00140A  0100               	movlb	0	; () banked
 11446  00140C  4BF0               	infsnz	_logIndex& (0+255),f,b
 11447  00140E  2BF1               	incf	(_logIndex+1)& (0+255),f,b
 11448                           
 11449                           ;main.c: 408: }
 11450  001410  D1F5               	goto	i2l370
 11451  001412                     i2l8508:
 11452                           
 11453                           ;main.c: 409: else if (keys[keypress]=='A'&&logIndex>1)
 11454  001412  503D               	movf	keypressed@keypress,w,c
 11455  001414  0D01               	mullw	1
 11456  001416  0E57               	movlw	low _keys
 11457  001418  24F3               	addwf	prodl,w,c
 11458  00141A  6EF6               	movwf	tblptrl,c
 11459  00141C  0EFE               	movlw	high _keys
 11460  00141E  20F4               	addwfc	prodh,w,c
 11461  001420  6EF7               	movwf	tblptrh,c
 11462  001422                     	if	1	;There are 3 active tblptr bytes
 11463  001422  6AF8               	clrf	tblptru,c
 11464  001424  0E00               	movlw	low (__mediumconst shr (0+16))
 11465  001426  22F8               	addwfc	tblptru,f,c
 11466  001428                     	endif
 11467  001428  0008               	tblrd		*
 11468  00142A  50F5               	movf	tablat,w,c
 11469  00142C  0A41               	xorlw	65
 11470  00142E  A4D8               	btfss	status,2,c
 11471  001430  D077               	goto	i2l8542
 11472  001432  0100               	movlb	0	; () banked
 11473  001434  BFF1               	btfsc	(_logIndex+1)& (0+255),7,b
 11474  001436  D074               	goto	i2l8542
 11475  001438  0100               	movlb	0	; () banked
 11476  00143A  51F1               	movf	(_logIndex+1)& (0+255),w,b
 11477  00143C  E105               	bnz	i2u1401_40
 11478  00143E  0E02               	movlw	2
 11479  001440  0100               	movlb	0	; () banked
 11480  001442  5DF0               	subwf	_logIndex& (0+255),w,b
 11481  001444  A0D8               	btfss	status,0,c
 11482  001446  D06C               	goto	i2l8542
 11483  001448                     i2u1401_40:
 11484                           
 11485                           ; BSR set to: 0
 11486                           ;main.c: 410: logIndex--;
 11487  001448  0100               	movlb	0	; () banked
 11488  00144A  07F0               	decf	_logIndex& (0+255),f,b
 11489  00144C  A0D8               	btfss	status,0,c
 11490  00144E  07F1               	decf	(_logIndex+1)& (0+255),f,b
 11491  001450  D1D5               	goto	i2l370
 11492  001452                     i2l8518:
 11493                           
 11494                           ; BSR set to: 0
 11495                           ;main.c: 415: for (i=0;i<7;i++)
 11496  001452  0E00               	movlw	0
 11497  001454  6E3C               	movwf	keypressed@i+1,c
 11498  001456  0E00               	movlw	0
 11499  001458  6E3B               	movwf	keypressed@i,c
 11500  00145A                     i2l8520:
 11501                           
 11502                           ; BSR set to: 0
 11503  00145A  BE3C               	btfsc	keypressed@i+1,7,c
 11504  00145C  D006               	goto	i2l8524
 11505  00145E  503C               	movf	keypressed@i+1,w,c
 11506  001460  E11D               	bnz	i2l8530
 11507  001462  0E07               	movlw	7
 11508  001464  5C3B               	subwf	keypressed@i,w,c
 11509  001466  B0D8               	btfsc	status,0,c
 11510  001468  D019               	goto	i2l8530
 11511  00146A                     i2l8524:
 11512                           
 11513                           ;main.c: 416: startTime[i]=time_i[i];
 11514  00146A  90D8               	bcf	status,0,c
 11515  00146C  343B               	rlcf	keypressed@i,w,c
 11516  00146E  6ED9               	movwf	fsr2l,c
 11517  001470  343C               	rlcf	keypressed@i+1,w,c
 11518  001472  6EDA               	movwf	fsr2h,c
 11519  001474  0E3E               	movlw	low _time_i
 11520  001476  26D9               	addwf	fsr2l,f,c
 11521  001478  0E00               	movlw	high _time_i
 11522  00147A  22DA               	addwfc	fsr2h,f,c
 11523  00147C  90D8               	bcf	status,0,c
 11524  00147E  343B               	rlcf	keypressed@i,w,c
 11525  001480  6EE1               	movwf	fsr1l,c
 11526  001482  343C               	rlcf	keypressed@i+1,w,c
 11527  001484  6EE2               	movwf	fsr1h,c
 11528  001486  0E0E               	movlw	low _startTime
 11529  001488  26E1               	addwf	fsr1l,f,c
 11530  00148A  0E01               	movlw	high _startTime
 11531  00148C  22E2               	addwfc	fsr1h,f,c
 11532  00148E  CFDE FFE6          	movff	postinc2,postinc1
 11533  001492  CFDD FFE5          	movff	postdec2,postdec1
 11534  001496  4A3B               	infsnz	keypressed@i,f,c
 11535  001498  2A3C               	incf	keypressed@i+1,f,c
 11536  00149A  D7DF               	goto	i2l8520
 11537  00149C                     i2l8530:
 11538                           
 11539                           ;main.c: 418: if (keys[keypress]=='B'&&creditIndex<creditSize)
 11540  00149C  503D               	movf	keypressed@keypress,w,c
 11541  00149E  0D01               	mullw	1
 11542  0014A0  0E57               	movlw	low _keys
 11543  0014A2  24F3               	addwf	prodl,w,c
 11544  0014A4  6EF6               	movwf	tblptrl,c
 11545  0014A6  0EFE               	movlw	high _keys
 11546  0014A8  20F4               	addwfc	prodh,w,c
 11547  0014AA  6EF7               	movwf	tblptrh,c
 11548  0014AC                     	if	1	;There are 3 active tblptr bytes
 11549  0014AC  6AF8               	clrf	tblptru,c
 11550  0014AE  0E00               	movlw	low (__mediumconst shr (0+16))
 11551  0014B0  22F8               	addwfc	tblptru,f,c
 11552  0014B2                     	endif
 11553  0014B2  0008               	tblrd		*
 11554  0014B4  50F5               	movf	tablat,w,c
 11555  0014B6  0A42               	xorlw	66
 11556  0014B8  A4D8               	btfss	status,2,c
 11557  0014BA  D012               	goto	i2l8536
 11558  0014BC  0100               	movlb	0	; () banked
 11559  0014BE  51E8               	movf	_creditSize& (0+255),w,b
 11560  0014C0  0100               	movlb	0	; () banked
 11561  0014C2  5DE6               	subwf	_creditIndex& (0+255),w,b
 11562  0014C4  0100               	movlb	0	; () banked
 11563  0014C6  51E7               	movf	(_creditIndex+1)& (0+255),w,b
 11564  0014C8  0A80               	xorlw	128
 11565  0014CA  6E2B               	movwf	??_keypressed& (0+255),c
 11566  0014CC  0100               	movlb	0	; () banked
 11567  0014CE  51E9               	movf	(_creditSize+1)& (0+255),w,b
 11568  0014D0  0A80               	xorlw	128
 11569  0014D2  582B               	subwfb	??_keypressed& (0+255),w,c
 11570  0014D4  B0D8               	btfsc	status,0,c
 11571  0014D6  D004               	goto	i2l8536
 11572                           
 11573                           ; BSR set to: 0
 11574                           ;main.c: 419: creditIndex++;
 11575  0014D8  0100               	movlb	0	; () banked
 11576  0014DA  4BE6               	infsnz	_creditIndex& (0+255),f,b
 11577  0014DC  2BE7               	incf	(_creditIndex+1)& (0+255),f,b
 11578  0014DE  D18E               	goto	i2l370
 11579  0014E0                     i2l8536:
 11580                           
 11581                           ;main.c: 420: else if (keys[keypress]=='A'&&creditIndex>1)
 11582  0014E0  503D               	movf	keypressed@keypress,w,c
 11583  0014E2  0D01               	mullw	1
 11584  0014E4  0E57               	movlw	low _keys
 11585  0014E6  24F3               	addwf	prodl,w,c
 11586  0014E8  6EF6               	movwf	tblptrl,c
 11587  0014EA  0EFE               	movlw	high _keys
 11588  0014EC  20F4               	addwfc	prodh,w,c
 11589  0014EE  6EF7               	movwf	tblptrh,c
 11590  0014F0                     	if	1	;There are 3 active tblptr bytes
 11591  0014F0  6AF8               	clrf	tblptru,c
 11592  0014F2  0E00               	movlw	low (__mediumconst shr (0+16))
 11593  0014F4  22F8               	addwfc	tblptru,f,c
 11594  0014F6                     	endif
 11595  0014F6  0008               	tblrd		*
 11596  0014F8  50F5               	movf	tablat,w,c
 11597  0014FA  0A41               	xorlw	65
 11598  0014FC  A4D8               	btfss	status,2,c
 11599  0014FE  D010               	goto	i2l8542
 11600  001500  0100               	movlb	0	; () banked
 11601  001502  BFE7               	btfsc	(_creditIndex+1)& (0+255),7,b
 11602  001504  D00D               	goto	i2l8542
 11603  001506  0100               	movlb	0	; () banked
 11604  001508  51E7               	movf	(_creditIndex+1)& (0+255),w,b
 11605  00150A  E105               	bnz	i2u1408_40
 11606  00150C  0E02               	movlw	2
 11607  00150E  0100               	movlb	0	; () banked
 11608  001510  5DE6               	subwf	_creditIndex& (0+255),w,b
 11609  001512  A0D8               	btfss	status,0,c
 11610  001514  D005               	goto	i2l8542
 11611  001516                     i2u1408_40:
 11612                           
 11613                           ; BSR set to: 0
 11614                           ;main.c: 421: creditIndex--;
 11615  001516  0100               	movlb	0	; () banked
 11616  001518  07E6               	decf	_creditIndex& (0+255),f,b
 11617  00151A  A0D8               	btfss	status,0,c
 11618  00151C  07E7               	decf	(_creditIndex+1)& (0+255),f,b
 11619  00151E  D16E               	goto	i2l370
 11620  001520                     i2l8542:
 11621                           
 11622                           ;main.c: 422: else if(keys[keypress]=='D')
 11623  001520  503D               	movf	keypressed@keypress,w,c
 11624  001522  0D01               	mullw	1
 11625  001524  0E57               	movlw	low _keys
 11626  001526  24F3               	addwf	prodl,w,c
 11627  001528  6EF6               	movwf	tblptrl,c
 11628  00152A  0EFE               	movlw	high _keys
 11629  00152C  20F4               	addwfc	prodh,w,c
 11630  00152E  6EF7               	movwf	tblptrh,c
 11631  001530                     	if	1	;There are 3 active tblptr bytes
 11632  001530  6AF8               	clrf	tblptru,c
 11633  001532  0E00               	movlw	low (__mediumconst shr (0+16))
 11634  001534  22F8               	addwfc	tblptru,f,c
 11635  001536                     	endif
 11636  001536  0008               	tblrd		*
 11637  001538  50F5               	movf	tablat,w,c
 11638  00153A  0A44               	xorlw	68
 11639  00153C  A4D8               	btfss	status,2,c
 11640  00153E  D15E               	goto	i2l370
 11641  001540                     i2l8544:
 11642                           
 11643                           ;main.c: 423: nstate='m';
 11644  001540  0E6D               	movlw	109
 11645  001542  D13D               	goto	L9
 11646  001544                     i2l8546:
 11647                           
 11648                           ; BSR set to: 0
 11649                           ;main.c: 426: if (keys[keypress]=='1'){
 11650  001544  503D               	movf	keypressed@keypress,w,c
 11651  001546  0D01               	mullw	1
 11652  001548  0E57               	movlw	low _keys
 11653  00154A  24F3               	addwf	prodl,w,c
 11654  00154C  6EF6               	movwf	tblptrl,c
 11655  00154E  0EFE               	movlw	high _keys
 11656  001550  20F4               	addwfc	prodh,w,c
 11657  001552  6EF7               	movwf	tblptrh,c
 11658  001554                     	if	1	;There are 3 active tblptr bytes
 11659  001554  6AF8               	clrf	tblptru,c
 11660  001556  0E00               	movlw	low (__mediumconst shr (0+16))
 11661  001558  22F8               	addwfc	tblptru,f,c
 11662  00155A                     	endif
 11663  00155A  0008               	tblrd		*
 11664  00155C  50F5               	movf	tablat,w,c
 11665  00155E  0A31               	xorlw	49
 11666  001560  A4D8               	btfss	status,2,c
 11667  001562  D012               	goto	i2l8552
 11668                           
 11669                           ; BSR set to: 0
 11670                           ;main.c: 427: eskaNoCap++;
 11671  001564  0100               	movlb	0	; () banked
 11672  001566  4BC8               	infsnz	_eskaNoCap& (0+255),f,b
 11673  001568  2BC9               	incf	(_eskaNoCap+1)& (0+255),f,b
 11674                           
 11675                           ; BSR set to: 0
 11676                           ;main.c: 428: eskaNoCap%=100;
 11677  00156A  C0C8  F001         	movff	_eskaNoCap,i2___awmod@dividend
 11678  00156E  C0C9  F002         	movff	_eskaNoCap+1,i2___awmod@dividend+1
 11679  001572  0E00               	movlw	0
 11680  001574  6E04               	movwf	i2___awmod@divisor+1,c
 11681  001576  0E64               	movlw	100
 11682  001578  6E03               	movwf	i2___awmod@divisor,c
 11683  00157A  EC8F  F01B         	call	i2___awmod	;wreg free
 11684  00157E  C001  F0C8         	movff	?i2___awmod,_eskaNoCap
 11685  001582  C002  F0C9         	movff	?i2___awmod+1,_eskaNoCap+1
 11686                           
 11687                           ;main.c: 429: }
 11688  001586  D13A               	goto	i2l370
 11689  001588                     i2l8552:
 11690                           
 11691                           ;main.c: 430: else if (keys[keypress]=='2'){
 11692  001588  503D               	movf	keypressed@keypress,w,c
 11693  00158A  0D01               	mullw	1
 11694  00158C  0E57               	movlw	low _keys
 11695  00158E  24F3               	addwf	prodl,w,c
 11696  001590  6EF6               	movwf	tblptrl,c
 11697  001592  0EFE               	movlw	high _keys
 11698  001594  20F4               	addwfc	prodh,w,c
 11699  001596  6EF7               	movwf	tblptrh,c
 11700  001598                     	if	1	;There are 3 active tblptr bytes
 11701  001598  6AF8               	clrf	tblptru,c
 11702  00159A  0E00               	movlw	low (__mediumconst shr (0+16))
 11703  00159C  22F8               	addwfc	tblptru,f,c
 11704  00159E                     	endif
 11705  00159E  0008               	tblrd		*
 11706  0015A0  50F5               	movf	tablat,w,c
 11707  0015A2  0A32               	xorlw	50
 11708  0015A4  A4D8               	btfss	status,2,c
 11709  0015A6  D012               	goto	i2l8558
 11710                           
 11711                           ;main.c: 431: eskaWCap++;
 11712  0015A8  0100               	movlb	0	; () banked
 11713  0015AA  4BCA               	infsnz	_eskaWCap& (0+255),f,b
 11714  0015AC  2BCB               	incf	(_eskaWCap+1)& (0+255),f,b
 11715                           
 11716                           ; BSR set to: 0
 11717                           ;main.c: 432: eskaWCap%=100;
 11718  0015AE  C0CA  F001         	movff	_eskaWCap,i2___awmod@dividend
 11719  0015B2  C0CB  F002         	movff	_eskaWCap+1,i2___awmod@dividend+1
 11720  0015B6  0E00               	movlw	0
 11721  0015B8  6E04               	movwf	i2___awmod@divisor+1,c
 11722  0015BA  0E64               	movlw	100
 11723  0015BC  6E03               	movwf	i2___awmod@divisor,c
 11724  0015BE  EC8F  F01B         	call	i2___awmod	;wreg free
 11725  0015C2  C001  F0CA         	movff	?i2___awmod,_eskaWCap
 11726  0015C6  C002  F0CB         	movff	?i2___awmod+1,_eskaWCap+1
 11727                           
 11728                           ;main.c: 433: }
 11729  0015CA  D118               	goto	i2l370
 11730  0015CC                     i2l8558:
 11731                           
 11732                           ;main.c: 434: else if (keys[keypress]=='4'){
 11733  0015CC  503D               	movf	keypressed@keypress,w,c
 11734  0015CE  0D01               	mullw	1
 11735  0015D0  0E57               	movlw	low _keys
 11736  0015D2  24F3               	addwf	prodl,w,c
 11737  0015D4  6EF6               	movwf	tblptrl,c
 11738  0015D6  0EFE               	movlw	high _keys
 11739  0015D8  20F4               	addwfc	prodh,w,c
 11740  0015DA  6EF7               	movwf	tblptrh,c
 11741  0015DC                     	if	1	;There are 3 active tblptr bytes
 11742  0015DC  6AF8               	clrf	tblptru,c
 11743  0015DE  0E00               	movlw	low (__mediumconst shr (0+16))
 11744  0015E0  22F8               	addwfc	tblptru,f,c
 11745  0015E2                     	endif
 11746  0015E2  0008               	tblrd		*
 11747  0015E4  50F5               	movf	tablat,w,c
 11748  0015E6  0A34               	xorlw	52
 11749  0015E8  A4D8               	btfss	status,2,c
 11750  0015EA  D012               	goto	i2l8564
 11751                           
 11752                           ;main.c: 435: yopNoCap++;
 11753  0015EC  0100               	movlb	0	; () banked
 11754  0015EE  4BD6               	infsnz	_yopNoCap& (0+255),f,b
 11755  0015F0  2BD7               	incf	(_yopNoCap+1)& (0+255),f,b
 11756                           
 11757                           ; BSR set to: 0
 11758                           ;main.c: 436: yopNoCap%=100;
 11759  0015F2  C0D6  F001         	movff	_yopNoCap,i2___awmod@dividend
 11760  0015F6  C0D7  F002         	movff	_yopNoCap+1,i2___awmod@dividend+1
 11761  0015FA  0E00               	movlw	0
 11762  0015FC  6E04               	movwf	i2___awmod@divisor+1,c
 11763  0015FE  0E64               	movlw	100
 11764  001600  6E03               	movwf	i2___awmod@divisor,c
 11765  001602  EC8F  F01B         	call	i2___awmod	;wreg free
 11766  001606  C001  F0D6         	movff	?i2___awmod,_yopNoCap
 11767  00160A  C002  F0D7         	movff	?i2___awmod+1,_yopNoCap+1
 11768                           
 11769                           ;main.c: 437: }
 11770  00160E  D0F6               	goto	i2l370
 11771  001610                     i2l8564:
 11772                           
 11773                           ;main.c: 438: else if (keys[keypress]=='5'){
 11774  001610  503D               	movf	keypressed@keypress,w,c
 11775  001612  0D01               	mullw	1
 11776  001614  0E57               	movlw	low _keys
 11777  001616  24F3               	addwf	prodl,w,c
 11778  001618  6EF6               	movwf	tblptrl,c
 11779  00161A  0EFE               	movlw	high _keys
 11780  00161C  20F4               	addwfc	prodh,w,c
 11781  00161E  6EF7               	movwf	tblptrh,c
 11782  001620                     	if	1	;There are 3 active tblptr bytes
 11783  001620  6AF8               	clrf	tblptru,c
 11784  001622  0E00               	movlw	low (__mediumconst shr (0+16))
 11785  001624  22F8               	addwfc	tblptru,f,c
 11786  001626                     	endif
 11787  001626  0008               	tblrd		*
 11788  001628  50F5               	movf	tablat,w,c
 11789  00162A  0A35               	xorlw	53
 11790  00162C  A4D8               	btfss	status,2,c
 11791  00162E  D012               	goto	i2l8570
 11792                           
 11793                           ;main.c: 439: yopWCap++;
 11794  001630  0100               	movlb	0	; () banked
 11795  001632  4BD8               	infsnz	_yopWCap& (0+255),f,b
 11796  001634  2BD9               	incf	(_yopWCap+1)& (0+255),f,b
 11797                           
 11798                           ; BSR set to: 0
 11799                           ;main.c: 440: yopWCap%=100;
 11800  001636  C0D8  F001         	movff	_yopWCap,i2___awmod@dividend
 11801  00163A  C0D9  F002         	movff	_yopWCap+1,i2___awmod@dividend+1
 11802  00163E  0E00               	movlw	0
 11803  001640  6E04               	movwf	i2___awmod@divisor+1,c
 11804  001642  0E64               	movlw	100
 11805  001644  6E03               	movwf	i2___awmod@divisor,c
 11806  001646  EC8F  F01B         	call	i2___awmod	;wreg free
 11807  00164A  C001  F0D8         	movff	?i2___awmod,_yopWCap
 11808  00164E  C002  F0D9         	movff	?i2___awmod+1,_yopWCap+1
 11809                           
 11810                           ;main.c: 441: }
 11811  001652  D0D4               	goto	i2l370
 11812  001654                     i2l8570:
 11813                           
 11814                           ;main.c: 442: else if (keys[keypress]=='7'||keys[keypress]=='8')
 11815  001654  503D               	movf	keypressed@keypress,w,c
 11816  001656  0D01               	mullw	1
 11817  001658  0E57               	movlw	low _keys
 11818  00165A  24F3               	addwf	prodl,w,c
 11819  00165C  6EF6               	movwf	tblptrl,c
 11820  00165E  0EFE               	movlw	high _keys
 11821  001660  20F4               	addwfc	prodh,w,c
 11822  001662  6EF7               	movwf	tblptrh,c
 11823  001664                     	if	1	;There are 3 active tblptr bytes
 11824  001664  6AF8               	clrf	tblptru,c
 11825  001666  0E00               	movlw	low (__mediumconst shr (0+16))
 11826  001668  22F8               	addwfc	tblptru,f,c
 11827  00166A                     	endif
 11828  00166A  0008               	tblrd		*
 11829  00166C  50F5               	movf	tablat,w,c
 11830  00166E  0A37               	xorlw	55
 11831  001670  B4D8               	btfsc	status,2,c
 11832  001672  D010               	goto	i2l8574
 11833  001674  503D               	movf	keypressed@keypress,w,c
 11834  001676  0D01               	mullw	1
 11835  001678  0E57               	movlw	low _keys
 11836  00167A  24F3               	addwf	prodl,w,c
 11837  00167C  6EF6               	movwf	tblptrl,c
 11838  00167E  0EFE               	movlw	high _keys
 11839  001680  20F4               	addwfc	prodh,w,c
 11840  001682  6EF7               	movwf	tblptrh,c
 11841  001684                     	if	1	;There are 3 active tblptr bytes
 11842  001684  6AF8               	clrf	tblptru,c
 11843  001686  0E00               	movlw	low (__mediumconst shr (0+16))
 11844  001688  22F8               	addwfc	tblptru,f,c
 11845  00168A                     	endif
 11846  00168A  0008               	tblrd		*
 11847  00168C  50F5               	movf	tablat,w,c
 11848  00168E  0A38               	xorlw	56
 11849  001690  A4D8               	btfss	status,2,c
 11850  001692  D002               	goto	i2l8576
 11851  001694                     i2l8574:
 11852                           
 11853                           ;main.c: 443: nstate='e';
 11854  001694  0E65               	movlw	101
 11855  001696  D093               	goto	L9
 11856  001698                     i2l8576:
 11857                           
 11858                           ;main.c: 444: else if (keys[keypress]=='B'&&sortIndex<sortSize)
 11859  001698  503D               	movf	keypressed@keypress,w,c
 11860  00169A  0D01               	mullw	1
 11861  00169C  0E57               	movlw	low _keys
 11862  00169E  24F3               	addwf	prodl,w,c
 11863  0016A0  6EF6               	movwf	tblptrl,c
 11864  0016A2  0EFE               	movlw	high _keys
 11865  0016A4  20F4               	addwfc	prodh,w,c
 11866  0016A6  6EF7               	movwf	tblptrh,c
 11867  0016A8                     	if	1	;There are 3 active tblptr bytes
 11868  0016A8  6AF8               	clrf	tblptru,c
 11869  0016AA  0E00               	movlw	low (__mediumconst shr (0+16))
 11870  0016AC  22F8               	addwfc	tblptru,f,c
 11871  0016AE                     	endif
 11872  0016AE  0008               	tblrd		*
 11873  0016B0  50F5               	movf	tablat,w,c
 11874  0016B2  0A42               	xorlw	66
 11875  0016B4  A4D8               	btfss	status,2,c
 11876  0016B6  D010               	goto	i2l8582
 11877  0016B8  5073               	movf	_sortSize,w,c
 11878  0016BA  0100               	movlb	0	; () banked
 11879  0016BC  5DE2               	subwf	_sortIndex& (0+255),w,b
 11880  0016BE  0100               	movlb	0	; () banked
 11881  0016C0  51E3               	movf	(_sortIndex+1)& (0+255),w,b
 11882  0016C2  0A80               	xorlw	128
 11883  0016C4  6E2B               	movwf	??_keypressed& (0+255),c
 11884  0016C6  5074               	movf	_sortSize+1,w,c
 11885  0016C8  0A80               	xorlw	128
 11886  0016CA  582B               	subwfb	??_keypressed& (0+255),w,c
 11887  0016CC  B0D8               	btfsc	status,0,c
 11888  0016CE  D004               	goto	i2l8582
 11889                           
 11890                           ; BSR set to: 0
 11891                           ;main.c: 445: sortIndex++;
 11892  0016D0  0100               	movlb	0	; () banked
 11893  0016D2  4BE2               	infsnz	_sortIndex& (0+255),f,b
 11894  0016D4  2BE3               	incf	(_sortIndex+1)& (0+255),f,b
 11895  0016D6  D092               	goto	i2l370
 11896  0016D8                     i2l8582:
 11897                           
 11898                           ;main.c: 446: else if (keys[keypress]=='A'&&sortIndex>1)
 11899  0016D8  503D               	movf	keypressed@keypress,w,c
 11900  0016DA  0D01               	mullw	1
 11901  0016DC  0E57               	movlw	low _keys
 11902  0016DE  24F3               	addwf	prodl,w,c
 11903  0016E0  6EF6               	movwf	tblptrl,c
 11904  0016E2  0EFE               	movlw	high _keys
 11905  0016E4  20F4               	addwfc	prodh,w,c
 11906  0016E6  6EF7               	movwf	tblptrh,c
 11907  0016E8                     	if	1	;There are 3 active tblptr bytes
 11908  0016E8  6AF8               	clrf	tblptru,c
 11909  0016EA  0E00               	movlw	low (__mediumconst shr (0+16))
 11910  0016EC  22F8               	addwfc	tblptru,f,c
 11911  0016EE                     	endif
 11912  0016EE  0008               	tblrd		*
 11913  0016F0  50F5               	movf	tablat,w,c
 11914  0016F2  0A41               	xorlw	65
 11915  0016F4  A4D8               	btfss	status,2,c
 11916  0016F6  D082               	goto	i2l370
 11917  0016F8  0100               	movlb	0	; () banked
 11918  0016FA  BFE3               	btfsc	(_sortIndex+1)& (0+255),7,b
 11919  0016FC  D07F               	goto	i2l370
 11920  0016FE  0100               	movlb	0	; () banked
 11921  001700  51E3               	movf	(_sortIndex+1)& (0+255),w,b
 11922  001702  E105               	bnz	i2u1419_40
 11923  001704  0E02               	movlw	2
 11924  001706  0100               	movlb	0	; () banked
 11925  001708  5DE2               	subwf	_sortIndex& (0+255),w,b
 11926  00170A  A0D8               	btfss	status,0,c
 11927  00170C  D077               	goto	i2l370
 11928  00170E                     i2u1419_40:
 11929                           
 11930                           ; BSR set to: 0
 11931                           ;main.c: 447: sortIndex--;
 11932  00170E  0100               	movlb	0	; () banked
 11933  001710  07E2               	decf	_sortIndex& (0+255),f,b
 11934  001712  A0D8               	btfss	status,0,c
 11935  001714  07E3               	decf	(_sortIndex+1)& (0+255),f,b
 11936                           
 11937                           ; BSR set to: 0
 11938                           ;main.c: 448: break;
 11939                           
 11940                           ; BSR set to: 0
 11941                           
 11942                           ; BSR set to: 0
 11943                           
 11944                           ; BSR set to: 0
 11945                           
 11946                           ; BSR set to: 0
 11947                           
 11948                           ; BSR set to: 0
 11949                           
 11950                           ; BSR set to: 0
 11951  001716  D072               	goto	i2l370
 11952  001718                     i2l8588:
 11953                           
 11954                           ; BSR set to: 0
 11955                           ;main.c: 450: if (keys[keypress]=='B'&&endIndex<endSize)
 11956  001718  503D               	movf	keypressed@keypress,w,c
 11957  00171A  0D01               	mullw	1
 11958  00171C  0E57               	movlw	low _keys
 11959  00171E  24F3               	addwf	prodl,w,c
 11960  001720  6EF6               	movwf	tblptrl,c
 11961  001722  0EFE               	movlw	high _keys
 11962  001724  20F4               	addwfc	prodh,w,c
 11963  001726  6EF7               	movwf	tblptrh,c
 11964  001728                     	if	1	;There are 3 active tblptr bytes
 11965  001728  6AF8               	clrf	tblptru,c
 11966  00172A  0E00               	movlw	low (__mediumconst shr (0+16))
 11967  00172C  22F8               	addwfc	tblptru,f,c
 11968  00172E                     	endif
 11969  00172E  0008               	tblrd		*
 11970  001730  50F5               	movf	tablat,w,c
 11971  001732  0A42               	xorlw	66
 11972  001734  A4D8               	btfss	status,2,c
 11973  001736  D012               	goto	i2l8594
 11974                           
 11975                           ; BSR set to: 0
 11976  001738  0100               	movlb	0	; () banked
 11977  00173A  51EC               	movf	_endSize& (0+255),w,b
 11978  00173C  0100               	movlb	0	; () banked
 11979  00173E  5DEA               	subwf	_endIndex& (0+255),w,b
 11980  001740  0100               	movlb	0	; () banked
 11981  001742  51EB               	movf	(_endIndex+1)& (0+255),w,b
 11982  001744  0A80               	xorlw	128
 11983  001746  6E2B               	movwf	??_keypressed& (0+255),c
 11984  001748  0100               	movlb	0	; () banked
 11985  00174A  51ED               	movf	(_endSize+1)& (0+255),w,b
 11986  00174C  0A80               	xorlw	128
 11987  00174E  582B               	subwfb	??_keypressed& (0+255),w,c
 11988  001750  B0D8               	btfsc	status,0,c
 11989  001752  D004               	goto	i2l8594
 11990                           
 11991                           ; BSR set to: 0
 11992                           ;main.c: 451: endIndex++;
 11993  001754  0100               	movlb	0	; () banked
 11994  001756  4BEA               	infsnz	_endIndex& (0+255),f,b
 11995  001758  2BEB               	incf	(_endIndex+1)& (0+255),f,b
 11996  00175A  D050               	goto	i2l370
 11997  00175C                     i2l8594:
 11998                           
 11999                           ; BSR set to: 0
 12000                           ;main.c: 452: else if (keys[keypress]=='A'&&endIndex>1)
 12001  00175C  503D               	movf	keypressed@keypress,w,c
 12002  00175E  0D01               	mullw	1
 12003  001760  0E57               	movlw	low _keys
 12004  001762  24F3               	addwf	prodl,w,c
 12005  001764  6EF6               	movwf	tblptrl,c
 12006  001766  0EFE               	movlw	high _keys
 12007  001768  20F4               	addwfc	prodh,w,c
 12008  00176A  6EF7               	movwf	tblptrh,c
 12009  00176C                     	if	1	;There are 3 active tblptr bytes
 12010  00176C  6AF8               	clrf	tblptru,c
 12011  00176E  0E00               	movlw	low (__mediumconst shr (0+16))
 12012  001770  22F8               	addwfc	tblptru,f,c
 12013  001772                     	endif
 12014  001772  0008               	tblrd		*
 12015  001774  50F5               	movf	tablat,w,c
 12016  001776  0A41               	xorlw	65
 12017  001778  A4D8               	btfss	status,2,c
 12018  00177A  D010               	goto	i2l8600
 12019                           
 12020                           ; BSR set to: 0
 12021  00177C  0100               	movlb	0	; () banked
 12022  00177E  BFEB               	btfsc	(_endIndex+1)& (0+255),7,b
 12023  001780  D00D               	goto	i2l8600
 12024  001782  0100               	movlb	0	; () banked
 12025  001784  51EB               	movf	(_endIndex+1)& (0+255),w,b
 12026  001786  E105               	bnz	i2u1423_40
 12027  001788  0E02               	movlw	2
 12028  00178A  0100               	movlb	0	; () banked
 12029  00178C  5DEA               	subwf	_endIndex& (0+255),w,b
 12030  00178E  A0D8               	btfss	status,0,c
 12031  001790  D005               	goto	i2l8600
 12032  001792                     i2u1423_40:
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;main.c: 453: endIndex--;
 12036  001792  0100               	movlb	0	; () banked
 12037  001794  07EA               	decf	_endIndex& (0+255),f,b
 12038  001796  A0D8               	btfss	status,0,c
 12039  001798  07EB               	decf	(_endIndex+1)& (0+255),f,b
 12040  00179A  D030               	goto	i2l370
 12041  00179C                     i2l8600:
 12042                           
 12043                           ; BSR set to: 0
 12044                           ;main.c: 454: else if (keys[keypress]=='C')
 12045  00179C  503D               	movf	keypressed@keypress,w,c
 12046  00179E  0D01               	mullw	1
 12047  0017A0  0E57               	movlw	low _keys
 12048  0017A2  24F3               	addwf	prodl,w,c
 12049  0017A4  6EF6               	movwf	tblptrl,c
 12050  0017A6  0EFE               	movlw	high _keys
 12051  0017A8  20F4               	addwfc	prodh,w,c
 12052  0017AA  6EF7               	movwf	tblptrh,c
 12053  0017AC                     	if	1	;There are 3 active tblptr bytes
 12054  0017AC  6AF8               	clrf	tblptru,c
 12055  0017AE  0E00               	movlw	low (__mediumconst shr (0+16))
 12056  0017B0  22F8               	addwfc	tblptru,f,c
 12057  0017B2                     	endif
 12058  0017B2  0008               	tblrd		*
 12059  0017B4  50F5               	movf	tablat,w,c
 12060  0017B6  0A43               	xorlw	67
 12061  0017B8  A4D8               	btfss	status,2,c
 12062  0017BA  D020               	goto	i2l370
 12063                           
 12064                           ; BSR set to: 0
 12065                           ;main.c: 455: nstate='r';
 12066  0017BC  0E72               	movlw	114
 12067  0017BE                     L9:
 12068  0017BE  0100               	movlb	0	; () banked
 12069  0017C0  6FE4               	movwf	_nstate& (0+255),b
 12070                           
 12071                           ; BSR set to: 0
 12072                           ;main.c: 456: break;
 12073                           
 12074                           ; BSR set to: 0
 12075                           
 12076                           ; BSR set to: 0
 12077  0017C2  D01C               	goto	i2l370
 12078  0017C4                     i2l8604:
 12079                           
 12080                           ; BSR set to: 0
 12081                           ;main.c: 458: printf("no page found");
 12082  0017C4  0EBF               	movlw	low STR_25
 12083  0017C6  6E23               	movwf	i2printf@f,c
 12084  0017C8  0EFF               	movlw	high STR_25
 12085  0017CA  6E24               	movwf	i2printf@f+1,c
 12086  0017CC  ECBB  F01D         	call	i2_printf	;wreg free
 12087                           
 12088                           ;main.c: 460: }
 12089                           
 12090                           ;main.c: 459: break;
 12091  0017D0  D015               	goto	i2l370
 12092  0017D2                     i2l8608:
 12093  0017D2  0100               	movlb	0	; () banked
 12094  0017D4  51E5               	movf	_state& (0+255),w,b
 12095                           
 12096                           ; Switch size 1, requested type "space"
 12097                           ; Number of cases is 6, Range of values is 99 to 115
 12098                           ; switch strategies available:
 12099                           ; Name         Instructions Cycles
 12100                           ; simple_byte           19    10 (average)
 12101                           ;	Chosen strategy is simple_byte
 12102  0017D6  0A63               	xorlw	99	; case 99
 12103  0017D8  B4D8               	btfsc	status,2,c
 12104  0017DA  D63B               	goto	i2l8518
 12105  0017DC  0A06               	xorlw	6	; case 101
 12106  0017DE  B4D8               	btfsc	status,2,c
 12107  0017E0  D79B               	goto	i2l8588
 12108  0017E2  0A09               	xorlw	9	; case 108
 12109  0017E4  B4D8               	btfsc	status,2,c
 12110  0017E6  D5CE               	goto	i2l8490
 12111  0017E8  0A01               	xorlw	1	; case 109
 12112  0017EA  B4D8               	btfsc	status,2,c
 12113  0017EC  D524               	goto	i2l8442
 12114  0017EE  0A1F               	xorlw	31	; case 114
 12115  0017F0  B4D8               	btfsc	status,2,c
 12116  0017F2  D6A6               	goto	i2l8544
 12117  0017F4  0A01               	xorlw	1	; case 115
 12118  0017F6  B4D8               	btfsc	status,2,c
 12119  0017F8  D6A5               	goto	i2l8546
 12120  0017FA  D7E4               	goto	i2l8604
 12121  0017FC                     i2l370:
 12122                           
 12123                           ;main.c: 461: INT1IF = 0;
 12124  0017FC  90F0               	bcf	intcon3,0,c	;volatile
 12125  0017FE                     i2l411:
 12126  0017FE  C03A  FFF5         	movff	??_keypressed+15,tablat
 12127  001802  C039  FFF8         	movff	??_keypressed+14,tblptru
 12128  001806  C038  FFF7         	movff	??_keypressed+13,tblptrh
 12129  00180A  C037  FFF6         	movff	??_keypressed+12,tblptrl
 12130  00180E  C036  FFF4         	movff	??_keypressed+11,prodh
 12131  001812  C035  FFF3         	movff	??_keypressed+10,prodl
 12132  001816  C034  FFDA         	movff	??_keypressed+9,fsr2h
 12133  00181A  C033  FFD9         	movff	??_keypressed+8,fsr2l
 12134  00181E  C032  FFE2         	movff	??_keypressed+7,fsr1h
 12135  001822  C031  FFE1         	movff	??_keypressed+6,fsr1l
 12136  001826  C030  FFEA         	movff	??_keypressed+5,fsr0h
 12137  00182A  C02F  FFE9         	movff	??_keypressed+4,fsr0l
 12138  00182E  C02E  FFFB         	movff	??_keypressed+3,pclatu
 12139  001832  C02D  FFFA         	movff	??_keypressed+2,pclath
 12140  001836  927B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12141  001838  0011               	retfie		f
 12142  00183A                     __end_of_keypressed:
 12143                           	opt stack 0
 12144                           tosu	equ	0xFFF
 12145                           tosh	equ	0xFFE
 12146                           tosl	equ	0xFFD
 12147                           pclatu	equ	0xFFB
 12148                           pclath	equ	0xFFA
 12149                           tblptru	equ	0xFF8
 12150                           tblptrh	equ	0xFF7
 12151                           tblptrl	equ	0xFF6
 12152                           tablat	equ	0xFF5
 12153                           prodh	equ	0xFF4
 12154                           prodl	equ	0xFF3
 12155                           intcon	equ	0xFF2
 12156                           intcon2	equ	0xFF1
 12157                           intcon3	equ	0xFF0
 12158                           indf0	equ	0xFEF
 12159                           postinc0	equ	0xFEE
 12160                           fsr0h	equ	0xFEA
 12161                           fsr0l	equ	0xFE9
 12162                           wreg	equ	0xFE8
 12163                           indf1	equ	0xFE7
 12164                           postinc1	equ	0xFE6
 12165                           postdec1	equ	0xFE5
 12166                           fsr1h	equ	0xFE2
 12167                           fsr1l	equ	0xFE1
 12168                           indf2	equ	0xFDF
 12169                           postinc2	equ	0xFDE
 12170                           postdec2	equ	0xFDD
 12171                           fsr2h	equ	0xFDA
 12172                           fsr2l	equ	0xFD9
 12173                           status	equ	0xFD8
 12174                           
 12175 ;; *************** function i2_printf *****************
 12176 ;; Defined at:
 12177 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
 12178 ;; Parameters:    Size  Location     Type
 12179 ;;  f               2   34[COMRAM] PTR const unsigned char 
 12180 ;;		 -> STR_25(14), STR_24(15), STR_23(8), display1(18), 
 12181 ;;		 -> display0(18), 
 12182 ;; Auto vars:     Size  Location     Type
 12183 ;;  printf          4   38[COMRAM] struct __prbuf
 12184 ;;  printf          2   36[COMRAM] PTR void [1]
 12185 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
 12186 ;; Return value:  Size  Location     Type
 12187 ;;                  2   34[COMRAM] int 
 12188 ;; Registers used:
 12189 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12190 ;; Tracked objects:
 12191 ;;		On entry : 0/0
 12192 ;;		On exit  : 0/0
 12193 ;;		Unchanged: 0/0
 12194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12195 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12196 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12198 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12199 ;;Total ram usage:        8 bytes
 12200 ;; Hardware stack levels used:    1
 12201 ;; Hardware stack levels required when called:    3
 12202 ;; This function calls:
 12203 ;;		i2__doprnt
 12204 ;; This function is called by:
 12205 ;;		_keypressed
 12206 ;; This function uses a non-reentrant model
 12207 ;;
 12208                           
 12209                           	psect	text34
 12210  003B76                     __ptext34:
 12211                           	opt stack 0
 12212  003B76                     i2_printf:
 12213                           	opt stack 20
 12214                           
 12215                           ;incstack = 0
 12216  003B76  0E00               	movlw	0
 12217  003B78  6E27               	movwf	i2printf@pb,c
 12218  003B7A  0E00               	movlw	0
 12219  003B7C  6E28               	movwf	i2printf@pb+1,c
 12220  003B7E  0EFC               	movlw	low i2_putch
 12221  003B80  6E29               	movwf	i2printf@pb+2,c
 12222  003B82  0E3C               	movlw	high i2_putch
 12223  003B84  6E2A               	movwf	i2printf@pb+3,c
 12224  003B86  0E25               	movlw	low (?i2_printf+2)
 12225  003B88  6E25               	movwf	i2printf@ap,c
 12226  003B8A  0E00               	movlw	high (?i2_printf+2)
 12227  003B8C  6E26               	movwf	i2printf@ap+1,c
 12228                           
 12229                           ;	Return value of i2_printf is never used
 12230  003B8E  0E27               	movlw	low i2printf@pb
 12231  003B90  6E0D               	movwf	i2__doprnt@pb,c
 12232  003B92  0E00               	movlw	high i2printf@pb
 12233  003B94  6E0E               	movwf	i2__doprnt@pb+1,c
 12234  003B96  C023  F00F         	movff	i2printf@f,i2__doprnt@f
 12235  003B9A  C024  F010         	movff	i2printf@f+1,i2__doprnt@f+1
 12236  003B9E  0E25               	movlw	low i2printf@ap
 12237  003BA0  6E11               	movwf	i2__doprnt@ap,c
 12238  003BA2  0E00               	movlw	high i2printf@ap
 12239  003BA4  6E12               	movwf	i2__doprnt@ap+1,c
 12240  003BA6  ECCB  F004         	call	i2__doprnt	;wreg free
 12241  003BAA  0012               	return	
 12242  003BAC                     __end_ofi2_printf:
 12243                           	opt stack 0
 12244                           tosu	equ	0xFFF
 12245                           tosh	equ	0xFFE
 12246                           tosl	equ	0xFFD
 12247                           pclatu	equ	0xFFB
 12248                           pclath	equ	0xFFA
 12249                           tblptru	equ	0xFF8
 12250                           tblptrh	equ	0xFF7
 12251                           tblptrl	equ	0xFF6
 12252                           tablat	equ	0xFF5
 12253                           prodh	equ	0xFF4
 12254                           prodl	equ	0xFF3
 12255                           intcon	equ	0xFF2
 12256                           intcon2	equ	0xFF1
 12257                           intcon3	equ	0xFF0
 12258                           indf0	equ	0xFEF
 12259                           postinc0	equ	0xFEE
 12260                           fsr0h	equ	0xFEA
 12261                           fsr0l	equ	0xFE9
 12262                           wreg	equ	0xFE8
 12263                           indf1	equ	0xFE7
 12264                           postinc1	equ	0xFE6
 12265                           postdec1	equ	0xFE5
 12266                           fsr1h	equ	0xFE2
 12267                           fsr1l	equ	0xFE1
 12268                           indf2	equ	0xFDF
 12269                           postinc2	equ	0xFDE
 12270                           postdec2	equ	0xFDD
 12271                           fsr2h	equ	0xFDA
 12272                           fsr2l	equ	0xFD9
 12273                           status	equ	0xFD8
 12274                           
 12275 ;; *************** function i2__doprnt *****************
 12276 ;; Defined at:
 12277 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12278 ;; Parameters:    Size  Location     Type
 12279 ;;  pb              2   12[COMRAM] PTR struct __prbuf
 12280 ;;		 -> sprintf@pb(4), printf@pb(4), 
 12281 ;;  f               2   14[COMRAM] PTR const unsigned char 
 12282 ;;		 -> STR_25(14), STR_24(15), STR_23(8), STR_22(5), 
 12283 ;;		 -> STR_21(5), STR_20(5), STR_19(5), STR_18(20), 
 12284 ;;		 -> STR_17(20), STR_16(22), STR_15(19), menu(720), 
 12285 ;;		 -> STR_14(15), STR_13(6), STR_12(18), STR_11(19), 
 12286 ;;		 -> STR_10(16), STR_9(12), STR_8(19), STR_7(17), 
 12287 ;;		 -> STR_6(14), STR_5(12), STR_4(16), STR_3(25), 
 12288 ;;		 -> STR_2(23), STR_1(23), display1(18), display0(18), 
 12289 ;;  ap              2   16[COMRAM] PTR PTR void 
 12290 ;;		 -> sprintf@ap(2), printf@ap(2), 
 12291 ;; Auto vars:     Size  Location     Type
 12292 ;;  _doprnt         4    0        struct .
 12293 ;;  _doprnt         2   31[COMRAM] int 
 12294 ;;  _doprnt         2   28[COMRAM] unsigned int 
 12295 ;;  _doprnt         2   26[COMRAM] PTR const unsigned char 
 12296 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_26(7), 
 12297 ;;		 -> _doprnt@c(1), ADRESH(1), menu(720), ndisplay1(18), 
 12298 ;;		 -> ndisplay0(18), 
 12299 ;;  _doprnt         2   24[COMRAM] unsigned int 
 12300 ;;  _doprnt         1   33[COMRAM] char 
 12301 ;;  _doprnt         1   30[COMRAM] unsigned char 
 12302 ;;  _doprnt         1   23[COMRAM] char 
 12303 ;;  _doprnt         1   22[COMRAM] unsigned char 
 12304 ;; Return value:  Size  Location     Type
 12305 ;;                  2   12[COMRAM] int 
 12306 ;; Registers used:
 12307 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12308 ;; Tracked objects:
 12309 ;;		On entry : 0/0
 12310 ;;		On exit  : 0/0
 12311 ;;		Unchanged: 0/0
 12312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12313 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12314 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12315 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12316 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12317 ;;Total ram usage:       22 bytes
 12318 ;; Hardware stack levels used:    1
 12319 ;; Hardware stack levels required when called:    2
 12320 ;; This function calls:
 12321 ;;		Absolute function
 12322 ;;		i2___lwdiv
 12323 ;;		i2___lwmod
 12324 ;;		i2___wmul
 12325 ;;		i2_isdigit
 12326 ;;		i2_putch
 12327 ;; This function is called by:
 12328 ;;		i2_printf
 12329 ;; This function uses a non-reentrant model
 12330 ;;
 12331                           
 12332                           	psect	text35
 12333  000996                     __ptext35:
 12334                           	opt stack 0
 12335  000996                     i2__doprnt:
 12336                           	opt stack 20
 12337                           
 12338                           ;doprnt.c: 499: signed char c;
 12339                           ;doprnt.c: 501: int width;
 12340                           ;doprnt.c: 506: signed char prec;
 12341                           ;doprnt.c: 508: unsigned char flag;
 12342                           ;doprnt.c: 523: union {
 12343                           ;doprnt.c: 524: unsigned long vd;
 12344                           ;doprnt.c: 525: double integ;
 12345                           ;doprnt.c: 526: } tmpval;
 12346                           ;doprnt.c: 528: unsigned int val;
 12347                           ;doprnt.c: 529: unsigned len;
 12348                           ;doprnt.c: 530: const char * cp;
 12349                           ;doprnt.c: 536: while(c = *f++) {
 12350                           
 12351                           ;incstack = 0
 12352  000996  EFD6  F008         	goto	i2l8246
 12353  00099A                     i2l8040:
 12354                           
 12355                           ;doprnt.c: 538: if(c != '%')
 12356  00099A  0E25               	movlw	37
 12357  00099C  1822               	xorwf	i2__doprnt@c,w,c
 12358  00099E  B4D8               	btfsc	status,2,c
 12359  0009A0  D036               	goto	i2l8050
 12360                           
 12361                           ;doprnt.c: 540: {
 12362                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 12363  0009A2  EE20 F002          	lfsr	2,2
 12364  0009A6  500D               	movf	i2__doprnt@pb,w,c
 12365  0009A8  26D9               	addwf	fsr2l,f,c
 12366  0009AA  500E               	movf	i2__doprnt@pb+1,w,c
 12367  0009AC  22DA               	addwfc	fsr2h,f,c
 12368  0009AE  50DE               	movf	postinc2,w,c
 12369  0009B0  10DE               	iorwf	postinc2,w,c
 12370  0009B2  B4D8               	btfsc	status,2,c
 12371  0009B4  D016               	goto	i2l8046
 12372  0009B6  EE20 F002          	lfsr	2,2
 12373  0009BA  500D               	movf	i2__doprnt@pb,w,c
 12374  0009BC  26D9               	addwf	fsr2l,f,c
 12375  0009BE  500E               	movf	i2__doprnt@pb+1,w,c
 12376  0009C0  22DA               	addwfc	fsr2h,f,c
 12377  0009C2  CFDE F013          	movff	postinc2,??i2__doprnt
 12378  0009C6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12379  0009CA  D801               	call	i2u1307_48
 12380  0009CC  D3EF               	goto	i2l8246
 12381  0009CE                     i2u1307_48:
 12382  0009CE  0005               	push	
 12383  0009D0  6EFA               	movwf	pclath,c
 12384  0009D2  5013               	movf	??i2__doprnt,w,c
 12385  0009D4  6EFD               	movwf	tosl,c
 12386  0009D6  5014               	movf	??i2__doprnt+1,w,c
 12387  0009D8  6EFE               	movwf	tosh,c
 12388  0009DA  6AFF               	clrf	tosu,c
 12389  0009DC  50FA               	movf	pclath,w,c
 12390  0009DE  5022               	movf	i2__doprnt@c,w,c
 12391  0009E0  0012               	return		;indir
 12392  0009E2                     i2l8046:
 12393  0009E2  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12394  0009E6  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12395  0009EA  CFDE F013          	movff	postinc2,??i2__doprnt
 12396  0009EE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12397  0009F2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12398  0009F6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12399  0009FA  C022  FFDF         	movff	i2__doprnt@c,indf2
 12400  0009FE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12401  000A02  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12402  000A06  2ADE               	incf	postinc2,f,c
 12403  000A08  0E00               	movlw	0
 12404  000A0A  22DD               	addwfc	postdec2,f,c
 12405                           
 12406                           ;doprnt.c: 542: continue;
 12407  000A0C  D3CF               	goto	i2l8246
 12408  000A0E                     i2l8050:
 12409                           
 12410                           ;doprnt.c: 543: }
 12411                           ;doprnt.c: 546: width = 0;
 12412  000A0E  0E00               	movlw	0
 12413  000A10  6E21               	movwf	i2__doprnt@width+1,c
 12414  000A12  0E00               	movlw	0
 12415  000A14  6E20               	movwf	i2__doprnt@width,c
 12416                           
 12417                           ;doprnt.c: 548: flag = 0;
 12418  000A16  0E00               	movlw	0
 12419  000A18  6E1F               	movwf	i2__doprnt@flag,c
 12420                           
 12421                           ;doprnt.c: 551: switch(*f) {
 12422                           
 12423                           ;doprnt.c: 550: for(;;) {
 12424  000A1A  D003               	goto	i2l8056
 12425  000A1C                     i2l8052:
 12426                           
 12427                           ;doprnt.c: 580: flag |= 0x04;
 12428  000A1C  841F               	bsf	i2__doprnt@flag,2,c
 12429                           
 12430                           ;doprnt.c: 581: f++;
 12431  000A1E  4A0F               	infsnz	i2__doprnt@f,f,c
 12432  000A20  2A10               	incf	i2__doprnt@f+1,f,c
 12433  000A22                     i2l8056:
 12434  000A22  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 12435  000A26  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 12436  000A2A  0E00               	movlw	low (__mediumconst shr (0+16))
 12437  000A2C  6EF8               	movwf	tblptru,c
 12438  000A2E  0E0F               	movlw	(high __ramtop+-1)
 12439  000A30  64F7               	cpfsgt	tblptrh,c
 12440  000A32  D003               	bra	i2u1308_47
 12441  000A34  0008               	tblrd		*
 12442  000A36  50F5               	movf	tablat,w,c
 12443  000A38  D005               	bra	i2u1308_40
 12444  000A3A                     i2u1308_47:
 12445  000A3A  CFF6 FFE9          	movff	tblptrl,fsr0l
 12446  000A3E  CFF7 FFEA          	movff	tblptrh,fsr0h
 12447  000A42  50EF               	movf	indf0,w,c
 12448  000A44                     i2u1308_40:
 12449                           
 12450                           ; Switch size 1, requested type "space"
 12451                           ; Number of cases is 1, Range of values is 48 to 48
 12452                           ; switch strategies available:
 12453                           ; Name         Instructions Cycles
 12454                           ; simple_byte            4     3 (average)
 12455                           ;	Chosen strategy is simple_byte
 12456  000A44  0A30               	xorlw	48	; case 48
 12457  000A46  B4D8               	btfsc	status,2,c
 12458  000A48  D7E9               	goto	i2l8052
 12459                           
 12460                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12461                           
 12462                           ;doprnt.c: 586: }
 12463                           
 12464                           ;doprnt.c: 585: break;
 12465  000A4A  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 12466  000A4E  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 12467  000A52  0E00               	movlw	low (__mediumconst shr (0+16))
 12468  000A54  6EF8               	movwf	tblptru,c
 12469  000A56  0E0F               	movlw	(high __ramtop+-1)
 12470  000A58  64F7               	cpfsgt	tblptrh,c
 12471  000A5A  D003               	bra	i2u1309_47
 12472  000A5C  0008               	tblrd		*
 12473  000A5E  50F5               	movf	tablat,w,c
 12474  000A60  D005               	bra	i2u1309_40
 12475  000A62                     i2u1309_47:
 12476  000A62  CFF6 FFE9          	movff	tblptrl,fsr0l
 12477  000A66  CFF7 FFEA          	movff	tblptrh,fsr0h
 12478  000A6A  50EF               	movf	indf0,w,c
 12479  000A6C                     i2u1309_40:
 12480  000A6C  EC44  F01E         	call	i2_isdigit
 12481  000A70  A0D8               	btfss	status,0,c
 12482  000A72  D154               	goto	i2l8122
 12483                           
 12484                           ;doprnt.c: 598: width = 0;
 12485  000A74  0E00               	movlw	0
 12486  000A76  6E21               	movwf	i2__doprnt@width+1,c
 12487  000A78  0E00               	movlw	0
 12488  000A7A  6E20               	movwf	i2__doprnt@width,c
 12489  000A7C                     i2l8062:
 12490                           
 12491                           ;doprnt.c: 600: width *= 10;
 12492  000A7C  C020  F001         	movff	i2__doprnt@width,i2___wmul@multiplier
 12493  000A80  C021  F002         	movff	i2__doprnt@width+1,i2___wmul@multiplier+1
 12494  000A84  0E00               	movlw	0
 12495  000A86  6E04               	movwf	i2___wmul@multiplicand+1,c
 12496  000A88  0E0A               	movlw	10
 12497  000A8A  6E03               	movwf	i2___wmul@multiplicand,c
 12498  000A8C  EC31  F01E         	call	i2___wmul	;wreg free
 12499  000A90  C001  F020         	movff	?i2___wmul,i2__doprnt@width
 12500  000A94  C002  F021         	movff	?i2___wmul+1,i2__doprnt@width+1
 12501                           
 12502                           ;doprnt.c: 601: width += *f++ - '0';
 12503  000A98  0ED0               	movlw	208
 12504  000A9A  6E13               	movwf	??i2__doprnt& (0+255),c
 12505  000A9C  0EFF               	movlw	255
 12506  000A9E  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 12507  000AA0  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 12508  000AA4  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 12509  000AA8  0E00               	movlw	low (__mediumconst shr (0+16))
 12510  000AAA  6EF8               	movwf	tblptru,c
 12511  000AAC  0E0F               	movlw	(high __ramtop+-1)
 12512  000AAE  64F7               	cpfsgt	tblptrh,c
 12513  000AB0  D003               	bra	i2u1311_47
 12514  000AB2  0008               	tblrd		*
 12515  000AB4  50F5               	movf	tablat,w,c
 12516  000AB6  D005               	bra	i2u1311_40
 12517  000AB8                     i2u1311_47:
 12518  000AB8  CFF6 FFE9          	movff	tblptrl,fsr0l
 12519  000ABC  CFF7 FFEA          	movff	tblptrh,fsr0h
 12520  000AC0  50EF               	movf	indf0,w,c
 12521  000AC2                     i2u1311_40:
 12522  000AC2  6E15               	movwf	(??i2__doprnt+2)& (0+255),c
 12523  000AC4  6A16               	clrf	(??i2__doprnt+3)& (0+255),c
 12524  000AC6  5013               	movf	??i2__doprnt,w,c
 12525  000AC8  2615               	addwf	??i2__doprnt+2,f,c
 12526  000ACA  5014               	movf	??i2__doprnt+1,w,c
 12527  000ACC  2216               	addwfc	??i2__doprnt+3,f,c
 12528  000ACE  5015               	movf	??i2__doprnt+2,w,c
 12529  000AD0  2620               	addwf	i2__doprnt@width,f,c
 12530  000AD2  5016               	movf	??i2__doprnt+3,w,c
 12531  000AD4  2221               	addwfc	i2__doprnt@width+1,f,c
 12532  000AD6  4A0F               	infsnz	i2__doprnt@f,f,c
 12533  000AD8  2A10               	incf	i2__doprnt@f+1,f,c
 12534                           
 12535                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12536  000ADA  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 12537  000ADE  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 12538  000AE2  0E00               	movlw	low (__mediumconst shr (0+16))
 12539  000AE4  6EF8               	movwf	tblptru,c
 12540  000AE6  0E0F               	movlw	(high __ramtop+-1)
 12541  000AE8  64F7               	cpfsgt	tblptrh,c
 12542  000AEA  D003               	bra	i2u1312_47
 12543  000AEC  0008               	tblrd		*
 12544  000AEE  50F5               	movf	tablat,w,c
 12545  000AF0  D005               	bra	i2u1312_40
 12546  000AF2                     i2u1312_47:
 12547  000AF2  CFF6 FFE9          	movff	tblptrl,fsr0l
 12548  000AF6  CFF7 FFEA          	movff	tblptrh,fsr0h
 12549  000AFA  50EF               	movf	indf0,w,c
 12550  000AFC                     i2u1312_40:
 12551  000AFC  EC44  F01E         	call	i2_isdigit
 12552  000B00  A0D8               	btfss	status,0,c
 12553  000B02  D10C               	goto	i2l8122
 12554  000B04  D7BB               	goto	i2l8062
 12555  000B06                     i2l8070:
 12556                           
 12557                           ;doprnt.c: 721: flag |= 0x80;
 12558  000B06  8E1F               	bsf	i2__doprnt@flag,7,c
 12559                           
 12560                           ;doprnt.c: 723: break;
 12561  000B08  D135               	goto	i2l531
 12562  000B0A                     i2l8072:
 12563                           
 12564                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12565  000B0A  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 12566  000B0E  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 12567  000B12  CFDF F013          	movff	indf2,??i2__doprnt
 12568  000B16  0E02               	movlw	2
 12569  000B18  26DE               	addwf	postinc2,f,c
 12570  000B1A  CFDF F014          	movff	indf2,??i2__doprnt+1
 12571  000B1E  0E00               	movlw	0
 12572  000B20  22DD               	addwfc	postdec2,f,c
 12573  000B22  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12574  000B26  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12575  000B2A  CFDE F01B          	movff	postinc2,i2__doprnt@cp
 12576  000B2E  CFDD F01C          	movff	postdec2,i2__doprnt@cp+1
 12577                           
 12578                           ;doprnt.c: 740: if(!cp)
 12579  000B32  501B               	movf	i2__doprnt@cp,w,c
 12580  000B34  101C               	iorwf	i2__doprnt@cp+1,w,c
 12581  000B36  A4D8               	btfss	status,2,c
 12582  000B38  D004               	goto	i2l8078
 12583                           
 12584                           ;doprnt.c: 741: cp = "(null)";
 12585  000B3A  0EED               	movlw	low STR_26
 12586  000B3C  6E1B               	movwf	i2__doprnt@cp,c
 12587  000B3E  0EFF               	movlw	high STR_26
 12588  000B40  6E1C               	movwf	i2__doprnt@cp+1,c
 12589  000B42                     i2l8078:
 12590                           
 12591                           ;doprnt.c: 745: len = 0;
 12592  000B42  0E00               	movlw	0
 12593  000B44  6E1A               	movwf	i2__doprnt@len+1,c
 12594  000B46  0E00               	movlw	0
 12595  000B48  6E19               	movwf	i2__doprnt@len,c
 12596                           
 12597                           ;doprnt.c: 746: while(cp[len])
 12598  000B4A  D002               	goto	i2l8082
 12599  000B4C                     i2l8080:
 12600                           
 12601                           ;doprnt.c: 747: len++;
 12602  000B4C  4A19               	infsnz	i2__doprnt@len,f,c
 12603  000B4E  2A1A               	incf	i2__doprnt@len+1,f,c
 12604  000B50                     i2l8082:
 12605  000B50  5019               	movf	i2__doprnt@len,w,c
 12606  000B52  241B               	addwf	i2__doprnt@cp,w,c
 12607  000B54  6E13               	movwf	??i2__doprnt& (0+255),c
 12608  000B56  501A               	movf	i2__doprnt@len+1,w,c
 12609  000B58  201C               	addwfc	i2__doprnt@cp+1,w,c
 12610  000B5A  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 12611  000B5C  C013  FFF6         	movff	??i2__doprnt,tblptrl
 12612  000B60  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 12613  000B64  0E00               	movlw	low (__mediumconst shr (0+16))
 12614  000B66  6EF8               	movwf	tblptru,c
 12615  000B68  0E0F               	movlw	(high __ramtop+-1)
 12616  000B6A  64F7               	cpfsgt	tblptrh,c
 12617  000B6C  D003               	bra	i2u1315_47
 12618  000B6E  0008               	tblrd		*
 12619  000B70  50F5               	movf	tablat,w,c
 12620  000B72  D005               	bra	i2u1315_40
 12621  000B74                     i2u1315_47:
 12622  000B74  CFF6 FFE9          	movff	tblptrl,fsr0l
 12623  000B78  CFF7 FFEA          	movff	tblptrh,fsr0h
 12624  000B7C  50EF               	movf	indf0,w,c
 12625  000B7E                     i2u1315_40:
 12626  000B7E  0900               	iorlw	0
 12627  000B80  A4D8               	btfss	status,2,c
 12628  000B82  D7E4               	goto	i2l8080
 12629  000B84                     i2l8084:
 12630                           
 12631                           ;doprnt.c: 757: if(width > len)
 12632  000B84  5020               	movf	i2__doprnt@width,w,c
 12633  000B86  5C19               	subwf	i2__doprnt@len,w,c
 12634  000B88  5021               	movf	i2__doprnt@width+1,w,c
 12635  000B8A  581A               	subwfb	i2__doprnt@len+1,w,c
 12636  000B8C  B0D8               	btfsc	status,0,c
 12637  000B8E  D005               	goto	i2l8088
 12638                           
 12639                           ;doprnt.c: 758: width -= len;
 12640  000B90  5019               	movf	i2__doprnt@len,w,c
 12641  000B92  5E20               	subwf	i2__doprnt@width,f,c
 12642  000B94  501A               	movf	i2__doprnt@len+1,w,c
 12643  000B96  5A21               	subwfb	i2__doprnt@width+1,f,c
 12644  000B98  D03A               	goto	i2l8098
 12645  000B9A                     i2l8088:
 12646                           
 12647                           ;doprnt.c: 759: else
 12648                           ;doprnt.c: 760: width = 0;
 12649  000B9A  0E00               	movlw	0
 12650  000B9C  6E21               	movwf	i2__doprnt@width+1,c
 12651  000B9E  0E00               	movlw	0
 12652  000BA0  6E20               	movwf	i2__doprnt@width,c
 12653                           
 12654                           ;doprnt.c: 764: while(width--)
 12655  000BA2  D035               	goto	i2l8098
 12656  000BA4                     i2l8090:
 12657                           
 12658                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 12659  000BA4  EE20 F002          	lfsr	2,2
 12660  000BA8  500D               	movf	i2__doprnt@pb,w,c
 12661  000BAA  26D9               	addwf	fsr2l,f,c
 12662  000BAC  500E               	movf	i2__doprnt@pb+1,w,c
 12663  000BAE  22DA               	addwfc	fsr2h,f,c
 12664  000BB0  50DE               	movf	postinc2,w,c
 12665  000BB2  10DE               	iorwf	postinc2,w,c
 12666  000BB4  B4D8               	btfsc	status,2,c
 12667  000BB6  D016               	goto	i2l8094
 12668  000BB8  EE20 F002          	lfsr	2,2
 12669  000BBC  500D               	movf	i2__doprnt@pb,w,c
 12670  000BBE  26D9               	addwf	fsr2l,f,c
 12671  000BC0  500E               	movf	i2__doprnt@pb+1,w,c
 12672  000BC2  22DA               	addwfc	fsr2h,f,c
 12673  000BC4  CFDE F013          	movff	postinc2,??i2__doprnt
 12674  000BC8  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12675  000BCC  D801               	call	i2u1319_48
 12676  000BCE  D01F               	goto	i2l8098
 12677  000BD0                     i2u1319_48:
 12678  000BD0  0005               	push	
 12679  000BD2  6EFA               	movwf	pclath,c
 12680  000BD4  5013               	movf	??i2__doprnt,w,c
 12681  000BD6  6EFD               	movwf	tosl,c
 12682  000BD8  5014               	movf	??i2__doprnt+1,w,c
 12683  000BDA  6EFE               	movwf	tosh,c
 12684  000BDC  6AFF               	clrf	tosu,c
 12685  000BDE  50FA               	movf	pclath,w,c
 12686  000BE0  0E20               	movlw	32
 12687  000BE2  0012               	return		;indir
 12688  000BE4                     i2l8094:
 12689  000BE4  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12690  000BE8  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12691  000BEC  CFDE F013          	movff	postinc2,??i2__doprnt
 12692  000BF0  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12693  000BF4  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12694  000BF8  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12695  000BFC  0E20               	movlw	32
 12696  000BFE  6EDF               	movwf	indf2,c
 12697  000C00  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12698  000C04  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12699  000C08  2ADE               	incf	postinc2,f,c
 12700  000C0A  0E00               	movlw	0
 12701  000C0C  22DD               	addwfc	postdec2,f,c
 12702  000C0E                     i2l8098:
 12703  000C0E  0620               	decf	i2__doprnt@width,f,c
 12704  000C10  A0D8               	btfss	status,0,c
 12705  000C12  0621               	decf	i2__doprnt@width+1,f,c
 12706  000C14  2820               	incf	i2__doprnt@width,w,c
 12707  000C16  E1C6               	bnz	i2l8090
 12708  000C18  2821               	incf	i2__doprnt@width+1,w,c
 12709  000C1A  B4D8               	btfsc	status,2,c
 12710  000C1C  D05B               	goto	i2l8112
 12711  000C1E  D7C2               	goto	i2l8090
 12712  000C20                     i2l8100:
 12713                           
 12714                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 12715  000C20  EE20 F002          	lfsr	2,2
 12716  000C24  500D               	movf	i2__doprnt@pb,w,c
 12717  000C26  26D9               	addwf	fsr2l,f,c
 12718  000C28  500E               	movf	i2__doprnt@pb+1,w,c
 12719  000C2A  22DA               	addwfc	fsr2h,f,c
 12720  000C2C  50DE               	movf	postinc2,w,c
 12721  000C2E  10DE               	iorwf	postinc2,w,c
 12722  000C30  B4D8               	btfsc	status,2,c
 12723  000C32  D029               	goto	i2l8106
 12724  000C34  EE20 F002          	lfsr	2,2
 12725  000C38  500D               	movf	i2__doprnt@pb,w,c
 12726  000C3A  26D9               	addwf	fsr2l,f,c
 12727  000C3C  500E               	movf	i2__doprnt@pb+1,w,c
 12728  000C3E  22DA               	addwfc	fsr2h,f,c
 12729  000C40  CFDE F013          	movff	postinc2,??i2__doprnt
 12730  000C44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12731  000C48  D801               	call	i2u1322_48
 12732  000C4A  D01A               	goto	i2l8104
 12733  000C4C                     i2u1322_48:
 12734  000C4C  0005               	push	
 12735  000C4E  6EFA               	movwf	pclath,c
 12736  000C50  5013               	movf	??i2__doprnt,w,c
 12737  000C52  6EFD               	movwf	tosl,c
 12738  000C54  5014               	movf	??i2__doprnt+1,w,c
 12739  000C56  6EFE               	movwf	tosh,c
 12740  000C58  6AFF               	clrf	tosu,c
 12741  000C5A  50FA               	movf	pclath,w,c
 12742  000C5C  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 12743  000C60  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 12744  000C64  0E00               	movlw	low (__mediumconst shr (0+16))
 12745  000C66  6EF8               	movwf	tblptru,c
 12746  000C68  0E0F               	movlw	(high __ramtop+-1)
 12747  000C6A  64F7               	cpfsgt	tblptrh,c
 12748  000C6C  D003               	bra	i2u1323_47
 12749  000C6E  0008               	tblrd		*
 12750  000C70  50F5               	movf	tablat,w,c
 12751  000C72  D005               	bra	i2u1323_40
 12752  000C74                     i2u1323_47:
 12753  000C74  CFF6 FFE9          	movff	tblptrl,fsr0l
 12754  000C78  CFF7 FFEA          	movff	tblptrh,fsr0h
 12755  000C7C  50EF               	movf	indf0,w,c
 12756  000C7E                     i2u1323_40:
 12757  000C7E  0012               	return		;indir
 12758  000C80                     i2l8104:
 12759  000C80  4A1B               	infsnz	i2__doprnt@cp,f,c
 12760  000C82  2A1C               	incf	i2__doprnt@cp+1,f,c
 12761  000C84  D027               	goto	i2l8112
 12762  000C86                     i2l8106:
 12763  000C86  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 12764  000C8A  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 12765  000C8E  0E00               	movlw	low (__mediumconst shr (0+16))
 12766  000C90  6EF8               	movwf	tblptru,c
 12767  000C92  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12768  000C96  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12769  000C9A  CFDE F013          	movff	postinc2,??i2__doprnt
 12770  000C9E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12771  000CA2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12772  000CA6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12773  000CAA  0E0F               	movlw	(high __ramtop+-1)
 12774  000CAC  64F7               	cpfsgt	tblptrh,c
 12775  000CAE  D003               	bra	i2u1324_47
 12776  000CB0  0008               	tblrd		*
 12777  000CB2  50F5               	movf	tablat,w,c
 12778  000CB4  D005               	bra	i2u1324_40
 12779  000CB6                     i2u1324_47:
 12780  000CB6  CFF6 FFE9          	movff	tblptrl,fsr0l
 12781  000CBA  CFF7 FFEA          	movff	tblptrh,fsr0h
 12782  000CBE  50EF               	movf	indf0,w,c
 12783  000CC0                     i2u1324_40:
 12784  000CC0  6EDF               	movwf	indf2,c
 12785  000CC2  4A1B               	infsnz	i2__doprnt@cp,f,c
 12786  000CC4  2A1C               	incf	i2__doprnt@cp+1,f,c
 12787  000CC6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12788  000CCA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12789  000CCE  2ADE               	incf	postinc2,f,c
 12790  000CD0  0E00               	movlw	0
 12791  000CD2  22DD               	addwfc	postdec2,f,c
 12792  000CD4                     i2l8112:
 12793  000CD4  0619               	decf	i2__doprnt@len,f,c
 12794  000CD6  A0D8               	btfss	status,0,c
 12795  000CD8  061A               	decf	i2__doprnt@len+1,f,c
 12796  000CDA  2819               	incf	i2__doprnt@len,w,c
 12797  000CDC  E1A1               	bnz	i2l8100
 12798  000CDE  281A               	incf	i2__doprnt@len+1,w,c
 12799  000CE0  B4D8               	btfsc	status,2,c
 12800  000CE2  D264               	goto	i2l8246
 12801  000CE4  D79D               	goto	i2l8100
 12802  000CE6                     i2l8114:
 12803                           
 12804                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 12805  000CE6  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 12806  000CEA  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 12807  000CEE  CFDF F013          	movff	indf2,??i2__doprnt
 12808  000CF2  0E02               	movlw	2
 12809  000CF4  26DE               	addwf	postinc2,f,c
 12810  000CF6  CFDF F014          	movff	indf2,??i2__doprnt+1
 12811  000CFA  0E00               	movlw	0
 12812  000CFC  22DD               	addwfc	postdec2,f,c
 12813  000CFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12814  000D02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12815  000D06  50DF               	movf	indf2,w,c
 12816  000D08  6E22               	movwf	i2__doprnt@c,c
 12817  000D0A                     i2l8116:
 12818                           
 12819                           ;doprnt.c: 805: cp = (char *)&c;
 12820  000D0A  0E22               	movlw	low i2__doprnt@c
 12821  000D0C  6E1B               	movwf	i2__doprnt@cp,c
 12822  000D0E  0E00               	movlw	high i2__doprnt@c
 12823  000D10  6E1C               	movwf	i2__doprnt@cp+1,c
 12824                           
 12825                           ;doprnt.c: 806: len = 1;
 12826  000D12  0E00               	movlw	0
 12827  000D14  6E1A               	movwf	i2__doprnt@len+1,c
 12828  000D16  0E01               	movlw	1
 12829  000D18  6E19               	movwf	i2__doprnt@len,c
 12830                           
 12831                           ;doprnt.c: 807: goto dostring;
 12832  000D1A  D734               	goto	i2l8084
 12833  000D1C                     i2l8122:
 12834  000D1C  500F               	movf	i2__doprnt@f,w,c
 12835  000D1E  6E13               	movwf	??i2__doprnt& (0+255),c
 12836  000D20  5010               	movf	i2__doprnt@f+1,w,c
 12837  000D22  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 12838  000D24  4A0F               	infsnz	i2__doprnt@f,f,c
 12839  000D26  2A10               	incf	i2__doprnt@f+1,f,c
 12840  000D28  C013  FFF6         	movff	??i2__doprnt,tblptrl
 12841  000D2C  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 12842  000D30  0E00               	movlw	low (__mediumconst shr (0+16))
 12843  000D32  6EF8               	movwf	tblptru,c
 12844  000D34  0E0F               	movlw	(high __ramtop+-1)
 12845  000D36  64F7               	cpfsgt	tblptrh,c
 12846  000D38  D003               	bra	i2u1326_47
 12847  000D3A  0008               	tblrd		*
 12848  000D3C  50F5               	movf	tablat,w,c
 12849  000D3E  D005               	bra	i2u1326_40
 12850  000D40                     i2u1326_47:
 12851  000D40  CFF6 FFE9          	movff	tblptrl,fsr0l
 12852  000D44  CFF7 FFEA          	movff	tblptrh,fsr0h
 12853  000D48  50EF               	movf	indf0,w,c
 12854  000D4A                     i2u1326_40:
 12855  000D4A  6E22               	movwf	i2__doprnt@c,c
 12856  000D4C  5022               	movf	i2__doprnt@c,w,c
 12857                           
 12858                           ; Switch size 1, requested type "space"
 12859                           ; Number of cases is 6, Range of values is 0 to 120
 12860                           ; switch strategies available:
 12861                           ; Name         Instructions Cycles
 12862                           ; simple_byte           19    10 (average)
 12863                           ;	Chosen strategy is simple_byte
 12864  000D4E  0A00               	xorlw	0	; case 0
 12865  000D50  B4D8               	btfsc	status,2,c
 12866  000D52  D248               	goto	i2l8248
 12867  000D54  0A63               	xorlw	99	; case 99
 12868  000D56  B4D8               	btfsc	status,2,c
 12869  000D58  D7C6               	goto	i2l8114
 12870  000D5A  0A07               	xorlw	7	; case 100
 12871  000D5C  B4D8               	btfsc	status,2,c
 12872  000D5E  D00A               	goto	i2l531
 12873  000D60  0A0D               	xorlw	13	; case 105
 12874  000D62  B4D8               	btfsc	status,2,c
 12875  000D64  D007               	goto	i2l531
 12876  000D66  0A1A               	xorlw	26	; case 115
 12877  000D68  B4D8               	btfsc	status,2,c
 12878  000D6A  D6CF               	goto	i2l8072
 12879  000D6C  0A0B               	xorlw	11	; case 120
 12880  000D6E  B4D8               	btfsc	status,2,c
 12881  000D70  D6CA               	goto	i2l8070
 12882  000D72  D7CB               	goto	i2l8116
 12883  000D74                     i2l531:
 12884                           
 12885                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 12886  000D74  BE1F               	btfsc	i2__doprnt@flag,7,c
 12887  000D76  D01D               	goto	i2l8132
 12888                           
 12889                           ;doprnt.c: 1253: {
 12890                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 12891  000D78  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 12892  000D7C  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 12893  000D80  CFDF F013          	movff	indf2,??i2__doprnt
 12894  000D84  0E02               	movlw	2
 12895  000D86  26DE               	addwf	postinc2,f,c
 12896  000D88  CFDF F014          	movff	indf2,??i2__doprnt+1
 12897  000D8C  0E00               	movlw	0
 12898  000D8E  22DD               	addwfc	postdec2,f,c
 12899  000D90  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12900  000D94  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12901  000D98  CFDE F01D          	movff	postinc2,i2__doprnt@val
 12902  000D9C  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 12903                           
 12904                           ;doprnt.c: 1261: if((int)val < 0) {
 12905  000DA0  AE1E               	btfss	i2__doprnt@val+1,7,c
 12906  000DA2  D052               	goto	i2l8164
 12907                           
 12908                           ;doprnt.c: 1262: flag |= 0x03;
 12909  000DA4  0E03               	movlw	3
 12910  000DA6  121F               	iorwf	i2__doprnt@flag,f,c
 12911                           
 12912                           ;doprnt.c: 1263: val = -val;
 12913  000DA8  6C1D               	negf	i2__doprnt@val,c
 12914  000DAA  1E1E               	comf	i2__doprnt@val+1,f,c
 12915  000DAC  B0D8               	btfsc	status,0,c
 12916  000DAE  2A1E               	incf	i2__doprnt@val+1,f,c
 12917                           
 12918                           ;doprnt.c: 1264: }
 12919                           ;doprnt.c: 1266: }
 12920  000DB0  D04B               	goto	i2l8164
 12921  000DB2                     i2l8132:
 12922                           
 12923                           ;doprnt.c: 1268: else
 12924                           ;doprnt.c: 1273: {
 12925                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 12926  000DB2  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 12927  000DB6  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 12928  000DBA  CFDF F013          	movff	indf2,??i2__doprnt
 12929  000DBE  0E02               	movlw	2
 12930  000DC0  26DE               	addwf	postinc2,f,c
 12931  000DC2  CFDF F014          	movff	indf2,??i2__doprnt+1
 12932  000DC6  0E00               	movlw	0
 12933  000DC8  22DD               	addwfc	postdec2,f,c
 12934  000DCA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12935  000DCE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12936  000DD2  CFDE F01D          	movff	postinc2,i2__doprnt@val
 12937  000DD6  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 12938                           
 12939                           ;doprnt.c: 1287: }
 12940                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 12941  000DDA  D036               	goto	i2l8164
 12942  000DDC                     i2l8134:
 12943                           
 12944                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 12945  000DDC  0E01               	movlw	1
 12946  000DDE  6E22               	movwf	i2__doprnt@c,c
 12947  000DE0                     i2l8136:
 12948  000DE0  0E05               	movlw	5
 12949  000DE2  1822               	xorwf	i2__doprnt@c,w,c
 12950  000DE4  B4D8               	btfsc	status,2,c
 12951  000DE6  D038               	goto	i2l8166
 12952                           
 12953                           ;doprnt.c: 1306: if(val < dpowers[c])
 12954  000DE8  5022               	movf	i2__doprnt@c,w,c
 12955  000DEA  0D02               	mullw	2
 12956  000DEC  0E68               	movlw	low _dpowers
 12957  000DEE  24F3               	addwf	prodl,w,c
 12958  000DF0  6EF6               	movwf	tblptrl,c
 12959  000DF2  0EFE               	movlw	high _dpowers
 12960  000DF4  20F4               	addwfc	prodh,w,c
 12961  000DF6  6EF7               	movwf	tblptrh,c
 12962  000DF8                     	if	1	;There are 3 active tblptr bytes
 12963  000DF8  6AF8               	clrf	tblptru,c
 12964  000DFA  0E00               	movlw	low (__mediumconst shr (0+16))
 12965  000DFC  22F8               	addwfc	tblptru,f,c
 12966  000DFE                     	endif
 12967  000DFE  0009               	tblrd		*+
 12968  000E00  50F5               	movf	tablat,w,c
 12969  000E02  5C1D               	subwf	i2__doprnt@val,w,c
 12970  000E04  0009               	tblrd		*+
 12971  000E06  50F5               	movf	tablat,w,c
 12972  000E08  581E               	subwfb	i2__doprnt@val+1,w,c
 12973  000E0A  A0D8               	btfss	status,0,c
 12974  000E0C  D025               	goto	i2l8166
 12975                           
 12976                           ;doprnt.c: 1307: break;
 12977  000E0E  2A22               	incf	i2__doprnt@c,f,c
 12978  000E10  D7E7               	goto	i2l8136
 12979  000E12                     i2l8148:
 12980                           
 12981                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 12982  000E12  0E01               	movlw	1
 12983  000E14  6E22               	movwf	i2__doprnt@c,c
 12984  000E16                     i2l8150:
 12985  000E16  0E04               	movlw	4
 12986  000E18  1822               	xorwf	i2__doprnt@c,w,c
 12987  000E1A  B4D8               	btfsc	status,2,c
 12988  000E1C  D01D               	goto	i2l8166
 12989                           
 12990                           ;doprnt.c: 1317: if(val < hexpowers[c])
 12991  000E1E  5022               	movf	i2__doprnt@c,w,c
 12992  000E20  0D02               	mullw	2
 12993  000E22  0E72               	movlw	low _hexpowers
 12994  000E24  24F3               	addwf	prodl,w,c
 12995  000E26  6EF6               	movwf	tblptrl,c
 12996  000E28  0EFE               	movlw	high _hexpowers
 12997  000E2A  20F4               	addwfc	prodh,w,c
 12998  000E2C  6EF7               	movwf	tblptrh,c
 12999  000E2E                     	if	1	;There are 3 active tblptr bytes
 13000  000E2E  6AF8               	clrf	tblptru,c
 13001  000E30  0E00               	movlw	low (__mediumconst shr (0+16))
 13002  000E32  22F8               	addwfc	tblptru,f,c
 13003  000E34                     	endif
 13004  000E34  0009               	tblrd		*+
 13005  000E36  50F5               	movf	tablat,w,c
 13006  000E38  5C1D               	subwf	i2__doprnt@val,w,c
 13007  000E3A  0009               	tblrd		*+
 13008  000E3C  50F5               	movf	tablat,w,c
 13009  000E3E  581E               	subwfb	i2__doprnt@val+1,w,c
 13010  000E40  A0D8               	btfss	status,0,c
 13011  000E42  D00A               	goto	i2l8166
 13012                           
 13013                           ;doprnt.c: 1318: break;
 13014  000E44  2A22               	incf	i2__doprnt@c,f,c
 13015  000E46  D7E7               	goto	i2l8150
 13016  000E48                     i2l8164:
 13017  000E48  501F               	movf	i2__doprnt@flag,w,c
 13018  000E4A  0B80               	andlw	128
 13019                           
 13020                           ; Switch size 1, requested type "space"
 13021                           ; Number of cases is 2, Range of values is 0 to 128
 13022                           ; switch strategies available:
 13023                           ; Name         Instructions Cycles
 13024                           ; simple_byte            7     4 (average)
 13025                           ;	Chosen strategy is simple_byte
 13026  000E4C  0A00               	xorlw	0	; case 0
 13027  000E4E  B4D8               	btfsc	status,2,c
 13028  000E50  D7C5               	goto	i2l8134
 13029  000E52  0A80               	xorlw	128	; case 128
 13030  000E54  B4D8               	btfsc	status,2,c
 13031  000E56  D7DD               	goto	i2l8148
 13032  000E58                     i2l8166:
 13033                           
 13034                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13035  000E58  5020               	movf	i2__doprnt@width,w,c
 13036  000E5A  1021               	iorwf	i2__doprnt@width+1,w,c
 13037  000E5C  B4D8               	btfsc	status,2,c
 13038  000E5E  D009               	goto	i2l8172
 13039  000E60  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 13040  000E64  0E03               	movlw	3
 13041  000E66  1613               	andwf	??i2__doprnt,f,c
 13042  000E68  B4D8               	btfsc	status,2,c
 13043  000E6A  D003               	goto	i2l8172
 13044                           
 13045                           ;doprnt.c: 1346: width--;
 13046  000E6C  0620               	decf	i2__doprnt@width,f,c
 13047  000E6E  A0D8               	btfss	status,0,c
 13048  000E70  0621               	decf	i2__doprnt@width+1,f,c
 13049  000E72                     i2l8172:
 13050                           
 13051                           ;doprnt.c: 1381: if(width > c)
 13052  000E72  0E80               	movlw	128
 13053  000E74  BE22               	btfsc	i2__doprnt@c,7,c
 13054  000E76  0E7F               	movlw	127
 13055  000E78  6E13               	movwf	??i2__doprnt& (0+255),c
 13056  000E7A  5020               	movf	i2__doprnt@width,w,c
 13057  000E7C  5C22               	subwf	i2__doprnt@c,w,c
 13058  000E7E  5021               	movf	i2__doprnt@width+1,w,c
 13059  000E80  0A80               	xorlw	128
 13060  000E82  5813               	subwfb	??i2__doprnt& (0+255),w,c
 13061  000E84  B0D8               	btfsc	status,0,c
 13062  000E86  D007               	goto	i2l8176
 13063                           
 13064                           ;doprnt.c: 1382: width -= c;
 13065  000E88  5022               	movf	i2__doprnt@c,w,c
 13066  000E8A  5E20               	subwf	i2__doprnt@width,f,c
 13067  000E8C  0E00               	movlw	0
 13068  000E8E  BE22               	btfsc	i2__doprnt@c,7,c
 13069  000E90  0EFF               	movlw	255
 13070  000E92  5A21               	subwfb	i2__doprnt@width+1,f,c
 13071  000E94  D004               	goto	i2l8178
 13072  000E96                     i2l8176:
 13073                           
 13074                           ;doprnt.c: 1383: else
 13075                           ;doprnt.c: 1384: width = 0;
 13076  000E96  0E00               	movlw	0
 13077  000E98  6E21               	movwf	i2__doprnt@width+1,c
 13078  000E9A  0E00               	movlw	0
 13079  000E9C  6E20               	movwf	i2__doprnt@width,c
 13080  000E9E                     i2l8178:
 13081                           
 13082                           ;doprnt.c: 1387: if(flag & 0x04) {
 13083  000E9E  A41F               	btfss	i2__doprnt@flag,2,c
 13084  000EA0  D078               	goto	i2l8202
 13085                           
 13086                           ;doprnt.c: 1392: if(flag & 0x03)
 13087  000EA2  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 13088  000EA6  0E03               	movlw	3
 13089  000EA8  1613               	andwf	??i2__doprnt,f,c
 13090  000EAA  B4D8               	btfsc	status,2,c
 13091  000EAC  D035               	goto	i2l8190
 13092                           
 13093                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 13094  000EAE  EE20 F002          	lfsr	2,2
 13095  000EB2  500D               	movf	i2__doprnt@pb,w,c
 13096  000EB4  26D9               	addwf	fsr2l,f,c
 13097  000EB6  500E               	movf	i2__doprnt@pb+1,w,c
 13098  000EB8  22DA               	addwfc	fsr2h,f,c
 13099  000EBA  50DE               	movf	postinc2,w,c
 13100  000EBC  10DE               	iorwf	postinc2,w,c
 13101  000EBE  B4D8               	btfsc	status,2,c
 13102  000EC0  D016               	goto	i2l8186
 13103  000EC2  EE20 F002          	lfsr	2,2
 13104  000EC6  500D               	movf	i2__doprnt@pb,w,c
 13105  000EC8  26D9               	addwf	fsr2l,f,c
 13106  000ECA  500E               	movf	i2__doprnt@pb+1,w,c
 13107  000ECC  22DA               	addwfc	fsr2h,f,c
 13108  000ECE  CFDE F013          	movff	postinc2,??i2__doprnt
 13109  000ED2  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13110  000ED6  D801               	call	i2u1341_48
 13111  000ED8  D01F               	goto	i2l8190
 13112  000EDA                     i2u1341_48:
 13113  000EDA  0005               	push	
 13114  000EDC  6EFA               	movwf	pclath,c
 13115  000EDE  5013               	movf	??i2__doprnt,w,c
 13116  000EE0  6EFD               	movwf	tosl,c
 13117  000EE2  5014               	movf	??i2__doprnt+1,w,c
 13118  000EE4  6EFE               	movwf	tosh,c
 13119  000EE6  6AFF               	clrf	tosu,c
 13120  000EE8  50FA               	movf	pclath,w,c
 13121  000EEA  0E2D               	movlw	45
 13122  000EEC  0012               	return		;indir
 13123  000EEE                     i2l8186:
 13124  000EEE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13125  000EF2  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13126  000EF6  CFDE F013          	movff	postinc2,??i2__doprnt
 13127  000EFA  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13128  000EFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13129  000F02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13130  000F06  0E2D               	movlw	45
 13131  000F08  6EDF               	movwf	indf2,c
 13132  000F0A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13133  000F0E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13134  000F12  2ADE               	incf	postinc2,f,c
 13135  000F14  0E00               	movlw	0
 13136  000F16  22DD               	addwfc	postdec2,f,c
 13137  000F18                     i2l8190:
 13138                           
 13139                           ;doprnt.c: 1415: if(width)
 13140  000F18  5020               	movf	i2__doprnt@width,w,c
 13141  000F1A  1021               	iorwf	i2__doprnt@width+1,w,c
 13142  000F1C  B4D8               	btfsc	status,2,c
 13143  000F1E  D0B4               	goto	i2l8224
 13144                           
 13145                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 13146                           
 13147                           ;doprnt.c: 1416: do
 13148  000F20  EE20 F002          	lfsr	2,2
 13149  000F24  500D               	movf	i2__doprnt@pb,w,c
 13150  000F26  26D9               	addwf	fsr2l,f,c
 13151  000F28  500E               	movf	i2__doprnt@pb+1,w,c
 13152  000F2A  22DA               	addwfc	fsr2h,f,c
 13153  000F2C  50DE               	movf	postinc2,w,c
 13154  000F2E  10DE               	iorwf	postinc2,w,c
 13155  000F30  B4D8               	btfsc	status,2,c
 13156  000F32  D016               	goto	i2l8196
 13157  000F34  EE20 F002          	lfsr	2,2
 13158  000F38  500D               	movf	i2__doprnt@pb,w,c
 13159  000F3A  26D9               	addwf	fsr2l,f,c
 13160  000F3C  500E               	movf	i2__doprnt@pb+1,w,c
 13161  000F3E  22DA               	addwfc	fsr2h,f,c
 13162  000F40  CFDE F013          	movff	postinc2,??i2__doprnt
 13163  000F44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13164  000F48  D801               	call	i2u1344_48
 13165  000F4A  D01F               	goto	i2l8200
 13166  000F4C                     i2u1344_48:
 13167  000F4C  0005               	push	
 13168  000F4E  6EFA               	movwf	pclath,c
 13169  000F50  5013               	movf	??i2__doprnt,w,c
 13170  000F52  6EFD               	movwf	tosl,c
 13171  000F54  5014               	movf	??i2__doprnt+1,w,c
 13172  000F56  6EFE               	movwf	tosh,c
 13173  000F58  6AFF               	clrf	tosu,c
 13174  000F5A  50FA               	movf	pclath,w,c
 13175  000F5C  0E30               	movlw	48
 13176  000F5E  0012               	return		;indir
 13177  000F60                     i2l8196:
 13178  000F60  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13179  000F64  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13180  000F68  CFDE F013          	movff	postinc2,??i2__doprnt
 13181  000F6C  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13182  000F70  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13183  000F74  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13184  000F78  0E30               	movlw	48
 13185  000F7A  6EDF               	movwf	indf2,c
 13186  000F7C  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13187  000F80  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13188  000F84  2ADE               	incf	postinc2,f,c
 13189  000F86  0E00               	movlw	0
 13190  000F88  22DD               	addwfc	postdec2,f,c
 13191  000F8A                     i2l8200:
 13192                           
 13193                           ;doprnt.c: 1418: while(--width);
 13194  000F8A  0620               	decf	i2__doprnt@width,f,c
 13195  000F8C  A0D8               	btfss	status,0,c
 13196  000F8E  0621               	decf	i2__doprnt@width+1,f,c
 13197  000F90  D7C3               	goto	i2l8190
 13198  000F92                     i2l8202:
 13199                           
 13200                           ;doprnt.c: 1422: {
 13201                           ;doprnt.c: 1424: if(width
 13202                           ;doprnt.c: 1428: )
 13203  000F92  5020               	movf	i2__doprnt@width,w,c
 13204  000F94  1021               	iorwf	i2__doprnt@width+1,w,c
 13205  000F96  B4D8               	btfsc	status,2,c
 13206  000F98  D03C               	goto	i2l8214
 13207  000F9A                     i2l8204:
 13208                           
 13209                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 13210  000F9A  EE20 F002          	lfsr	2,2
 13211  000F9E  500D               	movf	i2__doprnt@pb,w,c
 13212  000FA0  26D9               	addwf	fsr2l,f,c
 13213  000FA2  500E               	movf	i2__doprnt@pb+1,w,c
 13214  000FA4  22DA               	addwfc	fsr2h,f,c
 13215  000FA6  50DE               	movf	postinc2,w,c
 13216  000FA8  10DE               	iorwf	postinc2,w,c
 13217  000FAA  B4D8               	btfsc	status,2,c
 13218  000FAC  D016               	goto	i2l8208
 13219  000FAE  EE20 F002          	lfsr	2,2
 13220  000FB2  500D               	movf	i2__doprnt@pb,w,c
 13221  000FB4  26D9               	addwf	fsr2l,f,c
 13222  000FB6  500E               	movf	i2__doprnt@pb+1,w,c
 13223  000FB8  22DA               	addwfc	fsr2h,f,c
 13224  000FBA  CFDE F013          	movff	postinc2,??i2__doprnt
 13225  000FBE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13226  000FC2  D801               	call	i2u1348_48
 13227  000FC4  D01F               	goto	i2l8212
 13228  000FC6                     i2u1348_48:
 13229  000FC6  0005               	push	
 13230  000FC8  6EFA               	movwf	pclath,c
 13231  000FCA  5013               	movf	??i2__doprnt,w,c
 13232  000FCC  6EFD               	movwf	tosl,c
 13233  000FCE  5014               	movf	??i2__doprnt+1,w,c
 13234  000FD0  6EFE               	movwf	tosh,c
 13235  000FD2  6AFF               	clrf	tosu,c
 13236  000FD4  50FA               	movf	pclath,w,c
 13237  000FD6  0E20               	movlw	32
 13238  000FD8  0012               	return		;indir
 13239  000FDA                     i2l8208:
 13240  000FDA  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13241  000FDE  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13242  000FE2  CFDE F013          	movff	postinc2,??i2__doprnt
 13243  000FE6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13244  000FEA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13245  000FEE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13246  000FF2  0E20               	movlw	32
 13247  000FF4  6EDF               	movwf	indf2,c
 13248  000FF6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13249  000FFA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13250  000FFE  2ADE               	incf	postinc2,f,c
 13251  001000  0E00               	movlw	0
 13252  001002  22DD               	addwfc	postdec2,f,c
 13253  001004                     i2l8212:
 13254                           
 13255                           ;doprnt.c: 1431: while(--width);
 13256  001004  0620               	decf	i2__doprnt@width,f,c
 13257  001006  A0D8               	btfss	status,0,c
 13258  001008  0621               	decf	i2__doprnt@width+1,f,c
 13259  00100A  5020               	movf	i2__doprnt@width,w,c
 13260  00100C  1021               	iorwf	i2__doprnt@width+1,w,c
 13261  00100E  A4D8               	btfss	status,2,c
 13262  001010  D7C4               	goto	i2l8204
 13263  001012                     i2l8214:
 13264                           
 13265                           ;doprnt.c: 1438: if(flag & 0x03)
 13266  001012  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 13267  001016  0E03               	movlw	3
 13268  001018  1613               	andwf	??i2__doprnt,f,c
 13269  00101A  B4D8               	btfsc	status,2,c
 13270  00101C  D035               	goto	i2l8224
 13271                           
 13272                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 13273  00101E  EE20 F002          	lfsr	2,2
 13274  001022  500D               	movf	i2__doprnt@pb,w,c
 13275  001024  26D9               	addwf	fsr2l,f,c
 13276  001026  500E               	movf	i2__doprnt@pb+1,w,c
 13277  001028  22DA               	addwfc	fsr2h,f,c
 13278  00102A  50DE               	movf	postinc2,w,c
 13279  00102C  10DE               	iorwf	postinc2,w,c
 13280  00102E  B4D8               	btfsc	status,2,c
 13281  001030  D016               	goto	i2l8220
 13282  001032  EE20 F002          	lfsr	2,2
 13283  001036  500D               	movf	i2__doprnt@pb,w,c
 13284  001038  26D9               	addwf	fsr2l,f,c
 13285  00103A  500E               	movf	i2__doprnt@pb+1,w,c
 13286  00103C  22DA               	addwfc	fsr2h,f,c
 13287  00103E  CFDE F013          	movff	postinc2,??i2__doprnt
 13288  001042  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13289  001046  D801               	call	i2u1352_48
 13290  001048  D01F               	goto	i2l8224
 13291  00104A                     i2u1352_48:
 13292  00104A  0005               	push	
 13293  00104C  6EFA               	movwf	pclath,c
 13294  00104E  5013               	movf	??i2__doprnt,w,c
 13295  001050  6EFD               	movwf	tosl,c
 13296  001052  5014               	movf	??i2__doprnt+1,w,c
 13297  001054  6EFE               	movwf	tosh,c
 13298  001056  6AFF               	clrf	tosu,c
 13299  001058  50FA               	movf	pclath,w,c
 13300  00105A  0E2D               	movlw	45
 13301  00105C  0012               	return		;indir
 13302  00105E                     i2l8220:
 13303  00105E  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13304  001062  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13305  001066  CFDE F013          	movff	postinc2,??i2__doprnt
 13306  00106A  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13307  00106E  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13308  001072  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13309  001076  0E2D               	movlw	45
 13310  001078  6EDF               	movwf	indf2,c
 13311  00107A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13312  00107E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13313  001082  2ADE               	incf	postinc2,f,c
 13314  001084  0E00               	movlw	0
 13315  001086  22DD               	addwfc	postdec2,f,c
 13316  001088                     i2l8224:
 13317                           
 13318                           ;doprnt.c: 1469: }
 13319                           ;doprnt.c: 1472: prec = c;
 13320  001088  C022  F018         	movff	i2__doprnt@c,i2__doprnt@prec
 13321                           
 13322                           ;doprnt.c: 1474: while(prec--) {
 13323  00108C  D08B               	goto	i2l8244
 13324  00108E                     i2l8226:
 13325                           
 13326                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13327  00108E  5018               	movf	i2__doprnt@prec,w,c
 13328  001090  0D02               	mullw	2
 13329  001092  0E68               	movlw	low _dpowers
 13330  001094  24F3               	addwf	prodl,w,c
 13331  001096  6EF6               	movwf	tblptrl,c
 13332  001098  0EFE               	movlw	high _dpowers
 13333  00109A  20F4               	addwfc	prodh,w,c
 13334  00109C  6EF7               	movwf	tblptrh,c
 13335  00109E                     	if	1	;There are 3 active tblptr bytes
 13336  00109E  6AF8               	clrf	tblptru,c
 13337  0010A0  0E00               	movlw	low (__mediumconst shr (0+16))
 13338  0010A2  22F8               	addwfc	tblptru,f,c
 13339  0010A4                     	endif
 13340  0010A4  0009               	tblrd		*+
 13341  0010A6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 13342  0010AA  000A               	tblrd		*-
 13343  0010AC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 13344  0010B0  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 13345  0010B4  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 13346  0010B8  EC0C  F01D         	call	i2___lwdiv
 13347  0010BC  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 13348  0010C0  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 13349  0010C4  0E00               	movlw	0
 13350  0010C6  6E0B               	movwf	i2___lwmod@divisor+1,c
 13351  0010C8  0E0A               	movlw	10
 13352  0010CA  6E0A               	movwf	i2___lwmod@divisor,c
 13353  0010CC  EC7F  F01D         	call	i2___lwmod	;wreg free
 13354  0010D0  5008               	movf	?i2___lwmod,w,c
 13355  0010D2  0F30               	addlw	48
 13356  0010D4  6E22               	movwf	i2__doprnt@c,c
 13357                           
 13358                           ;doprnt.c: 1491: break;
 13359  0010D6  D031               	goto	i2l8236
 13360  0010D8                     i2l8228:
 13361                           
 13362                           ;doprnt.c: 1499: {
 13363                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 13364  0010D8  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 13365  0010DC  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 13366  0010E0  5018               	movf	i2__doprnt@prec,w,c
 13367  0010E2  0D02               	mullw	2
 13368  0010E4  0E72               	movlw	low _hexpowers
 13369  0010E6  24F3               	addwf	prodl,w,c
 13370  0010E8  6EF6               	movwf	tblptrl,c
 13371  0010EA  0EFE               	movlw	high _hexpowers
 13372  0010EC  20F4               	addwfc	prodh,w,c
 13373  0010EE  6EF7               	movwf	tblptrh,c
 13374  0010F0                     	if	1	;There are 3 active tblptr bytes
 13375  0010F0  6AF8               	clrf	tblptru,c
 13376  0010F2  0E00               	movlw	low (__mediumconst shr (0+16))
 13377  0010F4  22F8               	addwfc	tblptru,f,c
 13378  0010F6                     	endif
 13379  0010F6  0009               	tblrd		*+
 13380  0010F8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 13381  0010FC  000A               	tblrd		*-
 13382  0010FE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 13383  001102  EC0C  F01D         	call	i2___lwdiv	;wreg free
 13384  001106  5001               	movf	?i2___lwdiv,w,c
 13385  001108  0B0F               	andlw	15
 13386  00110A  6E17               	movwf	i2__doprnt@idx,c
 13387                           
 13388                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 13389  00110C  5017               	movf	i2__doprnt@idx,w,c
 13390  00110E  0D01               	mullw	1
 13391  001110  0E51               	movlw	low STR_27
 13392  001112  24F3               	addwf	prodl,w,c
 13393  001114  6EF6               	movwf	tblptrl,c
 13394  001116  0EFF               	movlw	high STR_27
 13395  001118  20F4               	addwfc	prodh,w,c
 13396  00111A  6EF7               	movwf	tblptrh,c
 13397  00111C                     	if	1	;There are 3 active tblptr bytes
 13398  00111C  6AF8               	clrf	tblptru,c
 13399  00111E  0E00               	movlw	low (__mediumconst shr (0+16))
 13400  001120  22F8               	addwfc	tblptru,f,c
 13401  001122                     	endif
 13402  001122  0008               	tblrd		*
 13403  001124  CFF5 F022          	movff	tablat,i2__doprnt@c
 13404                           
 13405                           ;doprnt.c: 1523: }
 13406                           
 13407                           ;doprnt.c: 1508: }
 13408                           ;doprnt.c: 1510: break;
 13409  001128  D008               	goto	i2l8236
 13410  00112A                     i2l8234:
 13411  00112A  501F               	movf	i2__doprnt@flag,w,c
 13412  00112C  0B80               	andlw	128
 13413                           
 13414                           ; Switch size 1, requested type "space"
 13415                           ; Number of cases is 2, Range of values is 0 to 128
 13416                           ; switch strategies available:
 13417                           ; Name         Instructions Cycles
 13418                           ; simple_byte            7     4 (average)
 13419                           ;	Chosen strategy is simple_byte
 13420  00112E  0A00               	xorlw	0	; case 0
 13421  001130  B4D8               	btfsc	status,2,c
 13422  001132  D7AD               	goto	i2l8226
 13423  001134  0A80               	xorlw	128	; case 128
 13424  001136  B4D8               	btfsc	status,2,c
 13425  001138  D7CF               	goto	i2l8228
 13426  00113A                     i2l8236:
 13427                           
 13428                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 13429  00113A  EE20 F002          	lfsr	2,2
 13430  00113E  500D               	movf	i2__doprnt@pb,w,c
 13431  001140  26D9               	addwf	fsr2l,f,c
 13432  001142  500E               	movf	i2__doprnt@pb+1,w,c
 13433  001144  22DA               	addwfc	fsr2h,f,c
 13434  001146  50DE               	movf	postinc2,w,c
 13435  001148  10DE               	iorwf	postinc2,w,c
 13436  00114A  B4D8               	btfsc	status,2,c
 13437  00114C  D016               	goto	i2l8240
 13438  00114E  EE20 F002          	lfsr	2,2
 13439  001152  500D               	movf	i2__doprnt@pb,w,c
 13440  001154  26D9               	addwf	fsr2l,f,c
 13441  001156  500E               	movf	i2__doprnt@pb+1,w,c
 13442  001158  22DA               	addwfc	fsr2h,f,c
 13443  00115A  CFDE F013          	movff	postinc2,??i2__doprnt
 13444  00115E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13445  001162  D801               	call	i2u1354_48
 13446  001164  D01F               	goto	i2l8244
 13447  001166                     i2u1354_48:
 13448  001166  0005               	push	
 13449  001168  6EFA               	movwf	pclath,c
 13450  00116A  5013               	movf	??i2__doprnt,w,c
 13451  00116C  6EFD               	movwf	tosl,c
 13452  00116E  5014               	movf	??i2__doprnt+1,w,c
 13453  001170  6EFE               	movwf	tosh,c
 13454  001172  6AFF               	clrf	tosu,c
 13455  001174  50FA               	movf	pclath,w,c
 13456  001176  5022               	movf	i2__doprnt@c,w,c
 13457  001178  0012               	return		;indir
 13458  00117A                     i2l8240:
 13459  00117A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13460  00117E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13461  001182  CFDE F013          	movff	postinc2,??i2__doprnt
 13462  001186  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13463  00118A  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13464  00118E  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13465  001192  C022  FFDF         	movff	i2__doprnt@c,indf2
 13466  001196  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13467  00119A  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13468  00119E  2ADE               	incf	postinc2,f,c
 13469  0011A0  0E00               	movlw	0
 13470  0011A2  22DD               	addwfc	postdec2,f,c
 13471  0011A4                     i2l8244:
 13472  0011A4  0618               	decf	i2__doprnt@prec,f,c
 13473  0011A6  2818               	incf	i2__doprnt@prec,w,c
 13474  0011A8  A4D8               	btfss	status,2,c
 13475  0011AA  D7BF               	goto	i2l8234
 13476  0011AC                     i2l8246:
 13477  0011AC  500F               	movf	i2__doprnt@f,w,c
 13478  0011AE  6E13               	movwf	??i2__doprnt& (0+255),c
 13479  0011B0  5010               	movf	i2__doprnt@f+1,w,c
 13480  0011B2  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 13481  0011B4  4A0F               	infsnz	i2__doprnt@f,f,c
 13482  0011B6  2A10               	incf	i2__doprnt@f+1,f,c
 13483  0011B8  C013  FFF6         	movff	??i2__doprnt,tblptrl
 13484  0011BC  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 13485  0011C0  0E00               	movlw	low (__mediumconst shr (0+16))
 13486  0011C2  6EF8               	movwf	tblptru,c
 13487  0011C4  0E0F               	movlw	(high __ramtop+-1)
 13488  0011C6  64F7               	cpfsgt	tblptrh,c
 13489  0011C8  D003               	bra	i2u1356_47
 13490  0011CA  0008               	tblrd		*
 13491  0011CC  50F5               	movf	tablat,w,c
 13492  0011CE  D005               	bra	i2u1356_40
 13493  0011D0                     i2u1356_47:
 13494  0011D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 13495  0011D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 13496  0011D8  50EF               	movf	indf0,w,c
 13497  0011DA                     i2u1356_40:
 13498  0011DA  6E22               	movwf	i2__doprnt@c,c
 13499  0011DC  5022               	movf	i2__doprnt@c,w,c
 13500  0011DE  A4D8               	btfss	status,2,c
 13501  0011E0  EFCD  F004         	goto	i2l8040
 13502  0011E4                     i2l8248:
 13503                           
 13504                           ;doprnt.c: 1540: return 0;
 13505  0011E4  0E00               	movlw	0
 13506  0011E6  6E0E               	movwf	?i2__doprnt+1,c
 13507  0011E8  0E00               	movlw	0
 13508  0011EA  6E0D               	movwf	?i2__doprnt,c
 13509  0011EC  0012               	return	
 13510  0011EE                     __end_ofi2__doprnt:
 13511                           	opt stack 0
 13512                           tosu	equ	0xFFF
 13513                           tosh	equ	0xFFE
 13514                           tosl	equ	0xFFD
 13515                           pclatu	equ	0xFFB
 13516                           pclath	equ	0xFFA
 13517                           tblptru	equ	0xFF8
 13518                           tblptrh	equ	0xFF7
 13519                           tblptrl	equ	0xFF6
 13520                           tablat	equ	0xFF5
 13521                           prodh	equ	0xFF4
 13522                           prodl	equ	0xFF3
 13523                           intcon	equ	0xFF2
 13524                           intcon2	equ	0xFF1
 13525                           intcon3	equ	0xFF0
 13526                           indf0	equ	0xFEF
 13527                           postinc0	equ	0xFEE
 13528                           fsr0h	equ	0xFEA
 13529                           fsr0l	equ	0xFE9
 13530                           wreg	equ	0xFE8
 13531                           indf1	equ	0xFE7
 13532                           postinc1	equ	0xFE6
 13533                           postdec1	equ	0xFE5
 13534                           fsr1h	equ	0xFE2
 13535                           fsr1l	equ	0xFE1
 13536                           indf2	equ	0xFDF
 13537                           postinc2	equ	0xFDE
 13538                           postdec2	equ	0xFDD
 13539                           fsr2h	equ	0xFDA
 13540                           fsr2l	equ	0xFD9
 13541                           status	equ	0xFD8
 13542                           
 13543 ;; *************** function i2_putch *****************
 13544 ;; Defined at:
 13545 ;;		line 30 in file "lcd.c"
 13546 ;; Parameters:    Size  Location     Type
 13547 ;;  data            1    wreg     unsigned char 
 13548 ;; Auto vars:     Size  Location     Type
 13549 ;;  data            1    2[COMRAM] unsigned char 
 13550 ;; Return value:  Size  Location     Type
 13551 ;;                  1    wreg      void 
 13552 ;; Registers used:
 13553 ;;		wreg, status,2, status,0, cstack
 13554 ;; Tracked objects:
 13555 ;;		On entry : 0/0
 13556 ;;		On exit  : 0/0
 13557 ;;		Unchanged: 0/0
 13558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13560 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13562 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13563 ;;Total ram usage:        1 bytes
 13564 ;; Hardware stack levels used:    1
 13565 ;; Hardware stack levels required when called:    1
 13566 ;; This function calls:
 13567 ;;		i2_lcdNibble
 13568 ;; This function is called by:
 13569 ;;		i2_printf
 13570 ;; This function uses a non-reentrant model
 13571 ;;
 13572                           
 13573                           	psect	text36
 13574  003CFC                     __ptext36:
 13575                           	opt stack 0
 13576  003CFC                     i2_putch:
 13577                           	opt stack 20
 13578                           
 13579                           ;incstack = 0
 13580                           ;i2putch@data stored from wreg
 13581  003CFC  6E03               	movwf	i2putch@data,c
 13582                           
 13583                           ;lcd.c: 31: LATDbits.LATD2 = 1;
 13584  003CFE  848C               	bsf	3980,2,c	;volatile
 13585                           
 13586                           ;lcd.c: 32: lcdNibble(data);
 13587  003D00  5003               	movf	i2putch@data,w,c
 13588  003D02  ECB8  F01C         	call	i2_lcdNibble
 13589  003D06  0012               	return		;funcret
 13590  003D08                     __end_ofi2_putch:
 13591                           	opt stack 0
 13592                           tosu	equ	0xFFF
 13593                           tosh	equ	0xFFE
 13594                           tosl	equ	0xFFD
 13595                           pclatu	equ	0xFFB
 13596                           pclath	equ	0xFFA
 13597                           tblptru	equ	0xFF8
 13598                           tblptrh	equ	0xFF7
 13599                           tblptrl	equ	0xFF6
 13600                           tablat	equ	0xFF5
 13601                           prodh	equ	0xFF4
 13602                           prodl	equ	0xFF3
 13603                           intcon	equ	0xFF2
 13604                           intcon2	equ	0xFF1
 13605                           intcon3	equ	0xFF0
 13606                           indf0	equ	0xFEF
 13607                           postinc0	equ	0xFEE
 13608                           fsr0h	equ	0xFEA
 13609                           fsr0l	equ	0xFE9
 13610                           wreg	equ	0xFE8
 13611                           indf1	equ	0xFE7
 13612                           postinc1	equ	0xFE6
 13613                           postdec1	equ	0xFE5
 13614                           fsr1h	equ	0xFE2
 13615                           fsr1l	equ	0xFE1
 13616                           indf2	equ	0xFDF
 13617                           postinc2	equ	0xFDE
 13618                           postdec2	equ	0xFDD
 13619                           fsr2h	equ	0xFDA
 13620                           fsr2l	equ	0xFD9
 13621                           status	equ	0xFD8
 13622                           
 13623 ;; *************** function i2_isdigit *****************
 13624 ;; Defined at:
 13625 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13626 ;; Parameters:    Size  Location     Type
 13627 ;;  c               1    wreg     unsigned char 
 13628 ;; Auto vars:     Size  Location     Type
 13629 ;;  c               1    2[COMRAM] unsigned char 
 13630 ;; Return value:  Size  Location     Type
 13631 ;;		None               void
 13632 ;; Registers used:
 13633 ;;		wreg, status,2, status,0
 13634 ;; Tracked objects:
 13635 ;;		On entry : 0/0
 13636 ;;		On exit  : 0/0
 13637 ;;		Unchanged: 0/0
 13638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13640 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13641 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13642 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13643 ;;Total ram usage:        3 bytes
 13644 ;; Hardware stack levels used:    1
 13645 ;; This function calls:
 13646 ;;		Nothing
 13647 ;; This function is called by:
 13648 ;;		i2__doprnt
 13649 ;; This function uses a non-reentrant model
 13650 ;;
 13651                           
 13652                           	psect	text37
 13653  003C88                     __ptext37:
 13654                           	opt stack 0
 13655  003C88                     i2_isdigit:
 13656                           	opt stack 21
 13657                           
 13658                           ;incstack = 0
 13659                           ;i2isdigit@c stored from wreg
 13660  003C88  6E03               	movwf	i2isdigit@c,c
 13661  003C8A  0E00               	movlw	0
 13662  003C8C  6E02               	movwf	i2_isdigit$774,c
 13663  003C8E  0E3A               	movlw	58
 13664  003C90  6003               	cpfslt	i2isdigit@c,c
 13665  003C92  D005               	goto	i2l3238
 13666  003C94  0E2F               	movlw	47
 13667  003C96  6403               	cpfsgt	i2isdigit@c,c
 13668  003C98  D002               	goto	i2l3238
 13669  003C9A  0E01               	movlw	1
 13670  003C9C  6E02               	movwf	i2_isdigit$774,c
 13671  003C9E                     i2l3238:
 13672  003C9E  C002  F001         	movff	i2_isdigit$774,??i2_isdigit
 13673  003CA2  3001               	rrcf	??i2_isdigit,w,c
 13674  003CA4  0012               	return	
 13675  003CA6                     __end_ofi2_isdigit:
 13676                           	opt stack 0
 13677                           tosu	equ	0xFFF
 13678                           tosh	equ	0xFFE
 13679                           tosl	equ	0xFFD
 13680                           pclatu	equ	0xFFB
 13681                           pclath	equ	0xFFA
 13682                           tblptru	equ	0xFF8
 13683                           tblptrh	equ	0xFF7
 13684                           tblptrl	equ	0xFF6
 13685                           tablat	equ	0xFF5
 13686                           prodh	equ	0xFF4
 13687                           prodl	equ	0xFF3
 13688                           intcon	equ	0xFF2
 13689                           intcon2	equ	0xFF1
 13690                           intcon3	equ	0xFF0
 13691                           indf0	equ	0xFEF
 13692                           postinc0	equ	0xFEE
 13693                           fsr0h	equ	0xFEA
 13694                           fsr0l	equ	0xFE9
 13695                           wreg	equ	0xFE8
 13696                           indf1	equ	0xFE7
 13697                           postinc1	equ	0xFE6
 13698                           postdec1	equ	0xFE5
 13699                           fsr1h	equ	0xFE2
 13700                           fsr1l	equ	0xFE1
 13701                           indf2	equ	0xFDF
 13702                           postinc2	equ	0xFDE
 13703                           postdec2	equ	0xFDD
 13704                           fsr2h	equ	0xFDA
 13705                           fsr2l	equ	0xFD9
 13706                           status	equ	0xFD8
 13707                           
 13708 ;; *************** function i2___wmul *****************
 13709 ;; Defined at:
 13710 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13711 ;; Parameters:    Size  Location     Type
 13712 ;;  multiplier      2    0[COMRAM] unsigned int 
 13713 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13714 ;; Auto vars:     Size  Location     Type
 13715 ;;  __wmul          2    4[COMRAM] unsigned int 
 13716 ;; Return value:  Size  Location     Type
 13717 ;;                  2    0[COMRAM] unsigned int 
 13718 ;; Registers used:
 13719 ;;		wreg, status,2, status,0, prodl, prodh
 13720 ;; Tracked objects:
 13721 ;;		On entry : 0/0
 13722 ;;		On exit  : 0/0
 13723 ;;		Unchanged: 0/0
 13724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13725 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13726 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13728 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13729 ;;Total ram usage:        6 bytes
 13730 ;; Hardware stack levels used:    1
 13731 ;; This function calls:
 13732 ;;		Nothing
 13733 ;; This function is called by:
 13734 ;;		i2__doprnt
 13735 ;; This function uses a non-reentrant model
 13736 ;;
 13737                           
 13738                           	psect	text38
 13739  003C62                     __ptext38:
 13740                           	opt stack 0
 13741  003C62                     i2___wmul:
 13742                           	opt stack 21
 13743                           
 13744                           ;incstack = 0
 13745  003C62  5001               	movf	i2___wmul@multiplier,w,c
 13746  003C64  0203               	mulwf	i2___wmul@multiplicand,c
 13747  003C66  CFF3 F005          	movff	prodl,i2___wmul@product
 13748  003C6A  CFF4 F006          	movff	prodh,i2___wmul@product+1
 13749  003C6E  5001               	movf	i2___wmul@multiplier,w,c
 13750  003C70  0204               	mulwf	i2___wmul@multiplicand+1,c
 13751  003C72  50F3               	movf	prodl,w,c
 13752  003C74  2606               	addwf	i2___wmul@product+1,f,c
 13753  003C76  5002               	movf	i2___wmul@multiplier+1,w,c
 13754  003C78  0203               	mulwf	i2___wmul@multiplicand,c
 13755  003C7A  50F3               	movf	prodl,w,c
 13756  003C7C  2606               	addwf	i2___wmul@product+1,f,c
 13757  003C7E  C005  F001         	movff	i2___wmul@product,?i2___wmul
 13758  003C82  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 13759  003C86  0012               	return	
 13760  003C88                     __end_ofi2___wmul:
 13761                           	opt stack 0
 13762                           tosu	equ	0xFFF
 13763                           tosh	equ	0xFFE
 13764                           tosl	equ	0xFFD
 13765                           pclatu	equ	0xFFB
 13766                           pclath	equ	0xFFA
 13767                           tblptru	equ	0xFF8
 13768                           tblptrh	equ	0xFF7
 13769                           tblptrl	equ	0xFF6
 13770                           tablat	equ	0xFF5
 13771                           prodh	equ	0xFF4
 13772                           prodl	equ	0xFF3
 13773                           intcon	equ	0xFF2
 13774                           intcon2	equ	0xFF1
 13775                           intcon3	equ	0xFF0
 13776                           indf0	equ	0xFEF
 13777                           postinc0	equ	0xFEE
 13778                           fsr0h	equ	0xFEA
 13779                           fsr0l	equ	0xFE9
 13780                           wreg	equ	0xFE8
 13781                           indf1	equ	0xFE7
 13782                           postinc1	equ	0xFE6
 13783                           postdec1	equ	0xFE5
 13784                           fsr1h	equ	0xFE2
 13785                           fsr1l	equ	0xFE1
 13786                           indf2	equ	0xFDF
 13787                           postinc2	equ	0xFDE
 13788                           postdec2	equ	0xFDD
 13789                           fsr2h	equ	0xFDA
 13790                           fsr2l	equ	0xFD9
 13791                           status	equ	0xFD8
 13792                           
 13793 ;; *************** function i2___lwmod *****************
 13794 ;; Defined at:
 13795 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13796 ;; Parameters:    Size  Location     Type
 13797 ;;  dividend        2    7[COMRAM] unsigned int 
 13798 ;;  divisor         2    9[COMRAM] unsigned int 
 13799 ;; Auto vars:     Size  Location     Type
 13800 ;;  __lwmod         1   11[COMRAM] unsigned char 
 13801 ;; Return value:  Size  Location     Type
 13802 ;;                  2    7[COMRAM] unsigned int 
 13803 ;; Registers used:
 13804 ;;		wreg, status,2, status,0
 13805 ;; Tracked objects:
 13806 ;;		On entry : 0/0
 13807 ;;		On exit  : 0/0
 13808 ;;		Unchanged: 0/0
 13809 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13810 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13811 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13812 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13813 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13814 ;;Total ram usage:        5 bytes
 13815 ;; Hardware stack levels used:    1
 13816 ;; This function calls:
 13817 ;;		Nothing
 13818 ;; This function is called by:
 13819 ;;		i2__doprnt
 13820 ;; This function uses a non-reentrant model
 13821 ;;
 13822                           
 13823                           	psect	text39
 13824  003AFE                     __ptext39:
 13825                           	opt stack 0
 13826  003AFE                     i2___lwmod:
 13827                           	opt stack 21
 13828                           
 13829                           ;incstack = 0
 13830  003AFE  500A               	movf	i2___lwmod@divisor,w,c
 13831  003B00  100B               	iorwf	i2___lwmod@divisor+1,w,c
 13832  003B02  B4D8               	btfsc	status,2,c
 13833  003B04  D018               	goto	i2l1015
 13834  003B06  0E01               	movlw	1
 13835  003B08  6E0C               	movwf	i2___lwmod@counter,c
 13836  003B0A  D004               	goto	i2l3270
 13837  003B0C                     i2l3268:
 13838  003B0C  90D8               	bcf	status,0,c
 13839  003B0E  360A               	rlcf	i2___lwmod@divisor,f,c
 13840  003B10  360B               	rlcf	i2___lwmod@divisor+1,f,c
 13841  003B12  2A0C               	incf	i2___lwmod@counter,f,c
 13842  003B14                     i2l3270:
 13843  003B14  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 13844  003B16  D7FA               	goto	i2l3268
 13845  003B18                     i2l3272:
 13846  003B18  500A               	movf	i2___lwmod@divisor,w,c
 13847  003B1A  5C08               	subwf	i2___lwmod@dividend,w,c
 13848  003B1C  500B               	movf	i2___lwmod@divisor+1,w,c
 13849  003B1E  5809               	subwfb	i2___lwmod@dividend+1,w,c
 13850  003B20  A0D8               	btfss	status,0,c
 13851  003B22  D004               	goto	i2l3276
 13852  003B24  500A               	movf	i2___lwmod@divisor,w,c
 13853  003B26  5E08               	subwf	i2___lwmod@dividend,f,c
 13854  003B28  500B               	movf	i2___lwmod@divisor+1,w,c
 13855  003B2A  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 13856  003B2C                     i2l3276:
 13857  003B2C  90D8               	bcf	status,0,c
 13858  003B2E  320B               	rrcf	i2___lwmod@divisor+1,f,c
 13859  003B30  320A               	rrcf	i2___lwmod@divisor,f,c
 13860  003B32  2E0C               	decfsz	i2___lwmod@counter,f,c
 13861  003B34  D7F1               	goto	i2l3272
 13862  003B36                     i2l1015:
 13863  003B36  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 13864  003B3A  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 13865  003B3E  0012               	return		;funcret
 13866  003B40                     __end_ofi2___lwmod:
 13867                           	opt stack 0
 13868                           tosu	equ	0xFFF
 13869                           tosh	equ	0xFFE
 13870                           tosl	equ	0xFFD
 13871                           pclatu	equ	0xFFB
 13872                           pclath	equ	0xFFA
 13873                           tblptru	equ	0xFF8
 13874                           tblptrh	equ	0xFF7
 13875                           tblptrl	equ	0xFF6
 13876                           tablat	equ	0xFF5
 13877                           prodh	equ	0xFF4
 13878                           prodl	equ	0xFF3
 13879                           intcon	equ	0xFF2
 13880                           intcon2	equ	0xFF1
 13881                           intcon3	equ	0xFF0
 13882                           indf0	equ	0xFEF
 13883                           postinc0	equ	0xFEE
 13884                           fsr0h	equ	0xFEA
 13885                           fsr0l	equ	0xFE9
 13886                           wreg	equ	0xFE8
 13887                           indf1	equ	0xFE7
 13888                           postinc1	equ	0xFE6
 13889                           postdec1	equ	0xFE5
 13890                           fsr1h	equ	0xFE2
 13891                           fsr1l	equ	0xFE1
 13892                           indf2	equ	0xFDF
 13893                           postinc2	equ	0xFDE
 13894                           postdec2	equ	0xFDD
 13895                           fsr2h	equ	0xFDA
 13896                           fsr2l	equ	0xFD9
 13897                           status	equ	0xFD8
 13898                           
 13899 ;; *************** function i2___lwdiv *****************
 13900 ;; Defined at:
 13901 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 13902 ;; Parameters:    Size  Location     Type
 13903 ;;  dividend        2    0[COMRAM] unsigned int 
 13904 ;;  divisor         2    2[COMRAM] unsigned int 
 13905 ;; Auto vars:     Size  Location     Type
 13906 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 13907 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 13908 ;; Return value:  Size  Location     Type
 13909 ;;                  2    0[COMRAM] unsigned int 
 13910 ;; Registers used:
 13911 ;;		wreg, status,2, status,0
 13912 ;; Tracked objects:
 13913 ;;		On entry : 0/0
 13914 ;;		On exit  : 0/0
 13915 ;;		Unchanged: 0/0
 13916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13917 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13918 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13920 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13921 ;;Total ram usage:        7 bytes
 13922 ;; Hardware stack levels used:    1
 13923 ;; This function calls:
 13924 ;;		Nothing
 13925 ;; This function is called by:
 13926 ;;		i2__doprnt
 13927 ;; This function uses a non-reentrant model
 13928 ;;
 13929                           
 13930                           	psect	text40
 13931  003A18                     __ptext40:
 13932                           	opt stack 0
 13933  003A18                     i2___lwdiv:
 13934                           	opt stack 21
 13935                           
 13936                           ;incstack = 0
 13937  003A18  0E00               	movlw	0
 13938  003A1A  6E06               	movwf	i2___lwdiv@quotient+1,c
 13939  003A1C  0E00               	movlw	0
 13940  003A1E  6E05               	movwf	i2___lwdiv@quotient,c
 13941  003A20  5003               	movf	i2___lwdiv@divisor,w,c
 13942  003A22  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 13943  003A24  B4D8               	btfsc	status,2,c
 13944  003A26  D01C               	goto	i2l1005
 13945  003A28  0E01               	movlw	1
 13946  003A2A  6E07               	movwf	i2___lwdiv@counter,c
 13947  003A2C  D004               	goto	i2l3250
 13948  003A2E                     i2l3248:
 13949  003A2E  90D8               	bcf	status,0,c
 13950  003A30  3603               	rlcf	i2___lwdiv@divisor,f,c
 13951  003A32  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 13952  003A34  2A07               	incf	i2___lwdiv@counter,f,c
 13953  003A36                     i2l3250:
 13954  003A36  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 13955  003A38  D7FA               	goto	i2l3248
 13956  003A3A                     i2l3252:
 13957  003A3A  90D8               	bcf	status,0,c
 13958  003A3C  3605               	rlcf	i2___lwdiv@quotient,f,c
 13959  003A3E  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 13960  003A40  5003               	movf	i2___lwdiv@divisor,w,c
 13961  003A42  5C01               	subwf	i2___lwdiv@dividend,w,c
 13962  003A44  5004               	movf	i2___lwdiv@divisor+1,w,c
 13963  003A46  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 13964  003A48  A0D8               	btfss	status,0,c
 13965  003A4A  D005               	goto	i2l3260
 13966  003A4C  5003               	movf	i2___lwdiv@divisor,w,c
 13967  003A4E  5E01               	subwf	i2___lwdiv@dividend,f,c
 13968  003A50  5004               	movf	i2___lwdiv@divisor+1,w,c
 13969  003A52  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 13970  003A54  8005               	bsf	i2___lwdiv@quotient,0,c
 13971  003A56                     i2l3260:
 13972  003A56  90D8               	bcf	status,0,c
 13973  003A58  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 13974  003A5A  3203               	rrcf	i2___lwdiv@divisor,f,c
 13975  003A5C  2E07               	decfsz	i2___lwdiv@counter,f,c
 13976  003A5E  D7ED               	goto	i2l3252
 13977  003A60                     i2l1005:
 13978  003A60  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 13979  003A64  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 13980  003A68  0012               	return		;funcret
 13981  003A6A                     __end_ofi2___lwdiv:
 13982                           	opt stack 0
 13983                           tosu	equ	0xFFF
 13984                           tosh	equ	0xFFE
 13985                           tosl	equ	0xFFD
 13986                           pclatu	equ	0xFFB
 13987                           pclath	equ	0xFFA
 13988                           tblptru	equ	0xFF8
 13989                           tblptrh	equ	0xFF7
 13990                           tblptrl	equ	0xFF6
 13991                           tablat	equ	0xFF5
 13992                           prodh	equ	0xFF4
 13993                           prodl	equ	0xFF3
 13994                           intcon	equ	0xFF2
 13995                           intcon2	equ	0xFF1
 13996                           intcon3	equ	0xFF0
 13997                           indf0	equ	0xFEF
 13998                           postinc0	equ	0xFEE
 13999                           fsr0h	equ	0xFEA
 14000                           fsr0l	equ	0xFE9
 14001                           wreg	equ	0xFE8
 14002                           indf1	equ	0xFE7
 14003                           postinc1	equ	0xFE6
 14004                           postdec1	equ	0xFE5
 14005                           fsr1h	equ	0xFE2
 14006                           fsr1l	equ	0xFE1
 14007                           indf2	equ	0xFDF
 14008                           postinc2	equ	0xFDE
 14009                           postdec2	equ	0xFDD
 14010                           fsr2h	equ	0xFDA
 14011                           fsr2l	equ	0xFD9
 14012                           status	equ	0xFD8
 14013                           
 14014 ;; *************** function i2_lcdInst *****************
 14015 ;; Defined at:
 14016 ;;		line 25 in file "lcd.c"
 14017 ;; Parameters:    Size  Location     Type
 14018 ;;  data            1    wreg     unsigned char 
 14019 ;; Auto vars:     Size  Location     Type
 14020 ;;  data            1    2[COMRAM] unsigned char 
 14021 ;; Return value:  Size  Location     Type
 14022 ;;                  1    wreg      void 
 14023 ;; Registers used:
 14024 ;;		wreg, status,2, status,0, cstack
 14025 ;; Tracked objects:
 14026 ;;		On entry : 0/0
 14027 ;;		On exit  : 0/0
 14028 ;;		Unchanged: 0/0
 14029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14030 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14031 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14033 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14034 ;;Total ram usage:        1 bytes
 14035 ;; Hardware stack levels used:    1
 14036 ;; Hardware stack levels required when called:    1
 14037 ;; This function calls:
 14038 ;;		i2_lcdNibble
 14039 ;; This function is called by:
 14040 ;;		_keypressed
 14041 ;; This function uses a non-reentrant model
 14042 ;;
 14043                           
 14044                           	psect	text41
 14045  003D08                     __ptext41:
 14046                           	opt stack 0
 14047  003D08                     i2_lcdInst:
 14048                           	opt stack 22
 14049                           
 14050                           ;incstack = 0
 14051                           ;i2lcdInst@data stored from wreg
 14052  003D08  6E03               	movwf	i2lcdInst@data,c
 14053                           
 14054                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 14055  003D0A  948C               	bcf	3980,2,c	;volatile
 14056                           
 14057                           ;lcd.c: 27: lcdNibble(data);
 14058  003D0C  5003               	movf	i2lcdInst@data,w,c
 14059  003D0E  ECB8  F01C         	call	i2_lcdNibble
 14060  003D12  0012               	return		;funcret
 14061  003D14                     __end_ofi2_lcdInst:
 14062                           	opt stack 0
 14063                           tosu	equ	0xFFF
 14064                           tosh	equ	0xFFE
 14065                           tosl	equ	0xFFD
 14066                           pclatu	equ	0xFFB
 14067                           pclath	equ	0xFFA
 14068                           tblptru	equ	0xFF8
 14069                           tblptrh	equ	0xFF7
 14070                           tblptrl	equ	0xFF6
 14071                           tablat	equ	0xFF5
 14072                           prodh	equ	0xFF4
 14073                           prodl	equ	0xFF3
 14074                           intcon	equ	0xFF2
 14075                           intcon2	equ	0xFF1
 14076                           intcon3	equ	0xFF0
 14077                           indf0	equ	0xFEF
 14078                           postinc0	equ	0xFEE
 14079                           fsr0h	equ	0xFEA
 14080                           fsr0l	equ	0xFE9
 14081                           wreg	equ	0xFE8
 14082                           indf1	equ	0xFE7
 14083                           postinc1	equ	0xFE6
 14084                           postdec1	equ	0xFE5
 14085                           fsr1h	equ	0xFE2
 14086                           fsr1l	equ	0xFE1
 14087                           indf2	equ	0xFDF
 14088                           postinc2	equ	0xFDE
 14089                           postdec2	equ	0xFDD
 14090                           fsr2h	equ	0xFDA
 14091                           fsr2l	equ	0xFD9
 14092                           status	equ	0xFD8
 14093                           
 14094 ;; *************** function i2_lcdNibble *****************
 14095 ;; Defined at:
 14096 ;;		line 35 in file "lcd.c"
 14097 ;; Parameters:    Size  Location     Type
 14098 ;;  data            1    wreg     unsigned char 
 14099 ;; Auto vars:     Size  Location     Type
 14100 ;;  data            1    1[COMRAM] unsigned char 
 14101 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 14102 ;; Return value:  Size  Location     Type
 14103 ;;                  1    wreg      void 
 14104 ;; Registers used:
 14105 ;;		wreg, status,2, status,0
 14106 ;; Tracked objects:
 14107 ;;		On entry : 0/0
 14108 ;;		On exit  : 0/0
 14109 ;;		Unchanged: 0/0
 14110 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14111 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14112 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14113 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14114 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14115 ;;Total ram usage:        2 bytes
 14116 ;; Hardware stack levels used:    1
 14117 ;; This function calls:
 14118 ;;		Nothing
 14119 ;; This function is called by:
 14120 ;;		i2_lcdInst
 14121 ;;		i2_putch
 14122 ;; This function uses a non-reentrant model
 14123 ;;
 14124                           
 14125                           	psect	text42
 14126  003970                     __ptext42:
 14127                           	opt stack 0
 14128  003970                     i2_lcdNibble:
 14129                           	opt stack 20
 14130                           
 14131                           ;incstack = 0
 14132                           ;i2lcdNibble@data stored from wreg
 14133  003970  6E02               	movwf	i2lcdNibble@data,c
 14134                           
 14135                           ;lcd.c: 37: char temp = data & 0xF0;
 14136  003972  5002               	movf	i2lcdNibble@data,w,c
 14137  003974  0BF0               	andlw	240
 14138  003976  6E01               	movwf	i2lcdNibble@temp,c
 14139                           
 14140                           ;lcd.c: 38: LATD = LATD & 0x0F;
 14141  003978  508C               	movf	3980,w,c	;volatile
 14142  00397A  0B0F               	andlw	15
 14143  00397C  6E8C               	movwf	3980,c	;volatile
 14144                           
 14145                           ;lcd.c: 39: LATD = temp | LATD;
 14146  00397E  5001               	movf	i2lcdNibble@temp,w,c
 14147  003980  108C               	iorwf	3980,w,c	;volatile
 14148  003982  6E8C               	movwf	3980,c	;volatile
 14149                           
 14150                           ;lcd.c: 41: LATDbits.LATD3 = 0;
 14151  003984  968C               	bcf	3980,3,c	;volatile
 14152                           
 14153                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
 14154  003986  0E14               	movlw	20
 14155  003988                     i2u1434_47:
 14156  003988  2EE8               	decfsz	wreg,f,c
 14157  00398A  D7FE               	bra	i2u1434_47
 14158  00398C  D000               	nop2	
 14159                           
 14160                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 14161  00398E  868C               	bsf	3980,3,c	;volatile
 14162                           
 14163                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
 14164  003990  0E14               	movlw	20
 14165  003992                     i2u1435_47:
 14166  003992  2EE8               	decfsz	wreg,f,c
 14167  003994  D7FE               	bra	i2u1435_47
 14168  003996  D000               	nop2	
 14169                           
 14170                           ;lcd.c: 46: data = data << 4;
 14171  003998  3802               	swapf	i2lcdNibble@data,w,c
 14172  00399A  0BF0               	andlw	240
 14173  00399C  6E02               	movwf	i2lcdNibble@data,c
 14174                           
 14175                           ;lcd.c: 48: temp = data & 0xF0;
 14176  00399E  5002               	movf	i2lcdNibble@data,w,c
 14177  0039A0  0BF0               	andlw	240
 14178  0039A2  6E01               	movwf	i2lcdNibble@temp,c
 14179                           
 14180                           ;lcd.c: 49: LATD = LATD & 0x0F;
 14181  0039A4  508C               	movf	3980,w,c	;volatile
 14182  0039A6  0B0F               	andlw	15
 14183  0039A8  6E8C               	movwf	3980,c	;volatile
 14184                           
 14185                           ;lcd.c: 50: LATD = temp | LATD;
 14186  0039AA  5001               	movf	i2lcdNibble@temp,w,c
 14187  0039AC  108C               	iorwf	3980,w,c	;volatile
 14188  0039AE  6E8C               	movwf	3980,c	;volatile
 14189                           
 14190                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 14191  0039B0  968C               	bcf	3980,3,c	;volatile
 14192                           
 14193                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
 14194  0039B2  0E14               	movlw	20
 14195  0039B4                     i2u1436_47:
 14196  0039B4  2EE8               	decfsz	wreg,f,c
 14197  0039B6  D7FE               	bra	i2u1436_47
 14198  0039B8  D000               	nop2	
 14199                           
 14200                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 14201  0039BA  868C               	bsf	3980,3,c	;volatile
 14202                           
 14203                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
 14204  0039BC  0E14               	movlw	20
 14205  0039BE                     i2u1437_47:
 14206  0039BE  2EE8               	decfsz	wreg,f,c
 14207  0039C0  D7FE               	bra	i2u1437_47
 14208  0039C2  D000               	nop2	
 14209  0039C4  0012               	return		;funcret
 14210  0039C6                     __end_ofi2_lcdNibble:
 14211                           	opt stack 0
 14212                           tosu	equ	0xFFF
 14213                           tosh	equ	0xFFE
 14214                           tosl	equ	0xFFD
 14215                           pclatu	equ	0xFFB
 14216                           pclath	equ	0xFFA
 14217                           tblptru	equ	0xFF8
 14218                           tblptrh	equ	0xFF7
 14219                           tblptrl	equ	0xFF6
 14220                           tablat	equ	0xFF5
 14221                           prodh	equ	0xFF4
 14222                           prodl	equ	0xFF3
 14223                           intcon	equ	0xFF2
 14224                           intcon2	equ	0xFF1
 14225                           intcon3	equ	0xFF0
 14226                           indf0	equ	0xFEF
 14227                           postinc0	equ	0xFEE
 14228                           fsr0h	equ	0xFEA
 14229                           fsr0l	equ	0xFE9
 14230                           wreg	equ	0xFE8
 14231                           indf1	equ	0xFE7
 14232                           postinc1	equ	0xFE6
 14233                           postdec1	equ	0xFE5
 14234                           fsr1h	equ	0xFE2
 14235                           fsr1l	equ	0xFE1
 14236                           indf2	equ	0xFDF
 14237                           postinc2	equ	0xFDE
 14238                           postdec2	equ	0xFDD
 14239                           fsr2h	equ	0xFDA
 14240                           fsr2l	equ	0xFD9
 14241                           status	equ	0xFD8
 14242                           
 14243 ;; *************** function i2___awmod *****************
 14244 ;; Defined at:
 14245 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 14246 ;; Parameters:    Size  Location     Type
 14247 ;;  dividend        2    0[COMRAM] int 
 14248 ;;  divisor         2    2[COMRAM] int 
 14249 ;; Auto vars:     Size  Location     Type
 14250 ;;  __awmod         1    5[COMRAM] unsigned char 
 14251 ;;  __awmod         1    4[COMRAM] unsigned char 
 14252 ;; Return value:  Size  Location     Type
 14253 ;;                  2    0[COMRAM] int 
 14254 ;; Registers used:
 14255 ;;		wreg, status,2, status,0
 14256 ;; Tracked objects:
 14257 ;;		On entry : 0/0
 14258 ;;		On exit  : 0/0
 14259 ;;		Unchanged: 0/0
 14260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14261 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14262 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14264 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14265 ;;Total ram usage:        6 bytes
 14266 ;; Hardware stack levels used:    1
 14267 ;; This function calls:
 14268 ;;		Nothing
 14269 ;; This function is called by:
 14270 ;;		_keypressed
 14271 ;; This function uses a non-reentrant model
 14272 ;;
 14273                           
 14274                           	psect	text43
 14275  00371E                     __ptext43:
 14276                           	opt stack 0
 14277  00371E                     i2___awmod:
 14278                           	opt stack 23
 14279                           
 14280                           ;incstack = 0
 14281  00371E  0E00               	movlw	0
 14282  003720  6E06               	movwf	i2___awmod@sign,c
 14283  003722  AE02               	btfss	i2___awmod@dividend+1,7,c
 14284  003724  D006               	goto	i2l4196
 14285  003726  6C01               	negf	i2___awmod@dividend,c
 14286  003728  1E02               	comf	i2___awmod@dividend+1,f,c
 14287  00372A  B0D8               	btfsc	status,0,c
 14288  00372C  2A02               	incf	i2___awmod@dividend+1,f,c
 14289  00372E  0E01               	movlw	1
 14290  003730  6E06               	movwf	i2___awmod@sign,c
 14291  003732                     i2l4196:
 14292  003732  AE04               	btfss	i2___awmod@divisor+1,7,c
 14293  003734  D004               	goto	i2l4200
 14294  003736  6C03               	negf	i2___awmod@divisor,c
 14295  003738  1E04               	comf	i2___awmod@divisor+1,f,c
 14296  00373A  B0D8               	btfsc	status,0,c
 14297  00373C  2A04               	incf	i2___awmod@divisor+1,f,c
 14298  00373E                     i2l4200:
 14299  00373E  5003               	movf	i2___awmod@divisor,w,c
 14300  003740  1004               	iorwf	i2___awmod@divisor+1,w,c
 14301  003742  B4D8               	btfsc	status,2,c
 14302  003744  D018               	goto	i2l4216
 14303  003746  0E01               	movlw	1
 14304  003748  6E05               	movwf	i2___awmod@counter,c
 14305  00374A  D004               	goto	i2l4206
 14306  00374C                     i2l4204:
 14307  00374C  90D8               	bcf	status,0,c
 14308  00374E  3603               	rlcf	i2___awmod@divisor,f,c
 14309  003750  3604               	rlcf	i2___awmod@divisor+1,f,c
 14310  003752  2A05               	incf	i2___awmod@counter,f,c
 14311  003754                     i2l4206:
 14312  003754  AE04               	btfss	i2___awmod@divisor+1,7,c
 14313  003756  D7FA               	goto	i2l4204
 14314  003758                     i2l4208:
 14315  003758  5003               	movf	i2___awmod@divisor,w,c
 14316  00375A  5C01               	subwf	i2___awmod@dividend,w,c
 14317  00375C  5004               	movf	i2___awmod@divisor+1,w,c
 14318  00375E  5802               	subwfb	i2___awmod@dividend+1,w,c
 14319  003760  A0D8               	btfss	status,0,c
 14320  003762  D004               	goto	i2l4212
 14321  003764  5003               	movf	i2___awmod@divisor,w,c
 14322  003766  5E01               	subwf	i2___awmod@dividend,f,c
 14323  003768  5004               	movf	i2___awmod@divisor+1,w,c
 14324  00376A  5A02               	subwfb	i2___awmod@dividend+1,f,c
 14325  00376C                     i2l4212:
 14326  00376C  90D8               	bcf	status,0,c
 14327  00376E  3204               	rrcf	i2___awmod@divisor+1,f,c
 14328  003770  3203               	rrcf	i2___awmod@divisor,f,c
 14329  003772  2E05               	decfsz	i2___awmod@counter,f,c
 14330  003774  D7F1               	goto	i2l4208
 14331  003776                     i2l4216:
 14332  003776  5006               	movf	i2___awmod@sign,w,c
 14333  003778  B4D8               	btfsc	status,2,c
 14334  00377A  D004               	goto	i2l4220
 14335  00377C  6C01               	negf	i2___awmod@dividend,c
 14336  00377E  1E02               	comf	i2___awmod@dividend+1,f,c
 14337  003780  B0D8               	btfsc	status,0,c
 14338  003782  2A02               	incf	i2___awmod@dividend+1,f,c
 14339  003784                     i2l4220:
 14340  003784  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 14341  003788  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 14342  00378C  0012               	return	
 14343  00378E                     __end_ofi2___awmod:
 14344                           	opt stack 0
 14345                           tosu	equ	0xFFF
 14346                           tosh	equ	0xFFE
 14347                           tosl	equ	0xFFD
 14348                           pclatu	equ	0xFFB
 14349                           pclath	equ	0xFFA
 14350                           tblptru	equ	0xFF8
 14351                           tblptrh	equ	0xFF7
 14352                           tblptrl	equ	0xFF6
 14353                           tablat	equ	0xFF5
 14354                           prodh	equ	0xFF4
 14355                           prodl	equ	0xFF3
 14356                           intcon	equ	0xFF2
 14357                           intcon2	equ	0xFF1
 14358                           intcon3	equ	0xFF0
 14359                           indf0	equ	0xFEF
 14360                           postinc0	equ	0xFEE
 14361                           fsr0h	equ	0xFEA
 14362                           fsr0l	equ	0xFE9
 14363                           wreg	equ	0xFE8
 14364                           indf1	equ	0xFE7
 14365                           postinc1	equ	0xFE6
 14366                           postdec1	equ	0xFE5
 14367                           fsr1h	equ	0xFE2
 14368                           fsr1l	equ	0xFE1
 14369                           indf2	equ	0xFDF
 14370                           postinc2	equ	0xFDE
 14371                           postdec2	equ	0xFDD
 14372                           fsr2h	equ	0xFDA
 14373                           fsr2l	equ	0xFD9
 14374                           status	equ	0xFD8
 14375                           tosu	equ	0xFFF
 14376                           tosh	equ	0xFFE
 14377                           tosl	equ	0xFFD
 14378                           pclatu	equ	0xFFB
 14379                           pclath	equ	0xFFA
 14380                           tblptru	equ	0xFF8
 14381                           tblptrh	equ	0xFF7
 14382                           tblptrl	equ	0xFF6
 14383                           tablat	equ	0xFF5
 14384                           prodh	equ	0xFF4
 14385                           prodl	equ	0xFF3
 14386                           intcon	equ	0xFF2
 14387                           intcon2	equ	0xFF1
 14388                           intcon3	equ	0xFF0
 14389                           indf0	equ	0xFEF
 14390                           postinc0	equ	0xFEE
 14391                           fsr0h	equ	0xFEA
 14392                           fsr0l	equ	0xFE9
 14393                           wreg	equ	0xFE8
 14394                           indf1	equ	0xFE7
 14395                           postinc1	equ	0xFE6
 14396                           postdec1	equ	0xFE5
 14397                           fsr1h	equ	0xFE2
 14398                           fsr1l	equ	0xFE1
 14399                           indf2	equ	0xFDF
 14400                           postinc2	equ	0xFDE
 14401                           postdec2	equ	0xFDD
 14402                           fsr2h	equ	0xFDA
 14403                           fsr2l	equ	0xFD9
 14404                           status	equ	0xFD8
 14405                           
 14406                           	psect	text44
 14407  000000                     __ptext44:
 14408                           	opt stack 0
 14409                           tosu	equ	0xFFF
 14410                           tosh	equ	0xFFE
 14411                           tosl	equ	0xFFD
 14412                           pclatu	equ	0xFFB
 14413                           pclath	equ	0xFFA
 14414                           tblptru	equ	0xFF8
 14415                           tblptrh	equ	0xFF7
 14416                           tblptrl	equ	0xFF6
 14417                           tablat	equ	0xFF5
 14418                           prodh	equ	0xFF4
 14419                           prodl	equ	0xFF3
 14420                           intcon	equ	0xFF2
 14421                           intcon2	equ	0xFF1
 14422                           intcon3	equ	0xFF0
 14423                           indf0	equ	0xFEF
 14424                           postinc0	equ	0xFEE
 14425                           fsr0h	equ	0xFEA
 14426                           fsr0l	equ	0xFE9
 14427                           wreg	equ	0xFE8
 14428                           indf1	equ	0xFE7
 14429                           postinc1	equ	0xFE6
 14430                           postdec1	equ	0xFE5
 14431                           fsr1h	equ	0xFE2
 14432                           fsr1l	equ	0xFE1
 14433                           indf2	equ	0xFDF
 14434                           postinc2	equ	0xFDE
 14435                           postdec2	equ	0xFDD
 14436                           fsr2h	equ	0xFDA
 14437                           fsr2l	equ	0xFD9
 14438                           status	equ	0xFD8
 14439                           
 14440                           	psect	rparam
 14441  0000                     tosu	equ	0xFFF
 14442                           tosh	equ	0xFFE
 14443                           tosl	equ	0xFFD
 14444                           pclatu	equ	0xFFB
 14445                           pclath	equ	0xFFA
 14446                           tblptru	equ	0xFF8
 14447                           tblptrh	equ	0xFF7
 14448                           tblptrl	equ	0xFF6
 14449                           tablat	equ	0xFF5
 14450                           prodh	equ	0xFF4
 14451                           prodl	equ	0xFF3
 14452                           intcon	equ	0xFF2
 14453                           intcon2	equ	0xFF1
 14454                           intcon3	equ	0xFF0
 14455                           indf0	equ	0xFEF
 14456                           postinc0	equ	0xFEE
 14457                           fsr0h	equ	0xFEA
 14458                           fsr0l	equ	0xFE9
 14459                           wreg	equ	0xFE8
 14460                           indf1	equ	0xFE7
 14461                           postinc1	equ	0xFE6
 14462                           postdec1	equ	0xFE5
 14463                           fsr1h	equ	0xFE2
 14464                           fsr1l	equ	0xFE1
 14465                           indf2	equ	0xFDF
 14466                           postinc2	equ	0xFDE
 14467                           postdec2	equ	0xFDD
 14468                           fsr2h	equ	0xFDA
 14469                           fsr2l	equ	0xFD9
 14470                           status	equ	0xFD8
 14471                           
 14472                           	psect	temp
 14473  00007B                     btemp:
 14474                           	opt stack 0
 14475  00007B                     	ds	1
 14476  0000                     int$flags	set	btemp
 14477                           tosu	equ	0xFFF
 14478                           tosh	equ	0xFFE
 14479                           tosl	equ	0xFFD
 14480                           pclatu	equ	0xFFB
 14481                           pclath	equ	0xFFA
 14482                           tblptru	equ	0xFF8
 14483                           tblptrh	equ	0xFF7
 14484                           tblptrl	equ	0xFF6
 14485                           tablat	equ	0xFF5
 14486                           prodh	equ	0xFF4
 14487                           prodl	equ	0xFF3
 14488                           intcon	equ	0xFF2
 14489                           intcon2	equ	0xFF1
 14490                           intcon3	equ	0xFF0
 14491                           indf0	equ	0xFEF
 14492                           postinc0	equ	0xFEE
 14493                           fsr0h	equ	0xFEA
 14494                           fsr0l	equ	0xFE9
 14495                           wreg	equ	0xFE8
 14496                           indf1	equ	0xFE7
 14497                           postinc1	equ	0xFE6
 14498                           postdec1	equ	0xFE5
 14499                           fsr1h	equ	0xFE2
 14500                           fsr1l	equ	0xFE1
 14501                           indf2	equ	0xFDF
 14502                           postinc2	equ	0xFDE
 14503                           postdec2	equ	0xFDD
 14504                           fsr2h	equ	0xFDA
 14505                           fsr2l	equ	0xFD9
 14506                           status	equ	0xFD8


Data Sizes:
    Strings     382
    Constant    42
    Data        754
    BSS         195
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     61     122
    BANK0           128     58     122
    BANK1           256     10     120
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    display_menu$1161	PTR const unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_22(CODE[5]), STR_21(CODE[5]), STR_20(CODE[5]), STR_19(CODE[5]), 
		 -> STR_18(CODE[20]), STR_17(CODE[20]), STR_16(CODE[22]), STR_15(CODE[19]), 
		 -> menu(BIGRAM[720]), STR_14(CODE[15]), STR_13(CODE[6]), STR_12(CODE[18]), 
		 -> STR_11(CODE[19]), STR_10(CODE[16]), STR_9(CODE[12]), STR_8(CODE[19]), 
		 -> STR_7(CODE[17]), STR_6(CODE[14]), STR_5(CODE[12]), STR_4(CODE[16]), 
		 -> STR_3(CODE[25]), STR_2(CODE[23]), STR_1(CODE[23]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_25(CODE[14]), STR_24(CODE[15]), STR_23(CODE[8]), display1(BANK1[18]), 
		 -> display0(BANK1[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> i2_putch(), Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), NULL(NULL[0]), STR_26(CODE[7]), 
		 -> _doprnt@c(BANK0[1]), ADRESH(SFR[1]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), 
		 -> ndisplay0(BANK1[18]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_25(CODE[14]), STR_24(CODE[15]), STR_23(CODE[8]), STR_22(CODE[5]), 
		 -> STR_21(CODE[5]), STR_20(CODE[5]), STR_19(CODE[5]), STR_18(CODE[20]), 
		 -> STR_17(CODE[20]), STR_16(CODE[22]), STR_15(CODE[19]), menu(BIGRAM[720]), 
		 -> STR_14(CODE[15]), STR_13(CODE[6]), STR_12(CODE[18]), STR_11(CODE[19]), 
		 -> STR_10(CODE[16]), STR_9(CODE[12]), STR_8(CODE[19]), STR_7(CODE[17]), 
		 -> STR_6(CODE[14]), STR_5(CODE[12]), STR_4(CODE[16]), STR_3(CODE[25]), 
		 -> STR_2(CODE[23]), STR_1(CODE[23]), display1(BANK1[18]), display0(BANK1[18]), 

    S514__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S514__prbuf$ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    display_menu@menuSizePtr	PTR int  size(2) Largest target is 2
		 -> endSize(BANK0[2]), menuSize(BANK0[2]), creditSize(BANK0[2]), events(BANK0[2]), 

    display_menu@menuIndexPtr	PTR int  size(2) Largest target is 2
		 -> endIndex(BANK0[2]), creditIndex(BANK0[2]), logIndex(BANK0[2]), menuIndex(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    i2_printf->i2__doprnt
    i2__doprnt->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _update_state->_sprintf
    _update_lcd->_printf
    _printf->__doprnt
    _update_display->_display_menu
    _display_menu->_sprintf
    _sprintf->__doprnt
    __doprnt->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _update_RTC->___wmul
    _I2C_Master_Read->_I2C_Master_Wait
    _sort->__measure
    __measure->___awmod
    _set_time->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _read_sensors->_readADC
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    _update_display->_display_menu

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  110158
                                             57 BANK0      1     1      0
                    _I2C_Master_Init
                            _initLCD
                       _read_sensors
                           _set_time
                               _sort
                         _update_RTC
                     _update_display
                         _update_lcd
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         3     3      0   24234
                                             52 BANK0      3     3      0
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _update_lcd                                           7     7      0   15264
                                             42 BANK0      3     3      0
                            _lcdInst
                             _printf
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     417
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4     441
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     6      2   14096
                                             34 BANK0      8     6      2
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _update_display                                       0     0      0   55101
                            ___awdiv
                            ___awmod
                           __measure
                       _display_menu
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _display_menu                                        25    25      0   27128
                                             52 BANK0      5     5      0
                                              0 BANK1     10    10      0
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             18     6     12   19952
                                             34 BANK0     18     6     12
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            __doprnt
                           __measure (ARG)
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             26    20      6   11868
                                             12 BANK0     22    16      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     753
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _update_RTC                                           5     5      0    3606
                                              6 BANK0      5     5      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (1) _sort                                                 6     6      0   10254
                                             20 BANK0      6     6      0
                            ___awmod
                             ___wmul
                           __measure
 ---------------------------------------------------------------------------------
 (2) __measure                                            14    12      2    4189
                                              6 BANK0     14    12      2
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3079
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2856
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _set_time                                             1     1      0     592
                                              3 BANK0      1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     493
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _read_sensors                                         5     5      0     409
                                              2 BANK0      5     5      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _keypressed                                          19    19      0   11552
                                             42 COMRAM    19    19      0
                          i2___awmod
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_printf                                             8     6      2    8568
                                             34 COMRAM     8     6      2
                          i2__doprnt
 ---------------------------------------------------------------------------------
 (9) i2__doprnt                                           26    20      6    8036
                                             12 COMRAM    22    16      6
                   Absolute function *
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch *
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i2___awmod                                            6     2      4     504
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _read_sensors
     _readADC
   _set_time
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
   _sort
     ___awmod
     ___wmul
     __measure
       ___awmod
   _update_RTC
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
   _update_display
     ___awdiv
     ___awmod
     __measure
       ___awmod
     _display_menu
       ___wmul
       _sprintf
         ___awdiv (ARG)
         ___awmod (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
         __measure (ARG)
           ___awmod
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
       __measure (ARG)
         ___awmod
   _update_lcd
     _lcdInst
       _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _strcmp
     _strcpy
   _update_state
     ___awdiv
     ___awmod
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
       __measure (ARG)
         ___awmod

 _keypressed (ROOT)
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2__doprnt
       Absolute function(Fake) *
       i2___lwdiv *
       i2___lwmod *
         i2___lwdiv (ARG)
       i2___wmul *
       i2_isdigit *
       i2_putch *
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0     2D0      37       18.1%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      A      78       7       46.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     3A      7A       5       95.3%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3D      7A       1       96.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     16C      34        0.0%
DATA                 0      0     43C       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Feb 28 07:47:41 2017

             _update_state 288A                         l34 3CD8               ___awdiv@sign 0085  
      ___wmul@multiplicand 0082         i2___lwdiv@dividend 0001                __CFG_BORV$3 000000  
           _update_display 254A               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l531 0480                        l493 210A                        l952 34B2  
                      _IR1 0056               __CFG_CPB$OFF 000000                        _IR2 011C  
            ?_display_menu 0001                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _SEN 007E28               ___awmod@sign 0085                        prod 000FF3  
                      tosl 000FFD                        wreg 000FE8               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       l1005 3714                       l1015 384E  
                     l5000 1E8A                       l5002 1E90                       l5020 1F04  
                     l5012 1ED0                       l5030 1F44                       l5006 1E9A  
                     l5104 3C20                       l5024 1F0E                       l5106 3C32  
                     l5042 1F82                       l5018 1EFE                       l5130 33A6  
                     l5122 337C                       l5060 1FF6                       l5036 1F72  
                     l5140 33DC                       l5132 33AC                       l5116 3366  
                     l5054 1FE6                       l5038 1F78                       l5160 3446  
                     l5080 2080                       l5072 205A                       l5056 1FEC  
                     l5048 1FB8                       l5128 339A                       l5144 33EA  
                     l5170 34A0                       l5162 344C                       l5066 202C  
                     l4530 36C4                       l4514 3C58                       l5084 209A  
                     l5148 33FE                       l4532 36D0                       l5158 3436  
                     l5414 387E                       l5094 20FE                       l5502 21BE  
                     l5430 311E                       l4542 3706                       l4534 36D6  
                     l4550 380A                       l5424 38B4                       l4800 359E  
                     l5512 2210                       l4552 3816                       l5418 3888  
                     l5530 226E                       l5506 21D4                       l5442 31B6  
                     l5434 3128                       l4554 381C                       l8002 1886  
                     l4820 360A                       l4812 35E8                       l4804 35B2  
                     l5540 229E                       l5462 3030                       l4806 35BE  
                     l5534 2282                       l5526 225A                       l4558 3840  
                     l8014 18D8                       l4808 35C4                       l4816 35F6  
                     l5544 22B6                       l5480 212E                       l8032 1B92  
                     l8008 18B4                       l8016 18F2                       l4930 1CE4  
                     l5562 23A0                       l5554 236A                       l5538 2298  
                     l8026 1A52                       l4940 1D12                       l5548 230E  
                     l5484 2148                       l5492 216A                       l4844 3C04  
                     l4934 1CEE                       l5582 2490                       l5566 23B6  
                     l5558 2386                       l5574 2458                       l4862 3960  
                     l4870 3BC2                       l8302 2AD0                       l4952 1D50  
                     l4856 391C                       _ADFM 007E07                       l4970 1DB2  
                     l4946 1D40                       l5586 24AC                       l5578 2474  
                     l5498 21AC                       l8330 254C                       l4858 3928  
                     l8322 2B50                       l8314 2B28                       l8306 2AEC  
                     l4796 358E                       l4964 1DA2                       l4948 1D46  
                     l8332 25B6                       l4868 3BB6                       l8260 28B2  
                     l4982 1E16                       l4966 1DA8                       l4958 1D74  
                     l8350 27AA                       l8342 26CA                       l8334 25BC  
                     l8318 2B3C                       l8262 28B8                       l4984 1E1C  
                     l4976 1DE8                       l7800 01FA                       l8256 289E  
                     l8432 3550                       l4994 1E5C                       l7810 0272  
                     l7802 0206                       l8354 2826                       l8346 2746  
                     l8338 265E                       l8266 28C2                       l8426 3544  
                     l8418 352C                       l4988 1E26                       l7900 05EA  
                     l7812 027E                       l7820 02EE                       l7804 020C  
                     l7822 0306                       l7806 024C                       l8358 2860  
                     l8374 32F2                       l8278 293E                       l7912 066E  
                     l7816 02C4                       l8368 32A4                       l8296 2AB2  
                     l8288 29C2                       l7930 0746                       l7922 06EA  
                     l7826 036C                       l7834 03C4                       l7762 0016  
                     l7908 0644                       l7924 06F4                       l7836 03DC  
                     l7828 0374                       l7844 041A                       l7772 0098  
                     _ADON 007E10                       l7950 085A                       l7942 07D8  
                     l7934 0770                       l7926 0700                       l7918 06C0  
                     l7870 0532                       l7854 04C6                       l7838 0402  
                     l7774 00AA                       l7936 0784                       l7872 0538  
                     l7856 04F0                       l7792 01B4                       l7784 0110  
                     l7768 006A                       l7962 090E                       l7946 0802  
                     l7858 04F6                       l7794 01BA                       l7970 098A  
                     l7778 00B4                       l7948 0808                       l7956 08B4  
                     l7958 08C6                       l7966 0938                       l7894 05A8  
                     l7886 0574                       l7990 1846                       l7888 0586  
                     l7968 0944                       l7898 05E0                       l7996 1866  
                     STR_1 FE9A                       STR_2 FEB1                       STR_3 FE81  
                     STR_4 FF83                       STR_5 FFCD                       STR_6 FFB1  
                     STR_7 FF62                       STR_8 FF19                       STR_9 FFD9  
                     _LATA 000F89                       _LATB 000F8A                       _LATC 000F8B  
                     _LATD 000F8C                       _LATE 000F8D                       u7030 1EC0  
                     u7040 1EC2                       u7130 1FA8                       u8010 212A  
                     u8004 30CC                       u7140 1FAA                       u8020 2144  
                     _RCEN 007E2B                       u8005 30C6                       u8030 215C  
                     u7080 1F34                       u8200 2324                       u7090 1F36  
                     u7180 201C                       u8300 2488                       u8220 2380  
                     u7190 201E                       u8310 24A4                       u8230 239C  
                     u8214 2358                       u8215 2352                       u8320 2542  
                     u8250 23CA                       u8180 22CC                       u8264 23FE  
                     u8265 23F8                       u6930 1DD8                       u8290 246C  
                     u8194 2300                       u8195 22FA                       u6940 1DDA  
                     u8284 244A                       u8285 2444                       u6790 3C02  
                     u7915 38EA                       u6980 1E4C                       u6990 1E4E  
                     u7994 30A2                       u7995 309C                       _RSEN 007E29  
                     _main 34C4                i2__doprnt@c 0022                i2__doprnt@f 000F  
                     _menu 0178                       _keys FE57                       _time 006A  
                     fsr0h 000FEA                       fsr1h 000FE2         i2___lwdiv@quotient 0005  
                     indf0 000FEF                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf1 000FE7                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       _sort 2114                       btemp 007B  
                     prodh 000FF4                       prodl 000FF3                       start 000E  
            __CFG_IESO$OFF 000000            __end_ofi2_putch 3D08              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                i2_lcdNibble 3970     __end_of_update_display 288A  
       _discretize_counter 00C6           ?_I2C_Master_Init 008D           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001             ??_display_menu 00B4  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
          __end_of___awdiv 3408                      STR_10 FF73                      STR_11 FF2C  
                    STR_20 FFFA                      STR_12 FF3F                      STR_21 FFFA  
                    STR_13 FFF4                      STR_22 FFFA                      STR_14 FF93  
                    STR_23 FFE5                      STR_15 FF06                      STR_24 FFA2  
                    STR_16 FEC8                      STR_25 FFBF                      STR_17 FEDE  
                    STR_26 FFED                      STR_18 FEF2                      STR_19 FFFA  
                    STR_27 FF51            __end_of___awmod 3614                      ?_sort 0001  
          __end_of___lldiv 34C4                      _DIST1 004C                      u13010 097C  
          ___awdiv@divisor 0082                      u13017 0972                      u12600 0246  
                    u12530 00D6                      u12540 00FE                      u12710 0452  
                    u12607 023C                      u12560 015C                      u12528 0052  
                    u12537 00CC                      u12570 01AA                      u14307 37AE  
                    u12547 00F4                      u14317 37B8                      u12717 0448  
                    u13710 2AE6                      u14327 37E4                      u12567 0152  
                    u12680 036A                      u12648 02AE                      u14337 37EE  
                    u12577 01A0                      u14257 3564                      u12690 03AE  
                    u13650 29BC                      u14267 330C                      u14277 3C28  
                    u12678 0336                      u14287 3ABC                      u12687 0360  
                    u14297 3AF2                      u12697 03A4                      u12938 0730  
                    u12868 062E                      u12978 07C2                      u12898 06AA  
                    u12998 08F6            __end_of___lwdiv 371E            __end_of___lwmod 3858  
                    i2l411 17FE                      i2l370 17FC                      i2l531 0D74  
          ___awdiv@counter 0084                      _PORTB 000F81                      _PROX1 00BA  
                    _PROX2 0060            __end_of__doprnt 0996                      _TRISA 000F92  
                    _TRISB 000F93                      _TRISC 000F94                      _TRISD 000F95  
                    _TRISE 000F96              __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000  
            __CFG_WRT1$OFF 000000              __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000  
          __end_of_lcdInst 3CFC             __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000  
           __CFG_EBTR1$OFF 000000             __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000  
                    _nRBPU 007F8F              __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000  
            __CFG_WRTD$OFF 000000            __end_of_readADC 3C38            __end_of_initLCD 3AFE  
           __CFG_EBTRB$OFF 000000                 i2isdigit@c 0003            __end_of_dpowers FE72  
             i2__doprnt@ap 0011               i2__doprnt@cp 001B               i2__doprnt@pb 000D  
          __end_of_isdigit 3C62                      _state 00E5                      _putch 3CC2  
                    pclath 000FFA                      tablat 000FF5           __end_ofi2___wmul 3C88  
                    sort@i 0098                      status 000FD8            __end_of_sprintf 3A18  
       __size_ofi2___awmod 0070             __CFG_PBADEN$ON 000000           __end_ofi2_printf 3BAC  
       __size_ofi2___lwdiv 0052         __size_ofi2___lwmod 0042         __size_ofi2__doprnt 0858  
          __initialization 3614         __size_ofi2_lcdInst 000C               __end_of_main 3572  
             __end_of_keys FE68               __end_of_sort 254A                 i2printf@ap 0025  
               i2printf@pb 0027            ?_update_display 0001         __size_ofi2_isdigit 001E  
          _IR_THRESHOLD_HI 00DE                     ??_main 00B9                     ??_sort 0094  
            __activetblptr 000003          ?_I2C_Master_Start 0001          ?_I2C_Master_Write 0081  
   _latestSortedBottleTime 0100         ??_I2C_Master_Start 0081                     _ADCON0 000FC2  
                   _ADCON1 000FC1         ??_I2C_Master_Write 0083                     _ADRESH 000FC4  
                   _ADRESL 000FC3           ___awdiv@dividend 0080            i2lcdNibble@data 0002  
                   ?_putch 0001            i2lcdNibble@temp 0001                     _INT1IE 007F83  
                   _INT1IF 007F80                     _CVRCON 000FB5                     i2l1005 3A60  
                   i2l1015 3B36                     i2l4200 373E                     i2l3250 3A36  
                   i2l4220 3784                     i2l4212 376C                     i2l4204 374C  
                   i2l3260 3A56                     i2l3252 3A3A                     i2l4206 3754  
                   i2l3270 3B14                     i2l3238 3C9E                     i2l4208 3758  
                   i2l4216 3776                     i2l3248 3A2E                     i2l3272 3B18  
                   i2l3276 3B2C                     i2l3268 3B0C                     i2l4196 3732  
                   i2l8100 0C20                     i2l8200 0F8A                     i2l8104 0C80  
                   i2l8112 0CD4                     i2l8040 099A                     i2l8202 0F92  
                   i2l8114 0CE6                     i2l8106 0C86                     i2l8122 0D1C  
                   i2l8050 0A0E                     i2l8220 105E                     i2l8212 1004  
                   i2l8204 0F9A                     i2l8132 0DB2                     i2l8116 0D0A  
                   i2l8052 0A1C                     i2l8214 1012                     i2l8150 0E16  
                   i2l8134 0DDC                     i2l8070 0B06                     i2l8062 0A7C  
                   i2l8046 09E2                     i2l8240 117A                     i2l8208 0FDA  
                   i2l8224 1088                     i2l8136 0DE0                     i2l8080 0B4C  
                   i2l8072 0B0A                     i2l8056 0A22                     i2l8226 108E  
                   i2l8234 112A                     i2l8090 0BA4                     i2l8082 0B50  
                   i2l8228 10D8                     i2l8236 113A                     i2l8244 11A4  
                   i2l8172 0E72                     i2l8148 0E12                     i2l8164 0E48  
                   i2l8084 0B84                     i2l8190 0F18                     i2l8166 0E58  
                   i2l8094 0BE4                     i2l8078 0B42                     i2l8246 11AC  
                   i2l8502 13CE                     i2l8176 0E96                     i2l8088 0B9A  
                   i2l8248 11E4                     i2l8600 179C                     i2l8520 145A  
                   i2l8186 0EEE                     i2l8178 0E9E                     i2l8098 0C0E  
                   i2l8530 149C                     i2l8442 1236                     i2l8196 0F60  
                   i2l8604 17C4                     i2l8524 146A                     i2l8508 1412  
                   i2l8460 12C4                     i2l8444 123E                     i2l8542 1520  
                   i2l8518 1452                     i2l8470 1326                     i2l8454 1280  
                   i2l8552 1588                     i2l8544 1540                     i2l8536 14E0  
                   i2l8472 132A                     i2l8448 124E                     i2l8608 17D2  
                   i2l8570 1654                     i2l8546 1544                     i2l8490 1384  
                   i2l8474 132E                     i2l8466 1304                     i2l8564 1610  
                   i2l8492 138C                     i2l8476 1332                     i2l8582 16D8  
                   i2l8574 1694                     i2l8558 15CC                     i2l8486 135E  
                   i2l8576 1698                     i2l8496 139C                     i2l8594 175C  
                   i2l8588 1718                  ??i2_putch 0003                     _SSPADD 000FC8  
                   _TRISC3 007CA3                     _TRISC4 007CA4                     _SSPBUF 000FC9  
         __end_of__measure 2114             __CFG_XINST$OFF 000000                     ___wmul 3B40  
                ??___awdiv 0084             __CFG_STVREN$ON 000000                  ??___awmod 0084  
                ??___lldiv 0088                  ??___lwdiv 0084                  ??___lwmod 008B  
            ?_read_sensors 0001            _release_counter 00CE                  ??__doprnt 0092  
                   _events 00EE              i2__doprnt@idx 0017              i2__doprnt@len 0019  
            i2__doprnt@val 001D                     clear_0 367E                     clear_1 368A  
                   clear_2 3696           ___awdiv@quotient 0086            ___awmod@divisor 0082  
                   _time_i 003E               __doprnt@flag 009E                     _nstate 00E4  
          ___awmod@counter 0084                  ??_lcdInst 0082                     _printf 3A6A  
             __doprnt@prec 0097                     _strcmp 391A                     _strcpy 3BAC  
                ??_readADC 0080                  ??_initLCD 0083               __pdataBIGRAM 0178  
             __pdataCOMRAM 0073                  ??_isdigit 0080           __end_of_set_time 38BA  
        __end_ofi2___awmod 378E          __end_ofi2___lwdiv 3A6A               __mediumconst FE56  
        __end_ofi2___lwmod 3B40                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8          __end_ofi2__doprnt 11EE             i2___awmod@sign 0006  
        __end_ofi2_lcdInst 3D14                  ??_sprintf 00AE          __end_ofi2_isdigit 3CA6  
               __accesstop 0080    __end_of__initialization 369C       __end_of_display_menu 1CD4  
            ___rparam_used 000001  display_menu@menuSelection 0172         i2___lwmod@dividend 0008  
           __pcstackCOMRAM 0001               __pidataBANK0 3CA6             ??_read_sensors 0082  
            __end_of_putch 3CD8                  ?i2___wmul 0001         __size_of_lcdNibble 0068  
              i2putch@data 0003                keypressed@i 003B                  ?i2_printf 0023  
            update_state@i 00B6           _IR_THRESHOLD_LOW 00E0                 __doprnt@ap 0090  
               __doprnt@cp 009A                 __doprnt@pb 008C                 __measure@i 008A  
                  ??_putch 0082                 __pbssBANK0 00BA                 __pbssBANK1 0100  
               __pnvCOMRAM 0079               ?i2_lcdNibble 0001                    ?___wmul 0080  
           _sorted_bottles 00D2                    ?_printf 00A2                    ?_strcmp 0080  
                  ?_strcpy 0080                 ??i2___wmul 0005                    _IR1_PIN 0076  
                  _IR2_PIN 0077                 _creditSize 00E8                  ?__measure 0086  
               _discretize 00F6       __measure@measurement 0092                 ??i2_printf 0025  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
                  i2_putch 3CFC          __end_of_lcdNibble 37F6           ??_update_display 00B9  
                  __Hparam 0000                    __Lparam 0000             _manualDateTime FE7A  
                ?_set_time 0001                    ___awdiv 334A                    ___awmod 3572  
                  ___lldiv 3408            __size_of___wmul 0036                    ___lwdiv 36A6  
                  ___lwmod 37F6                  _CMCONbits 000FB4                    __doprnt 0012  
                _DIST1_PIN 0071                    __pcinit 3614                    __ramtop 1000  
                  _endSize 00EC                    _lcdInst 3CEC                    __ptext0 34C4  
                  __ptext1 288A                    __ptext2 324C                    __ptext3 3BAC  
                  __ptext4 391A                    __ptext5 3A6A                    __ptext6 254A  
                  __ptext7 183A                    __ptext8 39C6                    __ptext9 0012  
          __size_of_printf 004A            __size_of_strcmp 0056                    _readADC 3C0C  
          __size_of_strcpy 0032                    _initLCD 3AB4          __end_of_hexpowers FE7A  
            i2_isdigit$774 0002                    _dpowers FE68                    _measure 0079  
                  _isdigit 3C38                 ??__measure 0088             i2__doprnt@flag 001F  
         ___awmod@dividend 0080             i2__doprnt@prec 0018                    _release 00F8  
               _keypressed 0008   __size_of_I2C_Master_Init 0060   __size_of_I2C_Master_Read 002E  
 __size_of_I2C_Master_Wait 0014   __size_of_I2C_Master_Stop 0008                    _runTime 00D0  
                  _yopWCap 00D8                    _sprintf 39C6              __doprnt@width 009F  
    __size_of_display_menu 049A             __pintcode_body 11EE         _DIST_THRESHOLD_LOW 00DC  
     end_of_initialization 369C       __end_of_read_sensors 30E2                    int_func 11EE  
      i2___wmul@multiplier 0001                  i2u1311_40 0AC2                  i2u1311_47 0AB8  
                i2u1312_40 0AFC                  i2u1312_47 0AF2                  i2u1401_40 1448  
                i2u1323_40 0C7E                  i2u1322_48 0C4C                  i2u1315_40 0B7E  
                i2u1323_47 0C74                  i2u1315_47 0B74                  i2u1324_40 0CC0  
                i2u1308_40 0A44                  i2u1307_48 09CE                  i2u1324_47 0CB6  
                i2u1308_47 0A3A                  i2u1309_40 0A6C                  i2u1309_47 0A62  
                i2u1341_48 0EDA                  i2u1326_40 0D4A                  i2u1326_47 0D40  
                i2u1423_40 1792                  i2u1319_48 0BD0                  i2u1408_40 1516  
                i2u1352_48 104A                  i2u1344_48 0F4C                  i2u1434_47 3988  
                i2u1354_48 1166                  i2u1419_40 170E                  i2u1435_47 3992  
                i2u1356_40 11DA                  i2u1436_47 39B4                  i2u1356_47 11D0  
                i2u1348_48 0FC6                  i2u1437_47 39BE                  i2u1394_40 12FA  
   __end_of_manualDateTime FE81  __size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A  
          ___lldiv@divisor 0084            ___lldiv@counter 008C                 ??_set_time 0083  
                  printf@f 00A2           I2C_Master_Init@c 008D           I2C_Master_Read@a 0081  
                  postdec1 000FE5                    postdec2 000FDD                    postinc0 000FEE  
                  postinc1 000FE6                    postinc2 000FDE                    strcmp@r 0085  
                _PROX1_PIN 0072                  _PROX2_PIN 0078               _display_menu 183A  
               _update_RTC 30E2                 _update_lcd 324C                  i2___awmod 371E  
        i2___lwdiv@divisor 0003                  i2___lwdiv 3A18                  i2___lwmod 3AFE  
        i2___lwdiv@counter 0007                  i2__doprnt 0996                  i2_lcdInst 3D08  
                i2_isdigit 3C88              ?_update_state 0001              __pidataBIGRAM 2B88  
           __end_of___wmul 3B76       __size_ofi2_lcdNibble 0056              __pidataCOMRAM 3D2E  
            i2lcdInst@data 0003           i2___wmul@product 0005             __end_of_printf 3AB4  
              update_RTC@i 008A             __end_of_strcmp 3970             __end_of_strcpy 3BDE  
           update_lcd@flag 00AB        start_initialization 3614                ?_keypressed 0001  
        __size_ofi2___wmul 0026                  i2printf@f 0023                 ?i2___awmod 0001  
               ?i2___lwdiv 0001                 ?i2___lwmod 0008          __size_ofi2_printf 0036  
               ?i2__doprnt 000D          ??_I2C_Master_Init 0091          ??_I2C_Master_Read 0081  
        ??_I2C_Master_Wait 0080                 ?i2_lcdInst 0001          ??_I2C_Master_Stop 0081  
               ?i2_isdigit 0001             ??_update_state 00B4                   ??___wmul 0084  
              __doprnt@idx 0096                __doprnt@len 0098                __doprnt@val 009C  
              __pdataBANK0 00DA           __CFG_LPT1OSC$OFF 000000                   ??_printf 00A4  
                 ??_strcmp 0084                   ??_strcpy 0084                __pbssCOMRAM 003E  
              ?_update_RTC 0001      __size_of_read_sensors 028A              __pcstackBANK0 0080  
            __pcstackBANK1 016E                ?_update_lcd 0001          i2___lwmod@divisor 000A  
        __size_of__measure 0440          i2___lwmod@counter 000C                   ?i2_putch 0001  
                __doprnt@c 00A1                  __doprnt@f 008E                  __pnvBANK0 00F6  
         _I2C_Master_Start 3D26           _I2C_Master_Write 3D14           ___lwdiv@dividend 0080  
        __CFG_CCP2MX$PORTC 000000        __size_of_keypressed 1832                  __pintcode 0008  
            __pmediumconst FE56                  _lcdNibble 378E                   ?___awdiv 0080  
                 ?___awmod 0080                   ?___lldiv 0080                   ?___lwdiv 0080  
                 ?___lwmod 0087          __size_of_set_time 0062                   ?__doprnt 008C  
             _read_sensors 2E58                   ?_lcdInst 0001                  _eskaNoCap 00C8  
                 ?_readADC 0001                   ?_initLCD 0001          _display_menu$1161 0174  
                 ?_isdigit 0001                  _hexpowers FE72                  _menuIndex 00F2  
         ___lwdiv@quotient 0085                ??i2___awmod 0005                   ?_sprintf 00A2  
              ??i2___lwdiv 0005                  _ndisplay0 014A                ??i2___lwmod 000C  
                _ndisplay1 015C             __size_of_putch 0016                ??i2__doprnt 0013  
              _creditIndex 00E6                ??i2_lcdInst 0003             ___wmul@product 0084  
                 _LATDbits 000F8C          _DIST_THRESHOLD_HI 00DA                ??i2_isdigit 0001  
      __size_of_update_RTC 016A           __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001  
      __size_of_update_lcd 00FE                 _ADCON0bits 000FC2          ___wmul@multiplier 0080  
                _startTime 010E                  _sortIndex 00E2                   i2___wmul 3C62  
            lcdNibble@data 0081              lcdNibble@temp 0080                   i2_printf 3B76  
     __end_of_update_state 2B88        I2C_Master_Read@temp 0082                _bottle_type 00C4  
                copy_data0 3628                  copy_data1 364C                  copy_data2 366C  
       i2___awmod@dividend 0001           __size_ofi2_putch 000C         keypressed@keypress 003D  
                 __Hrparam 0000                   __Lrparam 0000         __CFG_BOREN$SBORDIS 000000  
         __size_of___awdiv 00BE           __size_of___awmod 00A2      i2___wmul@multiplicand 0003  
         __size_of___lldiv 00BC           __size_of___lwdiv 0078           __size_of___lwmod 0062  
           readADC@channel 0081           __size_of__doprnt 0984    __size_of_update_display 0340  
              _isdigit$774 0081            _putch$intlevel0 3CC8   display_menu@menuIndexPtr 0176  
         __size_of_lcdInst 0010                   __measure 1CD4            _I2C_Master_Init 38BA  
         __size_of_readADC 002C            _I2C_Master_Read 3BDE           __size_of_initLCD 004A  
          _I2C_Master_Wait 3CD8            _I2C_Master_Stop 3D1E                 _DIST1_TRIG 0075  
             ??_keypressed 002B           __size_of_isdigit 002A                   _endIndex 00EA  
          ___lwdiv@divisor 0082            ___lwdiv@counter 0084                   __ptext10 3CC2  
                 __ptext11 3C38                   __ptext20 3B40                   __ptext12 37F6  
                 __ptext21 3858                   __ptext13 36A6                   __ptext30 378E  
                 __ptext22 3D14                   __ptext14 334A                   __ptext31 38BA  
                 __ptext23 3D1E                   __ptext15 30E2                   __ptext40 3A18  
                 __ptext32 3408                   __ptext24 3D26                   __ptext16 3BDE  
                 __ptext41 3D08                   __ptext25 3CD8                   __ptext17 2114  
                 __ptext42 3970                   __ptext34 3B76                   __ptext26 2E58  
                 __ptext18 1CD4                   __ptext43 371E                   __ptext35 0996  
                 __ptext27 3C0C                   __ptext19 3572                   __ptext44 0000  
                 __ptext36 3CFC                   __ptext28 3AB4                   __ptext37 3C88  
                 __ptext29 3CEC                   __ptext38 3C62                   __ptext39 3AFE  
                 _display0 0126                   _eskaWCap 00CA                   _display1 0138  
         __size_of_sprintf 0052                 strcpy@from 0082                   _logIndex 00F0  
            __size_of_main 00AE                   _menuSize 00F4              __size_of_sort 0436  
          i2__doprnt@width 0020                  set_time@i 0083                   _timeDiff 00D4  
                 _set_time 3858              ??i2_lcdNibble 0001                ??_lcdNibble 0080  
       __end_of_keypressed 183A                   int$flags 007B                   _sortSize 0073  
                 _yopNoCap 00D6          i2___awmod@divisor 0003                  putch@data 0082  
        i2___awmod@counter 0005   __end_of_I2C_Master_Start 3D2E   __end_of_I2C_Master_Write 3D1E  
               _INTCONbits 000FF2               ??_update_RTC 0086               ??_update_lcd 00AA  
                 isdigit@c 0082                   intlevel2 0000                  sprintf@ap 00AE  
                sprintf@pb 00B0                  sprintf@wh 00A2            _measure_counter 00CC  
         ___lwmod@dividend 0087           ___lldiv@dividend 0080    display_menu@menuSizePtr 0170  
           __measure@i_500 008F             __measure@i_501 0090             __measure@i_502 0091  
           __measure@i_496 008B             __measure@i_497 008C             __measure@i_498 008D  
           __measure@i_499 008E         __end_of_update_RTC 324C                   printf@ap 00A4  
                 printf@pb 00A6         __end_of_update_lcd 334A    __end_of_I2C_Master_Init 391A  
  __end_of_I2C_Master_Read 3C0C    __end_of_I2C_Master_Wait 3CEC    __end_of_I2C_Master_Stop 3D26  
              lcdInst@data 0082        __end_ofi2_lcdNibble 39C6                   sprintf@f 00A4  
    __size_of_update_state 02FE                   strcmp@s1 0080                   strcmp@s2 0082  
         ___lldiv@quotient 0088          I2C_Master_Write@d 0081            ___lwmod@divisor 0089  
                 strcpy@cp 0084                   strcpy@to 0080            ___lwmod@counter 008B  
            read_sensors@i 0086       display_menu@selector 016E  
