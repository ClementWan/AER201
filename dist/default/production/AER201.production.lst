

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Tue Mar 07 13:29:40 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBIGRAM,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    11                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    15                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	dataBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    19                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	text0,global,reloc=2,class=CODE,delta=1
    21                           	psect	text1,global,reloc=2,class=CODE,delta=1
    22                           	psect	text2,global,reloc=2,class=CODE,delta=1
    23                           	psect	text3,global,reloc=2,class=CODE,delta=1
    24                           	psect	text4,global,reloc=2,class=CODE,delta=1
    25                           	psect	text5,global,reloc=2,class=CODE,delta=1
    26                           	psect	text6,global,reloc=2,class=CODE,delta=1
    27                           	psect	text7,global,reloc=2,class=CODE,delta=1
    28                           	psect	text8,global,reloc=2,class=CODE,delta=1
    29                           	psect	text9,global,reloc=2,class=CODE,delta=1
    30                           	psect	text10,global,reloc=2,class=CODE,delta=1
    31                           	psect	text11,global,reloc=2,class=CODE,delta=1
    32                           	psect	text12,global,reloc=2,class=CODE,delta=1
    33                           	psect	text13,global,reloc=2,class=CODE,delta=1
    34                           	psect	text14,global,reloc=2,class=CODE,delta=1
    35                           	psect	text15,global,reloc=2,class=CODE,delta=1
    36                           	psect	text16,global,reloc=2,class=CODE,delta=1
    37                           	psect	text17,global,reloc=2,class=CODE,delta=1
    38                           	psect	text18,global,reloc=2,class=CODE,delta=1
    39                           	psect	text19,global,reloc=2,class=CODE,delta=1
    40                           	psect	text20,global,reloc=2,class=CODE,delta=1
    41                           	psect	text21,global,reloc=2,class=CODE,delta=1
    42                           	psect	text22,global,reloc=2,class=CODE,delta=1
    43                           	psect	text23,global,reloc=2,class=CODE,delta=1
    44                           	psect	text24,global,reloc=2,class=CODE,delta=1
    45                           	psect	text25,global,reloc=2,class=CODE,delta=1
    46                           	psect	text26,global,reloc=2,class=CODE,delta=1
    47                           	psect	text27,global,reloc=2,class=CODE,delta=1
    48                           	psect	text28,global,reloc=2,class=CODE,delta=1
    49                           	psect	text29,global,reloc=2,class=CODE,delta=1
    50                           	psect	text30,global,reloc=2,class=CODE,delta=1
    51                           	psect	text31,global,reloc=2,class=CODE,delta=1
    52                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    53                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    54                           	psect	text33,global,reloc=2,class=CODE,delta=1
    55                           	psect	text34,global,reloc=2,class=CODE,delta=1
    56                           	psect	text35,global,reloc=2,class=CODE,delta=1
    57                           	psect	text36,global,reloc=2,class=CODE,delta=1
    58                           	psect	text37,global,reloc=2,class=CODE,delta=1
    59                           	psect	text38,global,reloc=2,class=CODE,delta=1
    60                           	psect	text39,global,reloc=2,class=CODE,delta=1
    61                           	psect	text40,global,reloc=2,class=CODE,delta=1
    62                           	psect	text41,global,reloc=2,class=CODE,delta=1
    63                           	psect	text42,global,reloc=2,class=CODE,delta=1
    64                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    65                           	psect	text43,global,reloc=2,class=CODE,delta=1
    66                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    67                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    68  0000                     
    69                           ; Version 1.40
    70                           ; Generated 01/12/2016 GMT
    71                           ; 
    72                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    73                           ; All rights reserved.
    74                           ; 
    75                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    76                           ; 
    77                           ; Redistribution and use in source and binary forms, with or without modification, are
    78                           ; permitted provided that the following conditions are met:
    79                           ; 
    80                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    81                           ;        conditions and the following disclaimer.
    82                           ; 
    83                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    84                           ;        of conditions and the following disclaimer in the documentation and/or other
    85                           ;        materials provided with the distribution.
    86                           ; 
    87                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    88                           ;        software without specific prior written permission.
    89                           ; 
    90                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    91                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    92                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    93                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    94                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    95                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    96                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    97                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    98                           ; 
    99                           ; 
   100                           ; Code-generator required, PIC18F4620 Definitions
   101                           ; 
   102                           ; SFR Addresses
   103  0000                     
   104                           	psect	idataCOMRAM
   105  003E4C                     __pidataCOMRAM:
   106                           	opt stack 0
   107                           
   108                           ;initializer for _DIST_THRESHOLD_HI
   109  003E4C  02FF               	dw	767
   110                           
   111                           ;initializer for _DIST_THRESHOLD_LOW
   112  003E4E  00FF               	dw	255
   113                           
   114                           ;initializer for _sortSize
   115  003E50  0006               	dw	6
   116                           
   117                           ;initializer for _DIST1_TRIG
   118  003E52  05                 	db	5
   119                           
   120                           ;initializer for _IR1_PIN
   121  003E53  01                 	db	1
   122                           
   123                           ;initializer for _IR2_PIN
   124  003E54  02                 	db	2
   125                           
   126                           ;initializer for _PROX2_PIN
   127  003E55  02                 	db	2
   128                           
   129                           ;initializer for _endSize
   130  003E56  0003               	dw	3
   131                           
   132                           	psect	idataBIGRAM
   133  002D42                     __pidataBIGRAM:
   134                           	opt stack 0
   135                           
   136                           ;initializer for _menu
   137  002D42  31                 	db	49
   138  002D43  2E                 	db	46
   139  002D44  20                 	db	32
   140  002D45  53                 	db	83
   141  002D46  6F                 	db	111
   142  002D47  72                 	db	114
   143  002D48  74                 	db	116
   144  002D49  20                 	db	32
   145  002D4A  20                 	db	32
   146  002D4B  20                 	db	32
   147  002D4C  20                 	db	32
   148  002D4D  20                 	db	32
   149  002D4E  20                 	db	32
   150  002D4F  20                 	db	32
   151  002D50  20                 	db	32
   152  002D51  00                 	db	0
   153  002D52  00                 	db	0
   154  002D53  00                 	db	0
   155  002D54  32                 	db	50
   156  002D55  2E                 	db	46
   157  002D56  20                 	db	32
   158  002D57  50                 	db	80
   159  002D58  20                 	db	32
   160  002D59  4C                 	db	76
   161  002D5A  6F                 	db	111
   162  002D5B  67                 	db	103
   163  002D5C  73                 	db	115
   164  002D5D  20                 	db	32
   165  002D5E  20                 	db	32
   166  002D5F  20                 	db	32
   167  002D60  20                 	db	32
   168  002D61  20                 	db	32
   169  002D62  20                 	db	32
   170  002D63  00                 	db	0
   171  002D64  00                 	db	0
   172  002D65  00                 	db	0
   173  002D66  33                 	db	51
   174  002D67  2E                 	db	46
   175  002D68  20                 	db	32
   176  002D69  43                 	db	67
   177  002D6A  72                 	db	114
   178  002D6B  65                 	db	101
   179  002D6C  64                 	db	100
   180  002D6D  69                 	db	105
   181  002D6E  74                 	db	116
   182  002D6F  73                 	db	115
   183  002D70  20                 	db	32
   184  002D71  20                 	db	32
   185  002D72  20                 	db	32
   186  002D73  20                 	db	32
   187  002D74  20                 	db	32
   188  002D75  00                 	db	0
   189  002D76  00                 	db	0
   190  002D77  00                 	db	0
   191  002D78  00                 	db	0
   192  002D79  00                 	db	0
   193  002D7A  00                 	db	0
   194  002D7B  00                 	db	0
   195  002D7C  00                 	db	0
   196  002D7D  00                 	db	0
   197  002D7E  00                 	db	0
   198  002D7F  00                 	db	0
   199  002D80  00                 	db	0
   200  002D81  00                 	db	0
   201  002D82  00                 	db	0
   202  002D83  00                 	db	0
   203  002D84  00                 	db	0
   204  002D85  00                 	db	0
   205  002D86  00                 	db	0
   206  002D87  00                 	db	0
   207  002D88  00                 	db	0
   208  002D89  00                 	db	0
   209  002D8A  00                 	db	0
   210  002D8B  00                 	db	0
   211  002D8C  00                 	db	0
   212  002D8D  00                 	db	0
   213  002D8E  00                 	db	0
   214  002D8F  00                 	db	0
   215  002D90  00                 	db	0
   216  002D91  00                 	db	0
   217  002D92  00                 	db	0
   218  002D93  00                 	db	0
   219  002D94  00                 	db	0
   220  002D95  00                 	db	0
   221  002D96  00                 	db	0
   222  002D97  00                 	db	0
   223  002D98  00                 	db	0
   224  002D99  00                 	db	0
   225  002D9A  00                 	db	0
   226  002D9B  00                 	db	0
   227  002D9C  00                 	db	0
   228  002D9D  00                 	db	0
   229  002D9E  00                 	db	0
   230  002D9F  00                 	db	0
   231  002DA0  00                 	db	0
   232  002DA1  00                 	db	0
   233  002DA2  00                 	db	0
   234  002DA3  00                 	db	0
   235  002DA4  00                 	db	0
   236  002DA5  00                 	db	0
   237  002DA6  00                 	db	0
   238  002DA7  00                 	db	0
   239  002DA8  00                 	db	0
   240  002DA9  00                 	db	0
   241  002DAA  00                 	db	0
   242  002DAB  00                 	db	0
   243  002DAC  00                 	db	0
   244  002DAD  00                 	db	0
   245  002DAE  00                 	db	0
   246  002DAF  00                 	db	0
   247  002DB0  00                 	db	0
   248  002DB1  00                 	db	0
   249  002DB2  00                 	db	0
   250  002DB3  00                 	db	0
   251  002DB4  00                 	db	0
   252  002DB5  00                 	db	0
   253  002DB6  00                 	db	0
   254  002DB7  00                 	db	0
   255  002DB8  00                 	db	0
   256  002DB9  00                 	db	0
   257  002DBA  00                 	db	0
   258  002DBB  00                 	db	0
   259  002DBC  00                 	db	0
   260  002DBD  00                 	db	0
   261  002DBE  00                 	db	0
   262  002DBF  00                 	db	0
   263  002DC0  00                 	db	0
   264  002DC1  00                 	db	0
   265  002DC2  00                 	db	0
   266  002DC3  00                 	db	0
   267  002DC4  00                 	db	0
   268  002DC5  00                 	db	0
   269  002DC6  00                 	db	0
   270  002DC7  00                 	db	0
   271  002DC8  00                 	db	0
   272  002DC9  00                 	db	0
   273  002DCA  00                 	db	0
   274  002DCB  00                 	db	0
   275  002DCC  00                 	db	0
   276  002DCD  00                 	db	0
   277  002DCE  00                 	db	0
   278  002DCF  00                 	db	0
   279  002DD0  00                 	db	0
   280  002DD1  00                 	db	0
   281  002DD2  00                 	db	0
   282  002DD3  00                 	db	0
   283  002DD4  00                 	db	0
   284  002DD5  00                 	db	0
   285  002DD6  00                 	db	0
   286  002DD7  00                 	db	0
   287  002DD8  00                 	db	0
   288  002DD9  00                 	db	0
   289  002DDA  00                 	db	0
   290  002DDB  00                 	db	0
   291  002DDC  00                 	db	0
   292  002DDD  00                 	db	0
   293  002DDE  00                 	db	0
   294  002DDF  00                 	db	0
   295  002DE0  00                 	db	0
   296  002DE1  00                 	db	0
   297  002DE2  00                 	db	0
   298  002DE3  00                 	db	0
   299  002DE4  00                 	db	0
   300  002DE5  00                 	db	0
   301  002DE6  00                 	db	0
   302  002DE7  00                 	db	0
   303  002DE8  00                 	db	0
   304  002DE9  00                 	db	0
   305  002DEA  00                 	db	0
   306  002DEB  00                 	db	0
   307  002DEC  00                 	db	0
   308  002DED  00                 	db	0
   309  002DEE  00                 	db	0
   310  002DEF  00                 	db	0
   311  002DF0  00                 	db	0
   312  002DF1  00                 	db	0
   313  002DF2  00                 	db	0
   314  002DF3  00                 	db	0
   315  002DF4  00                 	db	0
   316  002DF5  00                 	db	0
   317  002DF6  65                 	db	101
   318  002DF7  76                 	db	118
   319  002DF8  65                 	db	101
   320  002DF9  6E                 	db	110
   321  002DFA  74                 	db	116
   322  002DFB  31                 	db	49
   323  002DFC  20                 	db	32
   324  002DFD  20                 	db	32
   325  002DFE  20                 	db	32
   326  002DFF  20                 	db	32
   327  002E00  20                 	db	32
   328  002E01  20                 	db	32
   329  002E02  20                 	db	32
   330  002E03  20                 	db	32
   331  002E04  20                 	db	32
   332  002E05  00                 	db	0
   333  002E06  00                 	db	0
   334  002E07  00                 	db	0
   335  002E08  65                 	db	101
   336  002E09  76                 	db	118
   337  002E0A  65                 	db	101
   338  002E0B  6E                 	db	110
   339  002E0C  74                 	db	116
   340  002E0D  32                 	db	50
   341  002E0E  20                 	db	32
   342  002E0F  20                 	db	32
   343  002E10  20                 	db	32
   344  002E11  20                 	db	32
   345  002E12  20                 	db	32
   346  002E13  20                 	db	32
   347  002E14  20                 	db	32
   348  002E15  20                 	db	32
   349  002E16  20                 	db	32
   350  002E17  00                 	db	0
   351  002E18  00                 	db	0
   352  002E19  00                 	db	0
   353  002E1A  65                 	db	101
   354  002E1B  76                 	db	118
   355  002E1C  65                 	db	101
   356  002E1D  6E                 	db	110
   357  002E1E  74                 	db	116
   358  002E1F  33                 	db	51
   359  002E20  20                 	db	32
   360  002E21  20                 	db	32
   361  002E22  20                 	db	32
   362  002E23  20                 	db	32
   363  002E24  20                 	db	32
   364  002E25  20                 	db	32
   365  002E26  20                 	db	32
   366  002E27  20                 	db	32
   367  002E28  20                 	db	32
   368  002E29  00                 	db	0
   369  002E2A  00                 	db	0
   370  002E2B  00                 	db	0
   371  002E2C  00                 	db	0
   372  002E2D  00                 	db	0
   373  002E2E  00                 	db	0
   374  002E2F  00                 	db	0
   375  002E30  00                 	db	0
   376  002E31  00                 	db	0
   377  002E32  00                 	db	0
   378  002E33  00                 	db	0
   379  002E34  00                 	db	0
   380  002E35  00                 	db	0
   381  002E36  00                 	db	0
   382  002E37  00                 	db	0
   383  002E38  00                 	db	0
   384  002E39  00                 	db	0
   385  002E3A  00                 	db	0
   386  002E3B  00                 	db	0
   387  002E3C  00                 	db	0
   388  002E3D  00                 	db	0
   389  002E3E  00                 	db	0
   390  002E3F  00                 	db	0
   391  002E40  00                 	db	0
   392  002E41  00                 	db	0
   393  002E42  00                 	db	0
   394  002E43  00                 	db	0
   395  002E44  00                 	db	0
   396  002E45  00                 	db	0
   397  002E46  00                 	db	0
   398  002E47  00                 	db	0
   399  002E48  00                 	db	0
   400  002E49  00                 	db	0
   401  002E4A  00                 	db	0
   402  002E4B  00                 	db	0
   403  002E4C  00                 	db	0
   404  002E4D  00                 	db	0
   405  002E4E  00                 	db	0
   406  002E4F  00                 	db	0
   407  002E50  00                 	db	0
   408  002E51  00                 	db	0
   409  002E52  00                 	db	0
   410  002E53  00                 	db	0
   411  002E54  00                 	db	0
   412  002E55  00                 	db	0
   413  002E56  00                 	db	0
   414  002E57  00                 	db	0
   415  002E58  00                 	db	0
   416  002E59  00                 	db	0
   417  002E5A  00                 	db	0
   418  002E5B  00                 	db	0
   419  002E5C  00                 	db	0
   420  002E5D  00                 	db	0
   421  002E5E  00                 	db	0
   422  002E5F  00                 	db	0
   423  002E60  00                 	db	0
   424  002E61  00                 	db	0
   425  002E62  00                 	db	0
   426  002E63  00                 	db	0
   427  002E64  00                 	db	0
   428  002E65  00                 	db	0
   429  002E66  00                 	db	0
   430  002E67  00                 	db	0
   431  002E68  00                 	db	0
   432  002E69  00                 	db	0
   433  002E6A  00                 	db	0
   434  002E6B  00                 	db	0
   435  002E6C  00                 	db	0
   436  002E6D  00                 	db	0
   437  002E6E  00                 	db	0
   438  002E6F  00                 	db	0
   439  002E70  00                 	db	0
   440  002E71  00                 	db	0
   441  002E72  00                 	db	0
   442  002E73  00                 	db	0
   443  002E74  00                 	db	0
   444  002E75  00                 	db	0
   445  002E76  00                 	db	0
   446  002E77  00                 	db	0
   447  002E78  00                 	db	0
   448  002E79  00                 	db	0
   449  002E7A  00                 	db	0
   450  002E7B  00                 	db	0
   451  002E7C  00                 	db	0
   452  002E7D  00                 	db	0
   453  002E7E  00                 	db	0
   454  002E7F  00                 	db	0
   455  002E80  00                 	db	0
   456  002E81  00                 	db	0
   457  002E82  00                 	db	0
   458  002E83  00                 	db	0
   459  002E84  00                 	db	0
   460  002E85  00                 	db	0
   461  002E86  00                 	db	0
   462  002E87  00                 	db	0
   463  002E88  00                 	db	0
   464  002E89  00                 	db	0
   465  002E8A  00                 	db	0
   466  002E8B  00                 	db	0
   467  002E8C  00                 	db	0
   468  002E8D  00                 	db	0
   469  002E8E  00                 	db	0
   470  002E8F  00                 	db	0
   471  002E90  00                 	db	0
   472  002E91  00                 	db	0
   473  002E92  00                 	db	0
   474  002E93  00                 	db	0
   475  002E94  00                 	db	0
   476  002E95  00                 	db	0
   477  002E96  00                 	db	0
   478  002E97  00                 	db	0
   479  002E98  00                 	db	0
   480  002E99  00                 	db	0
   481  002E9A  00                 	db	0
   482  002E9B  00                 	db	0
   483  002E9C  00                 	db	0
   484  002E9D  00                 	db	0
   485  002E9E  00                 	db	0
   486  002E9F  00                 	db	0
   487  002EA0  00                 	db	0
   488  002EA1  00                 	db	0
   489  002EA2  00                 	db	0
   490  002EA3  00                 	db	0
   491  002EA4  00                 	db	0
   492  002EA5  00                 	db	0
   493  002EA6  00                 	db	0
   494  002EA7  00                 	db	0
   495  002EA8  00                 	db	0
   496  002EA9  00                 	db	0
   497  002EAA  4D                 	db	77
   498  002EAB  69                 	db	105
   499  002EAC  63                 	db	99
   500  002EAD  72                 	db	114
   501  002EAE  6F                 	db	111
   502  002EAF  63                 	db	99
   503  002EB0  6F                 	db	111
   504  002EB1  6E                 	db	110
   505  002EB2  74                 	db	116
   506  002EB3  72                 	db	114
   507  002EB4  6F                 	db	111
   508  002EB5  6C                 	db	108
   509  002EB6  3A                 	db	58
   510  002EB7  20                 	db	32
   511  002EB8  20                 	db	32
   512  002EB9  00                 	db	0
   513  002EBA  00                 	db	0
   514  002EBB  00                 	db	0
   515  002EBC  43                 	db	67
   516  002EBD  6C                 	db	108
   517  002EBE  65                 	db	101
   518  002EBF  6D                 	db	109
   519  002EC0  65                 	db	101
   520  002EC1  6E                 	db	110
   521  002EC2  74                 	db	116
   522  002EC3  20                 	db	32
   523  002EC4  57                 	db	87
   524  002EC5  61                 	db	97
   525  002EC6  6E                 	db	110
   526  002EC7  20                 	db	32
   527  002EC8  20                 	db	32
   528  002EC9  20                 	db	32
   529  002ECA  20                 	db	32
   530  002ECB  00                 	db	0
   531  002ECC  00                 	db	0
   532  002ECD  00                 	db	0
   533  002ECE  43                 	db	67
   534  002ECF  69                 	db	105
   535  002ED0  72                 	db	114
   536  002ED1  63                 	db	99
   537  002ED2  75                 	db	117
   538  002ED3  69                 	db	105
   539  002ED4  74                 	db	116
   540  002ED5  73                 	db	115
   541  002ED6  3A                 	db	58
   542  002ED7  20                 	db	32
   543  002ED8  20                 	db	32
   544  002ED9  20                 	db	32
   545  002EDA  20                 	db	32
   546  002EDB  20                 	db	32
   547  002EDC  20                 	db	32
   548  002EDD  00                 	db	0
   549  002EDE  00                 	db	0
   550  002EDF  00                 	db	0
   551  002EE0  4A                 	db	74
   552  002EE1  75                 	db	117
   553  002EE2  73                 	db	115
   554  002EE3  74                 	db	116
   555  002EE4  69                 	db	105
   556  002EE5  6E                 	db	110
   557  002EE6  20                 	db	32
   558  002EE7  51                 	db	81
   559  002EE8  75                 	db	117
   560  002EE9  20                 	db	32
   561  002EEA  20                 	db	32
   562  002EEB  20                 	db	32
   563  002EEC  20                 	db	32
   564  002EED  20                 	db	32
   565  002EEE  20                 	db	32
   566  002EEF  00                 	db	0
   567  002EF0  00                 	db	0
   568  002EF1  00                 	db	0
   569  002EF2  45                 	db	69
   570  002EF3  6C                 	db	108
   571  002EF4  65                 	db	101
   572  002EF5  63                 	db	99
   573  002EF6  74                 	db	116
   574  002EF7  72                 	db	114
   575  002EF8  6F                 	db	111
   576  002EF9  6D                 	db	109
   577  002EFA  65                 	db	101
   578  002EFB  63                 	db	99
   579  002EFC  68                 	db	104
   580  002EFD  3A                 	db	58
   581  002EFE  20                 	db	32
   582  002EFF  20                 	db	32
   583  002F00  20                 	db	32
   584  002F01  00                 	db	0
   585  002F02  00                 	db	0
   586  002F03  00                 	db	0
   587  002F04  50                 	db	80
   588  002F05  65                 	db	101
   589  002F06  74                 	db	116
   590  002F07  65                 	db	101
   591  002F08  72                 	db	114
   592  002F09  20                 	db	32
   593  002F0A  46                 	db	70
   594  002F0B  65                 	db	101
   595  002F0C  6E                 	db	110
   596  002F0D  67                 	db	103
   597  002F0E  20                 	db	32
   598  002F0F  20                 	db	32
   599  002F10  20                 	db	32
   600  002F11  20                 	db	32
   601  002F12  20                 	db	32
   602  002F13  00                 	db	0
   603  002F14  00                 	db	0
   604  002F15  00                 	db	0
   605  002F16  00                 	db	0
   606  002F17  00                 	db	0
   607  002F18  00                 	db	0
   608  002F19  00                 	db	0
   609  002F1A  00                 	db	0
   610  002F1B  00                 	db	0
   611  002F1C  00                 	db	0
   612  002F1D  00                 	db	0
   613  002F1E  00                 	db	0
   614  002F1F  00                 	db	0
   615  002F20  00                 	db	0
   616  002F21  00                 	db	0
   617  002F22  00                 	db	0
   618  002F23  00                 	db	0
   619  002F24  00                 	db	0
   620  002F25  00                 	db	0
   621  002F26  00                 	db	0
   622  002F27  00                 	db	0
   623  002F28  00                 	db	0
   624  002F29  00                 	db	0
   625  002F2A  00                 	db	0
   626  002F2B  00                 	db	0
   627  002F2C  00                 	db	0
   628  002F2D  00                 	db	0
   629  002F2E  00                 	db	0
   630  002F2F  00                 	db	0
   631  002F30  00                 	db	0
   632  002F31  00                 	db	0
   633  002F32  00                 	db	0
   634  002F33  00                 	db	0
   635  002F34  00                 	db	0
   636  002F35  00                 	db	0
   637  002F36  00                 	db	0
   638  002F37  00                 	db	0
   639  002F38  00                 	db	0
   640  002F39  00                 	db	0
   641  002F3A  00                 	db	0
   642  002F3B  00                 	db	0
   643  002F3C  00                 	db	0
   644  002F3D  00                 	db	0
   645  002F3E  00                 	db	0
   646  002F3F  00                 	db	0
   647  002F40  00                 	db	0
   648  002F41  00                 	db	0
   649  002F42  00                 	db	0
   650  002F43  00                 	db	0
   651  002F44  00                 	db	0
   652  002F45  00                 	db	0
   653  002F46  00                 	db	0
   654  002F47  00                 	db	0
   655  002F48  00                 	db	0
   656  002F49  00                 	db	0
   657  002F4A  00                 	db	0
   658  002F4B  00                 	db	0
   659  002F4C  00                 	db	0
   660  002F4D  00                 	db	0
   661  002F4E  00                 	db	0
   662  002F4F  00                 	db	0
   663  002F50  00                 	db	0
   664  002F51  00                 	db	0
   665  002F52  00                 	db	0
   666  002F53  00                 	db	0
   667  002F54  00                 	db	0
   668  002F55  00                 	db	0
   669  002F56  00                 	db	0
   670  002F57  00                 	db	0
   671  002F58  00                 	db	0
   672  002F59  00                 	db	0
   673  002F5A  00                 	db	0
   674  002F5B  00                 	db	0
   675  002F5C  00                 	db	0
   676  002F5D  00                 	db	0
   677  002F5E  00                 	db	0
   678  002F5F  00                 	db	0
   679  002F60  00                 	db	0
   680  002F61  00                 	db	0
   681  002F62  00                 	db	0
   682  002F63  00                 	db	0
   683  002F64  00                 	db	0
   684  002F65  00                 	db	0
   685  002F66  00                 	db	0
   686  002F67  00                 	db	0
   687  002F68  00                 	db	0
   688  002F69  00                 	db	0
   689  002F6A  00                 	db	0
   690  002F6B  00                 	db	0
   691  002F6C  00                 	db	0
   692  002F6D  00                 	db	0
   693  002F6E  00                 	db	0
   694  002F6F  00                 	db	0
   695  002F70  00                 	db	0
   696  002F71  00                 	db	0
   697  002F72  00                 	db	0
   698  002F73  00                 	db	0
   699  002F74  00                 	db	0
   700  002F75  00                 	db	0
   701  002F76  00                 	db	0
   702  002F77  00                 	db	0
   703  002F78  00                 	db	0
   704  002F79  00                 	db	0
   705  002F7A  00                 	db	0
   706  002F7B  00                 	db	0
   707  002F7C  00                 	db	0
   708  002F7D  00                 	db	0
   709  002F7E  00                 	db	0
   710  002F7F  00                 	db	0
   711  002F80  00                 	db	0
   712  002F81  00                 	db	0
   713  002F82  00                 	db	0
   714  002F83  00                 	db	0
   715  002F84  00                 	db	0
   716  002F85  00                 	db	0
   717  002F86  00                 	db	0
   718  002F87  00                 	db	0
   719  002F88  00                 	db	0
   720  002F89  00                 	db	0
   721  002F8A  00                 	db	0
   722  002F8B  00                 	db	0
   723  002F8C  00                 	db	0
   724  002F8D  00                 	db	0
   725  002F8E  00                 	db	0
   726  002F8F  00                 	db	0
   727  002F90  00                 	db	0
   728  002F91  00                 	db	0
   729  002F92  00                 	db	0
   730  002F93  00                 	db	0
   731  002F94  00                 	db	0
   732  002F95  00                 	db	0
   733  002F96  00                 	db	0
   734  002F97  00                 	db	0
   735  002F98  00                 	db	0
   736  002F99  00                 	db	0
   737  002F9A  00                 	db	0
   738  002F9B  00                 	db	0
   739  002F9C  00                 	db	0
   740  002F9D  00                 	db	0
   741  002F9E  00                 	db	0
   742  002F9F  00                 	db	0
   743  002FA0  00                 	db	0
   744  002FA1  00                 	db	0
   745  002FA2  00                 	db	0
   746  002FA3  00                 	db	0
   747  002FA4  00                 	db	0
   748  002FA5  00                 	db	0
   749  002FA6  00                 	db	0
   750  002FA7  00                 	db	0
   751  002FA8  00                 	db	0
   752  002FA9  00                 	db	0
   753  002FAA  00                 	db	0
   754  002FAB  00                 	db	0
   755  002FAC  00                 	db	0
   756  002FAD  00                 	db	0
   757  002FAE  00                 	db	0
   758  002FAF  00                 	db	0
   759  002FB0  00                 	db	0
   760  002FB1  00                 	db	0
   761  002FB2  00                 	db	0
   762  002FB3  00                 	db	0
   763  002FB4  00                 	db	0
   764  002FB5  00                 	db	0
   765  002FB6  00                 	db	0
   766  002FB7  00                 	db	0
   767  002FB8  00                 	db	0
   768  002FB9  00                 	db	0
   769  002FBA  00                 	db	0
   770  002FBB  00                 	db	0
   771  002FBC  00                 	db	0
   772  002FBD  00                 	db	0
   773  002FBE  00                 	db	0
   774  002FBF  00                 	db	0
   775  002FC0  00                 	db	0
   776  002FC1  00                 	db	0
   777  002FC2  00                 	db	0
   778  002FC3  00                 	db	0
   779  002FC4  00                 	db	0
   780  002FC5  00                 	db	0
   781  002FC6  00                 	db	0
   782  002FC7  00                 	db	0
   783  002FC8  00                 	db	0
   784  002FC9  00                 	db	0
   785  002FCA  00                 	db	0
   786  002FCB  00                 	db	0
   787  002FCC  00                 	db	0
   788  002FCD  00                 	db	0
   789  002FCE  00                 	db	0
   790  002FCF  00                 	db	0
   791  002FD0  00                 	db	0
   792  002FD1  00                 	db	0
   793  002FD2  00                 	db	0
   794  002FD3  00                 	db	0
   795  002FD4  00                 	db	0
   796  002FD5  00                 	db	0
   797  002FD6  00                 	db	0
   798  002FD7  00                 	db	0
   799  002FD8  00                 	db	0
   800  002FD9  00                 	db	0
   801  002FDA  00                 	db	0
   802  002FDB  00                 	db	0
   803  002FDC  00                 	db	0
   804  002FDD  00                 	db	0
   805  002FDE  00                 	db	0
   806  002FDF  00                 	db	0
   807  002FE0  00                 	db	0
   808  002FE1  00                 	db	0
   809  002FE2  00                 	db	0
   810  002FE3  00                 	db	0
   811  002FE4  00                 	db	0
   812  002FE5  00                 	db	0
   813  002FE6  00                 	db	0
   814  002FE7  00                 	db	0
   815  002FE8  00                 	db	0
   816  002FE9  00                 	db	0
   817  002FEA  00                 	db	0
   818  002FEB  00                 	db	0
   819  002FEC  00                 	db	0
   820  002FED  00                 	db	0
   821  002FEE  00                 	db	0
   822  002FEF  00                 	db	0
   823  002FF0  00                 	db	0
   824  002FF1  00                 	db	0
   825  002FF2  00                 	db	0
   826  002FF3  00                 	db	0
   827  002FF4  00                 	db	0
   828  002FF5  00                 	db	0
   829  002FF6  00                 	db	0
   830  002FF7  00                 	db	0
   831  002FF8  00                 	db	0
   832  002FF9  00                 	db	0
   833  002FFA  00                 	db	0
   834  002FFB  00                 	db	0
   835  002FFC  00                 	db	0
   836  002FFD  00                 	db	0
   837  002FFE  00                 	db	0
   838  002FFF  00                 	db	0
   839  003000  00                 	db	0
   840  003001  00                 	db	0
   841  003002  00                 	db	0
   842  003003  00                 	db	0
   843  003004  00                 	db	0
   844  003005  00                 	db	0
   845  003006  00                 	db	0
   846  003007  00                 	db	0
   847  003008  00                 	db	0
   848  003009  00                 	db	0
   849  00300A  00                 	db	0
   850  00300B  00                 	db	0
   851  00300C  00                 	db	0
   852  00300D  00                 	db	0
   853  00300E  00                 	db	0
   854  00300F  00                 	db	0
   855  003010  00                 	db	0
   856  003011  00                 	db	0
   857                           
   858                           	psect	idataBANK0
   859  003DFC                     __pidataBANK0:
   860                           	opt stack 0
   861                           
   862                           ;initializer for _IR_THRESHOLD_HI
   863  003DFC  0028               	dw	40
   864                           
   865                           ;initializer for _IR_THRESHOLD_LOW
   866  003DFE  0023               	dw	35
   867                           
   868                           ;initializer for _sortIndex
   869  003E00  0001               	dw	1
   870                           
   871                           ;initializer for _nstate
   872  003E02  72                 	db	114
   873                           
   874                           ;initializer for _state
   875  003E03  72                 	db	114
   876                           
   877                           ;initializer for _creditIndex
   878  003E04  0001               	dw	1
   879                           
   880                           ;initializer for _creditSize
   881  003E06  0005               	dw	5
   882                           
   883                           ;initializer for _endIndex
   884  003E08  0001               	dw	1
   885                           
   886                           ;initializer for _events
   887  003E0A  0002               	dw	2
   888                           
   889                           ;initializer for _logIndex
   890  003E0C  0001               	dw	1
   891                           
   892                           ;initializer for _menuIndex
   893  003E0E  0001               	dw	1
   894                           
   895                           ;initializer for _menuSize
   896  003E10  0003               	dw	3
   897                           
   898                           	psect	mediumconst
   899  00FE36                     __pmediumconst:
   900                           	opt stack 0
   901  00FE36  00                 	db	0
   902  00FE37                     _keys:
   903                           	opt stack 0
   904  00FE37  31                 	db	49
   905  00FE38  32                 	db	50
   906  00FE39  33                 	db	51
   907  00FE3A  41                 	db	65
   908  00FE3B  34                 	db	52
   909  00FE3C  35                 	db	53
   910  00FE3D  36                 	db	54
   911  00FE3E  42                 	db	66
   912  00FE3F  37                 	db	55
   913  00FE40  38                 	db	56
   914  00FE41  39                 	db	57
   915  00FE42  43                 	db	67
   916  00FE43  2A                 	db	42
   917  00FE44  30                 	db	48
   918  00FE45  23                 	db	35
   919  00FE46  44                 	db	68
   920  00FE47  00                 	db	0
   921  00FE48                     __end_of_keys:
   922                           	opt stack 0
   923  00FE48                     _dpowers:
   924                           	opt stack 0
   925  00FE48  0001               	dw	1
   926  00FE4A  000A               	dw	10
   927  00FE4C  0064               	dw	100
   928  00FE4E  03E8               	dw	1000
   929  00FE50  2710               	dw	10000
   930  00FE52                     __end_of_dpowers:
   931                           	opt stack 0
   932  00FE52                     _hexpowers:
   933                           	opt stack 0
   934  00FE52  0001               	dw	1
   935  00FE54  0010               	dw	16
   936  00FE56  0100               	dw	256
   937  00FE58  1000               	dw	4096
   938  00FE5A                     __end_of_hexpowers:
   939                           	opt stack 0
   940  00FE5A                     _manualDateTime:
   941                           	opt stack 0
   942  00FE5A  00                 	db	0
   943  00FE5B  33                 	db	51
   944  00FE5C  14                 	db	20
   945  00FE5D  03                 	db	3
   946  00FE5E  28                 	db	40
   947  00FE5F  02                 	db	2
   948  00FE60  17                 	db	23
   949  00FE61                     __end_of_manualDateTime:
   950                           	opt stack 0
   951  00FE61                     STR_3:
   952  00FE61  25                 	db	37
   953  00FE62  64                 	db	100	;'d'
   954  00FE63  3A                 	db	58	;':'
   955  00FE64  25                 	db	37
   956  00FE65  30                 	db	48	;'0'
   957  00FE66  32                 	db	50	;'2'
   958  00FE67  64                 	db	100	;'d'
   959  00FE68  20                 	db	32
   960  00FE69  65                 	db	101	;'e'
   961  00FE6A  6E                 	db	110	;'n'
   962  00FE6B  3A                 	db	58	;':'
   963  00FE6C  25                 	db	37
   964  00FE6D  30                 	db	48	;'0'
   965  00FE6E  32                 	db	50	;'2'
   966  00FE6F  64                 	db	100	;'d'
   967  00FE70  20                 	db	32
   968  00FE71  65                 	db	101	;'e'
   969  00FE72  63                 	db	99	;'c'
   970  00FE73  3A                 	db	58	;':'
   971  00FE74  25                 	db	37
   972  00FE75  30                 	db	48	;'0'
   973  00FE76  32                 	db	50	;'2'
   974  00FE77  64                 	db	100	;'d'
   975  00FE78  20                 	db	32
   976  00FE79  00                 	db	0
   977  00FE7A                     STR_14:
   978  00FE7A  42                 	db	66	;'B'
   979  00FE7B  3A                 	db	58	;':'
   980  00FE7C  25                 	db	37
   981  00FE7D  64                 	db	100	;'d'
   982  00FE7E  25                 	db	37
   983  00FE7F  64                 	db	100	;'d'
   984  00FE80  25                 	db	37
   985  00FE81  64                 	db	100	;'d'
   986  00FE82  25                 	db	37
   987  00FE83  64                 	db	100	;'d'
   988  00FE84  25                 	db	37
   989  00FE85  64                 	db	100	;'d'
   990  00FE86  25                 	db	37
   991  00FE87  64                 	db	100	;'d'
   992  00FE88  25                 	db	37
   993  00FE89  64                 	db	100	;'d'
   994  00FE8A  25                 	db	37
   995  00FE8B  64                 	db	100	;'d'
   996  00FE8C  20                 	db	32
   997  00FE8D  4D                 	db	77	;'M'
   998  00FE8E  3A                 	db	58	;':'
   999  00FE8F  25                 	db	37
  1000  00FE90  64                 	db	100	;'d'
  1001  00FE91  00                 	db	0
  1002  00FE92                     STR_1:
  1003  00FE92  25                 	db	37
  1004  00FE93  30                 	db	48	;'0'
  1005  00FE94  32                 	db	50	;'2'
  1006  00FE95  78                 	db	120	;'x'
  1007  00FE96  2F                 	db	47
  1008  00FE97  25                 	db	37
  1009  00FE98  30                 	db	48	;'0'
  1010  00FE99  32                 	db	50	;'2'
  1011  00FE9A  78                 	db	120	;'x'
  1012  00FE9B  2F                 	db	47
  1013  00FE9C  25                 	db	37
  1014  00FE9D  30                 	db	48	;'0'
  1015  00FE9E  32                 	db	50	;'2'
  1016  00FE9F  78                 	db	120	;'x'
  1017  00FEA0  20                 	db	32
  1018  00FEA1  50                 	db	80	;'P'
  1019  00FEA2  55                 	db	85	;'U'
  1020  00FEA3  53                 	db	83	;'S'
  1021  00FEA4  48                 	db	72	;'H'
  1022  00FEA5  20                 	db	32
  1023  00FEA6  54                 	db	84	;'T'
  1024  00FEA7  4F                 	db	79	;'O'
  1025  00FEA8  00                 	db	0
  1026  00FEA9                     STR_2:
  1027  00FEA9  25                 	db	37
  1028  00FEAA  30                 	db	48	;'0'
  1029  00FEAB  32                 	db	50	;'2'
  1030  00FEAC  78                 	db	120	;'x'
  1031  00FEAD  3A                 	db	58	;':'
  1032  00FEAE  25                 	db	37
  1033  00FEAF  30                 	db	48	;'0'
  1034  00FEB0  32                 	db	50	;'2'
  1035  00FEB1  78                 	db	120	;'x'
  1036  00FEB2  3A                 	db	58	;':'
  1037  00FEB3  25                 	db	37
  1038  00FEB4  30                 	db	48	;'0'
  1039  00FEB5  32                 	db	50	;'2'
  1040  00FEB6  78                 	db	120	;'x'
  1041  00FEB7  20                 	db	32
  1042  00FEB8  20                 	db	32
  1043  00FEB9  20                 	db	32
  1044  00FEBA  53                 	db	83	;'S'
  1045  00FEBB  54                 	db	84	;'T'
  1046  00FEBC  41                 	db	65	;'A'
  1047  00FEBD  52                 	db	82	;'R'
  1048  00FEBE  54                 	db	84	;'T'
  1049  00FEBF  00                 	db	0
  1050  00FEC0                     STR_18:
  1051  00FEC0  72                 	db	114	;'r'
  1052  00FEC1  75                 	db	117	;'u'
  1053  00FEC2  6E                 	db	110	;'n'
  1054  00FEC3  20                 	db	32
  1055  00FEC4  74                 	db	116	;'t'
  1056  00FEC5  69                 	db	105	;'i'
  1057  00FEC6  6D                 	db	109	;'m'
  1058  00FEC7  65                 	db	101	;'e'
  1059  00FEC8  3A                 	db	58	;':'
  1060  00FEC9  20                 	db	32
  1061  00FECA  25                 	db	37
  1062  00FECB  30                 	db	48	;'0'
  1063  00FECC  31                 	db	49	;'1'
  1064  00FECD  64                 	db	100	;'d'
  1065  00FECE  3A                 	db	58	;':'
  1066  00FECF  25                 	db	37
  1067  00FED0  30                 	db	48	;'0'
  1068  00FED1  32                 	db	50	;'2'
  1069  00FED2  64                 	db	100	;'d'
  1070  00FED3  20                 	db	32
  1071  00FED4  00                 	db	0
  1072  00FED5  00                 	db	0
  1073  00FED6                     STR_19:
  1074  00FED6  65                 	db	101	;'e'
  1075  00FED7  6E                 	db	110	;'n'
  1076  00FED8  3A                 	db	58	;':'
  1077  00FED9  25                 	db	37
  1078  00FEDA  30                 	db	48	;'0'
  1079  00FEDB  32                 	db	50	;'2'
  1080  00FEDC  64                 	db	100	;'d'
  1081  00FEDD  20                 	db	32
  1082  00FEDE  65                 	db	101	;'e'
  1083  00FEDF  63                 	db	99	;'c'
  1084  00FEE0  3A                 	db	58	;':'
  1085  00FEE1  25                 	db	37
  1086  00FEE2  30                 	db	48	;'0'
  1087  00FEE3  32                 	db	50	;'2'
  1088  00FEE4  64                 	db	100	;'d'
  1089  00FEE5  20                 	db	32
  1090  00FEE6  20                 	db	32
  1091  00FEE7  20                 	db	32
  1092  00FEE8  20                 	db	32
  1093  00FEE9  00                 	db	0
  1094  00FEEA                     STR_20:
  1095  00FEEA  79                 	db	121	;'y'
  1096  00FEEB  6E                 	db	110	;'n'
  1097  00FEEC  3A                 	db	58	;':'
  1098  00FEED  25                 	db	37
  1099  00FEEE  30                 	db	48	;'0'
  1100  00FEEF  32                 	db	50	;'2'
  1101  00FEF0  64                 	db	100	;'d'
  1102  00FEF1  20                 	db	32
  1103  00FEF2  79                 	db	121	;'y'
  1104  00FEF3  63                 	db	99	;'c'
  1105  00FEF4  3A                 	db	58	;':'
  1106  00FEF5  25                 	db	37
  1107  00FEF6  30                 	db	48	;'0'
  1108  00FEF7  32                 	db	50	;'2'
  1109  00FEF8  64                 	db	100	;'d'
  1110  00FEF9  20                 	db	32
  1111  00FEFA  20                 	db	32
  1112  00FEFB  20                 	db	32
  1113  00FEFC  20                 	db	32
  1114  00FEFD  00                 	db	0
  1115  00FEFE                     STR_17:
  1116  00FEFE  62                 	db	98	;'b'
  1117  00FEFF  6F                 	db	111	;'o'
  1118  00FF00  74                 	db	116	;'t'
  1119  00FF01  74                 	db	116	;'t'
  1120  00FF02  6C                 	db	108	;'l'
  1121  00FF03  65                 	db	101	;'e'
  1122  00FF04  73                 	db	115	;'s'
  1123  00FF05  3A                 	db	58	;':'
  1124  00FF06  20                 	db	32
  1125  00FF07  25                 	db	37
  1126  00FF08  30                 	db	48	;'0'
  1127  00FF09  32                 	db	50	;'2'
  1128  00FF0A  64                 	db	100	;'d'
  1129  00FF0B  20                 	db	32
  1130  00FF0C  20                 	db	32
  1131  00FF0D  20                 	db	32
  1132  00FF0E  20                 	db	32
  1133  00FF0F  00                 	db	0
  1134  00FF10  00                 	db	0
  1135  00FF11                     STR_8:
  1136  00FF11  50                 	db	80	;'P'
  1137  00FF12  32                 	db	50	;'2'
  1138  00FF13  5B                 	db	91	;'['
  1139  00FF14  30                 	db	48	;'0'
  1140  00FF15  2D                 	db	45
  1141  00FF16  31                 	db	49	;'1'
  1142  00FF17  5D                 	db	93	;']'
  1143  00FF18  3A                 	db	58	;':'
  1144  00FF19  25                 	db	37
  1145  00FF1A  64                 	db	100	;'d'
  1146  00FF1B  2C                 	db	44
  1147  00FF1C  25                 	db	37
  1148  00FF1D  64                 	db	100	;'d'
  1149  00FF1E  20                 	db	32
  1150  00FF1F  4D                 	db	77	;'M'
  1151  00FF20  3A                 	db	58	;':'
  1152  00FF21  25                 	db	37
  1153  00FF22  64                 	db	100	;'d'
  1154  00FF23  00                 	db	0
  1155  00FF24                     STR_11:
  1156  00FF24  50                 	db	80	;'P'
  1157  00FF25  49                 	db	73	;'I'
  1158  00FF26  52                 	db	82	;'R'
  1159  00FF27  3A                 	db	58	;':'
  1160  00FF28  25                 	db	37
  1161  00FF29  64                 	db	100	;'d'
  1162  00FF2A  25                 	db	37
  1163  00FF2B  64                 	db	100	;'d'
  1164  00FF2C  2C                 	db	44
  1165  00FF2D  25                 	db	37
  1166  00FF2E  30                 	db	48	;'0'
  1167  00FF2F  34                 	db	52	;'4'
  1168  00FF30  64                 	db	100	;'d'
  1169  00FF31  2C                 	db	44
  1170  00FF32  25                 	db	37
  1171  00FF33  30                 	db	48	;'0'
  1172  00FF34  34                 	db	52	;'4'
  1173  00FF35  64                 	db	100	;'d'
  1174  00FF36  00                 	db	0
  1175  00FF37                     STR_12:
  1176  00FF37  44                 	db	68	;'D'
  1177  00FF38  49                 	db	73	;'I'
  1178  00FF39  53                 	db	83	;'S'
  1179  00FF3A  54                 	db	84	;'T'
  1180  00FF3B  5B                 	db	91	;'['
  1181  00FF3C  30                 	db	48	;'0'
  1182  00FF3D  5D                 	db	93	;']'
  1183  00FF3E  3A                 	db	58	;':'
  1184  00FF3F  25                 	db	37
  1185  00FF40  30                 	db	48	;'0'
  1186  00FF41  34                 	db	52	;'4'
  1187  00FF42  64                 	db	100	;'d'
  1188  00FF43  20                 	db	32
  1189  00FF44  4D                 	db	77	;'M'
  1190  00FF45  3A                 	db	58	;':'
  1191  00FF46  25                 	db	37
  1192  00FF47  64                 	db	100	;'d'
  1193  00FF48  00                 	db	0
  1194  00FF49                     STR_29:
  1195  00FF49  30                 	db	48	;'0'
  1196  00FF4A  31                 	db	49	;'1'
  1197  00FF4B  32                 	db	50	;'2'
  1198  00FF4C  33                 	db	51	;'3'
  1199  00FF4D  34                 	db	52	;'4'
  1200  00FF4E  35                 	db	53	;'5'
  1201  00FF4F  36                 	db	54	;'6'
  1202  00FF50  37                 	db	55	;'7'
  1203  00FF51  38                 	db	56	;'8'
  1204  00FF52  39                 	db	57	;'9'
  1205  00FF53  61                 	db	97	;'a'
  1206  00FF54  62                 	db	98	;'b'
  1207  00FF55  63                 	db	99	;'c'
  1208  00FF56  64                 	db	100	;'d'
  1209  00FF57  65                 	db	101	;'e'
  1210  00FF58  66                 	db	102	;'f'
  1211  00FF59  00                 	db	0
  1212  00FF5A                     STR_7:
  1213  00FF5A  50                 	db	80	;'P'
  1214  00FF5B  31                 	db	49	;'1'
  1215  00FF5C  5B                 	db	91	;'['
  1216  00FF5D  30                 	db	48	;'0'
  1217  00FF5E  2D                 	db	45
  1218  00FF5F  32                 	db	50	;'2'
  1219  00FF60  5D                 	db	93	;']'
  1220  00FF61  3A                 	db	58	;':'
  1221  00FF62  25                 	db	37
  1222  00FF63  64                 	db	100	;'d'
  1223  00FF64  2C                 	db	44
  1224  00FF65  25                 	db	37
  1225  00FF66  64                 	db	100	;'d'
  1226  00FF67  2C                 	db	44
  1227  00FF68  25                 	db	37
  1228  00FF69  64                 	db	100	;'d'
  1229  00FF6A  00                 	db	0
  1230  00FF6B                     STR_10:
  1231  00FF6B  49                 	db	73	;'I'
  1232  00FF6C  52                 	db	82	;'R'
  1233  00FF6D  32                 	db	50	;'2'
  1234  00FF6E  5B                 	db	91	;'['
  1235  00FF6F  30                 	db	48	;'0'
  1236  00FF70  5D                 	db	93	;']'
  1237  00FF71  3A                 	db	58	;':'
  1238  00FF72  25                 	db	37
  1239  00FF73  30                 	db	48	;'0'
  1240  00FF74  34                 	db	52	;'4'
  1241  00FF75  64                 	db	100	;'d'
  1242  00FF76  4D                 	db	77	;'M'
  1243  00FF77  3A                 	db	58	;':'
  1244  00FF78  25                 	db	37
  1245  00FF79  64                 	db	100	;'d'
  1246  00FF7A  00                 	db	0
  1247  00FF7B                     STR_4:
  1248  00FF7B  79                 	db	121	;'y'
  1249  00FF7C  6E                 	db	110	;'n'
  1250  00FF7D  3A                 	db	58	;':'
  1251  00FF7E  25                 	db	37
  1252  00FF7F  30                 	db	48	;'0'
  1253  00FF80  32                 	db	50	;'2'
  1254  00FF81  64                 	db	100	;'d'
  1255  00FF82  20                 	db	32
  1256  00FF83  79                 	db	121	;'y'
  1257  00FF84  63                 	db	99	;'c'
  1258  00FF85  3A                 	db	58	;':'
  1259  00FF86  25                 	db	37
  1260  00FF87  30                 	db	48	;'0'
  1261  00FF88  32                 	db	50	;'2'
  1262  00FF89  64                 	db	100	;'d'
  1263  00FF8A  00                 	db	0
  1264  00FF8B                     STR_16:
  1265  00FF8B  45                 	db	69	;'E'
  1266  00FF8C  4D                 	db	77	;'M'
  1267  00FF8D  45                 	db	69	;'E'
  1268  00FF8E  52                 	db	82	;'R'
  1269  00FF8F  47                 	db	71	;'G'
  1270  00FF90  45                 	db	69	;'E'
  1271  00FF91  4E                 	db	78	;'N'
  1272  00FF92  43                 	db	67	;'C'
  1273  00FF93  59                 	db	89	;'Y'
  1274  00FF94  20                 	db	32
  1275  00FF95  53                 	db	83	;'S'
  1276  00FF96  54                 	db	84	;'T'
  1277  00FF97  4F                 	db	79	;'O'
  1278  00FF98  50                 	db	80	;'P'
  1279  00FF99  00                 	db	0
  1280  00FF9A                     STR_26:
  1281  00FF9A  6D                 	db	109	;'m'
  1282  00FF9B  65                 	db	101	;'e'
  1283  00FF9C  6E                 	db	110	;'n'
  1284  00FF9D  75                 	db	117	;'u'
  1285  00FF9E  20                 	db	32
  1286  00FF9F  73                 	db	115	;'s'
  1287  00FFA0  65                 	db	101	;'e'
  1288  00FFA1  6C                 	db	108	;'l'
  1289  00FFA2  65                 	db	101	;'e'
  1290  00FFA3  63                 	db	99	;'c'
  1291  00FFA4  74                 	db	116	;'t'
  1292  00FFA5  69                 	db	105	;'i'
  1293  00FFA6  6F                 	db	111	;'o'
  1294  00FFA7  6E                 	db	110	;'n'
  1295  00FFA8  00                 	db	0
  1296  00FFA9                     STR_6:
  1297  00FFA9  44                 	db	68	;'D'
  1298  00FFAA  43                 	db	67	;'C'
  1299  00FFAB  3A                 	db	58	;':'
  1300  00FFAC  25                 	db	37
  1301  00FFAD  64                 	db	100	;'d'
  1302  00FFAE  20                 	db	32
  1303  00FFAF  4D                 	db	77	;'M'
  1304  00FFB0  45                 	db	69	;'E'
  1305  00FFB1  41                 	db	65	;'A'
  1306  00FFB2  53                 	db	83	;'S'
  1307  00FFB3  3A                 	db	58	;':'
  1308  00FFB4  25                 	db	37
  1309  00FFB5  64                 	db	100	;'d'
  1310  00FFB6  00                 	db	0
  1311  00FFB7                     STR_27:
  1312  00FFB7  6E                 	db	110	;'n'
  1313  00FFB8  6F                 	db	111	;'o'
  1314  00FFB9  20                 	db	32
  1315  00FFBA  70                 	db	112	;'p'
  1316  00FFBB  61                 	db	97	;'a'
  1317  00FFBC  67                 	db	103	;'g'
  1318  00FFBD  65                 	db	101	;'e'
  1319  00FFBE  20                 	db	32
  1320  00FFBF  66                 	db	102	;'f'
  1321  00FFC0  6F                 	db	111	;'o'
  1322  00FFC1  75                 	db	117	;'u'
  1323  00FFC2  6E                 	db	110	;'n'
  1324  00FFC3  64                 	db	100	;'d'
  1325  00FFC4  00                 	db	0
  1326  00FFC5                     STR_5:
  1327  00FFC5  52                 	db	82	;'R'
  1328  00FFC6  43                 	db	67	;'C'
  1329  00FFC7  3A                 	db	58	;':'
  1330  00FFC8  25                 	db	37
  1331  00FFC9  64                 	db	100	;'d'
  1332  00FFCA  20                 	db	32
  1333  00FFCB  4D                 	db	77	;'M'
  1334  00FFCC  43                 	db	67	;'C'
  1335  00FFCD  3A                 	db	58	;':'
  1336  00FFCE  25                 	db	37
  1337  00FFCF  64                 	db	100	;'d'
  1338  00FFD0  00                 	db	0
  1339  00FFD1                     STR_9:
  1340  00FFD1  49                 	db	73	;'I'
  1341  00FFD2  52                 	db	82	;'R'
  1342  00FFD3  31                 	db	49	;'1'
  1343  00FFD4  5B                 	db	91	;'['
  1344  00FFD5  30                 	db	48	;'0'
  1345  00FFD6  5D                 	db	93	;']'
  1346  00FFD7  3A                 	db	58	;':'
  1347  00FFD8  25                 	db	37
  1348  00FFD9  30                 	db	48	;'0'
  1349  00FFDA  34                 	db	52	;'4'
  1350  00FFDB  64                 	db	100	;'d'
  1351  00FFDC  00                 	db	0
  1352  00FFDD                     STR_25:
  1353  00FFDD  69                 	db	105	;'i'
  1354  00FFDE  6E                 	db	110	;'n'
  1355  00FFDF  76                 	db	118	;'v'
  1356  00FFE0  61                 	db	97	;'a'
  1357  00FFE1  6C                 	db	108	;'l'
  1358  00FFE2  69                 	db	105	;'i'
  1359  00FFE3  64                 	db	100	;'d'
  1360  00FFE4  00                 	db	0
  1361  00FFE5                     STR_28:
  1362  00FFE5  28                 	db	40
  1363  00FFE6  6E                 	db	110	;'n'
  1364  00FFE7  75                 	db	117	;'u'
  1365  00FFE8  6C                 	db	108	;'l'
  1366  00FFE9  6C                 	db	108	;'l'
  1367  00FFEA  29                 	db	41
  1368  00FFEB  00                 	db	0
  1369  00FFEC                     STR_13:
  1370  00FFEC  41                 	db	65	;'A'
  1371  00FFED  3A                 	db	58	;':'
  1372  00FFEE  25                 	db	37
  1373  00FFEF  30                 	db	48	;'0'
  1374  00FFF0  37                 	db	55	;'7'
  1375  00FFF1  64                 	db	100	;'d'
  1376  00FFF2  00                 	db	0
  1377  00FFF3                     STR_15:
  1378  00FFF3  45                 	db	69	;'E'
  1379  00FFF4  52                 	db	82	;'R'
  1380  00FFF5  52                 	db	82	;'R'
  1381  00FFF6  4F                 	db	79	;'O'
  1382  00FFF7  52                 	db	82	;'R'
  1383  00FFF8  00                 	db	0
  1384  00FFF9                     STR_21:
  1385  00FFF9  25                 	db	37
  1386  00FFFA  73                 	db	115	;'s'
  1387  00FFFB  25                 	db	37
  1388  00FFFC  63                 	db	99	;'c'
  1389  00FFFD  00                 	db	0
  1390  0000                     
  1391                           ; #config settings
  1392  00FFFE  00                 	db	0	; dummy byte at the end
  1393  0000                     
  1394                           	psect	nvCOMRAM
  1395  000075                     __pnvCOMRAM:
  1396                           	opt stack 0
  1397  000075                     _discretize:
  1398                           	opt stack 0
  1399  000075                     	ds	2
  1400  000077                     _measure:
  1401                           	opt stack 0
  1402  000077                     	ds	2
  1403  000079                     _release:
  1404                           	opt stack 0
  1405  000079                     	ds	2
  1406  0000                     _ADCON0	set	4034
  1407  0000                     _ADCON0bits	set	4034
  1408  0000                     _ADCON1	set	4033
  1409  0000                     _ADRESL	set	4035
  1410  0000                     _CMCONbits	set	4020
  1411  0000                     _CVRCON	set	4021
  1412  0000                     _INTCONbits	set	4082
  1413  0000                     _LATA	set	3977
  1414  0000                     _LATB	set	3978
  1415  0000                     _LATC	set	3979
  1416  0000                     _LATD	set	3980
  1417  0000                     _LATDbits	set	3980
  1418  0000                     _LATE	set	3981
  1419  0000                     _PORTB	set	3969
  1420  0000                     _SSPADD	set	4040
  1421  0000                     _SSPBUF	set	4041
  1422  0000                     _SSPCON1	set	4038
  1423  0000                     _SSPCON2	set	4037
  1424  0000                     _SSPSTAT	set	4039
  1425  0000                     _TRISA	set	3986
  1426  0000                     _TRISB	set	3987
  1427  0000                     _TRISC	set	3988
  1428  0000                     _TRISD	set	3989
  1429  0000                     _TRISE	set	3990
  1430  0000                     _ADRESH	set	4036
  1431  0000                     _ACKDT	set	32301
  1432  0000                     _ACKEN	set	32300
  1433  0000                     _ADFM	set	32263
  1434  0000                     _ADON	set	32272
  1435  0000                     _INT1IE	set	32643
  1436  0000                     _INT1IF	set	32640
  1437  0000                     _PEN	set	32298
  1438  0000                     _RCEN	set	32299
  1439  0000                     _RSEN	set	32297
  1440  0000                     _SEN	set	32296
  1441  0000                     _TRISC3	set	31907
  1442  0000                     _TRISC4	set	31908
  1443  0000                     _nRBPU	set	32655
  1444                           
  1445                           	psect	cinit
  1446  0037CC                     __pcinit:
  1447                           	opt stack 0
  1448  0037CC                     start_initialization:
  1449                           	opt stack 0
  1450  0037CC                     __initialization:
  1451                           	opt stack 0
  1452                           
  1453                           ; Initialize objects allocated to BIGRAM (720 bytes)
  1454                           ; load TBLPTR registers with __pidataBIGRAM
  1455  0037CC  0E42               	movlw	low __pidataBIGRAM
  1456  0037CE  6EF6               	movwf	tblptrl,c
  1457  0037D0  0E2D               	movlw	high __pidataBIGRAM
  1458  0037D2  6EF7               	movwf	tblptrh,c
  1459  0037D4  0E00               	movlw	low (__pidataBIGRAM shr (0+16))
  1460  0037D6  6EF8               	movwf	tblptru,c
  1461  0037D8  EE01  F08A         	lfsr	0,__pdataBIGRAM
  1462  0037DC  EE12 F0D0          	lfsr	1,720
  1463  0037E0                     copy_data0:
  1464  0037E0  0009               	tblrd		*+
  1465  0037E2  CFF5 FFEE          	movff	tablat,postinc0
  1466  0037E6  50E5               	movf	postdec1,w,c
  1467  0037E8  50E1               	movf	fsr1l,w,c
  1468  0037EA  E1FA               	bnz	copy_data0
  1469  0037EC  50E2               	movf	fsr1h,w,c
  1470  0037EE  E1F8               	bnz	copy_data0
  1471                           
  1472                           ; Initialize objects allocated to BANK0 (22 bytes)
  1473                           ; load TBLPTR registers with __pidataBANK0
  1474  0037F0  0EFC               	movlw	low __pidataBANK0
  1475  0037F2  6EF6               	movwf	tblptrl,c
  1476  0037F4  0E3D               	movlw	high __pidataBANK0
  1477  0037F6  6EF7               	movwf	tblptrh,c
  1478  0037F8  0E00               	movlw	low (__pidataBANK0 shr (0+16))
  1479  0037FA  6EF8               	movwf	tblptru,c
  1480  0037FC  EE00  F0D8         	lfsr	0,__pdataBANK0
  1481  003800  EE10 F016          	lfsr	1,22
  1482  003804                     copy_data1:
  1483  003804  0009               	tblrd		*+
  1484  003806  CFF5 FFEE          	movff	tablat,postinc0
  1485  00380A  50E5               	movf	postdec1,w,c
  1486  00380C  50E1               	movf	fsr1l,w,c
  1487  00380E  E1FA               	bnz	copy_data1
  1488                           
  1489                           ; Initialize objects allocated to COMRAM (12 bytes)
  1490                           ; load TBLPTR registers with __pidataCOMRAM
  1491  003810  0E4C               	movlw	low __pidataCOMRAM
  1492  003812  6EF6               	movwf	tblptrl,c
  1493  003814  0E3E               	movlw	high __pidataCOMRAM
  1494  003816  6EF7               	movwf	tblptrh,c
  1495  003818  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
  1496  00381A  6EF8               	movwf	tblptru,c
  1497  00381C  EE00  F069         	lfsr	0,__pdataCOMRAM
  1498  003820  EE10 F00C          	lfsr	1,12
  1499  003824                     copy_data2:
  1500  003824  0009               	tblrd		*+
  1501  003826  CFF5 FFEE          	movff	tablat,postinc0
  1502  00382A  50E5               	movf	postdec1,w,c
  1503  00382C  50E1               	movf	fsr1l,w,c
  1504  00382E  E1FA               	bnz	copy_data2
  1505                           
  1506                           ; Clear objects allocated to BANK1 (134 bytes)
  1507  003830  EE01  F000         	lfsr	0,__pbssBANK1
  1508  003834  0E86               	movlw	134
  1509  003836                     clear_0:
  1510  003836  6AEE               	clrf	postinc0,c
  1511  003838  06E8               	decf	wreg,f,c
  1512  00383A  E1FD               	bnz	clear_0
  1513                           
  1514                           ; Clear objects allocated to BANK0 (18 bytes)
  1515  00383C  EE00  F0EE         	lfsr	0,__pbssBANK0
  1516  003840  0E12               	movlw	18
  1517  003842                     clear_1:
  1518  003842  6AEE               	clrf	postinc0,c
  1519  003844  06E8               	decf	wreg,f,c
  1520  003846  E1FD               	bnz	clear_1
  1521                           
  1522                           ; Clear objects allocated to COMRAM (43 bytes)
  1523  003848  EE00  F03E         	lfsr	0,__pbssCOMRAM
  1524  00384C  0E2B               	movlw	43
  1525  00384E                     clear_2:
  1526  00384E  6AEE               	clrf	postinc0,c
  1527  003850  06E8               	decf	wreg,f,c
  1528  003852  E1FD               	bnz	clear_2
  1529  003854                     end_of_initialization:
  1530                           	opt stack 0
  1531  003854                     __end_of__initialization:
  1532                           	opt stack 0
  1533  003854  907B               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1534  003856  927B               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1535  003858  0100               	movlb	0
  1536  00385A  EF42  F01B         	goto	_main	;jump to C main() function
  1537                           tblptru	equ	0xFF8
  1538                           tblptrh	equ	0xFF7
  1539                           tblptrl	equ	0xFF6
  1540                           tablat	equ	0xFF5
  1541                           postinc0	equ	0xFEE
  1542                           wreg	equ	0xFE8
  1543                           postdec1	equ	0xFE5
  1544                           fsr1h	equ	0xFE2
  1545                           fsr1l	equ	0xFE1
  1546                           
  1547                           	psect	bssCOMRAM
  1548  00003E                     __pbssCOMRAM:
  1549                           	opt stack 0
  1550  00003E                     _IR1:
  1551                           	opt stack 0
  1552  00003E                     	ds	10
  1553  000048                     _PROX1:
  1554                           	opt stack 0
  1555  000048                     	ds	10
  1556  000052                     _PROX2:
  1557                           	opt stack 0
  1558  000052                     	ds	10
  1559  00005C                     _time:
  1560                           	opt stack 0
  1561  00005C                     	ds	7
  1562  000063                     _runTime:
  1563                           	opt stack 0
  1564  000063                     	ds	2
  1565  000065                     _sorted_bottles:
  1566                           	opt stack 0
  1567  000065                     	ds	2
  1568  000067                     _DIST1_PIN:
  1569                           	opt stack 0
  1570  000067                     	ds	1
  1571  000068                     _PROX1_PIN:
  1572                           	opt stack 0
  1573  000068                     	ds	1
  1574                           tblptru	equ	0xFF8
  1575                           tblptrh	equ	0xFF7
  1576                           tblptrl	equ	0xFF6
  1577                           tablat	equ	0xFF5
  1578                           postinc0	equ	0xFEE
  1579                           wreg	equ	0xFE8
  1580                           postdec1	equ	0xFE5
  1581                           fsr1h	equ	0xFE2
  1582                           fsr1l	equ	0xFE1
  1583                           
  1584                           	psect	dataCOMRAM
  1585  000069                     __pdataCOMRAM:
  1586                           	opt stack 0
  1587  000069                     _DIST_THRESHOLD_HI:
  1588                           	opt stack 0
  1589  000069                     	ds	2
  1590  00006B                     _DIST_THRESHOLD_LOW:
  1591                           	opt stack 0
  1592  00006B                     	ds	2
  1593  00006D                     _sortSize:
  1594                           	opt stack 0
  1595  00006D                     	ds	2
  1596  00006F                     _DIST1_TRIG:
  1597                           	opt stack 0
  1598  00006F                     	ds	1
  1599  000070                     _IR1_PIN:
  1600                           	opt stack 0
  1601  000070                     	ds	1
  1602  000071                     _IR2_PIN:
  1603                           	opt stack 0
  1604  000071                     	ds	1
  1605  000072                     _PROX2_PIN:
  1606                           	opt stack 0
  1607  000072                     	ds	1
  1608  000073                     _endSize:
  1609                           	opt stack 0
  1610  000073                     	ds	2
  1611                           tblptru	equ	0xFF8
  1612                           tblptrh	equ	0xFF7
  1613                           tblptrl	equ	0xFF6
  1614                           tablat	equ	0xFF5
  1615                           postinc0	equ	0xFEE
  1616                           wreg	equ	0xFE8
  1617                           postdec1	equ	0xFE5
  1618                           fsr1h	equ	0xFE2
  1619                           fsr1l	equ	0xFE1
  1620                           
  1621                           	psect	bssBANK0
  1622  0000EE                     __pbssBANK0:
  1623                           	opt stack 0
  1624  0000EE                     _bottle_type:
  1625                           	opt stack 0
  1626  0000EE                     	ds	2
  1627  0000F0                     _discretize_counter:
  1628                           	opt stack 0
  1629  0000F0                     	ds	2
  1630  0000F2                     _eskaNoCap:
  1631                           	opt stack 0
  1632  0000F2                     	ds	2
  1633  0000F4                     _eskaWCap:
  1634                           	opt stack 0
  1635  0000F4                     	ds	2
  1636  0000F6                     _measure_counter:
  1637                           	opt stack 0
  1638  0000F6                     	ds	2
  1639  0000F8                     _release_counter:
  1640                           	opt stack 0
  1641  0000F8                     	ds	2
  1642  0000FA                     _timeDiff:
  1643                           	opt stack 0
  1644  0000FA                     	ds	2
  1645  0000FC                     _yopNoCap:
  1646                           	opt stack 0
  1647  0000FC                     	ds	2
  1648  0000FE                     _yopWCap:
  1649                           	opt stack 0
  1650  0000FE                     	ds	2
  1651                           tblptru	equ	0xFF8
  1652                           tblptrh	equ	0xFF7
  1653                           tblptrl	equ	0xFF6
  1654                           tablat	equ	0xFF5
  1655                           postinc0	equ	0xFEE
  1656                           wreg	equ	0xFE8
  1657                           postdec1	equ	0xFE5
  1658                           fsr1h	equ	0xFE2
  1659                           fsr1l	equ	0xFE1
  1660                           
  1661                           	psect	dataBANK0
  1662  0000D8                     __pdataBANK0:
  1663                           	opt stack 0
  1664  0000D8                     _IR_THRESHOLD_HI:
  1665                           	opt stack 0
  1666  0000D8                     	ds	2
  1667  0000DA                     _IR_THRESHOLD_LOW:
  1668                           	opt stack 0
  1669  0000DA                     	ds	2
  1670  0000DC                     _sortIndex:
  1671                           	opt stack 0
  1672  0000DC                     	ds	2
  1673  0000DE                     _nstate:
  1674                           	opt stack 0
  1675  0000DE                     	ds	1
  1676  0000DF                     _state:
  1677                           	opt stack 0
  1678  0000DF                     	ds	1
  1679  0000E0                     _creditIndex:
  1680                           	opt stack 0
  1681  0000E0                     	ds	2
  1682  0000E2                     _creditSize:
  1683                           	opt stack 0
  1684  0000E2                     	ds	2
  1685  0000E4                     _endIndex:
  1686                           	opt stack 0
  1687  0000E4                     	ds	2
  1688  0000E6                     _events:
  1689                           	opt stack 0
  1690  0000E6                     	ds	2
  1691  0000E8                     _logIndex:
  1692                           	opt stack 0
  1693  0000E8                     	ds	2
  1694  0000EA                     _menuIndex:
  1695                           	opt stack 0
  1696  0000EA                     	ds	2
  1697  0000EC                     _menuSize:
  1698                           	opt stack 0
  1699  0000EC                     	ds	2
  1700                           tblptru	equ	0xFF8
  1701                           tblptrh	equ	0xFF7
  1702                           tblptrl	equ	0xFF6
  1703                           tablat	equ	0xFF5
  1704                           postinc0	equ	0xFEE
  1705                           wreg	equ	0xFE8
  1706                           postdec1	equ	0xFE5
  1707                           fsr1h	equ	0xFE2
  1708                           fsr1l	equ	0xFE1
  1709                           
  1710                           	psect	bssBANK1
  1711  000100                     __pbssBANK1:
  1712                           	opt stack 0
  1713  000100                     _latestSortedBottleTime:
  1714                           	opt stack 0
  1715  000100                     	ds	14
  1716  00010E                     _startTime:
  1717                           	opt stack 0
  1718  00010E                     	ds	14
  1719  00011C                     _time_i:
  1720                           	opt stack 0
  1721  00011C                     	ds	14
  1722  00012A                     _DIST1:
  1723                           	opt stack 0
  1724  00012A                     	ds	10
  1725  000134                     _IR2:
  1726                           	opt stack 0
  1727  000134                     	ds	10
  1728  00013E                     _display0:
  1729                           	opt stack 0
  1730  00013E                     	ds	18
  1731  000150                     _display1:
  1732                           	opt stack 0
  1733  000150                     	ds	18
  1734  000162                     _ndisplay0:
  1735                           	opt stack 0
  1736  000162                     	ds	18
  1737  000174                     _ndisplay1:
  1738                           	opt stack 0
  1739  000174                     	ds	18
  1740                           tblptru	equ	0xFF8
  1741                           tblptrh	equ	0xFF7
  1742                           tblptrl	equ	0xFF6
  1743                           tablat	equ	0xFF5
  1744                           postinc0	equ	0xFEE
  1745                           wreg	equ	0xFE8
  1746                           postdec1	equ	0xFE5
  1747                           fsr1h	equ	0xFE2
  1748                           fsr1l	equ	0xFE1
  1749                           
  1750                           	psect	dataBIGRAM
  1751  00018A                     __pdataBIGRAM:
  1752                           	opt stack 0
  1753  00018A                     _menu:
  1754                           	opt stack 0
  1755  00018A                     	ds	720
  1756                           tblptru	equ	0xFF8
  1757                           tblptrh	equ	0xFF7
  1758                           tblptrl	equ	0xFF6
  1759                           tablat	equ	0xFF5
  1760                           postinc0	equ	0xFEE
  1761                           wreg	equ	0xFE8
  1762                           postdec1	equ	0xFE5
  1763                           fsr1h	equ	0xFE2
  1764                           fsr1l	equ	0xFE1
  1765                           
  1766                           	psect	cstackBANK1
  1767  000186                     __pcstackBANK1:
  1768                           	opt stack 0
  1769  000186                     update_display@a:
  1770                           	opt stack 0
  1771                           
  1772                           ; 2 bytes @ 0x0
  1773  000186                     	ds	2
  1774  000188                     update_display@i:
  1775                           	opt stack 0
  1776                           
  1777                           ; 1 bytes @ 0x2
  1778  000188                     	ds	1
  1779  000189                     ??_main:
  1780                           
  1781                           ; 1 bytes @ 0x3
  1782  000189                     	ds	1
  1783                           tblptru	equ	0xFF8
  1784                           tblptrh	equ	0xFF7
  1785                           tblptrl	equ	0xFF6
  1786                           tablat	equ	0xFF5
  1787                           postinc0	equ	0xFEE
  1788                           wreg	equ	0xFE8
  1789                           postdec1	equ	0xFE5
  1790                           fsr1h	equ	0xFE2
  1791                           fsr1l	equ	0xFE1
  1792                           
  1793                           	psect	cstackBANK0
  1794  000080                     __pcstackBANK0:
  1795                           	opt stack 0
  1796  000080                     ??_readADC:
  1797  000080                     ??_isdigit:
  1798  000080                     ??_I2C_Master_Wait:
  1799  000080                     ?_strcmp:
  1800                           	opt stack 0
  1801  000080                     ?___wmul:
  1802                           	opt stack 0
  1803  000080                     ?___awdiv:
  1804                           	opt stack 0
  1805  000080                     ?___awmod:
  1806                           	opt stack 0
  1807  000080                     ?___lwdiv:
  1808                           	opt stack 0
  1809  000080                     ?___lldiv:
  1810                           	opt stack 0
  1811  000080                     lcdNibble@temp:
  1812                           	opt stack 0
  1813  000080                     ___wmul@multiplier:
  1814                           	opt stack 0
  1815  000080                     ___awdiv@dividend:
  1816                           	opt stack 0
  1817  000080                     ___awmod@dividend:
  1818                           	opt stack 0
  1819  000080                     ___lwdiv@dividend:
  1820                           	opt stack 0
  1821  000080                     strcmp@s1:
  1822                           	opt stack 0
  1823  000080                     strcpy@to:
  1824                           	opt stack 0
  1825  000080                     ___lldiv@dividend:
  1826                           	opt stack 0
  1827                           
  1828                           ; 4 bytes @ 0x0
  1829  000080                     	ds	1
  1830  000081                     I2C_Master_Read@a:
  1831                           	opt stack 0
  1832  000081                     lcdNibble@data:
  1833                           	opt stack 0
  1834  000081                     readADC@channel:
  1835                           	opt stack 0
  1836  000081                     _isdigit$774:
  1837                           	opt stack 0
  1838  000081                     I2C_Master_Write@d:
  1839                           	opt stack 0
  1840                           
  1841                           ; 2 bytes @ 0x1
  1842  000081                     	ds	1
  1843  000082                     ??_read_sensors:
  1844  000082                     I2C_Master_Read@temp:
  1845                           	opt stack 0
  1846  000082                     lcdInst@data:
  1847                           	opt stack 0
  1848  000082                     putch@data:
  1849                           	opt stack 0
  1850  000082                     isdigit@c:
  1851                           	opt stack 0
  1852  000082                     ___wmul@multiplicand:
  1853                           	opt stack 0
  1854  000082                     ___awdiv@divisor:
  1855                           	opt stack 0
  1856  000082                     ___awmod@divisor:
  1857                           	opt stack 0
  1858  000082                     ___lwdiv@divisor:
  1859                           	opt stack 0
  1860  000082                     strcmp@s2:
  1861                           	opt stack 0
  1862  000082                     strcpy@from:
  1863                           	opt stack 0
  1864                           
  1865                           ; 2 bytes @ 0x2
  1866  000082                     	ds	1
  1867  000083                     ??_initLCD:
  1868                           
  1869                           ; 1 bytes @ 0x3
  1870  000083                     	ds	1
  1871  000084                     ??_strcmp:
  1872  000084                     ___awdiv@counter:
  1873                           	opt stack 0
  1874  000084                     ___awmod@counter:
  1875                           	opt stack 0
  1876  000084                     ___lwdiv@counter:
  1877                           	opt stack 0
  1878  000084                     ___wmul@product:
  1879                           	opt stack 0
  1880  000084                     strcpy@cp:
  1881                           	opt stack 0
  1882  000084                     ___lldiv@divisor:
  1883                           	opt stack 0
  1884                           
  1885                           ; 4 bytes @ 0x4
  1886  000084                     	ds	1
  1887  000085                     ___awdiv@sign:
  1888                           	opt stack 0
  1889  000085                     ___awmod@sign:
  1890                           	opt stack 0
  1891  000085                     strcmp@r:
  1892                           	opt stack 0
  1893  000085                     ___lwdiv@quotient:
  1894                           	opt stack 0
  1895                           
  1896                           ; 2 bytes @ 0x5
  1897  000085                     	ds	1
  1898  000086                     ??_update_RTC:
  1899  000086                     ?__measure:
  1900                           	opt stack 0
  1901  000086                     read_sensors@i:
  1902                           	opt stack 0
  1903  000086                     ___awdiv@quotient:
  1904                           	opt stack 0
  1905                           
  1906                           ; 2 bytes @ 0x6
  1907  000086                     	ds	1
  1908  000087                     ?___lwmod:
  1909                           	opt stack 0
  1910  000087                     ___lwmod@dividend:
  1911                           	opt stack 0
  1912                           
  1913                           ; 2 bytes @ 0x7
  1914  000087                     	ds	1
  1915  000088                     ___lldiv@quotient:
  1916                           	opt stack 0
  1917                           
  1918                           ; 4 bytes @ 0x8
  1919  000088                     	ds	1
  1920  000089                     ___lwmod@divisor:
  1921                           	opt stack 0
  1922                           
  1923                           ; 2 bytes @ 0x9
  1924  000089                     	ds	1
  1925  00008A                     update_RTC@i:
  1926                           	opt stack 0
  1927  00008A                     __measure@i:
  1928                           	opt stack 0
  1929                           
  1930                           ; 1 bytes @ 0xA
  1931  00008A                     	ds	1
  1932  00008B                     __measure@i_496:
  1933                           	opt stack 0
  1934  00008B                     ___lwmod@counter:
  1935                           	opt stack 0
  1936                           
  1937                           ; 1 bytes @ 0xB
  1938  00008B                     	ds	1
  1939  00008C                     ?__doprnt:
  1940                           	opt stack 0
  1941  00008C                     __measure@i_497:
  1942                           	opt stack 0
  1943  00008C                     ___lldiv@counter:
  1944                           	opt stack 0
  1945  00008C                     __doprnt@pb:
  1946                           	opt stack 0
  1947                           
  1948                           ; 2 bytes @ 0xC
  1949  00008C                     	ds	1
  1950  00008D                     __measure@i_498:
  1951                           	opt stack 0
  1952  00008D                     I2C_Master_Init@c:
  1953                           	opt stack 0
  1954                           
  1955                           ; 4 bytes @ 0xD
  1956  00008D                     	ds	1
  1957  00008E                     __measure@i_499:
  1958                           	opt stack 0
  1959  00008E                     __doprnt@f:
  1960                           	opt stack 0
  1961                           
  1962                           ; 2 bytes @ 0xE
  1963  00008E                     	ds	1
  1964  00008F                     __measure@i_500:
  1965                           	opt stack 0
  1966                           
  1967                           ; 1 bytes @ 0xF
  1968  00008F                     	ds	1
  1969  000090                     __measure@i_501:
  1970                           	opt stack 0
  1971  000090                     __doprnt@ap:
  1972                           	opt stack 0
  1973                           
  1974                           ; 2 bytes @ 0x10
  1975  000090                     	ds	1
  1976  000091                     ??_I2C_Master_Init:
  1977  000091                     __measure@i_502:
  1978                           	opt stack 0
  1979                           
  1980                           ; 1 bytes @ 0x11
  1981  000091                     	ds	1
  1982  000092                     ??__doprnt:
  1983  000092                     __measure@measurement:
  1984                           	opt stack 0
  1985                           
  1986                           ; 2 bytes @ 0x12
  1987  000092                     	ds	2
  1988  000094                     ??_sort:
  1989                           
  1990                           ; 1 bytes @ 0x14
  1991  000094                     	ds	2
  1992  000096                     __doprnt@idx:
  1993                           	opt stack 0
  1994                           
  1995                           ; 1 bytes @ 0x16
  1996  000096                     	ds	1
  1997  000097                     __doprnt@prec:
  1998                           	opt stack 0
  1999                           
  2000                           ; 1 bytes @ 0x17
  2001  000097                     	ds	1
  2002  000098                     sort@i:
  2003                           	opt stack 0
  2004  000098                     __doprnt@len:
  2005                           	opt stack 0
  2006                           
  2007                           ; 2 bytes @ 0x18
  2008  000098                     	ds	2
  2009  00009A                     __doprnt@cp:
  2010                           	opt stack 0
  2011                           
  2012                           ; 2 bytes @ 0x1A
  2013  00009A                     	ds	2
  2014  00009C                     __doprnt@val:
  2015                           	opt stack 0
  2016                           
  2017                           ; 2 bytes @ 0x1C
  2018  00009C                     	ds	2
  2019  00009E                     __doprnt@flag:
  2020                           	opt stack 0
  2021                           
  2022                           ; 1 bytes @ 0x1E
  2023  00009E                     	ds	1
  2024  00009F                     __doprnt@width:
  2025                           	opt stack 0
  2026                           
  2027                           ; 2 bytes @ 0x1F
  2028  00009F                     	ds	2
  2029  0000A1                     __doprnt@c:
  2030                           	opt stack 0
  2031                           
  2032                           ; 1 bytes @ 0x21
  2033  0000A1                     	ds	1
  2034  0000A2                     ?_printf:
  2035                           	opt stack 0
  2036  0000A2                     ?_sprintf:
  2037                           	opt stack 0
  2038  0000A2                     printf@f:
  2039                           	opt stack 0
  2040  0000A2                     sprintf@wh:
  2041                           	opt stack 0
  2042                           
  2043                           ; 2 bytes @ 0x22
  2044  0000A2                     	ds	2
  2045  0000A4                     printf@ap:
  2046                           	opt stack 0
  2047  0000A4                     sprintf@f:
  2048                           	opt stack 0
  2049                           
  2050                           ; 2 bytes @ 0x24
  2051  0000A4                     	ds	2
  2052  0000A6                     printf@pb:
  2053                           	opt stack 0
  2054                           
  2055                           ; 4 bytes @ 0x26
  2056  0000A6                     	ds	4
  2057  0000AA                     ??_update_lcd:
  2058                           
  2059                           ; 1 bytes @ 0x2A
  2060  0000AA                     	ds	1
  2061  0000AB                     update_lcd@flag:
  2062                           	opt stack 0
  2063                           
  2064                           ; 2 bytes @ 0x2B
  2065  0000AB                     	ds	13
  2066  0000B8                     sprintf@ap:
  2067                           	opt stack 0
  2068                           
  2069                           ; 2 bytes @ 0x38
  2070  0000B8                     	ds	2
  2071  0000BA                     sprintf@pb:
  2072                           	opt stack 0
  2073                           
  2074                           ; 4 bytes @ 0x3A
  2075  0000BA                     	ds	4
  2076  0000BE                     ??_update_state:
  2077  0000BE                     ??_display_menu:
  2078                           
  2079                           ; 1 bytes @ 0x3E
  2080  0000BE                     	ds	2
  2081  0000C0                     update_state@i:
  2082                           	opt stack 0
  2083                           
  2084                           ; 1 bytes @ 0x40
  2085  0000C0                     	ds	3
  2086  0000C3                     display_menu@selector:
  2087                           	opt stack 0
  2088                           
  2089                           ; 2 bytes @ 0x43
  2090  0000C3                     	ds	2
  2091  0000C5                     display_menu@menuSizePtr:
  2092                           	opt stack 0
  2093                           
  2094                           ; 2 bytes @ 0x45
  2095  0000C5                     	ds	2
  2096  0000C7                     display_menu@menuSelection:
  2097                           	opt stack 0
  2098                           
  2099                           ; 2 bytes @ 0x47
  2100  0000C7                     	ds	2
  2101  0000C9                     _display_menu$1164:
  2102                           	opt stack 0
  2103                           
  2104                           ; 2 bytes @ 0x49
  2105  0000C9                     	ds	2
  2106  0000CB                     display_menu@menuIndexPtr:
  2107                           	opt stack 0
  2108                           
  2109                           ; 2 bytes @ 0x4B
  2110  0000CB                     	ds	2
  2111  0000CD                     ??_update_display:
  2112                           
  2113                           ; 1 bytes @ 0x4D
  2114  0000CD                     	ds	11
  2115                           tblptru	equ	0xFF8
  2116                           tblptrh	equ	0xFF7
  2117                           tblptrl	equ	0xFF6
  2118                           tablat	equ	0xFF5
  2119                           postinc0	equ	0xFEE
  2120                           wreg	equ	0xFE8
  2121                           postdec1	equ	0xFE5
  2122                           fsr1h	equ	0xFE2
  2123                           fsr1l	equ	0xFE1
  2124                           
  2125                           	psect	cstackCOMRAM
  2126  000001                     __pcstackCOMRAM:
  2127                           	opt stack 0
  2128  000001                     ??i2_isdigit:
  2129  000001                     ?i2___wmul:
  2130                           	opt stack 0
  2131  000001                     ?i2___awmod:
  2132                           	opt stack 0
  2133  000001                     ?i2___lwdiv:
  2134                           	opt stack 0
  2135  000001                     i2lcdNibble@temp:
  2136                           	opt stack 0
  2137  000001                     i2___wmul@multiplier:
  2138                           	opt stack 0
  2139  000001                     i2___awmod@dividend:
  2140                           	opt stack 0
  2141  000001                     i2___lwdiv@dividend:
  2142                           	opt stack 0
  2143                           
  2144                           ; 2 bytes @ 0x0
  2145  000001                     	ds	1
  2146  000002                     i2lcdNibble@data:
  2147                           	opt stack 0
  2148  000002                     i2_isdigit$774:
  2149                           	opt stack 0
  2150                           
  2151                           ; 1 bytes @ 0x1
  2152  000002                     	ds	1
  2153  000003                     i2lcdInst@data:
  2154                           	opt stack 0
  2155  000003                     i2putch@data:
  2156                           	opt stack 0
  2157  000003                     i2isdigit@c:
  2158                           	opt stack 0
  2159  000003                     i2___wmul@multiplicand:
  2160                           	opt stack 0
  2161  000003                     i2___awmod@divisor:
  2162                           	opt stack 0
  2163  000003                     i2___lwdiv@divisor:
  2164                           	opt stack 0
  2165                           
  2166                           ; 2 bytes @ 0x2
  2167  000003                     	ds	2
  2168  000005                     i2___awmod@counter:
  2169                           	opt stack 0
  2170  000005                     i2___wmul@product:
  2171                           	opt stack 0
  2172  000005                     i2___lwdiv@quotient:
  2173                           	opt stack 0
  2174                           
  2175                           ; 2 bytes @ 0x4
  2176  000005                     	ds	1
  2177  000006                     i2___awmod@sign:
  2178                           	opt stack 0
  2179                           
  2180                           ; 1 bytes @ 0x5
  2181  000006                     	ds	1
  2182  000007                     i2___lwdiv@counter:
  2183                           	opt stack 0
  2184                           
  2185                           ; 1 bytes @ 0x6
  2186  000007                     	ds	1
  2187  000008                     ?i2___lwmod:
  2188                           	opt stack 0
  2189  000008                     i2___lwmod@dividend:
  2190                           	opt stack 0
  2191                           
  2192                           ; 2 bytes @ 0x7
  2193  000008                     	ds	2
  2194  00000A                     i2___lwmod@divisor:
  2195                           	opt stack 0
  2196                           
  2197                           ; 2 bytes @ 0x9
  2198  00000A                     	ds	2
  2199  00000C                     i2___lwmod@counter:
  2200                           	opt stack 0
  2201                           
  2202                           ; 1 bytes @ 0xB
  2203  00000C                     	ds	1
  2204  00000D                     ?i2__doprnt:
  2205                           	opt stack 0
  2206  00000D                     i2__doprnt@pb:
  2207                           	opt stack 0
  2208                           
  2209                           ; 2 bytes @ 0xC
  2210  00000D                     	ds	2
  2211  00000F                     i2__doprnt@f:
  2212                           	opt stack 0
  2213                           
  2214                           ; 2 bytes @ 0xE
  2215  00000F                     	ds	2
  2216  000011                     i2__doprnt@ap:
  2217                           	opt stack 0
  2218                           
  2219                           ; 2 bytes @ 0x10
  2220  000011                     	ds	2
  2221  000013                     ??i2__doprnt:
  2222                           
  2223                           ; 1 bytes @ 0x12
  2224  000013                     	ds	4
  2225  000017                     i2__doprnt@idx:
  2226                           	opt stack 0
  2227                           
  2228                           ; 1 bytes @ 0x16
  2229  000017                     	ds	1
  2230  000018                     i2__doprnt@prec:
  2231                           	opt stack 0
  2232                           
  2233                           ; 1 bytes @ 0x17
  2234  000018                     	ds	1
  2235  000019                     i2__doprnt@len:
  2236                           	opt stack 0
  2237                           
  2238                           ; 2 bytes @ 0x18
  2239  000019                     	ds	2
  2240  00001B                     i2__doprnt@cp:
  2241                           	opt stack 0
  2242                           
  2243                           ; 2 bytes @ 0x1A
  2244  00001B                     	ds	2
  2245  00001D                     i2__doprnt@val:
  2246                           	opt stack 0
  2247                           
  2248                           ; 2 bytes @ 0x1C
  2249  00001D                     	ds	2
  2250  00001F                     i2__doprnt@flag:
  2251                           	opt stack 0
  2252                           
  2253                           ; 1 bytes @ 0x1E
  2254  00001F                     	ds	1
  2255  000020                     i2__doprnt@width:
  2256                           	opt stack 0
  2257                           
  2258                           ; 2 bytes @ 0x1F
  2259  000020                     	ds	2
  2260  000022                     i2__doprnt@c:
  2261                           	opt stack 0
  2262                           
  2263                           ; 1 bytes @ 0x21
  2264  000022                     	ds	1
  2265  000023                     ?i2_printf:
  2266                           	opt stack 0
  2267  000023                     i2printf@f:
  2268                           	opt stack 0
  2269                           
  2270                           ; 2 bytes @ 0x22
  2271  000023                     	ds	2
  2272  000025                     i2printf@ap:
  2273                           	opt stack 0
  2274                           
  2275                           ; 2 bytes @ 0x24
  2276  000025                     	ds	2
  2277  000027                     i2printf@pb:
  2278                           	opt stack 0
  2279                           
  2280                           ; 4 bytes @ 0x26
  2281  000027                     	ds	4
  2282  00002B                     ??_keypressed:
  2283                           
  2284                           ; 1 bytes @ 0x2A
  2285  00002B                     	ds	16
  2286  00003B                     keypressed@i:
  2287                           	opt stack 0
  2288                           
  2289                           ; 2 bytes @ 0x3A
  2290  00003B                     	ds	2
  2291  00003D                     keypressed@keypress:
  2292                           	opt stack 0
  2293                           
  2294                           ; 1 bytes @ 0x3C
  2295  00003D                     	ds	1
  2296                           tblptru	equ	0xFF8
  2297                           tblptrh	equ	0xFF7
  2298                           tblptrl	equ	0xFF6
  2299                           tablat	equ	0xFF5
  2300                           postinc0	equ	0xFEE
  2301                           wreg	equ	0xFE8
  2302                           postdec1	equ	0xFE5
  2303                           fsr1h	equ	0xFE2
  2304                           fsr1l	equ	0xFE1
  2305                           
  2306 ;;
  2307 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2308 ;;
  2309 ;; *************** function _main *****************
  2310 ;; Defined at:
  2311 ;;		line 106 in file "main.c"
  2312 ;; Parameters:    Size  Location     Type
  2313 ;;		None
  2314 ;; Auto vars:     Size  Location     Type
  2315 ;;		None
  2316 ;; Return value:  Size  Location     Type
  2317 ;;                  1    wreg      void 
  2318 ;; Registers used:
  2319 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2320 ;; Tracked objects:
  2321 ;;		On entry : 0/0
  2322 ;;		On exit  : 0/0
  2323 ;;		Unchanged: 0/0
  2324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2326 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2327 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2328 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2329 ;;Total ram usage:        1 bytes
  2330 ;; Hardware stack levels required when called:   11
  2331 ;; This function calls:
  2332 ;;		_I2C_Master_Init
  2333 ;;		_initLCD
  2334 ;;		_read_sensors
  2335 ;;		_sort
  2336 ;;		_update_RTC
  2337 ;;		_update_display
  2338 ;;		_update_lcd
  2339 ;;		_update_state
  2340 ;; This function is called by:
  2341 ;;		Startup code after reset
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344                           
  2345                           	psect	text0
  2346  003684                     __ptext0:
  2347                           	opt stack 0
  2348  003684                     _main:
  2349                           	opt stack 20
  2350                           
  2351                           ;main.c: 108: discretize=3000/(40);
  2352                           
  2353                           ;incstack = 0
  2354  003684  0E00               	movlw	0
  2355  003686  6E76               	movwf	_discretize+1,c
  2356  003688  0E4B               	movlw	75
  2357  00368A  6E75               	movwf	_discretize,c
  2358                           
  2359                           ;main.c: 109: release=(4000)/(40);
  2360  00368C  0E00               	movlw	0
  2361  00368E  6E7A               	movwf	_release+1,c
  2362  003690  0E64               	movlw	100
  2363  003692  6E79               	movwf	_release,c
  2364                           
  2365                           ;main.c: 110: measure=5+500/(40);
  2366  003694  0E00               	movlw	0
  2367  003696  6E78               	movwf	_measure+1,c
  2368  003698  0E11               	movlw	17
  2369  00369A  6E77               	movwf	_measure,c
  2370                           
  2371                           ;main.c: 115: TRISA = 0xE7;
  2372  00369C  0EE7               	movlw	231
  2373  00369E  6E92               	movwf	3986,c	;volatile
  2374                           
  2375                           ;main.c: 116: TRISC = 0x00;
  2376  0036A0  0E00               	movlw	0
  2377  0036A2  6E94               	movwf	3988,c	;volatile
  2378                           
  2379                           ;main.c: 117: TRISD = 0x00;
  2380  0036A4  0E00               	movlw	0
  2381  0036A6  6E95               	movwf	3989,c	;volatile
  2382                           
  2383                           ;main.c: 118: TRISB = 0xFF;
  2384  0036A8  6893               	setf	3987,c	;volatile
  2385                           
  2386                           ;main.c: 119: TRISE = 0xFF;
  2387  0036AA  6896               	setf	3990,c	;volatile
  2388                           
  2389                           ;main.c: 120: LATB = 0x00;
  2390  0036AC  0E00               	movlw	0
  2391  0036AE  6E8A               	movwf	3978,c	;volatile
  2392                           
  2393                           ;main.c: 122: LATE= 0x00;
  2394  0036B0  0E00               	movlw	0
  2395  0036B2  6E8D               	movwf	3981,c	;volatile
  2396                           
  2397                           ;main.c: 124: ADCON0 = 0x00;
  2398  0036B4  0E00               	movlw	0
  2399  0036B6  6EC2               	movwf	4034,c	;volatile
  2400                           
  2401                           ;main.c: 125: ADCON1 = 0x0B;
  2402  0036B8  0E0B               	movlw	11
  2403  0036BA  6EC1               	movwf	4033,c	;volatile
  2404                           
  2405                           ;main.c: 126: CVRCON = 0x00;
  2406  0036BC  0E00               	movlw	0
  2407  0036BE  6EB5               	movwf	4021,c	;volatile
  2408                           
  2409                           ;main.c: 127: CMCONbits.CIS = 0;
  2410  0036C0  96B4               	bcf	4020,3,c	;volatile
  2411                           
  2412                           ;main.c: 128: ADFM = 1;
  2413  0036C2  8EC0               	bsf	4032,7,c	;volatile
  2414                           
  2415                           ;main.c: 130: initLCD();
  2416  0036C4  EC05  F01E         	call	_initLCD	;wreg free
  2417                           
  2418                           ;main.c: 131: INT1IE = 1;
  2419  0036C8  86F0               	bsf	intcon3,3,c	;volatile
  2420                           
  2421                           ;main.c: 132: nRBPU = 0;
  2422  0036CA  9EF1               	bcf	intcon2,7,c	;volatile
  2423                           
  2424                           ;main.c: 133: I2C_Master_Init(10000);
  2425  0036CC  0E10               	movlw	16
  2426  0036CE  0100               	movlb	0	; () banked
  2427  0036D0  6F8D               	movwf	I2C_Master_Init@c& (0+255),b
  2428  0036D2  0E27               	movlw	39
  2429  0036D4  6F8E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  2430  0036D6  0E00               	movlw	0
  2431  0036D8  6F8F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  2432  0036DA  0E00               	movlw	0
  2433  0036DC  6F90               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  2434  0036DE  EC08  F01D         	call	_I2C_Master_Init	;wreg free
  2435  0036E2  D021               	goto	l8534
  2436  0036E4                     l8516:
  2437                           
  2438                           ;main.c: 138: (INTCONbits.GIE = 0);
  2439  0036E4  9EF2               	bcf	intcon,7,c	;volatile
  2440                           
  2441                           ;main.c: 139: update_RTC();
  2442  0036E6  EC4F  F019         	call	_update_RTC	;wreg free
  2443                           
  2444                           ;main.c: 140: if (state=='s'){
  2445  0036EA  0E73               	movlw	115
  2446  0036EC  0100               	movlb	0	; () banked
  2447  0036EE  19DF               	xorwf	_state& (0+255),w,b
  2448  0036F0  A4D8               	btfss	status,2,c
  2449  0036F2  D004               	goto	l8524
  2450                           
  2451                           ; BSR set to: 0
  2452                           ;main.c: 141: read_sensors();
  2453  0036F4  EC09  F018         	call	_read_sensors	;wreg free
  2454                           
  2455                           ;main.c: 142: sort();
  2456  0036F8  ECEF  F010         	call	_sort	;wreg free
  2457  0036FC                     l8524:
  2458                           
  2459                           ;main.c: 143: }
  2460                           ;main.c: 144: update_state();
  2461  0036FC  EC24  F015         	call	_update_state	;wreg free
  2462                           
  2463                           ;main.c: 145: update_display();
  2464  003700  EC1B  F00C         	call	_update_display	;wreg free
  2465                           
  2466                           ;main.c: 146: update_lcd();
  2467  003704  EC06  F01A         	call	_update_lcd	;wreg free
  2468  003708                     l8530:
  2469  003708  0E78               	movlw	120
  2470  00370A  0100               	movlb	0	; () banked
  2471  00370C  19DF               	xorwf	_state& (0+255),w,b
  2472  00370E  B4D8               	btfsc	status,2,c
  2473  003710  D7FB               	goto	l8530
  2474                           
  2475                           ; BSR set to: 0
  2476                           ;main.c: 148: (INTCONbits.GIE = 1);
  2477  003712  8EF2               	bsf	intcon,7,c	;volatile
  2478                           
  2479                           ; BSR set to: 0
  2480                           ;main.c: 149: _delay((unsigned long)((40-10)*(10000000/4000.0)));
  2481  003714  0E62               	movlw	98
  2482  003716  0101               	movlb	1	; () banked
  2483  003718  6F89               	movwf	??_main& (0+255),b
  2484  00371A  0E65               	movlw	101
  2485  00371C                     u14737:
  2486  00371C  2EE8               	decfsz	wreg,f,c
  2487  00371E  D7FE               	bra	u14737
  2488  003720  2F89               	decfsz	??_main& (0+255),f,b
  2489  003722  D7FC               	bra	u14737
  2490  003724  D000               	nop2	
  2491  003726                     l8534:
  2492                           
  2493                           ;main.c: 150: (INTCONbits.GIE = 0);
  2494  003726  9EF2               	bcf	intcon,7,c	;volatile
  2495  003728  D7DD               	goto	l8516
  2496  00372A                     __end_of_main:
  2497                           	opt stack 0
  2498                           tblptru	equ	0xFF8
  2499                           tblptrh	equ	0xFF7
  2500                           tblptrl	equ	0xFF6
  2501                           tablat	equ	0xFF5
  2502                           intcon	equ	0xFF2
  2503                           intcon2	equ	0xFF1
  2504                           intcon3	equ	0xFF0
  2505                           postinc0	equ	0xFEE
  2506                           wreg	equ	0xFE8
  2507                           postdec1	equ	0xFE5
  2508                           fsr1h	equ	0xFE2
  2509                           fsr1l	equ	0xFE1
  2510                           status	equ	0xFD8
  2511                           
  2512 ;; *************** function _update_state *****************
  2513 ;; Defined at:
  2514 ;;		line 267 in file "main.c"
  2515 ;; Parameters:    Size  Location     Type
  2516 ;;		None
  2517 ;; Auto vars:     Size  Location     Type
  2518 ;;  i               1   64[BANK0 ] unsigned char 
  2519 ;; Return value:  Size  Location     Type
  2520 ;;                  1    wreg      void 
  2521 ;; Registers used:
  2522 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2528 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2529 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2530 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2531 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2532 ;;Total ram usage:        3 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    9
  2535 ;; This function calls:
  2536 ;;		___awdiv
  2537 ;;		___awmod
  2538 ;;		_sprintf
  2539 ;; This function is called by:
  2540 ;;		_main
  2541 ;; This function uses a non-reentrant model
  2542 ;;
  2543                           
  2544                           	psect	text1
  2545  002A48                     __ptext1:
  2546                           	opt stack 0
  2547  002A48                     _update_state:
  2548                           	opt stack 21
  2549                           
  2550                           ;main.c: 268: if ((nstate=='s'&&state!='s')||(nstate=='m'&&state!='m')){
  2551                           
  2552                           ;incstack = 0
  2553  002A48  0E73               	movlw	115
  2554  002A4A  0100               	movlb	0	; () banked
  2555  002A4C  19DE               	xorwf	_nstate& (0+255),w,b
  2556  002A4E  A4D8               	btfss	status,2,c
  2557  002A50  D005               	goto	l8338
  2558                           
  2559                           ; BSR set to: 0
  2560  002A52  0E73               	movlw	115
  2561  002A54  0100               	movlb	0	; () banked
  2562  002A56  19DF               	xorwf	_state& (0+255),w,b
  2563  002A58  A4D8               	btfss	status,2,c
  2564  002A5A  D00A               	goto	l8342
  2565  002A5C                     l8338:
  2566                           
  2567                           ; BSR set to: 0
  2568  002A5C  0E6D               	movlw	109
  2569  002A5E  0100               	movlb	0	; () banked
  2570  002A60  19DE               	xorwf	_nstate& (0+255),w,b
  2571  002A62  A4D8               	btfss	status,2,c
  2572  002A64  D04B               	goto	l8360
  2573                           
  2574                           ; BSR set to: 0
  2575  002A66  0E6D               	movlw	109
  2576  002A68  0100               	movlb	0	; () banked
  2577  002A6A  19DF               	xorwf	_state& (0+255),w,b
  2578  002A6C  B4D8               	btfsc	status,2,c
  2579  002A6E  D046               	goto	l8360
  2580  002A70                     l8342:
  2581                           
  2582                           ; BSR set to: 0
  2583                           ;main.c: 269: for (char i=0;i<7;i++){
  2584  002A70  0E00               	movlw	0
  2585  002A72  0100               	movlb	0	; () banked
  2586  002A74  6FC0               	movwf	update_state@i& (0+255),b
  2587  002A76                     l8344:
  2588                           
  2589                           ; BSR set to: 0
  2590  002A76  0E06               	movlw	6
  2591  002A78  0100               	movlb	0	; () banked
  2592  002A7A  65C0               	cpfsgt	update_state@i& (0+255),b
  2593  002A7C  D001               	goto	l8348
  2594  002A7E  D03E               	goto	l8360
  2595  002A80                     l8348:
  2596                           
  2597                           ; BSR set to: 0
  2598                           ;main.c: 270: startTime[i]=time_i[i];
  2599  002A80  0100               	movlb	0	; () banked
  2600  002A82  51C0               	movf	update_state@i& (0+255),w,b
  2601  002A84  0D02               	mullw	2
  2602  002A86  0E1C               	movlw	low _time_i
  2603  002A88  24F3               	addwf	prodl,w,c
  2604  002A8A  6ED9               	movwf	fsr2l,c
  2605  002A8C  0E01               	movlw	high _time_i
  2606  002A8E  20F4               	addwfc	prodh,w,c
  2607  002A90  6EDA               	movwf	fsr2h,c
  2608  002A92  0100               	movlb	0	; () banked
  2609  002A94  51C0               	movf	update_state@i& (0+255),w,b
  2610  002A96  0D02               	mullw	2
  2611  002A98  0E0E               	movlw	low _startTime
  2612  002A9A  24F3               	addwf	prodl,w,c
  2613  002A9C  6EE1               	movwf	fsr1l,c
  2614  002A9E  0E01               	movlw	high _startTime
  2615  002AA0  20F4               	addwfc	prodh,w,c
  2616  002AA2  6EE2               	movwf	fsr1h,c
  2617  002AA4  CFDE FFE6          	movff	postinc2,postinc1
  2618  002AA8  CFDD FFE5          	movff	postdec2,postdec1
  2619                           
  2620                           ;main.c: 271: latestSortedBottleTime[i]=time_i[i];
  2621  002AAC  0100               	movlb	0	; () banked
  2622  002AAE  51C0               	movf	update_state@i& (0+255),w,b
  2623  002AB0  0D02               	mullw	2
  2624  002AB2  0E1C               	movlw	low _time_i
  2625  002AB4  24F3               	addwf	prodl,w,c
  2626  002AB6  6ED9               	movwf	fsr2l,c
  2627  002AB8  0E01               	movlw	high _time_i
  2628  002ABA  20F4               	addwfc	prodh,w,c
  2629  002ABC  6EDA               	movwf	fsr2h,c
  2630  002ABE  0100               	movlb	0	; () banked
  2631  002AC0  51C0               	movf	update_state@i& (0+255),w,b
  2632  002AC2  0D02               	mullw	2
  2633  002AC4  0E00               	movlw	low _latestSortedBottleTime
  2634  002AC6  24F3               	addwf	prodl,w,c
  2635  002AC8  6EE1               	movwf	fsr1l,c
  2636  002ACA  0E01               	movlw	high _latestSortedBottleTime
  2637  002ACC  20F4               	addwfc	prodh,w,c
  2638  002ACE  6EE2               	movwf	fsr1h,c
  2639  002AD0  CFDE FFE6          	movff	postinc2,postinc1
  2640  002AD4  CFDD FFE5          	movff	postdec2,postdec1
  2641                           
  2642                           ; BSR set to: 0
  2643                           ;main.c: 272: discretize_counter=3000/40;
  2644  002AD8  0E00               	movlw	0
  2645  002ADA  0100               	movlb	0	; () banked
  2646  002ADC  6FF1               	movwf	(_discretize_counter+1)& (0+255),b
  2647  002ADE  0E4B               	movlw	75
  2648  002AE0  6FF0               	movwf	_discretize_counter& (0+255),b
  2649                           
  2650                           ; BSR set to: 0
  2651                           ;main.c: 273: measure_counter=0;
  2652  002AE2  0E00               	movlw	0
  2653  002AE4  0100               	movlb	0	; () banked
  2654  002AE6  6FF7               	movwf	(_measure_counter+1)& (0+255),b
  2655  002AE8  0E00               	movlw	0
  2656  002AEA  6FF6               	movwf	_measure_counter& (0+255),b
  2657                           
  2658                           ; BSR set to: 0
  2659                           ;main.c: 274: release_counter=0;
  2660  002AEC  0E00               	movlw	0
  2661  002AEE  0100               	movlb	0	; () banked
  2662  002AF0  6FF9               	movwf	(_release_counter+1)& (0+255),b
  2663  002AF2  0E00               	movlw	0
  2664  002AF4  6FF8               	movwf	_release_counter& (0+255),b
  2665                           
  2666                           ; BSR set to: 0
  2667  002AF6  0100               	movlb	0	; () banked
  2668  002AF8  2BC0               	incf	update_state@i& (0+255),f,b
  2669  002AFA  D7BD               	goto	l8344
  2670  002AFC                     l8360:
  2671                           
  2672                           ; BSR set to: 0
  2673                           ;main.c: 275: }
  2674                           ;main.c: 276: }
  2675                           ;main.c: 277: sorted_bottles=eskaNoCap+eskaWCap+yopNoCap+yopWCap;
  2676  002AFC  0100               	movlb	0	; () banked
  2677  002AFE  51F4               	movf	_eskaWCap& (0+255),w,b
  2678  002B00  0100               	movlb	0	; () banked
  2679  002B02  25F2               	addwf	_eskaNoCap& (0+255),w,b
  2680  002B04  0100               	movlb	0	; () banked
  2681  002B06  6FBE               	movwf	??_update_state& (0+255),b
  2682  002B08  0100               	movlb	0	; () banked
  2683  002B0A  51F5               	movf	(_eskaWCap+1)& (0+255),w,b
  2684  002B0C  0100               	movlb	0	; () banked
  2685  002B0E  21F3               	addwfc	(_eskaNoCap+1)& (0+255),w,b
  2686  002B10  0100               	movlb	0	; () banked
  2687  002B12  6FBF               	movwf	(??_update_state+1)& (0+255),b
  2688  002B14  0100               	movlb	0	; () banked
  2689  002B16  51FC               	movf	_yopNoCap& (0+255),w,b
  2690  002B18  0100               	movlb	0	; () banked
  2691  002B1A  27BE               	addwf	??_update_state& (0+255),f,b
  2692  002B1C  0100               	movlb	0	; () banked
  2693  002B1E  51FD               	movf	(_yopNoCap+1)& (0+255),w,b
  2694  002B20  0100               	movlb	0	; () banked
  2695  002B22  23BF               	addwfc	(??_update_state+1)& (0+255),f,b
  2696  002B24  0100               	movlb	0	; () banked
  2697  002B26  51FE               	movf	_yopWCap& (0+255),w,b
  2698  002B28  0100               	movlb	0	; () banked
  2699  002B2A  25BE               	addwf	??_update_state& (0+255),w,b
  2700  002B2C  6E65               	movwf	_sorted_bottles,c
  2701  002B2E  0100               	movlb	0	; () banked
  2702  002B30  51FF               	movf	(_yopWCap+1)& (0+255),w,b
  2703  002B32  0100               	movlb	0	; () banked
  2704  002B34  21BF               	addwfc	(??_update_state+1)& (0+255),w,b
  2705  002B36  6E66               	movwf	_sorted_bottles+1,c
  2706                           
  2707                           ; BSR set to: 0
  2708                           ;main.c: 278: sorted_bottles%=100;
  2709  002B38  C065  F080         	movff	_sorted_bottles,___awmod@dividend
  2710  002B3C  C066  F081         	movff	_sorted_bottles+1,___awmod@dividend+1
  2711  002B40  0E00               	movlw	0
  2712  002B42  0100               	movlb	0	; () banked
  2713  002B44  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2714  002B46  0E64               	movlw	100
  2715  002B48  6F82               	movwf	___awmod@divisor& (0+255),b
  2716  002B4A  EC95  F01B         	call	___awmod	;wreg free
  2717  002B4E  C080  F065         	movff	?___awmod,_sorted_bottles
  2718  002B52  C081  F066         	movff	?___awmod+1,_sorted_bottles+1
  2719                           
  2720                           ;main.c: 279: if (state=='s'&&timeDiff>=180){
  2721  002B56  0E73               	movlw	115
  2722  002B58  0100               	movlb	0	; () banked
  2723  002B5A  19DF               	xorwf	_state& (0+255),w,b
  2724  002B5C  A4D8               	btfss	status,2,c
  2725  002B5E  D00E               	goto	l8370
  2726                           
  2727                           ; BSR set to: 0
  2728  002B60  0100               	movlb	0	; () banked
  2729  002B62  BFFB               	btfsc	(_timeDiff+1)& (0+255),7,b
  2730  002B64  D00B               	goto	l8370
  2731  002B66  0100               	movlb	0	; () banked
  2732  002B68  51FB               	movf	(_timeDiff+1)& (0+255),w,b
  2733  002B6A  E105               	bnz	u14050
  2734  002B6C  0EB4               	movlw	180
  2735  002B6E  0100               	movlb	0	; () banked
  2736  002B70  5DFA               	subwf	_timeDiff& (0+255),w,b
  2737  002B72  A0D8               	btfss	status,0,c
  2738  002B74  D003               	goto	l8370
  2739  002B76                     u14050:
  2740                           
  2741                           ; BSR set to: 0
  2742                           ;main.c: 280: nstate='e';
  2743  002B76  0E65               	movlw	101
  2744  002B78  0100               	movlb	0	; () banked
  2745  002B7A  6FDE               	movwf	_nstate& (0+255),b
  2746  002B7C                     l8370:
  2747                           
  2748                           ; BSR set to: 0
  2749                           ;main.c: 281: }
  2750                           ;main.c: 282: if (nstate=='e'&&state!='e'){
  2751  002B7C  0E65               	movlw	101
  2752  002B7E  0100               	movlb	0	; () banked
  2753  002B80  19DE               	xorwf	_nstate& (0+255),w,b
  2754  002B82  A4D8               	btfss	status,2,c
  2755  002B84  D073               	goto	l8378
  2756                           
  2757                           ; BSR set to: 0
  2758  002B86  0E65               	movlw	101
  2759  002B88  0100               	movlb	0	; () banked
  2760  002B8A  19DF               	xorwf	_state& (0+255),w,b
  2761  002B8C  B4D8               	btfsc	status,2,c
  2762  002B8E  D06E               	goto	l8378
  2763                           
  2764                           ; BSR set to: 0
  2765                           ;main.c: 283: runTime=timeDiff;
  2766  002B90  C0FA  F063         	movff	_timeDiff,_runTime
  2767  002B94  C0FB  F064         	movff	_timeDiff+1,_runTime+1
  2768                           
  2769                           ; BSR set to: 0
  2770                           ;main.c: 284: sprintf(menu[3][0],"bottles: %02d    \0", sorted_bottles);
  2771  002B98  0EA6               	movlw	low (_menu+540)
  2772  002B9A  0100               	movlb	0	; () banked
  2773  002B9C  6FA2               	movwf	sprintf@wh& (0+255),b
  2774  002B9E  0E03               	movlw	high (_menu+540)
  2775  002BA0  0100               	movlb	0	; () banked
  2776  002BA2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2777  002BA4  0EFE               	movlw	low STR_17
  2778  002BA6  0100               	movlb	0	; () banked
  2779  002BA8  6FA4               	movwf	sprintf@f& (0+255),b
  2780  002BAA  0EFE               	movlw	high STR_17
  2781  002BAC  0100               	movlb	0	; () banked
  2782  002BAE  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2783  002BB0  C065  F0A6         	movff	_sorted_bottles,?_sprintf+4
  2784  002BB4  C066  F0A7         	movff	_sorted_bottles+1,?_sprintf+5
  2785  002BB8  EC8E  F01D         	call	_sprintf	;wreg free
  2786                           
  2787                           ;main.c: 285: sprintf(menu[3][1],"run time: %01d:%02d \0",(runTime/60),timeDiff%60);
  2788  002BBC  0EB8               	movlw	low (_menu+558)
  2789  002BBE  0100               	movlb	0	; () banked
  2790  002BC0  6FA2               	movwf	sprintf@wh& (0+255),b
  2791  002BC2  0E03               	movlw	high (_menu+558)
  2792  002BC4  0100               	movlb	0	; () banked
  2793  002BC6  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2794  002BC8  0EC0               	movlw	low STR_18
  2795  002BCA  0100               	movlb	0	; () banked
  2796  002BCC  6FA4               	movwf	sprintf@f& (0+255),b
  2797  002BCE  0EFE               	movlw	high STR_18
  2798  002BD0  0100               	movlb	0	; () banked
  2799  002BD2  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2800  002BD4  C063  F080         	movff	_runTime,___awdiv@dividend
  2801  002BD8  C064  F081         	movff	_runTime+1,___awdiv@dividend+1
  2802  002BDC  0E00               	movlw	0
  2803  002BDE  0100               	movlb	0	; () banked
  2804  002BE0  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  2805  002BE2  0E3C               	movlw	60
  2806  002BE4  6F82               	movwf	___awdiv@divisor& (0+255),b
  2807  002BE6  EC85  F01A         	call	___awdiv	;wreg free
  2808  002BEA  C080  F0A6         	movff	?___awdiv,?_sprintf+4
  2809  002BEE  C081  F0A7         	movff	?___awdiv+1,?_sprintf+5
  2810  002BF2  C0FA  F080         	movff	_timeDiff,___awmod@dividend
  2811  002BF6  C0FB  F081         	movff	_timeDiff+1,___awmod@dividend+1
  2812  002BFA  0E00               	movlw	0
  2813  002BFC  0100               	movlb	0	; () banked
  2814  002BFE  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  2815  002C00  0E3C               	movlw	60
  2816  002C02  6F82               	movwf	___awmod@divisor& (0+255),b
  2817  002C04  EC95  F01B         	call	___awmod	;wreg free
  2818  002C08  C080  F0A8         	movff	?___awmod,?_sprintf+6
  2819  002C0C  C081  F0A9         	movff	?___awmod+1,?_sprintf+7
  2820  002C10  EC8E  F01D         	call	_sprintf	;wreg free
  2821                           
  2822                           ;main.c: 286: sprintf(menu[3][2],"en:%02d ec:%02d    ", eskaNoCap,eskaWCap);
  2823  002C14  0ECA               	movlw	low (_menu+576)
  2824  002C16  0100               	movlb	0	; () banked
  2825  002C18  6FA2               	movwf	sprintf@wh& (0+255),b
  2826  002C1A  0E03               	movlw	high (_menu+576)
  2827  002C1C  0100               	movlb	0	; () banked
  2828  002C1E  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2829  002C20  0ED6               	movlw	low STR_19
  2830  002C22  0100               	movlb	0	; () banked
  2831  002C24  6FA4               	movwf	sprintf@f& (0+255),b
  2832  002C26  0EFE               	movlw	high STR_19
  2833  002C28  0100               	movlb	0	; () banked
  2834  002C2A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2835  002C2C  C0F2  F0A6         	movff	_eskaNoCap,?_sprintf+4
  2836  002C30  C0F3  F0A7         	movff	_eskaNoCap+1,?_sprintf+5
  2837  002C34  C0F4  F0A8         	movff	_eskaWCap,?_sprintf+6
  2838  002C38  C0F5  F0A9         	movff	_eskaWCap+1,?_sprintf+7
  2839  002C3C  EC8E  F01D         	call	_sprintf	;wreg free
  2840                           
  2841                           ;main.c: 287: sprintf(menu[3][3],"yn:%02d yc:%02d    ", yopNoCap, yopWCap);
  2842  002C40  0EDC               	movlw	low (_menu+594)
  2843  002C42  0100               	movlb	0	; () banked
  2844  002C44  6FA2               	movwf	sprintf@wh& (0+255),b
  2845  002C46  0E03               	movlw	high (_menu+594)
  2846  002C48  0100               	movlb	0	; () banked
  2847  002C4A  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  2848  002C4C  0EEA               	movlw	low STR_20
  2849  002C4E  0100               	movlb	0	; () banked
  2850  002C50  6FA4               	movwf	sprintf@f& (0+255),b
  2851  002C52  0EFE               	movlw	high STR_20
  2852  002C54  0100               	movlb	0	; () banked
  2853  002C56  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  2854  002C58  C0FC  F0A6         	movff	_yopNoCap,?_sprintf+4
  2855  002C5C  C0FD  F0A7         	movff	_yopNoCap+1,?_sprintf+5
  2856  002C60  C0FE  F0A8         	movff	_yopWCap,?_sprintf+6
  2857  002C64  C0FF  F0A9         	movff	_yopWCap+1,?_sprintf+7
  2858  002C68  EC8E  F01D         	call	_sprintf	;wreg free
  2859  002C6C                     l8378:
  2860                           
  2861                           ;main.c: 288: }
  2862                           ;main.c: 289: if ((state=='m'||state=='l'||state=='c')&&timeDiff>=10){
  2863  002C6C  0E6D               	movlw	109
  2864  002C6E  0100               	movlb	0	; () banked
  2865  002C70  19DF               	xorwf	_state& (0+255),w,b
  2866  002C72  B4D8               	btfsc	status,2,c
  2867  002C74  D00A               	goto	l8384
  2868                           
  2869                           ; BSR set to: 0
  2870  002C76  0E6C               	movlw	108
  2871  002C78  0100               	movlb	0	; () banked
  2872  002C7A  19DF               	xorwf	_state& (0+255),w,b
  2873  002C7C  B4D8               	btfsc	status,2,c
  2874  002C7E  D005               	goto	l8384
  2875                           
  2876                           ; BSR set to: 0
  2877  002C80  0E63               	movlw	99
  2878  002C82  0100               	movlb	0	; () banked
  2879  002C84  19DF               	xorwf	_state& (0+255),w,b
  2880  002C86  A4D8               	btfss	status,2,c
  2881  002C88  D00E               	goto	l8388
  2882  002C8A                     l8384:
  2883                           
  2884                           ; BSR set to: 0
  2885  002C8A  0100               	movlb	0	; () banked
  2886  002C8C  BFFB               	btfsc	(_timeDiff+1)& (0+255),7,b
  2887  002C8E  D00B               	goto	l8388
  2888  002C90  0100               	movlb	0	; () banked
  2889  002C92  51FB               	movf	(_timeDiff+1)& (0+255),w,b
  2890  002C94  E105               	bnz	u14110
  2891  002C96  0E0A               	movlw	10
  2892  002C98  0100               	movlb	0	; () banked
  2893  002C9A  5DFA               	subwf	_timeDiff& (0+255),w,b
  2894  002C9C  A0D8               	btfss	status,0,c
  2895  002C9E  D003               	goto	l8388
  2896  002CA0                     u14110:
  2897                           
  2898                           ; BSR set to: 0
  2899                           ;main.c: 290: nstate='r';
  2900  002CA0  0E72               	movlw	114
  2901  002CA2  0100               	movlb	0	; () banked
  2902  002CA4  6FDE               	movwf	_nstate& (0+255),b
  2903  002CA6                     l8388:
  2904                           
  2905                           ; BSR set to: 0
  2906                           ;main.c: 291: }
  2907                           ;main.c: 293: if (nstate!='m'&&nstate!='l'&&nstate!='c')
  2908  002CA6  0E6D               	movlw	109
  2909  002CA8  0100               	movlb	0	; () banked
  2910  002CAA  19DE               	xorwf	_nstate& (0+255),w,b
  2911  002CAC  B4D8               	btfsc	status,2,c
  2912  002CAE  D019               	goto	l8396
  2913                           
  2914                           ; BSR set to: 0
  2915  002CB0  0E6C               	movlw	108
  2916  002CB2  0100               	movlb	0	; () banked
  2917  002CB4  19DE               	xorwf	_nstate& (0+255),w,b
  2918  002CB6  B4D8               	btfsc	status,2,c
  2919  002CB8  D014               	goto	l8396
  2920                           
  2921                           ; BSR set to: 0
  2922  002CBA  0E63               	movlw	99
  2923  002CBC  0100               	movlb	0	; () banked
  2924  002CBE  19DE               	xorwf	_nstate& (0+255),w,b
  2925  002CC0  B4D8               	btfsc	status,2,c
  2926  002CC2  D00F               	goto	l8396
  2927                           
  2928                           ; BSR set to: 0
  2929                           ;main.c: 294: {
  2930                           ;main.c: 295: menuIndex=1;
  2931  002CC4  0E00               	movlw	0
  2932  002CC6  0100               	movlb	0	; () banked
  2933  002CC8  6FEB               	movwf	(_menuIndex+1)& (0+255),b
  2934  002CCA  0E01               	movlw	1
  2935  002CCC  6FEA               	movwf	_menuIndex& (0+255),b
  2936                           
  2937                           ;main.c: 296: logIndex=1;
  2938  002CCE  0E00               	movlw	0
  2939  002CD0  0100               	movlb	0	; () banked
  2940  002CD2  6FE9               	movwf	(_logIndex+1)& (0+255),b
  2941  002CD4  0E01               	movlw	1
  2942  002CD6  6FE8               	movwf	_logIndex& (0+255),b
  2943                           
  2944                           ;main.c: 297: creditIndex=1;
  2945  002CD8  0E00               	movlw	0
  2946  002CDA  0100               	movlb	0	; () banked
  2947  002CDC  6FE1               	movwf	(_creditIndex+1)& (0+255),b
  2948  002CDE  0E01               	movlw	1
  2949  002CE0  6FE0               	movwf	_creditIndex& (0+255),b
  2950  002CE2                     l8396:
  2951                           
  2952                           ; BSR set to: 0
  2953                           ;main.c: 298: }
  2954                           ;main.c: 299: if (nstate!='s')
  2955  002CE2  0E73               	movlw	115
  2956  002CE4  0100               	movlb	0	; () banked
  2957  002CE6  19DE               	xorwf	_nstate& (0+255),w,b
  2958  002CE8  B4D8               	btfsc	status,2,c
  2959  002CEA  D005               	goto	l8400
  2960                           
  2961                           ; BSR set to: 0
  2962                           ;main.c: 300: sortIndex=1;
  2963  002CEC  0E00               	movlw	0
  2964  002CEE  0100               	movlb	0	; () banked
  2965  002CF0  6FDD               	movwf	(_sortIndex+1)& (0+255),b
  2966  002CF2  0E01               	movlw	1
  2967  002CF4  6FDC               	movwf	_sortIndex& (0+255),b
  2968  002CF6                     l8400:
  2969                           
  2970                           ; BSR set to: 0
  2971                           ;main.c: 301: if (nstate!='e')
  2972  002CF6  0E65               	movlw	101
  2973  002CF8  0100               	movlb	0	; () banked
  2974  002CFA  19DE               	xorwf	_nstate& (0+255),w,b
  2975  002CFC  B4D8               	btfsc	status,2,c
  2976  002CFE  D005               	goto	l8404
  2977                           
  2978                           ; BSR set to: 0
  2979                           ;main.c: 302: endIndex=1;
  2980  002D00  0E00               	movlw	0
  2981  002D02  0100               	movlb	0	; () banked
  2982  002D04  6FE5               	movwf	(_endIndex+1)& (0+255),b
  2983  002D06  0E01               	movlw	1
  2984  002D08  6FE4               	movwf	_endIndex& (0+255),b
  2985  002D0A                     l8404:
  2986                           
  2987                           ; BSR set to: 0
  2988                           ;main.c: 304: state=nstate;
  2989  002D0A  C0DE  F0DF         	movff	_nstate,_state
  2990                           
  2991                           ; BSR set to: 0
  2992                           ;main.c: 312: if (state=='r'){
  2993  002D0E  0E72               	movlw	114
  2994  002D10  0100               	movlb	0	; () banked
  2995  002D12  19DF               	xorwf	_state& (0+255),w,b
  2996  002D14  A4D8               	btfss	status,2,c
  2997  002D16  0012               	return	
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;main.c: 313: eskaNoCap=0;
  3001  002D18  0E00               	movlw	0
  3002  002D1A  0100               	movlb	0	; () banked
  3003  002D1C  6FF3               	movwf	(_eskaNoCap+1)& (0+255),b
  3004  002D1E  0E00               	movlw	0
  3005  002D20  6FF2               	movwf	_eskaNoCap& (0+255),b
  3006                           
  3007                           ;main.c: 314: eskaWCap=0;
  3008  002D22  0E00               	movlw	0
  3009  002D24  0100               	movlb	0	; () banked
  3010  002D26  6FF5               	movwf	(_eskaWCap+1)& (0+255),b
  3011  002D28  0E00               	movlw	0
  3012  002D2A  6FF4               	movwf	_eskaWCap& (0+255),b
  3013                           
  3014                           ;main.c: 315: yopNoCap=0;
  3015  002D2C  0E00               	movlw	0
  3016  002D2E  0100               	movlb	0	; () banked
  3017  002D30  6FFD               	movwf	(_yopNoCap+1)& (0+255),b
  3018  002D32  0E00               	movlw	0
  3019  002D34  6FFC               	movwf	_yopNoCap& (0+255),b
  3020                           
  3021                           ;main.c: 316: yopWCap=0;
  3022  002D36  0E00               	movlw	0
  3023  002D38  0100               	movlb	0	; () banked
  3024  002D3A  6FFF               	movwf	(_yopWCap+1)& (0+255),b
  3025  002D3C  0E00               	movlw	0
  3026  002D3E  6FFE               	movwf	_yopWCap& (0+255),b
  3027  002D40  0012               	return	
  3028  002D42                     __end_of_update_state:
  3029                           	opt stack 0
  3030                           tblptru	equ	0xFF8
  3031                           tblptrh	equ	0xFF7
  3032                           tblptrl	equ	0xFF6
  3033                           tablat	equ	0xFF5
  3034                           prodh	equ	0xFF4
  3035                           prodl	equ	0xFF3
  3036                           intcon	equ	0xFF2
  3037                           intcon2	equ	0xFF1
  3038                           intcon3	equ	0xFF0
  3039                           postinc0	equ	0xFEE
  3040                           wreg	equ	0xFE8
  3041                           postinc1	equ	0xFE6
  3042                           postdec1	equ	0xFE5
  3043                           fsr1h	equ	0xFE2
  3044                           fsr1l	equ	0xFE1
  3045                           postinc2	equ	0xFDE
  3046                           postdec2	equ	0xFDD
  3047                           fsr2h	equ	0xFDA
  3048                           fsr2l	equ	0xFD9
  3049                           status	equ	0xFD8
  3050                           
  3051 ;; *************** function _update_lcd *****************
  3052 ;; Defined at:
  3053 ;;		line 162 in file "main.c"
  3054 ;; Parameters:    Size  Location     Type
  3055 ;;		None
  3056 ;; Auto vars:     Size  Location     Type
  3057 ;;  flag            2   43[BANK0 ] int 
  3058 ;;  j               2    0        int 
  3059 ;;  i               2    0        int 
  3060 ;; Return value:  Size  Location     Type
  3061 ;;                  1    wreg      void 
  3062 ;; Registers used:
  3063 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3064 ;; Tracked objects:
  3065 ;;		On entry : 0/0
  3066 ;;		On exit  : 0/0
  3067 ;;		Unchanged: 0/0
  3068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3070 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3071 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3072 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3073 ;;Total ram usage:        3 bytes
  3074 ;; Hardware stack levels used:    1
  3075 ;; Hardware stack levels required when called:    9
  3076 ;; This function calls:
  3077 ;;		_lcdInst
  3078 ;;		_printf
  3079 ;;		_strcmp
  3080 ;;		_strcpy
  3081 ;; This function is called by:
  3082 ;;		_main
  3083 ;; This function uses a non-reentrant model
  3084 ;;
  3085                           
  3086                           	psect	text2
  3087  00340C                     __ptext2:
  3088                           	opt stack 0
  3089  00340C                     _update_lcd:
  3090                           	opt stack 21
  3091                           
  3092                           ;main.c: 163: int flag=0;
  3093                           
  3094                           ; BSR set to: 0
  3095                           ;incstack = 0
  3096  00340C  0E00               	movlw	0
  3097  00340E  0100               	movlb	0	; () banked
  3098  003410  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  3099  003412  0E00               	movlw	0
  3100  003414  6FAB               	movwf	update_lcd@flag& (0+255),b
  3101                           
  3102                           ; BSR set to: 0
  3103                           ;main.c: 164: int i,j;
  3104                           ;main.c: 166: if (strcmp(display0, ndisplay0)!=0){
  3105  003416  0E3E               	movlw	low _display0
  3106  003418  0100               	movlb	0	; () banked
  3107  00341A  6F80               	movwf	strcmp@s1& (0+255),b
  3108  00341C  0E01               	movlw	high _display0
  3109  00341E  0100               	movlb	0	; () banked
  3110  003420  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  3111  003422  0E62               	movlw	low _ndisplay0
  3112  003424  0100               	movlb	0	; () banked
  3113  003426  6F82               	movwf	strcmp@s2& (0+255),b
  3114  003428  0E01               	movlw	high _ndisplay0
  3115  00342A  0100               	movlb	0	; () banked
  3116  00342C  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  3117  00342E  EC38  F01D         	call	_strcmp	;wreg free
  3118  003432  0100               	movlb	0	; () banked
  3119  003434  5180               	movf	?_strcmp& (0+255),w,b
  3120  003436  0100               	movlb	0	; () banked
  3121  003438  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  3122  00343A  B4D8               	btfsc	status,2,c
  3123  00343C  D013               	goto	l8468
  3124                           
  3125                           ; BSR set to: 0
  3126                           ;main.c: 167: strcpy(display0,ndisplay0);
  3127  00343E  0E3E               	movlw	low _display0
  3128  003440  0100               	movlb	0	; () banked
  3129  003442  6F80               	movwf	strcpy@to& (0+255),b
  3130  003444  0E01               	movlw	high _display0
  3131  003446  0100               	movlb	0	; () banked
  3132  003448  6F81               	movwf	(strcpy@to+1)& (0+255),b
  3133  00344A  0E62               	movlw	low _ndisplay0
  3134  00344C  0100               	movlb	0	; () banked
  3135  00344E  6F82               	movwf	strcpy@from& (0+255),b
  3136  003450  0E01               	movlw	high _ndisplay0
  3137  003452  0100               	movlb	0	; () banked
  3138  003454  6F83               	movwf	(strcpy@from+1)& (0+255),b
  3139  003456  EC81  F01E         	call	_strcpy	;wreg free
  3140                           
  3141                           ;main.c: 168: flag=1;
  3142  00345A  0E00               	movlw	0
  3143  00345C  0100               	movlb	0	; () banked
  3144  00345E  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  3145  003460  0E01               	movlw	1
  3146  003462  6FAB               	movwf	update_lcd@flag& (0+255),b
  3147  003464                     l8468:
  3148                           
  3149                           ; BSR set to: 0
  3150                           ;main.c: 169: }
  3151                           ;main.c: 170: if (strcmp(display1, ndisplay1)!=0){
  3152  003464  0E50               	movlw	low _display1
  3153  003466  0100               	movlb	0	; () banked
  3154  003468  6F80               	movwf	strcmp@s1& (0+255),b
  3155  00346A  0E01               	movlw	high _display1
  3156  00346C  0100               	movlb	0	; () banked
  3157  00346E  6F81               	movwf	(strcmp@s1+1)& (0+255),b
  3158  003470  0E74               	movlw	low _ndisplay1
  3159  003472  0100               	movlb	0	; () banked
  3160  003474  6F82               	movwf	strcmp@s2& (0+255),b
  3161  003476  0E01               	movlw	high _ndisplay1
  3162  003478  0100               	movlb	0	; () banked
  3163  00347A  6F83               	movwf	(strcmp@s2+1)& (0+255),b
  3164  00347C  EC38  F01D         	call	_strcmp	;wreg free
  3165  003480  0100               	movlb	0	; () banked
  3166  003482  5180               	movf	?_strcmp& (0+255),w,b
  3167  003484  0100               	movlb	0	; () banked
  3168  003486  1181               	iorwf	(?_strcmp+1)& (0+255),w,b
  3169  003488  B4D8               	btfsc	status,2,c
  3170  00348A  D013               	goto	l8474
  3171                           
  3172                           ; BSR set to: 0
  3173                           ;main.c: 171: strcpy(display1,ndisplay1);
  3174  00348C  0E50               	movlw	low _display1
  3175  00348E  0100               	movlb	0	; () banked
  3176  003490  6F80               	movwf	strcpy@to& (0+255),b
  3177  003492  0E01               	movlw	high _display1
  3178  003494  0100               	movlb	0	; () banked
  3179  003496  6F81               	movwf	(strcpy@to+1)& (0+255),b
  3180  003498  0E74               	movlw	low _ndisplay1
  3181  00349A  0100               	movlb	0	; () banked
  3182  00349C  6F82               	movwf	strcpy@from& (0+255),b
  3183  00349E  0E01               	movlw	high _ndisplay1
  3184  0034A0  0100               	movlb	0	; () banked
  3185  0034A2  6F83               	movwf	(strcpy@from+1)& (0+255),b
  3186  0034A4  EC81  F01E         	call	_strcpy	;wreg free
  3187                           
  3188                           ;main.c: 172: flag=1;
  3189  0034A8  0E00               	movlw	0
  3190  0034AA  0100               	movlb	0	; () banked
  3191  0034AC  6FAC               	movwf	(update_lcd@flag+1)& (0+255),b
  3192  0034AE  0E01               	movlw	1
  3193  0034B0  6FAB               	movwf	update_lcd@flag& (0+255),b
  3194  0034B2                     l8474:
  3195                           
  3196                           ; BSR set to: 0
  3197                           ;main.c: 173: }
  3198                           ;main.c: 174: if (flag){
  3199  0034B2  0100               	movlb	0	; () banked
  3200  0034B4  51AB               	movf	update_lcd@flag& (0+255),w,b
  3201  0034B6  0100               	movlb	0	; () banked
  3202  0034B8  11AC               	iorwf	(update_lcd@flag+1)& (0+255),w,b
  3203  0034BA  B4D8               	btfsc	status,2,c
  3204  0034BC  0012               	return	
  3205                           
  3206                           ; BSR set to: 0
  3207                           ;main.c: 175: lcdInst(0x01);_delay((unsigned long)((10)*(10000000/4000.0)));;
  3208  0034BE  0E01               	movlw	1
  3209  0034C0  EC1E  F01F         	call	_lcdInst
  3210  0034C4  0E21               	movlw	33
  3211  0034C6  0100               	movlb	0	; () banked
  3212  0034C8  6FAA               	movwf	??_update_lcd& (0+255),b
  3213  0034CA  0E76               	movlw	118
  3214  0034CC                     u14747:
  3215  0034CC  2EE8               	decfsz	wreg,f,c
  3216  0034CE  D7FE               	bra	u14747
  3217  0034D0  2FAA               	decfsz	??_update_lcd& (0+255),f,b
  3218  0034D2  D7FC               	bra	u14747
  3219  0034D4  F000               	nop	
  3220                           
  3221                           ;main.c: 176: lcdInst(0b10000000);;
  3222  0034D6  0E80               	movlw	128
  3223  0034D8  EC1E  F01F         	call	_lcdInst
  3224                           
  3225                           ;main.c: 177: printf(display0);
  3226  0034DC  0E3E               	movlw	low _display0
  3227  0034DE  0100               	movlb	0	; () banked
  3228  0034E0  6FA2               	movwf	printf@f& (0+255),b
  3229  0034E2  0E01               	movlw	high _display0
  3230  0034E4  0100               	movlb	0	; () banked
  3231  0034E6  6FA3               	movwf	(printf@f+1)& (0+255),b
  3232  0034E8  ECE0  F01D         	call	_printf	;wreg free
  3233                           
  3234                           ;main.c: 178: lcdInst(0b11000000);;
  3235  0034EC  0EC0               	movlw	192
  3236  0034EE  EC1E  F01F         	call	_lcdInst
  3237                           
  3238                           ;main.c: 179: printf(display1);
  3239  0034F2  0E50               	movlw	low _display1
  3240  0034F4  0100               	movlb	0	; () banked
  3241  0034F6  6FA2               	movwf	printf@f& (0+255),b
  3242  0034F8  0E01               	movlw	high _display1
  3243  0034FA  0100               	movlb	0	; () banked
  3244  0034FC  6FA3               	movwf	(printf@f+1)& (0+255),b
  3245  0034FE  ECE0  F01D         	call	_printf	;wreg free
  3246                           
  3247                           ;main.c: 180: lcdInst(0b10010000);;
  3248  003502  0E90               	movlw	144
  3249  003504  EC1E  F01F         	call	_lcdInst
  3250  003508  0012               	return	
  3251  00350A                     __end_of_update_lcd:
  3252                           	opt stack 0
  3253                           tblptru	equ	0xFF8
  3254                           tblptrh	equ	0xFF7
  3255                           tblptrl	equ	0xFF6
  3256                           tablat	equ	0xFF5
  3257                           prodh	equ	0xFF4
  3258                           prodl	equ	0xFF3
  3259                           intcon	equ	0xFF2
  3260                           intcon2	equ	0xFF1
  3261                           intcon3	equ	0xFF0
  3262                           postinc0	equ	0xFEE
  3263                           wreg	equ	0xFE8
  3264                           postinc1	equ	0xFE6
  3265                           postdec1	equ	0xFE5
  3266                           fsr1h	equ	0xFE2
  3267                           fsr1l	equ	0xFE1
  3268                           postinc2	equ	0xFDE
  3269                           postdec2	equ	0xFDD
  3270                           fsr2h	equ	0xFDA
  3271                           fsr2l	equ	0xFD9
  3272                           status	equ	0xFD8
  3273                           
  3274 ;; *************** function _strcpy *****************
  3275 ;; Defined at:
  3276 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcpy.c"
  3277 ;; Parameters:    Size  Location     Type
  3278 ;;  to              2    0[BANK0 ] PTR unsigned char 
  3279 ;;		 -> display1(18), display0(18), 
  3280 ;;  from            2    2[BANK0 ] PTR const unsigned char 
  3281 ;;		 -> ndisplay1(18), ndisplay0(18), 
  3282 ;; Auto vars:     Size  Location     Type
  3283 ;;  cp              2    4[BANK0 ] PTR unsigned char 
  3284 ;;		 -> display1(18), display0(18), 
  3285 ;; Return value:  Size  Location     Type
  3286 ;;                  2    0[BANK0 ] PTR unsigned char 
  3287 ;; Registers used:
  3288 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  3289 ;; Tracked objects:
  3290 ;;		On entry : 0/0
  3291 ;;		On exit  : 0/0
  3292 ;;		Unchanged: 0/0
  3293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3294 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3295 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3297 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3298 ;;Total ram usage:        6 bytes
  3299 ;; Hardware stack levels used:    1
  3300 ;; Hardware stack levels required when called:    5
  3301 ;; This function calls:
  3302 ;;		Nothing
  3303 ;; This function is called by:
  3304 ;;		_update_lcd
  3305 ;; This function uses a non-reentrant model
  3306 ;;
  3307                           
  3308                           	psect	text3
  3309  003D02                     __ptext3:
  3310                           	opt stack 0
  3311  003D02                     _strcpy:
  3312                           	opt stack 24
  3313                           
  3314                           ;incstack = 0
  3315  003D02  C080  F084         	movff	strcpy@to,strcpy@cp
  3316  003D06  C081  F085         	movff	strcpy@to+1,strcpy@cp+1
  3317  003D0A  D006               	goto	l4904
  3318  003D0C                     l4902:
  3319  003D0C  0100               	movlb	0	; () banked
  3320  003D0E  4B84               	infsnz	strcpy@cp& (0+255),f,b
  3321  003D10  2B85               	incf	(strcpy@cp+1)& (0+255),f,b
  3322  003D12  0100               	movlb	0	; () banked
  3323  003D14  4B82               	infsnz	strcpy@from& (0+255),f,b
  3324  003D16  2B83               	incf	(strcpy@from+1)& (0+255),f,b
  3325  003D18                     l4904:
  3326  003D18  C082  FFD9         	movff	strcpy@from,fsr2l
  3327  003D1C  C083  FFDA         	movff	strcpy@from+1,fsr2h
  3328  003D20  C084  FFE1         	movff	strcpy@cp,fsr1l
  3329  003D24  C085  FFE2         	movff	strcpy@cp+1,fsr1h
  3330  003D28  CFDF FFE7          	movff	indf2,indf1
  3331  003D2C  50E7               	movf	indf1,w,c
  3332  003D2E  B4D8               	btfsc	status,2,c
  3333  003D30  0012               	return	
  3334  003D32  D7EC               	goto	l4902
  3335  003D34                     __end_of_strcpy:
  3336                           	opt stack 0
  3337                           tblptru	equ	0xFF8
  3338                           tblptrh	equ	0xFF7
  3339                           tblptrl	equ	0xFF6
  3340                           tablat	equ	0xFF5
  3341                           prodh	equ	0xFF4
  3342                           prodl	equ	0xFF3
  3343                           intcon	equ	0xFF2
  3344                           intcon2	equ	0xFF1
  3345                           intcon3	equ	0xFF0
  3346                           postinc0	equ	0xFEE
  3347                           wreg	equ	0xFE8
  3348                           indf1	equ	0xFE7
  3349                           postinc1	equ	0xFE6
  3350                           postdec1	equ	0xFE5
  3351                           fsr1h	equ	0xFE2
  3352                           fsr1l	equ	0xFE1
  3353                           indf2	equ	0xFDF
  3354                           postinc2	equ	0xFDE
  3355                           postdec2	equ	0xFDD
  3356                           fsr2h	equ	0xFDA
  3357                           fsr2l	equ	0xFD9
  3358                           status	equ	0xFD8
  3359                           
  3360 ;; *************** function _strcmp *****************
  3361 ;; Defined at:
  3362 ;;		line 33 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\strcmp.c"
  3363 ;; Parameters:    Size  Location     Type
  3364 ;;  s1              2    0[BANK0 ] PTR const unsigned char 
  3365 ;;		 -> display1(18), display0(18), 
  3366 ;;  s2              2    2[BANK0 ] PTR const unsigned char 
  3367 ;;		 -> ndisplay1(18), ndisplay0(18), 
  3368 ;; Auto vars:     Size  Location     Type
  3369 ;;  r               1    5[BANK0 ] char 
  3370 ;; Return value:  Size  Location     Type
  3371 ;;                  2    0[BANK0 ] int 
  3372 ;; Registers used:
  3373 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  3374 ;; Tracked objects:
  3375 ;;		On entry : 0/0
  3376 ;;		On exit  : 0/0
  3377 ;;		Unchanged: 0/0
  3378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3379 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3380 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3381 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3382 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3383 ;;Total ram usage:        6 bytes
  3384 ;; Hardware stack levels used:    1
  3385 ;; Hardware stack levels required when called:    5
  3386 ;; This function calls:
  3387 ;;		Nothing
  3388 ;; This function is called by:
  3389 ;;		_update_lcd
  3390 ;; This function uses a non-reentrant model
  3391 ;;
  3392                           
  3393                           	psect	text4
  3394  003A70                     __ptext4:
  3395                           	opt stack 0
  3396  003A70                     _strcmp:
  3397                           	opt stack 24
  3398                           
  3399                           ;incstack = 0
  3400  003A70  D006               	goto	l4892
  3401  003A72                     l4890:
  3402  003A72  0100               	movlb	0	; () banked
  3403  003A74  4B80               	infsnz	strcmp@s1& (0+255),f,b
  3404  003A76  2B81               	incf	(strcmp@s1+1)& (0+255),f,b
  3405  003A78  0100               	movlb	0	; () banked
  3406  003A7A  4B82               	infsnz	strcmp@s2& (0+255),f,b
  3407  003A7C  2B83               	incf	(strcmp@s2+1)& (0+255),f,b
  3408  003A7E                     l4892:
  3409  003A7E  C080  FFD9         	movff	strcmp@s1,fsr2l
  3410  003A82  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3411  003A86  50DF               	movf	indf2,w,c
  3412  003A88  0100               	movlb	0	; () banked
  3413  003A8A  6F84               	movwf	??_strcmp& (0+255),b
  3414  003A8C  C082  FFD9         	movff	strcmp@s2,fsr2l
  3415  003A90  C083  FFDA         	movff	strcmp@s2+1,fsr2h
  3416  003A94  50DF               	movf	indf2,w,c
  3417  003A96  0800               	sublw	0
  3418  003A98  0100               	movlb	0	; () banked
  3419  003A9A  2584               	addwf	??_strcmp& (0+255),w,b
  3420  003A9C  0100               	movlb	0	; () banked
  3421  003A9E  6F85               	movwf	strcmp@r& (0+255),b
  3422  003AA0  0100               	movlb	0	; () banked
  3423  003AA2  5185               	movf	strcmp@r& (0+255),w,b
  3424  003AA4  A4D8               	btfss	status,2,c
  3425  003AA6  D007               	goto	l4896
  3426                           
  3427                           ; BSR set to: 0
  3428  003AA8  C080  FFD9         	movff	strcmp@s1,fsr2l
  3429  003AAC  C081  FFDA         	movff	strcmp@s1+1,fsr2h
  3430  003AB0  50DF               	movf	indf2,w,c
  3431  003AB2  A4D8               	btfss	status,2,c
  3432  003AB4  D7DE               	goto	l4890
  3433  003AB6                     l4896:
  3434                           
  3435                           ; BSR set to: 0
  3436  003AB6  0100               	movlb	0	; () banked
  3437  003AB8  5185               	movf	strcmp@r& (0+255),w,b
  3438  003ABA  0100               	movlb	0	; () banked
  3439  003ABC  6F80               	movwf	?_strcmp& (0+255),b
  3440  003ABE  6B81               	clrf	(?_strcmp+1)& (0+255),b
  3441  003AC0  BF80               	btfsc	?_strcmp& (0+255),7,b
  3442  003AC2  0781               	decf	(?_strcmp+1)& (0+255),f,b
  3443  003AC4  0012               	return	
  3444  003AC6                     __end_of_strcmp:
  3445                           	opt stack 0
  3446                           tblptru	equ	0xFF8
  3447                           tblptrh	equ	0xFF7
  3448                           tblptrl	equ	0xFF6
  3449                           tablat	equ	0xFF5
  3450                           prodh	equ	0xFF4
  3451                           prodl	equ	0xFF3
  3452                           intcon	equ	0xFF2
  3453                           intcon2	equ	0xFF1
  3454                           intcon3	equ	0xFF0
  3455                           postinc0	equ	0xFEE
  3456                           wreg	equ	0xFE8
  3457                           indf1	equ	0xFE7
  3458                           postinc1	equ	0xFE6
  3459                           postdec1	equ	0xFE5
  3460                           fsr1h	equ	0xFE2
  3461                           fsr1l	equ	0xFE1
  3462                           indf2	equ	0xFDF
  3463                           postinc2	equ	0xFDE
  3464                           postdec2	equ	0xFDD
  3465                           fsr2h	equ	0xFDA
  3466                           fsr2l	equ	0xFD9
  3467                           status	equ	0xFD8
  3468                           
  3469 ;; *************** function _printf *****************
  3470 ;; Defined at:
  3471 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
  3472 ;; Parameters:    Size  Location     Type
  3473 ;;  f               2   34[BANK0 ] PTR const unsigned char 
  3474 ;;		 -> STR_27(14), STR_26(15), STR_25(8), display1(18), 
  3475 ;;		 -> display0(18), 
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;  pb              4   38[BANK0 ] struct __prbuf
  3478 ;;  ap              2   36[BANK0 ] PTR void [1]
  3479 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
  3480 ;; Return value:  Size  Location     Type
  3481 ;;                  2   34[BANK0 ] int 
  3482 ;; Registers used:
  3483 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3484 ;; Tracked objects:
  3485 ;;		On entry : 0/0
  3486 ;;		On exit  : 0/0
  3487 ;;		Unchanged: 0/0
  3488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3489 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3490 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3492 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3493 ;;Total ram usage:        8 bytes
  3494 ;; Hardware stack levels used:    1
  3495 ;; Hardware stack levels required when called:    8
  3496 ;; This function calls:
  3497 ;;		__doprnt
  3498 ;; This function is called by:
  3499 ;;		_update_lcd
  3500 ;; This function uses a non-reentrant model
  3501 ;;
  3502                           
  3503                           	psect	text5
  3504  003BC0                     __ptext5:
  3505                           	opt stack 0
  3506  003BC0                     _printf:
  3507                           	opt stack 21
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;incstack = 0
  3511  003BC0  0E00               	movlw	0
  3512  003BC2  0100               	movlb	0	; () banked
  3513  003BC4  6FA6               	movwf	printf@pb& (0+255),b
  3514  003BC6  0E00               	movlw	0
  3515  003BC8  0100               	movlb	0	; () banked
  3516  003BCA  6FA7               	movwf	(printf@pb+1)& (0+255),b
  3517  003BCC  0E12               	movlw	low _putch
  3518  003BCE  0100               	movlb	0	; () banked
  3519  003BD0  6FA8               	movwf	(printf@pb+2)& (0+255),b
  3520  003BD2  0E3E               	movlw	high _putch
  3521  003BD4  0100               	movlb	0	; () banked
  3522  003BD6  6FA9               	movwf	(printf@pb+3)& (0+255),b
  3523  003BD8  0EA4               	movlw	low (?_printf+2)
  3524  003BDA  0100               	movlb	0	; () banked
  3525  003BDC  6FA4               	movwf	printf@ap& (0+255),b
  3526  003BDE  0E00               	movlw	high (?_printf+2)
  3527  003BE0  0100               	movlb	0	; () banked
  3528  003BE2  6FA5               	movwf	(printf@ap+1)& (0+255),b
  3529                           
  3530                           ; BSR set to: 0
  3531                           ;	Return value of _printf is never used
  3532  003BE4  0EA6               	movlw	low printf@pb
  3533  003BE6  0100               	movlb	0	; () banked
  3534  003BE8  6F8C               	movwf	__doprnt@pb& (0+255),b
  3535  003BEA  0E00               	movlw	high printf@pb
  3536  003BEC  0100               	movlb	0	; () banked
  3537  003BEE  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  3538  003BF0  C0A2  F08E         	movff	printf@f,__doprnt@f
  3539  003BF4  C0A3  F08F         	movff	printf@f+1,__doprnt@f+1
  3540  003BF8  0EA4               	movlw	low printf@ap
  3541  003BFA  0100               	movlb	0	; () banked
  3542  003BFC  6F90               	movwf	__doprnt@ap& (0+255),b
  3543  003BFE  0E00               	movlw	high printf@ap
  3544  003C00  0100               	movlb	0	; () banked
  3545  003C02  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  3546  003C04  EC09  F000         	call	__doprnt	;wreg free
  3547  003C08  0012               	return	
  3548  003C0A                     __end_of_printf:
  3549                           	opt stack 0
  3550                           tblptru	equ	0xFF8
  3551                           tblptrh	equ	0xFF7
  3552                           tblptrl	equ	0xFF6
  3553                           tablat	equ	0xFF5
  3554                           prodh	equ	0xFF4
  3555                           prodl	equ	0xFF3
  3556                           intcon	equ	0xFF2
  3557                           intcon2	equ	0xFF1
  3558                           intcon3	equ	0xFF0
  3559                           postinc0	equ	0xFEE
  3560                           wreg	equ	0xFE8
  3561                           indf1	equ	0xFE7
  3562                           postinc1	equ	0xFE6
  3563                           postdec1	equ	0xFE5
  3564                           fsr1h	equ	0xFE2
  3565                           fsr1l	equ	0xFE1
  3566                           indf2	equ	0xFDF
  3567                           postinc2	equ	0xFDE
  3568                           postdec2	equ	0xFDD
  3569                           fsr2h	equ	0xFDA
  3570                           fsr2l	equ	0xFD9
  3571                           status	equ	0xFD8
  3572                           
  3573 ;; *************** function _update_display *****************
  3574 ;; Defined at:
  3575 ;;		line 202 in file "main.c"
  3576 ;; Parameters:    Size  Location     Type
  3577 ;;		None
  3578 ;; Auto vars:     Size  Location     Type
  3579 ;;  i               1    2[BANK1 ] unsigned char 
  3580 ;;  a               2    0[BANK1 ] int 
  3581 ;; Return value:  Size  Location     Type
  3582 ;;                  1    wreg      void 
  3583 ;; Registers used:
  3584 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3585 ;; Tracked objects:
  3586 ;;		On entry : 0/0
  3587 ;;		On exit  : 0/0
  3588 ;;		Unchanged: 0/0
  3589 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3590 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3591 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3592 ;;      Temps:          0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3593 ;;      Totals:         0      11       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3594 ;;Total ram usage:       14 bytes
  3595 ;; Hardware stack levels used:    1
  3596 ;; Hardware stack levels required when called:   10
  3597 ;; This function calls:
  3598 ;;		___awdiv
  3599 ;;		___awmod
  3600 ;;		___wmul
  3601 ;;		__measure
  3602 ;;		_display_menu
  3603 ;;		_readADC
  3604 ;;		_sprintf
  3605 ;; This function is called by:
  3606 ;;		_main
  3607 ;; This function uses a non-reentrant model
  3608 ;;
  3609                           
  3610                           	psect	text6
  3611  001836                     __ptext6:
  3612                           	opt stack 0
  3613  001836                     _update_display:
  3614                           	opt stack 20
  3615                           
  3616                           ;main.c: 203: switch(state)
  3617                           
  3618                           ;incstack = 0
  3619  001836  D271               	goto	l8458
  3620  001838                     l8412:
  3621                           
  3622                           ;main.c: 206: sprintf(ndisplay0,"%02x/%02x/%02x PUSH TO", time[6],time[5],time[4]);
  3623  001838  0E62               	movlw	low _ndisplay0
  3624  00183A  0100               	movlb	0	; () banked
  3625  00183C  6FA2               	movwf	sprintf@wh& (0+255),b
  3626  00183E  0E01               	movlw	high _ndisplay0
  3627  001840  0100               	movlb	0	; () banked
  3628  001842  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3629  001844  0E92               	movlw	low STR_1
  3630  001846  0100               	movlb	0	; () banked
  3631  001848  6FA4               	movwf	sprintf@f& (0+255),b
  3632  00184A  0EFE               	movlw	high STR_1
  3633  00184C  0100               	movlb	0	; () banked
  3634  00184E  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3635  001850  C062  F0A6         	movff	_time+6,?_sprintf+4
  3636  001854  0100               	movlb	0	; () banked
  3637  001856  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3638  001858  C061  F0A8         	movff	_time+5,?_sprintf+6
  3639  00185C  0100               	movlb	0	; () banked
  3640  00185E  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3641  001860  C060  F0AA         	movff	_time+4,?_sprintf+8
  3642  001864  0100               	movlb	0	; () banked
  3643  001866  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3644  001868  EC8E  F01D         	call	_sprintf	;wreg free
  3645                           
  3646                           ;main.c: 207: sprintf(ndisplay1,"%02x:%02x:%02x   START", time[2],time[1],time[0]);
  3647  00186C  0E74               	movlw	low _ndisplay1
  3648  00186E  0100               	movlb	0	; () banked
  3649  001870  6FA2               	movwf	sprintf@wh& (0+255),b
  3650  001872  0E01               	movlw	high _ndisplay1
  3651  001874  0100               	movlb	0	; () banked
  3652  001876  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3653  001878  0EA9               	movlw	low STR_2
  3654  00187A  0100               	movlb	0	; () banked
  3655  00187C  6FA4               	movwf	sprintf@f& (0+255),b
  3656  00187E  0EFE               	movlw	high STR_2
  3657  001880  0100               	movlb	0	; () banked
  3658  001882  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3659  001884  C05E  F0A6         	movff	_time+2,?_sprintf+4
  3660  001888  0100               	movlb	0	; () banked
  3661  00188A  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  3662  00188C  C05D  F0A8         	movff	_time+1,?_sprintf+6
  3663  001890  0100               	movlb	0	; () banked
  3664  001892  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  3665  001894  C05C  F0AA         	movff	_time,?_sprintf+8
  3666  001898  0100               	movlb	0	; () banked
  3667  00189A  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  3668  00189C  EC8E  F01D         	call	_sprintf	;wreg free
  3669                           
  3670                           ;main.c: 208: break;
  3671  0018A0  0012               	return	
  3672  0018A2                     l8414:
  3673                           
  3674                           ;main.c: 210: case 'l':
  3675                           ;main.c: 211: case 'c':
  3676                           ;main.c: 212: case 'e':
  3677                           ;main.c: 213: display_menu();
  3678  0018A2  ECA2  F00E         	call	_display_menu	;wreg free
  3679                           
  3680                           ;main.c: 214: break;
  3681  0018A6  0012               	return	
  3682  0018A8                     l8416:
  3683                           
  3684                           ;main.c: 217: if (sortIndex==1){
  3685  0018A8  0100               	movlb	0	; () banked
  3686  0018AA  05DC               	decf	_sortIndex& (0+255),w,b
  3687  0018AC  0100               	movlb	0	; () banked
  3688  0018AE  11DD               	iorwf	(_sortIndex+1)& (0+255),w,b
  3689  0018B0  A4D8               	btfss	status,2,c
  3690  0018B2  D04B               	goto	l8420
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;main.c: 218: sprintf(ndisplay0,"%d:%02d en:%02d ec:%02d ",(timeDiff/60),timeDiff%60, es
      +                          kaNoCap,eskaWCap);
  3694  0018B4  0E62               	movlw	low _ndisplay0
  3695  0018B6  0100               	movlb	0	; () banked
  3696  0018B8  6FA2               	movwf	sprintf@wh& (0+255),b
  3697  0018BA  0E01               	movlw	high _ndisplay0
  3698  0018BC  0100               	movlb	0	; () banked
  3699  0018BE  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3700  0018C0  0E61               	movlw	low STR_3
  3701  0018C2  0100               	movlb	0	; () banked
  3702  0018C4  6FA4               	movwf	sprintf@f& (0+255),b
  3703  0018C6  0EFE               	movlw	high STR_3
  3704  0018C8  0100               	movlb	0	; () banked
  3705  0018CA  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3706  0018CC  C0FA  F080         	movff	_timeDiff,___awdiv@dividend
  3707  0018D0  C0FB  F081         	movff	_timeDiff+1,___awdiv@dividend+1
  3708  0018D4  0E00               	movlw	0
  3709  0018D6  0100               	movlb	0	; () banked
  3710  0018D8  6F83               	movwf	(___awdiv@divisor+1)& (0+255),b
  3711  0018DA  0E3C               	movlw	60
  3712  0018DC  6F82               	movwf	___awdiv@divisor& (0+255),b
  3713  0018DE  EC85  F01A         	call	___awdiv	;wreg free
  3714  0018E2  C080  F0A6         	movff	?___awdiv,?_sprintf+4
  3715  0018E6  C081  F0A7         	movff	?___awdiv+1,?_sprintf+5
  3716  0018EA  C0FA  F080         	movff	_timeDiff,___awmod@dividend
  3717  0018EE  C0FB  F081         	movff	_timeDiff+1,___awmod@dividend+1
  3718  0018F2  0E00               	movlw	0
  3719  0018F4  0100               	movlb	0	; () banked
  3720  0018F6  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  3721  0018F8  0E3C               	movlw	60
  3722  0018FA  6F82               	movwf	___awmod@divisor& (0+255),b
  3723  0018FC  EC95  F01B         	call	___awmod	;wreg free
  3724  001900  C080  F0A8         	movff	?___awmod,?_sprintf+6
  3725  001904  C081  F0A9         	movff	?___awmod+1,?_sprintf+7
  3726  001908  C0F2  F0AA         	movff	_eskaNoCap,?_sprintf+8
  3727  00190C  C0F3  F0AB         	movff	_eskaNoCap+1,?_sprintf+9
  3728  001910  C0F4  F0AC         	movff	_eskaWCap,?_sprintf+10
  3729  001914  C0F5  F0AD         	movff	_eskaWCap+1,?_sprintf+11
  3730  001918  EC8E  F01D         	call	_sprintf	;wreg free
  3731                           
  3732                           ;main.c: 219: sprintf(ndisplay1,"yn:%02d yc:%02d", yopNoCap, yopWCap);
  3733  00191C  0E74               	movlw	low _ndisplay1
  3734  00191E  0100               	movlb	0	; () banked
  3735  001920  6FA2               	movwf	sprintf@wh& (0+255),b
  3736  001922  0E01               	movlw	high _ndisplay1
  3737  001924  0100               	movlb	0	; () banked
  3738  001926  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3739  001928  0E7B               	movlw	low STR_4
  3740  00192A  0100               	movlb	0	; () banked
  3741  00192C  6FA4               	movwf	sprintf@f& (0+255),b
  3742  00192E  0EFF               	movlw	high STR_4
  3743  001930  0100               	movlb	0	; () banked
  3744  001932  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3745  001934  C0FC  F0A6         	movff	_yopNoCap,?_sprintf+4
  3746  001938  C0FD  F0A7         	movff	_yopNoCap+1,?_sprintf+5
  3747  00193C  C0FE  F0A8         	movff	_yopWCap,?_sprintf+6
  3748  001940  C0FF  F0A9         	movff	_yopWCap+1,?_sprintf+7
  3749  001944  EC8E  F01D         	call	_sprintf	;wreg free
  3750                           
  3751                           ;main.c: 220: }
  3752  001948  0012               	return	
  3753  00194A                     l8420:
  3754                           
  3755                           ;main.c: 222: else if (sortIndex==2){
  3756  00194A  0E02               	movlw	2
  3757  00194C  0100               	movlb	0	; () banked
  3758  00194E  19DC               	xorwf	_sortIndex& (0+255),w,b
  3759  001950  0100               	movlb	0	; () banked
  3760  001952  11DD               	iorwf	(_sortIndex+1)& (0+255),w,b
  3761  001954  A4D8               	btfss	status,2,c
  3762  001956  D02F               	goto	l8424
  3763                           
  3764                           ; BSR set to: 0
  3765                           ;main.c: 223: sprintf(ndisplay0, "RC:%d MC:%d", release_counter, measure_counter);
  3766  001958  0E62               	movlw	low _ndisplay0
  3767  00195A  0100               	movlb	0	; () banked
  3768  00195C  6FA2               	movwf	sprintf@wh& (0+255),b
  3769  00195E  0E01               	movlw	high _ndisplay0
  3770  001960  0100               	movlb	0	; () banked
  3771  001962  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3772  001964  0EC5               	movlw	low STR_5
  3773  001966  0100               	movlb	0	; () banked
  3774  001968  6FA4               	movwf	sprintf@f& (0+255),b
  3775  00196A  0EFF               	movlw	high STR_5
  3776  00196C  0100               	movlb	0	; () banked
  3777  00196E  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3778  001970  C0F8  F0A6         	movff	_release_counter,?_sprintf+4
  3779  001974  C0F9  F0A7         	movff	_release_counter+1,?_sprintf+5
  3780  001978  C0F6  F0A8         	movff	_measure_counter,?_sprintf+6
  3781  00197C  C0F7  F0A9         	movff	_measure_counter+1,?_sprintf+7
  3782  001980  EC8E  F01D         	call	_sprintf	;wreg free
  3783                           
  3784                           ;main.c: 224: sprintf(ndisplay1, "DC:%d MEAS:%d", discretize_counter, _measure());
  3785  001984  0E74               	movlw	low _ndisplay1
  3786  001986  0100               	movlb	0	; () banked
  3787  001988  6FA2               	movwf	sprintf@wh& (0+255),b
  3788  00198A  0E01               	movlw	high _ndisplay1
  3789  00198C  0100               	movlb	0	; () banked
  3790  00198E  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3791  001990  0EA9               	movlw	low STR_6
  3792  001992  0100               	movlb	0	; () banked
  3793  001994  6FA4               	movwf	sprintf@f& (0+255),b
  3794  001996  0EFF               	movlw	high STR_6
  3795  001998  0100               	movlb	0	; () banked
  3796  00199A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3797  00199C  C0F0  F0A6         	movff	_discretize_counter,?_sprintf+4
  3798  0019A0  C0F1  F0A7         	movff	_discretize_counter+1,?_sprintf+5
  3799  0019A4  EC0A  F013         	call	__measure	;wreg free
  3800  0019A8  C086  F0A8         	movff	?__measure,?_sprintf+6
  3801  0019AC  C087  F0A9         	movff	?__measure+1,?_sprintf+7
  3802  0019B0  EC8E  F01D         	call	_sprintf	;wreg free
  3803                           
  3804                           ;main.c: 225: }
  3805  0019B4  0012               	return	
  3806  0019B6                     l8424:
  3807                           
  3808                           ;main.c: 227: else if (sortIndex==3){
  3809  0019B6  0E03               	movlw	3
  3810  0019B8  0100               	movlb	0	; () banked
  3811  0019BA  19DC               	xorwf	_sortIndex& (0+255),w,b
  3812  0019BC  0100               	movlb	0	; () banked
  3813  0019BE  11DD               	iorwf	(_sortIndex+1)& (0+255),w,b
  3814  0019C0  A4D8               	btfss	status,2,c
  3815  0019C2  D037               	goto	l8428
  3816                           
  3817                           ; BSR set to: 0
  3818                           ;main.c: 229: sprintf(ndisplay0, "P1[0-2]:%d,%d,%d", PROX1[0], PROX1[1], PROX1[2]);
  3819  0019C4  0E62               	movlw	low _ndisplay0
  3820  0019C6  0100               	movlb	0	; () banked
  3821  0019C8  6FA2               	movwf	sprintf@wh& (0+255),b
  3822  0019CA  0E01               	movlw	high _ndisplay0
  3823  0019CC  0100               	movlb	0	; () banked
  3824  0019CE  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3825  0019D0  0E5A               	movlw	low STR_7
  3826  0019D2  0100               	movlb	0	; () banked
  3827  0019D4  6FA4               	movwf	sprintf@f& (0+255),b
  3828  0019D6  0EFF               	movlw	high STR_7
  3829  0019D8  0100               	movlb	0	; () banked
  3830  0019DA  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3831  0019DC  C048  F0A6         	movff	_PROX1,?_sprintf+4
  3832  0019E0  C049  F0A7         	movff	_PROX1+1,?_sprintf+5
  3833  0019E4  C04A  F0A8         	movff	_PROX1+2,?_sprintf+6
  3834  0019E8  C04B  F0A9         	movff	_PROX1+3,?_sprintf+7
  3835  0019EC  C04C  F0AA         	movff	_PROX1+4,?_sprintf+8
  3836  0019F0  C04D  F0AB         	movff	_PROX1+5,?_sprintf+9
  3837  0019F4  EC8E  F01D         	call	_sprintf	;wreg free
  3838                           
  3839                           ;main.c: 230: sprintf(ndisplay1, "P2[0-1]:%d,%d M:%d",PROX2[0],PROX2[1], _measure());
  3840  0019F8  0E74               	movlw	low _ndisplay1
  3841  0019FA  0100               	movlb	0	; () banked
  3842  0019FC  6FA2               	movwf	sprintf@wh& (0+255),b
  3843  0019FE  0E01               	movlw	high _ndisplay1
  3844  001A00  0100               	movlb	0	; () banked
  3845  001A02  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3846  001A04  0E11               	movlw	low STR_8
  3847  001A06  0100               	movlb	0	; () banked
  3848  001A08  6FA4               	movwf	sprintf@f& (0+255),b
  3849  001A0A  0EFF               	movlw	high STR_8
  3850  001A0C  0100               	movlb	0	; () banked
  3851  001A0E  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3852  001A10  C052  F0A6         	movff	_PROX2,?_sprintf+4
  3853  001A14  C053  F0A7         	movff	_PROX2+1,?_sprintf+5
  3854  001A18  C054  F0A8         	movff	_PROX2+2,?_sprintf+6
  3855  001A1C  C055  F0A9         	movff	_PROX2+3,?_sprintf+7
  3856  001A20  EC0A  F013         	call	__measure	;wreg free
  3857  001A24  C086  F0AA         	movff	?__measure,?_sprintf+8
  3858  001A28  C087  F0AB         	movff	?__measure+1,?_sprintf+9
  3859  001A2C  EC8E  F01D         	call	_sprintf	;wreg free
  3860                           
  3861                           ;main.c: 231: }
  3862  001A30  0012               	return	
  3863  001A32                     l8428:
  3864                           
  3865                           ;main.c: 232: else if (sortIndex==4){
  3866  001A32  0E04               	movlw	4
  3867  001A34  0100               	movlb	0	; () banked
  3868  001A36  19DC               	xorwf	_sortIndex& (0+255),w,b
  3869  001A38  0100               	movlb	0	; () banked
  3870  001A3A  11DD               	iorwf	(_sortIndex+1)& (0+255),w,b
  3871  001A3C  A4D8               	btfss	status,2,c
  3872  001A3E  D02B               	goto	l8432
  3873                           
  3874                           ; BSR set to: 0
  3875                           ;main.c: 234: sprintf(ndisplay0, "IR1[0]:%04d", IR1[0]);
  3876  001A40  0E62               	movlw	low _ndisplay0
  3877  001A42  0100               	movlb	0	; () banked
  3878  001A44  6FA2               	movwf	sprintf@wh& (0+255),b
  3879  001A46  0E01               	movlw	high _ndisplay0
  3880  001A48  0100               	movlb	0	; () banked
  3881  001A4A  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3882  001A4C  0ED1               	movlw	low STR_9
  3883  001A4E  0100               	movlb	0	; () banked
  3884  001A50  6FA4               	movwf	sprintf@f& (0+255),b
  3885  001A52  0EFF               	movlw	high STR_9
  3886  001A54  0100               	movlb	0	; () banked
  3887  001A56  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3888  001A58  C03E  F0A6         	movff	_IR1,?_sprintf+4
  3889  001A5C  C03F  F0A7         	movff	_IR1+1,?_sprintf+5
  3890  001A60  EC8E  F01D         	call	_sprintf	;wreg free
  3891                           
  3892                           ;main.c: 235: sprintf(ndisplay1, "IR2[0]:%04dM:%d",IR2[0], _measure());
  3893  001A64  0E74               	movlw	low _ndisplay1
  3894  001A66  0100               	movlb	0	; () banked
  3895  001A68  6FA2               	movwf	sprintf@wh& (0+255),b
  3896  001A6A  0E01               	movlw	high _ndisplay1
  3897  001A6C  0100               	movlb	0	; () banked
  3898  001A6E  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3899  001A70  0E6B               	movlw	low STR_10
  3900  001A72  0100               	movlb	0	; () banked
  3901  001A74  6FA4               	movwf	sprintf@f& (0+255),b
  3902  001A76  0EFF               	movlw	high STR_10
  3903  001A78  0100               	movlb	0	; () banked
  3904  001A7A  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3905  001A7C  C134  F0A6         	movff	_IR2,?_sprintf+4
  3906  001A80  C135  F0A7         	movff	_IR2+1,?_sprintf+5
  3907  001A84  EC0A  F013         	call	__measure	;wreg free
  3908  001A88  C086  F0A8         	movff	?__measure,?_sprintf+6
  3909  001A8C  C087  F0A9         	movff	?__measure+1,?_sprintf+7
  3910  001A90  EC8E  F01D         	call	_sprintf	;wreg free
  3911                           
  3912                           ;main.c: 236: }
  3913  001A94  0012               	return	
  3914  001A96                     l8432:
  3915                           
  3916                           ;main.c: 237: else if (sortIndex==5){
  3917  001A96  0E05               	movlw	5
  3918  001A98  0100               	movlb	0	; () banked
  3919  001A9A  19DC               	xorwf	_sortIndex& (0+255),w,b
  3920  001A9C  0100               	movlb	0	; () banked
  3921  001A9E  11DD               	iorwf	(_sortIndex+1)& (0+255),w,b
  3922  001AA0  A4D8               	btfss	status,2,c
  3923  001AA2  D037               	goto	l8436
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;main.c: 239: sprintf(ndisplay0, "PIR:%d%d,%04d,%04d",PROX1[0], PROX2[0], IR1[0], IR2[0]
      +                          );
  3927  001AA4  0E62               	movlw	low _ndisplay0
  3928  001AA6  0100               	movlb	0	; () banked
  3929  001AA8  6FA2               	movwf	sprintf@wh& (0+255),b
  3930  001AAA  0E01               	movlw	high _ndisplay0
  3931  001AAC  0100               	movlb	0	; () banked
  3932  001AAE  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3933  001AB0  0E24               	movlw	low STR_11
  3934  001AB2  0100               	movlb	0	; () banked
  3935  001AB4  6FA4               	movwf	sprintf@f& (0+255),b
  3936  001AB6  0EFF               	movlw	high STR_11
  3937  001AB8  0100               	movlb	0	; () banked
  3938  001ABA  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3939  001ABC  C048  F0A6         	movff	_PROX1,?_sprintf+4
  3940  001AC0  C049  F0A7         	movff	_PROX1+1,?_sprintf+5
  3941  001AC4  C052  F0A8         	movff	_PROX2,?_sprintf+6
  3942  001AC8  C053  F0A9         	movff	_PROX2+1,?_sprintf+7
  3943  001ACC  C03E  F0AA         	movff	_IR1,?_sprintf+8
  3944  001AD0  C03F  F0AB         	movff	_IR1+1,?_sprintf+9
  3945  001AD4  C134  F0AC         	movff	_IR2,?_sprintf+10
  3946  001AD8  C135  F0AD         	movff	_IR2+1,?_sprintf+11
  3947  001ADC  EC8E  F01D         	call	_sprintf	;wreg free
  3948                           
  3949                           ;main.c: 240: sprintf(ndisplay1, "DIST[0]:%04d M:%d",DIST1[0], _measure());
  3950  001AE0  0E74               	movlw	low _ndisplay1
  3951  001AE2  0100               	movlb	0	; () banked
  3952  001AE4  6FA2               	movwf	sprintf@wh& (0+255),b
  3953  001AE6  0E01               	movlw	high _ndisplay1
  3954  001AE8  0100               	movlb	0	; () banked
  3955  001AEA  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  3956  001AEC  0E37               	movlw	low STR_12
  3957  001AEE  0100               	movlb	0	; () banked
  3958  001AF0  6FA4               	movwf	sprintf@f& (0+255),b
  3959  001AF2  0EFF               	movlw	high STR_12
  3960  001AF4  0100               	movlb	0	; () banked
  3961  001AF6  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  3962  001AF8  C12A  F0A6         	movff	_DIST1,?_sprintf+4
  3963  001AFC  C12B  F0A7         	movff	_DIST1+1,?_sprintf+5
  3964  001B00  EC0A  F013         	call	__measure	;wreg free
  3965  001B04  C086  F0A8         	movff	?__measure,?_sprintf+6
  3966  001B08  C087  F0A9         	movff	?__measure+1,?_sprintf+7
  3967  001B0C  EC8E  F01D         	call	_sprintf	;wreg free
  3968                           
  3969                           ;main.c: 241: }
  3970  001B10  0012               	return	
  3971  001B12                     l8436:
  3972                           
  3973                           ;main.c: 243: else if (sortIndex==6){
  3974  001B12  0E06               	movlw	6
  3975  001B14  0100               	movlb	0	; () banked
  3976  001B16  19DC               	xorwf	_sortIndex& (0+255),w,b
  3977  001B18  0100               	movlb	0	; () banked
  3978  001B1A  11DD               	iorwf	(_sortIndex+1)& (0+255),w,b
  3979  001B1C  A4D8               	btfss	status,2,c
  3980  001B1E  0012               	return	
  3981                           
  3982                           ; BSR set to: 0
  3983                           ;main.c: 244: int a=0;
  3984  001B20  0E00               	movlw	0
  3985  001B22  0101               	movlb	1	; () banked
  3986  001B24  6F87               	movwf	(update_display@a+1)& (0+255),b
  3987  001B26  0E00               	movlw	0
  3988  001B28  6F86               	movwf	update_display@a& (0+255),b
  3989                           
  3990                           ;main.c: 245: for (char i=8;i>0;i--){
  3991  001B2A  0E08               	movlw	8
  3992  001B2C  0101               	movlb	1	; () banked
  3993  001B2E  6F88               	movwf	update_display@i& (0+255),b
  3994  001B30  0101               	movlb	1	; () banked
  3995  001B32  5188               	movf	update_display@i& (0+255),w,b
  3996  001B34  0101               	movlb	1	; () banked
  3997  001B36  B4D8               	btfsc	status,2,c
  3998  001B38  D032               	goto	l8452
  3999                           
  4000                           ; BSR set to: 1
  4001                           ;main.c: 246: readADC(i-1);
  4002                           
  4003                           ; BSR set to: 1
  4004                           
  4005                           ; BSR set to: 1
  4006  001B3A  0101               	movlb	1	; () banked
  4007  001B3C  0588               	decf	update_display@i& (0+255),w,b
  4008  001B3E  ECB1  F01E         	call	_readADC
  4009                           
  4010                           ;main.c: 247: a*=10;
  4011  001B42  C186  F080         	movff	update_display@a,___wmul@multiplier
  4012  001B46  C187  F081         	movff	update_display@a+1,___wmul@multiplier+1
  4013  001B4A  0E00               	movlw	0
  4014  001B4C  0100               	movlb	0	; () banked
  4015  001B4E  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4016  001B50  0E0A               	movlw	10
  4017  001B52  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4018  001B54  EC4B  F01E         	call	___wmul	;wreg free
  4019  001B58  C080  F186         	movff	?___wmul,update_display@a
  4020  001B5C  C081  F187         	movff	?___wmul+1,update_display@a+1
  4021                           
  4022                           ;main.c: 248: a+=((ADRESH>>1)&0b1)%10;
  4023  001B60  CFC4 F0CD          	movff	4036,??_update_display	;volatile
  4024  001B64  0100               	movlb	0	; () banked
  4025  001B66  90D8               	bcf	status,0,c
  4026  001B68  33CD               	rrcf	??_update_display& (0+255),f,b
  4027  001B6A  0E01               	movlw	1
  4028  001B6C  0100               	movlb	0	; () banked
  4029  001B6E  17CD               	andwf	??_update_display& (0+255),f,b
  4030  001B70  0100               	movlb	0	; () banked
  4031  001B72  51CD               	movf	??_update_display& (0+255),w,b
  4032  001B74  0100               	movlb	0	; () banked
  4033  001B76  6F80               	movwf	___awmod@dividend& (0+255),b
  4034  001B78  6B81               	clrf	(___awmod@dividend+1)& (0+255),b
  4035  001B7A  0E00               	movlw	0
  4036  001B7C  0100               	movlb	0	; () banked
  4037  001B7E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  4038  001B80  0E0A               	movlw	10
  4039  001B82  6F82               	movwf	___awmod@divisor& (0+255),b
  4040  001B84  EC95  F01B         	call	___awmod	;wreg free
  4041  001B88  0100               	movlb	0	; () banked
  4042  001B8A  5180               	movf	?___awmod& (0+255),w,b
  4043  001B8C  0101               	movlb	1	; () banked
  4044  001B8E  2786               	addwf	update_display@a& (0+255),f,b
  4045  001B90  0100               	movlb	0	; () banked
  4046  001B92  5181               	movf	(?___awmod+1)& (0+255),w,b
  4047  001B94  0101               	movlb	1	; () banked
  4048  001B96  2387               	addwfc	(update_display@a+1)& (0+255),f,b
  4049                           
  4050                           ; BSR set to: 1
  4051  001B98  0101               	movlb	1	; () banked
  4052  001B9A  0788               	decf	update_display@i& (0+255),f,b
  4053  001B9C  D7C9               	goto	L1
  4054  001B9E                     l8452:
  4055                           
  4056                           ; BSR set to: 1
  4057                           ;main.c: 249: }
  4058                           ;main.c: 252: sprintf(ndisplay0, "A:%07d",a);
  4059  001B9E  0E62               	movlw	low _ndisplay0
  4060  001BA0  0100               	movlb	0	; () banked
  4061  001BA2  6FA2               	movwf	sprintf@wh& (0+255),b
  4062  001BA4  0E01               	movlw	high _ndisplay0
  4063  001BA6  0100               	movlb	0	; () banked
  4064  001BA8  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4065  001BAA  0EEC               	movlw	low STR_13
  4066  001BAC  0100               	movlb	0	; () banked
  4067  001BAE  6FA4               	movwf	sprintf@f& (0+255),b
  4068  001BB0  0EFF               	movlw	high STR_13
  4069  001BB2  0100               	movlb	0	; () banked
  4070  001BB4  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4071  001BB6  C186  F0A6         	movff	update_display@a,?_sprintf+4
  4072  001BBA  C187  F0A7         	movff	update_display@a+1,?_sprintf+5
  4073  001BBE  EC8E  F01D         	call	_sprintf	;wreg free
  4074                           
  4075                           ;main.c: 254: sprintf(ndisplay1, "B:%d%d%d%d%d%d%d%d M:%d", (PORTB>>7)&1, (PORTB>>6)&1, 
      +                          (PORTB>>5)&1, (PORTB>>4)&1, (PORTB>3)&1, (PORTB>>2)&1, (PORTB>>1)&1, (PORTB>>0)&1, _meas
      +                          ure());
  4076  001BC2  0E74               	movlw	low _ndisplay1
  4077  001BC4  0100               	movlb	0	; () banked
  4078  001BC6  6FA2               	movwf	sprintf@wh& (0+255),b
  4079  001BC8  0E01               	movlw	high _ndisplay1
  4080  001BCA  0100               	movlb	0	; () banked
  4081  001BCC  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4082  001BCE  0E7A               	movlw	low STR_14
  4083  001BD0  0100               	movlb	0	; () banked
  4084  001BD2  6FA4               	movwf	sprintf@f& (0+255),b
  4085  001BD4  0EFE               	movlw	high STR_14
  4086  001BD6  0100               	movlb	0	; () banked
  4087  001BD8  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4088  001BDA  0100               	movlb	0	; () banked
  4089  001BDC  6BCD               	clrf	??_update_display& (0+255),b
  4090  001BDE  AE81               	btfss	3969,7,c	;volatile
  4091  001BE0  D002               	bra	u14265
  4092  001BE2  0100               	movlb	0	; () banked
  4093  001BE4  2BCD               	incf	??_update_display& (0+255),f,b
  4094  001BE6                     u14265:
  4095  001BE6  0E01               	movlw	1
  4096  001BE8  0100               	movlb	0	; () banked
  4097  001BEA  17CD               	andwf	??_update_display& (0+255),f,b
  4098  001BEC  0100               	movlb	0	; () banked
  4099  001BEE  51CD               	movf	??_update_display& (0+255),w,b
  4100  001BF0  0100               	movlb	0	; () banked
  4101  001BF2  6FA6               	movwf	(?_sprintf+4)& (0+255),b
  4102  001BF4  6BA7               	clrf	(?_sprintf+5)& (0+255),b
  4103  001BF6  CF81 F0CE          	movff	3969,??_update_display+1	;volatile
  4104  001BFA  0E06               	movlw	6
  4105  001BFC  0100               	movlb	0	; () banked
  4106  001BFE  6FCF               	movwf	(??_update_display+2)& (0+255),b
  4107  001C00                     u14275:
  4108  001C00  0100               	movlb	0	; () banked
  4109  001C02  90D8               	bcf	status,0,c
  4110  001C04  33CE               	rrcf	(??_update_display+1)& (0+255),f,b
  4111  001C06  0100               	movlb	0	; () banked
  4112  001C08  2FCF               	decfsz	(??_update_display+2)& (0+255),f,b
  4113  001C0A  D7FA               	goto	u14275
  4114  001C0C  0E01               	movlw	1
  4115  001C0E  0100               	movlb	0	; () banked
  4116  001C10  17CE               	andwf	(??_update_display+1)& (0+255),f,b
  4117  001C12  0100               	movlb	0	; () banked
  4118  001C14  51CE               	movf	(??_update_display+1)& (0+255),w,b
  4119  001C16  0100               	movlb	0	; () banked
  4120  001C18  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4121  001C1A  6BA9               	clrf	(?_sprintf+7)& (0+255),b
  4122  001C1C  CF81 F0D0          	movff	3969,??_update_display+3	;volatile
  4123  001C20  0E05               	movlw	5
  4124  001C22  0100               	movlb	0	; () banked
  4125  001C24  6FD1               	movwf	(??_update_display+4)& (0+255),b
  4126  001C26                     u14285:
  4127  001C26  0100               	movlb	0	; () banked
  4128  001C28  90D8               	bcf	status,0,c
  4129  001C2A  33D0               	rrcf	(??_update_display+3)& (0+255),f,b
  4130  001C2C  0100               	movlb	0	; () banked
  4131  001C2E  2FD1               	decfsz	(??_update_display+4)& (0+255),f,b
  4132  001C30  D7FA               	goto	u14285
  4133  001C32  0E01               	movlw	1
  4134  001C34  0100               	movlb	0	; () banked
  4135  001C36  17D0               	andwf	(??_update_display+3)& (0+255),f,b
  4136  001C38  0100               	movlb	0	; () banked
  4137  001C3A  51D0               	movf	(??_update_display+3)& (0+255),w,b
  4138  001C3C  0100               	movlb	0	; () banked
  4139  001C3E  6FAA               	movwf	(?_sprintf+8)& (0+255),b
  4140  001C40  6BAB               	clrf	(?_sprintf+9)& (0+255),b
  4141  001C42  CF81 F0D2          	movff	3969,??_update_display+5	;volatile
  4142  001C46  0100               	movlb	0	; () banked
  4143  001C48  3BD2               	swapf	(??_update_display+5)& (0+255),f,b
  4144  001C4A  0E0F               	movlw	15
  4145  001C4C  17D2               	andwf	(??_update_display+5)& (0+255),f,b
  4146  001C4E  0E01               	movlw	1
  4147  001C50  0100               	movlb	0	; () banked
  4148  001C52  17D2               	andwf	(??_update_display+5)& (0+255),f,b
  4149  001C54  0100               	movlb	0	; () banked
  4150  001C56  51D2               	movf	(??_update_display+5)& (0+255),w,b
  4151  001C58  0100               	movlb	0	; () banked
  4152  001C5A  6FAC               	movwf	(?_sprintf+10)& (0+255),b
  4153  001C5C  6BAD               	clrf	(?_sprintf+11)& (0+255),b
  4154  001C5E  0E04               	movlw	4
  4155  001C60  6081               	cpfslt	3969,c	;volatile
  4156  001C62  D001               	goto	u14291
  4157  001C64  D002               	goto	u14290
  4158  001C66                     u14291:
  4159  001C66  0E01               	movlw	1
  4160  001C68  D001               	goto	u14300
  4161  001C6A                     u14290:
  4162  001C6A  0E00               	movlw	0
  4163  001C6C                     u14300:
  4164  001C6C  0100               	movlb	0	; () banked
  4165  001C6E  6FD3               	movwf	(??_update_display+6)& (0+255),b
  4166  001C70  6BD4               	clrf	(??_update_display+7)& (0+255),b
  4167  001C72  0E01               	movlw	1
  4168  001C74  0100               	movlb	0	; () banked
  4169  001C76  15D3               	andwf	(??_update_display+6)& (0+255),w,b
  4170  001C78  0100               	movlb	0	; () banked
  4171  001C7A  6FAE               	movwf	(?_sprintf+12)& (0+255),b
  4172  001C7C  0100               	movlb	0	; () banked
  4173  001C7E  6BAF               	clrf	(?_sprintf+13)& (0+255),b
  4174  001C80  CF81 F0D5          	movff	3969,??_update_display+8	;volatile
  4175  001C84  0100               	movlb	0	; () banked
  4176  001C86  90D8               	bcf	status,0,c
  4177  001C88  33D5               	rrcf	(??_update_display+8)& (0+255),f,b
  4178  001C8A  0100               	movlb	0	; () banked
  4179  001C8C  90D8               	bcf	status,0,c
  4180  001C8E  33D5               	rrcf	(??_update_display+8)& (0+255),f,b
  4181  001C90  0E01               	movlw	1
  4182  001C92  0100               	movlb	0	; () banked
  4183  001C94  17D5               	andwf	(??_update_display+8)& (0+255),f,b
  4184  001C96  0100               	movlb	0	; () banked
  4185  001C98  51D5               	movf	(??_update_display+8)& (0+255),w,b
  4186  001C9A  0100               	movlb	0	; () banked
  4187  001C9C  6FB0               	movwf	(?_sprintf+14)& (0+255),b
  4188  001C9E  6BB1               	clrf	(?_sprintf+15)& (0+255),b
  4189  001CA0  CF81 F0D6          	movff	3969,??_update_display+9	;volatile
  4190  001CA4  0100               	movlb	0	; () banked
  4191  001CA6  90D8               	bcf	status,0,c
  4192  001CA8  33D6               	rrcf	(??_update_display+9)& (0+255),f,b
  4193  001CAA  0E01               	movlw	1
  4194  001CAC  0100               	movlb	0	; () banked
  4195  001CAE  17D6               	andwf	(??_update_display+9)& (0+255),f,b
  4196  001CB0  0100               	movlb	0	; () banked
  4197  001CB2  51D6               	movf	(??_update_display+9)& (0+255),w,b
  4198  001CB4  0100               	movlb	0	; () banked
  4199  001CB6  6FB2               	movwf	(?_sprintf+16)& (0+255),b
  4200  001CB8  6BB3               	clrf	(?_sprintf+17)& (0+255),b
  4201  001CBA  CF81 F0D7          	movff	3969,??_update_display+10	;volatile
  4202  001CBE  0E01               	movlw	1
  4203  001CC0  0100               	movlb	0	; () banked
  4204  001CC2  17D7               	andwf	(??_update_display+10)& (0+255),f,b
  4205  001CC4  0100               	movlb	0	; () banked
  4206  001CC6  51D7               	movf	(??_update_display+10)& (0+255),w,b
  4207  001CC8  0100               	movlb	0	; () banked
  4208  001CCA  6FB4               	movwf	(?_sprintf+18)& (0+255),b
  4209  001CCC  6BB5               	clrf	(?_sprintf+19)& (0+255),b
  4210  001CCE  EC0A  F013         	call	__measure	;wreg free
  4211  001CD2  C086  F0B6         	movff	?__measure,?_sprintf+20
  4212  001CD6  C087  F0B7         	movff	?__measure+1,?_sprintf+21
  4213  001CDA  EC8E  F01D         	call	_sprintf	;wreg free
  4214                           
  4215                           ;main.c: 255: }
  4216                           ;main.c: 259: break;
  4217  001CDE  0012               	return	
  4218  001CE0                     l8454:
  4219                           
  4220                           ;main.c: 261: sprintf(ndisplay0, "ERROR");
  4221  001CE0  0E62               	movlw	low _ndisplay0
  4222  001CE2  0100               	movlb	0	; () banked
  4223  001CE4  6FA2               	movwf	sprintf@wh& (0+255),b
  4224  001CE6  0E01               	movlw	high _ndisplay0
  4225  001CE8  0100               	movlb	0	; () banked
  4226  001CEA  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4227  001CEC  0EF3               	movlw	low STR_15
  4228  001CEE  0100               	movlb	0	; () banked
  4229  001CF0  6FA4               	movwf	sprintf@f& (0+255),b
  4230  001CF2  0EFF               	movlw	high STR_15
  4231  001CF4  0100               	movlb	0	; () banked
  4232  001CF6  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4233  001CF8  EC8E  F01D         	call	_sprintf	;wreg free
  4234                           
  4235                           ;main.c: 262: sprintf(ndisplay1, "EMERGENCY STOP");
  4236  001CFC  0E74               	movlw	low _ndisplay1
  4237  001CFE  0100               	movlb	0	; () banked
  4238  001D00  6FA2               	movwf	sprintf@wh& (0+255),b
  4239  001D02  0E01               	movlw	high _ndisplay1
  4240  001D04  0100               	movlb	0	; () banked
  4241  001D06  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4242  001D08  0E8B               	movlw	low STR_16
  4243  001D0A  0100               	movlb	0	; () banked
  4244  001D0C  6FA4               	movwf	sprintf@f& (0+255),b
  4245  001D0E  0EFF               	movlw	high STR_16
  4246  001D10  0100               	movlb	0	; () banked
  4247  001D12  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4248  001D14  EC8E  F01D         	call	_sprintf	;wreg free
  4249                           
  4250                           ;main.c: 265: }
  4251                           
  4252                           ;main.c: 263: break;
  4253  001D18  0012               	return	
  4254  001D1A                     l8458:
  4255  001D1A  0100               	movlb	0	; () banked
  4256  001D1C  51DF               	movf	_state& (0+255),w,b
  4257                           
  4258                           ; Switch size 1, requested type "space"
  4259                           ; Number of cases is 6, Range of values is 99 to 115
  4260                           ; switch strategies available:
  4261                           ; Name         Instructions Cycles
  4262                           ; simple_byte           19    10 (average)
  4263                           ;	Chosen strategy is simple_byte
  4264  001D1E  0A63               	xorlw	99	; case 99
  4265  001D20  B4D8               	btfsc	status,2,c
  4266  001D22  D5BF               	goto	l8414
  4267  001D24  0A06               	xorlw	6	; case 101
  4268  001D26  B4D8               	btfsc	status,2,c
  4269  001D28  D5BC               	goto	l8414
  4270  001D2A  0A09               	xorlw	9	; case 108
  4271  001D2C  B4D8               	btfsc	status,2,c
  4272  001D2E  D5B9               	goto	l8414
  4273  001D30  0A01               	xorlw	1	; case 109
  4274  001D32  B4D8               	btfsc	status,2,c
  4275  001D34  D5B6               	goto	l8414
  4276  001D36  0A1F               	xorlw	31	; case 114
  4277  001D38  B4D8               	btfsc	status,2,c
  4278  001D3A  D57E               	goto	l8412
  4279  001D3C  0A01               	xorlw	1	; case 115
  4280  001D3E  B4D8               	btfsc	status,2,c
  4281  001D40  D5B3               	goto	l8416
  4282  001D42  D7CE               	goto	l8454
  4283  001D44                     __end_of_update_display:
  4284                           	opt stack 0
  4285                           tblptru	equ	0xFF8
  4286                           tblptrh	equ	0xFF7
  4287                           tblptrl	equ	0xFF6
  4288                           tablat	equ	0xFF5
  4289                           prodh	equ	0xFF4
  4290                           prodl	equ	0xFF3
  4291                           intcon	equ	0xFF2
  4292                           intcon2	equ	0xFF1
  4293                           intcon3	equ	0xFF0
  4294                           postinc0	equ	0xFEE
  4295                           wreg	equ	0xFE8
  4296                           indf1	equ	0xFE7
  4297                           postinc1	equ	0xFE6
  4298                           postdec1	equ	0xFE5
  4299                           fsr1h	equ	0xFE2
  4300                           fsr1l	equ	0xFE1
  4301                           indf2	equ	0xFDF
  4302                           postinc2	equ	0xFDE
  4303                           postdec2	equ	0xFDD
  4304                           fsr2h	equ	0xFDA
  4305                           fsr2l	equ	0xFD9
  4306                           status	equ	0xFD8
  4307                           
  4308 ;; *************** function _display_menu *****************
  4309 ;; Defined at:
  4310 ;;		line 319 in file "main.c"
  4311 ;; Parameters:    Size  Location     Type
  4312 ;;		None
  4313 ;; Auto vars:     Size  Location     Type
  4314 ;;  menuIndexPtr    2   75[BANK0 ] PTR int 
  4315 ;;		 -> endIndex(2), creditIndex(2), logIndex(2), menuIndex(2), 
  4316 ;;  menuSelectio    2   71[BANK0 ] int 
  4317 ;;  menuSizePtr     2   69[BANK0 ] PTR int 
  4318 ;;		 -> endSize(2), menuSize(2), creditSize(2), events(2), 
  4319 ;;  selector        2   67[BANK0 ] int 
  4320 ;; Return value:  Size  Location     Type
  4321 ;;                  1    wreg      void 
  4322 ;; Registers used:
  4323 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4324 ;; Tracked objects:
  4325 ;;		On entry : 0/0
  4326 ;;		On exit  : 0/0
  4327 ;;		Unchanged: 0/0
  4328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4330 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4331 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4332 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4333 ;;Total ram usage:       15 bytes
  4334 ;; Hardware stack levels used:    1
  4335 ;; Hardware stack levels required when called:    9
  4336 ;; This function calls:
  4337 ;;		___wmul
  4338 ;;		_sprintf
  4339 ;; This function is called by:
  4340 ;;		_update_display
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           	psect	text7
  4345  001D44                     __ptext7:
  4346                           	opt stack 0
  4347  001D44                     _display_menu:
  4348                           	opt stack 20
  4349                           
  4350                           ;main.c: 320: int menuSelection;
  4351                           ;main.c: 321: int* menuIndexPtr;
  4352                           ;main.c: 322: int* menuSizePtr;
  4353                           ;main.c: 323: int selector=0;
  4354                           
  4355                           ;incstack = 0
  4356  001D44  0E00               	movlw	0
  4357  001D46  0100               	movlb	0	; () banked
  4358  001D48  6FC4               	movwf	(display_menu@selector+1)& (0+255),b
  4359  001D4A  0E00               	movlw	0
  4360  001D4C  6FC3               	movwf	display_menu@selector& (0+255),b
  4361                           
  4362                           ;main.c: 324: switch(state)
  4363  001D4E  D049               	goto	l8096
  4364  001D50                     l8072:
  4365                           
  4366                           ; BSR set to: 0
  4367                           ;main.c: 327: menuSelection=1;
  4368  001D50  0E00               	movlw	0
  4369  001D52  0100               	movlb	0	; () banked
  4370  001D54  6FC8               	movwf	(display_menu@menuSelection+1)& (0+255),b
  4371  001D56  0E01               	movlw	1
  4372  001D58  6FC7               	movwf	display_menu@menuSelection& (0+255),b
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;main.c: 328: menuIndexPtr=&logIndex;
  4376  001D5A  0EE8               	movlw	low _logIndex
  4377  001D5C  0100               	movlb	0	; () banked
  4378  001D5E  6FCB               	movwf	display_menu@menuIndexPtr& (0+255),b
  4379  001D60  0E00               	movlw	high _logIndex
  4380  001D62  0100               	movlb	0	; () banked
  4381  001D64  6FCC               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  4382                           
  4383                           ; BSR set to: 0
  4384                           ;main.c: 329: menuSizePtr=&events;
  4385  001D66  0EE6               	movlw	low _events
  4386  001D68  0100               	movlb	0	; () banked
  4387  001D6A  6FC5               	movwf	display_menu@menuSizePtr& (0+255),b
  4388  001D6C  0E00               	movlw	high _events
  4389  001D6E  D036               	goto	L3
  4390  001D70                     l8078:
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;main.c: 332: menuSelection=2;
  4394  001D70  0E00               	movlw	0
  4395  001D72  0100               	movlb	0	; () banked
  4396  001D74  6FC8               	movwf	(display_menu@menuSelection+1)& (0+255),b
  4397  001D76  0E02               	movlw	2
  4398  001D78  6FC7               	movwf	display_menu@menuSelection& (0+255),b
  4399                           
  4400                           ; BSR set to: 0
  4401                           ;main.c: 333: menuIndexPtr=&creditIndex;
  4402  001D7A  0EE0               	movlw	low _creditIndex
  4403  001D7C  0100               	movlb	0	; () banked
  4404  001D7E  6FCB               	movwf	display_menu@menuIndexPtr& (0+255),b
  4405  001D80  0E00               	movlw	high _creditIndex
  4406  001D82  0100               	movlb	0	; () banked
  4407  001D84  6FCC               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  4408                           
  4409                           ; BSR set to: 0
  4410                           ;main.c: 334: menuSizePtr=&creditSize;
  4411  001D86  0EE2               	movlw	low _creditSize
  4412  001D88  0100               	movlb	0	; () banked
  4413  001D8A  6FC5               	movwf	display_menu@menuSizePtr& (0+255),b
  4414  001D8C  0E00               	movlw	high _creditSize
  4415  001D8E  D026               	goto	L3
  4416  001D90                     l8084:
  4417                           
  4418                           ; BSR set to: 0
  4419                           ;main.c: 338: menuSelection=0;
  4420  001D90  0E00               	movlw	0
  4421  001D92  0100               	movlb	0	; () banked
  4422  001D94  6FC8               	movwf	(display_menu@menuSelection+1)& (0+255),b
  4423  001D96  0E00               	movlw	0
  4424  001D98  6FC7               	movwf	display_menu@menuSelection& (0+255),b
  4425                           
  4426                           ; BSR set to: 0
  4427                           ;main.c: 339: menuIndexPtr=&menuIndex;
  4428  001D9A  0EEA               	movlw	low _menuIndex
  4429  001D9C  0100               	movlb	0	; () banked
  4430  001D9E  6FCB               	movwf	display_menu@menuIndexPtr& (0+255),b
  4431  001DA0  0E00               	movlw	high _menuIndex
  4432  001DA2  0100               	movlb	0	; () banked
  4433  001DA4  6FCC               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  4434                           
  4435                           ; BSR set to: 0
  4436                           ;main.c: 340: menuSizePtr=&menuSize;
  4437  001DA6  0EEC               	movlw	low _menuSize
  4438  001DA8  0100               	movlb	0	; () banked
  4439  001DAA  6FC5               	movwf	display_menu@menuSizePtr& (0+255),b
  4440  001DAC  0E00               	movlw	high _menuSize
  4441  001DAE  0100               	movlb	0	; () banked
  4442  001DB0  6FC6               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  4443                           
  4444                           ;main.c: 341: selector=1;
  4445  001DB2  0E00               	movlw	0
  4446  001DB4  0100               	movlb	0	; () banked
  4447  001DB6  6FC4               	movwf	(display_menu@selector+1)& (0+255),b
  4448  001DB8  0E01               	movlw	1
  4449  001DBA  6FC3               	movwf	display_menu@selector& (0+255),b
  4450                           
  4451                           ;main.c: 342: break;
  4452  001DBC  D01F               	goto	l8098
  4453  001DBE                     l8090:
  4454                           
  4455                           ; BSR set to: 0
  4456                           ;main.c: 344: menuSelection=3;
  4457  001DBE  0E00               	movlw	0
  4458  001DC0  0100               	movlb	0	; () banked
  4459  001DC2  6FC8               	movwf	(display_menu@menuSelection+1)& (0+255),b
  4460  001DC4  0E03               	movlw	3
  4461  001DC6  6FC7               	movwf	display_menu@menuSelection& (0+255),b
  4462                           
  4463                           ; BSR set to: 0
  4464                           ;main.c: 345: menuIndexPtr=&endIndex;
  4465  001DC8  0EE4               	movlw	low _endIndex
  4466  001DCA  0100               	movlb	0	; () banked
  4467  001DCC  6FCB               	movwf	display_menu@menuIndexPtr& (0+255),b
  4468  001DCE  0E00               	movlw	high _endIndex
  4469  001DD0  0100               	movlb	0	; () banked
  4470  001DD2  6FCC               	movwf	(display_menu@menuIndexPtr+1)& (0+255),b
  4471                           
  4472                           ; BSR set to: 0
  4473                           ;main.c: 346: menuSizePtr=&endSize;
  4474  001DD4  0E73               	movlw	low _endSize
  4475  001DD6  0100               	movlb	0	; () banked
  4476  001DD8  6FC5               	movwf	display_menu@menuSizePtr& (0+255),b
  4477  001DDA  0E00               	movlw	high _endSize
  4478  001DDC                     L3:
  4479  001DDC  0100               	movlb	0	; () banked
  4480  001DDE  6FC6               	movwf	(display_menu@menuSizePtr+1)& (0+255),b
  4481                           
  4482                           ;main.c: 347: }
  4483  001DE0  D00D               	goto	l8098
  4484  001DE2                     l8096:
  4485                           
  4486                           ; BSR set to: 0
  4487  001DE2  0100               	movlb	0	; () banked
  4488  001DE4  51DF               	movf	_state& (0+255),w,b
  4489                           
  4490                           ; Switch size 1, requested type "space"
  4491                           ; Number of cases is 4, Range of values is 99 to 109
  4492                           ; switch strategies available:
  4493                           ; Name         Instructions Cycles
  4494                           ; simple_byte           13     7 (average)
  4495                           ;	Chosen strategy is simple_byte
  4496  001DE6  0A63               	xorlw	99	; case 99
  4497  001DE8  B4D8               	btfsc	status,2,c
  4498  001DEA  D7C2               	goto	l8078
  4499  001DEC  0A06               	xorlw	6	; case 101
  4500  001DEE  B4D8               	btfsc	status,2,c
  4501  001DF0  D7E6               	goto	l8090
  4502  001DF2  0A09               	xorlw	9	; case 108
  4503  001DF4  B4D8               	btfsc	status,2,c
  4504  001DF6  D7AC               	goto	l8072
  4505  001DF8  0A01               	xorlw	1	; case 109
  4506  001DFA  D7CA               	goto	l8084
  4507  001DFC                     l8098:
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;main.c: 348: if (selector){
  4511  001DFC  0100               	movlb	0	; () banked
  4512  001DFE  51C3               	movf	display_menu@selector& (0+255),w,b
  4513  001E00  0100               	movlb	0	; () banked
  4514  001E02  11C4               	iorwf	(display_menu@selector+1)& (0+255),w,b
  4515  001E04  B4D8               	btfsc	status,2,c
  4516  001E06  D14A               	goto	l8114
  4517                           
  4518                           ; BSR set to: 0
  4519                           ;main.c: 349: if (*menuIndexPtr<*menuSizePtr){
  4520  001E08  C0C5  FFD9         	movff	display_menu@menuSizePtr,fsr2l
  4521  001E0C  C0C6  FFDA         	movff	display_menu@menuSizePtr+1,fsr2h
  4522  001E10  C0CB  FFE1         	movff	display_menu@menuIndexPtr,fsr1l
  4523  001E14  C0CC  FFE2         	movff	display_menu@menuIndexPtr+1,fsr1h
  4524  001E18  50DE               	movf	postinc2,w,c
  4525  001E1A  5CE6               	subwf	postinc1,w,c
  4526  001E1C  50E6               	movf	postinc1,w,c
  4527  001E1E  0A80               	xorlw	128
  4528  001E20  0100               	movlb	0	; () banked
  4529  001E22  6FC2               	movwf	(??_display_menu+4)& (0+255),b
  4530  001E24  50DE               	movf	postinc2,w,c
  4531  001E26  0A80               	xorlw	128
  4532  001E28  0100               	movlb	0	; () banked
  4533  001E2A  59C2               	subwfb	(??_display_menu+4)& (0+255),w,b
  4534  001E2C  B0D8               	btfsc	status,0,c
  4535  001E2E  D096               	goto	l8108
  4536                           
  4537                           ; BSR set to: 0
  4538                           ;main.c: 350: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4539  001E30  C0C7  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4540  001E34  C0C8  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4541  001E38  0E00               	movlw	0
  4542  001E3A  0100               	movlb	0	; () banked
  4543  001E3C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4544  001E3E  0EB4               	movlw	180
  4545  001E40  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4546  001E42  EC4B  F01E         	call	___wmul	;wreg free
  4547  001E46  0E8A               	movlw	low _menu
  4548  001E48  0100               	movlb	0	; () banked
  4549  001E4A  6FBE               	movwf	??_display_menu& (0+255),b
  4550  001E4C  0E01               	movlw	high _menu
  4551  001E4E  0100               	movlb	0	; () banked
  4552  001E50  6FBF               	movwf	(??_display_menu+1)& (0+255),b
  4553  001E52  0100               	movlb	0	; () banked
  4554  001E54  5180               	movf	?___wmul& (0+255),w,b
  4555  001E56  0100               	movlb	0	; () banked
  4556  001E58  27BE               	addwf	??_display_menu& (0+255),f,b
  4557  001E5A  0100               	movlb	0	; () banked
  4558  001E5C  5181               	movf	(?___wmul+1)& (0+255),w,b
  4559  001E5E  0100               	movlb	0	; () banked
  4560  001E60  23BF               	addwfc	(??_display_menu+1)& (0+255),f,b
  4561  001E62  C0CB  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4562  001E66  C0CC  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4563  001E6A  CFDE F0C0          	movff	postinc2,??_display_menu+2
  4564  001E6E  CFDD F0C1          	movff	postdec2,??_display_menu+3
  4565  001E72  0EFF               	movlw	255
  4566  001E74  0100               	movlb	0	; () banked
  4567  001E76  25C0               	addwf	(??_display_menu+2)& (0+255),w,b
  4568  001E78  0100               	movlb	0	; () banked
  4569  001E7A  6F80               	movwf	___wmul@multiplier& (0+255),b
  4570  001E7C  0EFF               	movlw	255
  4571  001E7E  0100               	movlb	0	; () banked
  4572  001E80  21C1               	addwfc	(??_display_menu+3)& (0+255),w,b
  4573  001E82  0100               	movlb	0	; () banked
  4574  001E84  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4575  001E86  0E00               	movlw	0
  4576  001E88  0100               	movlb	0	; () banked
  4577  001E8A  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4578  001E8C  0E12               	movlw	18
  4579  001E8E  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4580  001E90  EC4B  F01E         	call	___wmul	;wreg free
  4581  001E94  0100               	movlb	0	; () banked
  4582  001E96  5180               	movf	?___wmul& (0+255),w,b
  4583  001E98  0100               	movlb	0	; () banked
  4584  001E9A  25BE               	addwf	??_display_menu& (0+255),w,b
  4585  001E9C  0100               	movlb	0	; () banked
  4586  001E9E  6FC9               	movwf	_display_menu$1164& (0+255),b
  4587  001EA0  0100               	movlb	0	; () banked
  4588  001EA2  5181               	movf	(?___wmul+1)& (0+255),w,b
  4589  001EA4  0100               	movlb	0	; () banked
  4590  001EA6  21BF               	addwfc	(??_display_menu+1)& (0+255),w,b
  4591  001EA8  0100               	movlb	0	; () banked
  4592  001EAA  6FCA               	movwf	(_display_menu$1164+1)& (0+255),b
  4593                           
  4594                           ; BSR set to: 0
  4595                           ;main.c: 350: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4596  001EAC  0E62               	movlw	low _ndisplay0
  4597  001EAE  0100               	movlb	0	; () banked
  4598  001EB0  6FA2               	movwf	sprintf@wh& (0+255),b
  4599  001EB2  0E01               	movlw	high _ndisplay0
  4600  001EB4  0100               	movlb	0	; () banked
  4601  001EB6  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4602  001EB8  0EF9               	movlw	low STR_21
  4603  001EBA  0100               	movlb	0	; () banked
  4604  001EBC  6FA4               	movwf	sprintf@f& (0+255),b
  4605  001EBE  0EFF               	movlw	high STR_21
  4606  001EC0  0100               	movlb	0	; () banked
  4607  001EC2  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4608  001EC4  C0C9  F0A6         	movff	_display_menu$1164,?_sprintf+4
  4609  001EC8  C0CA  F0A7         	movff	_display_menu$1164+1,?_sprintf+5
  4610  001ECC  0E00               	movlw	0
  4611  001ECE  0100               	movlb	0	; () banked
  4612  001ED0  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4613  001ED2  0E3C               	movlw	60
  4614  001ED4  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4615  001ED6  EC8E  F01D         	call	_sprintf	;wreg free
  4616                           
  4617                           ;main.c: 351: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  4618  001EDA  C0C7  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4619  001EDE  C0C8  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4620  001EE2  0E00               	movlw	0
  4621  001EE4  0100               	movlb	0	; () banked
  4622  001EE6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4623  001EE8  0EB4               	movlw	180
  4624  001EEA  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4625  001EEC  EC4B  F01E         	call	___wmul	;wreg free
  4626  001EF0  0E8A               	movlw	low _menu
  4627  001EF2  0100               	movlb	0	; () banked
  4628  001EF4  6FBE               	movwf	??_display_menu& (0+255),b
  4629  001EF6  0E01               	movlw	high _menu
  4630  001EF8  0100               	movlb	0	; () banked
  4631  001EFA  6FBF               	movwf	(??_display_menu+1)& (0+255),b
  4632  001EFC  0100               	movlb	0	; () banked
  4633  001EFE  5180               	movf	?___wmul& (0+255),w,b
  4634  001F00  0100               	movlb	0	; () banked
  4635  001F02  27BE               	addwf	??_display_menu& (0+255),f,b
  4636  001F04  0100               	movlb	0	; () banked
  4637  001F06  5181               	movf	(?___wmul+1)& (0+255),w,b
  4638  001F08  0100               	movlb	0	; () banked
  4639  001F0A  23BF               	addwfc	(??_display_menu+1)& (0+255),f,b
  4640  001F0C  C0CB  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4641  001F10  C0CC  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4642  001F14  CFDE F080          	movff	postinc2,___wmul@multiplier
  4643  001F18  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  4644  001F1C  0E00               	movlw	0
  4645  001F1E  0100               	movlb	0	; () banked
  4646  001F20  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4647  001F22  0E12               	movlw	18
  4648  001F24  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4649  001F26  EC4B  F01E         	call	___wmul	;wreg free
  4650  001F2A  0100               	movlb	0	; () banked
  4651  001F2C  5180               	movf	?___wmul& (0+255),w,b
  4652  001F2E  0100               	movlb	0	; () banked
  4653  001F30  25BE               	addwf	??_display_menu& (0+255),w,b
  4654  001F32  0100               	movlb	0	; () banked
  4655  001F34  6FC9               	movwf	_display_menu$1164& (0+255),b
  4656  001F36  0100               	movlb	0	; () banked
  4657  001F38  5181               	movf	(?___wmul+1)& (0+255),w,b
  4658  001F3A  0100               	movlb	0	; () banked
  4659  001F3C  21BF               	addwfc	(??_display_menu+1)& (0+255),w,b
  4660  001F3E  0100               	movlb	0	; () banked
  4661  001F40  6FCA               	movwf	(_display_menu$1164+1)& (0+255),b
  4662                           
  4663                           ;main.c: 351: sprintf(ndisplay1,menu[menuSelection][*menuIndexPtr]);
  4664  001F42  0E74               	movlw	low _ndisplay1
  4665  001F44  0100               	movlb	0	; () banked
  4666  001F46  6FA2               	movwf	sprintf@wh& (0+255),b
  4667  001F48  0E01               	movlw	high _ndisplay1
  4668  001F4A  0100               	movlb	0	; () banked
  4669  001F4C  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4670  001F4E  C0C9  F0A4         	movff	_display_menu$1164,sprintf@f
  4671  001F52  C0CA  F0A5         	movff	_display_menu$1164+1,sprintf@f+1
  4672  001F56  EC8E  F01D         	call	_sprintf	;wreg free
  4673                           
  4674                           ;main.c: 352: }
  4675  001F5A  0012               	return	
  4676  001F5C                     l8108:
  4677                           
  4678                           ;main.c: 353: else{
  4679                           ;main.c: 354: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  4680  001F5C  C0C7  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4681  001F60  C0C8  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4682  001F64  0E00               	movlw	0
  4683  001F66  0100               	movlb	0	; () banked
  4684  001F68  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4685  001F6A  0EB4               	movlw	180
  4686  001F6C  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4687  001F6E  EC4B  F01E         	call	___wmul	;wreg free
  4688  001F72  0E8A               	movlw	low _menu
  4689  001F74  0100               	movlb	0	; () banked
  4690  001F76  6FBE               	movwf	??_display_menu& (0+255),b
  4691  001F78  0E01               	movlw	high _menu
  4692  001F7A  0100               	movlb	0	; () banked
  4693  001F7C  6FBF               	movwf	(??_display_menu+1)& (0+255),b
  4694  001F7E  0100               	movlb	0	; () banked
  4695  001F80  5180               	movf	?___wmul& (0+255),w,b
  4696  001F82  0100               	movlb	0	; () banked
  4697  001F84  27BE               	addwf	??_display_menu& (0+255),f,b
  4698  001F86  0100               	movlb	0	; () banked
  4699  001F88  5181               	movf	(?___wmul+1)& (0+255),w,b
  4700  001F8A  0100               	movlb	0	; () banked
  4701  001F8C  23BF               	addwfc	(??_display_menu+1)& (0+255),f,b
  4702  001F8E  C0CB  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4703  001F92  C0CC  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4704  001F96  CFDE F0C0          	movff	postinc2,??_display_menu+2
  4705  001F9A  CFDD F0C1          	movff	postdec2,??_display_menu+3
  4706  001F9E  0EFE               	movlw	254
  4707  001FA0  0100               	movlb	0	; () banked
  4708  001FA2  25C0               	addwf	(??_display_menu+2)& (0+255),w,b
  4709  001FA4  0100               	movlb	0	; () banked
  4710  001FA6  6F80               	movwf	___wmul@multiplier& (0+255),b
  4711  001FA8  0EFF               	movlw	255
  4712  001FAA  0100               	movlb	0	; () banked
  4713  001FAC  21C1               	addwfc	(??_display_menu+3)& (0+255),w,b
  4714  001FAE  0100               	movlb	0	; () banked
  4715  001FB0  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4716  001FB2  0E00               	movlw	0
  4717  001FB4  0100               	movlb	0	; () banked
  4718  001FB6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4719  001FB8  0E12               	movlw	18
  4720  001FBA  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4721  001FBC  EC4B  F01E         	call	___wmul	;wreg free
  4722  001FC0  0100               	movlb	0	; () banked
  4723  001FC2  5180               	movf	?___wmul& (0+255),w,b
  4724  001FC4  0100               	movlb	0	; () banked
  4725  001FC6  25BE               	addwf	??_display_menu& (0+255),w,b
  4726  001FC8  0100               	movlb	0	; () banked
  4727  001FCA  6FC9               	movwf	_display_menu$1164& (0+255),b
  4728  001FCC  0100               	movlb	0	; () banked
  4729  001FCE  5181               	movf	(?___wmul+1)& (0+255),w,b
  4730  001FD0  0100               	movlb	0	; () banked
  4731  001FD2  21BF               	addwfc	(??_display_menu+1)& (0+255),w,b
  4732  001FD4  0100               	movlb	0	; () banked
  4733  001FD6  6FCA               	movwf	(_display_menu$1164+1)& (0+255),b
  4734                           
  4735                           ; BSR set to: 0
  4736                           ;main.c: 353: else{
  4737                           ;main.c: 354: sprintf(ndisplay0,menu[menuSelection][*menuIndexPtr-2]);
  4738  001FD8  0E62               	movlw	low _ndisplay0
  4739  001FDA  0100               	movlb	0	; () banked
  4740  001FDC  6FA2               	movwf	sprintf@wh& (0+255),b
  4741  001FDE  0E01               	movlw	high _ndisplay0
  4742  001FE0  0100               	movlb	0	; () banked
  4743  001FE2  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4744  001FE4  C0C9  F0A4         	movff	_display_menu$1164,sprintf@f
  4745  001FE8  C0CA  F0A5         	movff	_display_menu$1164+1,sprintf@f+1
  4746  001FEC  EC8E  F01D         	call	_sprintf	;wreg free
  4747                           
  4748                           ;main.c: 355: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4749  001FF0  C0C7  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4750  001FF4  C0C8  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4751  001FF8  0E00               	movlw	0
  4752  001FFA  0100               	movlb	0	; () banked
  4753  001FFC  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4754  001FFE  0EB4               	movlw	180
  4755  002000  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4756  002002  EC4B  F01E         	call	___wmul	;wreg free
  4757  002006  0E8A               	movlw	low _menu
  4758  002008  0100               	movlb	0	; () banked
  4759  00200A  6FBE               	movwf	??_display_menu& (0+255),b
  4760  00200C  0E01               	movlw	high _menu
  4761  00200E  0100               	movlb	0	; () banked
  4762  002010  6FBF               	movwf	(??_display_menu+1)& (0+255),b
  4763  002012  0100               	movlb	0	; () banked
  4764  002014  5180               	movf	?___wmul& (0+255),w,b
  4765  002016  0100               	movlb	0	; () banked
  4766  002018  27BE               	addwf	??_display_menu& (0+255),f,b
  4767  00201A  0100               	movlb	0	; () banked
  4768  00201C  5181               	movf	(?___wmul+1)& (0+255),w,b
  4769  00201E  0100               	movlb	0	; () banked
  4770  002020  23BF               	addwfc	(??_display_menu+1)& (0+255),f,b
  4771  002022  C0CB  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4772  002026  C0CC  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4773  00202A  CFDE F0C0          	movff	postinc2,??_display_menu+2
  4774  00202E  CFDD F0C1          	movff	postdec2,??_display_menu+3
  4775  002032  0EFF               	movlw	255
  4776  002034  0100               	movlb	0	; () banked
  4777  002036  25C0               	addwf	(??_display_menu+2)& (0+255),w,b
  4778  002038  0100               	movlb	0	; () banked
  4779  00203A  6F80               	movwf	___wmul@multiplier& (0+255),b
  4780  00203C  0EFF               	movlw	255
  4781  00203E  0100               	movlb	0	; () banked
  4782  002040  21C1               	addwfc	(??_display_menu+3)& (0+255),w,b
  4783  002042  0100               	movlb	0	; () banked
  4784  002044  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4785  002046  0E00               	movlw	0
  4786  002048  0100               	movlb	0	; () banked
  4787  00204A  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4788  00204C  0E12               	movlw	18
  4789  00204E  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4790  002050  EC4B  F01E         	call	___wmul	;wreg free
  4791  002054  0100               	movlb	0	; () banked
  4792  002056  5180               	movf	?___wmul& (0+255),w,b
  4793  002058  0100               	movlb	0	; () banked
  4794  00205A  25BE               	addwf	??_display_menu& (0+255),w,b
  4795  00205C  0100               	movlb	0	; () banked
  4796  00205E  6FC9               	movwf	_display_menu$1164& (0+255),b
  4797  002060  0100               	movlb	0	; () banked
  4798  002062  5181               	movf	(?___wmul+1)& (0+255),w,b
  4799  002064  0100               	movlb	0	; () banked
  4800  002066  21BF               	addwfc	(??_display_menu+1)& (0+255),w,b
  4801  002068  0100               	movlb	0	; () banked
  4802  00206A  6FCA               	movwf	(_display_menu$1164+1)& (0+255),b
  4803                           
  4804                           ;main.c: 355: sprintf(ndisplay1,"%s%c", menu[menuSelection][*menuIndexPtr-1], '<');
  4805  00206C  0E74               	movlw	low _ndisplay1
  4806  00206E  0100               	movlb	0	; () banked
  4807  002070  6FA2               	movwf	sprintf@wh& (0+255),b
  4808  002072  0E01               	movlw	high _ndisplay1
  4809  002074  0100               	movlb	0	; () banked
  4810  002076  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4811  002078  0EF9               	movlw	low STR_21
  4812  00207A  0100               	movlb	0	; () banked
  4813  00207C  6FA4               	movwf	sprintf@f& (0+255),b
  4814  00207E  0EFF               	movlw	high STR_21
  4815  002080  0100               	movlb	0	; () banked
  4816  002082  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4817  002084  C0C9  F0A6         	movff	_display_menu$1164,?_sprintf+4
  4818  002088  C0CA  F0A7         	movff	_display_menu$1164+1,?_sprintf+5
  4819  00208C  0E00               	movlw	0
  4820  00208E  0100               	movlb	0	; () banked
  4821  002090  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4822  002092  0E3C               	movlw	60
  4823  002094  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4824  002096  EC8E  F01D         	call	_sprintf	;wreg free
  4825                           
  4826                           ;main.c: 356: }
  4827                           ;main.c: 357: }
  4828  00209A  0012               	return	
  4829  00209C                     l8114:
  4830                           
  4831                           ;main.c: 358: else{
  4832                           ;main.c: 359: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  4833  00209C  C0C7  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4834  0020A0  C0C8  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4835  0020A4  0E00               	movlw	0
  4836  0020A6  0100               	movlb	0	; () banked
  4837  0020A8  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4838  0020AA  0EB4               	movlw	180
  4839  0020AC  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4840  0020AE  EC4B  F01E         	call	___wmul	;wreg free
  4841  0020B2  0E8A               	movlw	low _menu
  4842  0020B4  0100               	movlb	0	; () banked
  4843  0020B6  6FBE               	movwf	??_display_menu& (0+255),b
  4844  0020B8  0E01               	movlw	high _menu
  4845  0020BA  0100               	movlb	0	; () banked
  4846  0020BC  6FBF               	movwf	(??_display_menu+1)& (0+255),b
  4847  0020BE  0100               	movlb	0	; () banked
  4848  0020C0  5180               	movf	?___wmul& (0+255),w,b
  4849  0020C2  0100               	movlb	0	; () banked
  4850  0020C4  27BE               	addwf	??_display_menu& (0+255),f,b
  4851  0020C6  0100               	movlb	0	; () banked
  4852  0020C8  5181               	movf	(?___wmul+1)& (0+255),w,b
  4853  0020CA  0100               	movlb	0	; () banked
  4854  0020CC  23BF               	addwfc	(??_display_menu+1)& (0+255),f,b
  4855  0020CE  C0CB  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4856  0020D2  C0CC  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4857  0020D6  CFDE F0C0          	movff	postinc2,??_display_menu+2
  4858  0020DA  CFDD F0C1          	movff	postdec2,??_display_menu+3
  4859  0020DE  0EFF               	movlw	255
  4860  0020E0  0100               	movlb	0	; () banked
  4861  0020E2  25C0               	addwf	(??_display_menu+2)& (0+255),w,b
  4862  0020E4  0100               	movlb	0	; () banked
  4863  0020E6  6F80               	movwf	___wmul@multiplier& (0+255),b
  4864  0020E8  0EFF               	movlw	255
  4865  0020EA  0100               	movlb	0	; () banked
  4866  0020EC  21C1               	addwfc	(??_display_menu+3)& (0+255),w,b
  4867  0020EE  0100               	movlb	0	; () banked
  4868  0020F0  6F81               	movwf	(___wmul@multiplier+1)& (0+255),b
  4869  0020F2  0E00               	movlw	0
  4870  0020F4  0100               	movlb	0	; () banked
  4871  0020F6  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4872  0020F8  0E12               	movlw	18
  4873  0020FA  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4874  0020FC  EC4B  F01E         	call	___wmul	;wreg free
  4875  002100  0100               	movlb	0	; () banked
  4876  002102  5180               	movf	?___wmul& (0+255),w,b
  4877  002104  0100               	movlb	0	; () banked
  4878  002106  25BE               	addwf	??_display_menu& (0+255),w,b
  4879  002108  0100               	movlb	0	; () banked
  4880  00210A  6FC9               	movwf	_display_menu$1164& (0+255),b
  4881  00210C  0100               	movlb	0	; () banked
  4882  00210E  5181               	movf	(?___wmul+1)& (0+255),w,b
  4883  002110  0100               	movlb	0	; () banked
  4884  002112  21BF               	addwfc	(??_display_menu+1)& (0+255),w,b
  4885  002114  0100               	movlb	0	; () banked
  4886  002116  6FCA               	movwf	(_display_menu$1164+1)& (0+255),b
  4887                           
  4888                           ; BSR set to: 0
  4889                           ;main.c: 358: else{
  4890                           ;main.c: 359: sprintf(ndisplay0,"%s%c", menu[menuSelection][*menuIndexPtr-1], '^');
  4891  002118  0E62               	movlw	low _ndisplay0
  4892  00211A  0100               	movlb	0	; () banked
  4893  00211C  6FA2               	movwf	sprintf@wh& (0+255),b
  4894  00211E  0E01               	movlw	high _ndisplay0
  4895  002120  0100               	movlb	0	; () banked
  4896  002122  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4897  002124  0EF9               	movlw	low STR_21
  4898  002126  0100               	movlb	0	; () banked
  4899  002128  6FA4               	movwf	sprintf@f& (0+255),b
  4900  00212A  0EFF               	movlw	high STR_21
  4901  00212C  0100               	movlb	0	; () banked
  4902  00212E  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4903  002130  C0C9  F0A6         	movff	_display_menu$1164,?_sprintf+4
  4904  002134  C0CA  F0A7         	movff	_display_menu$1164+1,?_sprintf+5
  4905  002138  0E00               	movlw	0
  4906  00213A  0100               	movlb	0	; () banked
  4907  00213C  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4908  00213E  0E5E               	movlw	94
  4909  002140  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4910  002142  EC8E  F01D         	call	_sprintf	;wreg free
  4911                           
  4912                           ;main.c: 360: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4913  002146  C0C7  F080         	movff	display_menu@menuSelection,___wmul@multiplier
  4914  00214A  C0C8  F081         	movff	display_menu@menuSelection+1,___wmul@multiplier+1
  4915  00214E  0E00               	movlw	0
  4916  002150  0100               	movlb	0	; () banked
  4917  002152  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4918  002154  0EB4               	movlw	180
  4919  002156  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4920  002158  EC4B  F01E         	call	___wmul	;wreg free
  4921  00215C  0E8A               	movlw	low _menu
  4922  00215E  0100               	movlb	0	; () banked
  4923  002160  6FBE               	movwf	??_display_menu& (0+255),b
  4924  002162  0E01               	movlw	high _menu
  4925  002164  0100               	movlb	0	; () banked
  4926  002166  6FBF               	movwf	(??_display_menu+1)& (0+255),b
  4927  002168  0100               	movlb	0	; () banked
  4928  00216A  5180               	movf	?___wmul& (0+255),w,b
  4929  00216C  0100               	movlb	0	; () banked
  4930  00216E  27BE               	addwf	??_display_menu& (0+255),f,b
  4931  002170  0100               	movlb	0	; () banked
  4932  002172  5181               	movf	(?___wmul+1)& (0+255),w,b
  4933  002174  0100               	movlb	0	; () banked
  4934  002176  23BF               	addwfc	(??_display_menu+1)& (0+255),f,b
  4935  002178  C0CB  FFD9         	movff	display_menu@menuIndexPtr,fsr2l
  4936  00217C  C0CC  FFDA         	movff	display_menu@menuIndexPtr+1,fsr2h
  4937  002180  CFDE F080          	movff	postinc2,___wmul@multiplier
  4938  002184  CFDD F081          	movff	postdec2,___wmul@multiplier+1
  4939  002188  0E00               	movlw	0
  4940  00218A  0100               	movlb	0	; () banked
  4941  00218C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4942  00218E  0E12               	movlw	18
  4943  002190  6F82               	movwf	___wmul@multiplicand& (0+255),b
  4944  002192  EC4B  F01E         	call	___wmul	;wreg free
  4945  002196  0100               	movlb	0	; () banked
  4946  002198  5180               	movf	?___wmul& (0+255),w,b
  4947  00219A  0100               	movlb	0	; () banked
  4948  00219C  25BE               	addwf	??_display_menu& (0+255),w,b
  4949  00219E  0100               	movlb	0	; () banked
  4950  0021A0  6FC9               	movwf	_display_menu$1164& (0+255),b
  4951  0021A2  0100               	movlb	0	; () banked
  4952  0021A4  5181               	movf	(?___wmul+1)& (0+255),w,b
  4953  0021A6  0100               	movlb	0	; () banked
  4954  0021A8  21BF               	addwfc	(??_display_menu+1)& (0+255),w,b
  4955  0021AA  0100               	movlb	0	; () banked
  4956  0021AC  6FCA               	movwf	(_display_menu$1164+1)& (0+255),b
  4957                           
  4958                           ;main.c: 360: sprintf(ndisplay1,"%s%c",menu[menuSelection][*menuIndexPtr],'^');
  4959  0021AE  0E74               	movlw	low _ndisplay1
  4960  0021B0  0100               	movlb	0	; () banked
  4961  0021B2  6FA2               	movwf	sprintf@wh& (0+255),b
  4962  0021B4  0E01               	movlw	high _ndisplay1
  4963  0021B6  0100               	movlb	0	; () banked
  4964  0021B8  6FA3               	movwf	(sprintf@wh+1)& (0+255),b
  4965  0021BA  0EF9               	movlw	low STR_21
  4966  0021BC  0100               	movlb	0	; () banked
  4967  0021BE  6FA4               	movwf	sprintf@f& (0+255),b
  4968  0021C0  0EFF               	movlw	high STR_21
  4969  0021C2  0100               	movlb	0	; () banked
  4970  0021C4  6FA5               	movwf	(sprintf@f+1)& (0+255),b
  4971  0021C6  C0C9  F0A6         	movff	_display_menu$1164,?_sprintf+4
  4972  0021CA  C0CA  F0A7         	movff	_display_menu$1164+1,?_sprintf+5
  4973  0021CE  0E00               	movlw	0
  4974  0021D0  0100               	movlb	0	; () banked
  4975  0021D2  6FA9               	movwf	(?_sprintf+7)& (0+255),b
  4976  0021D4  0E5E               	movlw	94
  4977  0021D6  6FA8               	movwf	(?_sprintf+6)& (0+255),b
  4978  0021D8  EC8E  F01D         	call	_sprintf	;wreg free
  4979  0021DC  0012               	return	
  4980  0021DE                     __end_of_display_menu:
  4981                           	opt stack 0
  4982                           tblptru	equ	0xFF8
  4983                           tblptrh	equ	0xFF7
  4984                           tblptrl	equ	0xFF6
  4985                           tablat	equ	0xFF5
  4986                           prodh	equ	0xFF4
  4987                           prodl	equ	0xFF3
  4988                           intcon	equ	0xFF2
  4989                           intcon2	equ	0xFF1
  4990                           intcon3	equ	0xFF0
  4991                           postinc0	equ	0xFEE
  4992                           wreg	equ	0xFE8
  4993                           indf1	equ	0xFE7
  4994                           postinc1	equ	0xFE6
  4995                           postdec1	equ	0xFE5
  4996                           fsr1h	equ	0xFE2
  4997                           fsr1l	equ	0xFE1
  4998                           indf2	equ	0xFDF
  4999                           postinc2	equ	0xFDE
  5000                           postdec2	equ	0xFDD
  5001                           fsr2h	equ	0xFDA
  5002                           fsr2l	equ	0xFD9
  5003                           status	equ	0xFD8
  5004                           
  5005 ;; *************** function _sprintf *****************
  5006 ;; Defined at:
  5007 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\sprintf.c"
  5008 ;; Parameters:    Size  Location     Type
  5009 ;;  wh              2   34[BANK0 ] PTR unsigned char 
  5010 ;;		 -> menu(720), ndisplay1(18), ndisplay0(18), 
  5011 ;;  f               2   36[BANK0 ] PTR const unsigned char 
  5012 ;;		 -> STR_24(5), STR_23(5), STR_22(5), STR_21(5), 
  5013 ;;		 -> STR_20(20), STR_19(20), STR_18(22), STR_17(19), 
  5014 ;;		 -> menu(720), STR_16(15), STR_15(6), STR_14(24), 
  5015 ;;		 -> STR_13(7), STR_12(18), STR_11(19), STR_10(16), 
  5016 ;;		 -> STR_9(12), STR_8(19), STR_7(17), STR_6(14), 
  5017 ;;		 -> STR_5(12), STR_4(16), STR_3(25), STR_2(23), 
  5018 ;;		 -> STR_1(23), 
  5019 ;; Auto vars:     Size  Location     Type
  5020 ;;  pb              4   58[BANK0 ] struct __prbuf
  5021 ;;  ap              2   56[BANK0 ] PTR void [1]
  5022 ;;		 -> ?_sprintf(2), ?_printf(2), 
  5023 ;; Return value:  Size  Location     Type
  5024 ;;                  2   34[BANK0 ] int 
  5025 ;; Registers used:
  5026 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5027 ;; Tracked objects:
  5028 ;;		On entry : 0/0
  5029 ;;		On exit  : 0/0
  5030 ;;		Unchanged: 0/0
  5031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5032 ;;      Params:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5033 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5034 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5035 ;;      Totals:         0      28       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5036 ;;Total ram usage:       28 bytes
  5037 ;; Hardware stack levels used:    1
  5038 ;; Hardware stack levels required when called:    8
  5039 ;; This function calls:
  5040 ;;		__doprnt
  5041 ;; This function is called by:
  5042 ;;		_update_display
  5043 ;;		_update_state
  5044 ;;		_display_menu
  5045 ;; This function uses a non-reentrant model
  5046 ;;
  5047                           
  5048                           	psect	text8
  5049  003B1C                     __ptext8:
  5050                           	opt stack 0
  5051  003B1C                     _sprintf:
  5052                           	opt stack 21
  5053                           
  5054                           ;incstack = 0
  5055  003B1C  C0A2  F0BA         	movff	sprintf@wh,sprintf@pb
  5056  003B20  C0A3  F0BB         	movff	sprintf@wh+1,sprintf@pb+1
  5057  003B24  0E00               	movlw	0
  5058  003B26  0100               	movlb	0	; () banked
  5059  003B28  6FBC               	movwf	(sprintf@pb+2)& (0+255),b
  5060  003B2A  0E00               	movlw	0
  5061  003B2C  0100               	movlb	0	; () banked
  5062  003B2E  6FBD               	movwf	(sprintf@pb+3)& (0+255),b
  5063  003B30  0EA6               	movlw	low (?_sprintf+4)
  5064  003B32  0100               	movlb	0	; () banked
  5065  003B34  6FB8               	movwf	sprintf@ap& (0+255),b
  5066  003B36  0E00               	movlw	high (?_sprintf+4)
  5067  003B38  0100               	movlb	0	; () banked
  5068  003B3A  6FB9               	movwf	(sprintf@ap+1)& (0+255),b
  5069                           
  5070                           ; BSR set to: 0
  5071  003B3C  0EBA               	movlw	low sprintf@pb
  5072  003B3E  0100               	movlb	0	; () banked
  5073  003B40  6F8C               	movwf	__doprnt@pb& (0+255),b
  5074  003B42  0E00               	movlw	high sprintf@pb
  5075  003B44  0100               	movlb	0	; () banked
  5076  003B46  6F8D               	movwf	(__doprnt@pb+1)& (0+255),b
  5077  003B48  C0A4  F08E         	movff	sprintf@f,__doprnt@f
  5078  003B4C  C0A5  F08F         	movff	sprintf@f+1,__doprnt@f+1
  5079  003B50  0EB8               	movlw	low sprintf@ap
  5080  003B52  0100               	movlb	0	; () banked
  5081  003B54  6F90               	movwf	__doprnt@ap& (0+255),b
  5082  003B56  0E00               	movlw	high sprintf@ap
  5083  003B58  0100               	movlb	0	; () banked
  5084  003B5A  6F91               	movwf	(__doprnt@ap+1)& (0+255),b
  5085  003B5C  EC09  F000         	call	__doprnt	;wreg free
  5086  003B60  C0BA  FFD9         	movff	sprintf@pb,fsr2l
  5087  003B64  C0BB  FFDA         	movff	sprintf@pb+1,fsr2h
  5088  003B68  0E00               	movlw	0
  5089  003B6A  6EDF               	movwf	indf2,c
  5090  003B6C  0012               	return	
  5091  003B6E                     __end_of_sprintf:
  5092                           	opt stack 0
  5093                           tblptru	equ	0xFF8
  5094                           tblptrh	equ	0xFF7
  5095                           tblptrl	equ	0xFF6
  5096                           tablat	equ	0xFF5
  5097                           prodh	equ	0xFF4
  5098                           prodl	equ	0xFF3
  5099                           intcon	equ	0xFF2
  5100                           intcon2	equ	0xFF1
  5101                           intcon3	equ	0xFF0
  5102                           postinc0	equ	0xFEE
  5103                           wreg	equ	0xFE8
  5104                           indf1	equ	0xFE7
  5105                           postinc1	equ	0xFE6
  5106                           postdec1	equ	0xFE5
  5107                           fsr1h	equ	0xFE2
  5108                           fsr1l	equ	0xFE1
  5109                           indf2	equ	0xFDF
  5110                           postinc2	equ	0xFDE
  5111                           postdec2	equ	0xFDD
  5112                           fsr2h	equ	0xFDA
  5113                           fsr2l	equ	0xFD9
  5114                           status	equ	0xFD8
  5115                           
  5116 ;; *************** function __doprnt *****************
  5117 ;; Defined at:
  5118 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5119 ;; Parameters:    Size  Location     Type
  5120 ;;  pb              2   12[BANK0 ] PTR struct __prbuf
  5121 ;;		 -> sprintf@pb(4), printf@pb(4), 
  5122 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  5123 ;;		 -> STR_27(14), STR_26(15), STR_25(8), STR_24(5), 
  5124 ;;		 -> STR_23(5), STR_22(5), STR_21(5), STR_20(20), 
  5125 ;;		 -> STR_19(20), STR_18(22), STR_17(19), menu(720), 
  5126 ;;		 -> STR_16(15), STR_15(6), STR_14(24), STR_13(7), 
  5127 ;;		 -> STR_12(18), STR_11(19), STR_10(16), STR_9(12), 
  5128 ;;		 -> STR_8(19), STR_7(17), STR_6(14), STR_5(12), 
  5129 ;;		 -> STR_4(16), STR_3(25), STR_2(23), STR_1(23), 
  5130 ;;		 -> display1(18), display0(18), 
  5131 ;;  ap              2   16[BANK0 ] PTR PTR void 
  5132 ;;		 -> sprintf@ap(2), printf@ap(2), 
  5133 ;; Auto vars:     Size  Location     Type
  5134 ;;  idx             1   22[BANK0 ] unsigned char 
  5135 ;;  tmpval          4    0        struct .
  5136 ;;  width           2   31[BANK0 ] int 
  5137 ;;  val             2   28[BANK0 ] unsigned int 
  5138 ;;  cp              2   26[BANK0 ] PTR const unsigned char 
  5139 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_28(7), 
  5140 ;;		 -> _doprnt@c(1), menu(720), ADRESH(1), ndisplay1(18), 
  5141 ;;		 -> ndisplay0(18), 
  5142 ;;  len             2   24[BANK0 ] unsigned int 
  5143 ;;  c               1   33[BANK0 ] char 
  5144 ;;  flag            1   30[BANK0 ] unsigned char 
  5145 ;;  prec            1   23[BANK0 ] char 
  5146 ;; Return value:  Size  Location     Type
  5147 ;;                  2   12[BANK0 ] int 
  5148 ;; Registers used:
  5149 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5150 ;; Tracked objects:
  5151 ;;		On entry : 0/0
  5152 ;;		On exit  : 0/0
  5153 ;;		Unchanged: 0/0
  5154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5155 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5156 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5157 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5158 ;;      Totals:         0      22       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5159 ;;Total ram usage:       22 bytes
  5160 ;; Hardware stack levels used:    1
  5161 ;; Hardware stack levels required when called:    7
  5162 ;; This function calls:
  5163 ;;		Absolute function
  5164 ;;		___lwdiv
  5165 ;;		___lwmod
  5166 ;;		___wmul
  5167 ;;		_isdigit
  5168 ;;		_putch
  5169 ;; This function is called by:
  5170 ;;		_printf
  5171 ;;		_sprintf
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           	psect	text9
  5176  000012                     __ptext9:
  5177                           	opt stack 0
  5178  000012                     __doprnt:
  5179                           	opt stack 21
  5180                           
  5181                           ;doprnt.c: 499: signed char c;
  5182                           ;doprnt.c: 501: int width;
  5183                           ;doprnt.c: 506: signed char prec;
  5184                           ;doprnt.c: 508: unsigned char flag;
  5185                           ;doprnt.c: 523: union {
  5186                           ;doprnt.c: 524: unsigned long vd;
  5187                           ;doprnt.c: 525: double integ;
  5188                           ;doprnt.c: 526: } tmpval;
  5189                           ;doprnt.c: 528: unsigned int val;
  5190                           ;doprnt.c: 529: unsigned len;
  5191                           ;doprnt.c: 530: const char * cp;
  5192                           ;doprnt.c: 536: while(c = *f++) {
  5193                           
  5194                           ;incstack = 0
  5195  000012  EFA2  F004         	goto	l8050
  5196  000016                     l7844:
  5197                           
  5198                           ;doprnt.c: 538: if(c != '%')
  5199  000016  0E25               	movlw	37
  5200  000018  0100               	movlb	0	; () banked
  5201  00001A  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5202  00001C  B4D8               	btfsc	status,2,c
  5203  00001E  D03C               	goto	l7854
  5204                           
  5205                           ; BSR set to: 0
  5206                           ;doprnt.c: 540: {
  5207                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  5208  000020  0100               	movlb	0	; () banked
  5209  000022  EE20 F002          	lfsr	2,2
  5210  000026  518C               	movf	__doprnt@pb& (0+255),w,b
  5211  000028  26D9               	addwf	fsr2l,f,c
  5212  00002A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5213  00002C  22DA               	addwfc	fsr2h,f,c
  5214  00002E  50DE               	movf	postinc2,w,c
  5215  000030  10DE               	iorwf	postinc2,w,c
  5216  000032  B4D8               	btfsc	status,2,c
  5217  000034  D01A               	goto	l7850
  5218                           
  5219                           ; BSR set to: 0
  5220  000036  0100               	movlb	0	; () banked
  5221  000038  EE20 F002          	lfsr	2,2
  5222  00003C  518C               	movf	__doprnt@pb& (0+255),w,b
  5223  00003E  26D9               	addwf	fsr2l,f,c
  5224  000040  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5225  000042  22DA               	addwfc	fsr2h,f,c
  5226  000044  CFDE F092          	movff	postinc2,??__doprnt
  5227  000048  CFDD F093          	movff	postdec2,??__doprnt+1
  5228  00004C  D802               	call	u12928
  5229  00004E  EFA2  F004         	goto	l8050
  5230  000052                     u12928:
  5231  000052  0005               	push	
  5232  000054  6EFA               	movwf	pclath,c
  5233  000056  0100               	movlb	0	; () banked
  5234  000058  5192               	movf	??__doprnt& (0+255),w,b
  5235  00005A  6EFD               	movwf	tosl,c
  5236  00005C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5237  00005E  6EFE               	movwf	tosh,c
  5238  000060  6AFF               	clrf	tosu,c
  5239  000062  50FA               	movf	pclath,w,c
  5240  000064  0100               	movlb	0	; () banked
  5241  000066  51A1               	movf	__doprnt@c& (0+255),w,b
  5242  000068  0012               	return		;indir
  5243  00006A                     l7850:
  5244  00006A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5245  00006E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5246  000072  CFDE F092          	movff	postinc2,??__doprnt
  5247  000076  CFDD F093          	movff	postdec2,??__doprnt+1
  5248  00007A  C092  FFD9         	movff	??__doprnt,fsr2l
  5249  00007E  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5250  000082  C0A1  FFDF         	movff	__doprnt@c,indf2
  5251  000086  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5252  00008A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5253  00008E  2ADE               	incf	postinc2,f,c
  5254  000090  0E00               	movlw	0
  5255  000092  22DD               	addwfc	postdec2,f,c
  5256                           
  5257                           ;doprnt.c: 542: continue;
  5258  000094  EFA2  F004         	goto	l8050
  5259  000098                     l7854:
  5260                           
  5261                           ;doprnt.c: 543: }
  5262                           ;doprnt.c: 546: width = 0;
  5263  000098  0E00               	movlw	0
  5264  00009A  0100               	movlb	0	; () banked
  5265  00009C  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5266  00009E  0E00               	movlw	0
  5267  0000A0  6F9F               	movwf	__doprnt@width& (0+255),b
  5268                           
  5269                           ;doprnt.c: 548: flag = 0;
  5270  0000A2  0E00               	movlw	0
  5271  0000A4  0100               	movlb	0	; () banked
  5272  0000A6  6F9E               	movwf	__doprnt@flag& (0+255),b
  5273                           
  5274                           ; BSR set to: 0
  5275                           ;doprnt.c: 551: switch(*f) {
  5276                           
  5277                           ;doprnt.c: 550: for(;;) {
  5278  0000A8  D005               	goto	l7860
  5279  0000AA                     l7856:
  5280                           
  5281                           ;doprnt.c: 580: flag |= 0x04;
  5282  0000AA  0100               	movlb	0	; () banked
  5283  0000AC  859E               	bsf	__doprnt@flag& (0+255),2,b
  5284                           
  5285                           ;doprnt.c: 581: f++;
  5286  0000AE  0100               	movlb	0	; () banked
  5287  0000B0  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5288  0000B2  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5289  0000B4                     l7860:
  5290  0000B4  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5291  0000B8  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5292  0000BC  0E00               	movlw	low (__mediumconst shr (0+16))
  5293  0000BE  6EF8               	movwf	tblptru,c
  5294  0000C0  0E0F               	movlw	(high __ramtop+-1)
  5295  0000C2  64F7               	cpfsgt	tblptrh,c
  5296  0000C4  D003               	bra	u12937
  5297  0000C6  0008               	tblrd		*
  5298  0000C8  50F5               	movf	tablat,w,c
  5299  0000CA  D005               	bra	u12930
  5300  0000CC                     u12937:
  5301  0000CC  CFF6 FFE9          	movff	tblptrl,fsr0l
  5302  0000D0  CFF7 FFEA          	movff	tblptrh,fsr0h
  5303  0000D4  50EF               	movf	indf0,w,c
  5304  0000D6                     u12930:
  5305                           
  5306                           ; Switch size 1, requested type "space"
  5307                           ; Number of cases is 1, Range of values is 48 to 48
  5308                           ; switch strategies available:
  5309                           ; Name         Instructions Cycles
  5310                           ; simple_byte            4     3 (average)
  5311                           ;	Chosen strategy is simple_byte
  5312  0000D6  0A30               	xorlw	48	; case 48
  5313  0000D8  B4D8               	btfsc	status,2,c
  5314  0000DA  D7E7               	goto	l7856
  5315                           
  5316                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  5317                           
  5318                           ;doprnt.c: 586: }
  5319                           
  5320                           ;doprnt.c: 585: break;
  5321  0000DC  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5322  0000E0  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5323  0000E4  0E00               	movlw	low (__mediumconst shr (0+16))
  5324  0000E6  6EF8               	movwf	tblptru,c
  5325  0000E8  0E0F               	movlw	(high __ramtop+-1)
  5326  0000EA  64F7               	cpfsgt	tblptrh,c
  5327  0000EC  D003               	bra	u12947
  5328  0000EE  0008               	tblrd		*
  5329  0000F0  50F5               	movf	tablat,w,c
  5330  0000F2  D005               	bra	u12940
  5331  0000F4                     u12947:
  5332  0000F4  CFF6 FFE9          	movff	tblptrl,fsr0l
  5333  0000F8  CFF7 FFEA          	movff	tblptrh,fsr0h
  5334  0000FC  50EF               	movf	indf0,w,c
  5335  0000FE                     u12940:
  5336  0000FE  ECC7  F01E         	call	_isdigit
  5337  000102  A0D8               	btfss	status,0,c
  5338  000104  D18A               	goto	l7926
  5339                           
  5340                           ;doprnt.c: 598: width = 0;
  5341  000106  0E00               	movlw	0
  5342  000108  0100               	movlb	0	; () banked
  5343  00010A  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5344  00010C  0E00               	movlw	0
  5345  00010E  6F9F               	movwf	__doprnt@width& (0+255),b
  5346  000110                     l7866:
  5347                           
  5348                           ;doprnt.c: 600: width *= 10;
  5349  000110  C09F  F080         	movff	__doprnt@width,___wmul@multiplier
  5350  000114  C0A0  F081         	movff	__doprnt@width+1,___wmul@multiplier+1
  5351  000118  0E00               	movlw	0
  5352  00011A  0100               	movlb	0	; () banked
  5353  00011C  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  5354  00011E  0E0A               	movlw	10
  5355  000120  6F82               	movwf	___wmul@multiplicand& (0+255),b
  5356  000122  EC4B  F01E         	call	___wmul	;wreg free
  5357  000126  C080  F09F         	movff	?___wmul,__doprnt@width
  5358  00012A  C081  F0A0         	movff	?___wmul+1,__doprnt@width+1
  5359                           
  5360                           ;doprnt.c: 601: width += *f++ - '0';
  5361  00012E  0ED0               	movlw	208
  5362  000130  0100               	movlb	0	; () banked
  5363  000132  6F92               	movwf	??__doprnt& (0+255),b
  5364  000134  0EFF               	movlw	255
  5365  000136  0100               	movlb	0	; () banked
  5366  000138  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5367  00013A  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5368  00013E  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5369  000142  0E00               	movlw	low (__mediumconst shr (0+16))
  5370  000144  6EF8               	movwf	tblptru,c
  5371  000146  0E0F               	movlw	(high __ramtop+-1)
  5372  000148  64F7               	cpfsgt	tblptrh,c
  5373  00014A  D003               	bra	u12967
  5374  00014C  0008               	tblrd		*
  5375  00014E  50F5               	movf	tablat,w,c
  5376  000150  D005               	bra	u12960
  5377  000152                     u12967:
  5378  000152  CFF6 FFE9          	movff	tblptrl,fsr0l
  5379  000156  CFF7 FFEA          	movff	tblptrh,fsr0h
  5380  00015A  50EF               	movf	indf0,w,c
  5381  00015C                     u12960:
  5382  00015C  0100               	movlb	0	; () banked
  5383  00015E  6F94               	movwf	(??__doprnt+2)& (0+255),b
  5384  000160  6B95               	clrf	(??__doprnt+3)& (0+255),b
  5385  000162  0100               	movlb	0	; () banked
  5386  000164  5192               	movf	??__doprnt& (0+255),w,b
  5387  000166  0100               	movlb	0	; () banked
  5388  000168  2794               	addwf	(??__doprnt+2)& (0+255),f,b
  5389  00016A  0100               	movlb	0	; () banked
  5390  00016C  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5391  00016E  0100               	movlb	0	; () banked
  5392  000170  2395               	addwfc	(??__doprnt+3)& (0+255),f,b
  5393  000172  0100               	movlb	0	; () banked
  5394  000174  5194               	movf	(??__doprnt+2)& (0+255),w,b
  5395  000176  0100               	movlb	0	; () banked
  5396  000178  279F               	addwf	__doprnt@width& (0+255),f,b
  5397  00017A  0100               	movlb	0	; () banked
  5398  00017C  5195               	movf	(??__doprnt+3)& (0+255),w,b
  5399  00017E  0100               	movlb	0	; () banked
  5400  000180  23A0               	addwfc	(__doprnt@width+1)& (0+255),f,b
  5401                           
  5402                           ; BSR set to: 0
  5403  000182  0100               	movlb	0	; () banked
  5404  000184  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5405  000186  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5406                           
  5407                           ; BSR set to: 0
  5408                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  5409  000188  C08E  FFF6         	movff	__doprnt@f,tblptrl
  5410  00018C  C08F  FFF7         	movff	__doprnt@f+1,tblptrh
  5411  000190  0E00               	movlw	low (__mediumconst shr (0+16))
  5412  000192  6EF8               	movwf	tblptru,c
  5413  000194  0E0F               	movlw	(high __ramtop+-1)
  5414  000196  64F7               	cpfsgt	tblptrh,c
  5415  000198  D003               	bra	u12977
  5416  00019A  0008               	tblrd		*
  5417  00019C  50F5               	movf	tablat,w,c
  5418  00019E  D005               	bra	u12970
  5419  0001A0                     u12977:
  5420  0001A0  CFF6 FFE9          	movff	tblptrl,fsr0l
  5421  0001A4  CFF7 FFEA          	movff	tblptrh,fsr0h
  5422  0001A8  50EF               	movf	indf0,w,c
  5423  0001AA                     u12970:
  5424  0001AA  ECC7  F01E         	call	_isdigit
  5425  0001AE  A0D8               	btfss	status,0,c
  5426  0001B0  D134               	goto	l7926
  5427  0001B2  D7AE               	goto	l7866
  5428  0001B4                     l7874:
  5429                           
  5430                           ;doprnt.c: 721: flag |= 0x80;
  5431  0001B4  0100               	movlb	0	; () banked
  5432  0001B6  8F9E               	bsf	__doprnt@flag& (0+255),7,b
  5433                           
  5434                           ;doprnt.c: 723: break;
  5435  0001B8  D163               	goto	l533
  5436  0001BA                     l7876:
  5437                           
  5438                           ; BSR set to: 0
  5439                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5440  0001BA  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5441  0001BE  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5442  0001C2  CFDF F092          	movff	indf2,??__doprnt
  5443  0001C6  0E02               	movlw	2
  5444  0001C8  26DE               	addwf	postinc2,f,c
  5445  0001CA  CFDF F093          	movff	indf2,??__doprnt+1
  5446  0001CE  0E00               	movlw	0
  5447  0001D0  22DD               	addwfc	postdec2,f,c
  5448  0001D2  C092  FFD9         	movff	??__doprnt,fsr2l
  5449  0001D6  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5450  0001DA  CFDE F09A          	movff	postinc2,__doprnt@cp
  5451  0001DE  CFDD F09B          	movff	postdec2,__doprnt@cp+1
  5452                           
  5453                           ; BSR set to: 0
  5454                           ;doprnt.c: 740: if(!cp)
  5455  0001E2  0100               	movlb	0	; () banked
  5456  0001E4  519A               	movf	__doprnt@cp& (0+255),w,b
  5457  0001E6  0100               	movlb	0	; () banked
  5458  0001E8  119B               	iorwf	(__doprnt@cp+1)& (0+255),w,b
  5459  0001EA  A4D8               	btfss	status,2,c
  5460  0001EC  D006               	goto	l7882
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;doprnt.c: 741: cp = "(null)";
  5464  0001EE  0EE5               	movlw	low STR_28
  5465  0001F0  0100               	movlb	0	; () banked
  5466  0001F2  6F9A               	movwf	__doprnt@cp& (0+255),b
  5467  0001F4  0EFF               	movlw	high STR_28
  5468  0001F6  0100               	movlb	0	; () banked
  5469  0001F8  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  5470  0001FA                     l7882:
  5471                           
  5472                           ; BSR set to: 0
  5473                           ;doprnt.c: 745: len = 0;
  5474  0001FA  0E00               	movlw	0
  5475  0001FC  0100               	movlb	0	; () banked
  5476  0001FE  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  5477  000200  0E00               	movlw	0
  5478  000202  6F98               	movwf	__doprnt@len& (0+255),b
  5479                           
  5480                           ;doprnt.c: 746: while(cp[len])
  5481  000204  D003               	goto	l7886
  5482  000206                     l7884:
  5483                           
  5484                           ;doprnt.c: 747: len++;
  5485  000206  0100               	movlb	0	; () banked
  5486  000208  4B98               	infsnz	__doprnt@len& (0+255),f,b
  5487  00020A  2B99               	incf	(__doprnt@len+1)& (0+255),f,b
  5488  00020C                     l7886:
  5489                           
  5490                           ; BSR set to: 0
  5491  00020C  0100               	movlb	0	; () banked
  5492  00020E  5198               	movf	__doprnt@len& (0+255),w,b
  5493  000210  0100               	movlb	0	; () banked
  5494  000212  259A               	addwf	__doprnt@cp& (0+255),w,b
  5495  000214  0100               	movlb	0	; () banked
  5496  000216  6F92               	movwf	??__doprnt& (0+255),b
  5497  000218  0100               	movlb	0	; () banked
  5498  00021A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  5499  00021C  0100               	movlb	0	; () banked
  5500  00021E  219B               	addwfc	(__doprnt@cp+1)& (0+255),w,b
  5501  000220  0100               	movlb	0	; () banked
  5502  000222  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5503  000224  C092  FFF6         	movff	??__doprnt,tblptrl
  5504  000228  C093  FFF7         	movff	??__doprnt+1,tblptrh
  5505  00022C  0E00               	movlw	low (__mediumconst shr (0+16))
  5506  00022E  6EF8               	movwf	tblptru,c
  5507  000230  0E0F               	movlw	(high __ramtop+-1)
  5508  000232  64F7               	cpfsgt	tblptrh,c
  5509  000234  D003               	bra	u13007
  5510  000236  0008               	tblrd		*
  5511  000238  50F5               	movf	tablat,w,c
  5512  00023A  D005               	bra	u13000
  5513  00023C                     u13007:
  5514  00023C  CFF6 FFE9          	movff	tblptrl,fsr0l
  5515  000240  CFF7 FFEA          	movff	tblptrh,fsr0h
  5516  000244  50EF               	movf	indf0,w,c
  5517  000246                     u13000:
  5518  000246  0900               	iorlw	0
  5519  000248  A4D8               	btfss	status,2,c
  5520  00024A  D7DD               	goto	l7884
  5521  00024C                     l7888:
  5522                           
  5523                           ;doprnt.c: 757: if(width > len)
  5524  00024C  0100               	movlb	0	; () banked
  5525  00024E  519F               	movf	__doprnt@width& (0+255),w,b
  5526  000250  0100               	movlb	0	; () banked
  5527  000252  5D98               	subwf	__doprnt@len& (0+255),w,b
  5528  000254  0100               	movlb	0	; () banked
  5529  000256  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  5530  000258  0100               	movlb	0	; () banked
  5531  00025A  5999               	subwfb	(__doprnt@len+1)& (0+255),w,b
  5532  00025C  B0D8               	btfsc	status,0,c
  5533  00025E  D009               	goto	l7892
  5534                           
  5535                           ; BSR set to: 0
  5536                           ;doprnt.c: 758: width -= len;
  5537  000260  0100               	movlb	0	; () banked
  5538  000262  5198               	movf	__doprnt@len& (0+255),w,b
  5539  000264  0100               	movlb	0	; () banked
  5540  000266  5F9F               	subwf	__doprnt@width& (0+255),f,b
  5541  000268  0100               	movlb	0	; () banked
  5542  00026A  5199               	movf	(__doprnt@len+1)& (0+255),w,b
  5543  00026C  0100               	movlb	0	; () banked
  5544  00026E  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  5545  000270  D03E               	goto	l7902
  5546  000272                     l7892:
  5547                           
  5548                           ; BSR set to: 0
  5549                           ;doprnt.c: 759: else
  5550                           ;doprnt.c: 760: width = 0;
  5551  000272  0E00               	movlw	0
  5552  000274  0100               	movlb	0	; () banked
  5553  000276  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  5554  000278  0E00               	movlw	0
  5555  00027A  6F9F               	movwf	__doprnt@width& (0+255),b
  5556                           
  5557                           ; BSR set to: 0
  5558                           ;doprnt.c: 764: while(width--)
  5559  00027C  D038               	goto	l7902
  5560  00027E                     l7894:
  5561                           
  5562                           ; BSR set to: 0
  5563                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  5564  00027E  0100               	movlb	0	; () banked
  5565  000280  EE20 F002          	lfsr	2,2
  5566  000284  518C               	movf	__doprnt@pb& (0+255),w,b
  5567  000286  26D9               	addwf	fsr2l,f,c
  5568  000288  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5569  00028A  22DA               	addwfc	fsr2h,f,c
  5570  00028C  50DE               	movf	postinc2,w,c
  5571  00028E  10DE               	iorwf	postinc2,w,c
  5572  000290  B4D8               	btfsc	status,2,c
  5573  000292  D018               	goto	l7898
  5574                           
  5575                           ; BSR set to: 0
  5576  000294  0100               	movlb	0	; () banked
  5577  000296  EE20 F002          	lfsr	2,2
  5578  00029A  518C               	movf	__doprnt@pb& (0+255),w,b
  5579  00029C  26D9               	addwf	fsr2l,f,c
  5580  00029E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5581  0002A0  22DA               	addwfc	fsr2h,f,c
  5582  0002A2  CFDE F092          	movff	postinc2,??__doprnt
  5583  0002A6  CFDD F093          	movff	postdec2,??__doprnt+1
  5584  0002AA  D801               	call	u13048
  5585  0002AC  D020               	goto	l7902
  5586  0002AE                     u13048:
  5587  0002AE  0005               	push	
  5588  0002B0  6EFA               	movwf	pclath,c
  5589  0002B2  0100               	movlb	0	; () banked
  5590  0002B4  5192               	movf	??__doprnt& (0+255),w,b
  5591  0002B6  6EFD               	movwf	tosl,c
  5592  0002B8  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5593  0002BA  6EFE               	movwf	tosh,c
  5594  0002BC  6AFF               	clrf	tosu,c
  5595  0002BE  50FA               	movf	pclath,w,c
  5596  0002C0  0E20               	movlw	32
  5597  0002C2  0012               	return		;indir
  5598  0002C4                     l7898:
  5599  0002C4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5600  0002C8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5601  0002CC  CFDE F092          	movff	postinc2,??__doprnt
  5602  0002D0  CFDD F093          	movff	postdec2,??__doprnt+1
  5603  0002D4  C092  FFD9         	movff	??__doprnt,fsr2l
  5604  0002D8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5605  0002DC  0E20               	movlw	32
  5606  0002DE  6EDF               	movwf	indf2,c
  5607  0002E0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5608  0002E4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5609  0002E8  2ADE               	incf	postinc2,f,c
  5610  0002EA  0E00               	movlw	0
  5611  0002EC  22DD               	addwfc	postdec2,f,c
  5612  0002EE                     l7902:
  5613  0002EE  0100               	movlb	0	; () banked
  5614  0002F0  079F               	decf	__doprnt@width& (0+255),f,b
  5615  0002F2  A0D8               	btfss	status,0,c
  5616  0002F4  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  5617  0002F6  0100               	movlb	0	; () banked
  5618  0002F8  299F               	incf	__doprnt@width& (0+255),w,b
  5619  0002FA  E1C1               	bnz	l7894
  5620  0002FC  0100               	movlb	0	; () banked
  5621  0002FE  29A0               	incf	(__doprnt@width+1)& (0+255),w,b
  5622  000300  B4D8               	btfsc	status,2,c
  5623  000302  D060               	goto	l7916
  5624  000304  D7BC               	goto	l7894
  5625  000306                     l7904:
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
  5629  000306  0100               	movlb	0	; () banked
  5630  000308  EE20 F002          	lfsr	2,2
  5631  00030C  518C               	movf	__doprnt@pb& (0+255),w,b
  5632  00030E  26D9               	addwf	fsr2l,f,c
  5633  000310  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5634  000312  22DA               	addwfc	fsr2h,f,c
  5635  000314  50DE               	movf	postinc2,w,c
  5636  000316  10DE               	iorwf	postinc2,w,c
  5637  000318  B4D8               	btfsc	status,2,c
  5638  00031A  D02C               	goto	l7910
  5639                           
  5640                           ; BSR set to: 0
  5641  00031C  0100               	movlb	0	; () banked
  5642  00031E  EE20 F002          	lfsr	2,2
  5643  000322  518C               	movf	__doprnt@pb& (0+255),w,b
  5644  000324  26D9               	addwf	fsr2l,f,c
  5645  000326  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  5646  000328  22DA               	addwfc	fsr2h,f,c
  5647  00032A  CFDE F092          	movff	postinc2,??__doprnt
  5648  00032E  CFDD F093          	movff	postdec2,??__doprnt+1
  5649  000332  D801               	call	u13078
  5650  000334  D01B               	goto	l7908
  5651  000336                     u13078:
  5652  000336  0005               	push	
  5653  000338  6EFA               	movwf	pclath,c
  5654  00033A  0100               	movlb	0	; () banked
  5655  00033C  5192               	movf	??__doprnt& (0+255),w,b
  5656  00033E  6EFD               	movwf	tosl,c
  5657  000340  5193               	movf	(??__doprnt+1)& (0+255),w,b
  5658  000342  6EFE               	movwf	tosh,c
  5659  000344  6AFF               	clrf	tosu,c
  5660  000346  50FA               	movf	pclath,w,c
  5661  000348  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  5662  00034C  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  5663  000350  0E00               	movlw	low (__mediumconst shr (0+16))
  5664  000352  6EF8               	movwf	tblptru,c
  5665  000354  0E0F               	movlw	(high __ramtop+-1)
  5666  000356  64F7               	cpfsgt	tblptrh,c
  5667  000358  D003               	bra	u13087
  5668  00035A  0008               	tblrd		*
  5669  00035C  50F5               	movf	tablat,w,c
  5670  00035E  D005               	bra	u13080
  5671  000360                     u13087:
  5672  000360  CFF6 FFE9          	movff	tblptrl,fsr0l
  5673  000364  CFF7 FFEA          	movff	tblptrh,fsr0h
  5674  000368  50EF               	movf	indf0,w,c
  5675  00036A                     u13080:
  5676  00036A  0012               	return		;indir
  5677  00036C                     l7908:
  5678  00036C  0100               	movlb	0	; () banked
  5679  00036E  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  5680  000370  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  5681  000372  D028               	goto	l7916
  5682  000374                     l7910:
  5683                           
  5684                           ; BSR set to: 0
  5685  000374  C09A  FFF6         	movff	__doprnt@cp,tblptrl
  5686  000378  C09B  FFF7         	movff	__doprnt@cp+1,tblptrh
  5687  00037C  0E00               	movlw	low (__mediumconst shr (0+16))
  5688  00037E  6EF8               	movwf	tblptru,c
  5689  000380  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5690  000384  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5691  000388  CFDE F092          	movff	postinc2,??__doprnt
  5692  00038C  CFDD F093          	movff	postdec2,??__doprnt+1
  5693  000390  C092  FFD9         	movff	??__doprnt,fsr2l
  5694  000394  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5695  000398  0E0F               	movlw	(high __ramtop+-1)
  5696  00039A  64F7               	cpfsgt	tblptrh,c
  5697  00039C  D003               	bra	u13097
  5698  00039E  0008               	tblrd		*
  5699  0003A0  50F5               	movf	tablat,w,c
  5700  0003A2  D005               	bra	u13090
  5701  0003A4                     u13097:
  5702  0003A4  CFF6 FFE9          	movff	tblptrl,fsr0l
  5703  0003A8  CFF7 FFEA          	movff	tblptrh,fsr0h
  5704  0003AC  50EF               	movf	indf0,w,c
  5705  0003AE                     u13090:
  5706  0003AE  6EDF               	movwf	indf2,c
  5707  0003B0  0100               	movlb	0	; () banked
  5708  0003B2  4B9A               	infsnz	__doprnt@cp& (0+255),f,b
  5709  0003B4  2B9B               	incf	(__doprnt@cp+1)& (0+255),f,b
  5710                           
  5711                           ; BSR set to: 0
  5712  0003B6  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  5713  0003BA  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  5714  0003BE  2ADE               	incf	postinc2,f,c
  5715  0003C0  0E00               	movlw	0
  5716  0003C2  22DD               	addwfc	postdec2,f,c
  5717  0003C4                     l7916:
  5718                           
  5719                           ; BSR set to: 0
  5720  0003C4  0100               	movlb	0	; () banked
  5721  0003C6  0798               	decf	__doprnt@len& (0+255),f,b
  5722  0003C8  A0D8               	btfss	status,0,c
  5723  0003CA  0799               	decf	(__doprnt@len+1)& (0+255),f,b
  5724  0003CC  0100               	movlb	0	; () banked
  5725  0003CE  2998               	incf	__doprnt@len& (0+255),w,b
  5726  0003D0  E19A               	bnz	l7904
  5727  0003D2  0100               	movlb	0	; () banked
  5728  0003D4  2999               	incf	(__doprnt@len+1)& (0+255),w,b
  5729  0003D6  B4D8               	btfsc	status,2,c
  5730  0003D8  D2B5               	goto	l8050
  5731  0003DA  D795               	goto	l7904
  5732  0003DC                     l7918:
  5733                           
  5734                           ; BSR set to: 0
  5735                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5736  0003DC  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5737  0003E0  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5738  0003E4  CFDF F092          	movff	indf2,??__doprnt
  5739  0003E8  0E02               	movlw	2
  5740  0003EA  26DE               	addwf	postinc2,f,c
  5741  0003EC  CFDF F093          	movff	indf2,??__doprnt+1
  5742  0003F0  0E00               	movlw	0
  5743  0003F2  22DD               	addwfc	postdec2,f,c
  5744  0003F4  C092  FFD9         	movff	??__doprnt,fsr2l
  5745  0003F8  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5746  0003FC  50DF               	movf	indf2,w,c
  5747  0003FE  0100               	movlb	0	; () banked
  5748  000400  6FA1               	movwf	__doprnt@c& (0+255),b
  5749  000402                     l7920:
  5750                           
  5751                           ; BSR set to: 0
  5752                           ;doprnt.c: 805: cp = (char *)&c;
  5753  000402  0EA1               	movlw	low __doprnt@c
  5754  000404  0100               	movlb	0	; () banked
  5755  000406  6F9A               	movwf	__doprnt@cp& (0+255),b
  5756  000408  0E00               	movlw	high __doprnt@c
  5757  00040A  0100               	movlb	0	; () banked
  5758  00040C  6F9B               	movwf	(__doprnt@cp+1)& (0+255),b
  5759                           
  5760                           ; BSR set to: 0
  5761                           ;doprnt.c: 806: len = 1;
  5762  00040E  0E00               	movlw	0
  5763  000410  0100               	movlb	0	; () banked
  5764  000412  6F99               	movwf	(__doprnt@len+1)& (0+255),b
  5765  000414  0E01               	movlw	1
  5766  000416  6F98               	movwf	__doprnt@len& (0+255),b
  5767                           
  5768                           ;doprnt.c: 807: goto dostring;
  5769  000418  D719               	goto	l7888
  5770  00041A                     l7926:
  5771  00041A  0100               	movlb	0	; () banked
  5772  00041C  518E               	movf	__doprnt@f& (0+255),w,b
  5773  00041E  0100               	movlb	0	; () banked
  5774  000420  6F92               	movwf	??__doprnt& (0+255),b
  5775  000422  0100               	movlb	0	; () banked
  5776  000424  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  5777  000426  0100               	movlb	0	; () banked
  5778  000428  6F93               	movwf	(??__doprnt+1)& (0+255),b
  5779  00042A  0100               	movlb	0	; () banked
  5780  00042C  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  5781  00042E  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  5782  000430  C092  FFF6         	movff	??__doprnt,tblptrl
  5783  000434  C093  FFF7         	movff	??__doprnt+1,tblptrh
  5784  000438  0E00               	movlw	low (__mediumconst shr (0+16))
  5785  00043A  6EF8               	movwf	tblptru,c
  5786  00043C  0E0F               	movlw	(high __ramtop+-1)
  5787  00043E  64F7               	cpfsgt	tblptrh,c
  5788  000440  D003               	bra	u13117
  5789  000442  0008               	tblrd		*
  5790  000444  50F5               	movf	tablat,w,c
  5791  000446  D005               	bra	u13110
  5792  000448                     u13117:
  5793  000448  CFF6 FFE9          	movff	tblptrl,fsr0l
  5794  00044C  CFF7 FFEA          	movff	tblptrh,fsr0h
  5795  000450  50EF               	movf	indf0,w,c
  5796  000452                     u13110:
  5797  000452  0100               	movlb	0	; () banked
  5798  000454  6FA1               	movwf	__doprnt@c& (0+255),b
  5799  000456  0100               	movlb	0	; () banked
  5800  000458  51A1               	movf	__doprnt@c& (0+255),w,b
  5801                           
  5802                           ; Switch size 1, requested type "space"
  5803                           ; Number of cases is 6, Range of values is 0 to 120
  5804                           ; switch strategies available:
  5805                           ; Name         Instructions Cycles
  5806                           ; simple_byte           19    10 (average)
  5807                           ;	Chosen strategy is simple_byte
  5808  00045A  0A00               	xorlw	0	; case 0
  5809  00045C  B4D8               	btfsc	status,2,c
  5810  00045E  D295               	goto	l8052
  5811  000460  0A63               	xorlw	99	; case 99
  5812  000462  B4D8               	btfsc	status,2,c
  5813  000464  D7BB               	goto	l7918
  5814  000466  0A07               	xorlw	7	; case 100
  5815  000468  B4D8               	btfsc	status,2,c
  5816  00046A  D00A               	goto	l533
  5817  00046C  0A0D               	xorlw	13	; case 105
  5818  00046E  B4D8               	btfsc	status,2,c
  5819  000470  D007               	goto	l533
  5820  000472  0A1A               	xorlw	26	; case 115
  5821  000474  B4D8               	btfsc	status,2,c
  5822  000476  D6A1               	goto	l7876
  5823  000478  0A0B               	xorlw	11	; case 120
  5824  00047A  B4D8               	btfsc	status,2,c
  5825  00047C  D69B               	goto	l7874
  5826  00047E  D7C1               	goto	l7920
  5827  000480                     l533:
  5828                           
  5829                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  5830  000480  0100               	movlb	0	; () banked
  5831  000482  BF9E               	btfsc	__doprnt@flag& (0+255),7,b
  5832  000484  D020               	goto	l7936
  5833                           
  5834                           ; BSR set to: 0
  5835                           ;doprnt.c: 1253: {
  5836                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5837  000486  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5838  00048A  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5839  00048E  CFDF F092          	movff	indf2,??__doprnt
  5840  000492  0E02               	movlw	2
  5841  000494  26DE               	addwf	postinc2,f,c
  5842  000496  CFDF F093          	movff	indf2,??__doprnt+1
  5843  00049A  0E00               	movlw	0
  5844  00049C  22DD               	addwfc	postdec2,f,c
  5845  00049E  C092  FFD9         	movff	??__doprnt,fsr2l
  5846  0004A2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5847  0004A6  CFDE F09C          	movff	postinc2,__doprnt@val
  5848  0004AA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;doprnt.c: 1261: if((int)val < 0) {
  5852  0004AE  0100               	movlb	0	; () banked
  5853  0004B0  AF9D               	btfss	(__doprnt@val+1)& (0+255),7,b
  5854  0004B2  D060               	goto	l7968
  5855                           
  5856                           ; BSR set to: 0
  5857                           ;doprnt.c: 1262: flag |= 0x03;
  5858  0004B4  0E03               	movlw	3
  5859  0004B6  0100               	movlb	0	; () banked
  5860  0004B8  139E               	iorwf	__doprnt@flag& (0+255),f,b
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;doprnt.c: 1263: val = -val;
  5864  0004BA  0100               	movlb	0	; () banked
  5865  0004BC  6D9C               	negf	__doprnt@val& (0+255),b
  5866  0004BE  1F9D               	comf	(__doprnt@val+1)& (0+255),f,b
  5867  0004C0  B0D8               	btfsc	status,0,c
  5868  0004C2  2B9D               	incf	(__doprnt@val+1)& (0+255),f,b
  5869                           
  5870                           ; BSR set to: 0
  5871                           ;doprnt.c: 1264: }
  5872                           ;doprnt.c: 1266: }
  5873  0004C4  D057               	goto	l7968
  5874  0004C6                     l7936:
  5875                           
  5876                           ; BSR set to: 0
  5877                           ;doprnt.c: 1268: else
  5878                           ;doprnt.c: 1273: {
  5879                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5880  0004C6  C090  FFD9         	movff	__doprnt@ap,fsr2l
  5881  0004CA  C091  FFDA         	movff	__doprnt@ap+1,fsr2h
  5882  0004CE  CFDF F092          	movff	indf2,??__doprnt
  5883  0004D2  0E02               	movlw	2
  5884  0004D4  26DE               	addwf	postinc2,f,c
  5885  0004D6  CFDF F093          	movff	indf2,??__doprnt+1
  5886  0004DA  0E00               	movlw	0
  5887  0004DC  22DD               	addwfc	postdec2,f,c
  5888  0004DE  C092  FFD9         	movff	??__doprnt,fsr2l
  5889  0004E2  C093  FFDA         	movff	??__doprnt+1,fsr2h
  5890  0004E6  CFDE F09C          	movff	postinc2,__doprnt@val
  5891  0004EA  CFDD F09D          	movff	postdec2,__doprnt@val+1
  5892                           
  5893                           ; BSR set to: 0
  5894                           ;doprnt.c: 1287: }
  5895                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  5896  0004EE  D042               	goto	l7968
  5897  0004F0                     l7938:
  5898                           
  5899                           ; BSR set to: 0
  5900                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5901  0004F0  0E01               	movlw	1
  5902  0004F2  0100               	movlb	0	; () banked
  5903  0004F4  6FA1               	movwf	__doprnt@c& (0+255),b
  5904  0004F6                     l7940:
  5905                           
  5906                           ; BSR set to: 0
  5907  0004F6  0E05               	movlw	5
  5908  0004F8  0100               	movlb	0	; () banked
  5909  0004FA  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5910  0004FC  B4D8               	btfsc	status,2,c
  5911  0004FE  D043               	goto	l7970
  5912                           
  5913                           ; BSR set to: 0
  5914                           ;doprnt.c: 1306: if(val < dpowers[c])
  5915                           
  5916                           ; BSR set to: 0
  5917                           
  5918                           ; BSR set to: 0
  5919  000500  0100               	movlb	0	; () banked
  5920  000502  51A1               	movf	__doprnt@c& (0+255),w,b
  5921  000504  0D02               	mullw	2
  5922  000506  0E48               	movlw	low _dpowers
  5923  000508  24F3               	addwf	prodl,w,c
  5924  00050A  6EF6               	movwf	tblptrl,c
  5925  00050C  0EFE               	movlw	high _dpowers
  5926  00050E  20F4               	addwfc	prodh,w,c
  5927  000510  6EF7               	movwf	tblptrh,c
  5928  000512                     	if	1	;There are 3 active tblptr bytes
  5929  000512  6AF8               	clrf	tblptru,c
  5930  000514  0E00               	movlw	low (__mediumconst shr (0+16))
  5931  000516  22F8               	addwfc	tblptru,f,c
  5932  000518                     	endif
  5933  000518  0009               	tblrd		*+
  5934  00051A  50F5               	movf	tablat,w,c
  5935  00051C  0100               	movlb	0	; () banked
  5936  00051E  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5937  000520  0009               	tblrd		*+
  5938  000522  50F5               	movf	tablat,w,c
  5939  000524  0100               	movlb	0	; () banked
  5940  000526  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5941  000528  A0D8               	btfss	status,0,c
  5942  00052A  D02D               	goto	l7970
  5943                           
  5944                           ; BSR set to: 0
  5945                           
  5946                           ; BSR set to: 0
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;doprnt.c: 1307: break;
  5950  00052C  0100               	movlb	0	; () banked
  5951  00052E  2BA1               	incf	__doprnt@c& (0+255),f,b
  5952  000530  D7E2               	goto	l7940
  5953  000532                     l7952:
  5954                           
  5955                           ; BSR set to: 0
  5956                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  5957  000532  0E01               	movlw	1
  5958  000534  0100               	movlb	0	; () banked
  5959  000536  6FA1               	movwf	__doprnt@c& (0+255),b
  5960  000538                     l7954:
  5961                           
  5962                           ; BSR set to: 0
  5963  000538  0E04               	movlw	4
  5964  00053A  0100               	movlb	0	; () banked
  5965  00053C  19A1               	xorwf	__doprnt@c& (0+255),w,b
  5966  00053E  B4D8               	btfsc	status,2,c
  5967  000540  D022               	goto	l7970
  5968                           
  5969                           ; BSR set to: 0
  5970                           ;doprnt.c: 1317: if(val < hexpowers[c])
  5971                           
  5972                           ; BSR set to: 0
  5973                           
  5974                           ; BSR set to: 0
  5975  000542  0100               	movlb	0	; () banked
  5976  000544  51A1               	movf	__doprnt@c& (0+255),w,b
  5977  000546  0D02               	mullw	2
  5978  000548  0E52               	movlw	low _hexpowers
  5979  00054A  24F3               	addwf	prodl,w,c
  5980  00054C  6EF6               	movwf	tblptrl,c
  5981  00054E  0EFE               	movlw	high _hexpowers
  5982  000550  20F4               	addwfc	prodh,w,c
  5983  000552  6EF7               	movwf	tblptrh,c
  5984  000554                     	if	1	;There are 3 active tblptr bytes
  5985  000554  6AF8               	clrf	tblptru,c
  5986  000556  0E00               	movlw	low (__mediumconst shr (0+16))
  5987  000558  22F8               	addwfc	tblptru,f,c
  5988  00055A                     	endif
  5989  00055A  0009               	tblrd		*+
  5990  00055C  50F5               	movf	tablat,w,c
  5991  00055E  0100               	movlb	0	; () banked
  5992  000560  5D9C               	subwf	__doprnt@val& (0+255),w,b
  5993  000562  0009               	tblrd		*+
  5994  000564  50F5               	movf	tablat,w,c
  5995  000566  0100               	movlb	0	; () banked
  5996  000568  599D               	subwfb	(__doprnt@val+1)& (0+255),w,b
  5997  00056A  A0D8               	btfss	status,0,c
  5998  00056C  D00C               	goto	l7970
  5999                           
  6000                           ; BSR set to: 0
  6001                           
  6002                           ; BSR set to: 0
  6003                           
  6004                           ; BSR set to: 0
  6005                           ;doprnt.c: 1318: break;
  6006  00056E  0100               	movlb	0	; () banked
  6007  000570  2BA1               	incf	__doprnt@c& (0+255),f,b
  6008  000572  D7E2               	goto	l7954
  6009  000574                     l7968:
  6010                           
  6011                           ; BSR set to: 0
  6012  000574  0100               	movlb	0	; () banked
  6013  000576  519E               	movf	__doprnt@flag& (0+255),w,b
  6014  000578  0B80               	andlw	128
  6015                           
  6016                           ; Switch size 1, requested type "space"
  6017                           ; Number of cases is 2, Range of values is 0 to 128
  6018                           ; switch strategies available:
  6019                           ; Name         Instructions Cycles
  6020                           ; simple_byte            7     4 (average)
  6021                           ;	Chosen strategy is simple_byte
  6022  00057A  0A00               	xorlw	0	; case 0
  6023  00057C  B4D8               	btfsc	status,2,c
  6024  00057E  D7B8               	goto	l7938
  6025  000580  0A80               	xorlw	128	; case 128
  6026  000582  B4D8               	btfsc	status,2,c
  6027  000584  D7D6               	goto	l7952
  6028  000586                     l7970:
  6029                           
  6030                           ; BSR set to: 0
  6031                           ;doprnt.c: 1345: if(width && flag & 0x03)
  6032  000586  0100               	movlb	0	; () banked
  6033  000588  519F               	movf	__doprnt@width& (0+255),w,b
  6034  00058A  0100               	movlb	0	; () banked
  6035  00058C  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  6036  00058E  B4D8               	btfsc	status,2,c
  6037  000590  D00B               	goto	l7976
  6038                           
  6039                           ; BSR set to: 0
  6040  000592  C09E  F092         	movff	__doprnt@flag,??__doprnt
  6041  000596  0E03               	movlw	3
  6042  000598  0100               	movlb	0	; () banked
  6043  00059A  1792               	andwf	??__doprnt& (0+255),f,b
  6044  00059C  B4D8               	btfsc	status,2,c
  6045  00059E  D004               	goto	l7976
  6046                           
  6047                           ; BSR set to: 0
  6048                           ;doprnt.c: 1346: width--;
  6049  0005A0  0100               	movlb	0	; () banked
  6050  0005A2  079F               	decf	__doprnt@width& (0+255),f,b
  6051  0005A4  A0D8               	btfss	status,0,c
  6052  0005A6  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  6053  0005A8                     l7976:
  6054                           
  6055                           ; BSR set to: 0
  6056                           ;doprnt.c: 1381: if(width > c)
  6057  0005A8  0E80               	movlw	128
  6058  0005AA  0100               	movlb	0	; () banked
  6059  0005AC  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  6060  0005AE  0E7F               	movlw	127
  6061  0005B0  0100               	movlb	0	; () banked
  6062  0005B2  6F92               	movwf	??__doprnt& (0+255),b
  6063  0005B4  0100               	movlb	0	; () banked
  6064  0005B6  519F               	movf	__doprnt@width& (0+255),w,b
  6065  0005B8  0100               	movlb	0	; () banked
  6066  0005BA  5DA1               	subwf	__doprnt@c& (0+255),w,b
  6067  0005BC  0100               	movlb	0	; () banked
  6068  0005BE  51A0               	movf	(__doprnt@width+1)& (0+255),w,b
  6069  0005C0  0A80               	xorlw	128
  6070  0005C2  0100               	movlb	0	; () banked
  6071  0005C4  5992               	subwfb	??__doprnt& (0+255),w,b
  6072  0005C6  B0D8               	btfsc	status,0,c
  6073  0005C8  D00B               	goto	l7980
  6074                           
  6075                           ; BSR set to: 0
  6076                           ;doprnt.c: 1382: width -= c;
  6077  0005CA  0100               	movlb	0	; () banked
  6078  0005CC  51A1               	movf	__doprnt@c& (0+255),w,b
  6079  0005CE  0100               	movlb	0	; () banked
  6080  0005D0  5F9F               	subwf	__doprnt@width& (0+255),f,b
  6081  0005D2  0E00               	movlw	0
  6082  0005D4  0100               	movlb	0	; () banked
  6083  0005D6  BFA1               	btfsc	__doprnt@c& (0+255),7,b
  6084  0005D8  0EFF               	movlw	255
  6085  0005DA  0100               	movlb	0	; () banked
  6086  0005DC  5BA0               	subwfb	(__doprnt@width+1)& (0+255),f,b
  6087  0005DE  D005               	goto	l7982
  6088  0005E0                     l7980:
  6089                           
  6090                           ; BSR set to: 0
  6091                           ;doprnt.c: 1383: else
  6092                           ;doprnt.c: 1384: width = 0;
  6093  0005E0  0E00               	movlw	0
  6094  0005E2  0100               	movlb	0	; () banked
  6095  0005E4  6FA0               	movwf	(__doprnt@width+1)& (0+255),b
  6096  0005E6  0E00               	movlw	0
  6097  0005E8  6F9F               	movwf	__doprnt@width& (0+255),b
  6098  0005EA                     l7982:
  6099                           
  6100                           ; BSR set to: 0
  6101                           ;doprnt.c: 1387: if(flag & 0x04) {
  6102  0005EA  0100               	movlb	0	; () banked
  6103  0005EC  A59E               	btfss	__doprnt@flag& (0+255),2,b
  6104  0005EE  D082               	goto	l8006
  6105                           
  6106                           ; BSR set to: 0
  6107                           ;doprnt.c: 1392: if(flag & 0x03)
  6108  0005F0  C09E  F092         	movff	__doprnt@flag,??__doprnt
  6109  0005F4  0E03               	movlw	3
  6110  0005F6  0100               	movlb	0	; () banked
  6111  0005F8  1792               	andwf	??__doprnt& (0+255),f,b
  6112  0005FA  B4D8               	btfsc	status,2,c
  6113  0005FC  D038               	goto	l7994
  6114                           
  6115                           ; BSR set to: 0
  6116                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  6117  0005FE  0100               	movlb	0	; () banked
  6118  000600  EE20 F002          	lfsr	2,2
  6119  000604  518C               	movf	__doprnt@pb& (0+255),w,b
  6120  000606  26D9               	addwf	fsr2l,f,c
  6121  000608  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6122  00060A  22DA               	addwfc	fsr2h,f,c
  6123  00060C  50DE               	movf	postinc2,w,c
  6124  00060E  10DE               	iorwf	postinc2,w,c
  6125  000610  B4D8               	btfsc	status,2,c
  6126  000612  D018               	goto	l7990
  6127                           
  6128                           ; BSR set to: 0
  6129  000614  0100               	movlb	0	; () banked
  6130  000616  EE20 F002          	lfsr	2,2
  6131  00061A  518C               	movf	__doprnt@pb& (0+255),w,b
  6132  00061C  26D9               	addwf	fsr2l,f,c
  6133  00061E  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6134  000620  22DA               	addwfc	fsr2h,f,c
  6135  000622  CFDE F092          	movff	postinc2,??__doprnt
  6136  000626  CFDD F093          	movff	postdec2,??__doprnt+1
  6137  00062A  D801               	call	u13268
  6138  00062C  D020               	goto	l7994
  6139  00062E                     u13268:
  6140  00062E  0005               	push	
  6141  000630  6EFA               	movwf	pclath,c
  6142  000632  0100               	movlb	0	; () banked
  6143  000634  5192               	movf	??__doprnt& (0+255),w,b
  6144  000636  6EFD               	movwf	tosl,c
  6145  000638  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6146  00063A  6EFE               	movwf	tosh,c
  6147  00063C  6AFF               	clrf	tosu,c
  6148  00063E  50FA               	movf	pclath,w,c
  6149  000640  0E2D               	movlw	45
  6150  000642  0012               	return		;indir
  6151  000644                     l7990:
  6152  000644  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6153  000648  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6154  00064C  CFDE F092          	movff	postinc2,??__doprnt
  6155  000650  CFDD F093          	movff	postdec2,??__doprnt+1
  6156  000654  C092  FFD9         	movff	??__doprnt,fsr2l
  6157  000658  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6158  00065C  0E2D               	movlw	45
  6159  00065E  6EDF               	movwf	indf2,c
  6160  000660  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6161  000664  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6162  000668  2ADE               	incf	postinc2,f,c
  6163  00066A  0E00               	movlw	0
  6164  00066C  22DD               	addwfc	postdec2,f,c
  6165  00066E                     l7994:
  6166                           
  6167                           ;doprnt.c: 1415: if(width)
  6168  00066E  0100               	movlb	0	; () banked
  6169  000670  519F               	movf	__doprnt@width& (0+255),w,b
  6170  000672  0100               	movlb	0	; () banked
  6171  000674  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  6172  000676  B4D8               	btfsc	status,2,c
  6173  000678  D0C4               	goto	l8028
  6174                           
  6175                           ; BSR set to: 0
  6176                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
  6177                           
  6178                           ; BSR set to: 0
  6179                           
  6180                           ;doprnt.c: 1416: do
  6181  00067A  0100               	movlb	0	; () banked
  6182  00067C  EE20 F002          	lfsr	2,2
  6183  000680  518C               	movf	__doprnt@pb& (0+255),w,b
  6184  000682  26D9               	addwf	fsr2l,f,c
  6185  000684  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6186  000686  22DA               	addwfc	fsr2h,f,c
  6187  000688  50DE               	movf	postinc2,w,c
  6188  00068A  10DE               	iorwf	postinc2,w,c
  6189  00068C  B4D8               	btfsc	status,2,c
  6190  00068E  D018               	goto	l8000
  6191                           
  6192                           ; BSR set to: 0
  6193  000690  0100               	movlb	0	; () banked
  6194  000692  EE20 F002          	lfsr	2,2
  6195  000696  518C               	movf	__doprnt@pb& (0+255),w,b
  6196  000698  26D9               	addwf	fsr2l,f,c
  6197  00069A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6198  00069C  22DA               	addwfc	fsr2h,f,c
  6199  00069E  CFDE F092          	movff	postinc2,??__doprnt
  6200  0006A2  CFDD F093          	movff	postdec2,??__doprnt+1
  6201  0006A6  D801               	call	u13298
  6202  0006A8  D020               	goto	l8004
  6203  0006AA                     u13298:
  6204  0006AA  0005               	push	
  6205  0006AC  6EFA               	movwf	pclath,c
  6206  0006AE  0100               	movlb	0	; () banked
  6207  0006B0  5192               	movf	??__doprnt& (0+255),w,b
  6208  0006B2  6EFD               	movwf	tosl,c
  6209  0006B4  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6210  0006B6  6EFE               	movwf	tosh,c
  6211  0006B8  6AFF               	clrf	tosu,c
  6212  0006BA  50FA               	movf	pclath,w,c
  6213  0006BC  0E30               	movlw	48
  6214  0006BE  0012               	return		;indir
  6215  0006C0                     l8000:
  6216  0006C0  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6217  0006C4  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6218  0006C8  CFDE F092          	movff	postinc2,??__doprnt
  6219  0006CC  CFDD F093          	movff	postdec2,??__doprnt+1
  6220  0006D0  C092  FFD9         	movff	??__doprnt,fsr2l
  6221  0006D4  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6222  0006D8  0E30               	movlw	48
  6223  0006DA  6EDF               	movwf	indf2,c
  6224  0006DC  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6225  0006E0  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6226  0006E4  2ADE               	incf	postinc2,f,c
  6227  0006E6  0E00               	movlw	0
  6228  0006E8  22DD               	addwfc	postdec2,f,c
  6229  0006EA                     l8004:
  6230                           
  6231                           ;doprnt.c: 1418: while(--width);
  6232  0006EA  0100               	movlb	0	; () banked
  6233  0006EC  079F               	decf	__doprnt@width& (0+255),f,b
  6234  0006EE  A0D8               	btfss	status,0,c
  6235  0006F0  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  6236  0006F2  D7BD               	goto	l7994
  6237  0006F4                     l8006:
  6238                           
  6239                           ; BSR set to: 0
  6240                           ;doprnt.c: 1422: {
  6241                           ;doprnt.c: 1424: if(width
  6242                           ;doprnt.c: 1428: )
  6243  0006F4  0100               	movlb	0	; () banked
  6244  0006F6  519F               	movf	__doprnt@width& (0+255),w,b
  6245  0006F8  0100               	movlb	0	; () banked
  6246  0006FA  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  6247  0006FC  B4D8               	btfsc	status,2,c
  6248  0006FE  D042               	goto	l8018
  6249  000700                     l8008:
  6250                           
  6251                           ; BSR set to: 0
  6252                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
  6253  000700  0100               	movlb	0	; () banked
  6254  000702  EE20 F002          	lfsr	2,2
  6255  000706  518C               	movf	__doprnt@pb& (0+255),w,b
  6256  000708  26D9               	addwf	fsr2l,f,c
  6257  00070A  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6258  00070C  22DA               	addwfc	fsr2h,f,c
  6259  00070E  50DE               	movf	postinc2,w,c
  6260  000710  10DE               	iorwf	postinc2,w,c
  6261  000712  B4D8               	btfsc	status,2,c
  6262  000714  D018               	goto	l8012
  6263                           
  6264                           ; BSR set to: 0
  6265  000716  0100               	movlb	0	; () banked
  6266  000718  EE20 F002          	lfsr	2,2
  6267  00071C  518C               	movf	__doprnt@pb& (0+255),w,b
  6268  00071E  26D9               	addwf	fsr2l,f,c
  6269  000720  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6270  000722  22DA               	addwfc	fsr2h,f,c
  6271  000724  CFDE F092          	movff	postinc2,??__doprnt
  6272  000728  CFDD F093          	movff	postdec2,??__doprnt+1
  6273  00072C  D801               	call	u13338
  6274  00072E  D020               	goto	l8016
  6275  000730                     u13338:
  6276  000730  0005               	push	
  6277  000732  6EFA               	movwf	pclath,c
  6278  000734  0100               	movlb	0	; () banked
  6279  000736  5192               	movf	??__doprnt& (0+255),w,b
  6280  000738  6EFD               	movwf	tosl,c
  6281  00073A  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6282  00073C  6EFE               	movwf	tosh,c
  6283  00073E  6AFF               	clrf	tosu,c
  6284  000740  50FA               	movf	pclath,w,c
  6285  000742  0E20               	movlw	32
  6286  000744  0012               	return		;indir
  6287  000746                     l8012:
  6288  000746  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6289  00074A  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6290  00074E  CFDE F092          	movff	postinc2,??__doprnt
  6291  000752  CFDD F093          	movff	postdec2,??__doprnt+1
  6292  000756  C092  FFD9         	movff	??__doprnt,fsr2l
  6293  00075A  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6294  00075E  0E20               	movlw	32
  6295  000760  6EDF               	movwf	indf2,c
  6296  000762  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6297  000766  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6298  00076A  2ADE               	incf	postinc2,f,c
  6299  00076C  0E00               	movlw	0
  6300  00076E  22DD               	addwfc	postdec2,f,c
  6301  000770                     l8016:
  6302                           
  6303                           ;doprnt.c: 1431: while(--width);
  6304  000770  0100               	movlb	0	; () banked
  6305  000772  079F               	decf	__doprnt@width& (0+255),f,b
  6306  000774  A0D8               	btfss	status,0,c
  6307  000776  07A0               	decf	(__doprnt@width+1)& (0+255),f,b
  6308  000778  0100               	movlb	0	; () banked
  6309  00077A  519F               	movf	__doprnt@width& (0+255),w,b
  6310  00077C  0100               	movlb	0	; () banked
  6311  00077E  11A0               	iorwf	(__doprnt@width+1)& (0+255),w,b
  6312  000780  A4D8               	btfss	status,2,c
  6313  000782  D7BE               	goto	l8008
  6314  000784                     l8018:
  6315                           
  6316                           ; BSR set to: 0
  6317                           ;doprnt.c: 1438: if(flag & 0x03)
  6318  000784  C09E  F092         	movff	__doprnt@flag,??__doprnt
  6319  000788  0E03               	movlw	3
  6320  00078A  0100               	movlb	0	; () banked
  6321  00078C  1792               	andwf	??__doprnt& (0+255),f,b
  6322  00078E  B4D8               	btfsc	status,2,c
  6323  000790  D038               	goto	l8028
  6324                           
  6325                           ; BSR set to: 0
  6326                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
  6327  000792  0100               	movlb	0	; () banked
  6328  000794  EE20 F002          	lfsr	2,2
  6329  000798  518C               	movf	__doprnt@pb& (0+255),w,b
  6330  00079A  26D9               	addwf	fsr2l,f,c
  6331  00079C  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6332  00079E  22DA               	addwfc	fsr2h,f,c
  6333  0007A0  50DE               	movf	postinc2,w,c
  6334  0007A2  10DE               	iorwf	postinc2,w,c
  6335  0007A4  B4D8               	btfsc	status,2,c
  6336  0007A6  D018               	goto	l8024
  6337                           
  6338                           ; BSR set to: 0
  6339  0007A8  0100               	movlb	0	; () banked
  6340  0007AA  EE20 F002          	lfsr	2,2
  6341  0007AE  518C               	movf	__doprnt@pb& (0+255),w,b
  6342  0007B0  26D9               	addwf	fsr2l,f,c
  6343  0007B2  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6344  0007B4  22DA               	addwfc	fsr2h,f,c
  6345  0007B6  CFDE F092          	movff	postinc2,??__doprnt
  6346  0007BA  CFDD F093          	movff	postdec2,??__doprnt+1
  6347  0007BE  D801               	call	u13378
  6348  0007C0  D020               	goto	l8028
  6349  0007C2                     u13378:
  6350  0007C2  0005               	push	
  6351  0007C4  6EFA               	movwf	pclath,c
  6352  0007C6  0100               	movlb	0	; () banked
  6353  0007C8  5192               	movf	??__doprnt& (0+255),w,b
  6354  0007CA  6EFD               	movwf	tosl,c
  6355  0007CC  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6356  0007CE  6EFE               	movwf	tosh,c
  6357  0007D0  6AFF               	clrf	tosu,c
  6358  0007D2  50FA               	movf	pclath,w,c
  6359  0007D4  0E2D               	movlw	45
  6360  0007D6  0012               	return		;indir
  6361  0007D8                     l8024:
  6362  0007D8  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6363  0007DC  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6364  0007E0  CFDE F092          	movff	postinc2,??__doprnt
  6365  0007E4  CFDD F093          	movff	postdec2,??__doprnt+1
  6366  0007E8  C092  FFD9         	movff	??__doprnt,fsr2l
  6367  0007EC  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6368  0007F0  0E2D               	movlw	45
  6369  0007F2  6EDF               	movwf	indf2,c
  6370  0007F4  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6371  0007F8  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6372  0007FC  2ADE               	incf	postinc2,f,c
  6373  0007FE  0E00               	movlw	0
  6374  000800  22DD               	addwfc	postdec2,f,c
  6375  000802                     l8028:
  6376                           
  6377                           ;doprnt.c: 1469: }
  6378                           ;doprnt.c: 1472: prec = c;
  6379  000802  C0A1  F097         	movff	__doprnt@c,__doprnt@prec
  6380                           
  6381                           ;doprnt.c: 1474: while(prec--) {
  6382  000806  D098               	goto	l8048
  6383  000808                     l8030:
  6384                           
  6385                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6386  000808  0100               	movlb	0	; () banked
  6387  00080A  5197               	movf	__doprnt@prec& (0+255),w,b
  6388  00080C  0D02               	mullw	2
  6389  00080E  0E48               	movlw	low _dpowers
  6390  000810  24F3               	addwf	prodl,w,c
  6391  000812  6EF6               	movwf	tblptrl,c
  6392  000814  0EFE               	movlw	high _dpowers
  6393  000816  20F4               	addwfc	prodh,w,c
  6394  000818  6EF7               	movwf	tblptrh,c
  6395  00081A                     	if	1	;There are 3 active tblptr bytes
  6396  00081A  6AF8               	clrf	tblptru,c
  6397  00081C  0E00               	movlw	low (__mediumconst shr (0+16))
  6398  00081E  22F8               	addwfc	tblptru,f,c
  6399  000820                     	endif
  6400  000820  0009               	tblrd		*+
  6401  000822  CFF5 F082          	movff	tablat,___lwdiv@divisor
  6402  000826  000A               	tblrd		*-
  6403  000828  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  6404  00082C  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  6405  000830  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  6406  000834  EC2F  F01C         	call	___lwdiv
  6407  000838  C080  F087         	movff	?___lwdiv,___lwmod@dividend
  6408  00083C  C081  F088         	movff	?___lwdiv+1,___lwmod@dividend+1
  6409  000840  0E00               	movlw	0
  6410  000842  0100               	movlb	0	; () banked
  6411  000844  6F8A               	movwf	(___lwmod@divisor+1)& (0+255),b
  6412  000846  0E0A               	movlw	10
  6413  000848  6F89               	movwf	___lwmod@divisor& (0+255),b
  6414  00084A  ECD7  F01C         	call	___lwmod	;wreg free
  6415  00084E  0100               	movlb	0	; () banked
  6416  000850  5187               	movf	?___lwmod& (0+255),w,b
  6417  000852  0F30               	addlw	48
  6418  000854  0100               	movlb	0	; () banked
  6419  000856  6FA1               	movwf	__doprnt@c& (0+255),b
  6420                           
  6421                           ;doprnt.c: 1491: break;
  6422  000858  D036               	goto	l8040
  6423  00085A                     l8032:
  6424                           
  6425                           ; BSR set to: 0
  6426                           ;doprnt.c: 1499: {
  6427                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6428  00085A  C09C  F080         	movff	__doprnt@val,___lwdiv@dividend
  6429  00085E  C09D  F081         	movff	__doprnt@val+1,___lwdiv@dividend+1
  6430  000862  0100               	movlb	0	; () banked
  6431  000864  5197               	movf	__doprnt@prec& (0+255),w,b
  6432  000866  0D02               	mullw	2
  6433  000868  0E52               	movlw	low _hexpowers
  6434  00086A  24F3               	addwf	prodl,w,c
  6435  00086C  6EF6               	movwf	tblptrl,c
  6436  00086E  0EFE               	movlw	high _hexpowers
  6437  000870  20F4               	addwfc	prodh,w,c
  6438  000872  6EF7               	movwf	tblptrh,c
  6439  000874                     	if	1	;There are 3 active tblptr bytes
  6440  000874  6AF8               	clrf	tblptru,c
  6441  000876  0E00               	movlw	low (__mediumconst shr (0+16))
  6442  000878  22F8               	addwfc	tblptru,f,c
  6443  00087A                     	endif
  6444  00087A  0009               	tblrd		*+
  6445  00087C  CFF5 F082          	movff	tablat,___lwdiv@divisor
  6446  000880  000A               	tblrd		*-
  6447  000882  CFF5 F083          	movff	tablat,___lwdiv@divisor+1
  6448  000886  EC2F  F01C         	call	___lwdiv	;wreg free
  6449  00088A  0100               	movlb	0	; () banked
  6450  00088C  5180               	movf	?___lwdiv& (0+255),w,b
  6451  00088E  0B0F               	andlw	15
  6452  000890  0100               	movlb	0	; () banked
  6453  000892  6F96               	movwf	__doprnt@idx& (0+255),b
  6454                           
  6455                           ; BSR set to: 0
  6456                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6457  000894  0100               	movlb	0	; () banked
  6458  000896  5196               	movf	__doprnt@idx& (0+255),w,b
  6459  000898  0D01               	mullw	1
  6460  00089A  0E49               	movlw	low STR_29
  6461  00089C  24F3               	addwf	prodl,w,c
  6462  00089E  6EF6               	movwf	tblptrl,c
  6463  0008A0  0EFF               	movlw	high STR_29
  6464  0008A2  20F4               	addwfc	prodh,w,c
  6465  0008A4  6EF7               	movwf	tblptrh,c
  6466  0008A6                     	if	1	;There are 3 active tblptr bytes
  6467  0008A6  6AF8               	clrf	tblptru,c
  6468  0008A8  0E00               	movlw	low (__mediumconst shr (0+16))
  6469  0008AA  22F8               	addwfc	tblptru,f,c
  6470  0008AC                     	endif
  6471  0008AC  0008               	tblrd		*
  6472  0008AE  CFF5 F0A1          	movff	tablat,__doprnt@c
  6473                           
  6474                           ; BSR set to: 0
  6475                           ;doprnt.c: 1523: }
  6476                           
  6477                           ;doprnt.c: 1508: }
  6478                           ;doprnt.c: 1510: break;
  6479  0008B2  D009               	goto	l8040
  6480  0008B4                     l8038:
  6481  0008B4  0100               	movlb	0	; () banked
  6482  0008B6  519E               	movf	__doprnt@flag& (0+255),w,b
  6483  0008B8  0B80               	andlw	128
  6484                           
  6485                           ; Switch size 1, requested type "space"
  6486                           ; Number of cases is 2, Range of values is 0 to 128
  6487                           ; switch strategies available:
  6488                           ; Name         Instructions Cycles
  6489                           ; simple_byte            7     4 (average)
  6490                           ;	Chosen strategy is simple_byte
  6491  0008BA  0A00               	xorlw	0	; case 0
  6492  0008BC  B4D8               	btfsc	status,2,c
  6493  0008BE  D7A4               	goto	l8030
  6494  0008C0  0A80               	xorlw	128	; case 128
  6495  0008C2  B4D8               	btfsc	status,2,c
  6496  0008C4  D7CA               	goto	l8032
  6497  0008C6                     l8040:
  6498                           
  6499                           ; BSR set to: 0
  6500                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
  6501  0008C6  0100               	movlb	0	; () banked
  6502  0008C8  EE20 F002          	lfsr	2,2
  6503  0008CC  518C               	movf	__doprnt@pb& (0+255),w,b
  6504  0008CE  26D9               	addwf	fsr2l,f,c
  6505  0008D0  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6506  0008D2  22DA               	addwfc	fsr2h,f,c
  6507  0008D4  50DE               	movf	postinc2,w,c
  6508  0008D6  10DE               	iorwf	postinc2,w,c
  6509  0008D8  B4D8               	btfsc	status,2,c
  6510  0008DA  D019               	goto	l8044
  6511                           
  6512                           ; BSR set to: 0
  6513  0008DC  0100               	movlb	0	; () banked
  6514  0008DE  EE20 F002          	lfsr	2,2
  6515  0008E2  518C               	movf	__doprnt@pb& (0+255),w,b
  6516  0008E4  26D9               	addwf	fsr2l,f,c
  6517  0008E6  518D               	movf	(__doprnt@pb+1)& (0+255),w,b
  6518  0008E8  22DA               	addwfc	fsr2h,f,c
  6519  0008EA  CFDE F092          	movff	postinc2,??__doprnt
  6520  0008EE  CFDD F093          	movff	postdec2,??__doprnt+1
  6521  0008F2  D801               	call	u13398
  6522  0008F4  D021               	goto	l8048
  6523  0008F6                     u13398:
  6524  0008F6  0005               	push	
  6525  0008F8  6EFA               	movwf	pclath,c
  6526  0008FA  0100               	movlb	0	; () banked
  6527  0008FC  5192               	movf	??__doprnt& (0+255),w,b
  6528  0008FE  6EFD               	movwf	tosl,c
  6529  000900  5193               	movf	(??__doprnt+1)& (0+255),w,b
  6530  000902  6EFE               	movwf	tosh,c
  6531  000904  6AFF               	clrf	tosu,c
  6532  000906  50FA               	movf	pclath,w,c
  6533  000908  0100               	movlb	0	; () banked
  6534  00090A  51A1               	movf	__doprnt@c& (0+255),w,b
  6535  00090C  0012               	return		;indir
  6536  00090E                     l8044:
  6537  00090E  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6538  000912  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6539  000916  CFDE F092          	movff	postinc2,??__doprnt
  6540  00091A  CFDD F093          	movff	postdec2,??__doprnt+1
  6541  00091E  C092  FFD9         	movff	??__doprnt,fsr2l
  6542  000922  C093  FFDA         	movff	??__doprnt+1,fsr2h
  6543  000926  C0A1  FFDF         	movff	__doprnt@c,indf2
  6544  00092A  C08C  FFD9         	movff	__doprnt@pb,fsr2l
  6545  00092E  C08D  FFDA         	movff	__doprnt@pb+1,fsr2h
  6546  000932  2ADE               	incf	postinc2,f,c
  6547  000934  0E00               	movlw	0
  6548  000936  22DD               	addwfc	postdec2,f,c
  6549  000938                     l8048:
  6550  000938  0100               	movlb	0	; () banked
  6551  00093A  0797               	decf	__doprnt@prec& (0+255),f,b
  6552  00093C  0100               	movlb	0	; () banked
  6553  00093E  2997               	incf	__doprnt@prec& (0+255),w,b
  6554  000940  A4D8               	btfss	status,2,c
  6555  000942  D7B8               	goto	l8038
  6556  000944                     l8050:
  6557  000944  0100               	movlb	0	; () banked
  6558  000946  518E               	movf	__doprnt@f& (0+255),w,b
  6559  000948  0100               	movlb	0	; () banked
  6560  00094A  6F92               	movwf	??__doprnt& (0+255),b
  6561  00094C  0100               	movlb	0	; () banked
  6562  00094E  518F               	movf	(__doprnt@f+1)& (0+255),w,b
  6563  000950  0100               	movlb	0	; () banked
  6564  000952  6F93               	movwf	(??__doprnt+1)& (0+255),b
  6565  000954  0100               	movlb	0	; () banked
  6566  000956  4B8E               	infsnz	__doprnt@f& (0+255),f,b
  6567  000958  2B8F               	incf	(__doprnt@f+1)& (0+255),f,b
  6568  00095A  C092  FFF6         	movff	??__doprnt,tblptrl
  6569  00095E  C093  FFF7         	movff	??__doprnt+1,tblptrh
  6570  000962  0E00               	movlw	low (__mediumconst shr (0+16))
  6571  000964  6EF8               	movwf	tblptru,c
  6572  000966  0E0F               	movlw	(high __ramtop+-1)
  6573  000968  64F7               	cpfsgt	tblptrh,c
  6574  00096A  D003               	bra	u13417
  6575  00096C  0008               	tblrd		*
  6576  00096E  50F5               	movf	tablat,w,c
  6577  000970  D005               	bra	u13410
  6578  000972                     u13417:
  6579  000972  CFF6 FFE9          	movff	tblptrl,fsr0l
  6580  000976  CFF7 FFEA          	movff	tblptrh,fsr0h
  6581  00097A  50EF               	movf	indf0,w,c
  6582  00097C                     u13410:
  6583  00097C  0100               	movlb	0	; () banked
  6584  00097E  6FA1               	movwf	__doprnt@c& (0+255),b
  6585  000980  0100               	movlb	0	; () banked
  6586  000982  51A1               	movf	__doprnt@c& (0+255),w,b
  6587  000984  A4D8               	btfss	status,2,c
  6588  000986  EF0B  F000         	goto	l7844
  6589  00098A                     l8052:
  6590                           
  6591                           ;doprnt.c: 1540: return 0;
  6592  00098A  0E00               	movlw	0
  6593  00098C  0100               	movlb	0	; () banked
  6594  00098E  6F8D               	movwf	(?__doprnt+1)& (0+255),b
  6595  000990  0E00               	movlw	0
  6596  000992  6F8C               	movwf	?__doprnt& (0+255),b
  6597  000994  0012               	return	
  6598  000996                     __end_of__doprnt:
  6599                           	opt stack 0
  6600                           tosu	equ	0xFFF
  6601                           tosh	equ	0xFFE
  6602                           tosl	equ	0xFFD
  6603                           pclath	equ	0xFFA
  6604                           tblptru	equ	0xFF8
  6605                           tblptrh	equ	0xFF7
  6606                           tblptrl	equ	0xFF6
  6607                           tablat	equ	0xFF5
  6608                           prodh	equ	0xFF4
  6609                           prodl	equ	0xFF3
  6610                           intcon	equ	0xFF2
  6611                           intcon2	equ	0xFF1
  6612                           intcon3	equ	0xFF0
  6613                           indf0	equ	0xFEF
  6614                           postinc0	equ	0xFEE
  6615                           fsr0h	equ	0xFEA
  6616                           fsr0l	equ	0xFE9
  6617                           wreg	equ	0xFE8
  6618                           indf1	equ	0xFE7
  6619                           postinc1	equ	0xFE6
  6620                           postdec1	equ	0xFE5
  6621                           fsr1h	equ	0xFE2
  6622                           fsr1l	equ	0xFE1
  6623                           indf2	equ	0xFDF
  6624                           postinc2	equ	0xFDE
  6625                           postdec2	equ	0xFDD
  6626                           fsr2h	equ	0xFDA
  6627                           fsr2l	equ	0xFD9
  6628                           status	equ	0xFD8
  6629                           
  6630 ;; *************** function _putch *****************
  6631 ;; Defined at:
  6632 ;;		line 30 in file "lcd.c"
  6633 ;; Parameters:    Size  Location     Type
  6634 ;;  data            1    wreg     unsigned char 
  6635 ;; Auto vars:     Size  Location     Type
  6636 ;;  data            1    2[BANK0 ] unsigned char 
  6637 ;; Return value:  Size  Location     Type
  6638 ;;                  1    wreg      void 
  6639 ;; Registers used:
  6640 ;;		wreg, status,2, status,0, cstack
  6641 ;; Tracked objects:
  6642 ;;		On entry : 0/0
  6643 ;;		On exit  : 0/0
  6644 ;;		Unchanged: 0/0
  6645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6647 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6649 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6650 ;;Total ram usage:        1 bytes
  6651 ;; Hardware stack levels used:    1
  6652 ;; Hardware stack levels required when called:    6
  6653 ;; This function calls:
  6654 ;;		_lcdNibble
  6655 ;; This function is called by:
  6656 ;;		_printf
  6657 ;;		__doprnt
  6658 ;;		i2__doprnt
  6659 ;; This function uses a non-reentrant model
  6660 ;;
  6661                           
  6662                           	psect	text10
  6663  003E12                     __ptext10:
  6664                           	opt stack 0
  6665  003E12                     _putch:
  6666                           	opt stack 0
  6667                           
  6668                           ; BSR set to: 0
  6669                           ;Skip over the trampoline to the duplicate function for level 2
  6670  003E12  B27B               	btfsc	btemp,1,c
  6671  003E14  EF2C  F01F         	goto	i2_putch
  6672  003E18                     _putch$intlevel0:
  6673                           	opt stack 21
  6674                           
  6675                           ;incstack = 0
  6676                           ;putch@data stored from wreg
  6677  003E18  0100               	movlb	0	; () banked
  6678  003E1A  6F82               	movwf	putch@data& (0+255),b
  6679                           
  6680                           ;lcd.c: 31: LATDbits.LATD2 = 1;
  6681  003E1C  848C               	bsf	3980,2,c	;volatile
  6682                           
  6683                           ;lcd.c: 32: lcdNibble(data);
  6684  003E1E  0100               	movlb	0	; () banked
  6685  003E20  5182               	movf	putch@data& (0+255),w,b
  6686  003E22  ECA3  F01C         	call	_lcdNibble
  6687  003E26  0012               	return		;funcret
  6688  003E28                     __end_of_putch:
  6689                           	opt stack 0
  6690                           tosu	equ	0xFFF
  6691                           tosh	equ	0xFFE
  6692                           tosl	equ	0xFFD
  6693                           pclath	equ	0xFFA
  6694                           tblptru	equ	0xFF8
  6695                           tblptrh	equ	0xFF7
  6696                           tblptrl	equ	0xFF6
  6697                           tablat	equ	0xFF5
  6698                           prodh	equ	0xFF4
  6699                           prodl	equ	0xFF3
  6700                           intcon	equ	0xFF2
  6701                           intcon2	equ	0xFF1
  6702                           intcon3	equ	0xFF0
  6703                           indf0	equ	0xFEF
  6704                           postinc0	equ	0xFEE
  6705                           fsr0h	equ	0xFEA
  6706                           fsr0l	equ	0xFE9
  6707                           wreg	equ	0xFE8
  6708                           indf1	equ	0xFE7
  6709                           postinc1	equ	0xFE6
  6710                           postdec1	equ	0xFE5
  6711                           fsr1h	equ	0xFE2
  6712                           fsr1l	equ	0xFE1
  6713                           indf2	equ	0xFDF
  6714                           postinc2	equ	0xFDE
  6715                           postdec2	equ	0xFDD
  6716                           fsr2h	equ	0xFDA
  6717                           fsr2l	equ	0xFD9
  6718                           status	equ	0xFD8
  6719                           
  6720 ;; *************** function _isdigit *****************
  6721 ;; Defined at:
  6722 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
  6723 ;; Parameters:    Size  Location     Type
  6724 ;;  c               1    wreg     unsigned char 
  6725 ;; Auto vars:     Size  Location     Type
  6726 ;;  c               1    2[BANK0 ] unsigned char 
  6727 ;; Return value:  Size  Location     Type
  6728 ;;		None               void
  6729 ;; Registers used:
  6730 ;;		wreg, status,2, status,0
  6731 ;; Tracked objects:
  6732 ;;		On entry : 0/0
  6733 ;;		On exit  : 0/0
  6734 ;;		Unchanged: 0/0
  6735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6736 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6737 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6738 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6739 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6740 ;;Total ram usage:        3 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    5
  6743 ;; This function calls:
  6744 ;;		Nothing
  6745 ;; This function is called by:
  6746 ;;		__doprnt
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749                           
  6750                           	psect	text11
  6751  003D8E                     __ptext11:
  6752                           	opt stack 0
  6753  003D8E                     _isdigit:
  6754                           	opt stack 22
  6755                           
  6756                           ;incstack = 0
  6757                           ;isdigit@c stored from wreg
  6758  003D8E  0100               	movlb	0	; () banked
  6759  003D90  6F82               	movwf	isdigit@c& (0+255),b
  6760  003D92  0E00               	movlw	0
  6761  003D94  0100               	movlb	0	; () banked
  6762  003D96  6F81               	movwf	_isdigit$774& (0+255),b
  6763                           
  6764                           ; BSR set to: 0
  6765  003D98  0E3A               	movlw	58
  6766  003D9A  0100               	movlb	0	; () banked
  6767  003D9C  6182               	cpfslt	isdigit@c& (0+255),b
  6768  003D9E  D007               	goto	l4548
  6769                           
  6770                           ; BSR set to: 0
  6771  003DA0  0E2F               	movlw	47
  6772  003DA2  0100               	movlb	0	; () banked
  6773  003DA4  6582               	cpfsgt	isdigit@c& (0+255),b
  6774  003DA6  D003               	goto	l4548
  6775                           
  6776                           ; BSR set to: 0
  6777  003DA8  0E01               	movlw	1
  6778  003DAA  0100               	movlb	0	; () banked
  6779  003DAC  6F81               	movwf	_isdigit$774& (0+255),b
  6780  003DAE                     l4548:
  6781                           
  6782                           ; BSR set to: 0
  6783  003DAE  C081  F080         	movff	_isdigit$774,??_isdigit
  6784  003DB2  0100               	movlb	0	; () banked
  6785  003DB4  3180               	rrcf	??_isdigit& (0+255),w,b
  6786  003DB6  0012               	return	
  6787  003DB8                     __end_of_isdigit:
  6788                           	opt stack 0
  6789                           tosu	equ	0xFFF
  6790                           tosh	equ	0xFFE
  6791                           tosl	equ	0xFFD
  6792                           pclath	equ	0xFFA
  6793                           tblptru	equ	0xFF8
  6794                           tblptrh	equ	0xFF7
  6795                           tblptrl	equ	0xFF6
  6796                           tablat	equ	0xFF5
  6797                           prodh	equ	0xFF4
  6798                           prodl	equ	0xFF3
  6799                           intcon	equ	0xFF2
  6800                           intcon2	equ	0xFF1
  6801                           intcon3	equ	0xFF0
  6802                           indf0	equ	0xFEF
  6803                           postinc0	equ	0xFEE
  6804                           fsr0h	equ	0xFEA
  6805                           fsr0l	equ	0xFE9
  6806                           wreg	equ	0xFE8
  6807                           indf1	equ	0xFE7
  6808                           postinc1	equ	0xFE6
  6809                           postdec1	equ	0xFE5
  6810                           fsr1h	equ	0xFE2
  6811                           fsr1l	equ	0xFE1
  6812                           indf2	equ	0xFDF
  6813                           postinc2	equ	0xFDE
  6814                           postdec2	equ	0xFDD
  6815                           fsr2h	equ	0xFDA
  6816                           fsr2l	equ	0xFD9
  6817                           status	equ	0xFD8
  6818                           
  6819 ;; *************** function ___lwmod *****************
  6820 ;; Defined at:
  6821 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
  6822 ;; Parameters:    Size  Location     Type
  6823 ;;  dividend        2    7[BANK0 ] unsigned int 
  6824 ;;  divisor         2    9[BANK0 ] unsigned int 
  6825 ;; Auto vars:     Size  Location     Type
  6826 ;;  counter         1   11[BANK0 ] unsigned char 
  6827 ;; Return value:  Size  Location     Type
  6828 ;;                  2    7[BANK0 ] unsigned int 
  6829 ;; Registers used:
  6830 ;;		wreg, status,2, status,0
  6831 ;; Tracked objects:
  6832 ;;		On entry : 0/0
  6833 ;;		On exit  : 0/0
  6834 ;;		Unchanged: 0/0
  6835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6836 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6837 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6839 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6840 ;;Total ram usage:        5 bytes
  6841 ;; Hardware stack levels used:    1
  6842 ;; Hardware stack levels required when called:    5
  6843 ;; This function calls:
  6844 ;;		Nothing
  6845 ;; This function is called by:
  6846 ;;		__doprnt
  6847 ;; This function uses a non-reentrant model
  6848 ;;
  6849                           
  6850                           	psect	text12
  6851  0039AE                     __ptext12:
  6852                           	opt stack 0
  6853  0039AE                     ___lwmod:
  6854                           	opt stack 22
  6855                           
  6856                           ; BSR set to: 0
  6857                           ;incstack = 0
  6858  0039AE  0100               	movlb	0	; () banked
  6859  0039B0  5189               	movf	___lwmod@divisor& (0+255),w,b
  6860  0039B2  0100               	movlb	0	; () banked
  6861  0039B4  118A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6862  0039B6  B4D8               	btfsc	status,2,c
  6863  0039B8  D026               	goto	l1017
  6864                           
  6865                           ; BSR set to: 0
  6866  0039BA  0E01               	movlw	1
  6867  0039BC  0100               	movlb	0	; () banked
  6868  0039BE  6F8B               	movwf	___lwmod@counter& (0+255),b
  6869  0039C0  D006               	goto	l4586
  6870  0039C2                     l4584:
  6871                           
  6872                           ; BSR set to: 0
  6873  0039C2  0100               	movlb	0	; () banked
  6874  0039C4  90D8               	bcf	status,0,c
  6875  0039C6  3789               	rlcf	___lwmod@divisor& (0+255),f,b
  6876  0039C8  378A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6877  0039CA  0100               	movlb	0	; () banked
  6878  0039CC  2B8B               	incf	___lwmod@counter& (0+255),f,b
  6879  0039CE                     l4586:
  6880                           
  6881                           ; BSR set to: 0
  6882  0039CE  0100               	movlb	0	; () banked
  6883  0039D0  AF8A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6884  0039D2  D7F7               	goto	l4584
  6885  0039D4                     l4588:
  6886                           
  6887                           ; BSR set to: 0
  6888  0039D4  0100               	movlb	0	; () banked
  6889  0039D6  5189               	movf	___lwmod@divisor& (0+255),w,b
  6890  0039D8  0100               	movlb	0	; () banked
  6891  0039DA  5D87               	subwf	___lwmod@dividend& (0+255),w,b
  6892  0039DC  0100               	movlb	0	; () banked
  6893  0039DE  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6894  0039E0  0100               	movlb	0	; () banked
  6895  0039E2  5988               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6896  0039E4  A0D8               	btfss	status,0,c
  6897  0039E6  D008               	goto	l4592
  6898                           
  6899                           ; BSR set to: 0
  6900  0039E8  0100               	movlb	0	; () banked
  6901  0039EA  5189               	movf	___lwmod@divisor& (0+255),w,b
  6902  0039EC  0100               	movlb	0	; () banked
  6903  0039EE  5F87               	subwf	___lwmod@dividend& (0+255),f,b
  6904  0039F0  0100               	movlb	0	; () banked
  6905  0039F2  518A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6906  0039F4  0100               	movlb	0	; () banked
  6907  0039F6  5B88               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6908  0039F8                     l4592:
  6909                           
  6910                           ; BSR set to: 0
  6911  0039F8  0100               	movlb	0	; () banked
  6912  0039FA  90D8               	bcf	status,0,c
  6913  0039FC  338A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6914  0039FE  3389               	rrcf	___lwmod@divisor& (0+255),f,b
  6915                           
  6916                           ; BSR set to: 0
  6917  003A00  0100               	movlb	0	; () banked
  6918  003A02  2F8B               	decfsz	___lwmod@counter& (0+255),f,b
  6919  003A04  D7E7               	goto	l4588
  6920  003A06                     l1017:
  6921                           
  6922                           ; BSR set to: 0
  6923  003A06  C087  F087         	movff	___lwmod@dividend,?___lwmod
  6924  003A0A  C088  F088         	movff	___lwmod@dividend+1,?___lwmod+1
  6925                           
  6926                           ; BSR set to: 0
  6927  003A0E  0012               	return		;funcret
  6928  003A10                     __end_of___lwmod:
  6929                           	opt stack 0
  6930                           tosu	equ	0xFFF
  6931                           tosh	equ	0xFFE
  6932                           tosl	equ	0xFFD
  6933                           pclath	equ	0xFFA
  6934                           tblptru	equ	0xFF8
  6935                           tblptrh	equ	0xFF7
  6936                           tblptrl	equ	0xFF6
  6937                           tablat	equ	0xFF5
  6938                           prodh	equ	0xFF4
  6939                           prodl	equ	0xFF3
  6940                           intcon	equ	0xFF2
  6941                           intcon2	equ	0xFF1
  6942                           intcon3	equ	0xFF0
  6943                           indf0	equ	0xFEF
  6944                           postinc0	equ	0xFEE
  6945                           fsr0h	equ	0xFEA
  6946                           fsr0l	equ	0xFE9
  6947                           wreg	equ	0xFE8
  6948                           indf1	equ	0xFE7
  6949                           postinc1	equ	0xFE6
  6950                           postdec1	equ	0xFE5
  6951                           fsr1h	equ	0xFE2
  6952                           fsr1l	equ	0xFE1
  6953                           indf2	equ	0xFDF
  6954                           postinc2	equ	0xFDE
  6955                           postdec2	equ	0xFDD
  6956                           fsr2h	equ	0xFDA
  6957                           fsr2l	equ	0xFD9
  6958                           status	equ	0xFD8
  6959                           
  6960 ;; *************** function ___lwdiv *****************
  6961 ;; Defined at:
  6962 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
  6963 ;; Parameters:    Size  Location     Type
  6964 ;;  dividend        2    0[BANK0 ] unsigned int 
  6965 ;;  divisor         2    2[BANK0 ] unsigned int 
  6966 ;; Auto vars:     Size  Location     Type
  6967 ;;  quotient        2    5[BANK0 ] unsigned int 
  6968 ;;  counter         1    4[BANK0 ] unsigned char 
  6969 ;; Return value:  Size  Location     Type
  6970 ;;                  2    0[BANK0 ] unsigned int 
  6971 ;; Registers used:
  6972 ;;		wreg, status,2, status,0
  6973 ;; Tracked objects:
  6974 ;;		On entry : 0/0
  6975 ;;		On exit  : 0/0
  6976 ;;		Unchanged: 0/0
  6977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6978 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6979 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;Total ram usage:        7 bytes
  6983 ;; Hardware stack levels used:    1
  6984 ;; Hardware stack levels required when called:    5
  6985 ;; This function calls:
  6986 ;;		Nothing
  6987 ;; This function is called by:
  6988 ;;		__doprnt
  6989 ;; This function uses a non-reentrant model
  6990 ;;
  6991                           
  6992                           	psect	text13
  6993  00385E                     __ptext13:
  6994                           	opt stack 0
  6995  00385E                     ___lwdiv:
  6996                           	opt stack 22
  6997                           
  6998                           ; BSR set to: 0
  6999                           ;incstack = 0
  7000  00385E  0E00               	movlw	0
  7001  003860  0100               	movlb	0	; () banked
  7002  003862  6F86               	movwf	(___lwdiv@quotient+1)& (0+255),b
  7003  003864  0E00               	movlw	0
  7004  003866  6F85               	movwf	___lwdiv@quotient& (0+255),b
  7005                           
  7006                           ; BSR set to: 0
  7007  003868  0100               	movlb	0	; () banked
  7008  00386A  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7009  00386C  0100               	movlb	0	; () banked
  7010  00386E  1183               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  7011  003870  B4D8               	btfsc	status,2,c
  7012  003872  D02C               	goto	l1007
  7013                           
  7014                           ; BSR set to: 0
  7015  003874  0E01               	movlw	1
  7016  003876  0100               	movlb	0	; () banked
  7017  003878  6F84               	movwf	___lwdiv@counter& (0+255),b
  7018  00387A  D006               	goto	l4566
  7019  00387C                     l4564:
  7020                           
  7021                           ; BSR set to: 0
  7022  00387C  0100               	movlb	0	; () banked
  7023  00387E  90D8               	bcf	status,0,c
  7024  003880  3782               	rlcf	___lwdiv@divisor& (0+255),f,b
  7025  003882  3783               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  7026  003884  0100               	movlb	0	; () banked
  7027  003886  2B84               	incf	___lwdiv@counter& (0+255),f,b
  7028  003888                     l4566:
  7029                           
  7030                           ; BSR set to: 0
  7031  003888  0100               	movlb	0	; () banked
  7032  00388A  AF83               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  7033  00388C  D7F7               	goto	l4564
  7034  00388E                     l4568:
  7035                           
  7036                           ; BSR set to: 0
  7037  00388E  0100               	movlb	0	; () banked
  7038  003890  90D8               	bcf	status,0,c
  7039  003892  3785               	rlcf	___lwdiv@quotient& (0+255),f,b
  7040  003894  3786               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  7041                           
  7042                           ; BSR set to: 0
  7043  003896  0100               	movlb	0	; () banked
  7044  003898  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7045  00389A  0100               	movlb	0	; () banked
  7046  00389C  5D80               	subwf	___lwdiv@dividend& (0+255),w,b
  7047  00389E  0100               	movlb	0	; () banked
  7048  0038A0  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7049  0038A2  0100               	movlb	0	; () banked
  7050  0038A4  5981               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  7051  0038A6  A0D8               	btfss	status,0,c
  7052  0038A8  D00A               	goto	l4576
  7053                           
  7054                           ; BSR set to: 0
  7055  0038AA  0100               	movlb	0	; () banked
  7056  0038AC  5182               	movf	___lwdiv@divisor& (0+255),w,b
  7057  0038AE  0100               	movlb	0	; () banked
  7058  0038B0  5F80               	subwf	___lwdiv@dividend& (0+255),f,b
  7059  0038B2  0100               	movlb	0	; () banked
  7060  0038B4  5183               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  7061  0038B6  0100               	movlb	0	; () banked
  7062  0038B8  5B81               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  7063                           
  7064                           ; BSR set to: 0
  7065  0038BA  0100               	movlb	0	; () banked
  7066  0038BC  8185               	bsf	___lwdiv@quotient& (0+255),0,b
  7067  0038BE                     l4576:
  7068                           
  7069                           ; BSR set to: 0
  7070  0038BE  0100               	movlb	0	; () banked
  7071  0038C0  90D8               	bcf	status,0,c
  7072  0038C2  3383               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  7073  0038C4  3382               	rrcf	___lwdiv@divisor& (0+255),f,b
  7074                           
  7075                           ; BSR set to: 0
  7076  0038C6  0100               	movlb	0	; () banked
  7077  0038C8  2F84               	decfsz	___lwdiv@counter& (0+255),f,b
  7078  0038CA  D7E1               	goto	l4568
  7079  0038CC                     l1007:
  7080                           
  7081                           ; BSR set to: 0
  7082  0038CC  C085  F080         	movff	___lwdiv@quotient,?___lwdiv
  7083  0038D0  C086  F081         	movff	___lwdiv@quotient+1,?___lwdiv+1
  7084                           
  7085                           ; BSR set to: 0
  7086  0038D4  0012               	return		;funcret
  7087  0038D6                     __end_of___lwdiv:
  7088                           	opt stack 0
  7089                           tosu	equ	0xFFF
  7090                           tosh	equ	0xFFE
  7091                           tosl	equ	0xFFD
  7092                           pclath	equ	0xFFA
  7093                           tblptru	equ	0xFF8
  7094                           tblptrh	equ	0xFF7
  7095                           tblptrl	equ	0xFF6
  7096                           tablat	equ	0xFF5
  7097                           prodh	equ	0xFF4
  7098                           prodl	equ	0xFF3
  7099                           intcon	equ	0xFF2
  7100                           intcon2	equ	0xFF1
  7101                           intcon3	equ	0xFF0
  7102                           indf0	equ	0xFEF
  7103                           postinc0	equ	0xFEE
  7104                           fsr0h	equ	0xFEA
  7105                           fsr0l	equ	0xFE9
  7106                           wreg	equ	0xFE8
  7107                           indf1	equ	0xFE7
  7108                           postinc1	equ	0xFE6
  7109                           postdec1	equ	0xFE5
  7110                           fsr1h	equ	0xFE2
  7111                           fsr1l	equ	0xFE1
  7112                           indf2	equ	0xFDF
  7113                           postinc2	equ	0xFDE
  7114                           postdec2	equ	0xFDD
  7115                           fsr2h	equ	0xFDA
  7116                           fsr2l	equ	0xFD9
  7117                           status	equ	0xFD8
  7118                           
  7119 ;; *************** function ___awdiv *****************
  7120 ;; Defined at:
  7121 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;  dividend        2    0[BANK0 ] int 
  7124 ;;  divisor         2    2[BANK0 ] int 
  7125 ;; Auto vars:     Size  Location     Type
  7126 ;;  quotient        2    6[BANK0 ] int 
  7127 ;;  sign            1    5[BANK0 ] unsigned char 
  7128 ;;  counter         1    4[BANK0 ] unsigned char 
  7129 ;; Return value:  Size  Location     Type
  7130 ;;                  2    0[BANK0 ] int 
  7131 ;; Registers used:
  7132 ;;		wreg, status,2, status,0
  7133 ;; Tracked objects:
  7134 ;;		On entry : 0/0
  7135 ;;		On exit  : 0/0
  7136 ;;		Unchanged: 0/0
  7137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7138 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7139 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;Total ram usage:        8 bytes
  7143 ;; Hardware stack levels used:    1
  7144 ;; Hardware stack levels required when called:    5
  7145 ;; This function calls:
  7146 ;;		Nothing
  7147 ;; This function is called by:
  7148 ;;		_update_display
  7149 ;;		_update_state
  7150 ;; This function uses a non-reentrant model
  7151 ;;
  7152                           
  7153                           	psect	text14
  7154  00350A                     __ptext14:
  7155                           	opt stack 0
  7156  00350A                     ___awdiv:
  7157                           	opt stack 24
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;incstack = 0
  7161  00350A  0E00               	movlw	0
  7162  00350C  0100               	movlb	0	; () banked
  7163  00350E  6F85               	movwf	___awdiv@sign& (0+255),b
  7164                           
  7165                           ; BSR set to: 0
  7166  003510  0100               	movlb	0	; () banked
  7167  003512  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7168  003514  D008               	goto	l5150
  7169                           
  7170                           ; BSR set to: 0
  7171  003516  0100               	movlb	0	; () banked
  7172  003518  6D82               	negf	___awdiv@divisor& (0+255),b
  7173  00351A  1F83               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7174  00351C  B0D8               	btfsc	status,0,c
  7175  00351E  2B83               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7176                           
  7177                           ; BSR set to: 0
  7178  003520  0E01               	movlw	1
  7179  003522  0100               	movlb	0	; () banked
  7180  003524  6F85               	movwf	___awdiv@sign& (0+255),b
  7181  003526                     l5150:
  7182                           
  7183                           ; BSR set to: 0
  7184  003526  0100               	movlb	0	; () banked
  7185  003528  AF81               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7186  00352A  D008               	goto	l5156
  7187                           
  7188                           ; BSR set to: 0
  7189  00352C  0100               	movlb	0	; () banked
  7190  00352E  6D80               	negf	___awdiv@dividend& (0+255),b
  7191  003530  1F81               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7192  003532  B0D8               	btfsc	status,0,c
  7193  003534  2B81               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7194                           
  7195                           ; BSR set to: 0
  7196  003536  0E01               	movlw	1
  7197  003538  0100               	movlb	0	; () banked
  7198  00353A  1B85               	xorwf	___awdiv@sign& (0+255),f,b
  7199  00353C                     l5156:
  7200                           
  7201                           ; BSR set to: 0
  7202  00353C  0E00               	movlw	0
  7203  00353E  0100               	movlb	0	; () banked
  7204  003540  6F87               	movwf	(___awdiv@quotient+1)& (0+255),b
  7205  003542  0E00               	movlw	0
  7206  003544  6F86               	movwf	___awdiv@quotient& (0+255),b
  7207                           
  7208                           ; BSR set to: 0
  7209  003546  0100               	movlb	0	; () banked
  7210  003548  5182               	movf	___awdiv@divisor& (0+255),w,b
  7211  00354A  0100               	movlb	0	; () banked
  7212  00354C  1183               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  7213  00354E  B4D8               	btfsc	status,2,c
  7214  003550  D02C               	goto	l5178
  7215                           
  7216                           ; BSR set to: 0
  7217  003552  0E01               	movlw	1
  7218  003554  0100               	movlb	0	; () banked
  7219  003556  6F84               	movwf	___awdiv@counter& (0+255),b
  7220  003558  D006               	goto	l5164
  7221  00355A                     l5162:
  7222                           
  7223                           ; BSR set to: 0
  7224  00355A  0100               	movlb	0	; () banked
  7225  00355C  90D8               	bcf	status,0,c
  7226  00355E  3782               	rlcf	___awdiv@divisor& (0+255),f,b
  7227  003560  3783               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  7228  003562  0100               	movlb	0	; () banked
  7229  003564  2B84               	incf	___awdiv@counter& (0+255),f,b
  7230  003566                     l5164:
  7231                           
  7232                           ; BSR set to: 0
  7233  003566  0100               	movlb	0	; () banked
  7234  003568  AF83               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7235  00356A  D7F7               	goto	l5162
  7236  00356C                     l5166:
  7237                           
  7238                           ; BSR set to: 0
  7239  00356C  0100               	movlb	0	; () banked
  7240  00356E  90D8               	bcf	status,0,c
  7241  003570  3786               	rlcf	___awdiv@quotient& (0+255),f,b
  7242  003572  3787               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  7243                           
  7244                           ; BSR set to: 0
  7245  003574  0100               	movlb	0	; () banked
  7246  003576  5182               	movf	___awdiv@divisor& (0+255),w,b
  7247  003578  0100               	movlb	0	; () banked
  7248  00357A  5D80               	subwf	___awdiv@dividend& (0+255),w,b
  7249  00357C  0100               	movlb	0	; () banked
  7250  00357E  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7251  003580  0100               	movlb	0	; () banked
  7252  003582  5981               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  7253  003584  A0D8               	btfss	status,0,c
  7254  003586  D00A               	goto	l5174
  7255                           
  7256                           ; BSR set to: 0
  7257  003588  0100               	movlb	0	; () banked
  7258  00358A  5182               	movf	___awdiv@divisor& (0+255),w,b
  7259  00358C  0100               	movlb	0	; () banked
  7260  00358E  5F80               	subwf	___awdiv@dividend& (0+255),f,b
  7261  003590  0100               	movlb	0	; () banked
  7262  003592  5183               	movf	(___awdiv@divisor+1)& (0+255),w,b
  7263  003594  0100               	movlb	0	; () banked
  7264  003596  5B81               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  7265                           
  7266                           ; BSR set to: 0
  7267  003598  0100               	movlb	0	; () banked
  7268  00359A  8186               	bsf	___awdiv@quotient& (0+255),0,b
  7269  00359C                     l5174:
  7270                           
  7271                           ; BSR set to: 0
  7272  00359C  0100               	movlb	0	; () banked
  7273  00359E  90D8               	bcf	status,0,c
  7274  0035A0  3383               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  7275  0035A2  3382               	rrcf	___awdiv@divisor& (0+255),f,b
  7276                           
  7277                           ; BSR set to: 0
  7278  0035A4  0100               	movlb	0	; () banked
  7279  0035A6  2F84               	decfsz	___awdiv@counter& (0+255),f,b
  7280  0035A8  D7E1               	goto	l5166
  7281  0035AA                     l5178:
  7282                           
  7283                           ; BSR set to: 0
  7284  0035AA  0100               	movlb	0	; () banked
  7285  0035AC  5185               	movf	___awdiv@sign& (0+255),w,b
  7286  0035AE  0100               	movlb	0	; () banked
  7287  0035B0  B4D8               	btfsc	status,2,c
  7288  0035B2  D005               	goto	l5182
  7289                           
  7290                           ; BSR set to: 0
  7291  0035B4  0100               	movlb	0	; () banked
  7292  0035B6  6D86               	negf	___awdiv@quotient& (0+255),b
  7293  0035B8  1F87               	comf	(___awdiv@quotient+1)& (0+255),f,b
  7294  0035BA  B0D8               	btfsc	status,0,c
  7295  0035BC  2B87               	incf	(___awdiv@quotient+1)& (0+255),f,b
  7296  0035BE                     l5182:
  7297                           
  7298                           ; BSR set to: 0
  7299  0035BE  C086  F080         	movff	___awdiv@quotient,?___awdiv
  7300  0035C2  C087  F081         	movff	___awdiv@quotient+1,?___awdiv+1
  7301  0035C6  0012               	return	
  7302  0035C8                     __end_of___awdiv:
  7303                           	opt stack 0
  7304                           tosu	equ	0xFFF
  7305                           tosh	equ	0xFFE
  7306                           tosl	equ	0xFFD
  7307                           pclath	equ	0xFFA
  7308                           tblptru	equ	0xFF8
  7309                           tblptrh	equ	0xFF7
  7310                           tblptrl	equ	0xFF6
  7311                           tablat	equ	0xFF5
  7312                           prodh	equ	0xFF4
  7313                           prodl	equ	0xFF3
  7314                           intcon	equ	0xFF2
  7315                           intcon2	equ	0xFF1
  7316                           intcon3	equ	0xFF0
  7317                           indf0	equ	0xFEF
  7318                           postinc0	equ	0xFEE
  7319                           fsr0h	equ	0xFEA
  7320                           fsr0l	equ	0xFE9
  7321                           wreg	equ	0xFE8
  7322                           indf1	equ	0xFE7
  7323                           postinc1	equ	0xFE6
  7324                           postdec1	equ	0xFE5
  7325                           fsr1h	equ	0xFE2
  7326                           fsr1l	equ	0xFE1
  7327                           indf2	equ	0xFDF
  7328                           postinc2	equ	0xFDE
  7329                           postdec2	equ	0xFDD
  7330                           fsr2h	equ	0xFDA
  7331                           fsr2l	equ	0xFD9
  7332                           status	equ	0xFD8
  7333                           
  7334 ;; *************** function _update_RTC *****************
  7335 ;; Defined at:
  7336 ;;		line 183 in file "main.c"
  7337 ;; Parameters:    Size  Location     Type
  7338 ;;		None
  7339 ;; Auto vars:     Size  Location     Type
  7340 ;;  i               1   10[BANK0 ] unsigned char 
  7341 ;; Return value:  Size  Location     Type
  7342 ;;                  1    wreg      void 
  7343 ;; Registers used:
  7344 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7345 ;; Tracked objects:
  7346 ;;		On entry : 0/0
  7347 ;;		On exit  : 0/0
  7348 ;;		Unchanged: 0/0
  7349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7350 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7351 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7352 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7353 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7354 ;;Total ram usage:        5 bytes
  7355 ;; Hardware stack levels used:    1
  7356 ;; Hardware stack levels required when called:    7
  7357 ;; This function calls:
  7358 ;;		_I2C_Master_Read
  7359 ;;		_I2C_Master_Start
  7360 ;;		_I2C_Master_Stop
  7361 ;;		_I2C_Master_Write
  7362 ;;		___wmul
  7363 ;; This function is called by:
  7364 ;;		_main
  7365 ;; This function uses a non-reentrant model
  7366 ;;
  7367                           
  7368                           	psect	text15
  7369  00329E                     __ptext15:
  7370                           	opt stack 0
  7371  00329E                     _update_RTC:
  7372                           	opt stack 23
  7373                           
  7374                           ;main.c: 186: I2C_Master_Start();
  7375                           
  7376                           ; BSR set to: 0
  7377                           ;incstack = 0
  7378  00329E  EC41  F01F         	call	_I2C_Master_Start	;wreg free
  7379                           
  7380                           ;main.c: 187: I2C_Master_Write(0b11010000);
  7381  0032A2  0E00               	movlw	0
  7382  0032A4  0100               	movlb	0	; () banked
  7383  0032A6  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7384  0032A8  0ED0               	movlw	208
  7385  0032AA  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7386  0032AC  EC38  F01F         	call	_I2C_Master_Write	;wreg free
  7387                           
  7388                           ;main.c: 188: I2C_Master_Write(0x00);
  7389  0032B0  0E00               	movlw	0
  7390  0032B2  0100               	movlb	0	; () banked
  7391  0032B4  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7392  0032B6  0E00               	movlw	0
  7393  0032B8  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7394  0032BA  EC38  F01F         	call	_I2C_Master_Write	;wreg free
  7395                           
  7396                           ;main.c: 189: I2C_Master_Stop();
  7397  0032BE  EC3D  F01F         	call	_I2C_Master_Stop	;wreg free
  7398                           
  7399                           ;main.c: 192: I2C_Master_Start();
  7400  0032C2  EC41  F01F         	call	_I2C_Master_Start	;wreg free
  7401                           
  7402                           ;main.c: 193: I2C_Master_Write(0b11010001);
  7403  0032C6  0E00               	movlw	0
  7404  0032C8  0100               	movlb	0	; () banked
  7405  0032CA  6F82               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  7406  0032CC  0ED1               	movlw	209
  7407  0032CE  6F81               	movwf	I2C_Master_Write@d& (0+255),b
  7408  0032D0  EC38  F01F         	call	_I2C_Master_Write	;wreg free
  7409                           
  7410                           ;main.c: 194: for(unsigned char i=0;i<0x06;i++){
  7411  0032D4  0E00               	movlw	0
  7412  0032D6  0100               	movlb	0	; () banked
  7413  0032D8  6F8A               	movwf	update_RTC@i& (0+255),b
  7414  0032DA                     l5448:
  7415                           
  7416                           ; BSR set to: 0
  7417  0032DA  0E05               	movlw	5
  7418  0032DC  0100               	movlb	0	; () banked
  7419  0032DE  658A               	cpfsgt	update_RTC@i& (0+255),b
  7420  0032E0  D001               	goto	l5452
  7421  0032E2  D047               	goto	l5460
  7422  0032E4                     l5452:
  7423                           
  7424                           ; BSR set to: 0
  7425                           ;main.c: 195: time[i] = I2C_Master_Read(1);
  7426  0032E4  0100               	movlb	0	; () banked
  7427  0032E6  518A               	movf	update_RTC@i& (0+255),w,b
  7428  0032E8  0D01               	mullw	1
  7429  0032EA  0E5C               	movlw	low _time
  7430  0032EC  24F3               	addwf	prodl,w,c
  7431  0032EE  6ED9               	movwf	fsr2l,c
  7432  0032F0  0E00               	movlw	high _time
  7433  0032F2  20F4               	addwfc	prodh,w,c
  7434  0032F4  6EDA               	movwf	fsr2h,c
  7435  0032F6  0E01               	movlw	1
  7436  0032F8  EC9A  F01E         	call	_I2C_Master_Read
  7437  0032FC  6EDF               	movwf	indf2,c
  7438                           
  7439                           ;main.c: 196: time_i[i]=(time[i] & 0x0F) + ((time[i] & 0xF0)>>4)*10;
  7440  0032FE  0100               	movlb	0	; () banked
  7441  003300  518A               	movf	update_RTC@i& (0+255),w,b
  7442  003302  0D01               	mullw	1
  7443  003304  0E5C               	movlw	low _time
  7444  003306  24F3               	addwf	prodl,w,c
  7445  003308  6ED9               	movwf	fsr2l,c
  7446  00330A  0E00               	movlw	high _time
  7447  00330C  20F4               	addwfc	prodh,w,c
  7448  00330E  6EDA               	movwf	fsr2h,c
  7449  003310  50DF               	movf	indf2,w,c
  7450  003312  0B0F               	andlw	15
  7451  003314  0100               	movlb	0	; () banked
  7452  003316  6F86               	movwf	??_update_RTC& (0+255),b
  7453  003318  6B87               	clrf	(??_update_RTC+1)& (0+255),b
  7454  00331A  0100               	movlb	0	; () banked
  7455  00331C  518A               	movf	update_RTC@i& (0+255),w,b
  7456  00331E  0D01               	mullw	1
  7457  003320  0E5C               	movlw	low _time
  7458  003322  24F3               	addwf	prodl,w,c
  7459  003324  6ED9               	movwf	fsr2l,c
  7460  003326  0E00               	movlw	high _time
  7461  003328  20F4               	addwfc	prodh,w,c
  7462  00332A  6EDA               	movwf	fsr2h,c
  7463  00332C  50DF               	movf	indf2,w,c
  7464  00332E  0100               	movlb	0	; () banked
  7465  003330  6F88               	movwf	(??_update_RTC+2)& (0+255),b
  7466  003332  0100               	movlb	0	; () banked
  7467  003334  3B88               	swapf	(??_update_RTC+2)& (0+255),f,b
  7468  003336  0E0F               	movlw	15
  7469  003338  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  7470  00333A  0E0F               	movlw	15
  7471  00333C  0100               	movlb	0	; () banked
  7472  00333E  1788               	andwf	(??_update_RTC+2)& (0+255),f,b
  7473  003340  0100               	movlb	0	; () banked
  7474  003342  5188               	movf	(??_update_RTC+2)& (0+255),w,b
  7475  003344  0D0A               	mullw	10
  7476  003346  50F3               	movf	prodl,w,c
  7477  003348  0100               	movlb	0	; () banked
  7478  00334A  2786               	addwf	??_update_RTC& (0+255),f,b
  7479  00334C  50F4               	movf	prodh,w,c
  7480  00334E  0100               	movlb	0	; () banked
  7481  003350  2387               	addwfc	(??_update_RTC+1)& (0+255),f,b
  7482  003352  0100               	movlb	0	; () banked
  7483  003354  518A               	movf	update_RTC@i& (0+255),w,b
  7484  003356  0D02               	mullw	2
  7485  003358  0E1C               	movlw	low _time_i
  7486  00335A  24F3               	addwf	prodl,w,c
  7487  00335C  6ED9               	movwf	fsr2l,c
  7488  00335E  0E01               	movlw	high _time_i
  7489  003360  20F4               	addwfc	prodh,w,c
  7490  003362  6EDA               	movwf	fsr2h,c
  7491  003364  C086  FFDE         	movff	??_update_RTC,postinc2
  7492  003368  C087  FFDD         	movff	??_update_RTC+1,postdec2
  7493                           
  7494                           ; BSR set to: 0
  7495  00336C  0100               	movlb	0	; () banked
  7496  00336E  2B8A               	incf	update_RTC@i& (0+255),f,b
  7497  003370  D7B4               	goto	l5448
  7498  003372                     l5460:
  7499                           
  7500                           ; BSR set to: 0
  7501                           ;main.c: 197: }
  7502                           ;main.c: 198: timeDiff=time_i[1]*60-startTime[1]*60+time_i[0]-startTime[0];
  7503  003372  C10E  F086         	movff	_startTime,??_update_RTC
  7504  003376  C10F  F087         	movff	_startTime+1,??_update_RTC+1
  7505  00337A  0100               	movlb	0	; () banked
  7506  00337C  1F86               	comf	??_update_RTC& (0+255),f,b
  7507  00337E  1F87               	comf	(??_update_RTC+1)& (0+255),f,b
  7508  003380  4B86               	infsnz	??_update_RTC& (0+255),f,b
  7509  003382  2B87               	incf	(??_update_RTC+1)& (0+255),f,b
  7510  003384  C11E  F080         	movff	_time_i+2,___wmul@multiplier
  7511  003388  C11F  F081         	movff	_time_i+3,___wmul@multiplier+1
  7512  00338C  0E00               	movlw	0
  7513  00338E  0100               	movlb	0	; () banked
  7514  003390  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7515  003392  0E3C               	movlw	60
  7516  003394  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7517  003396  EC4B  F01E         	call	___wmul	;wreg free
  7518  00339A  C080  F088         	movff	?___wmul,??_update_RTC+2
  7519  00339E  C081  F089         	movff	?___wmul+1,??_update_RTC+3
  7520  0033A2  C110  F080         	movff	_startTime+2,___wmul@multiplier
  7521  0033A6  C111  F081         	movff	_startTime+3,___wmul@multiplier+1
  7522  0033AA  0E00               	movlw	0
  7523  0033AC  0100               	movlb	0	; () banked
  7524  0033AE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  7525  0033B0  0E3C               	movlw	60
  7526  0033B2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  7527  0033B4  EC4B  F01E         	call	___wmul	;wreg free
  7528  0033B8  0100               	movlb	0	; () banked
  7529  0033BA  1F80               	comf	?___wmul& (0+255),f,b
  7530  0033BC  0100               	movlb	0	; () banked
  7531  0033BE  1F81               	comf	(?___wmul+1)& (0+255),f,b
  7532  0033C0  0100               	movlb	0	; () banked
  7533  0033C2  4B80               	infsnz	?___wmul& (0+255),f,b
  7534  0033C4  2B81               	incf	(?___wmul+1)& (0+255),f,b
  7535  0033C6  0100               	movlb	0	; () banked
  7536  0033C8  5180               	movf	?___wmul& (0+255),w,b
  7537  0033CA  0100               	movlb	0	; () banked
  7538  0033CC  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  7539  0033CE  0100               	movlb	0	; () banked
  7540  0033D0  5181               	movf	(?___wmul+1)& (0+255),w,b
  7541  0033D2  0100               	movlb	0	; () banked
  7542  0033D4  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  7543  0033D6  0100               	movlb	0	; () banked
  7544  0033D8  5186               	movf	??_update_RTC& (0+255),w,b
  7545  0033DA  0100               	movlb	0	; () banked
  7546  0033DC  2788               	addwf	(??_update_RTC+2)& (0+255),f,b
  7547  0033DE  0100               	movlb	0	; () banked
  7548  0033E0  5187               	movf	(??_update_RTC+1)& (0+255),w,b
  7549  0033E2  0100               	movlb	0	; () banked
  7550  0033E4  2389               	addwfc	(??_update_RTC+3)& (0+255),f,b
  7551  0033E6  0101               	movlb	1	; () banked
  7552  0033E8  511C               	movf	_time_i& (0+255),w,b
  7553  0033EA  0100               	movlb	0	; () banked
  7554  0033EC  2588               	addwf	(??_update_RTC+2)& (0+255),w,b
  7555  0033EE  0100               	movlb	0	; () banked
  7556  0033F0  6FFA               	movwf	_timeDiff& (0+255),b
  7557  0033F2  0101               	movlb	1	; () banked
  7558  0033F4  511D               	movf	(_time_i+1)& (0+255),w,b
  7559  0033F6  0100               	movlb	0	; () banked
  7560  0033F8  2189               	addwfc	(??_update_RTC+3)& (0+255),w,b
  7561  0033FA  0100               	movlb	0	; () banked
  7562  0033FC  6FFB               	movwf	(_timeDiff+1)& (0+255),b
  7563                           
  7564                           ; BSR set to: 0
  7565                           ;main.c: 199: time[6] = I2C_Master_Read(0);
  7566  0033FE  0E00               	movlw	0
  7567  003400  EC9A  F01E         	call	_I2C_Master_Read
  7568  003404  6E62               	movwf	_time+6,c
  7569                           
  7570                           ;main.c: 200: I2C_Master_Stop();
  7571  003406  EC3D  F01F         	call	_I2C_Master_Stop	;wreg free
  7572  00340A  0012               	return		;funcret
  7573  00340C                     __end_of_update_RTC:
  7574                           	opt stack 0
  7575                           tosu	equ	0xFFF
  7576                           tosh	equ	0xFFE
  7577                           tosl	equ	0xFFD
  7578                           pclath	equ	0xFFA
  7579                           tblptru	equ	0xFF8
  7580                           tblptrh	equ	0xFF7
  7581                           tblptrl	equ	0xFF6
  7582                           tablat	equ	0xFF5
  7583                           prodh	equ	0xFF4
  7584                           prodl	equ	0xFF3
  7585                           intcon	equ	0xFF2
  7586                           intcon2	equ	0xFF1
  7587                           intcon3	equ	0xFF0
  7588                           indf0	equ	0xFEF
  7589                           postinc0	equ	0xFEE
  7590                           fsr0h	equ	0xFEA
  7591                           fsr0l	equ	0xFE9
  7592                           wreg	equ	0xFE8
  7593                           indf1	equ	0xFE7
  7594                           postinc1	equ	0xFE6
  7595                           postdec1	equ	0xFE5
  7596                           fsr1h	equ	0xFE2
  7597                           fsr1l	equ	0xFE1
  7598                           indf2	equ	0xFDF
  7599                           postinc2	equ	0xFDE
  7600                           postdec2	equ	0xFDD
  7601                           fsr2h	equ	0xFDA
  7602                           fsr2l	equ	0xFD9
  7603                           status	equ	0xFD8
  7604                           
  7605 ;; *************** function _I2C_Master_Write *****************
  7606 ;; Defined at:
  7607 ;;		line 47 in file "I2C.c"
  7608 ;; Parameters:    Size  Location     Type
  7609 ;;  d               2    1[BANK0 ] unsigned int 
  7610 ;; Auto vars:     Size  Location     Type
  7611 ;;		None
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  1    wreg      void 
  7614 ;; Registers used:
  7615 ;;		wreg, status,2, status,0, cstack
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/0
  7618 ;;		On exit  : 0/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7621 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7624 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;Total ram usage:        2 bytes
  7626 ;; Hardware stack levels used:    1
  7627 ;; Hardware stack levels required when called:    6
  7628 ;; This function calls:
  7629 ;;		_I2C_Master_Wait
  7630 ;; This function is called by:
  7631 ;;		_update_RTC
  7632 ;;		_set_time
  7633 ;; This function uses a non-reentrant model
  7634 ;;
  7635                           
  7636                           	psect	text16
  7637  003E70                     __ptext16:
  7638                           	opt stack 0
  7639  003E70                     _I2C_Master_Write:
  7640                           	opt stack 23
  7641                           
  7642                           ;I2C.c: 49: I2C_Master_Wait();
  7643                           
  7644                           ;incstack = 0
  7645  003E70  EC14  F01F         	call	_I2C_Master_Wait	;wreg free
  7646                           
  7647                           ;I2C.c: 50: SSPBUF = d;
  7648  003E74  C081  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  7649  003E78  0012               	return		;funcret
  7650  003E7A                     __end_of_I2C_Master_Write:
  7651                           	opt stack 0
  7652                           tosu	equ	0xFFF
  7653                           tosh	equ	0xFFE
  7654                           tosl	equ	0xFFD
  7655                           pclath	equ	0xFFA
  7656                           tblptru	equ	0xFF8
  7657                           tblptrh	equ	0xFF7
  7658                           tblptrl	equ	0xFF6
  7659                           tablat	equ	0xFF5
  7660                           prodh	equ	0xFF4
  7661                           prodl	equ	0xFF3
  7662                           intcon	equ	0xFF2
  7663                           intcon2	equ	0xFF1
  7664                           intcon3	equ	0xFF0
  7665                           indf0	equ	0xFEF
  7666                           postinc0	equ	0xFEE
  7667                           fsr0h	equ	0xFEA
  7668                           fsr0l	equ	0xFE9
  7669                           wreg	equ	0xFE8
  7670                           indf1	equ	0xFE7
  7671                           postinc1	equ	0xFE6
  7672                           postdec1	equ	0xFE5
  7673                           fsr1h	equ	0xFE2
  7674                           fsr1l	equ	0xFE1
  7675                           indf2	equ	0xFDF
  7676                           postinc2	equ	0xFDE
  7677                           postdec2	equ	0xFDD
  7678                           fsr2h	equ	0xFDA
  7679                           fsr2l	equ	0xFD9
  7680                           status	equ	0xFD8
  7681                           
  7682 ;; *************** function _I2C_Master_Stop *****************
  7683 ;; Defined at:
  7684 ;;		line 41 in file "I2C.c"
  7685 ;; Parameters:    Size  Location     Type
  7686 ;;		None
  7687 ;; Auto vars:     Size  Location     Type
  7688 ;;		None
  7689 ;; Return value:  Size  Location     Type
  7690 ;;                  1    wreg      void 
  7691 ;; Registers used:
  7692 ;;		wreg, status,2, status,0, cstack
  7693 ;; Tracked objects:
  7694 ;;		On entry : 0/0
  7695 ;;		On exit  : 0/0
  7696 ;;		Unchanged: 0/0
  7697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7699 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7701 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7702 ;;Total ram usage:        0 bytes
  7703 ;; Hardware stack levels used:    1
  7704 ;; Hardware stack levels required when called:    6
  7705 ;; This function calls:
  7706 ;;		_I2C_Master_Wait
  7707 ;; This function is called by:
  7708 ;;		_update_RTC
  7709 ;;		_set_time
  7710 ;; This function uses a non-reentrant model
  7711 ;;
  7712                           
  7713                           	psect	text17
  7714  003E7A                     __ptext17:
  7715                           	opt stack 0
  7716  003E7A                     _I2C_Master_Stop:
  7717                           	opt stack 23
  7718                           
  7719                           ;I2C.c: 43: I2C_Master_Wait();
  7720                           
  7721                           ;incstack = 0
  7722  003E7A  EC14  F01F         	call	_I2C_Master_Wait	;wreg free
  7723                           
  7724                           ;I2C.c: 44: PEN = 1;
  7725  003E7E  84C5               	bsf	4037,2,c	;volatile
  7726  003E80  0012               	return		;funcret
  7727  003E82                     __end_of_I2C_Master_Stop:
  7728                           	opt stack 0
  7729                           tosu	equ	0xFFF
  7730                           tosh	equ	0xFFE
  7731                           tosl	equ	0xFFD
  7732                           pclath	equ	0xFFA
  7733                           tblptru	equ	0xFF8
  7734                           tblptrh	equ	0xFF7
  7735                           tblptrl	equ	0xFF6
  7736                           tablat	equ	0xFF5
  7737                           prodh	equ	0xFF4
  7738                           prodl	equ	0xFF3
  7739                           intcon	equ	0xFF2
  7740                           intcon2	equ	0xFF1
  7741                           intcon3	equ	0xFF0
  7742                           indf0	equ	0xFEF
  7743                           postinc0	equ	0xFEE
  7744                           fsr0h	equ	0xFEA
  7745                           fsr0l	equ	0xFE9
  7746                           wreg	equ	0xFE8
  7747                           indf1	equ	0xFE7
  7748                           postinc1	equ	0xFE6
  7749                           postdec1	equ	0xFE5
  7750                           fsr1h	equ	0xFE2
  7751                           fsr1l	equ	0xFE1
  7752                           indf2	equ	0xFDF
  7753                           postinc2	equ	0xFDE
  7754                           postdec2	equ	0xFDD
  7755                           fsr2h	equ	0xFDA
  7756                           fsr2l	equ	0xFD9
  7757                           status	equ	0xFD8
  7758                           
  7759 ;; *************** function _I2C_Master_Start *****************
  7760 ;; Defined at:
  7761 ;;		line 29 in file "I2C.c"
  7762 ;; Parameters:    Size  Location     Type
  7763 ;;		None
  7764 ;; Auto vars:     Size  Location     Type
  7765 ;;		None
  7766 ;; Return value:  Size  Location     Type
  7767 ;;                  1    wreg      void 
  7768 ;; Registers used:
  7769 ;;		wreg, status,2, status,0, cstack
  7770 ;; Tracked objects:
  7771 ;;		On entry : 0/0
  7772 ;;		On exit  : 0/0
  7773 ;;		Unchanged: 0/0
  7774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7775 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7776 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7778 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7779 ;;Total ram usage:        0 bytes
  7780 ;; Hardware stack levels used:    1
  7781 ;; Hardware stack levels required when called:    6
  7782 ;; This function calls:
  7783 ;;		_I2C_Master_Wait
  7784 ;; This function is called by:
  7785 ;;		_update_RTC
  7786 ;;		_set_time
  7787 ;; This function uses a non-reentrant model
  7788 ;;
  7789                           
  7790                           	psect	text18
  7791  003E82                     __ptext18:
  7792                           	opt stack 0
  7793  003E82                     _I2C_Master_Start:
  7794                           	opt stack 23
  7795                           
  7796                           ;I2C.c: 31: I2C_Master_Wait();
  7797                           
  7798                           ;incstack = 0
  7799  003E82  EC14  F01F         	call	_I2C_Master_Wait	;wreg free
  7800                           
  7801                           ;I2C.c: 32: SEN = 1;
  7802  003E86  80C5               	bsf	4037,0,c	;volatile
  7803  003E88  0012               	return		;funcret
  7804  003E8A                     __end_of_I2C_Master_Start:
  7805                           	opt stack 0
  7806                           tosu	equ	0xFFF
  7807                           tosh	equ	0xFFE
  7808                           tosl	equ	0xFFD
  7809                           pclath	equ	0xFFA
  7810                           tblptru	equ	0xFF8
  7811                           tblptrh	equ	0xFF7
  7812                           tblptrl	equ	0xFF6
  7813                           tablat	equ	0xFF5
  7814                           prodh	equ	0xFF4
  7815                           prodl	equ	0xFF3
  7816                           intcon	equ	0xFF2
  7817                           intcon2	equ	0xFF1
  7818                           intcon3	equ	0xFF0
  7819                           indf0	equ	0xFEF
  7820                           postinc0	equ	0xFEE
  7821                           fsr0h	equ	0xFEA
  7822                           fsr0l	equ	0xFE9
  7823                           wreg	equ	0xFE8
  7824                           indf1	equ	0xFE7
  7825                           postinc1	equ	0xFE6
  7826                           postdec1	equ	0xFE5
  7827                           fsr1h	equ	0xFE2
  7828                           fsr1l	equ	0xFE1
  7829                           indf2	equ	0xFDF
  7830                           postinc2	equ	0xFDE
  7831                           postdec2	equ	0xFDD
  7832                           fsr2h	equ	0xFDA
  7833                           fsr2l	equ	0xFD9
  7834                           status	equ	0xFD8
  7835                           
  7836 ;; *************** function _I2C_Master_Read *****************
  7837 ;; Defined at:
  7838 ;;		line 53 in file "I2C.c"
  7839 ;; Parameters:    Size  Location     Type
  7840 ;;  a               1    wreg     unsigned char 
  7841 ;; Auto vars:     Size  Location     Type
  7842 ;;  a               1    1[BANK0 ] unsigned char 
  7843 ;;  temp            1    2[BANK0 ] unsigned char 
  7844 ;; Return value:  Size  Location     Type
  7845 ;;                  1    wreg      unsigned char 
  7846 ;; Registers used:
  7847 ;;		wreg, status,2, status,0, cstack
  7848 ;; Tracked objects:
  7849 ;;		On entry : 0/0
  7850 ;;		On exit  : 0/0
  7851 ;;		Unchanged: 0/0
  7852 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7853 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7854 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7855 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7856 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7857 ;;Total ram usage:        2 bytes
  7858 ;; Hardware stack levels used:    1
  7859 ;; Hardware stack levels required when called:    6
  7860 ;; This function calls:
  7861 ;;		_I2C_Master_Wait
  7862 ;; This function is called by:
  7863 ;;		_update_RTC
  7864 ;; This function uses a non-reentrant model
  7865 ;;
  7866                           
  7867                           	psect	text19
  7868  003D34                     __ptext19:
  7869                           	opt stack 0
  7870  003D34                     _I2C_Master_Read:
  7871                           	opt stack 23
  7872                           
  7873                           ;incstack = 0
  7874                           ;I2C_Master_Read@a stored from wreg
  7875  003D34  0100               	movlb	0	; () banked
  7876  003D36  6F81               	movwf	I2C_Master_Read@a& (0+255),b
  7877                           
  7878                           ;I2C.c: 55: unsigned char temp;
  7879                           ;I2C.c: 56: I2C_Master_Wait();
  7880  003D38  EC14  F01F         	call	_I2C_Master_Wait	;wreg free
  7881                           
  7882                           ;I2C.c: 57: RCEN = 1;
  7883  003D3C  86C5               	bsf	4037,3,c	;volatile
  7884                           
  7885                           ;I2C.c: 58: I2C_Master_Wait();
  7886  003D3E  EC14  F01F         	call	_I2C_Master_Wait	;wreg free
  7887                           
  7888                           ;I2C.c: 59: temp = SSPBUF;
  7889  003D42  CFC9 F082          	movff	4041,I2C_Master_Read@temp	;volatile
  7890                           
  7891                           ;I2C.c: 60: I2C_Master_Wait();
  7892  003D46  EC14  F01F         	call	_I2C_Master_Wait	;wreg free
  7893                           
  7894                           ;I2C.c: 61: ACKDT = (a)?0:1;
  7895  003D4A  0100               	movlb	0	; () banked
  7896  003D4C  5181               	movf	I2C_Master_Read@a& (0+255),w,b
  7897  003D4E  0100               	movlb	0	; () banked
  7898  003D50  A4D8               	btfss	status,2,c
  7899  003D52  D002               	goto	u6950
  7900  003D54  8AC5               	bsf	4037,5,c	;volatile
  7901  003D56  D001               	goto	l4878
  7902  003D58                     u6950:
  7903  003D58  9AC5               	bcf	4037,5,c	;volatile
  7904  003D5A                     l4878:
  7905                           
  7906                           ;I2C.c: 62: ACKEN = 1;
  7907  003D5A  88C5               	bsf	4037,4,c	;volatile
  7908                           
  7909                           ;I2C.c: 63: return temp;
  7910  003D5C  0100               	movlb	0	; () banked
  7911  003D5E  5182               	movf	I2C_Master_Read@temp& (0+255),w,b
  7912  003D60  0012               	return	
  7913  003D62                     __end_of_I2C_Master_Read:
  7914                           	opt stack 0
  7915                           tosu	equ	0xFFF
  7916                           tosh	equ	0xFFE
  7917                           tosl	equ	0xFFD
  7918                           pclath	equ	0xFFA
  7919                           tblptru	equ	0xFF8
  7920                           tblptrh	equ	0xFF7
  7921                           tblptrl	equ	0xFF6
  7922                           tablat	equ	0xFF5
  7923                           prodh	equ	0xFF4
  7924                           prodl	equ	0xFF3
  7925                           intcon	equ	0xFF2
  7926                           intcon2	equ	0xFF1
  7927                           intcon3	equ	0xFF0
  7928                           indf0	equ	0xFEF
  7929                           postinc0	equ	0xFEE
  7930                           fsr0h	equ	0xFEA
  7931                           fsr0l	equ	0xFE9
  7932                           wreg	equ	0xFE8
  7933                           indf1	equ	0xFE7
  7934                           postinc1	equ	0xFE6
  7935                           postdec1	equ	0xFE5
  7936                           fsr1h	equ	0xFE2
  7937                           fsr1l	equ	0xFE1
  7938                           indf2	equ	0xFDF
  7939                           postinc2	equ	0xFDE
  7940                           postdec2	equ	0xFDD
  7941                           fsr2h	equ	0xFDA
  7942                           fsr2l	equ	0xFD9
  7943                           status	equ	0xFD8
  7944                           
  7945 ;; *************** function _I2C_Master_Wait *****************
  7946 ;; Defined at:
  7947 ;;		line 24 in file "I2C.c"
  7948 ;; Parameters:    Size  Location     Type
  7949 ;;		None
  7950 ;; Auto vars:     Size  Location     Type
  7951 ;;		None
  7952 ;; Return value:  Size  Location     Type
  7953 ;;                  1    wreg      void 
  7954 ;; Registers used:
  7955 ;;		wreg, status,2, status,0
  7956 ;; Tracked objects:
  7957 ;;		On entry : 0/0
  7958 ;;		On exit  : 0/0
  7959 ;;		Unchanged: 0/0
  7960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7963 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7964 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7965 ;;Total ram usage:        1 bytes
  7966 ;; Hardware stack levels used:    1
  7967 ;; Hardware stack levels required when called:    5
  7968 ;; This function calls:
  7969 ;;		Nothing
  7970 ;; This function is called by:
  7971 ;;		_I2C_Master_Start
  7972 ;;		_I2C_Master_Stop
  7973 ;;		_I2C_Master_Write
  7974 ;;		_I2C_Master_Read
  7975 ;;		_I2C_Master_RepeatedStart
  7976 ;; This function uses a non-reentrant model
  7977 ;;
  7978                           
  7979                           	psect	text20
  7980  003E28                     __ptext20:
  7981                           	opt stack 0
  7982  003E28                     _I2C_Master_Wait:
  7983                           	opt stack 23
  7984  003E28                     l34:
  7985  003E28  B4C7               	btfsc	4039,2,c	;volatile
  7986  003E2A  D7FE               	goto	l34
  7987  003E2C  CFC5 F080          	movff	4037,??_I2C_Master_Wait	;volatile
  7988  003E30  0E1F               	movlw	31
  7989  003E32  0100               	movlb	0	; () banked
  7990  003E34  1780               	andwf	??_I2C_Master_Wait& (0+255),f,b
  7991  003E36  B4D8               	btfsc	status,2,c
  7992  003E38  0012               	return	
  7993  003E3A  D7F6               	goto	l34
  7994  003E3C                     __end_of_I2C_Master_Wait:
  7995                           	opt stack 0
  7996                           tosu	equ	0xFFF
  7997                           tosh	equ	0xFFE
  7998                           tosl	equ	0xFFD
  7999                           pclath	equ	0xFFA
  8000                           tblptru	equ	0xFF8
  8001                           tblptrh	equ	0xFF7
  8002                           tblptrl	equ	0xFF6
  8003                           tablat	equ	0xFF5
  8004                           prodh	equ	0xFF4
  8005                           prodl	equ	0xFF3
  8006                           intcon	equ	0xFF2
  8007                           intcon2	equ	0xFF1
  8008                           intcon3	equ	0xFF0
  8009                           indf0	equ	0xFEF
  8010                           postinc0	equ	0xFEE
  8011                           fsr0h	equ	0xFEA
  8012                           fsr0l	equ	0xFE9
  8013                           wreg	equ	0xFE8
  8014                           indf1	equ	0xFE7
  8015                           postinc1	equ	0xFE6
  8016                           postdec1	equ	0xFE5
  8017                           fsr1h	equ	0xFE2
  8018                           fsr1l	equ	0xFE1
  8019                           indf2	equ	0xFDF
  8020                           postinc2	equ	0xFDE
  8021                           postdec2	equ	0xFDD
  8022                           fsr2h	equ	0xFDA
  8023                           fsr2l	equ	0xFD9
  8024                           status	equ	0xFD8
  8025                           
  8026 ;; *************** function _sort *****************
  8027 ;; Defined at:
  8028 ;;		line 523 in file "main.c"
  8029 ;; Parameters:    Size  Location     Type
  8030 ;;		None
  8031 ;; Auto vars:     Size  Location     Type
  8032 ;;  i               2   24[BANK0 ] int 
  8033 ;; Return value:  Size  Location     Type
  8034 ;;                  1    wreg      void 
  8035 ;; Registers used:
  8036 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8037 ;; Tracked objects:
  8038 ;;		On entry : 0/0
  8039 ;;		On exit  : 0/0
  8040 ;;		Unchanged: 0/0
  8041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8043 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8044 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8045 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8046 ;;Total ram usage:        6 bytes
  8047 ;; Hardware stack levels used:    1
  8048 ;; Hardware stack levels required when called:    7
  8049 ;; This function calls:
  8050 ;;		___awmod
  8051 ;;		___wmul
  8052 ;;		__measure
  8053 ;; This function is called by:
  8054 ;;		_main
  8055 ;; This function uses a non-reentrant model
  8056 ;;
  8057                           
  8058                           	psect	text21
  8059  0021DE                     __ptext21:
  8060                           	opt stack 0
  8061  0021DE                     _sort:
  8062                           	opt stack 23
  8063                           
  8064                           ;main.c: 525: if (discretize_counter>2000/40)
  8065                           
  8066                           ; BSR set to: 0
  8067                           ;incstack = 0
  8068  0021DE  0100               	movlb	0	; () banked
  8069  0021E0  BFF1               	btfsc	(_discretize_counter+1)& (0+255),7,b
  8070  0021E2  D00A               	goto	l5498
  8071  0021E4  0100               	movlb	0	; () banked
  8072  0021E6  51F1               	movf	(_discretize_counter+1)& (0+255),w,b
  8073  0021E8  E105               	bnz	u8150
  8074  0021EA  0E33               	movlw	51
  8075  0021EC  0100               	movlb	0	; () banked
  8076  0021EE  5DF0               	subwf	_discretize_counter& (0+255),w,b
  8077  0021F0  A0D8               	btfss	status,0,c
  8078  0021F2  D002               	goto	l5498
  8079  0021F4                     u8150:
  8080                           
  8081                           ; BSR set to: 0
  8082                           ;main.c: 526: LATA|=1<<3;
  8083  0021F4  8689               	bsf	3977,3,c	;volatile
  8084  0021F6  D01E               	goto	l5510
  8085  0021F8                     l5498:
  8086                           
  8087                           ; BSR set to: 0
  8088                           ;main.c: 527: else if (discretize_counter>1000/40)
  8089  0021F8  0100               	movlb	0	; () banked
  8090  0021FA  BFF1               	btfsc	(_discretize_counter+1)& (0+255),7,b
  8091  0021FC  D00A               	goto	l5502
  8092  0021FE  0100               	movlb	0	; () banked
  8093  002200  51F1               	movf	(_discretize_counter+1)& (0+255),w,b
  8094  002202  E105               	bnz	u8160
  8095  002204  0E1A               	movlw	26
  8096  002206  0100               	movlb	0	; () banked
  8097  002208  5DF0               	subwf	_discretize_counter& (0+255),w,b
  8098  00220A  A0D8               	btfss	status,0,c
  8099  00220C  D002               	goto	l5502
  8100  00220E                     u8160:
  8101                           
  8102                           ; BSR set to: 0
  8103                           ;main.c: 528: LATA&=~(1<<3);
  8104  00220E  9689               	bcf	3977,3,c	;volatile
  8105  002210  D011               	goto	l5510
  8106  002212                     l5502:
  8107                           
  8108                           ; BSR set to: 0
  8109                           ;main.c: 529: else if (discretize_counter>0){
  8110  002212  0100               	movlb	0	; () banked
  8111  002214  BFF1               	btfsc	(_discretize_counter+1)& (0+255),7,b
  8112  002216  D00E               	goto	l5510
  8113  002218  0100               	movlb	0	; () banked
  8114  00221A  51F1               	movf	(_discretize_counter+1)& (0+255),w,b
  8115  00221C  E104               	bnz	u8170
  8116  00221E  0100               	movlb	0	; () banked
  8117  002220  05F0               	decf	_discretize_counter& (0+255),w,b
  8118  002222  A0D8               	btfss	status,0,c
  8119  002224  D007               	goto	l5510
  8120  002226                     u8170:
  8121                           
  8122                           ; BSR set to: 0
  8123                           ;main.c: 530: LATA|=1<<4;
  8124  002226  8889               	bsf	3977,4,c	;volatile
  8125                           
  8126                           ; BSR set to: 0
  8127                           ;main.c: 531: if (discretize_counter==1)
  8128  002228  0100               	movlb	0	; () banked
  8129  00222A  05F0               	decf	_discretize_counter& (0+255),w,b
  8130  00222C  0100               	movlb	0	; () banked
  8131  00222E  11F1               	iorwf	(_discretize_counter+1)& (0+255),w,b
  8132  002230  B4D8               	btfsc	status,2,c
  8133                           
  8134                           ; BSR set to: 0
  8135                           ;main.c: 532: LATA&=~(1<<4);
  8136  002232  9889               	bcf	3977,4,c	;volatile
  8137  002234                     l5510:
  8138                           
  8139                           ; BSR set to: 0
  8140                           ;main.c: 533: }
  8141                           ;main.c: 538: if ((PROX1[0]+PROX2[0])&&measure_counter==0&&release_counter<=1000/40){
  8142  002234  5052               	movf	_PROX2,w,c
  8143  002236  2448               	addwf	_PROX1,w,c
  8144  002238  0100               	movlb	0	; () banked
  8145  00223A  6F94               	movwf	??_sort& (0+255),b
  8146  00223C  5053               	movf	_PROX2+1,w,c
  8147  00223E  2049               	addwfc	_PROX1+1,w,c
  8148  002240  0100               	movlb	0	; () banked
  8149  002242  6F95               	movwf	(??_sort+1)& (0+255),b
  8150  002244  0100               	movlb	0	; () banked
  8151  002246  5194               	movf	??_sort& (0+255),w,b
  8152  002248  0100               	movlb	0	; () banked
  8153  00224A  1195               	iorwf	(??_sort+1)& (0+255),w,b
  8154  00224C  B4D8               	btfsc	status,2,c
  8155  00224E  D043               	goto	l5530
  8156                           
  8157                           ; BSR set to: 0
  8158  002250  0100               	movlb	0	; () banked
  8159  002252  51F6               	movf	_measure_counter& (0+255),w,b
  8160  002254  0100               	movlb	0	; () banked
  8161  002256  11F7               	iorwf	(_measure_counter+1)& (0+255),w,b
  8162  002258  A4D8               	btfss	status,2,c
  8163  00225A  D03D               	goto	l5530
  8164                           
  8165                           ; BSR set to: 0
  8166  00225C  0100               	movlb	0	; () banked
  8167  00225E  BFF9               	btfsc	(_release_counter+1)& (0+255),7,b
  8168  002260  D008               	goto	l5516
  8169  002262  0100               	movlb	0	; () banked
  8170  002264  51F9               	movf	(_release_counter+1)& (0+255),w,b
  8171  002266  E137               	bnz	l5530
  8172  002268  0E1A               	movlw	26
  8173  00226A  0100               	movlb	0	; () banked
  8174  00226C  5DF8               	subwf	_release_counter& (0+255),w,b
  8175  00226E  B0D8               	btfsc	status,0,c
  8176  002270  D032               	goto	l5530
  8177  002272                     l5516:
  8178                           
  8179                           ; BSR set to: 0
  8180                           ;main.c: 539: measure_counter=measure;
  8181  002272  C077  F0F6         	movff	_measure,_measure_counter
  8182  002276  C078  F0F7         	movff	_measure+1,_measure_counter+1
  8183                           
  8184                           ; BSR set to: 0
  8185                           ;main.c: 540: int i;
  8186                           ;main.c: 541: for (i=0;i<7;i++)
  8187  00227A  0E00               	movlw	0
  8188  00227C  0100               	movlb	0	; () banked
  8189  00227E  6F99               	movwf	(sort@i+1)& (0+255),b
  8190  002280  0E00               	movlw	0
  8191  002282  6F98               	movwf	sort@i& (0+255),b
  8192  002284                     l5520:
  8193                           
  8194                           ; BSR set to: 0
  8195  002284  0100               	movlb	0	; () banked
  8196  002286  BF99               	btfsc	(sort@i+1)& (0+255),7,b
  8197  002288  D008               	goto	l5524
  8198  00228A  0100               	movlb	0	; () banked
  8199  00228C  5199               	movf	(sort@i+1)& (0+255),w,b
  8200  00228E  E123               	bnz	l5530
  8201  002290  0E07               	movlw	7
  8202  002292  0100               	movlb	0	; () banked
  8203  002294  5D98               	subwf	sort@i& (0+255),w,b
  8204  002296  B0D8               	btfsc	status,0,c
  8205  002298  D01E               	goto	l5530
  8206  00229A                     l5524:
  8207                           
  8208                           ; BSR set to: 0
  8209                           ;main.c: 542: latestSortedBottleTime[i]=time_i[i];
  8210  00229A  90D8               	bcf	status,0,c
  8211  00229C  0100               	movlb	0	; () banked
  8212  00229E  3598               	rlcf	sort@i& (0+255),w,b
  8213  0022A0  6ED9               	movwf	fsr2l,c
  8214  0022A2  0100               	movlb	0	; () banked
  8215  0022A4  3599               	rlcf	(sort@i+1)& (0+255),w,b
  8216  0022A6  6EDA               	movwf	fsr2h,c
  8217  0022A8  0E1C               	movlw	low _time_i
  8218  0022AA  26D9               	addwf	fsr2l,f,c
  8219  0022AC  0E01               	movlw	high _time_i
  8220  0022AE  22DA               	addwfc	fsr2h,f,c
  8221  0022B0  90D8               	bcf	status,0,c
  8222  0022B2  0100               	movlb	0	; () banked
  8223  0022B4  3598               	rlcf	sort@i& (0+255),w,b
  8224  0022B6  6EE1               	movwf	fsr1l,c
  8225  0022B8  0100               	movlb	0	; () banked
  8226  0022BA  3599               	rlcf	(sort@i+1)& (0+255),w,b
  8227  0022BC  6EE2               	movwf	fsr1h,c
  8228  0022BE  0E00               	movlw	low _latestSortedBottleTime
  8229  0022C0  26E1               	addwf	fsr1l,f,c
  8230  0022C2  0E01               	movlw	high _latestSortedBottleTime
  8231  0022C4  22E2               	addwfc	fsr1h,f,c
  8232  0022C6  CFDE FFE6          	movff	postinc2,postinc1
  8233  0022CA  CFDD FFE5          	movff	postdec2,postdec1
  8234                           
  8235                           ; BSR set to: 0
  8236  0022CE  0100               	movlb	0	; () banked
  8237  0022D0  4B98               	infsnz	sort@i& (0+255),f,b
  8238  0022D2  2B99               	incf	(sort@i+1)& (0+255),f,b
  8239  0022D4  D7D7               	goto	l5520
  8240  0022D6                     l5530:
  8241                           
  8242                           ; BSR set to: 0
  8243                           ;main.c: 543: }
  8244                           ;main.c: 544: if (measure_counter==1){
  8245  0022D6  0100               	movlb	0	; () banked
  8246  0022D8  05F6               	decf	_measure_counter& (0+255),w,b
  8247  0022DA  0100               	movlb	0	; () banked
  8248  0022DC  11F7               	iorwf	(_measure_counter+1)& (0+255),w,b
  8249  0022DE  A4D8               	btfss	status,2,c
  8250  0022E0  D041               	goto	l5558
  8251                           
  8252                           ; BSR set to: 0
  8253                           ;main.c: 545: bottle_type=_measure();
  8254  0022E2  EC0A  F013         	call	__measure	;wreg free
  8255  0022E6  C086  F0EE         	movff	?__measure,_bottle_type
  8256  0022EA  C087  F0EF         	movff	?__measure+1,_bottle_type+1
  8257                           
  8258                           ;main.c: 547: if (bottle_type!=0&&release_counter==0){
  8259  0022EE  0100               	movlb	0	; () banked
  8260  0022F0  51EE               	movf	_bottle_type& (0+255),w,b
  8261  0022F2  0100               	movlb	0	; () banked
  8262  0022F4  11EF               	iorwf	(_bottle_type+1)& (0+255),w,b
  8263  0022F6  B4D8               	btfsc	status,2,c
  8264  0022F8  D032               	goto	l5556
  8265                           
  8266                           ; BSR set to: 0
  8267  0022FA  0100               	movlb	0	; () banked
  8268  0022FC  51F8               	movf	_release_counter& (0+255),w,b
  8269  0022FE  0100               	movlb	0	; () banked
  8270  002300  11F9               	iorwf	(_release_counter+1)& (0+255),w,b
  8271  002302  A4D8               	btfss	status,2,c
  8272  002304  D02C               	goto	l5556
  8273                           
  8274                           ; BSR set to: 0
  8275                           ;main.c: 548: release_counter=release;
  8276  002306  C079  F0F8         	movff	_release,_release_counter
  8277  00230A  C07A  F0F9         	movff	_release+1,_release_counter+1
  8278                           
  8279                           ; BSR set to: 0
  8280                           ;main.c: 549: if (bottle_type==1)
  8281  00230E  0100               	movlb	0	; () banked
  8282  002310  05EE               	decf	_bottle_type& (0+255),w,b
  8283  002312  0100               	movlb	0	; () banked
  8284  002314  11EF               	iorwf	(_bottle_type+1)& (0+255),w,b
  8285  002316  A4D8               	btfss	status,2,c
  8286  002318  D003               	goto	l5544
  8287                           
  8288                           ; BSR set to: 0
  8289                           ;main.c: 550: eskaNoCap++;
  8290  00231A  0100               	movlb	0	; () banked
  8291  00231C  4BF2               	infsnz	_eskaNoCap& (0+255),f,b
  8292  00231E  2BF3               	incf	(_eskaNoCap+1)& (0+255),f,b
  8293  002320                     l5544:
  8294                           
  8295                           ; BSR set to: 0
  8296                           ;main.c: 551: if (bottle_type==2)
  8297  002320  0E02               	movlw	2
  8298  002322  0100               	movlb	0	; () banked
  8299  002324  19EE               	xorwf	_bottle_type& (0+255),w,b
  8300  002326  0100               	movlb	0	; () banked
  8301  002328  11EF               	iorwf	(_bottle_type+1)& (0+255),w,b
  8302  00232A  A4D8               	btfss	status,2,c
  8303  00232C  D003               	goto	l5548
  8304                           
  8305                           ; BSR set to: 0
  8306                           ;main.c: 552: eskaWCap++;
  8307  00232E  0100               	movlb	0	; () banked
  8308  002330  4BF4               	infsnz	_eskaWCap& (0+255),f,b
  8309  002332  2BF5               	incf	(_eskaWCap+1)& (0+255),f,b
  8310  002334                     l5548:
  8311                           
  8312                           ; BSR set to: 0
  8313                           ;main.c: 553: if (bottle_type==3)
  8314  002334  0E03               	movlw	3
  8315  002336  0100               	movlb	0	; () banked
  8316  002338  19EE               	xorwf	_bottle_type& (0+255),w,b
  8317  00233A  0100               	movlb	0	; () banked
  8318  00233C  11EF               	iorwf	(_bottle_type+1)& (0+255),w,b
  8319  00233E  A4D8               	btfss	status,2,c
  8320  002340  D003               	goto	l5552
  8321                           
  8322                           ; BSR set to: 0
  8323                           ;main.c: 554: yopNoCap++;
  8324  002342  0100               	movlb	0	; () banked
  8325  002344  4BFC               	infsnz	_yopNoCap& (0+255),f,b
  8326  002346  2BFD               	incf	(_yopNoCap+1)& (0+255),f,b
  8327  002348                     l5552:
  8328                           
  8329                           ; BSR set to: 0
  8330                           ;main.c: 555: if (bottle_type==4)
  8331  002348  0E04               	movlw	4
  8332  00234A  0100               	movlb	0	; () banked
  8333  00234C  19EE               	xorwf	_bottle_type& (0+255),w,b
  8334  00234E  0100               	movlb	0	; () banked
  8335  002350  11EF               	iorwf	(_bottle_type+1)& (0+255),w,b
  8336  002352  A4D8               	btfss	status,2,c
  8337  002354  D007               	goto	l5558
  8338                           
  8339                           ; BSR set to: 0
  8340                           ;main.c: 556: yopWCap++;
  8341  002356  0100               	movlb	0	; () banked
  8342  002358  4BFE               	infsnz	_yopWCap& (0+255),f,b
  8343  00235A  2BFF               	incf	(_yopWCap+1)& (0+255),f,b
  8344                           
  8345                           ; BSR set to: 0
  8346                           ;main.c: 557: }
  8347  00235C  D003               	goto	l5558
  8348  00235E                     l5556:
  8349                           
  8350                           ; BSR set to: 0
  8351                           ;main.c: 558: else
  8352                           ;main.c: 559: measure_counter+=1;
  8353  00235E  0100               	movlb	0	; () banked
  8354  002360  4BF6               	infsnz	_measure_counter& (0+255),f,b
  8355  002362  2BF7               	incf	(_measure_counter+1)& (0+255),f,b
  8356  002364                     l5558:
  8357                           
  8358                           ; BSR set to: 0
  8359                           ;main.c: 560: }
  8360                           ;main.c: 565: if (release_counter==1000/40)
  8361  002364  0E19               	movlw	25
  8362  002366  0100               	movlb	0	; () banked
  8363  002368  19F8               	xorwf	_release_counter& (0+255),w,b
  8364  00236A  0100               	movlb	0	; () banked
  8365  00236C  11F9               	iorwf	(_release_counter+1)& (0+255),w,b
  8366  00236E  A4D8               	btfss	status,2,c
  8367  002370  D005               	goto	l5562
  8368                           
  8369                           ; BSR set to: 0
  8370                           ;main.c: 566: discretize_counter=discretize;
  8371  002372  C075  F0F0         	movff	_discretize,_discretize_counter
  8372  002376  C076  F0F1         	movff	_discretize+1,_discretize_counter+1
  8373  00237A  D0D1               	goto	l5592
  8374  00237C                     l5562:
  8375                           
  8376                           ; BSR set to: 0
  8377                           ;main.c: 567: else if (release_counter>3500/40){
  8378  00237C  0100               	movlb	0	; () banked
  8379  00237E  BFF9               	btfsc	(_release_counter+1)& (0+255),7,b
  8380  002380  D029               	goto	l5566
  8381  002382  0100               	movlb	0	; () banked
  8382  002384  51F9               	movf	(_release_counter+1)& (0+255),w,b
  8383  002386  E105               	bnz	u8320
  8384  002388  0E58               	movlw	88
  8385  00238A  0100               	movlb	0	; () banked
  8386  00238C  5DF8               	subwf	_release_counter& (0+255),w,b
  8387  00238E  A0D8               	btfss	status,0,c
  8388  002390  D021               	goto	l5566
  8389  002392                     u8320:
  8390                           
  8391                           ; BSR set to: 0
  8392                           ;main.c: 568: LATC|=1<<(bottle_type-1)%3;
  8393  002392  0EFF               	movlw	255
  8394  002394  0100               	movlb	0	; () banked
  8395  002396  25EE               	addwf	_bottle_type& (0+255),w,b
  8396  002398  0100               	movlb	0	; () banked
  8397  00239A  6F80               	movwf	___awmod@dividend& (0+255),b
  8398  00239C  0EFF               	movlw	255
  8399  00239E  0100               	movlb	0	; () banked
  8400  0023A0  21EF               	addwfc	(_bottle_type+1)& (0+255),w,b
  8401  0023A2  0100               	movlb	0	; () banked
  8402  0023A4  6F81               	movwf	(___awmod@dividend+1)& (0+255),b
  8403  0023A6  0E00               	movlw	0
  8404  0023A8  0100               	movlb	0	; () banked
  8405  0023AA  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8406  0023AC  0E03               	movlw	3
  8407  0023AE  6F82               	movwf	___awmod@divisor& (0+255),b
  8408  0023B0  EC95  F01B         	call	___awmod	;wreg free
  8409  0023B4  0E01               	movlw	1
  8410  0023B6  0100               	movlb	0	; () banked
  8411  0023B8  6F94               	movwf	??_sort& (0+255),b
  8412  0023BA  0100               	movlb	0	; () banked
  8413  0023BC  2B80               	incf	?___awmod& (0+255),f,b
  8414  0023BE  D003               	goto	u8334
  8415  0023C0                     u8335:
  8416  0023C0  0100               	movlb	0	; () banked
  8417  0023C2  90D8               	bcf	status,0,c
  8418  0023C4  3794               	rlcf	??_sort& (0+255),f,b
  8419  0023C6                     u8334:
  8420  0023C6  0100               	movlb	0	; () banked
  8421  0023C8  2F80               	decfsz	?___awmod& (0+255),f,b
  8422  0023CA  D7FA               	goto	u8335
  8423  0023CC  0100               	movlb	0	; () banked
  8424  0023CE  5194               	movf	??_sort& (0+255),w,b
  8425  0023D0  128B               	iorwf	3979,f,c	;volatile
  8426                           
  8427                           ;main.c: 569: }
  8428  0023D2  D0A5               	goto	l5592
  8429  0023D4                     l5566:
  8430                           
  8431                           ; BSR set to: 0
  8432                           ;main.c: 570: else if (release_counter>3000/40){
  8433  0023D4  0100               	movlb	0	; () banked
  8434  0023D6  BFF9               	btfsc	(_release_counter+1)& (0+255),7,b
  8435  0023D8  D02B               	goto	l5572
  8436  0023DA  0100               	movlb	0	; () banked
  8437  0023DC  51F9               	movf	(_release_counter+1)& (0+255),w,b
  8438  0023DE  E105               	bnz	u8340
  8439  0023E0  0E4C               	movlw	76
  8440  0023E2  0100               	movlb	0	; () banked
  8441  0023E4  5DF8               	subwf	_release_counter& (0+255),w,b
  8442  0023E6  A0D8               	btfss	status,0,c
  8443  0023E8  D023               	goto	l5572
  8444  0023EA                     u8340:
  8445                           
  8446                           ; BSR set to: 0
  8447                           ;main.c: 571: LATC&=~(1<<(bottle_type-1)%3);
  8448  0023EA  0EFF               	movlw	255
  8449  0023EC  0100               	movlb	0	; () banked
  8450  0023EE  25EE               	addwf	_bottle_type& (0+255),w,b
  8451  0023F0  0100               	movlb	0	; () banked
  8452  0023F2  6F80               	movwf	___awmod@dividend& (0+255),b
  8453  0023F4  0EFF               	movlw	255
  8454  0023F6  0100               	movlb	0	; () banked
  8455  0023F8  21EF               	addwfc	(_bottle_type+1)& (0+255),w,b
  8456  0023FA  0100               	movlb	0	; () banked
  8457  0023FC  6F81               	movwf	(___awmod@dividend+1)& (0+255),b
  8458  0023FE  0E00               	movlw	0
  8459  002400  0100               	movlb	0	; () banked
  8460  002402  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8461  002404  0E03               	movlw	3
  8462  002406  6F82               	movwf	___awmod@divisor& (0+255),b
  8463  002408  EC95  F01B         	call	___awmod	;wreg free
  8464  00240C  0E01               	movlw	1
  8465  00240E  0100               	movlb	0	; () banked
  8466  002410  6F94               	movwf	??_sort& (0+255),b
  8467  002412  0100               	movlb	0	; () banked
  8468  002414  2B80               	incf	?___awmod& (0+255),f,b
  8469  002416  D003               	goto	u8354
  8470  002418                     u8355:
  8471  002418  0100               	movlb	0	; () banked
  8472  00241A  90D8               	bcf	status,0,c
  8473  00241C  3794               	rlcf	??_sort& (0+255),f,b
  8474  00241E                     u8354:
  8475  00241E  0100               	movlb	0	; () banked
  8476  002420  2F80               	decfsz	?___awmod& (0+255),f,b
  8477  002422  D7FA               	goto	u8355
  8478  002424  0100               	movlb	0	; () banked
  8479  002426  5194               	movf	??_sort& (0+255),w,b
  8480  002428  0AFF               	xorlw	255
  8481  00242A  168B               	andwf	3979,f,c	;volatile
  8482                           
  8483                           ; BSR set to: 0
  8484                           ;main.c: 572: LATD|=0x01;
  8485  00242C  808C               	bsf	3980,0,c	;volatile
  8486                           
  8487                           ;main.c: 573: }
  8488  00242E  D077               	goto	l5592
  8489  002430                     l5572:
  8490                           
  8491                           ; BSR set to: 0
  8492                           ;main.c: 574: else if (release_counter>2500/40){
  8493  002430  0100               	movlb	0	; () banked
  8494  002432  BFF9               	btfsc	(_release_counter+1)& (0+255),7,b
  8495  002434  D00B               	goto	l5576
  8496  002436  0100               	movlb	0	; () banked
  8497  002438  51F9               	movf	(_release_counter+1)& (0+255),w,b
  8498  00243A  E105               	bnz	u8360
  8499  00243C  0E3F               	movlw	63
  8500  00243E  0100               	movlb	0	; () banked
  8501  002440  5DF8               	subwf	_release_counter& (0+255),w,b
  8502  002442  A0D8               	btfss	status,0,c
  8503  002444  D003               	goto	l5576
  8504  002446                     u8360:
  8505                           
  8506                           ; BSR set to: 0
  8507                           ;main.c: 575: LATD&=~(0x01);
  8508  002446  908C               	bcf	3980,0,c	;volatile
  8509                           
  8510                           ;main.c: 576: LATC|=0x20;
  8511  002448  8A8B               	bsf	3979,5,c	;volatile
  8512                           
  8513                           ;main.c: 577: }
  8514  00244A  D069               	goto	l5592
  8515  00244C                     l5576:
  8516                           
  8517                           ; BSR set to: 0
  8518                           ;main.c: 578: else if (release_counter>2000/40){
  8519  00244C  0100               	movlb	0	; () banked
  8520  00244E  BFF9               	btfsc	(_release_counter+1)& (0+255),7,b
  8521  002450  D00A               	goto	l5580
  8522  002452  0100               	movlb	0	; () banked
  8523  002454  51F9               	movf	(_release_counter+1)& (0+255),w,b
  8524  002456  E105               	bnz	u8370
  8525  002458  0E33               	movlw	51
  8526  00245A  0100               	movlb	0	; () banked
  8527  00245C  5DF8               	subwf	_release_counter& (0+255),w,b
  8528  00245E  A0D8               	btfss	status,0,c
  8529  002460  D002               	goto	l5580
  8530  002462                     u8370:
  8531                           
  8532                           ; BSR set to: 0
  8533                           ;main.c: 579: LATC&=~(0x20);
  8534  002462  9A8B               	bcf	3979,5,c	;volatile
  8535                           
  8536                           ;main.c: 580: }
  8537  002464  D05C               	goto	l5592
  8538  002466                     l5580:
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;main.c: 581: else if (release_counter>1000/40){
  8542  002466  0100               	movlb	0	; () banked
  8543  002468  BFF9               	btfsc	(_release_counter+1)& (0+255),7,b
  8544  00246A  D008               	goto	l5584
  8545  00246C  0100               	movlb	0	; () banked
  8546  00246E  51F9               	movf	(_release_counter+1)& (0+255),w,b
  8547  002470  E156               	bnz	l5592
  8548  002472  0E1A               	movlw	26
  8549  002474  0100               	movlb	0	; () banked
  8550  002476  5DF8               	subwf	_release_counter& (0+255),w,b
  8551  002478  B0D8               	btfsc	status,0,c
  8552  00247A  D051               	goto	l5592
  8553  00247C                     l5584:
  8554                           
  8555                           ; BSR set to: 0
  8556                           ;main.c: 584: else if (release_counter>0){
  8557  00247C  0100               	movlb	0	; () banked
  8558  00247E  BFF9               	btfsc	(_release_counter+1)& (0+255),7,b
  8559  002480  D04E               	goto	l5592
  8560  002482  0100               	movlb	0	; () banked
  8561  002484  51F9               	movf	(_release_counter+1)& (0+255),w,b
  8562  002486  E104               	bnz	u8390
  8563  002488  0100               	movlb	0	; () banked
  8564  00248A  05F8               	decf	_release_counter& (0+255),w,b
  8565  00248C  A0D8               	btfss	status,0,c
  8566  00248E  D047               	goto	l5592
  8567  002490                     u8390:
  8568                           
  8569                           ; BSR set to: 0
  8570                           ;main.c: 585: LATE|=1<<(bottle_type-1)%3;
  8571  002490  0EFF               	movlw	255
  8572  002492  0100               	movlb	0	; () banked
  8573  002494  25EE               	addwf	_bottle_type& (0+255),w,b
  8574  002496  0100               	movlb	0	; () banked
  8575  002498  6F80               	movwf	___awmod@dividend& (0+255),b
  8576  00249A  0EFF               	movlw	255
  8577  00249C  0100               	movlb	0	; () banked
  8578  00249E  21EF               	addwfc	(_bottle_type+1)& (0+255),w,b
  8579  0024A0  0100               	movlb	0	; () banked
  8580  0024A2  6F81               	movwf	(___awmod@dividend+1)& (0+255),b
  8581  0024A4  0E00               	movlw	0
  8582  0024A6  0100               	movlb	0	; () banked
  8583  0024A8  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8584  0024AA  0E03               	movlw	3
  8585  0024AC  6F82               	movwf	___awmod@divisor& (0+255),b
  8586  0024AE  EC95  F01B         	call	___awmod	;wreg free
  8587  0024B2  0E01               	movlw	1
  8588  0024B4  0100               	movlb	0	; () banked
  8589  0024B6  6F94               	movwf	??_sort& (0+255),b
  8590  0024B8  0100               	movlb	0	; () banked
  8591  0024BA  2B80               	incf	?___awmod& (0+255),f,b
  8592  0024BC  D003               	goto	u8404
  8593  0024BE                     u8405:
  8594  0024BE  0100               	movlb	0	; () banked
  8595  0024C0  90D8               	bcf	status,0,c
  8596  0024C2  3794               	rlcf	??_sort& (0+255),f,b
  8597  0024C4                     u8404:
  8598  0024C4  0100               	movlb	0	; () banked
  8599  0024C6  2F80               	decfsz	?___awmod& (0+255),f,b
  8600  0024C8  D7FA               	goto	u8405
  8601  0024CA  0100               	movlb	0	; () banked
  8602  0024CC  5194               	movf	??_sort& (0+255),w,b
  8603  0024CE  128D               	iorwf	3981,f,c	;volatile
  8604                           
  8605                           ; BSR set to: 0
  8606                           ;main.c: 586: if (release_counter==1)
  8607  0024D0  0100               	movlb	0	; () banked
  8608  0024D2  05F8               	decf	_release_counter& (0+255),w,b
  8609  0024D4  0100               	movlb	0	; () banked
  8610  0024D6  11F9               	iorwf	(_release_counter+1)& (0+255),w,b
  8611  0024D8  A4D8               	btfss	status,2,c
  8612  0024DA  D021               	goto	l5592
  8613                           
  8614                           ; BSR set to: 0
  8615                           ;main.c: 587: LATE&=~(1<<(bottle_type-1)%3);
  8616  0024DC  0EFF               	movlw	255
  8617  0024DE  0100               	movlb	0	; () banked
  8618  0024E0  25EE               	addwf	_bottle_type& (0+255),w,b
  8619  0024E2  0100               	movlb	0	; () banked
  8620  0024E4  6F80               	movwf	___awmod@dividend& (0+255),b
  8621  0024E6  0EFF               	movlw	255
  8622  0024E8  0100               	movlb	0	; () banked
  8623  0024EA  21EF               	addwfc	(_bottle_type+1)& (0+255),w,b
  8624  0024EC  0100               	movlb	0	; () banked
  8625  0024EE  6F81               	movwf	(___awmod@dividend+1)& (0+255),b
  8626  0024F0  0E00               	movlw	0
  8627  0024F2  0100               	movlb	0	; () banked
  8628  0024F4  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8629  0024F6  0E03               	movlw	3
  8630  0024F8  6F82               	movwf	___awmod@divisor& (0+255),b
  8631  0024FA  EC95  F01B         	call	___awmod	;wreg free
  8632  0024FE  0E01               	movlw	1
  8633  002500  0100               	movlb	0	; () banked
  8634  002502  6F94               	movwf	??_sort& (0+255),b
  8635  002504  0100               	movlb	0	; () banked
  8636  002506  2B80               	incf	?___awmod& (0+255),f,b
  8637  002508  D003               	goto	u8424
  8638  00250A                     u8425:
  8639  00250A  0100               	movlb	0	; () banked
  8640  00250C  90D8               	bcf	status,0,c
  8641  00250E  3794               	rlcf	??_sort& (0+255),f,b
  8642  002510                     u8424:
  8643  002510  0100               	movlb	0	; () banked
  8644  002512  2F80               	decfsz	?___awmod& (0+255),f,b
  8645  002514  D7FA               	goto	u8425
  8646  002516  0100               	movlb	0	; () banked
  8647  002518  5194               	movf	??_sort& (0+255),w,b
  8648  00251A  0AFF               	xorlw	255
  8649  00251C  168D               	andwf	3981,f,c	;volatile
  8650  00251E                     l5592:
  8651                           
  8652                           ; BSR set to: 0
  8653                           ;main.c: 588: }
  8654                           ;main.c: 591: if (discretize_counter>0)
  8655  00251E  0100               	movlb	0	; () banked
  8656  002520  BFF1               	btfsc	(_discretize_counter+1)& (0+255),7,b
  8657  002522  D00B               	goto	l5596
  8658  002524  0100               	movlb	0	; () banked
  8659  002526  51F1               	movf	(_discretize_counter+1)& (0+255),w,b
  8660  002528  E104               	bnz	u8430
  8661  00252A  0100               	movlb	0	; () banked
  8662  00252C  05F0               	decf	_discretize_counter& (0+255),w,b
  8663  00252E  A0D8               	btfss	status,0,c
  8664  002530  D004               	goto	l5596
  8665  002532                     u8430:
  8666                           
  8667                           ; BSR set to: 0
  8668                           ;main.c: 592: discretize_counter--;
  8669  002532  0100               	movlb	0	; () banked
  8670  002534  07F0               	decf	_discretize_counter& (0+255),f,b
  8671  002536  A0D8               	btfss	status,0,c
  8672  002538  07F1               	decf	(_discretize_counter+1)& (0+255),f,b
  8673  00253A                     l5596:
  8674                           
  8675                           ; BSR set to: 0
  8676                           ;main.c: 593: if (measure_counter>0)
  8677  00253A  0100               	movlb	0	; () banked
  8678  00253C  BFF7               	btfsc	(_measure_counter+1)& (0+255),7,b
  8679  00253E  D00B               	goto	l5600
  8680  002540  0100               	movlb	0	; () banked
  8681  002542  51F7               	movf	(_measure_counter+1)& (0+255),w,b
  8682  002544  E104               	bnz	u8440
  8683  002546  0100               	movlb	0	; () banked
  8684  002548  05F6               	decf	_measure_counter& (0+255),w,b
  8685  00254A  A0D8               	btfss	status,0,c
  8686  00254C  D004               	goto	l5600
  8687  00254E                     u8440:
  8688                           
  8689                           ; BSR set to: 0
  8690                           ;main.c: 594: measure_counter--;
  8691  00254E  0100               	movlb	0	; () banked
  8692  002550  07F6               	decf	_measure_counter& (0+255),f,b
  8693  002552  A0D8               	btfss	status,0,c
  8694  002554  07F7               	decf	(_measure_counter+1)& (0+255),f,b
  8695  002556                     l5600:
  8696                           
  8697                           ; BSR set to: 0
  8698                           ;main.c: 595: if (release_counter>0)
  8699  002556  0100               	movlb	0	; () banked
  8700  002558  BFF9               	btfsc	(_release_counter+1)& (0+255),7,b
  8701  00255A  D00B               	goto	l5604
  8702  00255C  0100               	movlb	0	; () banked
  8703  00255E  51F9               	movf	(_release_counter+1)& (0+255),w,b
  8704  002560  E104               	bnz	u8450
  8705  002562  0100               	movlb	0	; () banked
  8706  002564  05F8               	decf	_release_counter& (0+255),w,b
  8707  002566  A0D8               	btfss	status,0,c
  8708  002568  D004               	goto	l5604
  8709  00256A                     u8450:
  8710                           
  8711                           ; BSR set to: 0
  8712                           ;main.c: 596: release_counter--;
  8713  00256A  0100               	movlb	0	; () banked
  8714  00256C  07F8               	decf	_release_counter& (0+255),f,b
  8715  00256E  A0D8               	btfss	status,0,c
  8716  002570  07F9               	decf	(_release_counter+1)& (0+255),f,b
  8717  002572                     l5604:
  8718                           
  8719                           ; BSR set to: 0
  8720                           ;main.c: 599: if (time_i[1]*60-latestSortedBottleTime[1]*60+time_i[0]-latestSortedBottle
      +                          Time[0]>=15)
  8721  002572  C100  F094         	movff	_latestSortedBottleTime,??_sort
  8722  002576  C101  F095         	movff	_latestSortedBottleTime+1,??_sort+1
  8723  00257A  0100               	movlb	0	; () banked
  8724  00257C  1F94               	comf	??_sort& (0+255),f,b
  8725  00257E  1F95               	comf	(??_sort+1)& (0+255),f,b
  8726  002580  4B94               	infsnz	??_sort& (0+255),f,b
  8727  002582  2B95               	incf	(??_sort+1)& (0+255),f,b
  8728  002584  C11E  F080         	movff	_time_i+2,___wmul@multiplier
  8729  002588  C11F  F081         	movff	_time_i+3,___wmul@multiplier+1
  8730  00258C  0E00               	movlw	0
  8731  00258E  0100               	movlb	0	; () banked
  8732  002590  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8733  002592  0E3C               	movlw	60
  8734  002594  6F82               	movwf	___wmul@multiplicand& (0+255),b
  8735  002596  EC4B  F01E         	call	___wmul	;wreg free
  8736  00259A  C080  F096         	movff	?___wmul,??_sort+2
  8737  00259E  C081  F097         	movff	?___wmul+1,??_sort+3
  8738  0025A2  C102  F080         	movff	_latestSortedBottleTime+2,___wmul@multiplier
  8739  0025A6  C103  F081         	movff	_latestSortedBottleTime+3,___wmul@multiplier+1
  8740  0025AA  0E00               	movlw	0
  8741  0025AC  0100               	movlb	0	; () banked
  8742  0025AE  6F83               	movwf	(___wmul@multiplicand+1)& (0+255),b
  8743  0025B0  0E3C               	movlw	60
  8744  0025B2  6F82               	movwf	___wmul@multiplicand& (0+255),b
  8745  0025B4  EC4B  F01E         	call	___wmul	;wreg free
  8746  0025B8  0100               	movlb	0	; () banked
  8747  0025BA  1F80               	comf	?___wmul& (0+255),f,b
  8748  0025BC  0100               	movlb	0	; () banked
  8749  0025BE  1F81               	comf	(?___wmul+1)& (0+255),f,b
  8750  0025C0  0100               	movlb	0	; () banked
  8751  0025C2  4B80               	infsnz	?___wmul& (0+255),f,b
  8752  0025C4  2B81               	incf	(?___wmul+1)& (0+255),f,b
  8753  0025C6  0100               	movlb	0	; () banked
  8754  0025C8  5180               	movf	?___wmul& (0+255),w,b
  8755  0025CA  0100               	movlb	0	; () banked
  8756  0025CC  2796               	addwf	(??_sort+2)& (0+255),f,b
  8757  0025CE  0100               	movlb	0	; () banked
  8758  0025D0  5181               	movf	(?___wmul+1)& (0+255),w,b
  8759  0025D2  0100               	movlb	0	; () banked
  8760  0025D4  2397               	addwfc	(??_sort+3)& (0+255),f,b
  8761  0025D6  0100               	movlb	0	; () banked
  8762  0025D8  5194               	movf	??_sort& (0+255),w,b
  8763  0025DA  0100               	movlb	0	; () banked
  8764  0025DC  2796               	addwf	(??_sort+2)& (0+255),f,b
  8765  0025DE  0100               	movlb	0	; () banked
  8766  0025E0  5195               	movf	(??_sort+1)& (0+255),w,b
  8767  0025E2  0100               	movlb	0	; () banked
  8768  0025E4  2397               	addwfc	(??_sort+3)& (0+255),f,b
  8769  0025E6  0101               	movlb	1	; () banked
  8770  0025E8  511C               	movf	_time_i& (0+255),w,b
  8771  0025EA  0100               	movlb	0	; () banked
  8772  0025EC  2796               	addwf	(??_sort+2)& (0+255),f,b
  8773  0025EE  0101               	movlb	1	; () banked
  8774  0025F0  511D               	movf	(_time_i+1)& (0+255),w,b
  8775  0025F2  0100               	movlb	0	; () banked
  8776  0025F4  2397               	addwfc	(??_sort+3)& (0+255),f,b
  8777  0025F6  0100               	movlb	0	; () banked
  8778  0025F8  BF97               	btfsc	(??_sort+3)& (0+255),7,b
  8779  0025FA  0012               	return	
  8780  0025FC  0100               	movlb	0	; () banked
  8781  0025FE  5197               	movf	(??_sort+3)& (0+255),w,b
  8782  002600  E105               	bnz	u8460
  8783  002602  0E0F               	movlw	15
  8784  002604  0100               	movlb	0	; () banked
  8785  002606  5D96               	subwf	(??_sort+2)& (0+255),w,b
  8786  002608  A0D8               	btfss	status,0,c
  8787  00260A  0012               	return	
  8788  00260C                     u8460:
  8789                           
  8790                           ; BSR set to: 0
  8791                           ;main.c: 600: nstate='e';
  8792  00260C  0E65               	movlw	101
  8793  00260E  0100               	movlb	0	; () banked
  8794  002610  6FDE               	movwf	_nstate& (0+255),b
  8795  002612  0012               	return	
  8796  002614                     __end_of_sort:
  8797                           	opt stack 0
  8798                           tosu	equ	0xFFF
  8799                           tosh	equ	0xFFE
  8800                           tosl	equ	0xFFD
  8801                           pclath	equ	0xFFA
  8802                           tblptru	equ	0xFF8
  8803                           tblptrh	equ	0xFF7
  8804                           tblptrl	equ	0xFF6
  8805                           tablat	equ	0xFF5
  8806                           prodh	equ	0xFF4
  8807                           prodl	equ	0xFF3
  8808                           intcon	equ	0xFF2
  8809                           intcon2	equ	0xFF1
  8810                           intcon3	equ	0xFF0
  8811                           indf0	equ	0xFEF
  8812                           postinc0	equ	0xFEE
  8813                           fsr0h	equ	0xFEA
  8814                           fsr0l	equ	0xFE9
  8815                           wreg	equ	0xFE8
  8816                           indf1	equ	0xFE7
  8817                           postinc1	equ	0xFE6
  8818                           postdec1	equ	0xFE5
  8819                           fsr1h	equ	0xFE2
  8820                           fsr1l	equ	0xFE1
  8821                           indf2	equ	0xFDF
  8822                           postinc2	equ	0xFDE
  8823                           postdec2	equ	0xFDD
  8824                           fsr2h	equ	0xFDA
  8825                           fsr2l	equ	0xFD9
  8826                           status	equ	0xFD8
  8827                           
  8828 ;; *************** function __measure *****************
  8829 ;; Defined at:
  8830 ;;		line 631 in file "main.c"
  8831 ;; Parameters:    Size  Location     Type
  8832 ;;		None
  8833 ;; Auto vars:     Size  Location     Type
  8834 ;;  i               1   17[BANK0 ] unsigned char 
  8835 ;;  i               1   16[BANK0 ] unsigned char 
  8836 ;;  i               1   15[BANK0 ] unsigned char 
  8837 ;;  i               1   14[BANK0 ] unsigned char 
  8838 ;;  i               1   13[BANK0 ] unsigned char 
  8839 ;;  i               1   12[BANK0 ] unsigned char 
  8840 ;;  i               1   11[BANK0 ] unsigned char 
  8841 ;;  i               1   10[BANK0 ] unsigned char 
  8842 ;;  measurement     2   18[BANK0 ] int 
  8843 ;; Return value:  Size  Location     Type
  8844 ;;                  2    6[BANK0 ] int 
  8845 ;; Registers used:
  8846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8847 ;; Tracked objects:
  8848 ;;		On entry : 0/0
  8849 ;;		On exit  : 0/0
  8850 ;;		Unchanged: 0/0
  8851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8852 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8853 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8854 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8856 ;;Total ram usage:       14 bytes
  8857 ;; Hardware stack levels used:    1
  8858 ;; Hardware stack levels required when called:    6
  8859 ;; This function calls:
  8860 ;;		___awmod
  8861 ;; This function is called by:
  8862 ;;		_update_display
  8863 ;;		_sort
  8864 ;; This function uses a non-reentrant model
  8865 ;;
  8866                           
  8867                           	psect	text22
  8868  002614                     __ptext22:
  8869                           	opt stack 0
  8870  002614                     __measure:
  8871                           	opt stack 23
  8872                           
  8873                           ;main.c: 643: int measurement=0;
  8874                           
  8875                           ; BSR set to: 0
  8876                           ;incstack = 0
  8877  002614  0E00               	movlw	0
  8878  002616  0100               	movlb	0	; () banked
  8879  002618  6F93               	movwf	(__measure@measurement+1)& (0+255),b
  8880  00261A  0E00               	movlw	0
  8881  00261C  6F92               	movwf	__measure@measurement& (0+255),b
  8882                           
  8883                           ;main.c: 646: for (char i=0;i<5;i++)
  8884  00261E  0E00               	movlw	0
  8885  002620  0100               	movlb	0	; () banked
  8886  002622  6F8A               	movwf	__measure@i& (0+255),b
  8887  002624                     l4964:
  8888                           
  8889                           ; BSR set to: 0
  8890  002624  0E04               	movlw	4
  8891  002626  0100               	movlb	0	; () banked
  8892  002628  658A               	cpfsgt	__measure@i& (0+255),b
  8893  00262A  D001               	goto	l4968
  8894  00262C  D012               	goto	l4974
  8895  00262E                     l4968:
  8896                           
  8897                           ; BSR set to: 0
  8898                           ;main.c: 647: measurement+=PROX1[i];
  8899  00262E  0100               	movlb	0	; () banked
  8900  002630  518A               	movf	__measure@i& (0+255),w,b
  8901  002632  0D02               	mullw	2
  8902  002634  0E48               	movlw	low _PROX1
  8903  002636  24F3               	addwf	prodl,w,c
  8904  002638  6ED9               	movwf	fsr2l,c
  8905  00263A  0E00               	movlw	high _PROX1
  8906  00263C  20F4               	addwfc	prodh,w,c
  8907  00263E  6EDA               	movwf	fsr2h,c
  8908  002640  50DE               	movf	postinc2,w,c
  8909  002642  0100               	movlb	0	; () banked
  8910  002644  2792               	addwf	__measure@measurement& (0+255),f,b
  8911  002646  50DD               	movf	postdec2,w,c
  8912  002648  0100               	movlb	0	; () banked
  8913  00264A  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8914                           
  8915                           ; BSR set to: 0
  8916  00264C  0100               	movlb	0	; () banked
  8917  00264E  2B8A               	incf	__measure@i& (0+255),f,b
  8918  002650  D7E9               	goto	l4964
  8919  002652                     l4974:
  8920                           
  8921                           ; BSR set to: 0
  8922                           ;main.c: 648: if (measurement%5!=0)
  8923  002652  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8924  002656  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8925  00265A  0E00               	movlw	0
  8926  00265C  0100               	movlb	0	; () banked
  8927  00265E  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8928  002660  0E05               	movlw	5
  8929  002662  6F82               	movwf	___awmod@divisor& (0+255),b
  8930  002664  EC95  F01B         	call	___awmod	;wreg free
  8931  002668  0100               	movlb	0	; () banked
  8932  00266A  5180               	movf	?___awmod& (0+255),w,b
  8933  00266C  0100               	movlb	0	; () banked
  8934  00266E  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  8935  002670  B4D8               	btfsc	status,2,c
  8936  002672  D006               	goto	l4980
  8937                           
  8938                           ; BSR set to: 0
  8939                           ;main.c: 649: return 0;
  8940  002674  0E00               	movlw	0
  8941  002676  0100               	movlb	0	; () banked
  8942  002678  6F87               	movwf	(?__measure+1)& (0+255),b
  8943  00267A  0E00               	movlw	0
  8944  00267C  6F86               	movwf	?__measure& (0+255),b
  8945                           
  8946                           ; BSR set to: 0
  8947  00267E  0012               	return	
  8948  002680                     l4980:
  8949                           
  8950                           ; BSR set to: 0
  8951                           ;main.c: 650: for (char i=0;i<5;i++)
  8952  002680  0E00               	movlw	0
  8953  002682  0100               	movlb	0	; () banked
  8954  002684  6F8B               	movwf	__measure@i_496& (0+255),b
  8955  002686                     l4982:
  8956                           
  8957                           ; BSR set to: 0
  8958  002686  0E04               	movlw	4
  8959  002688  0100               	movlb	0	; () banked
  8960  00268A  658B               	cpfsgt	__measure@i_496& (0+255),b
  8961  00268C  D001               	goto	l4986
  8962  00268E  D012               	goto	l4992
  8963  002690                     l4986:
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;main.c: 651: measurement+=PROX2[i];
  8967  002690  0100               	movlb	0	; () banked
  8968  002692  518B               	movf	__measure@i_496& (0+255),w,b
  8969  002694  0D02               	mullw	2
  8970  002696  0E52               	movlw	low _PROX2
  8971  002698  24F3               	addwf	prodl,w,c
  8972  00269A  6ED9               	movwf	fsr2l,c
  8973  00269C  0E00               	movlw	high _PROX2
  8974  00269E  20F4               	addwfc	prodh,w,c
  8975  0026A0  6EDA               	movwf	fsr2h,c
  8976  0026A2  50DE               	movf	postinc2,w,c
  8977  0026A4  0100               	movlb	0	; () banked
  8978  0026A6  2792               	addwf	__measure@measurement& (0+255),f,b
  8979  0026A8  50DD               	movf	postdec2,w,c
  8980  0026AA  0100               	movlb	0	; () banked
  8981  0026AC  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  8982                           
  8983                           ; BSR set to: 0
  8984  0026AE  0100               	movlb	0	; () banked
  8985  0026B0  2B8B               	incf	__measure@i_496& (0+255),f,b
  8986  0026B2  D7E9               	goto	l4982
  8987  0026B4                     l4992:
  8988                           
  8989                           ; BSR set to: 0
  8990                           ;main.c: 652: if (measurement%5!=0)
  8991  0026B4  C092  F080         	movff	__measure@measurement,___awmod@dividend
  8992  0026B8  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  8993  0026BC  0E00               	movlw	0
  8994  0026BE  0100               	movlb	0	; () banked
  8995  0026C0  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  8996  0026C2  0E05               	movlw	5
  8997  0026C4  6F82               	movwf	___awmod@divisor& (0+255),b
  8998  0026C6  EC95  F01B         	call	___awmod	;wreg free
  8999  0026CA  0100               	movlb	0	; () banked
  9000  0026CC  5180               	movf	?___awmod& (0+255),w,b
  9001  0026CE  0100               	movlb	0	; () banked
  9002  0026D0  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  9003  0026D2  B4D8               	btfsc	status,2,c
  9004  0026D4  D006               	goto	l4998
  9005                           
  9006                           ; BSR set to: 0
  9007                           ;main.c: 653: return 0;
  9008  0026D6  0E00               	movlw	0
  9009  0026D8  0100               	movlb	0	; () banked
  9010  0026DA  6F87               	movwf	(?__measure+1)& (0+255),b
  9011  0026DC  0E00               	movlw	0
  9012  0026DE  6F86               	movwf	?__measure& (0+255),b
  9013                           
  9014                           ; BSR set to: 0
  9015  0026E0  0012               	return	
  9016  0026E2                     l4998:
  9017                           
  9018                           ; BSR set to: 0
  9019                           ;main.c: 656: for (char i=0;i<5;i++)
  9020  0026E2  0E00               	movlw	0
  9021  0026E4  0100               	movlb	0	; () banked
  9022  0026E6  6F8C               	movwf	__measure@i_497& (0+255),b
  9023  0026E8                     l5000:
  9024                           
  9025                           ; BSR set to: 0
  9026  0026E8  0E04               	movlw	4
  9027  0026EA  0100               	movlb	0	; () banked
  9028  0026EC  658C               	cpfsgt	__measure@i_497& (0+255),b
  9029  0026EE  D001               	goto	l5004
  9030  0026F0  D019               	goto	l5010
  9031  0026F2                     l5004:
  9032                           
  9033                           ; BSR set to: 0
  9034                           ;main.c: 657: measurement+=(DIST1[i]<DIST_THRESHOLD_LOW);
  9035  0026F2  0100               	movlb	0	; () banked
  9036  0026F4  518C               	movf	__measure@i_497& (0+255),w,b
  9037  0026F6  0D02               	mullw	2
  9038  0026F8  0E2A               	movlw	low _DIST1
  9039  0026FA  24F3               	addwf	prodl,w,c
  9040  0026FC  6ED9               	movwf	fsr2l,c
  9041  0026FE  0E01               	movlw	high _DIST1
  9042  002700  20F4               	addwfc	prodh,w,c
  9043  002702  6EDA               	movwf	fsr2h,c
  9044  002704  506B               	movf	_DIST_THRESHOLD_LOW,w,c
  9045  002706  5CDE               	subwf	postinc2,w,c
  9046  002708  506C               	movf	_DIST_THRESHOLD_LOW+1,w,c
  9047  00270A  58DE               	subwfb	postinc2,w,c
  9048  00270C  B0D8               	btfsc	status,0,c
  9049  00270E  D002               	goto	u7090
  9050  002710  0E01               	movlw	1
  9051  002712  D001               	goto	u7100
  9052  002714                     u7090:
  9053  002714  0E00               	movlw	0
  9054  002716                     u7100:
  9055  002716  0100               	movlb	0	; () banked
  9056  002718  2792               	addwf	__measure@measurement& (0+255),f,b
  9057  00271A  0E00               	movlw	0
  9058  00271C  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  9059                           
  9060                           ; BSR set to: 0
  9061  00271E  0100               	movlb	0	; () banked
  9062  002720  2B8C               	incf	__measure@i_497& (0+255),f,b
  9063  002722  D7E2               	goto	l5000
  9064  002724                     l5010:
  9065                           
  9066                           ; BSR set to: 0
  9067                           ;main.c: 658: if (measurement%5!=0)
  9068  002724  C092  F080         	movff	__measure@measurement,___awmod@dividend
  9069  002728  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  9070  00272C  0E00               	movlw	0
  9071  00272E  0100               	movlb	0	; () banked
  9072  002730  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9073  002732  0E05               	movlw	5
  9074  002734  6F82               	movwf	___awmod@divisor& (0+255),b
  9075  002736  EC95  F01B         	call	___awmod	;wreg free
  9076  00273A  0100               	movlb	0	; () banked
  9077  00273C  5180               	movf	?___awmod& (0+255),w,b
  9078  00273E  0100               	movlb	0	; () banked
  9079  002740  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  9080  002742  B4D8               	btfsc	status,2,c
  9081  002744  D006               	goto	l5016
  9082                           
  9083                           ; BSR set to: 0
  9084                           ;main.c: 659: return 0;
  9085  002746  0E00               	movlw	0
  9086  002748  0100               	movlb	0	; () banked
  9087  00274A  6F87               	movwf	(?__measure+1)& (0+255),b
  9088  00274C  0E00               	movlw	0
  9089  00274E  6F86               	movwf	?__measure& (0+255),b
  9090                           
  9091                           ; BSR set to: 0
  9092  002750  0012               	return	
  9093  002752                     l5016:
  9094                           
  9095                           ; BSR set to: 0
  9096                           ;main.c: 660: for (char i=0;i<5;i++)
  9097  002752  0E00               	movlw	0
  9098  002754  0100               	movlb	0	; () banked
  9099  002756  6F8D               	movwf	__measure@i_498& (0+255),b
  9100  002758                     l5018:
  9101                           
  9102                           ; BSR set to: 0
  9103  002758  0E04               	movlw	4
  9104  00275A  0100               	movlb	0	; () banked
  9105  00275C  658D               	cpfsgt	__measure@i_498& (0+255),b
  9106  00275E  D001               	goto	l5022
  9107  002760  D019               	goto	l5028
  9108  002762                     l5022:
  9109                           
  9110                           ; BSR set to: 0
  9111                           ;main.c: 661: measurement+=(DIST1[i]<DIST_THRESHOLD_HI);
  9112  002762  0100               	movlb	0	; () banked
  9113  002764  518D               	movf	__measure@i_498& (0+255),w,b
  9114  002766  0D02               	mullw	2
  9115  002768  0E2A               	movlw	low _DIST1
  9116  00276A  24F3               	addwf	prodl,w,c
  9117  00276C  6ED9               	movwf	fsr2l,c
  9118  00276E  0E01               	movlw	high _DIST1
  9119  002770  20F4               	addwfc	prodh,w,c
  9120  002772  6EDA               	movwf	fsr2h,c
  9121  002774  5069               	movf	_DIST_THRESHOLD_HI,w,c
  9122  002776  5CDE               	subwf	postinc2,w,c
  9123  002778  506A               	movf	_DIST_THRESHOLD_HI+1,w,c
  9124  00277A  58DE               	subwfb	postinc2,w,c
  9125  00277C  B0D8               	btfsc	status,0,c
  9126  00277E  D002               	goto	u7140
  9127  002780  0E01               	movlw	1
  9128  002782  D001               	goto	u7150
  9129  002784                     u7140:
  9130  002784  0E00               	movlw	0
  9131  002786                     u7150:
  9132  002786  0100               	movlb	0	; () banked
  9133  002788  2792               	addwf	__measure@measurement& (0+255),f,b
  9134  00278A  0E00               	movlw	0
  9135  00278C  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  9136                           
  9137                           ; BSR set to: 0
  9138  00278E  0100               	movlb	0	; () banked
  9139  002790  2B8D               	incf	__measure@i_498& (0+255),f,b
  9140  002792  D7E2               	goto	l5018
  9141  002794                     l5028:
  9142                           
  9143                           ; BSR set to: 0
  9144                           ;main.c: 662: if (measurement%5!=0)
  9145  002794  C092  F080         	movff	__measure@measurement,___awmod@dividend
  9146  002798  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  9147  00279C  0E00               	movlw	0
  9148  00279E  0100               	movlb	0	; () banked
  9149  0027A0  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9150  0027A2  0E05               	movlw	5
  9151  0027A4  6F82               	movwf	___awmod@divisor& (0+255),b
  9152  0027A6  EC95  F01B         	call	___awmod	;wreg free
  9153  0027AA  0100               	movlb	0	; () banked
  9154  0027AC  5180               	movf	?___awmod& (0+255),w,b
  9155  0027AE  0100               	movlb	0	; () banked
  9156  0027B0  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  9157  0027B2  B4D8               	btfsc	status,2,c
  9158  0027B4  D006               	goto	l5034
  9159                           
  9160                           ; BSR set to: 0
  9161                           ;main.c: 663: return 0;
  9162  0027B6  0E00               	movlw	0
  9163  0027B8  0100               	movlb	0	; () banked
  9164  0027BA  6F87               	movwf	(?__measure+1)& (0+255),b
  9165  0027BC  0E00               	movlw	0
  9166  0027BE  6F86               	movwf	?__measure& (0+255),b
  9167                           
  9168                           ; BSR set to: 0
  9169  0027C0  0012               	return	
  9170  0027C2                     l5034:
  9171                           
  9172                           ; BSR set to: 0
  9173                           ;main.c: 666: for (char i=0;i<5;i++)
  9174  0027C2  0E00               	movlw	0
  9175  0027C4  0100               	movlb	0	; () banked
  9176  0027C6  6F8E               	movwf	__measure@i_499& (0+255),b
  9177  0027C8                     l5036:
  9178                           
  9179                           ; BSR set to: 0
  9180  0027C8  0E04               	movlw	4
  9181  0027CA  0100               	movlb	0	; () banked
  9182  0027CC  658E               	cpfsgt	__measure@i_499& (0+255),b
  9183  0027CE  D001               	goto	l5040
  9184  0027D0  D01B               	goto	l5046
  9185  0027D2                     l5040:
  9186                           
  9187                           ; BSR set to: 0
  9188                           ;main.c: 667: measurement+=(IR1[i]<IR_THRESHOLD_LOW);
  9189  0027D2  0100               	movlb	0	; () banked
  9190  0027D4  518E               	movf	__measure@i_499& (0+255),w,b
  9191  0027D6  0D02               	mullw	2
  9192  0027D8  0E3E               	movlw	low _IR1
  9193  0027DA  24F3               	addwf	prodl,w,c
  9194  0027DC  6ED9               	movwf	fsr2l,c
  9195  0027DE  0E00               	movlw	high _IR1
  9196  0027E0  20F4               	addwfc	prodh,w,c
  9197  0027E2  6EDA               	movwf	fsr2h,c
  9198  0027E4  0100               	movlb	0	; () banked
  9199  0027E6  51DA               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  9200  0027E8  5CDE               	subwf	postinc2,w,c
  9201  0027EA  0100               	movlb	0	; () banked
  9202  0027EC  51DB               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  9203  0027EE  58DE               	subwfb	postinc2,w,c
  9204  0027F0  B0D8               	btfsc	status,0,c
  9205  0027F2  D002               	goto	u7190
  9206  0027F4  0E01               	movlw	1
  9207  0027F6  D001               	goto	u7200
  9208  0027F8                     u7190:
  9209  0027F8  0E00               	movlw	0
  9210  0027FA                     u7200:
  9211  0027FA  0100               	movlb	0	; () banked
  9212  0027FC  2792               	addwf	__measure@measurement& (0+255),f,b
  9213  0027FE  0E00               	movlw	0
  9214  002800  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  9215                           
  9216                           ; BSR set to: 0
  9217  002802  0100               	movlb	0	; () banked
  9218  002804  2B8E               	incf	__measure@i_499& (0+255),f,b
  9219  002806  D7E0               	goto	l5036
  9220  002808                     l5046:
  9221                           
  9222                           ; BSR set to: 0
  9223                           ;main.c: 668: if (measurement%5!=0)
  9224  002808  C092  F080         	movff	__measure@measurement,___awmod@dividend
  9225  00280C  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  9226  002810  0E00               	movlw	0
  9227  002812  0100               	movlb	0	; () banked
  9228  002814  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9229  002816  0E05               	movlw	5
  9230  002818  6F82               	movwf	___awmod@divisor& (0+255),b
  9231  00281A  EC95  F01B         	call	___awmod	;wreg free
  9232  00281E  0100               	movlb	0	; () banked
  9233  002820  5180               	movf	?___awmod& (0+255),w,b
  9234  002822  0100               	movlb	0	; () banked
  9235  002824  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  9236  002826  B4D8               	btfsc	status,2,c
  9237  002828  D006               	goto	l5052
  9238                           
  9239                           ; BSR set to: 0
  9240                           ;main.c: 669: return 0;
  9241  00282A  0E00               	movlw	0
  9242  00282C  0100               	movlb	0	; () banked
  9243  00282E  6F87               	movwf	(?__measure+1)& (0+255),b
  9244  002830  0E00               	movlw	0
  9245  002832  6F86               	movwf	?__measure& (0+255),b
  9246                           
  9247                           ; BSR set to: 0
  9248  002834  0012               	return	
  9249  002836                     l5052:
  9250                           
  9251                           ; BSR set to: 0
  9252                           ;main.c: 671: for (char i=0;i<5;i++)
  9253  002836  0E00               	movlw	0
  9254  002838  0100               	movlb	0	; () banked
  9255  00283A  6F8F               	movwf	__measure@i_500& (0+255),b
  9256  00283C                     l5054:
  9257                           
  9258                           ; BSR set to: 0
  9259  00283C  0E04               	movlw	4
  9260  00283E  0100               	movlb	0	; () banked
  9261  002840  658F               	cpfsgt	__measure@i_500& (0+255),b
  9262  002842  D001               	goto	l5058
  9263  002844  D01B               	goto	l5064
  9264  002846                     l5058:
  9265                           
  9266                           ; BSR set to: 0
  9267                           ;main.c: 672: measurement+=(IR1[i]<IR_THRESHOLD_HI);
  9268  002846  0100               	movlb	0	; () banked
  9269  002848  518F               	movf	__measure@i_500& (0+255),w,b
  9270  00284A  0D02               	mullw	2
  9271  00284C  0E3E               	movlw	low _IR1
  9272  00284E  24F3               	addwf	prodl,w,c
  9273  002850  6ED9               	movwf	fsr2l,c
  9274  002852  0E00               	movlw	high _IR1
  9275  002854  20F4               	addwfc	prodh,w,c
  9276  002856  6EDA               	movwf	fsr2h,c
  9277  002858  0100               	movlb	0	; () banked
  9278  00285A  51D8               	movf	_IR_THRESHOLD_HI& (0+255),w,b
  9279  00285C  5CDE               	subwf	postinc2,w,c
  9280  00285E  0100               	movlb	0	; () banked
  9281  002860  51D9               	movf	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  9282  002862  58DE               	subwfb	postinc2,w,c
  9283  002864  B0D8               	btfsc	status,0,c
  9284  002866  D002               	goto	u7240
  9285  002868  0E01               	movlw	1
  9286  00286A  D001               	goto	u7250
  9287  00286C                     u7240:
  9288  00286C  0E00               	movlw	0
  9289  00286E                     u7250:
  9290  00286E  0100               	movlb	0	; () banked
  9291  002870  2792               	addwf	__measure@measurement& (0+255),f,b
  9292  002872  0E00               	movlw	0
  9293  002874  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  9294                           
  9295                           ; BSR set to: 0
  9296  002876  0100               	movlb	0	; () banked
  9297  002878  2B8F               	incf	__measure@i_500& (0+255),f,b
  9298  00287A  D7E0               	goto	l5054
  9299  00287C                     l5064:
  9300                           
  9301                           ; BSR set to: 0
  9302                           ;main.c: 673: if (measurement%5!=0)
  9303  00287C  C092  F080         	movff	__measure@measurement,___awmod@dividend
  9304  002880  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  9305  002884  0E00               	movlw	0
  9306  002886  0100               	movlb	0	; () banked
  9307  002888  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9308  00288A  0E05               	movlw	5
  9309  00288C  6F82               	movwf	___awmod@divisor& (0+255),b
  9310  00288E  EC95  F01B         	call	___awmod	;wreg free
  9311  002892  0100               	movlb	0	; () banked
  9312  002894  5180               	movf	?___awmod& (0+255),w,b
  9313  002896  0100               	movlb	0	; () banked
  9314  002898  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  9315  00289A  B4D8               	btfsc	status,2,c
  9316  00289C  D006               	goto	l5070
  9317                           
  9318                           ; BSR set to: 0
  9319                           ;main.c: 674: return 0;
  9320  00289E  0E00               	movlw	0
  9321  0028A0  0100               	movlb	0	; () banked
  9322  0028A2  6F87               	movwf	(?__measure+1)& (0+255),b
  9323  0028A4  0E00               	movlw	0
  9324  0028A6  6F86               	movwf	?__measure& (0+255),b
  9325                           
  9326                           ; BSR set to: 0
  9327  0028A8  0012               	return	
  9328  0028AA                     l5070:
  9329                           
  9330                           ; BSR set to: 0
  9331                           ;main.c: 676: for (char i=0;i<5;i++)
  9332  0028AA  0E00               	movlw	0
  9333  0028AC  0100               	movlb	0	; () banked
  9334  0028AE  6F90               	movwf	__measure@i_501& (0+255),b
  9335  0028B0                     l5072:
  9336                           
  9337                           ; BSR set to: 0
  9338  0028B0  0E04               	movlw	4
  9339  0028B2  0100               	movlb	0	; () banked
  9340  0028B4  6590               	cpfsgt	__measure@i_501& (0+255),b
  9341  0028B6  D001               	goto	l5076
  9342  0028B8  D01B               	goto	l5082
  9343  0028BA                     l5076:
  9344                           
  9345                           ; BSR set to: 0
  9346                           ;main.c: 677: measurement+=(IR2[i]<IR_THRESHOLD_LOW);
  9347  0028BA  0100               	movlb	0	; () banked
  9348  0028BC  5190               	movf	__measure@i_501& (0+255),w,b
  9349  0028BE  0D02               	mullw	2
  9350  0028C0  0E34               	movlw	low _IR2
  9351  0028C2  24F3               	addwf	prodl,w,c
  9352  0028C4  6ED9               	movwf	fsr2l,c
  9353  0028C6  0E01               	movlw	high _IR2
  9354  0028C8  20F4               	addwfc	prodh,w,c
  9355  0028CA  6EDA               	movwf	fsr2h,c
  9356  0028CC  0100               	movlb	0	; () banked
  9357  0028CE  51DA               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  9358  0028D0  5CDE               	subwf	postinc2,w,c
  9359  0028D2  0100               	movlb	0	; () banked
  9360  0028D4  51DB               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  9361  0028D6  58DE               	subwfb	postinc2,w,c
  9362  0028D8  B0D8               	btfsc	status,0,c
  9363  0028DA  D002               	goto	u7290
  9364  0028DC  0E01               	movlw	1
  9365  0028DE  D001               	goto	u7300
  9366  0028E0                     u7290:
  9367  0028E0  0E00               	movlw	0
  9368  0028E2                     u7300:
  9369  0028E2  0100               	movlb	0	; () banked
  9370  0028E4  2792               	addwf	__measure@measurement& (0+255),f,b
  9371  0028E6  0E00               	movlw	0
  9372  0028E8  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  9373                           
  9374                           ; BSR set to: 0
  9375  0028EA  0100               	movlb	0	; () banked
  9376  0028EC  2B90               	incf	__measure@i_501& (0+255),f,b
  9377  0028EE  D7E0               	goto	l5072
  9378  0028F0                     l5082:
  9379                           
  9380                           ; BSR set to: 0
  9381                           ;main.c: 678: if (measurement%5!=0)
  9382  0028F0  C092  F080         	movff	__measure@measurement,___awmod@dividend
  9383  0028F4  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  9384  0028F8  0E00               	movlw	0
  9385  0028FA  0100               	movlb	0	; () banked
  9386  0028FC  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9387  0028FE  0E05               	movlw	5
  9388  002900  6F82               	movwf	___awmod@divisor& (0+255),b
  9389  002902  EC95  F01B         	call	___awmod	;wreg free
  9390  002906  0100               	movlb	0	; () banked
  9391  002908  5180               	movf	?___awmod& (0+255),w,b
  9392  00290A  0100               	movlb	0	; () banked
  9393  00290C  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  9394  00290E  B4D8               	btfsc	status,2,c
  9395  002910  D006               	goto	l5088
  9396                           
  9397                           ; BSR set to: 0
  9398                           ;main.c: 679: return 0;
  9399  002912  0E00               	movlw	0
  9400  002914  0100               	movlb	0	; () banked
  9401  002916  6F87               	movwf	(?__measure+1)& (0+255),b
  9402  002918  0E00               	movlw	0
  9403  00291A  6F86               	movwf	?__measure& (0+255),b
  9404                           
  9405                           ; BSR set to: 0
  9406  00291C  0012               	return	
  9407  00291E                     l5088:
  9408                           
  9409                           ; BSR set to: 0
  9410                           ;main.c: 681: for (char i=0;i<5;i++)
  9411  00291E  0E00               	movlw	0
  9412  002920  0100               	movlb	0	; () banked
  9413  002922  6F91               	movwf	__measure@i_502& (0+255),b
  9414  002924                     l5090:
  9415                           
  9416                           ; BSR set to: 0
  9417  002924  0E04               	movlw	4
  9418  002926  0100               	movlb	0	; () banked
  9419  002928  6591               	cpfsgt	__measure@i_502& (0+255),b
  9420  00292A  D001               	goto	l5094
  9421  00292C  D01B               	goto	l5100
  9422  00292E                     l5094:
  9423                           
  9424                           ; BSR set to: 0
  9425                           ;main.c: 682: measurement+=(IR1[i]<IR_THRESHOLD_HI);
  9426  00292E  0100               	movlb	0	; () banked
  9427  002930  5191               	movf	__measure@i_502& (0+255),w,b
  9428  002932  0D02               	mullw	2
  9429  002934  0E3E               	movlw	low _IR1
  9430  002936  24F3               	addwf	prodl,w,c
  9431  002938  6ED9               	movwf	fsr2l,c
  9432  00293A  0E00               	movlw	high _IR1
  9433  00293C  20F4               	addwfc	prodh,w,c
  9434  00293E  6EDA               	movwf	fsr2h,c
  9435  002940  0100               	movlb	0	; () banked
  9436  002942  51D8               	movf	_IR_THRESHOLD_HI& (0+255),w,b
  9437  002944  5CDE               	subwf	postinc2,w,c
  9438  002946  0100               	movlb	0	; () banked
  9439  002948  51D9               	movf	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  9440  00294A  58DE               	subwfb	postinc2,w,c
  9441  00294C  B0D8               	btfsc	status,0,c
  9442  00294E  D002               	goto	u7340
  9443  002950  0E01               	movlw	1
  9444  002952  D001               	goto	u7350
  9445  002954                     u7340:
  9446  002954  0E00               	movlw	0
  9447  002956                     u7350:
  9448  002956  0100               	movlb	0	; () banked
  9449  002958  2792               	addwf	__measure@measurement& (0+255),f,b
  9450  00295A  0E00               	movlw	0
  9451  00295C  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  9452                           
  9453                           ; BSR set to: 0
  9454  00295E  0100               	movlb	0	; () banked
  9455  002960  2B91               	incf	__measure@i_502& (0+255),f,b
  9456  002962  D7E0               	goto	l5090
  9457  002964                     l5100:
  9458                           
  9459                           ; BSR set to: 0
  9460                           ;main.c: 683: if (measurement%5!=0)
  9461  002964  C092  F080         	movff	__measure@measurement,___awmod@dividend
  9462  002968  C093  F081         	movff	__measure@measurement+1,___awmod@dividend+1
  9463  00296C  0E00               	movlw	0
  9464  00296E  0100               	movlb	0	; () banked
  9465  002970  6F83               	movwf	(___awmod@divisor+1)& (0+255),b
  9466  002972  0E05               	movlw	5
  9467  002974  6F82               	movwf	___awmod@divisor& (0+255),b
  9468  002976  EC95  F01B         	call	___awmod	;wreg free
  9469  00297A  0100               	movlb	0	; () banked
  9470  00297C  5180               	movf	?___awmod& (0+255),w,b
  9471  00297E  0100               	movlb	0	; () banked
  9472  002980  1181               	iorwf	(?___awmod+1)& (0+255),w,b
  9473  002982  B4D8               	btfsc	status,2,c
  9474  002984  D006               	goto	l5106
  9475                           
  9476                           ; BSR set to: 0
  9477                           ;main.c: 684: return 0;
  9478  002986  0E00               	movlw	0
  9479  002988  0100               	movlb	0	; () banked
  9480  00298A  6F87               	movwf	(?__measure+1)& (0+255),b
  9481  00298C  0E00               	movlw	0
  9482  00298E  6F86               	movwf	?__measure& (0+255),b
  9483                           
  9484                           ; BSR set to: 0
  9485  002990  0012               	return	
  9486  002992                     l5106:
  9487                           
  9488                           ; BSR set to: 0
  9489                           ;main.c: 687: measurement=2;
  9490  002992  0E00               	movlw	0
  9491  002994  0100               	movlb	0	; () banked
  9492  002996  6F93               	movwf	(__measure@measurement+1)& (0+255),b
  9493  002998  0E02               	movlw	2
  9494  00299A  6F92               	movwf	__measure@measurement& (0+255),b
  9495                           
  9496                           ; BSR set to: 0
  9497                           ;main.c: 689: if (DIST1[0]>DIST_THRESHOLD_HI)
  9498  00299C  0101               	movlb	1	; () banked
  9499  00299E  512A               	movf	_DIST1& (0+255),w,b
  9500  0029A0  5C69               	subwf	_DIST_THRESHOLD_HI,w,c
  9501  0029A2  0101               	movlb	1	; () banked
  9502  0029A4  512B               	movf	(_DIST1+1)& (0+255),w,b
  9503  0029A6  586A               	subwfb	_DIST_THRESHOLD_HI+1,w,c
  9504  0029A8  B0D8               	btfsc	status,0,c
  9505  0029AA  D006               	goto	l5114
  9506                           
  9507                           ; BSR set to: 1
  9508                           ;main.c: 690: return 0;
  9509  0029AC  0E00               	movlw	0
  9510  0029AE  0100               	movlb	0	; () banked
  9511  0029B0  6F87               	movwf	(?__measure+1)& (0+255),b
  9512  0029B2  0E00               	movlw	0
  9513  0029B4  6F86               	movwf	?__measure& (0+255),b
  9514                           
  9515                           ; BSR set to: 0
  9516  0029B6  0012               	return	
  9517  0029B8                     l5114:
  9518                           
  9519                           ;main.c: 691: if (DIST1[0]>DIST_THRESHOLD_LOW){
  9520  0029B8  0101               	movlb	1	; () banked
  9521  0029BA  512A               	movf	_DIST1& (0+255),w,b
  9522  0029BC  5C6B               	subwf	_DIST_THRESHOLD_LOW,w,c
  9523  0029BE  0101               	movlb	1	; () banked
  9524  0029C0  512B               	movf	(_DIST1+1)& (0+255),w,b
  9525  0029C2  586C               	subwfb	_DIST_THRESHOLD_LOW+1,w,c
  9526  0029C4  B0D8               	btfsc	status,0,c
  9527  0029C6  D005               	goto	l5118
  9528                           
  9529                           ; BSR set to: 1
  9530                           ;main.c: 692: measurement-=PROX2[0];
  9531  0029C8  5052               	movf	_PROX2,w,c
  9532  0029CA  0100               	movlb	0	; () banked
  9533  0029CC  5F92               	subwf	__measure@measurement& (0+255),f,b
  9534  0029CE  5053               	movf	_PROX2+1,w,c
  9535  0029D0  D004               	goto	L4
  9536  0029D2                     l5118:
  9537                           
  9538                           ;main.c: 694: else
  9539                           ;main.c: 695: measurement-=PROX1[0];
  9540  0029D2  5048               	movf	_PROX1,w,c
  9541  0029D4  0100               	movlb	0	; () banked
  9542  0029D6  5F92               	subwf	__measure@measurement& (0+255),f,b
  9543  0029D8  5049               	movf	_PROX1+1,w,c
  9544  0029DA                     L4:
  9545  0029DA  0100               	movlb	0	; () banked
  9546  0029DC  5B93               	subwfb	(__measure@measurement+1)& (0+255),f,b
  9547                           
  9548                           ; BSR set to: 0
  9549                           ;main.c: 698: if (IR1[0]>IR_THRESHOLD_HI||IR2[0]>IR_THRESHOLD_HI);
  9550  0029DE  503E               	movf	_IR1,w,c
  9551  0029E0  0100               	movlb	0	; () banked
  9552  0029E2  5DD8               	subwf	_IR_THRESHOLD_HI& (0+255),w,b
  9553  0029E4  503F               	movf	_IR1+1,w,c
  9554  0029E6  0100               	movlb	0	; () banked
  9555  0029E8  59D9               	subwfb	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  9556  0029EA  A0D8               	btfss	status,0,c
  9557  0029EC  D028               	goto	l495
  9558                           
  9559                           ; BSR set to: 0
  9560  0029EE  0101               	movlb	1	; () banked
  9561  0029F0  5134               	movf	_IR2& (0+255),w,b
  9562  0029F2  0100               	movlb	0	; () banked
  9563  0029F4  5DD8               	subwf	_IR_THRESHOLD_HI& (0+255),w,b
  9564  0029F6  0101               	movlb	1	; () banked
  9565  0029F8  5135               	movf	(_IR2+1)& (0+255),w,b
  9566  0029FA  0100               	movlb	0	; () banked
  9567  0029FC  59D9               	subwfb	(_IR_THRESHOLD_HI+1)& (0+255),w,b
  9568  0029FE  A0D8               	btfss	status,0,c
  9569  002A00  D01E               	goto	l495
  9570                           
  9571                           ; BSR set to: 0
  9572                           ;main.c: 699: else if (IR1[0]<IR_THRESHOLD_LOW&&IR2[0]<IR_THRESHOLD_LOW)
  9573                           
  9574                           ; BSR set to: 0
  9575                           
  9576                           ; BSR set to: 0
  9577  002A02  0100               	movlb	0	; () banked
  9578  002A04  51DA               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  9579  002A06  5C3E               	subwf	_IR1,w,c
  9580  002A08  0100               	movlb	0	; () banked
  9581  002A0A  51DB               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  9582  002A0C  583F               	subwfb	_IR1+1,w,c
  9583  002A0E  B0D8               	btfsc	status,0,c
  9584  002A10  D010               	goto	l5128
  9585                           
  9586                           ; BSR set to: 0
  9587  002A12  0100               	movlb	0	; () banked
  9588  002A14  51DA               	movf	_IR_THRESHOLD_LOW& (0+255),w,b
  9589  002A16  0101               	movlb	1	; () banked
  9590  002A18  5D34               	subwf	_IR2& (0+255),w,b
  9591  002A1A  0100               	movlb	0	; () banked
  9592  002A1C  51DB               	movf	(_IR_THRESHOLD_LOW+1)& (0+255),w,b
  9593  002A1E  0101               	movlb	1	; () banked
  9594  002A20  5935               	subwfb	(_IR2+1)& (0+255),w,b
  9595  002A22  B0D8               	btfsc	status,0,c
  9596  002A24  D006               	goto	l5128
  9597                           
  9598                           ; BSR set to: 1
  9599                           ;main.c: 700: measurement+=2;
  9600  002A26  0E02               	movlw	2
  9601  002A28  0100               	movlb	0	; () banked
  9602  002A2A  2792               	addwf	__measure@measurement& (0+255),f,b
  9603  002A2C  0E00               	movlw	0
  9604  002A2E  2393               	addwfc	(__measure@measurement+1)& (0+255),f,b
  9605  002A30  D006               	goto	l495
  9606  002A32                     l5128:
  9607                           
  9608                           ;main.c: 701: else
  9609                           ;main.c: 702: return 0;
  9610  002A32  0E00               	movlw	0
  9611  002A34  0100               	movlb	0	; () banked
  9612  002A36  6F87               	movwf	(?__measure+1)& (0+255),b
  9613  002A38  0E00               	movlw	0
  9614  002A3A  6F86               	movwf	?__measure& (0+255),b
  9615                           
  9616                           ; BSR set to: 0
  9617  002A3C  0012               	return	
  9618  002A3E                     l495:
  9619                           
  9620                           ; BSR set to: 0
  9621                           ;main.c: 704: return measurement;
  9622  002A3E  C092  F086         	movff	__measure@measurement,?__measure
  9623  002A42  C093  F087         	movff	__measure@measurement+1,?__measure+1
  9624                           
  9625                           ; BSR set to: 0
  9626  002A46  0012               	return		;funcret
  9627  002A48                     __end_of__measure:
  9628                           	opt stack 0
  9629                           tosu	equ	0xFFF
  9630                           tosh	equ	0xFFE
  9631                           tosl	equ	0xFFD
  9632                           pclath	equ	0xFFA
  9633                           tblptru	equ	0xFF8
  9634                           tblptrh	equ	0xFF7
  9635                           tblptrl	equ	0xFF6
  9636                           tablat	equ	0xFF5
  9637                           prodh	equ	0xFF4
  9638                           prodl	equ	0xFF3
  9639                           intcon	equ	0xFF2
  9640                           intcon2	equ	0xFF1
  9641                           intcon3	equ	0xFF0
  9642                           indf0	equ	0xFEF
  9643                           postinc0	equ	0xFEE
  9644                           fsr0h	equ	0xFEA
  9645                           fsr0l	equ	0xFE9
  9646                           wreg	equ	0xFE8
  9647                           indf1	equ	0xFE7
  9648                           postinc1	equ	0xFE6
  9649                           postdec1	equ	0xFE5
  9650                           fsr1h	equ	0xFE2
  9651                           fsr1l	equ	0xFE1
  9652                           indf2	equ	0xFDF
  9653                           postinc2	equ	0xFDE
  9654                           postdec2	equ	0xFDD
  9655                           fsr2h	equ	0xFDA
  9656                           fsr2l	equ	0xFD9
  9657                           status	equ	0xFD8
  9658                           
  9659 ;; *************** function ___awmod *****************
  9660 ;; Defined at:
  9661 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  9662 ;; Parameters:    Size  Location     Type
  9663 ;;  dividend        2    0[BANK0 ] int 
  9664 ;;  divisor         2    2[BANK0 ] int 
  9665 ;; Auto vars:     Size  Location     Type
  9666 ;;  sign            1    5[BANK0 ] unsigned char 
  9667 ;;  counter         1    4[BANK0 ] unsigned char 
  9668 ;; Return value:  Size  Location     Type
  9669 ;;                  2    0[BANK0 ] int 
  9670 ;; Registers used:
  9671 ;;		wreg, status,2, status,0
  9672 ;; Tracked objects:
  9673 ;;		On entry : 0/0
  9674 ;;		On exit  : 0/0
  9675 ;;		Unchanged: 0/0
  9676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9677 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9678 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9680 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9681 ;;Total ram usage:        6 bytes
  9682 ;; Hardware stack levels used:    1
  9683 ;; Hardware stack levels required when called:    5
  9684 ;; This function calls:
  9685 ;;		Nothing
  9686 ;; This function is called by:
  9687 ;;		_update_display
  9688 ;;		_update_state
  9689 ;;		_sort
  9690 ;;		__measure
  9691 ;; This function uses a non-reentrant model
  9692 ;;
  9693                           
  9694                           	psect	text23
  9695  00372A                     __ptext23:
  9696                           	opt stack 0
  9697  00372A                     ___awmod:
  9698                           	opt stack 24
  9699                           
  9700                           ; BSR set to: 0
  9701                           ;incstack = 0
  9702  00372A  0E00               	movlw	0
  9703  00372C  0100               	movlb	0	; () banked
  9704  00372E  6F85               	movwf	___awmod@sign& (0+255),b
  9705                           
  9706                           ; BSR set to: 0
  9707  003730  0100               	movlb	0	; () banked
  9708  003732  AF81               	btfss	(___awmod@dividend+1)& (0+255),7,b
  9709  003734  D008               	goto	l4830
  9710                           
  9711                           ; BSR set to: 0
  9712  003736  0100               	movlb	0	; () banked
  9713  003738  6D80               	negf	___awmod@dividend& (0+255),b
  9714  00373A  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9715  00373C  B0D8               	btfsc	status,0,c
  9716  00373E  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9717                           
  9718                           ; BSR set to: 0
  9719  003740  0E01               	movlw	1
  9720  003742  0100               	movlb	0	; () banked
  9721  003744  6F85               	movwf	___awmod@sign& (0+255),b
  9722  003746                     l4830:
  9723                           
  9724                           ; BSR set to: 0
  9725  003746  0100               	movlb	0	; () banked
  9726  003748  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9727  00374A  D005               	goto	l4834
  9728                           
  9729                           ; BSR set to: 0
  9730  00374C  0100               	movlb	0	; () banked
  9731  00374E  6D82               	negf	___awmod@divisor& (0+255),b
  9732  003750  1F83               	comf	(___awmod@divisor+1)& (0+255),f,b
  9733  003752  B0D8               	btfsc	status,0,c
  9734  003754  2B83               	incf	(___awmod@divisor+1)& (0+255),f,b
  9735  003756                     l4834:
  9736                           
  9737                           ; BSR set to: 0
  9738  003756  0100               	movlb	0	; () banked
  9739  003758  5182               	movf	___awmod@divisor& (0+255),w,b
  9740  00375A  0100               	movlb	0	; () banked
  9741  00375C  1183               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  9742  00375E  B4D8               	btfsc	status,2,c
  9743  003760  D026               	goto	l4850
  9744                           
  9745                           ; BSR set to: 0
  9746  003762  0E01               	movlw	1
  9747  003764  0100               	movlb	0	; () banked
  9748  003766  6F84               	movwf	___awmod@counter& (0+255),b
  9749  003768  D006               	goto	l4840
  9750  00376A                     l4838:
  9751                           
  9752                           ; BSR set to: 0
  9753  00376A  0100               	movlb	0	; () banked
  9754  00376C  90D8               	bcf	status,0,c
  9755  00376E  3782               	rlcf	___awmod@divisor& (0+255),f,b
  9756  003770  3783               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  9757  003772  0100               	movlb	0	; () banked
  9758  003774  2B84               	incf	___awmod@counter& (0+255),f,b
  9759  003776                     l4840:
  9760                           
  9761                           ; BSR set to: 0
  9762  003776  0100               	movlb	0	; () banked
  9763  003778  AF83               	btfss	(___awmod@divisor+1)& (0+255),7,b
  9764  00377A  D7F7               	goto	l4838
  9765  00377C                     l4842:
  9766                           
  9767                           ; BSR set to: 0
  9768  00377C  0100               	movlb	0	; () banked
  9769  00377E  5182               	movf	___awmod@divisor& (0+255),w,b
  9770  003780  0100               	movlb	0	; () banked
  9771  003782  5D80               	subwf	___awmod@dividend& (0+255),w,b
  9772  003784  0100               	movlb	0	; () banked
  9773  003786  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9774  003788  0100               	movlb	0	; () banked
  9775  00378A  5981               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  9776  00378C  A0D8               	btfss	status,0,c
  9777  00378E  D008               	goto	l4846
  9778                           
  9779                           ; BSR set to: 0
  9780  003790  0100               	movlb	0	; () banked
  9781  003792  5182               	movf	___awmod@divisor& (0+255),w,b
  9782  003794  0100               	movlb	0	; () banked
  9783  003796  5F80               	subwf	___awmod@dividend& (0+255),f,b
  9784  003798  0100               	movlb	0	; () banked
  9785  00379A  5183               	movf	(___awmod@divisor+1)& (0+255),w,b
  9786  00379C  0100               	movlb	0	; () banked
  9787  00379E  5B81               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  9788  0037A0                     l4846:
  9789                           
  9790                           ; BSR set to: 0
  9791  0037A0  0100               	movlb	0	; () banked
  9792  0037A2  90D8               	bcf	status,0,c
  9793  0037A4  3383               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  9794  0037A6  3382               	rrcf	___awmod@divisor& (0+255),f,b
  9795                           
  9796                           ; BSR set to: 0
  9797  0037A8  0100               	movlb	0	; () banked
  9798  0037AA  2F84               	decfsz	___awmod@counter& (0+255),f,b
  9799  0037AC  D7E7               	goto	l4842
  9800  0037AE                     l4850:
  9801                           
  9802                           ; BSR set to: 0
  9803  0037AE  0100               	movlb	0	; () banked
  9804  0037B0  5185               	movf	___awmod@sign& (0+255),w,b
  9805  0037B2  0100               	movlb	0	; () banked
  9806  0037B4  B4D8               	btfsc	status,2,c
  9807  0037B6  D005               	goto	l4854
  9808                           
  9809                           ; BSR set to: 0
  9810  0037B8  0100               	movlb	0	; () banked
  9811  0037BA  6D80               	negf	___awmod@dividend& (0+255),b
  9812  0037BC  1F81               	comf	(___awmod@dividend+1)& (0+255),f,b
  9813  0037BE  B0D8               	btfsc	status,0,c
  9814  0037C0  2B81               	incf	(___awmod@dividend+1)& (0+255),f,b
  9815  0037C2                     l4854:
  9816                           
  9817                           ; BSR set to: 0
  9818  0037C2  C080  F080         	movff	___awmod@dividend,?___awmod
  9819  0037C6  C081  F081         	movff	___awmod@dividend+1,?___awmod+1
  9820  0037CA  0012               	return	
  9821  0037CC                     __end_of___awmod:
  9822                           	opt stack 0
  9823                           tosu	equ	0xFFF
  9824                           tosh	equ	0xFFE
  9825                           tosl	equ	0xFFD
  9826                           pclath	equ	0xFFA
  9827                           tblptru	equ	0xFF8
  9828                           tblptrh	equ	0xFF7
  9829                           tblptrl	equ	0xFF6
  9830                           tablat	equ	0xFF5
  9831                           prodh	equ	0xFF4
  9832                           prodl	equ	0xFF3
  9833                           intcon	equ	0xFF2
  9834                           intcon2	equ	0xFF1
  9835                           intcon3	equ	0xFF0
  9836                           indf0	equ	0xFEF
  9837                           postinc0	equ	0xFEE
  9838                           fsr0h	equ	0xFEA
  9839                           fsr0l	equ	0xFE9
  9840                           wreg	equ	0xFE8
  9841                           indf1	equ	0xFE7
  9842                           postinc1	equ	0xFE6
  9843                           postdec1	equ	0xFE5
  9844                           fsr1h	equ	0xFE2
  9845                           fsr1l	equ	0xFE1
  9846                           indf2	equ	0xFDF
  9847                           postinc2	equ	0xFDE
  9848                           postdec2	equ	0xFDD
  9849                           fsr2h	equ	0xFDA
  9850                           fsr2l	equ	0xFD9
  9851                           status	equ	0xFD8
  9852                           
  9853 ;; *************** function ___wmul *****************
  9854 ;; Defined at:
  9855 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  9856 ;; Parameters:    Size  Location     Type
  9857 ;;  multiplier      2    0[BANK0 ] unsigned int 
  9858 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  9859 ;; Auto vars:     Size  Location     Type
  9860 ;;  product         2    4[BANK0 ] unsigned int 
  9861 ;; Return value:  Size  Location     Type
  9862 ;;                  2    0[BANK0 ] unsigned int 
  9863 ;; Registers used:
  9864 ;;		wreg, status,2, status,0, prodl, prodh
  9865 ;; Tracked objects:
  9866 ;;		On entry : 0/0
  9867 ;;		On exit  : 0/0
  9868 ;;		Unchanged: 0/0
  9869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9870 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9871 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9873 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9874 ;;Total ram usage:        6 bytes
  9875 ;; Hardware stack levels used:    1
  9876 ;; Hardware stack levels required when called:    5
  9877 ;; This function calls:
  9878 ;;		Nothing
  9879 ;; This function is called by:
  9880 ;;		_update_RTC
  9881 ;;		_update_display
  9882 ;;		_display_menu
  9883 ;;		_sort
  9884 ;;		__doprnt
  9885 ;; This function uses a non-reentrant model
  9886 ;;
  9887                           
  9888                           	psect	text24
  9889  003C96                     __ptext24:
  9890                           	opt stack 0
  9891  003C96                     ___wmul:
  9892                           	opt stack 22
  9893                           
  9894                           ; BSR set to: 0
  9895                           ;incstack = 0
  9896  003C96  0100               	movlb	0	; () banked
  9897  003C98  5180               	movf	___wmul@multiplier& (0+255),w,b
  9898  003C9A  0100               	movlb	0	; () banked
  9899  003C9C  0382               	mulwf	___wmul@multiplicand& (0+255),b
  9900  003C9E  CFF3 F084          	movff	prodl,___wmul@product
  9901  003CA2  CFF4 F085          	movff	prodh,___wmul@product+1
  9902  003CA6  0100               	movlb	0	; () banked
  9903  003CA8  5180               	movf	___wmul@multiplier& (0+255),w,b
  9904  003CAA  0100               	movlb	0	; () banked
  9905  003CAC  0383               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  9906  003CAE  50F3               	movf	prodl,w,c
  9907  003CB0  0100               	movlb	0	; () banked
  9908  003CB2  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  9909  003CB4  0100               	movlb	0	; () banked
  9910  003CB6  5181               	movf	(___wmul@multiplier+1)& (0+255),w,b
  9911  003CB8  0100               	movlb	0	; () banked
  9912  003CBA  0382               	mulwf	___wmul@multiplicand& (0+255),b
  9913  003CBC  50F3               	movf	prodl,w,c
  9914  003CBE  0100               	movlb	0	; () banked
  9915  003CC0  2785               	addwf	(___wmul@product+1)& (0+255),f,b
  9916                           
  9917                           ; BSR set to: 0
  9918  003CC2  C084  F080         	movff	___wmul@product,?___wmul
  9919  003CC6  C085  F081         	movff	___wmul@product+1,?___wmul+1
  9920  003CCA  0012               	return	
  9921  003CCC                     __end_of___wmul:
  9922                           	opt stack 0
  9923                           tosu	equ	0xFFF
  9924                           tosh	equ	0xFFE
  9925                           tosl	equ	0xFFD
  9926                           pclath	equ	0xFFA
  9927                           tblptru	equ	0xFF8
  9928                           tblptrh	equ	0xFF7
  9929                           tblptrl	equ	0xFF6
  9930                           tablat	equ	0xFF5
  9931                           prodh	equ	0xFF4
  9932                           prodl	equ	0xFF3
  9933                           intcon	equ	0xFF2
  9934                           intcon2	equ	0xFF1
  9935                           intcon3	equ	0xFF0
  9936                           indf0	equ	0xFEF
  9937                           postinc0	equ	0xFEE
  9938                           fsr0h	equ	0xFEA
  9939                           fsr0l	equ	0xFE9
  9940                           wreg	equ	0xFE8
  9941                           indf1	equ	0xFE7
  9942                           postinc1	equ	0xFE6
  9943                           postdec1	equ	0xFE5
  9944                           fsr1h	equ	0xFE2
  9945                           fsr1l	equ	0xFE1
  9946                           indf2	equ	0xFDF
  9947                           postinc2	equ	0xFDE
  9948                           postdec2	equ	0xFDD
  9949                           fsr2h	equ	0xFDA
  9950                           fsr2l	equ	0xFD9
  9951                           status	equ	0xFD8
  9952                           
  9953 ;; *************** function _read_sensors *****************
  9954 ;; Defined at:
  9955 ;;		line 483 in file "main.c"
  9956 ;; Parameters:    Size  Location     Type
  9957 ;;		None
  9958 ;; Auto vars:     Size  Location     Type
  9959 ;;  i               1    6[BANK0 ] unsigned char 
  9960 ;; Return value:  Size  Location     Type
  9961 ;;                  1    wreg      void 
  9962 ;; Registers used:
  9963 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9964 ;; Tracked objects:
  9965 ;;		On entry : 0/0
  9966 ;;		On exit  : 0/0
  9967 ;;		Unchanged: 0/0
  9968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9970 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9971 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9972 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9973 ;;Total ram usage:        5 bytes
  9974 ;; Hardware stack levels used:    1
  9975 ;; Hardware stack levels required when called:    6
  9976 ;; This function calls:
  9977 ;;		_readADC
  9978 ;; This function is called by:
  9979 ;;		_main
  9980 ;; This function uses a non-reentrant model
  9981 ;;
  9982                           
  9983                           	psect	text25
  9984  003012                     __ptext25:
  9985                           	opt stack 0
  9986  003012                     _read_sensors:
  9987                           	opt stack 24
  9988                           
  9989                           ;main.c: 484: if (state!='s'){
  9990                           
  9991                           ; BSR set to: 0
  9992                           ;incstack = 0
  9993  003012  0E73               	movlw	115
  9994  003014  0100               	movlb	0	; () banked
  9995  003016  19DF               	xorwf	_state& (0+255),w,b
  9996  003018  A4D8               	btfss	status,2,c
  9997  00301A  0012               	return	
  9998                           
  9999                           ; BSR set to: 0
 10000                           ;main.c: 486: }
 10001                           ;main.c: 488: for(char i=5-1;i>0;i--){
 10002                           
 10003                           ; BSR set to: 0
 10004                           
 10005                           ; BSR set to: 0
 10006                           ;main.c: 485: return;
 10007  00301C  0E04               	movlw	4
 10008  00301E  0100               	movlb	0	; () banked
 10009  003020  6F86               	movwf	read_sensors@i& (0+255),b
 10010  003022  0100               	movlb	0	; () banked
 10011  003024  5186               	movf	read_sensors@i& (0+255),w,b
 10012  003026  0100               	movlb	0	; () banked
 10013  003028  B4D8               	btfsc	status,2,c
 10014  00302A  D0DF               	goto	l5480
 10015                           
 10016                           ; BSR set to: 0
 10017                           ;main.c: 489: PROX1[i]=PROX1[i-1];
 10018                           
 10019                           ; BSR set to: 0
 10020                           
 10021                           ; BSR set to: 0
 10022  00302C  0EFE               	movlw	254
 10023  00302E  0100               	movlb	0	; () banked
 10024  003030  6F82               	movwf	??_read_sensors& (0+255),b
 10025  003032  0EFF               	movlw	255
 10026  003034  0100               	movlb	0	; () banked
 10027  003036  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10028  003038  0100               	movlb	0	; () banked
 10029  00303A  5186               	movf	read_sensors@i& (0+255),w,b
 10030  00303C  0100               	movlb	0	; () banked
 10031  00303E  6F84               	movwf	(??_read_sensors+2)& (0+255),b
 10032  003040  6B85               	clrf	(??_read_sensors+3)& (0+255),b
 10033  003042  90D8               	bcf	status,0,c
 10034  003044  0100               	movlb	0	; () banked
 10035  003046  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
 10036  003048  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
 10037  00304A  0100               	movlb	0	; () banked
 10038  00304C  5182               	movf	??_read_sensors& (0+255),w,b
 10039  00304E  0100               	movlb	0	; () banked
 10040  003050  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
 10041  003052  0100               	movlb	0	; () banked
 10042  003054  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10043  003056  0100               	movlb	0	; () banked
 10044  003058  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
 10045  00305A  0E48               	movlw	low _PROX1
 10046  00305C  0100               	movlb	0	; () banked
 10047  00305E  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
 10048  003060  6ED9               	movwf	fsr2l,c
 10049  003062  0E00               	movlw	high _PROX1
 10050  003064  0100               	movlb	0	; () banked
 10051  003066  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
 10052  003068  6EDA               	movwf	fsr2h,c
 10053  00306A  0100               	movlb	0	; () banked
 10054  00306C  5186               	movf	read_sensors@i& (0+255),w,b
 10055  00306E  0D02               	mullw	2
 10056  003070  0E48               	movlw	low _PROX1
 10057  003072  24F3               	addwf	prodl,w,c
 10058  003074  6EE1               	movwf	fsr1l,c
 10059  003076  0E00               	movlw	high _PROX1
 10060  003078  20F4               	addwfc	prodh,w,c
 10061  00307A  6EE2               	movwf	fsr1h,c
 10062  00307C  CFDE FFE6          	movff	postinc2,postinc1
 10063  003080  CFDD FFE5          	movff	postdec2,postdec1
 10064                           
 10065                           ;main.c: 490: PROX2[i]=PROX2[i-1];
 10066  003084  0EFE               	movlw	254
 10067  003086  0100               	movlb	0	; () banked
 10068  003088  6F82               	movwf	??_read_sensors& (0+255),b
 10069  00308A  0EFF               	movlw	255
 10070  00308C  0100               	movlb	0	; () banked
 10071  00308E  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10072  003090  0100               	movlb	0	; () banked
 10073  003092  5186               	movf	read_sensors@i& (0+255),w,b
 10074  003094  0100               	movlb	0	; () banked
 10075  003096  6F84               	movwf	(??_read_sensors+2)& (0+255),b
 10076  003098  6B85               	clrf	(??_read_sensors+3)& (0+255),b
 10077  00309A  90D8               	bcf	status,0,c
 10078  00309C  0100               	movlb	0	; () banked
 10079  00309E  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
 10080  0030A0  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
 10081  0030A2  0100               	movlb	0	; () banked
 10082  0030A4  5182               	movf	??_read_sensors& (0+255),w,b
 10083  0030A6  0100               	movlb	0	; () banked
 10084  0030A8  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
 10085  0030AA  0100               	movlb	0	; () banked
 10086  0030AC  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10087  0030AE  0100               	movlb	0	; () banked
 10088  0030B0  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
 10089  0030B2  0E52               	movlw	low _PROX2
 10090  0030B4  0100               	movlb	0	; () banked
 10091  0030B6  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
 10092  0030B8  6ED9               	movwf	fsr2l,c
 10093  0030BA  0E00               	movlw	high _PROX2
 10094  0030BC  0100               	movlb	0	; () banked
 10095  0030BE  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
 10096  0030C0  6EDA               	movwf	fsr2h,c
 10097  0030C2  0100               	movlb	0	; () banked
 10098  0030C4  5186               	movf	read_sensors@i& (0+255),w,b
 10099  0030C6  0D02               	mullw	2
 10100  0030C8  0E52               	movlw	low _PROX2
 10101  0030CA  24F3               	addwf	prodl,w,c
 10102  0030CC  6EE1               	movwf	fsr1l,c
 10103  0030CE  0E00               	movlw	high _PROX2
 10104  0030D0  20F4               	addwfc	prodh,w,c
 10105  0030D2  6EE2               	movwf	fsr1h,c
 10106  0030D4  CFDE FFE6          	movff	postinc2,postinc1
 10107  0030D8  CFDD FFE5          	movff	postdec2,postdec1
 10108                           
 10109                           ;main.c: 491: DIST1[i]=DIST1[i-1];
 10110  0030DC  0EFE               	movlw	254
 10111  0030DE  0100               	movlb	0	; () banked
 10112  0030E0  6F82               	movwf	??_read_sensors& (0+255),b
 10113  0030E2  0EFF               	movlw	255
 10114  0030E4  0100               	movlb	0	; () banked
 10115  0030E6  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10116  0030E8  0100               	movlb	0	; () banked
 10117  0030EA  5186               	movf	read_sensors@i& (0+255),w,b
 10118  0030EC  0100               	movlb	0	; () banked
 10119  0030EE  6F84               	movwf	(??_read_sensors+2)& (0+255),b
 10120  0030F0  6B85               	clrf	(??_read_sensors+3)& (0+255),b
 10121  0030F2  90D8               	bcf	status,0,c
 10122  0030F4  0100               	movlb	0	; () banked
 10123  0030F6  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
 10124  0030F8  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
 10125  0030FA  0100               	movlb	0	; () banked
 10126  0030FC  5182               	movf	??_read_sensors& (0+255),w,b
 10127  0030FE  0100               	movlb	0	; () banked
 10128  003100  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
 10129  003102  0100               	movlb	0	; () banked
 10130  003104  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10131  003106  0100               	movlb	0	; () banked
 10132  003108  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
 10133  00310A  0E2A               	movlw	low _DIST1
 10134  00310C  0100               	movlb	0	; () banked
 10135  00310E  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
 10136  003110  6ED9               	movwf	fsr2l,c
 10137  003112  0E01               	movlw	high _DIST1
 10138  003114  0100               	movlb	0	; () banked
 10139  003116  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
 10140  003118  6EDA               	movwf	fsr2h,c
 10141  00311A  0100               	movlb	0	; () banked
 10142  00311C  5186               	movf	read_sensors@i& (0+255),w,b
 10143  00311E  0D02               	mullw	2
 10144  003120  0E2A               	movlw	low _DIST1
 10145  003122  24F3               	addwf	prodl,w,c
 10146  003124  6EE1               	movwf	fsr1l,c
 10147  003126  0E01               	movlw	high _DIST1
 10148  003128  20F4               	addwfc	prodh,w,c
 10149  00312A  6EE2               	movwf	fsr1h,c
 10150  00312C  CFDE FFE6          	movff	postinc2,postinc1
 10151  003130  CFDD FFE5          	movff	postdec2,postdec1
 10152                           
 10153                           ;main.c: 492: IR1[i]=IR1[i-1];
 10154  003134  0EFE               	movlw	254
 10155  003136  0100               	movlb	0	; () banked
 10156  003138  6F82               	movwf	??_read_sensors& (0+255),b
 10157  00313A  0EFF               	movlw	255
 10158  00313C  0100               	movlb	0	; () banked
 10159  00313E  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10160  003140  0100               	movlb	0	; () banked
 10161  003142  5186               	movf	read_sensors@i& (0+255),w,b
 10162  003144  0100               	movlb	0	; () banked
 10163  003146  6F84               	movwf	(??_read_sensors+2)& (0+255),b
 10164  003148  6B85               	clrf	(??_read_sensors+3)& (0+255),b
 10165  00314A  90D8               	bcf	status,0,c
 10166  00314C  0100               	movlb	0	; () banked
 10167  00314E  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
 10168  003150  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
 10169  003152  0100               	movlb	0	; () banked
 10170  003154  5182               	movf	??_read_sensors& (0+255),w,b
 10171  003156  0100               	movlb	0	; () banked
 10172  003158  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
 10173  00315A  0100               	movlb	0	; () banked
 10174  00315C  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10175  00315E  0100               	movlb	0	; () banked
 10176  003160  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
 10177  003162  0E3E               	movlw	low _IR1
 10178  003164  0100               	movlb	0	; () banked
 10179  003166  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
 10180  003168  6ED9               	movwf	fsr2l,c
 10181  00316A  0E00               	movlw	high _IR1
 10182  00316C  0100               	movlb	0	; () banked
 10183  00316E  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
 10184  003170  6EDA               	movwf	fsr2h,c
 10185  003172  0100               	movlb	0	; () banked
 10186  003174  5186               	movf	read_sensors@i& (0+255),w,b
 10187  003176  0D02               	mullw	2
 10188  003178  0E3E               	movlw	low _IR1
 10189  00317A  24F3               	addwf	prodl,w,c
 10190  00317C  6EE1               	movwf	fsr1l,c
 10191  00317E  0E00               	movlw	high _IR1
 10192  003180  20F4               	addwfc	prodh,w,c
 10193  003182  6EE2               	movwf	fsr1h,c
 10194  003184  CFDE FFE6          	movff	postinc2,postinc1
 10195  003188  CFDD FFE5          	movff	postdec2,postdec1
 10196                           
 10197                           ;main.c: 493: IR2[i]=IR2[i-1];
 10198  00318C  0EFE               	movlw	254
 10199  00318E  0100               	movlb	0	; () banked
 10200  003190  6F82               	movwf	??_read_sensors& (0+255),b
 10201  003192  0EFF               	movlw	255
 10202  003194  0100               	movlb	0	; () banked
 10203  003196  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10204  003198  0100               	movlb	0	; () banked
 10205  00319A  5186               	movf	read_sensors@i& (0+255),w,b
 10206  00319C  0100               	movlb	0	; () banked
 10207  00319E  6F84               	movwf	(??_read_sensors+2)& (0+255),b
 10208  0031A0  6B85               	clrf	(??_read_sensors+3)& (0+255),b
 10209  0031A2  90D8               	bcf	status,0,c
 10210  0031A4  0100               	movlb	0	; () banked
 10211  0031A6  3784               	rlcf	(??_read_sensors+2)& (0+255),f,b
 10212  0031A8  3785               	rlcf	(??_read_sensors+3)& (0+255),f,b
 10213  0031AA  0100               	movlb	0	; () banked
 10214  0031AC  5182               	movf	??_read_sensors& (0+255),w,b
 10215  0031AE  0100               	movlb	0	; () banked
 10216  0031B0  2784               	addwf	(??_read_sensors+2)& (0+255),f,b
 10217  0031B2  0100               	movlb	0	; () banked
 10218  0031B4  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10219  0031B6  0100               	movlb	0	; () banked
 10220  0031B8  2385               	addwfc	(??_read_sensors+3)& (0+255),f,b
 10221  0031BA  0E34               	movlw	low _IR2
 10222  0031BC  0100               	movlb	0	; () banked
 10223  0031BE  2584               	addwf	(??_read_sensors+2)& (0+255),w,b
 10224  0031C0  6ED9               	movwf	fsr2l,c
 10225  0031C2  0E01               	movlw	high _IR2
 10226  0031C4  0100               	movlb	0	; () banked
 10227  0031C6  2185               	addwfc	(??_read_sensors+3)& (0+255),w,b
 10228  0031C8  6EDA               	movwf	fsr2h,c
 10229  0031CA  0100               	movlb	0	; () banked
 10230  0031CC  5186               	movf	read_sensors@i& (0+255),w,b
 10231  0031CE  0D02               	mullw	2
 10232  0031D0  0E34               	movlw	low _IR2
 10233  0031D2  24F3               	addwf	prodl,w,c
 10234  0031D4  6EE1               	movwf	fsr1l,c
 10235  0031D6  0E01               	movlw	high _IR2
 10236  0031D8  20F4               	addwfc	prodh,w,c
 10237  0031DA  6EE2               	movwf	fsr1h,c
 10238  0031DC  CFDE FFE6          	movff	postinc2,postinc1
 10239  0031E0  CFDD FFE5          	movff	postdec2,postdec1
 10240                           
 10241                           ; BSR set to: 0
 10242  0031E4  0100               	movlb	0	; () banked
 10243  0031E6  0786               	decf	read_sensors@i& (0+255),f,b
 10244  0031E8  D71C               	goto	L5
 10245  0031EA                     l5480:
 10246                           
 10247                           ; BSR set to: 0
 10248                           ;main.c: 494: }
 10249                           ;main.c: 499: readADC(DIST1_PIN);
 10250  0031EA  5067               	movf	_DIST1_PIN,w,c
 10251  0031EC  ECB1  F01E         	call	_readADC
 10252                           
 10253                           ;main.c: 500: DIST1[0]=16*16*ADRESH+ADRESL;
 10254  0031F0  50C4               	movf	4036,w,c	;volatile
 10255  0031F2  0100               	movlb	0	; () banked
 10256  0031F4  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10257  0031F6  6B82               	clrf	??_read_sensors& (0+255),b
 10258  0031F8  50C3               	movf	4035,w,c	;volatile
 10259  0031FA  0100               	movlb	0	; () banked
 10260  0031FC  2582               	addwf	??_read_sensors& (0+255),w,b
 10261  0031FE  0101               	movlb	1	; () banked
 10262  003200  6F2A               	movwf	_DIST1& (0+255),b
 10263  003202  0E00               	movlw	0
 10264  003204  0100               	movlb	0	; () banked
 10265  003206  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
 10266  003208  0101               	movlb	1	; () banked
 10267  00320A  6F2B               	movwf	(_DIST1+1)& (0+255),b
 10268                           
 10269                           ; BSR set to: 1
 10270                           ;main.c: 501: readADC(IR1_PIN);
 10271  00320C  5070               	movf	_IR1_PIN,w,c
 10272  00320E  ECB1  F01E         	call	_readADC
 10273                           
 10274                           ;main.c: 502: IR1[0]=16*16*ADRESH+ADRESL;
 10275  003212  50C4               	movf	4036,w,c	;volatile
 10276  003214  0100               	movlb	0	; () banked
 10277  003216  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10278  003218  6B82               	clrf	??_read_sensors& (0+255),b
 10279  00321A  50C3               	movf	4035,w,c	;volatile
 10280  00321C  0100               	movlb	0	; () banked
 10281  00321E  2582               	addwf	??_read_sensors& (0+255),w,b
 10282  003220  6E3E               	movwf	_IR1,c
 10283  003222  0E00               	movlw	0
 10284  003224  0100               	movlb	0	; () banked
 10285  003226  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
 10286  003228  6E3F               	movwf	_IR1+1,c
 10287                           
 10288                           ; BSR set to: 0
 10289                           ;main.c: 503: readADC(IR2_PIN);
 10290  00322A  5071               	movf	_IR2_PIN,w,c
 10291  00322C  ECB1  F01E         	call	_readADC
 10292                           
 10293                           ;main.c: 504: IR2[0]=16*16*ADRESH+ADRESL;
 10294  003230  50C4               	movf	4036,w,c	;volatile
 10295  003232  0100               	movlb	0	; () banked
 10296  003234  6F83               	movwf	(??_read_sensors+1)& (0+255),b
 10297  003236  6B82               	clrf	??_read_sensors& (0+255),b
 10298  003238  50C3               	movf	4035,w,c	;volatile
 10299  00323A  0100               	movlb	0	; () banked
 10300  00323C  2582               	addwf	??_read_sensors& (0+255),w,b
 10301  00323E  0101               	movlb	1	; () banked
 10302  003240  6F34               	movwf	_IR2& (0+255),b
 10303  003242  0E00               	movlw	0
 10304  003244  0100               	movlb	0	; () banked
 10305  003246  2183               	addwfc	(??_read_sensors+1)& (0+255),w,b
 10306  003248  0101               	movlb	1	; () banked
 10307  00324A  6F35               	movwf	(_IR2+1)& (0+255),b
 10308                           
 10309                           ; BSR set to: 1
 10310                           ;main.c: 506: PROX1[0]=(PORTB>>PROX1_PIN)&1;
 10311  00324C  C068  F082         	movff	_PROX1_PIN,??_read_sensors
 10312  003250  CF81 F083          	movff	3969,??_read_sensors+1	;volatile
 10313  003254  0100               	movlb	0	; () banked
 10314  003256  2B82               	incf	??_read_sensors& (0+255),f,b
 10315  003258  D003               	goto	u8134
 10316  00325A                     u8135:
 10317  00325A  0100               	movlb	0	; () banked
 10318  00325C  90D8               	bcf	status,0,c
 10319  00325E  3383               	rrcf	(??_read_sensors+1)& (0+255),f,b
 10320  003260                     u8134:
 10321  003260  0100               	movlb	0	; () banked
 10322  003262  2F82               	decfsz	??_read_sensors& (0+255),f,b
 10323  003264  D7FA               	goto	u8135
 10324  003266  0E01               	movlw	1
 10325  003268  0100               	movlb	0	; () banked
 10326  00326A  1783               	andwf	(??_read_sensors+1)& (0+255),f,b
 10327  00326C  0100               	movlb	0	; () banked
 10328  00326E  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10329  003270  6E48               	movwf	_PROX1,c
 10330  003272  6A49               	clrf	_PROX1+1,c
 10331                           
 10332                           ; BSR set to: 0
 10333                           ;main.c: 507: PROX2[0]=(PORTB>>PROX2_PIN)&1;
 10334  003274  C072  F082         	movff	_PROX2_PIN,??_read_sensors
 10335  003278  CF81 F083          	movff	3969,??_read_sensors+1	;volatile
 10336  00327C  0100               	movlb	0	; () banked
 10337  00327E  2B82               	incf	??_read_sensors& (0+255),f,b
 10338  003280  D003               	goto	u8144
 10339  003282                     u8145:
 10340  003282  0100               	movlb	0	; () banked
 10341  003284  90D8               	bcf	status,0,c
 10342  003286  3383               	rrcf	(??_read_sensors+1)& (0+255),f,b
 10343  003288                     u8144:
 10344  003288  0100               	movlb	0	; () banked
 10345  00328A  2F82               	decfsz	??_read_sensors& (0+255),f,b
 10346  00328C  D7FA               	goto	u8145
 10347  00328E  0E01               	movlw	1
 10348  003290  0100               	movlb	0	; () banked
 10349  003292  1783               	andwf	(??_read_sensors+1)& (0+255),f,b
 10350  003294  0100               	movlb	0	; () banked
 10351  003296  5183               	movf	(??_read_sensors+1)& (0+255),w,b
 10352  003298  6E52               	movwf	_PROX2,c
 10353  00329A  6A53               	clrf	_PROX2+1,c
 10354                           
 10355                           ; BSR set to: 0
 10356  00329C  0012               	return		;funcret
 10357  00329E                     __end_of_read_sensors:
 10358                           	opt stack 0
 10359                           tosu	equ	0xFFF
 10360                           tosh	equ	0xFFE
 10361                           tosl	equ	0xFFD
 10362                           pclath	equ	0xFFA
 10363                           tblptru	equ	0xFF8
 10364                           tblptrh	equ	0xFF7
 10365                           tblptrl	equ	0xFF6
 10366                           tablat	equ	0xFF5
 10367                           prodh	equ	0xFF4
 10368                           prodl	equ	0xFF3
 10369                           intcon	equ	0xFF2
 10370                           intcon2	equ	0xFF1
 10371                           intcon3	equ	0xFF0
 10372                           indf0	equ	0xFEF
 10373                           postinc0	equ	0xFEE
 10374                           fsr0h	equ	0xFEA
 10375                           fsr0l	equ	0xFE9
 10376                           wreg	equ	0xFE8
 10377                           indf1	equ	0xFE7
 10378                           postinc1	equ	0xFE6
 10379                           postdec1	equ	0xFE5
 10380                           fsr1h	equ	0xFE2
 10381                           fsr1l	equ	0xFE1
 10382                           indf2	equ	0xFDF
 10383                           postinc2	equ	0xFDE
 10384                           postdec2	equ	0xFDD
 10385                           fsr2h	equ	0xFDA
 10386                           fsr2l	equ	0xFD9
 10387                           status	equ	0xFD8
 10388                           
 10389 ;; *************** function _readADC *****************
 10390 ;; Defined at:
 10391 ;;		line 706 in file "main.c"
 10392 ;; Parameters:    Size  Location     Type
 10393 ;;  channel         1    wreg     unsigned char 
 10394 ;; Auto vars:     Size  Location     Type
 10395 ;;  channel         1    1[BANK0 ] unsigned char 
 10396 ;; Return value:  Size  Location     Type
 10397 ;;                  1    wreg      void 
 10398 ;; Registers used:
 10399 ;;		wreg, status,2, status,0, cstack
 10400 ;; Tracked objects:
 10401 ;;		On entry : 0/0
 10402 ;;		On exit  : 0/0
 10403 ;;		Unchanged: 0/0
 10404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10406 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10407 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10408 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10409 ;;Total ram usage:        2 bytes
 10410 ;; Hardware stack levels used:    1
 10411 ;; Hardware stack levels required when called:    5
 10412 ;; This function calls:
 10413 ;;		Nothing
 10414 ;; This function is called by:
 10415 ;;		_update_display
 10416 ;;		_read_sensors
 10417 ;; This function uses a non-reentrant model
 10418 ;;
 10419                           
 10420                           	psect	text26
 10421  003D62                     __ptext26:
 10422                           	opt stack 0
 10423  003D62                     _readADC:
 10424                           	opt stack 24
 10425                           
 10426                           ; BSR set to: 0
 10427                           ;incstack = 0
 10428                           ;readADC@channel stored from wreg
 10429  003D62  0100               	movlb	0	; () banked
 10430  003D64  6F81               	movwf	readADC@channel& (0+255),b
 10431                           
 10432                           ;main.c: 708: ADCON0 = ((channel <<2));
 10433  003D66  0100               	movlb	0	; () banked
 10434  003D68  4581               	rlncf	readADC@channel& (0+255),w,b
 10435  003D6A  46E8               	rlncf	wreg,f,c
 10436  003D6C  0BFC               	andlw	252
 10437  003D6E  6EC2               	movwf	4034,c	;volatile
 10438                           
 10439                           ; BSR set to: 0
 10440                           ;main.c: 709: ADON = 1;
 10441  003D70  80C2               	bsf	4034,0,c	;volatile
 10442                           
 10443                           ; BSR set to: 0
 10444                           ;main.c: 710: ADCON0bits.GO = 1;
 10445  003D72  82C2               	bsf	4034,1,c	;volatile
 10446                           
 10447                           ;main.c: 711: while(ADCON0bits.GO_NOT_DONE){_delay((unsigned long)((5)*(10000000/4000.0)
      +                          ));}
 10448  003D74  D009               	goto	l5140
 10449  003D76                     l5138:
 10450  003D76  0E11               	movlw	17
 10451  003D78  0100               	movlb	0	; () banked
 10452  003D7A  6F80               	movwf	??_readADC& (0+255),b
 10453  003D7C  0E3A               	movlw	58
 10454  003D7E                     u14757:
 10455  003D7E  2EE8               	decfsz	wreg,f,c
 10456  003D80  D7FE               	bra	u14757
 10457  003D82  2F80               	decfsz	??_readADC& (0+255),f,b
 10458  003D84  D7FC               	bra	u14757
 10459  003D86  F000               	nop	
 10460  003D88                     l5140:
 10461  003D88  A2C2               	btfss	4034,1,c	;volatile
 10462  003D8A  0012               	return	
 10463  003D8C  D7F4               	goto	l5138
 10464  003D8E                     __end_of_readADC:
 10465                           	opt stack 0
 10466                           tosu	equ	0xFFF
 10467                           tosh	equ	0xFFE
 10468                           tosl	equ	0xFFD
 10469                           pclath	equ	0xFFA
 10470                           tblptru	equ	0xFF8
 10471                           tblptrh	equ	0xFF7
 10472                           tblptrl	equ	0xFF6
 10473                           tablat	equ	0xFF5
 10474                           prodh	equ	0xFF4
 10475                           prodl	equ	0xFF3
 10476                           intcon	equ	0xFF2
 10477                           intcon2	equ	0xFF1
 10478                           intcon3	equ	0xFF0
 10479                           indf0	equ	0xFEF
 10480                           postinc0	equ	0xFEE
 10481                           fsr0h	equ	0xFEA
 10482                           fsr0l	equ	0xFE9
 10483                           wreg	equ	0xFE8
 10484                           indf1	equ	0xFE7
 10485                           postinc1	equ	0xFE6
 10486                           postdec1	equ	0xFE5
 10487                           fsr1h	equ	0xFE2
 10488                           fsr1l	equ	0xFE1
 10489                           indf2	equ	0xFDF
 10490                           postinc2	equ	0xFDE
 10491                           postdec2	equ	0xFDD
 10492                           fsr2h	equ	0xFDA
 10493                           fsr2l	equ	0xFD9
 10494                           status	equ	0xFD8
 10495                           
 10496 ;; *************** function _initLCD *****************
 10497 ;; Defined at:
 10498 ;;		line 14 in file "lcd.c"
 10499 ;; Parameters:    Size  Location     Type
 10500 ;;		None
 10501 ;; Auto vars:     Size  Location     Type
 10502 ;;		None
 10503 ;; Return value:  Size  Location     Type
 10504 ;;                  1    wreg      void 
 10505 ;; Registers used:
 10506 ;;		wreg, status,2, status,0, cstack
 10507 ;; Tracked objects:
 10508 ;;		On entry : 0/0
 10509 ;;		On exit  : 0/0
 10510 ;;		Unchanged: 0/0
 10511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10515 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10516 ;;Total ram usage:        1 bytes
 10517 ;; Hardware stack levels used:    1
 10518 ;; Hardware stack levels required when called:    7
 10519 ;; This function calls:
 10520 ;;		_lcdInst
 10521 ;; This function is called by:
 10522 ;;		_main
 10523 ;; This function uses a non-reentrant model
 10524 ;;
 10525                           
 10526                           	psect	text27
 10527  003C0A                     __ptext27:
 10528                           	opt stack 0
 10529  003C0A                     _initLCD:
 10530                           	opt stack 23
 10531                           
 10532                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
 10533                           
 10534                           ;incstack = 0
 10535  003C0A  0E31               	movlw	49
 10536  003C0C  0100               	movlb	0	; () banked
 10537  003C0E  6F83               	movwf	??_initLCD& (0+255),b
 10538  003C10  0EB2               	movlw	178
 10539  003C12                     u14767:
 10540  003C12  2EE8               	decfsz	wreg,f,c
 10541  003C14  D7FE               	bra	u14767
 10542  003C16  2F83               	decfsz	??_initLCD& (0+255),f,b
 10543  003C18  D7FC               	bra	u14767
 10544  003C1A  F000               	nop	
 10545                           
 10546                           ;lcd.c: 16: lcdInst(0b00110011);
 10547  003C1C  0E33               	movlw	51
 10548  003C1E  EC1E  F01F         	call	_lcdInst
 10549                           
 10550                           ;lcd.c: 17: lcdInst(0b00110010);
 10551  003C22  0E32               	movlw	50
 10552  003C24  EC1E  F01F         	call	_lcdInst
 10553                           
 10554                           ;lcd.c: 18: lcdInst(0b00101000);
 10555  003C28  0E28               	movlw	40
 10556  003C2A  EC1E  F01F         	call	_lcdInst
 10557                           
 10558                           ;lcd.c: 19: lcdInst(0b00001111);
 10559  003C2E  0E0F               	movlw	15
 10560  003C30  EC1E  F01F         	call	_lcdInst
 10561                           
 10562                           ;lcd.c: 20: lcdInst(0b00000110);
 10563  003C34  0E06               	movlw	6
 10564  003C36  EC1E  F01F         	call	_lcdInst
 10565                           
 10566                           ;lcd.c: 21: lcdInst(0b00000001);
 10567  003C3A  0E01               	movlw	1
 10568  003C3C  EC1E  F01F         	call	_lcdInst
 10569                           
 10570                           ;lcd.c: 22: _delay((unsigned long)((15)*(10000000/4000.0)));
 10571  003C40  0E31               	movlw	49
 10572  003C42  0100               	movlb	0	; () banked
 10573  003C44  6F83               	movwf	??_initLCD& (0+255),b
 10574  003C46  0EB2               	movlw	178
 10575  003C48                     u14777:
 10576  003C48  2EE8               	decfsz	wreg,f,c
 10577  003C4A  D7FE               	bra	u14777
 10578  003C4C  2F83               	decfsz	??_initLCD& (0+255),f,b
 10579  003C4E  D7FC               	bra	u14777
 10580  003C50  F000               	nop	
 10581  003C52  0012               	return		;funcret
 10582  003C54                     __end_of_initLCD:
 10583                           	opt stack 0
 10584                           tosu	equ	0xFFF
 10585                           tosh	equ	0xFFE
 10586                           tosl	equ	0xFFD
 10587                           pclath	equ	0xFFA
 10588                           tblptru	equ	0xFF8
 10589                           tblptrh	equ	0xFF7
 10590                           tblptrl	equ	0xFF6
 10591                           tablat	equ	0xFF5
 10592                           prodh	equ	0xFF4
 10593                           prodl	equ	0xFF3
 10594                           intcon	equ	0xFF2
 10595                           intcon2	equ	0xFF1
 10596                           intcon3	equ	0xFF0
 10597                           indf0	equ	0xFEF
 10598                           postinc0	equ	0xFEE
 10599                           fsr0h	equ	0xFEA
 10600                           fsr0l	equ	0xFE9
 10601                           wreg	equ	0xFE8
 10602                           indf1	equ	0xFE7
 10603                           postinc1	equ	0xFE6
 10604                           postdec1	equ	0xFE5
 10605                           fsr1h	equ	0xFE2
 10606                           fsr1l	equ	0xFE1
 10607                           indf2	equ	0xFDF
 10608                           postinc2	equ	0xFDE
 10609                           postdec2	equ	0xFDD
 10610                           fsr2h	equ	0xFDA
 10611                           fsr2l	equ	0xFD9
 10612                           status	equ	0xFD8
 10613                           
 10614 ;; *************** function _lcdInst *****************
 10615 ;; Defined at:
 10616 ;;		line 25 in file "lcd.c"
 10617 ;; Parameters:    Size  Location     Type
 10618 ;;  data            1    wreg     unsigned char 
 10619 ;; Auto vars:     Size  Location     Type
 10620 ;;  data            1    2[BANK0 ] unsigned char 
 10621 ;; Return value:  Size  Location     Type
 10622 ;;                  1    wreg      void 
 10623 ;; Registers used:
 10624 ;;		wreg, status,2, status,0, cstack
 10625 ;; Tracked objects:
 10626 ;;		On entry : 0/0
 10627 ;;		On exit  : 0/0
 10628 ;;		Unchanged: 0/0
 10629 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10630 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10631 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10632 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10633 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10634 ;;Total ram usage:        1 bytes
 10635 ;; Hardware stack levels used:    1
 10636 ;; Hardware stack levels required when called:    6
 10637 ;; This function calls:
 10638 ;;		_lcdNibble
 10639 ;; This function is called by:
 10640 ;;		_initLCD
 10641 ;;		_update_lcd
 10642 ;; This function uses a non-reentrant model
 10643 ;;
 10644                           
 10645                           	psect	text28
 10646  003E3C                     __ptext28:
 10647                           	opt stack 0
 10648  003E3C                     _lcdInst:
 10649                           	opt stack 23
 10650                           
 10651                           ;incstack = 0
 10652                           ;lcdInst@data stored from wreg
 10653  003E3C  0100               	movlb	0	; () banked
 10654  003E3E  6F82               	movwf	lcdInst@data& (0+255),b
 10655                           
 10656                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 10657  003E40  948C               	bcf	3980,2,c	;volatile
 10658                           
 10659                           ;lcd.c: 27: lcdNibble(data);
 10660  003E42  0100               	movlb	0	; () banked
 10661  003E44  5182               	movf	lcdInst@data& (0+255),w,b
 10662  003E46  ECA3  F01C         	call	_lcdNibble
 10663  003E4A  0012               	return		;funcret
 10664  003E4C                     __end_of_lcdInst:
 10665                           	opt stack 0
 10666                           tosu	equ	0xFFF
 10667                           tosh	equ	0xFFE
 10668                           tosl	equ	0xFFD
 10669                           pclath	equ	0xFFA
 10670                           tblptru	equ	0xFF8
 10671                           tblptrh	equ	0xFF7
 10672                           tblptrl	equ	0xFF6
 10673                           tablat	equ	0xFF5
 10674                           prodh	equ	0xFF4
 10675                           prodl	equ	0xFF3
 10676                           intcon	equ	0xFF2
 10677                           intcon2	equ	0xFF1
 10678                           intcon3	equ	0xFF0
 10679                           indf0	equ	0xFEF
 10680                           postinc0	equ	0xFEE
 10681                           fsr0h	equ	0xFEA
 10682                           fsr0l	equ	0xFE9
 10683                           wreg	equ	0xFE8
 10684                           indf1	equ	0xFE7
 10685                           postinc1	equ	0xFE6
 10686                           postdec1	equ	0xFE5
 10687                           fsr1h	equ	0xFE2
 10688                           fsr1l	equ	0xFE1
 10689                           indf2	equ	0xFDF
 10690                           postinc2	equ	0xFDE
 10691                           postdec2	equ	0xFDD
 10692                           fsr2h	equ	0xFDA
 10693                           fsr2l	equ	0xFD9
 10694                           status	equ	0xFD8
 10695                           
 10696 ;; *************** function _lcdNibble *****************
 10697 ;; Defined at:
 10698 ;;		line 35 in file "lcd.c"
 10699 ;; Parameters:    Size  Location     Type
 10700 ;;  data            1    wreg     unsigned char 
 10701 ;; Auto vars:     Size  Location     Type
 10702 ;;  data            1    1[BANK0 ] unsigned char 
 10703 ;;  temp            1    0[BANK0 ] unsigned char 
 10704 ;; Return value:  Size  Location     Type
 10705 ;;                  1    wreg      void 
 10706 ;; Registers used:
 10707 ;;		wreg, status,2, status,0
 10708 ;; Tracked objects:
 10709 ;;		On entry : 0/0
 10710 ;;		On exit  : 0/0
 10711 ;;		Unchanged: 0/0
 10712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10714 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10716 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10717 ;;Total ram usage:        2 bytes
 10718 ;; Hardware stack levels used:    1
 10719 ;; Hardware stack levels required when called:    5
 10720 ;; This function calls:
 10721 ;;		Nothing
 10722 ;; This function is called by:
 10723 ;;		_lcdInst
 10724 ;;		_putch
 10725 ;; This function uses a non-reentrant model
 10726 ;;
 10727                           
 10728                           	psect	text29
 10729  003946                     __ptext29:
 10730                           	opt stack 0
 10731  003946                     _lcdNibble:
 10732                           	opt stack 21
 10733                           
 10734                           ;incstack = 0
 10735                           ;lcdNibble@data stored from wreg
 10736  003946  0100               	movlb	0	; () banked
 10737  003948  6F81               	movwf	lcdNibble@data& (0+255),b
 10738                           
 10739                           ;lcd.c: 37: char temp = data & 0xF0;
 10740  00394A  0100               	movlb	0	; () banked
 10741  00394C  5181               	movf	lcdNibble@data& (0+255),w,b
 10742  00394E  0BF0               	andlw	240
 10743  003950  0100               	movlb	0	; () banked
 10744  003952  6F80               	movwf	lcdNibble@temp& (0+255),b
 10745                           
 10746                           ;lcd.c: 38: LATD = LATD & 0x0F;
 10747  003954  508C               	movf	3980,w,c	;volatile
 10748  003956  0B0F               	andlw	15
 10749  003958  6E8C               	movwf	3980,c	;volatile
 10750                           
 10751                           ;lcd.c: 39: LATD = temp | LATD;
 10752  00395A  0100               	movlb	0	; () banked
 10753  00395C  5180               	movf	lcdNibble@temp& (0+255),w,b
 10754  00395E  108C               	iorwf	3980,w,c	;volatile
 10755  003960  6E8C               	movwf	3980,c	;volatile
 10756                           
 10757                           ; BSR set to: 0
 10758                           ;lcd.c: 41: LATDbits.LATD3 = 0;
 10759  003962  968C               	bcf	3980,3,c	;volatile
 10760                           
 10761                           ; BSR set to: 0
 10762                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
 10763  003964  0E14               	movlw	20
 10764  003966                     u14787:
 10765  003966  2EE8               	decfsz	wreg,f,c
 10766  003968  D7FE               	bra	u14787
 10767  00396A  D000               	nop2	
 10768                           
 10769                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 10770  00396C  868C               	bsf	3980,3,c	;volatile
 10771                           
 10772                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
 10773  00396E  0E14               	movlw	20
 10774  003970                     u14797:
 10775  003970  2EE8               	decfsz	wreg,f,c
 10776  003972  D7FE               	bra	u14797
 10777  003974  D000               	nop2	
 10778                           
 10779                           ;lcd.c: 46: data = data << 4;
 10780  003976  0100               	movlb	0	; () banked
 10781  003978  3981               	swapf	lcdNibble@data& (0+255),w,b
 10782  00397A  0BF0               	andlw	240
 10783  00397C  0100               	movlb	0	; () banked
 10784  00397E  6F81               	movwf	lcdNibble@data& (0+255),b
 10785                           
 10786                           ;lcd.c: 48: temp = data & 0xF0;
 10787  003980  0100               	movlb	0	; () banked
 10788  003982  5181               	movf	lcdNibble@data& (0+255),w,b
 10789  003984  0BF0               	andlw	240
 10790  003986  0100               	movlb	0	; () banked
 10791  003988  6F80               	movwf	lcdNibble@temp& (0+255),b
 10792                           
 10793                           ;lcd.c: 49: LATD = LATD & 0x0F;
 10794  00398A  508C               	movf	3980,w,c	;volatile
 10795  00398C  0B0F               	andlw	15
 10796  00398E  6E8C               	movwf	3980,c	;volatile
 10797                           
 10798                           ;lcd.c: 50: LATD = temp | LATD;
 10799  003990  0100               	movlb	0	; () banked
 10800  003992  5180               	movf	lcdNibble@temp& (0+255),w,b
 10801  003994  108C               	iorwf	3980,w,c	;volatile
 10802  003996  6E8C               	movwf	3980,c	;volatile
 10803                           
 10804                           ; BSR set to: 0
 10805                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 10806  003998  968C               	bcf	3980,3,c	;volatile
 10807                           
 10808                           ; BSR set to: 0
 10809                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
 10810  00399A  0E14               	movlw	20
 10811  00399C                     u14807:
 10812  00399C  2EE8               	decfsz	wreg,f,c
 10813  00399E  D7FE               	bra	u14807
 10814  0039A0  D000               	nop2	
 10815                           
 10816                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 10817  0039A2  868C               	bsf	3980,3,c	;volatile
 10818                           
 10819                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
 10820  0039A4  0E14               	movlw	20
 10821  0039A6                     u14817:
 10822  0039A6  2EE8               	decfsz	wreg,f,c
 10823  0039A8  D7FE               	bra	u14817
 10824  0039AA  D000               	nop2	
 10825  0039AC  0012               	return		;funcret
 10826  0039AE                     __end_of_lcdNibble:
 10827                           	opt stack 0
 10828                           tosu	equ	0xFFF
 10829                           tosh	equ	0xFFE
 10830                           tosl	equ	0xFFD
 10831                           pclath	equ	0xFFA
 10832                           tblptru	equ	0xFF8
 10833                           tblptrh	equ	0xFF7
 10834                           tblptrl	equ	0xFF6
 10835                           tablat	equ	0xFF5
 10836                           prodh	equ	0xFF4
 10837                           prodl	equ	0xFF3
 10838                           intcon	equ	0xFF2
 10839                           intcon2	equ	0xFF1
 10840                           intcon3	equ	0xFF0
 10841                           indf0	equ	0xFEF
 10842                           postinc0	equ	0xFEE
 10843                           fsr0h	equ	0xFEA
 10844                           fsr0l	equ	0xFE9
 10845                           wreg	equ	0xFE8
 10846                           indf1	equ	0xFE7
 10847                           postinc1	equ	0xFE6
 10848                           postdec1	equ	0xFE5
 10849                           fsr1h	equ	0xFE2
 10850                           fsr1l	equ	0xFE1
 10851                           indf2	equ	0xFDF
 10852                           postinc2	equ	0xFDE
 10853                           postdec2	equ	0xFDD
 10854                           fsr2h	equ	0xFDA
 10855                           fsr2l	equ	0xFD9
 10856                           status	equ	0xFD8
 10857                           
 10858 ;; *************** function _I2C_Master_Init *****************
 10859 ;; Defined at:
 10860 ;;		line 13 in file "I2C.c"
 10861 ;; Parameters:    Size  Location     Type
 10862 ;;  c               4   13[BANK0 ] const unsigned long 
 10863 ;; Auto vars:     Size  Location     Type
 10864 ;;		None
 10865 ;; Return value:  Size  Location     Type
 10866 ;;                  1    wreg      void 
 10867 ;; Registers used:
 10868 ;;		wreg, status,2, status,0, cstack
 10869 ;; Tracked objects:
 10870 ;;		On entry : 0/0
 10871 ;;		On exit  : 0/0
 10872 ;;		Unchanged: 0/0
 10873 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10874 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10875 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10876 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10877 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10878 ;;Total ram usage:        8 bytes
 10879 ;; Hardware stack levels used:    1
 10880 ;; Hardware stack levels required when called:    6
 10881 ;; This function calls:
 10882 ;;		___lldiv
 10883 ;; This function is called by:
 10884 ;;		_main
 10885 ;; This function uses a non-reentrant model
 10886 ;;
 10887                           
 10888                           	psect	text30
 10889  003A10                     __ptext30:
 10890                           	opt stack 0
 10891  003A10                     _I2C_Master_Init:
 10892                           	opt stack 24
 10893                           
 10894                           ;I2C.c: 16: SSPSTAT = 0b00000000;
 10895                           
 10896                           ;incstack = 0
 10897  003A10  0E00               	movlw	0
 10898  003A12  6EC7               	movwf	4039,c	;volatile
 10899                           
 10900                           ;I2C.c: 17: SSPCON1 = 0b00101000;
 10901  003A14  0E28               	movlw	40
 10902  003A16  6EC6               	movwf	4038,c	;volatile
 10903                           
 10904                           ;I2C.c: 18: SSPCON2 = 0b00000000;
 10905  003A18  0E00               	movlw	0
 10906  003A1A  6EC5               	movwf	4037,c	;volatile
 10907                           
 10908                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
 10909  003A1C  0E80               	movlw	128
 10910  003A1E  0100               	movlb	0	; () banked
 10911  003A20  6F80               	movwf	___lldiv@dividend& (0+255),b
 10912  003A22  0E96               	movlw	150
 10913  003A24  6F81               	movwf	(___lldiv@dividend+1)& (0+255),b
 10914  003A26  0E98               	movlw	152
 10915  003A28  6F82               	movwf	(___lldiv@dividend+2)& (0+255),b
 10916  003A2A  0E00               	movlw	0
 10917  003A2C  6F83               	movwf	(___lldiv@dividend+3)& (0+255),b
 10918  003A2E  C08D  F091         	movff	I2C_Master_Init@c,??_I2C_Master_Init
 10919  003A32  C08E  F092         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
 10920  003A36  C08F  F093         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
 10921  003A3A  C090  F094         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
 10922  003A3E  0E02               	movlw	2
 10923  003A40                     u8075:
 10924  003A40  90D8               	bcf	status,0,c
 10925  003A42  0100               	movlb	0	; () banked
 10926  003A44  3791               	rlcf	??_I2C_Master_Init& (0+255),f,b
 10927  003A46  3792               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
 10928  003A48  3793               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
 10929  003A4A  3794               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
 10930  003A4C  2EE8               	decfsz	wreg,f,c
 10931  003A4E  D7F8               	goto	u8075
 10932  003A50  C091  F084         	movff	??_I2C_Master_Init,___lldiv@divisor
 10933  003A54  C092  F085         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
 10934  003A58  C093  F086         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
 10935  003A5C  C094  F087         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
 10936  003A60  ECE4  F01A         	call	___lldiv	;wreg free
 10937  003A64  0100               	movlb	0	; () banked
 10938  003A66  0580               	decf	?___lldiv& (0+255),w,b
 10939  003A68  6EC8               	movwf	4040,c	;volatile
 10940                           
 10941                           ; BSR set to: 0
 10942                           ;I2C.c: 20: TRISC3 = 1;
 10943  003A6A  8694               	bsf	3988,3,c	;volatile
 10944                           
 10945                           ; BSR set to: 0
 10946                           ;I2C.c: 21: TRISC4 = 1;
 10947  003A6C  8894               	bsf	3988,4,c	;volatile
 10948                           
 10949                           ; BSR set to: 0
 10950  003A6E  0012               	return		;funcret
 10951  003A70                     __end_of_I2C_Master_Init:
 10952                           	opt stack 0
 10953                           tosu	equ	0xFFF
 10954                           tosh	equ	0xFFE
 10955                           tosl	equ	0xFFD
 10956                           pclath	equ	0xFFA
 10957                           tblptru	equ	0xFF8
 10958                           tblptrh	equ	0xFF7
 10959                           tblptrl	equ	0xFF6
 10960                           tablat	equ	0xFF5
 10961                           prodh	equ	0xFF4
 10962                           prodl	equ	0xFF3
 10963                           intcon	equ	0xFF2
 10964                           intcon2	equ	0xFF1
 10965                           intcon3	equ	0xFF0
 10966                           indf0	equ	0xFEF
 10967                           postinc0	equ	0xFEE
 10968                           fsr0h	equ	0xFEA
 10969                           fsr0l	equ	0xFE9
 10970                           wreg	equ	0xFE8
 10971                           indf1	equ	0xFE7
 10972                           postinc1	equ	0xFE6
 10973                           postdec1	equ	0xFE5
 10974                           fsr1h	equ	0xFE2
 10975                           fsr1l	equ	0xFE1
 10976                           indf2	equ	0xFDF
 10977                           postinc2	equ	0xFDE
 10978                           postdec2	equ	0xFDD
 10979                           fsr2h	equ	0xFDA
 10980                           fsr2l	equ	0xFD9
 10981                           status	equ	0xFD8
 10982                           
 10983 ;; *************** function ___lldiv *****************
 10984 ;; Defined at:
 10985 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
 10986 ;; Parameters:    Size  Location     Type
 10987 ;;  dividend        4    0[BANK0 ] unsigned long 
 10988 ;;  divisor         4    4[BANK0 ] unsigned long 
 10989 ;; Auto vars:     Size  Location     Type
 10990 ;;  quotient        4    8[BANK0 ] unsigned long 
 10991 ;;  counter         1   12[BANK0 ] unsigned char 
 10992 ;; Return value:  Size  Location     Type
 10993 ;;                  4    0[BANK0 ] unsigned long 
 10994 ;; Registers used:
 10995 ;;		wreg, status,2, status,0
 10996 ;; Tracked objects:
 10997 ;;		On entry : 0/0
 10998 ;;		On exit  : 0/0
 10999 ;;		Unchanged: 0/0
 11000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11001 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11002 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11004 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11005 ;;Total ram usage:       13 bytes
 11006 ;; Hardware stack levels used:    1
 11007 ;; Hardware stack levels required when called:    5
 11008 ;; This function calls:
 11009 ;;		Nothing
 11010 ;; This function is called by:
 11011 ;;		_I2C_Master_Init
 11012 ;; This function uses a non-reentrant model
 11013 ;;
 11014                           
 11015                           	psect	text31
 11016  0035C8                     __ptext31:
 11017                           	opt stack 0
 11018  0035C8                     ___lldiv:
 11019                           	opt stack 24
 11020                           
 11021                           ; BSR set to: 0
 11022                           ;incstack = 0
 11023  0035C8  0E00               	movlw	0
 11024  0035CA  0100               	movlb	0	; () banked
 11025  0035CC  6F88               	movwf	___lldiv@quotient& (0+255),b
 11026  0035CE  0E00               	movlw	0
 11027  0035D0  6F89               	movwf	(___lldiv@quotient+1)& (0+255),b
 11028  0035D2  0E00               	movlw	0
 11029  0035D4  6F8A               	movwf	(___lldiv@quotient+2)& (0+255),b
 11030  0035D6  0E00               	movlw	0
 11031  0035D8  6F8B               	movwf	(___lldiv@quotient+3)& (0+255),b
 11032                           
 11033                           ; BSR set to: 0
 11034  0035DA  0100               	movlb	0	; () banked
 11035  0035DC  5184               	movf	___lldiv@divisor& (0+255),w,b
 11036  0035DE  0100               	movlb	0	; () banked
 11037  0035E0  1185               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 11038  0035E2  0100               	movlb	0	; () banked
 11039  0035E4  1186               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 11040  0035E6  0100               	movlb	0	; () banked
 11041  0035E8  1187               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 11042  0035EA  B4D8               	btfsc	status,2,c
 11043  0035EC  D042               	goto	l954
 11044                           
 11045                           ; BSR set to: 0
 11046  0035EE  0E01               	movlw	1
 11047  0035F0  0100               	movlb	0	; () banked
 11048  0035F2  6F8C               	movwf	___lldiv@counter& (0+255),b
 11049  0035F4  D008               	goto	l5194
 11050  0035F6                     l5192:
 11051                           
 11052                           ; BSR set to: 0
 11053  0035F6  0100               	movlb	0	; () banked
 11054  0035F8  90D8               	bcf	status,0,c
 11055  0035FA  3784               	rlcf	___lldiv@divisor& (0+255),f,b
 11056  0035FC  3785               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 11057  0035FE  3786               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 11058  003600  3787               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 11059  003602  0100               	movlb	0	; () banked
 11060  003604  2B8C               	incf	___lldiv@counter& (0+255),f,b
 11061  003606                     l5194:
 11062                           
 11063                           ; BSR set to: 0
 11064  003606  0100               	movlb	0	; () banked
 11065  003608  AF87               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 11066  00360A  D7F5               	goto	l5192
 11067  00360C                     l5196:
 11068                           
 11069                           ; BSR set to: 0
 11070  00360C  0100               	movlb	0	; () banked
 11071  00360E  90D8               	bcf	status,0,c
 11072  003610  3788               	rlcf	___lldiv@quotient& (0+255),f,b
 11073  003612  3789               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 11074  003614  378A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 11075  003616  378B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 11076                           
 11077                           ; BSR set to: 0
 11078  003618  0100               	movlb	0	; () banked
 11079  00361A  5184               	movf	___lldiv@divisor& (0+255),w,b
 11080  00361C  0100               	movlb	0	; () banked
 11081  00361E  5D80               	subwf	___lldiv@dividend& (0+255),w,b
 11082  003620  0100               	movlb	0	; () banked
 11083  003622  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11084  003624  0100               	movlb	0	; () banked
 11085  003626  5981               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 11086  003628  0100               	movlb	0	; () banked
 11087  00362A  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11088  00362C  0100               	movlb	0	; () banked
 11089  00362E  5982               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 11090  003630  0100               	movlb	0	; () banked
 11091  003632  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11092  003634  0100               	movlb	0	; () banked
 11093  003636  5983               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 11094  003638  A0D8               	btfss	status,0,c
 11095  00363A  D012               	goto	l5204
 11096                           
 11097                           ; BSR set to: 0
 11098  00363C  0100               	movlb	0	; () banked
 11099  00363E  5184               	movf	___lldiv@divisor& (0+255),w,b
 11100  003640  0100               	movlb	0	; () banked
 11101  003642  5F80               	subwf	___lldiv@dividend& (0+255),f,b
 11102  003644  0100               	movlb	0	; () banked
 11103  003646  5185               	movf	(___lldiv@divisor+1)& (0+255),w,b
 11104  003648  0100               	movlb	0	; () banked
 11105  00364A  5B81               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 11106  00364C  0100               	movlb	0	; () banked
 11107  00364E  5186               	movf	(___lldiv@divisor+2)& (0+255),w,b
 11108  003650  0100               	movlb	0	; () banked
 11109  003652  5B82               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 11110  003654  0100               	movlb	0	; () banked
 11111  003656  5187               	movf	(___lldiv@divisor+3)& (0+255),w,b
 11112  003658  0100               	movlb	0	; () banked
 11113  00365A  5B83               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 11114                           
 11115                           ; BSR set to: 0
 11116  00365C  0100               	movlb	0	; () banked
 11117  00365E  8188               	bsf	___lldiv@quotient& (0+255),0,b
 11118  003660                     l5204:
 11119                           
 11120                           ; BSR set to: 0
 11121  003660  0100               	movlb	0	; () banked
 11122  003662  90D8               	bcf	status,0,c
 11123  003664  3387               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 11124  003666  3386               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 11125  003668  3385               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 11126  00366A  3384               	rrcf	___lldiv@divisor& (0+255),f,b
 11127                           
 11128                           ; BSR set to: 0
 11129  00366C  0100               	movlb	0	; () banked
 11130  00366E  2F8C               	decfsz	___lldiv@counter& (0+255),f,b
 11131  003670  D7CD               	goto	l5196
 11132  003672                     l954:
 11133                           
 11134                           ; BSR set to: 0
 11135  003672  C088  F080         	movff	___lldiv@quotient,?___lldiv
 11136  003676  C089  F081         	movff	___lldiv@quotient+1,?___lldiv+1
 11137  00367A  C08A  F082         	movff	___lldiv@quotient+2,?___lldiv+2
 11138  00367E  C08B  F083         	movff	___lldiv@quotient+3,?___lldiv+3
 11139                           
 11140                           ; BSR set to: 0
 11141  003682  0012               	return		;funcret
 11142  003684                     __end_of___lldiv:
 11143                           	opt stack 0
 11144                           tosu	equ	0xFFF
 11145                           tosh	equ	0xFFE
 11146                           tosl	equ	0xFFD
 11147                           pclath	equ	0xFFA
 11148                           tblptru	equ	0xFF8
 11149                           tblptrh	equ	0xFF7
 11150                           tblptrl	equ	0xFF6
 11151                           tablat	equ	0xFF5
 11152                           prodh	equ	0xFF4
 11153                           prodl	equ	0xFF3
 11154                           intcon	equ	0xFF2
 11155                           intcon2	equ	0xFF1
 11156                           intcon3	equ	0xFF0
 11157                           indf0	equ	0xFEF
 11158                           postinc0	equ	0xFEE
 11159                           fsr0h	equ	0xFEA
 11160                           fsr0l	equ	0xFE9
 11161                           wreg	equ	0xFE8
 11162                           indf1	equ	0xFE7
 11163                           postinc1	equ	0xFE6
 11164                           postdec1	equ	0xFE5
 11165                           fsr1h	equ	0xFE2
 11166                           fsr1l	equ	0xFE1
 11167                           indf2	equ	0xFDF
 11168                           postinc2	equ	0xFDE
 11169                           postdec2	equ	0xFDD
 11170                           fsr2h	equ	0xFDA
 11171                           fsr2l	equ	0xFD9
 11172                           status	equ	0xFD8
 11173                           
 11174 ;; *************** function _keypressed *****************
 11175 ;; Defined at:
 11176 ;;		line 365 in file "main.c"
 11177 ;; Parameters:    Size  Location     Type
 11178 ;;		None
 11179 ;; Auto vars:     Size  Location     Type
 11180 ;;  i               2   58[COMRAM] int 
 11181 ;;  keypress        1   60[COMRAM] unsigned char 
 11182 ;; Return value:  Size  Location     Type
 11183 ;;                  1    wreg      void 
 11184 ;; Registers used:
 11185 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 11186 ;; Tracked objects:
 11187 ;;		On entry : 0/0
 11188 ;;		On exit  : 0/0
 11189 ;;		Unchanged: 0/0
 11190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11192 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11193 ;;      Temps:         16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11194 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11195 ;;Total ram usage:       19 bytes
 11196 ;; Hardware stack levels used:    1
 11197 ;; Hardware stack levels required when called:    4
 11198 ;; This function calls:
 11199 ;;		i2___awmod
 11200 ;;		i2_lcdInst
 11201 ;;		i2_printf
 11202 ;; This function is called by:
 11203 ;;		Interrupt level 2
 11204 ;; This function uses a non-reentrant model
 11205 ;;
 11206                           
 11207                           	psect	intcode
 11208  000008                     __pintcode:
 11209                           	opt stack 0
 11210  000008                     _keypressed:
 11211                           	opt stack 20
 11212                           
 11213                           ; BSR set to: 0
 11214                           ;incstack = 0
 11215  000008  827B               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11216  00000A  EDF7  F008         	call	int_func,f	;refresh shadow registers
 11217                           tosu	equ	0xFFF
 11218                           tosh	equ	0xFFE
 11219                           tosl	equ	0xFFD
 11220                           pclath	equ	0xFFA
 11221                           tblptru	equ	0xFF8
 11222                           tblptrh	equ	0xFF7
 11223                           tblptrl	equ	0xFF6
 11224                           tablat	equ	0xFF5
 11225                           prodh	equ	0xFF4
 11226                           prodl	equ	0xFF3
 11227                           intcon	equ	0xFF2
 11228                           intcon2	equ	0xFF1
 11229                           intcon3	equ	0xFF0
 11230                           indf0	equ	0xFEF
 11231                           postinc0	equ	0xFEE
 11232                           fsr0h	equ	0xFEA
 11233                           fsr0l	equ	0xFE9
 11234                           wreg	equ	0xFE8
 11235                           indf1	equ	0xFE7
 11236                           postinc1	equ	0xFE6
 11237                           postdec1	equ	0xFE5
 11238                           fsr1h	equ	0xFE2
 11239                           fsr1l	equ	0xFE1
 11240                           indf2	equ	0xFDF
 11241                           postinc2	equ	0xFDE
 11242                           postdec2	equ	0xFDD
 11243                           fsr2h	equ	0xFDA
 11244                           fsr2l	equ	0xFD9
 11245                           status	equ	0xFD8
 11246                           
 11247                           	psect	intcode_body
 11248  0011EE                     __pintcode_body:
 11249                           	opt stack 20
 11250  0011EE                     int_func:
 11251                           	opt stack 20
 11252  0011EE  0006               	pop		; remove dummy address from shadow register refresh
 11253  0011F0  CFFA F02D          	movff	pclath,??_keypressed+2
 11254  0011F4  CFFB F02E          	movff	pclatu,??_keypressed+3
 11255  0011F8  CFE9 F02F          	movff	fsr0l,??_keypressed+4
 11256  0011FC  CFEA F030          	movff	fsr0h,??_keypressed+5
 11257  001200  CFE1 F031          	movff	fsr1l,??_keypressed+6
 11258  001204  CFE2 F032          	movff	fsr1h,??_keypressed+7
 11259  001208  CFD9 F033          	movff	fsr2l,??_keypressed+8
 11260  00120C  CFDA F034          	movff	fsr2h,??_keypressed+9
 11261  001210  CFF3 F035          	movff	prodl,??_keypressed+10
 11262  001214  CFF4 F036          	movff	prodh,??_keypressed+11
 11263  001218  CFF6 F037          	movff	tblptrl,??_keypressed+12
 11264  00121C  CFF7 F038          	movff	tblptrh,??_keypressed+13
 11265  001220  CFF8 F039          	movff	tblptru,??_keypressed+14
 11266  001224  CFF5 F03A          	movff	tablat,??_keypressed+15
 11267                           
 11268                           ;main.c: 367: if(INT1IF){
 11269  001228  A0F0               	btfss	intcon3,0,c	;volatile
 11270  00122A  D2E7               	goto	i2l413
 11271                           
 11272                           ;main.c: 368: int i;
 11273                           ;main.c: 369: unsigned char keypress = (PORTB & 0xF0) >> 4;
 11274  00122C  3881               	swapf	3969,w,c	;volatile
 11275  00122E  0B0F               	andlw	15
 11276  001230  0B0F               	andlw	15
 11277  001232  6E3D               	movwf	keypressed@keypress,c
 11278                           
 11279                           ;main.c: 370: switch(state)
 11280  001234  D2CC               	goto	i2l8706
 11281  001236                     i2l8540:
 11282                           
 11283                           ;main.c: 372: for (i=0;i<7;i++)
 11284  001236  0E00               	movlw	0
 11285  001238  6E3C               	movwf	keypressed@i+1,c
 11286  00123A  0E00               	movlw	0
 11287  00123C  6E3B               	movwf	keypressed@i,c
 11288  00123E                     i2l8542:
 11289  00123E  BE3C               	btfsc	keypressed@i+1,7,c
 11290  001240  D006               	goto	i2l8546
 11291  001242  503C               	movf	keypressed@i+1,w,c
 11292  001244  E11D               	bnz	i2l8552
 11293  001246  0E07               	movlw	7
 11294  001248  5C3B               	subwf	keypressed@i,w,c
 11295  00124A  B0D8               	btfsc	status,0,c
 11296  00124C  D019               	goto	i2l8552
 11297  00124E                     i2l8546:
 11298                           
 11299                           ;main.c: 373: startTime[i]=time_i[i];
 11300  00124E  90D8               	bcf	status,0,c
 11301  001250  343B               	rlcf	keypressed@i,w,c
 11302  001252  6ED9               	movwf	fsr2l,c
 11303  001254  343C               	rlcf	keypressed@i+1,w,c
 11304  001256  6EDA               	movwf	fsr2h,c
 11305  001258  0E1C               	movlw	low _time_i
 11306  00125A  26D9               	addwf	fsr2l,f,c
 11307  00125C  0E01               	movlw	high _time_i
 11308  00125E  22DA               	addwfc	fsr2h,f,c
 11309  001260  90D8               	bcf	status,0,c
 11310  001262  343B               	rlcf	keypressed@i,w,c
 11311  001264  6EE1               	movwf	fsr1l,c
 11312  001266  343C               	rlcf	keypressed@i+1,w,c
 11313  001268  6EE2               	movwf	fsr1h,c
 11314  00126A  0E0E               	movlw	low _startTime
 11315  00126C  26E1               	addwf	fsr1l,f,c
 11316  00126E  0E01               	movlw	high _startTime
 11317  001270  22E2               	addwfc	fsr1h,f,c
 11318  001272  CFDE FFE6          	movff	postinc2,postinc1
 11319  001276  CFDD FFE5          	movff	postdec2,postdec1
 11320  00127A  4A3B               	infsnz	keypressed@i,f,c
 11321  00127C  2A3C               	incf	keypressed@i+1,f,c
 11322  00127E  D7DF               	goto	i2l8542
 11323  001280                     i2l8552:
 11324                           
 11325                           ;main.c: 374: if (keys[keypress]=='B'&&menuIndex<menuSize)
 11326  001280  503D               	movf	keypressed@keypress,w,c
 11327  001282  0D01               	mullw	1
 11328  001284  0E37               	movlw	low _keys
 11329  001286  24F3               	addwf	prodl,w,c
 11330  001288  6EF6               	movwf	tblptrl,c
 11331  00128A  0EFE               	movlw	high _keys
 11332  00128C  20F4               	addwfc	prodh,w,c
 11333  00128E  6EF7               	movwf	tblptrh,c
 11334  001290                     	if	1	;There are 3 active tblptr bytes
 11335  001290  6AF8               	clrf	tblptru,c
 11336  001292  0E00               	movlw	low (__mediumconst shr (0+16))
 11337  001294  22F8               	addwfc	tblptru,f,c
 11338  001296                     	endif
 11339  001296  0008               	tblrd		*
 11340  001298  50F5               	movf	tablat,w,c
 11341  00129A  0A42               	xorlw	66
 11342  00129C  A4D8               	btfss	status,2,c
 11343  00129E  D012               	goto	i2l8558
 11344  0012A0  0100               	movlb	0	; () banked
 11345  0012A2  51EC               	movf	_menuSize& (0+255),w,b
 11346  0012A4  0100               	movlb	0	; () banked
 11347  0012A6  5DEA               	subwf	_menuIndex& (0+255),w,b
 11348  0012A8  0100               	movlb	0	; () banked
 11349  0012AA  51EB               	movf	(_menuIndex+1)& (0+255),w,b
 11350  0012AC  0A80               	xorlw	128
 11351  0012AE  6E2B               	movwf	??_keypressed& (0+255),c
 11352  0012B0  0100               	movlb	0	; () banked
 11353  0012B2  51ED               	movf	(_menuSize+1)& (0+255),w,b
 11354  0012B4  0A80               	xorlw	128
 11355  0012B6  582B               	subwfb	??_keypressed& (0+255),w,c
 11356  0012B8  B0D8               	btfsc	status,0,c
 11357  0012BA  D004               	goto	i2l8558
 11358                           
 11359                           ; BSR set to: 0
 11360                           ;main.c: 375: menuIndex++;
 11361  0012BC  0100               	movlb	0	; () banked
 11362  0012BE  4BEA               	infsnz	_menuIndex& (0+255),f,b
 11363  0012C0  2BEB               	incf	(_menuIndex+1)& (0+255),f,b
 11364  0012C2  D29A               	goto	i2l372
 11365  0012C4                     i2l8558:
 11366                           
 11367                           ;main.c: 376: else if (keys[keypress]=='A'&&menuIndex>1)
 11368  0012C4  503D               	movf	keypressed@keypress,w,c
 11369  0012C6  0D01               	mullw	1
 11370  0012C8  0E37               	movlw	low _keys
 11371  0012CA  24F3               	addwf	prodl,w,c
 11372  0012CC  6EF6               	movwf	tblptrl,c
 11373  0012CE  0EFE               	movlw	high _keys
 11374  0012D0  20F4               	addwfc	prodh,w,c
 11375  0012D2  6EF7               	movwf	tblptrh,c
 11376  0012D4                     	if	1	;There are 3 active tblptr bytes
 11377  0012D4  6AF8               	clrf	tblptru,c
 11378  0012D6  0E00               	movlw	low (__mediumconst shr (0+16))
 11379  0012D8  22F8               	addwfc	tblptru,f,c
 11380  0012DA                     	endif
 11381  0012DA  0008               	tblrd		*
 11382  0012DC  50F5               	movf	tablat,w,c
 11383  0012DE  0A41               	xorlw	65
 11384  0012E0  A4D8               	btfss	status,2,c
 11385  0012E2  D010               	goto	i2l8564
 11386  0012E4  0100               	movlb	0	; () banked
 11387  0012E6  BFEB               	btfsc	(_menuIndex+1)& (0+255),7,b
 11388  0012E8  D00D               	goto	i2l8564
 11389  0012EA  0100               	movlb	0	; () banked
 11390  0012EC  51EB               	movf	(_menuIndex+1)& (0+255),w,b
 11391  0012EE  E105               	bnz	i2u1442_40
 11392  0012F0  0E02               	movlw	2
 11393  0012F2  0100               	movlb	0	; () banked
 11394  0012F4  5DEA               	subwf	_menuIndex& (0+255),w,b
 11395  0012F6  A0D8               	btfss	status,0,c
 11396  0012F8  D005               	goto	i2l8564
 11397  0012FA                     i2u1442_40:
 11398                           
 11399                           ; BSR set to: 0
 11400                           ;main.c: 377: menuIndex--;
 11401  0012FA  0100               	movlb	0	; () banked
 11402  0012FC  07EA               	decf	_menuIndex& (0+255),f,b
 11403  0012FE  A0D8               	btfss	status,0,c
 11404  001300  07EB               	decf	(_menuIndex+1)& (0+255),f,b
 11405  001302  D27A               	goto	i2l372
 11406  001304                     i2l8564:
 11407                           
 11408                           ;main.c: 378: else if (keys[keypress]=='C'){
 11409  001304  503D               	movf	keypressed@keypress,w,c
 11410  001306  0D01               	mullw	1
 11411  001308  0E37               	movlw	low _keys
 11412  00130A  24F3               	addwf	prodl,w,c
 11413  00130C  6EF6               	movwf	tblptrl,c
 11414  00130E  0EFE               	movlw	high _keys
 11415  001310  20F4               	addwfc	prodh,w,c
 11416  001312  6EF7               	movwf	tblptrh,c
 11417  001314                     	if	1	;There are 3 active tblptr bytes
 11418  001314  6AF8               	clrf	tblptru,c
 11419  001316  0E00               	movlw	low (__mediumconst shr (0+16))
 11420  001318  22F8               	addwfc	tblptru,f,c
 11421  00131A                     	endif
 11422  00131A  0008               	tblrd		*
 11423  00131C  50F5               	movf	tablat,w,c
 11424  00131E  0A43               	xorlw	67
 11425  001320  B4D8               	btfsc	status,2,c
 11426  001322  D01D               	goto	i2l8584
 11427  001324  D269               	goto	i2l372
 11428  001326                     i2l8568:
 11429  001326  0E73               	movlw	115
 11430  001328  D248               	goto	L10
 11431  00132A                     i2l8570:
 11432  00132A  0E6C               	movlw	108
 11433  00132C  D246               	goto	L10
 11434  00132E                     i2l8572:
 11435  00132E  0E63               	movlw	99
 11436  001330  D244               	goto	L10
 11437  001332                     i2l8574:
 11438                           
 11439                           ;main.c: 387: lcdInst(0b10000000);;
 11440  001332  0E80               	movlw	128
 11441  001334  EC32  F01F         	call	i2_lcdInst
 11442                           
 11443                           ;main.c: 388: printf("invalid");
 11444  001338  0EDD               	movlw	low STR_25
 11445  00133A  6E23               	movwf	i2printf@f,c
 11446  00133C  0EFF               	movlw	high STR_25
 11447  00133E  6E24               	movwf	i2printf@f+1,c
 11448  001340  EC66  F01E         	call	i2_printf	;wreg free
 11449                           
 11450                           ;main.c: 389: lcdInst(0b11000000);;
 11451  001344  0EC0               	movlw	192
 11452  001346  EC32  F01F         	call	i2_lcdInst
 11453                           
 11454                           ;main.c: 390: printf("menu selection");
 11455  00134A  0E9A               	movlw	low STR_26
 11456  00134C  6E23               	movwf	i2printf@f,c
 11457  00134E  0EFF               	movlw	high STR_26
 11458  001350  6E24               	movwf	i2printf@f+1,c
 11459  001352  EC66  F01E         	call	i2_printf	;wreg free
 11460                           
 11461                           ;main.c: 391: lcdInst(0b10010000);;
 11462  001356  0E90               	movlw	144
 11463  001358  EC32  F01F         	call	i2_lcdInst
 11464                           
 11465                           ;main.c: 393: }
 11466                           
 11467                           ;main.c: 392: break;
 11468  00135C  D24D               	goto	i2l372
 11469  00135E                     i2l8584:
 11470  00135E  C0EA  F02B         	movff	_menuIndex,??_keypressed
 11471  001362  C0EB  F02C         	movff	_menuIndex+1,??_keypressed+1
 11472                           
 11473                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11474                           ; Switch size 1, requested type "space"
 11475                           ; Number of cases is 1, Range of values is 0 to 0
 11476                           ; switch strategies available:
 11477                           ; Name         Instructions Cycles
 11478                           ; simple_byte            4     3 (average)
 11479                           ;	Chosen strategy is simple_byte
 11480  001366  502C               	movf	??_keypressed+1,w,c
 11481  001368  0A00               	xorlw	0	; case 0
 11482  00136A  A4D8               	btfss	status,2,c
 11483  00136C  D7E2               	goto	i2l8574
 11484                           
 11485                           ; Switch size 1, requested type "space"
 11486                           ; Number of cases is 3, Range of values is 1 to 3
 11487                           ; switch strategies available:
 11488                           ; Name         Instructions Cycles
 11489                           ; simple_byte           10     6 (average)
 11490                           ;	Chosen strategy is simple_byte
 11491  00136E  502B               	movf	??_keypressed,w,c
 11492  001370  0A01               	xorlw	1	; case 1
 11493  001372  B4D8               	btfsc	status,2,c
 11494  001374  D7D8               	goto	i2l8568
 11495  001376  0A03               	xorlw	3	; case 2
 11496  001378  B4D8               	btfsc	status,2,c
 11497  00137A  D7D7               	goto	i2l8570
 11498  00137C  0A01               	xorlw	1	; case 3
 11499  00137E  B4D8               	btfsc	status,2,c
 11500  001380  D7D6               	goto	i2l8572
 11501  001382  D7D7               	goto	i2l8574
 11502  001384                     i2l8588:
 11503                           
 11504                           ; BSR set to: 0
 11505                           ;main.c: 401: for (i=0;i<7;i++)
 11506  001384  0E00               	movlw	0
 11507  001386  6E3C               	movwf	keypressed@i+1,c
 11508  001388  0E00               	movlw	0
 11509  00138A  6E3B               	movwf	keypressed@i,c
 11510  00138C                     i2l8590:
 11511                           
 11512                           ; BSR set to: 0
 11513  00138C  BE3C               	btfsc	keypressed@i+1,7,c
 11514  00138E  D006               	goto	i2l8594
 11515  001390  503C               	movf	keypressed@i+1,w,c
 11516  001392  E11D               	bnz	i2l8600
 11517  001394  0E07               	movlw	7
 11518  001396  5C3B               	subwf	keypressed@i,w,c
 11519  001398  B0D8               	btfsc	status,0,c
 11520  00139A  D019               	goto	i2l8600
 11521  00139C                     i2l8594:
 11522                           
 11523                           ;main.c: 402: startTime[i]=time_i[i];
 11524  00139C  90D8               	bcf	status,0,c
 11525  00139E  343B               	rlcf	keypressed@i,w,c
 11526  0013A0  6ED9               	movwf	fsr2l,c
 11527  0013A2  343C               	rlcf	keypressed@i+1,w,c
 11528  0013A4  6EDA               	movwf	fsr2h,c
 11529  0013A6  0E1C               	movlw	low _time_i
 11530  0013A8  26D9               	addwf	fsr2l,f,c
 11531  0013AA  0E01               	movlw	high _time_i
 11532  0013AC  22DA               	addwfc	fsr2h,f,c
 11533  0013AE  90D8               	bcf	status,0,c
 11534  0013B0  343B               	rlcf	keypressed@i,w,c
 11535  0013B2  6EE1               	movwf	fsr1l,c
 11536  0013B4  343C               	rlcf	keypressed@i+1,w,c
 11537  0013B6  6EE2               	movwf	fsr1h,c
 11538  0013B8  0E0E               	movlw	low _startTime
 11539  0013BA  26E1               	addwf	fsr1l,f,c
 11540  0013BC  0E01               	movlw	high _startTime
 11541  0013BE  22E2               	addwfc	fsr1h,f,c
 11542  0013C0  CFDE FFE6          	movff	postinc2,postinc1
 11543  0013C4  CFDD FFE5          	movff	postdec2,postdec1
 11544  0013C8  4A3B               	infsnz	keypressed@i,f,c
 11545  0013CA  2A3C               	incf	keypressed@i+1,f,c
 11546  0013CC  D7DF               	goto	i2l8590
 11547  0013CE                     i2l8600:
 11548                           
 11549                           ;main.c: 404: if (keys[keypress]=='B'&&logIndex<events){
 11550  0013CE  503D               	movf	keypressed@keypress,w,c
 11551  0013D0  0D01               	mullw	1
 11552  0013D2  0E37               	movlw	low _keys
 11553  0013D4  24F3               	addwf	prodl,w,c
 11554  0013D6  6EF6               	movwf	tblptrl,c
 11555  0013D8  0EFE               	movlw	high _keys
 11556  0013DA  20F4               	addwfc	prodh,w,c
 11557  0013DC  6EF7               	movwf	tblptrh,c
 11558  0013DE                     	if	1	;There are 3 active tblptr bytes
 11559  0013DE  6AF8               	clrf	tblptru,c
 11560  0013E0  0E00               	movlw	low (__mediumconst shr (0+16))
 11561  0013E2  22F8               	addwfc	tblptru,f,c
 11562  0013E4                     	endif
 11563  0013E4  0008               	tblrd		*
 11564  0013E6  50F5               	movf	tablat,w,c
 11565  0013E8  0A42               	xorlw	66
 11566  0013EA  A4D8               	btfss	status,2,c
 11567  0013EC  D012               	goto	i2l8606
 11568  0013EE  0100               	movlb	0	; () banked
 11569  0013F0  51E6               	movf	_events& (0+255),w,b
 11570  0013F2  0100               	movlb	0	; () banked
 11571  0013F4  5DE8               	subwf	_logIndex& (0+255),w,b
 11572  0013F6  0100               	movlb	0	; () banked
 11573  0013F8  51E9               	movf	(_logIndex+1)& (0+255),w,b
 11574  0013FA  0A80               	xorlw	128
 11575  0013FC  6E2B               	movwf	??_keypressed& (0+255),c
 11576  0013FE  0100               	movlb	0	; () banked
 11577  001400  51E7               	movf	(_events+1)& (0+255),w,b
 11578  001402  0A80               	xorlw	128
 11579  001404  582B               	subwfb	??_keypressed& (0+255),w,c
 11580  001406  B0D8               	btfsc	status,0,c
 11581  001408  D004               	goto	i2l8606
 11582                           
 11583                           ; BSR set to: 0
 11584                           ;main.c: 408: logIndex++;
 11585  00140A  0100               	movlb	0	; () banked
 11586  00140C  4BE8               	infsnz	_logIndex& (0+255),f,b
 11587  00140E  2BE9               	incf	(_logIndex+1)& (0+255),f,b
 11588                           
 11589                           ;main.c: 409: }
 11590  001410  D1F3               	goto	i2l372
 11591  001412                     i2l8606:
 11592                           
 11593                           ;main.c: 410: else if (keys[keypress]=='A'&&logIndex>1)
 11594  001412  503D               	movf	keypressed@keypress,w,c
 11595  001414  0D01               	mullw	1
 11596  001416  0E37               	movlw	low _keys
 11597  001418  24F3               	addwf	prodl,w,c
 11598  00141A  6EF6               	movwf	tblptrl,c
 11599  00141C  0EFE               	movlw	high _keys
 11600  00141E  20F4               	addwfc	prodh,w,c
 11601  001420  6EF7               	movwf	tblptrh,c
 11602  001422                     	if	1	;There are 3 active tblptr bytes
 11603  001422  6AF8               	clrf	tblptru,c
 11604  001424  0E00               	movlw	low (__mediumconst shr (0+16))
 11605  001426  22F8               	addwfc	tblptru,f,c
 11606  001428                     	endif
 11607  001428  0008               	tblrd		*
 11608  00142A  50F5               	movf	tablat,w,c
 11609  00142C  0A41               	xorlw	65
 11610  00142E  A4D8               	btfss	status,2,c
 11611  001430  D077               	goto	i2l8640
 11612  001432  0100               	movlb	0	; () banked
 11613  001434  BFE9               	btfsc	(_logIndex+1)& (0+255),7,b
 11614  001436  D074               	goto	i2l8640
 11615  001438  0100               	movlb	0	; () banked
 11616  00143A  51E9               	movf	(_logIndex+1)& (0+255),w,b
 11617  00143C  E105               	bnz	i2u1449_40
 11618  00143E  0E02               	movlw	2
 11619  001440  0100               	movlb	0	; () banked
 11620  001442  5DE8               	subwf	_logIndex& (0+255),w,b
 11621  001444  A0D8               	btfss	status,0,c
 11622  001446  D06C               	goto	i2l8640
 11623  001448                     i2u1449_40:
 11624                           
 11625                           ; BSR set to: 0
 11626                           ;main.c: 411: logIndex--;
 11627  001448  0100               	movlb	0	; () banked
 11628  00144A  07E8               	decf	_logIndex& (0+255),f,b
 11629  00144C  A0D8               	btfss	status,0,c
 11630  00144E  07E9               	decf	(_logIndex+1)& (0+255),f,b
 11631  001450  D1D3               	goto	i2l372
 11632  001452                     i2l8616:
 11633                           
 11634                           ; BSR set to: 0
 11635                           ;main.c: 416: for (i=0;i<7;i++)
 11636  001452  0E00               	movlw	0
 11637  001454  6E3C               	movwf	keypressed@i+1,c
 11638  001456  0E00               	movlw	0
 11639  001458  6E3B               	movwf	keypressed@i,c
 11640  00145A                     i2l8618:
 11641                           
 11642                           ; BSR set to: 0
 11643  00145A  BE3C               	btfsc	keypressed@i+1,7,c
 11644  00145C  D006               	goto	i2l8622
 11645  00145E  503C               	movf	keypressed@i+1,w,c
 11646  001460  E11D               	bnz	i2l8628
 11647  001462  0E07               	movlw	7
 11648  001464  5C3B               	subwf	keypressed@i,w,c
 11649  001466  B0D8               	btfsc	status,0,c
 11650  001468  D019               	goto	i2l8628
 11651  00146A                     i2l8622:
 11652                           
 11653                           ;main.c: 417: startTime[i]=time_i[i];
 11654  00146A  90D8               	bcf	status,0,c
 11655  00146C  343B               	rlcf	keypressed@i,w,c
 11656  00146E  6ED9               	movwf	fsr2l,c
 11657  001470  343C               	rlcf	keypressed@i+1,w,c
 11658  001472  6EDA               	movwf	fsr2h,c
 11659  001474  0E1C               	movlw	low _time_i
 11660  001476  26D9               	addwf	fsr2l,f,c
 11661  001478  0E01               	movlw	high _time_i
 11662  00147A  22DA               	addwfc	fsr2h,f,c
 11663  00147C  90D8               	bcf	status,0,c
 11664  00147E  343B               	rlcf	keypressed@i,w,c
 11665  001480  6EE1               	movwf	fsr1l,c
 11666  001482  343C               	rlcf	keypressed@i+1,w,c
 11667  001484  6EE2               	movwf	fsr1h,c
 11668  001486  0E0E               	movlw	low _startTime
 11669  001488  26E1               	addwf	fsr1l,f,c
 11670  00148A  0E01               	movlw	high _startTime
 11671  00148C  22E2               	addwfc	fsr1h,f,c
 11672  00148E  CFDE FFE6          	movff	postinc2,postinc1
 11673  001492  CFDD FFE5          	movff	postdec2,postdec1
 11674  001496  4A3B               	infsnz	keypressed@i,f,c
 11675  001498  2A3C               	incf	keypressed@i+1,f,c
 11676  00149A  D7DF               	goto	i2l8618
 11677  00149C                     i2l8628:
 11678                           
 11679                           ;main.c: 419: if (keys[keypress]=='B'&&creditIndex<creditSize)
 11680  00149C  503D               	movf	keypressed@keypress,w,c
 11681  00149E  0D01               	mullw	1
 11682  0014A0  0E37               	movlw	low _keys
 11683  0014A2  24F3               	addwf	prodl,w,c
 11684  0014A4  6EF6               	movwf	tblptrl,c
 11685  0014A6  0EFE               	movlw	high _keys
 11686  0014A8  20F4               	addwfc	prodh,w,c
 11687  0014AA  6EF7               	movwf	tblptrh,c
 11688  0014AC                     	if	1	;There are 3 active tblptr bytes
 11689  0014AC  6AF8               	clrf	tblptru,c
 11690  0014AE  0E00               	movlw	low (__mediumconst shr (0+16))
 11691  0014B0  22F8               	addwfc	tblptru,f,c
 11692  0014B2                     	endif
 11693  0014B2  0008               	tblrd		*
 11694  0014B4  50F5               	movf	tablat,w,c
 11695  0014B6  0A42               	xorlw	66
 11696  0014B8  A4D8               	btfss	status,2,c
 11697  0014BA  D012               	goto	i2l8634
 11698  0014BC  0100               	movlb	0	; () banked
 11699  0014BE  51E2               	movf	_creditSize& (0+255),w,b
 11700  0014C0  0100               	movlb	0	; () banked
 11701  0014C2  5DE0               	subwf	_creditIndex& (0+255),w,b
 11702  0014C4  0100               	movlb	0	; () banked
 11703  0014C6  51E1               	movf	(_creditIndex+1)& (0+255),w,b
 11704  0014C8  0A80               	xorlw	128
 11705  0014CA  6E2B               	movwf	??_keypressed& (0+255),c
 11706  0014CC  0100               	movlb	0	; () banked
 11707  0014CE  51E3               	movf	(_creditSize+1)& (0+255),w,b
 11708  0014D0  0A80               	xorlw	128
 11709  0014D2  582B               	subwfb	??_keypressed& (0+255),w,c
 11710  0014D4  B0D8               	btfsc	status,0,c
 11711  0014D6  D004               	goto	i2l8634
 11712                           
 11713                           ; BSR set to: 0
 11714                           ;main.c: 420: creditIndex++;
 11715  0014D8  0100               	movlb	0	; () banked
 11716  0014DA  4BE0               	infsnz	_creditIndex& (0+255),f,b
 11717  0014DC  2BE1               	incf	(_creditIndex+1)& (0+255),f,b
 11718  0014DE  D18C               	goto	i2l372
 11719  0014E0                     i2l8634:
 11720                           
 11721                           ;main.c: 421: else if (keys[keypress]=='A'&&creditIndex>1)
 11722  0014E0  503D               	movf	keypressed@keypress,w,c
 11723  0014E2  0D01               	mullw	1
 11724  0014E4  0E37               	movlw	low _keys
 11725  0014E6  24F3               	addwf	prodl,w,c
 11726  0014E8  6EF6               	movwf	tblptrl,c
 11727  0014EA  0EFE               	movlw	high _keys
 11728  0014EC  20F4               	addwfc	prodh,w,c
 11729  0014EE  6EF7               	movwf	tblptrh,c
 11730  0014F0                     	if	1	;There are 3 active tblptr bytes
 11731  0014F0  6AF8               	clrf	tblptru,c
 11732  0014F2  0E00               	movlw	low (__mediumconst shr (0+16))
 11733  0014F4  22F8               	addwfc	tblptru,f,c
 11734  0014F6                     	endif
 11735  0014F6  0008               	tblrd		*
 11736  0014F8  50F5               	movf	tablat,w,c
 11737  0014FA  0A41               	xorlw	65
 11738  0014FC  A4D8               	btfss	status,2,c
 11739  0014FE  D010               	goto	i2l8640
 11740  001500  0100               	movlb	0	; () banked
 11741  001502  BFE1               	btfsc	(_creditIndex+1)& (0+255),7,b
 11742  001504  D00D               	goto	i2l8640
 11743  001506  0100               	movlb	0	; () banked
 11744  001508  51E1               	movf	(_creditIndex+1)& (0+255),w,b
 11745  00150A  E105               	bnz	i2u1456_40
 11746  00150C  0E02               	movlw	2
 11747  00150E  0100               	movlb	0	; () banked
 11748  001510  5DE0               	subwf	_creditIndex& (0+255),w,b
 11749  001512  A0D8               	btfss	status,0,c
 11750  001514  D005               	goto	i2l8640
 11751  001516                     i2u1456_40:
 11752                           
 11753                           ; BSR set to: 0
 11754                           ;main.c: 422: creditIndex--;
 11755  001516  0100               	movlb	0	; () banked
 11756  001518  07E0               	decf	_creditIndex& (0+255),f,b
 11757  00151A  A0D8               	btfss	status,0,c
 11758  00151C  07E1               	decf	(_creditIndex+1)& (0+255),f,b
 11759  00151E  D16C               	goto	i2l372
 11760  001520                     i2l8640:
 11761                           
 11762                           ;main.c: 423: else if(keys[keypress]=='D')
 11763  001520  503D               	movf	keypressed@keypress,w,c
 11764  001522  0D01               	mullw	1
 11765  001524  0E37               	movlw	low _keys
 11766  001526  24F3               	addwf	prodl,w,c
 11767  001528  6EF6               	movwf	tblptrl,c
 11768  00152A  0EFE               	movlw	high _keys
 11769  00152C  20F4               	addwfc	prodh,w,c
 11770  00152E  6EF7               	movwf	tblptrh,c
 11771  001530                     	if	1	;There are 3 active tblptr bytes
 11772  001530  6AF8               	clrf	tblptru,c
 11773  001532  0E00               	movlw	low (__mediumconst shr (0+16))
 11774  001534  22F8               	addwfc	tblptru,f,c
 11775  001536                     	endif
 11776  001536  0008               	tblrd		*
 11777  001538  50F5               	movf	tablat,w,c
 11778  00153A  0A44               	xorlw	68
 11779  00153C  A4D8               	btfss	status,2,c
 11780  00153E  D15C               	goto	i2l372
 11781  001540                     i2l8642:
 11782                           
 11783                           ;main.c: 424: nstate='m';
 11784  001540  0E6D               	movlw	109
 11785  001542  D13B               	goto	L10
 11786  001544                     i2l8644:
 11787                           
 11788                           ; BSR set to: 0
 11789                           ;main.c: 427: if (keys[keypress]=='1'){
 11790  001544  503D               	movf	keypressed@keypress,w,c
 11791  001546  0D01               	mullw	1
 11792  001548  0E37               	movlw	low _keys
 11793  00154A  24F3               	addwf	prodl,w,c
 11794  00154C  6EF6               	movwf	tblptrl,c
 11795  00154E  0EFE               	movlw	high _keys
 11796  001550  20F4               	addwfc	prodh,w,c
 11797  001552  6EF7               	movwf	tblptrh,c
 11798  001554                     	if	1	;There are 3 active tblptr bytes
 11799  001554  6AF8               	clrf	tblptru,c
 11800  001556  0E00               	movlw	low (__mediumconst shr (0+16))
 11801  001558  22F8               	addwfc	tblptru,f,c
 11802  00155A                     	endif
 11803  00155A  0008               	tblrd		*
 11804  00155C  50F5               	movf	tablat,w,c
 11805  00155E  0A31               	xorlw	49
 11806  001560  A4D8               	btfss	status,2,c
 11807  001562  D012               	goto	i2l8650
 11808                           
 11809                           ; BSR set to: 0
 11810                           ;main.c: 428: eskaNoCap++;
 11811  001564  0100               	movlb	0	; () banked
 11812  001566  4BF2               	infsnz	_eskaNoCap& (0+255),f,b
 11813  001568  2BF3               	incf	(_eskaNoCap+1)& (0+255),f,b
 11814                           
 11815                           ; BSR set to: 0
 11816                           ;main.c: 429: eskaNoCap%=100;
 11817  00156A  C0F2  F001         	movff	_eskaNoCap,i2___awmod@dividend
 11818  00156E  C0F3  F002         	movff	_eskaNoCap+1,i2___awmod@dividend+1
 11819  001572  0E00               	movlw	0
 11820  001574  6E04               	movwf	i2___awmod@divisor+1,c
 11821  001576  0E64               	movlw	100
 11822  001578  6E03               	movwf	i2___awmod@divisor,c
 11823  00157A  EC6B  F01C         	call	i2___awmod	;wreg free
 11824  00157E  C001  F0F2         	movff	?i2___awmod,_eskaNoCap
 11825  001582  C002  F0F3         	movff	?i2___awmod+1,_eskaNoCap+1
 11826                           
 11827                           ;main.c: 430: }
 11828  001586  D138               	goto	i2l372
 11829  001588                     i2l8650:
 11830                           
 11831                           ;main.c: 431: else if (keys[keypress]=='2'){
 11832  001588  503D               	movf	keypressed@keypress,w,c
 11833  00158A  0D01               	mullw	1
 11834  00158C  0E37               	movlw	low _keys
 11835  00158E  24F3               	addwf	prodl,w,c
 11836  001590  6EF6               	movwf	tblptrl,c
 11837  001592  0EFE               	movlw	high _keys
 11838  001594  20F4               	addwfc	prodh,w,c
 11839  001596  6EF7               	movwf	tblptrh,c
 11840  001598                     	if	1	;There are 3 active tblptr bytes
 11841  001598  6AF8               	clrf	tblptru,c
 11842  00159A  0E00               	movlw	low (__mediumconst shr (0+16))
 11843  00159C  22F8               	addwfc	tblptru,f,c
 11844  00159E                     	endif
 11845  00159E  0008               	tblrd		*
 11846  0015A0  50F5               	movf	tablat,w,c
 11847  0015A2  0A32               	xorlw	50
 11848  0015A4  A4D8               	btfss	status,2,c
 11849  0015A6  D012               	goto	i2l8656
 11850                           
 11851                           ;main.c: 432: eskaWCap++;
 11852  0015A8  0100               	movlb	0	; () banked
 11853  0015AA  4BF4               	infsnz	_eskaWCap& (0+255),f,b
 11854  0015AC  2BF5               	incf	(_eskaWCap+1)& (0+255),f,b
 11855                           
 11856                           ; BSR set to: 0
 11857                           ;main.c: 433: eskaWCap%=100;
 11858  0015AE  C0F4  F001         	movff	_eskaWCap,i2___awmod@dividend
 11859  0015B2  C0F5  F002         	movff	_eskaWCap+1,i2___awmod@dividend+1
 11860  0015B6  0E00               	movlw	0
 11861  0015B8  6E04               	movwf	i2___awmod@divisor+1,c
 11862  0015BA  0E64               	movlw	100
 11863  0015BC  6E03               	movwf	i2___awmod@divisor,c
 11864  0015BE  EC6B  F01C         	call	i2___awmod	;wreg free
 11865  0015C2  C001  F0F4         	movff	?i2___awmod,_eskaWCap
 11866  0015C6  C002  F0F5         	movff	?i2___awmod+1,_eskaWCap+1
 11867                           
 11868                           ;main.c: 434: }
 11869  0015CA  D116               	goto	i2l372
 11870  0015CC                     i2l8656:
 11871                           
 11872                           ;main.c: 435: else if (keys[keypress]=='4'){
 11873  0015CC  503D               	movf	keypressed@keypress,w,c
 11874  0015CE  0D01               	mullw	1
 11875  0015D0  0E37               	movlw	low _keys
 11876  0015D2  24F3               	addwf	prodl,w,c
 11877  0015D4  6EF6               	movwf	tblptrl,c
 11878  0015D6  0EFE               	movlw	high _keys
 11879  0015D8  20F4               	addwfc	prodh,w,c
 11880  0015DA  6EF7               	movwf	tblptrh,c
 11881  0015DC                     	if	1	;There are 3 active tblptr bytes
 11882  0015DC  6AF8               	clrf	tblptru,c
 11883  0015DE  0E00               	movlw	low (__mediumconst shr (0+16))
 11884  0015E0  22F8               	addwfc	tblptru,f,c
 11885  0015E2                     	endif
 11886  0015E2  0008               	tblrd		*
 11887  0015E4  50F5               	movf	tablat,w,c
 11888  0015E6  0A34               	xorlw	52
 11889  0015E8  A4D8               	btfss	status,2,c
 11890  0015EA  D012               	goto	i2l8662
 11891                           
 11892                           ;main.c: 436: yopNoCap++;
 11893  0015EC  0100               	movlb	0	; () banked
 11894  0015EE  4BFC               	infsnz	_yopNoCap& (0+255),f,b
 11895  0015F0  2BFD               	incf	(_yopNoCap+1)& (0+255),f,b
 11896                           
 11897                           ; BSR set to: 0
 11898                           ;main.c: 437: yopNoCap%=100;
 11899  0015F2  C0FC  F001         	movff	_yopNoCap,i2___awmod@dividend
 11900  0015F6  C0FD  F002         	movff	_yopNoCap+1,i2___awmod@dividend+1
 11901  0015FA  0E00               	movlw	0
 11902  0015FC  6E04               	movwf	i2___awmod@divisor+1,c
 11903  0015FE  0E64               	movlw	100
 11904  001600  6E03               	movwf	i2___awmod@divisor,c
 11905  001602  EC6B  F01C         	call	i2___awmod	;wreg free
 11906  001606  C001  F0FC         	movff	?i2___awmod,_yopNoCap
 11907  00160A  C002  F0FD         	movff	?i2___awmod+1,_yopNoCap+1
 11908                           
 11909                           ;main.c: 438: }
 11910  00160E  D0F4               	goto	i2l372
 11911  001610                     i2l8662:
 11912                           
 11913                           ;main.c: 439: else if (keys[keypress]=='5'){
 11914  001610  503D               	movf	keypressed@keypress,w,c
 11915  001612  0D01               	mullw	1
 11916  001614  0E37               	movlw	low _keys
 11917  001616  24F3               	addwf	prodl,w,c
 11918  001618  6EF6               	movwf	tblptrl,c
 11919  00161A  0EFE               	movlw	high _keys
 11920  00161C  20F4               	addwfc	prodh,w,c
 11921  00161E  6EF7               	movwf	tblptrh,c
 11922  001620                     	if	1	;There are 3 active tblptr bytes
 11923  001620  6AF8               	clrf	tblptru,c
 11924  001622  0E00               	movlw	low (__mediumconst shr (0+16))
 11925  001624  22F8               	addwfc	tblptru,f,c
 11926  001626                     	endif
 11927  001626  0008               	tblrd		*
 11928  001628  50F5               	movf	tablat,w,c
 11929  00162A  0A35               	xorlw	53
 11930  00162C  A4D8               	btfss	status,2,c
 11931  00162E  D012               	goto	i2l8668
 11932                           
 11933                           ;main.c: 440: yopWCap++;
 11934  001630  0100               	movlb	0	; () banked
 11935  001632  4BFE               	infsnz	_yopWCap& (0+255),f,b
 11936  001634  2BFF               	incf	(_yopWCap+1)& (0+255),f,b
 11937                           
 11938                           ; BSR set to: 0
 11939                           ;main.c: 441: yopWCap%=100;
 11940  001636  C0FE  F001         	movff	_yopWCap,i2___awmod@dividend
 11941  00163A  C0FF  F002         	movff	_yopWCap+1,i2___awmod@dividend+1
 11942  00163E  0E00               	movlw	0
 11943  001640  6E04               	movwf	i2___awmod@divisor+1,c
 11944  001642  0E64               	movlw	100
 11945  001644  6E03               	movwf	i2___awmod@divisor,c
 11946  001646  EC6B  F01C         	call	i2___awmod	;wreg free
 11947  00164A  C001  F0FE         	movff	?i2___awmod,_yopWCap
 11948  00164E  C002  F0FF         	movff	?i2___awmod+1,_yopWCap+1
 11949                           
 11950                           ;main.c: 442: }
 11951  001652  D0D2               	goto	i2l372
 11952  001654                     i2l8668:
 11953                           
 11954                           ;main.c: 443: else if (keys[keypress]=='7'||keys[keypress]=='8')
 11955  001654  503D               	movf	keypressed@keypress,w,c
 11956  001656  0D01               	mullw	1
 11957  001658  0E37               	movlw	low _keys
 11958  00165A  24F3               	addwf	prodl,w,c
 11959  00165C  6EF6               	movwf	tblptrl,c
 11960  00165E  0EFE               	movlw	high _keys
 11961  001660  20F4               	addwfc	prodh,w,c
 11962  001662  6EF7               	movwf	tblptrh,c
 11963  001664                     	if	1	;There are 3 active tblptr bytes
 11964  001664  6AF8               	clrf	tblptru,c
 11965  001666  0E00               	movlw	low (__mediumconst shr (0+16))
 11966  001668  22F8               	addwfc	tblptru,f,c
 11967  00166A                     	endif
 11968  00166A  0008               	tblrd		*
 11969  00166C  50F5               	movf	tablat,w,c
 11970  00166E  0A37               	xorlw	55
 11971  001670  B4D8               	btfsc	status,2,c
 11972  001672  D010               	goto	i2l8672
 11973  001674  503D               	movf	keypressed@keypress,w,c
 11974  001676  0D01               	mullw	1
 11975  001678  0E37               	movlw	low _keys
 11976  00167A  24F3               	addwf	prodl,w,c
 11977  00167C  6EF6               	movwf	tblptrl,c
 11978  00167E  0EFE               	movlw	high _keys
 11979  001680  20F4               	addwfc	prodh,w,c
 11980  001682  6EF7               	movwf	tblptrh,c
 11981  001684                     	if	1	;There are 3 active tblptr bytes
 11982  001684  6AF8               	clrf	tblptru,c
 11983  001686  0E00               	movlw	low (__mediumconst shr (0+16))
 11984  001688  22F8               	addwfc	tblptru,f,c
 11985  00168A                     	endif
 11986  00168A  0008               	tblrd		*
 11987  00168C  50F5               	movf	tablat,w,c
 11988  00168E  0A38               	xorlw	56
 11989  001690  A4D8               	btfss	status,2,c
 11990  001692  D002               	goto	i2l8674
 11991  001694                     i2l8672:
 11992                           
 11993                           ;main.c: 444: nstate='e';
 11994  001694  0E65               	movlw	101
 11995  001696  D091               	goto	L10
 11996  001698                     i2l8674:
 11997                           
 11998                           ;main.c: 445: else if (keys[keypress]=='B'&&sortIndex<sortSize)
 11999  001698  503D               	movf	keypressed@keypress,w,c
 12000  00169A  0D01               	mullw	1
 12001  00169C  0E37               	movlw	low _keys
 12002  00169E  24F3               	addwf	prodl,w,c
 12003  0016A0  6EF6               	movwf	tblptrl,c
 12004  0016A2  0EFE               	movlw	high _keys
 12005  0016A4  20F4               	addwfc	prodh,w,c
 12006  0016A6  6EF7               	movwf	tblptrh,c
 12007  0016A8                     	if	1	;There are 3 active tblptr bytes
 12008  0016A8  6AF8               	clrf	tblptru,c
 12009  0016AA  0E00               	movlw	low (__mediumconst shr (0+16))
 12010  0016AC  22F8               	addwfc	tblptru,f,c
 12011  0016AE                     	endif
 12012  0016AE  0008               	tblrd		*
 12013  0016B0  50F5               	movf	tablat,w,c
 12014  0016B2  0A42               	xorlw	66
 12015  0016B4  A4D8               	btfss	status,2,c
 12016  0016B6  D010               	goto	i2l8680
 12017  0016B8  506D               	movf	_sortSize,w,c
 12018  0016BA  0100               	movlb	0	; () banked
 12019  0016BC  5DDC               	subwf	_sortIndex& (0+255),w,b
 12020  0016BE  0100               	movlb	0	; () banked
 12021  0016C0  51DD               	movf	(_sortIndex+1)& (0+255),w,b
 12022  0016C2  0A80               	xorlw	128
 12023  0016C4  6E2B               	movwf	??_keypressed& (0+255),c
 12024  0016C6  506E               	movf	_sortSize+1,w,c
 12025  0016C8  0A80               	xorlw	128
 12026  0016CA  582B               	subwfb	??_keypressed& (0+255),w,c
 12027  0016CC  B0D8               	btfsc	status,0,c
 12028  0016CE  D004               	goto	i2l8680
 12029                           
 12030                           ; BSR set to: 0
 12031                           ;main.c: 446: sortIndex++;
 12032  0016D0  0100               	movlb	0	; () banked
 12033  0016D2  4BDC               	infsnz	_sortIndex& (0+255),f,b
 12034  0016D4  2BDD               	incf	(_sortIndex+1)& (0+255),f,b
 12035  0016D6  D090               	goto	i2l372
 12036  0016D8                     i2l8680:
 12037                           
 12038                           ;main.c: 447: else if (keys[keypress]=='A'&&sortIndex>1)
 12039  0016D8  503D               	movf	keypressed@keypress,w,c
 12040  0016DA  0D01               	mullw	1
 12041  0016DC  0E37               	movlw	low _keys
 12042  0016DE  24F3               	addwf	prodl,w,c
 12043  0016E0  6EF6               	movwf	tblptrl,c
 12044  0016E2  0EFE               	movlw	high _keys
 12045  0016E4  20F4               	addwfc	prodh,w,c
 12046  0016E6  6EF7               	movwf	tblptrh,c
 12047  0016E8                     	if	1	;There are 3 active tblptr bytes
 12048  0016E8  6AF8               	clrf	tblptru,c
 12049  0016EA  0E00               	movlw	low (__mediumconst shr (0+16))
 12050  0016EC  22F8               	addwfc	tblptru,f,c
 12051  0016EE                     	endif
 12052  0016EE  0008               	tblrd		*
 12053  0016F0  50F5               	movf	tablat,w,c
 12054  0016F2  0A41               	xorlw	65
 12055  0016F4  A4D8               	btfss	status,2,c
 12056  0016F6  D080               	goto	i2l372
 12057  0016F8  0100               	movlb	0	; () banked
 12058  0016FA  BFDD               	btfsc	(_sortIndex+1)& (0+255),7,b
 12059  0016FC  D07D               	goto	i2l372
 12060  0016FE  0100               	movlb	0	; () banked
 12061  001700  51DD               	movf	(_sortIndex+1)& (0+255),w,b
 12062  001702  E105               	bnz	i2u1467_40
 12063  001704  0E02               	movlw	2
 12064  001706  0100               	movlb	0	; () banked
 12065  001708  5DDC               	subwf	_sortIndex& (0+255),w,b
 12066  00170A  A0D8               	btfss	status,0,c
 12067  00170C  D075               	goto	i2l372
 12068  00170E                     i2u1467_40:
 12069                           
 12070                           ; BSR set to: 0
 12071                           ;main.c: 448: sortIndex--;
 12072  00170E  0100               	movlb	0	; () banked
 12073  001710  07DC               	decf	_sortIndex& (0+255),f,b
 12074  001712  A0D8               	btfss	status,0,c
 12075  001714  07DD               	decf	(_sortIndex+1)& (0+255),f,b
 12076                           
 12077                           ; BSR set to: 0
 12078                           ;main.c: 449: break;
 12079                           
 12080                           ; BSR set to: 0
 12081                           
 12082                           ; BSR set to: 0
 12083                           
 12084                           ; BSR set to: 0
 12085                           
 12086                           ; BSR set to: 0
 12087                           
 12088                           ; BSR set to: 0
 12089                           
 12090                           ; BSR set to: 0
 12091  001716  D070               	goto	i2l372
 12092  001718                     i2l8686:
 12093                           
 12094                           ; BSR set to: 0
 12095                           ;main.c: 451: if (keys[keypress]=='B'&&endIndex<endSize)
 12096  001718  503D               	movf	keypressed@keypress,w,c
 12097  00171A  0D01               	mullw	1
 12098  00171C  0E37               	movlw	low _keys
 12099  00171E  24F3               	addwf	prodl,w,c
 12100  001720  6EF6               	movwf	tblptrl,c
 12101  001722  0EFE               	movlw	high _keys
 12102  001724  20F4               	addwfc	prodh,w,c
 12103  001726  6EF7               	movwf	tblptrh,c
 12104  001728                     	if	1	;There are 3 active tblptr bytes
 12105  001728  6AF8               	clrf	tblptru,c
 12106  00172A  0E00               	movlw	low (__mediumconst shr (0+16))
 12107  00172C  22F8               	addwfc	tblptru,f,c
 12108  00172E                     	endif
 12109  00172E  0008               	tblrd		*
 12110  001730  50F5               	movf	tablat,w,c
 12111  001732  0A42               	xorlw	66
 12112  001734  A4D8               	btfss	status,2,c
 12113  001736  D010               	goto	i2l8692
 12114                           
 12115                           ; BSR set to: 0
 12116  001738  5073               	movf	_endSize,w,c
 12117  00173A  0100               	movlb	0	; () banked
 12118  00173C  5DE4               	subwf	_endIndex& (0+255),w,b
 12119  00173E  0100               	movlb	0	; () banked
 12120  001740  51E5               	movf	(_endIndex+1)& (0+255),w,b
 12121  001742  0A80               	xorlw	128
 12122  001744  6E2B               	movwf	??_keypressed& (0+255),c
 12123  001746  5074               	movf	_endSize+1,w,c
 12124  001748  0A80               	xorlw	128
 12125  00174A  582B               	subwfb	??_keypressed& (0+255),w,c
 12126  00174C  B0D8               	btfsc	status,0,c
 12127  00174E  D004               	goto	i2l8692
 12128                           
 12129                           ; BSR set to: 0
 12130                           ;main.c: 452: endIndex++;
 12131  001750  0100               	movlb	0	; () banked
 12132  001752  4BE4               	infsnz	_endIndex& (0+255),f,b
 12133  001754  2BE5               	incf	(_endIndex+1)& (0+255),f,b
 12134  001756  D050               	goto	i2l372
 12135  001758                     i2l8692:
 12136                           
 12137                           ; BSR set to: 0
 12138                           ;main.c: 453: else if (keys[keypress]=='A'&&endIndex>1)
 12139  001758  503D               	movf	keypressed@keypress,w,c
 12140  00175A  0D01               	mullw	1
 12141  00175C  0E37               	movlw	low _keys
 12142  00175E  24F3               	addwf	prodl,w,c
 12143  001760  6EF6               	movwf	tblptrl,c
 12144  001762  0EFE               	movlw	high _keys
 12145  001764  20F4               	addwfc	prodh,w,c
 12146  001766  6EF7               	movwf	tblptrh,c
 12147  001768                     	if	1	;There are 3 active tblptr bytes
 12148  001768  6AF8               	clrf	tblptru,c
 12149  00176A  0E00               	movlw	low (__mediumconst shr (0+16))
 12150  00176C  22F8               	addwfc	tblptru,f,c
 12151  00176E                     	endif
 12152  00176E  0008               	tblrd		*
 12153  001770  50F5               	movf	tablat,w,c
 12154  001772  0A41               	xorlw	65
 12155  001774  A4D8               	btfss	status,2,c
 12156  001776  D010               	goto	i2l8698
 12157                           
 12158                           ; BSR set to: 0
 12159  001778  0100               	movlb	0	; () banked
 12160  00177A  BFE5               	btfsc	(_endIndex+1)& (0+255),7,b
 12161  00177C  D00D               	goto	i2l8698
 12162  00177E  0100               	movlb	0	; () banked
 12163  001780  51E5               	movf	(_endIndex+1)& (0+255),w,b
 12164  001782  E105               	bnz	i2u1471_40
 12165  001784  0E02               	movlw	2
 12166  001786  0100               	movlb	0	; () banked
 12167  001788  5DE4               	subwf	_endIndex& (0+255),w,b
 12168  00178A  A0D8               	btfss	status,0,c
 12169  00178C  D005               	goto	i2l8698
 12170  00178E                     i2u1471_40:
 12171                           
 12172                           ; BSR set to: 0
 12173                           ;main.c: 454: endIndex--;
 12174  00178E  0100               	movlb	0	; () banked
 12175  001790  07E4               	decf	_endIndex& (0+255),f,b
 12176  001792  A0D8               	btfss	status,0,c
 12177  001794  07E5               	decf	(_endIndex+1)& (0+255),f,b
 12178  001796  D030               	goto	i2l372
 12179  001798                     i2l8698:
 12180                           
 12181                           ; BSR set to: 0
 12182                           ;main.c: 455: else if (keys[keypress]=='C')
 12183  001798  503D               	movf	keypressed@keypress,w,c
 12184  00179A  0D01               	mullw	1
 12185  00179C  0E37               	movlw	low _keys
 12186  00179E  24F3               	addwf	prodl,w,c
 12187  0017A0  6EF6               	movwf	tblptrl,c
 12188  0017A2  0EFE               	movlw	high _keys
 12189  0017A4  20F4               	addwfc	prodh,w,c
 12190  0017A6  6EF7               	movwf	tblptrh,c
 12191  0017A8                     	if	1	;There are 3 active tblptr bytes
 12192  0017A8  6AF8               	clrf	tblptru,c
 12193  0017AA  0E00               	movlw	low (__mediumconst shr (0+16))
 12194  0017AC  22F8               	addwfc	tblptru,f,c
 12195  0017AE                     	endif
 12196  0017AE  0008               	tblrd		*
 12197  0017B0  50F5               	movf	tablat,w,c
 12198  0017B2  0A43               	xorlw	67
 12199  0017B4  A4D8               	btfss	status,2,c
 12200  0017B6  D020               	goto	i2l372
 12201                           
 12202                           ; BSR set to: 0
 12203                           ;main.c: 456: nstate='r';
 12204  0017B8  0E72               	movlw	114
 12205  0017BA                     L10:
 12206  0017BA  0100               	movlb	0	; () banked
 12207  0017BC  6FDE               	movwf	_nstate& (0+255),b
 12208                           
 12209                           ; BSR set to: 0
 12210                           ;main.c: 457: break;
 12211                           
 12212                           ; BSR set to: 0
 12213                           
 12214                           ; BSR set to: 0
 12215  0017BE  D01C               	goto	i2l372
 12216  0017C0                     i2l8702:
 12217                           
 12218                           ; BSR set to: 0
 12219                           ;main.c: 459: printf("no page found");
 12220  0017C0  0EB7               	movlw	low STR_27
 12221  0017C2  6E23               	movwf	i2printf@f,c
 12222  0017C4  0EFF               	movlw	high STR_27
 12223  0017C6  6E24               	movwf	i2printf@f+1,c
 12224  0017C8  EC66  F01E         	call	i2_printf	;wreg free
 12225                           
 12226                           ;main.c: 461: }
 12227                           
 12228                           ;main.c: 460: break;
 12229  0017CC  D015               	goto	i2l372
 12230  0017CE                     i2l8706:
 12231  0017CE  0100               	movlb	0	; () banked
 12232  0017D0  51DF               	movf	_state& (0+255),w,b
 12233                           
 12234                           ; Switch size 1, requested type "space"
 12235                           ; Number of cases is 6, Range of values is 99 to 115
 12236                           ; switch strategies available:
 12237                           ; Name         Instructions Cycles
 12238                           ; simple_byte           19    10 (average)
 12239                           ;	Chosen strategy is simple_byte
 12240  0017D2  0A63               	xorlw	99	; case 99
 12241  0017D4  B4D8               	btfsc	status,2,c
 12242  0017D6  D63D               	goto	i2l8616
 12243  0017D8  0A06               	xorlw	6	; case 101
 12244  0017DA  B4D8               	btfsc	status,2,c
 12245  0017DC  D79D               	goto	i2l8686
 12246  0017DE  0A09               	xorlw	9	; case 108
 12247  0017E0  B4D8               	btfsc	status,2,c
 12248  0017E2  D5D0               	goto	i2l8588
 12249  0017E4  0A01               	xorlw	1	; case 109
 12250  0017E6  B4D8               	btfsc	status,2,c
 12251  0017E8  D526               	goto	i2l8540
 12252  0017EA  0A1F               	xorlw	31	; case 114
 12253  0017EC  B4D8               	btfsc	status,2,c
 12254  0017EE  D6A8               	goto	i2l8642
 12255  0017F0  0A01               	xorlw	1	; case 115
 12256  0017F2  B4D8               	btfsc	status,2,c
 12257  0017F4  D6A7               	goto	i2l8644
 12258  0017F6  D7E4               	goto	i2l8702
 12259  0017F8                     i2l372:
 12260                           
 12261                           ;main.c: 462: INT1IF = 0;
 12262  0017F8  90F0               	bcf	intcon3,0,c	;volatile
 12263  0017FA                     i2l413:
 12264  0017FA  C03A  FFF5         	movff	??_keypressed+15,tablat
 12265  0017FE  C039  FFF8         	movff	??_keypressed+14,tblptru
 12266  001802  C038  FFF7         	movff	??_keypressed+13,tblptrh
 12267  001806  C037  FFF6         	movff	??_keypressed+12,tblptrl
 12268  00180A  C036  FFF4         	movff	??_keypressed+11,prodh
 12269  00180E  C035  FFF3         	movff	??_keypressed+10,prodl
 12270  001812  C034  FFDA         	movff	??_keypressed+9,fsr2h
 12271  001816  C033  FFD9         	movff	??_keypressed+8,fsr2l
 12272  00181A  C032  FFE2         	movff	??_keypressed+7,fsr1h
 12273  00181E  C031  FFE1         	movff	??_keypressed+6,fsr1l
 12274  001822  C030  FFEA         	movff	??_keypressed+5,fsr0h
 12275  001826  C02F  FFE9         	movff	??_keypressed+4,fsr0l
 12276  00182A  C02E  FFFB         	movff	??_keypressed+3,pclatu
 12277  00182E  C02D  FFFA         	movff	??_keypressed+2,pclath
 12278  001832  927B               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 12279  001834  0011               	retfie		f
 12280  001836                     __end_of_keypressed:
 12281                           	opt stack 0
 12282                           tosu	equ	0xFFF
 12283                           tosh	equ	0xFFE
 12284                           tosl	equ	0xFFD
 12285                           pclatu	equ	0xFFB
 12286                           pclath	equ	0xFFA
 12287                           tblptru	equ	0xFF8
 12288                           tblptrh	equ	0xFF7
 12289                           tblptrl	equ	0xFF6
 12290                           tablat	equ	0xFF5
 12291                           prodh	equ	0xFF4
 12292                           prodl	equ	0xFF3
 12293                           intcon	equ	0xFF2
 12294                           intcon2	equ	0xFF1
 12295                           intcon3	equ	0xFF0
 12296                           indf0	equ	0xFEF
 12297                           postinc0	equ	0xFEE
 12298                           fsr0h	equ	0xFEA
 12299                           fsr0l	equ	0xFE9
 12300                           wreg	equ	0xFE8
 12301                           indf1	equ	0xFE7
 12302                           postinc1	equ	0xFE6
 12303                           postdec1	equ	0xFE5
 12304                           fsr1h	equ	0xFE2
 12305                           fsr1l	equ	0xFE1
 12306                           indf2	equ	0xFDF
 12307                           postinc2	equ	0xFDE
 12308                           postdec2	equ	0xFDD
 12309                           fsr2h	equ	0xFDA
 12310                           fsr2l	equ	0xFD9
 12311                           status	equ	0xFD8
 12312                           
 12313 ;; *************** function i2_printf *****************
 12314 ;; Defined at:
 12315 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\printf.c"
 12316 ;; Parameters:    Size  Location     Type
 12317 ;;  f               2   34[COMRAM] PTR const unsigned char 
 12318 ;;		 -> STR_27(14), STR_26(15), STR_25(8), display1(18), 
 12319 ;;		 -> display0(18), 
 12320 ;; Auto vars:     Size  Location     Type
 12321 ;;  printf          4   38[COMRAM] struct __prbuf
 12322 ;;  printf          2   36[COMRAM] PTR void [1]
 12323 ;;		 -> ?i2_printf(2), ?_sprintf(2), ?_printf(2), 
 12324 ;; Return value:  Size  Location     Type
 12325 ;;                  2   34[COMRAM] int 
 12326 ;; Registers used:
 12327 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12328 ;; Tracked objects:
 12329 ;;		On entry : 0/0
 12330 ;;		On exit  : 0/0
 12331 ;;		Unchanged: 0/0
 12332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12333 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12334 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12336 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12337 ;;Total ram usage:        8 bytes
 12338 ;; Hardware stack levels used:    1
 12339 ;; Hardware stack levels required when called:    3
 12340 ;; This function calls:
 12341 ;;		i2__doprnt
 12342 ;; This function is called by:
 12343 ;;		_keypressed
 12344 ;; This function uses a non-reentrant model
 12345 ;;
 12346                           
 12347                           	psect	text33
 12348  003CCC                     __ptext33:
 12349                           	opt stack 0
 12350  003CCC                     i2_printf:
 12351                           	opt stack 20
 12352                           
 12353                           ;incstack = 0
 12354  003CCC  0E00               	movlw	0
 12355  003CCE  6E27               	movwf	i2printf@pb,c
 12356  003CD0  0E00               	movlw	0
 12357  003CD2  6E28               	movwf	i2printf@pb+1,c
 12358  003CD4  0E58               	movlw	low i2_putch
 12359  003CD6  6E29               	movwf	i2printf@pb+2,c
 12360  003CD8  0E3E               	movlw	high i2_putch
 12361  003CDA  6E2A               	movwf	i2printf@pb+3,c
 12362  003CDC  0E25               	movlw	low (?i2_printf+2)
 12363  003CDE  6E25               	movwf	i2printf@ap,c
 12364  003CE0  0E00               	movlw	high (?i2_printf+2)
 12365  003CE2  6E26               	movwf	i2printf@ap+1,c
 12366                           
 12367                           ;	Return value of i2_printf is never used
 12368  003CE4  0E27               	movlw	low i2printf@pb
 12369  003CE6  6E0D               	movwf	i2__doprnt@pb,c
 12370  003CE8  0E00               	movlw	high i2printf@pb
 12371  003CEA  6E0E               	movwf	i2__doprnt@pb+1,c
 12372  003CEC  C023  F00F         	movff	i2printf@f,i2__doprnt@f
 12373  003CF0  C024  F010         	movff	i2printf@f+1,i2__doprnt@f+1
 12374  003CF4  0E25               	movlw	low i2printf@ap
 12375  003CF6  6E11               	movwf	i2__doprnt@ap,c
 12376  003CF8  0E00               	movlw	high i2printf@ap
 12377  003CFA  6E12               	movwf	i2__doprnt@ap+1,c
 12378  003CFC  ECCB  F004         	call	i2__doprnt	;wreg free
 12379  003D00  0012               	return	
 12380  003D02                     __end_ofi2_printf:
 12381                           	opt stack 0
 12382                           tosu	equ	0xFFF
 12383                           tosh	equ	0xFFE
 12384                           tosl	equ	0xFFD
 12385                           pclatu	equ	0xFFB
 12386                           pclath	equ	0xFFA
 12387                           tblptru	equ	0xFF8
 12388                           tblptrh	equ	0xFF7
 12389                           tblptrl	equ	0xFF6
 12390                           tablat	equ	0xFF5
 12391                           prodh	equ	0xFF4
 12392                           prodl	equ	0xFF3
 12393                           intcon	equ	0xFF2
 12394                           intcon2	equ	0xFF1
 12395                           intcon3	equ	0xFF0
 12396                           indf0	equ	0xFEF
 12397                           postinc0	equ	0xFEE
 12398                           fsr0h	equ	0xFEA
 12399                           fsr0l	equ	0xFE9
 12400                           wreg	equ	0xFE8
 12401                           indf1	equ	0xFE7
 12402                           postinc1	equ	0xFE6
 12403                           postdec1	equ	0xFE5
 12404                           fsr1h	equ	0xFE2
 12405                           fsr1l	equ	0xFE1
 12406                           indf2	equ	0xFDF
 12407                           postinc2	equ	0xFDE
 12408                           postdec2	equ	0xFDD
 12409                           fsr2h	equ	0xFDA
 12410                           fsr2l	equ	0xFD9
 12411                           status	equ	0xFD8
 12412                           
 12413 ;; *************** function i2__doprnt *****************
 12414 ;; Defined at:
 12415 ;;		line 458 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
 12416 ;; Parameters:    Size  Location     Type
 12417 ;;  pb              2   12[COMRAM] PTR struct __prbuf
 12418 ;;		 -> sprintf@pb(4), printf@pb(4), 
 12419 ;;  f               2   14[COMRAM] PTR const unsigned char 
 12420 ;;		 -> STR_27(14), STR_26(15), STR_25(8), STR_24(5), 
 12421 ;;		 -> STR_23(5), STR_22(5), STR_21(5), STR_20(20), 
 12422 ;;		 -> STR_19(20), STR_18(22), STR_17(19), menu(720), 
 12423 ;;		 -> STR_16(15), STR_15(6), STR_14(24), STR_13(7), 
 12424 ;;		 -> STR_12(18), STR_11(19), STR_10(16), STR_9(12), 
 12425 ;;		 -> STR_8(19), STR_7(17), STR_6(14), STR_5(12), 
 12426 ;;		 -> STR_4(16), STR_3(25), STR_2(23), STR_1(23), 
 12427 ;;		 -> display1(18), display0(18), 
 12428 ;;  ap              2   16[COMRAM] PTR PTR void 
 12429 ;;		 -> sprintf@ap(2), printf@ap(2), 
 12430 ;; Auto vars:     Size  Location     Type
 12431 ;;  _doprnt         4    0        struct .
 12432 ;;  _doprnt         2   31[COMRAM] int 
 12433 ;;  _doprnt         2   28[COMRAM] unsigned int 
 12434 ;;  _doprnt         2   26[COMRAM] PTR const unsigned char 
 12435 ;;		 -> ?_sprintf(2), ?_printf(2), NULL(0), STR_28(7), 
 12436 ;;		 -> _doprnt@c(1), menu(720), ADRESH(1), ndisplay1(18), 
 12437 ;;		 -> ndisplay0(18), 
 12438 ;;  _doprnt         2   24[COMRAM] unsigned int 
 12439 ;;  _doprnt         1   33[COMRAM] char 
 12440 ;;  _doprnt         1   30[COMRAM] unsigned char 
 12441 ;;  _doprnt         1   23[COMRAM] char 
 12442 ;;  _doprnt         1   22[COMRAM] unsigned char 
 12443 ;; Return value:  Size  Location     Type
 12444 ;;                  2   12[COMRAM] int 
 12445 ;; Registers used:
 12446 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12447 ;; Tracked objects:
 12448 ;;		On entry : 0/0
 12449 ;;		On exit  : 0/0
 12450 ;;		Unchanged: 0/0
 12451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12452 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12453 ;;      Locals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12454 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12455 ;;      Totals:        22       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12456 ;;Total ram usage:       22 bytes
 12457 ;; Hardware stack levels used:    1
 12458 ;; Hardware stack levels required when called:    2
 12459 ;; This function calls:
 12460 ;;		Absolute function
 12461 ;;		i2___lwdiv
 12462 ;;		i2___lwmod
 12463 ;;		i2___wmul
 12464 ;;		i2_isdigit
 12465 ;;		i2_putch
 12466 ;; This function is called by:
 12467 ;;		i2_printf
 12468 ;; This function uses a non-reentrant model
 12469 ;;
 12470                           
 12471                           	psect	text34
 12472  000996                     __ptext34:
 12473                           	opt stack 0
 12474  000996                     i2__doprnt:
 12475                           	opt stack 20
 12476                           
 12477                           ;doprnt.c: 499: signed char c;
 12478                           ;doprnt.c: 501: int width;
 12479                           ;doprnt.c: 506: signed char prec;
 12480                           ;doprnt.c: 508: unsigned char flag;
 12481                           ;doprnt.c: 523: union {
 12482                           ;doprnt.c: 524: unsigned long vd;
 12483                           ;doprnt.c: 525: double integ;
 12484                           ;doprnt.c: 526: } tmpval;
 12485                           ;doprnt.c: 528: unsigned int val;
 12486                           ;doprnt.c: 529: unsigned len;
 12487                           ;doprnt.c: 530: const char * cp;
 12488                           ;doprnt.c: 536: while(c = *f++) {
 12489                           
 12490                           ;incstack = 0
 12491  000996  EFD6  F008         	goto	i2l8328
 12492  00099A                     i2l8122:
 12493                           
 12494                           ;doprnt.c: 538: if(c != '%')
 12495  00099A  0E25               	movlw	37
 12496  00099C  1822               	xorwf	i2__doprnt@c,w,c
 12497  00099E  B4D8               	btfsc	status,2,c
 12498  0009A0  D036               	goto	i2l8132
 12499                           
 12500                           ;doprnt.c: 540: {
 12501                           ;doprnt.c: 541: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 12502  0009A2  EE20 F002          	lfsr	2,2
 12503  0009A6  500D               	movf	i2__doprnt@pb,w,c
 12504  0009A8  26D9               	addwf	fsr2l,f,c
 12505  0009AA  500E               	movf	i2__doprnt@pb+1,w,c
 12506  0009AC  22DA               	addwfc	fsr2h,f,c
 12507  0009AE  50DE               	movf	postinc2,w,c
 12508  0009B0  10DE               	iorwf	postinc2,w,c
 12509  0009B2  B4D8               	btfsc	status,2,c
 12510  0009B4  D016               	goto	i2l8128
 12511  0009B6  EE20 F002          	lfsr	2,2
 12512  0009BA  500D               	movf	i2__doprnt@pb,w,c
 12513  0009BC  26D9               	addwf	fsr2l,f,c
 12514  0009BE  500E               	movf	i2__doprnt@pb+1,w,c
 12515  0009C0  22DA               	addwfc	fsr2h,f,c
 12516  0009C2  CFDE F013          	movff	postinc2,??i2__doprnt
 12517  0009C6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12518  0009CA  D801               	call	i2u1347_48
 12519  0009CC  D3EF               	goto	i2l8328
 12520  0009CE                     i2u1347_48:
 12521  0009CE  0005               	push	
 12522  0009D0  6EFA               	movwf	pclath,c
 12523  0009D2  5013               	movf	??i2__doprnt,w,c
 12524  0009D4  6EFD               	movwf	tosl,c
 12525  0009D6  5014               	movf	??i2__doprnt+1,w,c
 12526  0009D8  6EFE               	movwf	tosh,c
 12527  0009DA  6AFF               	clrf	tosu,c
 12528  0009DC  50FA               	movf	pclath,w,c
 12529  0009DE  5022               	movf	i2__doprnt@c,w,c
 12530  0009E0  0012               	return		;indir
 12531  0009E2                     i2l8128:
 12532  0009E2  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12533  0009E6  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12534  0009EA  CFDE F013          	movff	postinc2,??i2__doprnt
 12535  0009EE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12536  0009F2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12537  0009F6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12538  0009FA  C022  FFDF         	movff	i2__doprnt@c,indf2
 12539  0009FE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12540  000A02  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12541  000A06  2ADE               	incf	postinc2,f,c
 12542  000A08  0E00               	movlw	0
 12543  000A0A  22DD               	addwfc	postdec2,f,c
 12544                           
 12545                           ;doprnt.c: 542: continue;
 12546  000A0C  D3CF               	goto	i2l8328
 12547  000A0E                     i2l8132:
 12548                           
 12549                           ;doprnt.c: 543: }
 12550                           ;doprnt.c: 546: width = 0;
 12551  000A0E  0E00               	movlw	0
 12552  000A10  6E21               	movwf	i2__doprnt@width+1,c
 12553  000A12  0E00               	movlw	0
 12554  000A14  6E20               	movwf	i2__doprnt@width,c
 12555                           
 12556                           ;doprnt.c: 548: flag = 0;
 12557  000A16  0E00               	movlw	0
 12558  000A18  6E1F               	movwf	i2__doprnt@flag,c
 12559                           
 12560                           ;doprnt.c: 551: switch(*f) {
 12561                           
 12562                           ;doprnt.c: 550: for(;;) {
 12563  000A1A  D003               	goto	i2l8138
 12564  000A1C                     i2l8134:
 12565                           
 12566                           ;doprnt.c: 580: flag |= 0x04;
 12567  000A1C  841F               	bsf	i2__doprnt@flag,2,c
 12568                           
 12569                           ;doprnt.c: 581: f++;
 12570  000A1E  4A0F               	infsnz	i2__doprnt@f,f,c
 12571  000A20  2A10               	incf	i2__doprnt@f+1,f,c
 12572  000A22                     i2l8138:
 12573  000A22  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 12574  000A26  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 12575  000A2A  0E00               	movlw	low (__mediumconst shr (0+16))
 12576  000A2C  6EF8               	movwf	tblptru,c
 12577  000A2E  0E0F               	movlw	(high __ramtop+-1)
 12578  000A30  64F7               	cpfsgt	tblptrh,c
 12579  000A32  D003               	bra	i2u1348_47
 12580  000A34  0008               	tblrd		*
 12581  000A36  50F5               	movf	tablat,w,c
 12582  000A38  D005               	bra	i2u1348_40
 12583  000A3A                     i2u1348_47:
 12584  000A3A  CFF6 FFE9          	movff	tblptrl,fsr0l
 12585  000A3E  CFF7 FFEA          	movff	tblptrh,fsr0h
 12586  000A42  50EF               	movf	indf0,w,c
 12587  000A44                     i2u1348_40:
 12588                           
 12589                           ; Switch size 1, requested type "space"
 12590                           ; Number of cases is 1, Range of values is 48 to 48
 12591                           ; switch strategies available:
 12592                           ; Name         Instructions Cycles
 12593                           ; simple_byte            4     3 (average)
 12594                           ;	Chosen strategy is simple_byte
 12595  000A44  0A30               	xorlw	48	; case 48
 12596  000A46  B4D8               	btfsc	status,2,c
 12597  000A48  D7E9               	goto	i2l8134
 12598                           
 12599                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
 12600                           
 12601                           ;doprnt.c: 586: }
 12602                           
 12603                           ;doprnt.c: 585: break;
 12604  000A4A  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 12605  000A4E  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 12606  000A52  0E00               	movlw	low (__mediumconst shr (0+16))
 12607  000A54  6EF8               	movwf	tblptru,c
 12608  000A56  0E0F               	movlw	(high __ramtop+-1)
 12609  000A58  64F7               	cpfsgt	tblptrh,c
 12610  000A5A  D003               	bra	i2u1349_47
 12611  000A5C  0008               	tblrd		*
 12612  000A5E  50F5               	movf	tablat,w,c
 12613  000A60  D005               	bra	i2u1349_40
 12614  000A62                     i2u1349_47:
 12615  000A62  CFF6 FFE9          	movff	tblptrl,fsr0l
 12616  000A66  CFF7 FFEA          	movff	tblptrh,fsr0h
 12617  000A6A  50EF               	movf	indf0,w,c
 12618  000A6C                     i2u1349_40:
 12619  000A6C  ECEF  F01E         	call	i2_isdigit
 12620  000A70  A0D8               	btfss	status,0,c
 12621  000A72  D154               	goto	i2l8204
 12622                           
 12623                           ;doprnt.c: 598: width = 0;
 12624  000A74  0E00               	movlw	0
 12625  000A76  6E21               	movwf	i2__doprnt@width+1,c
 12626  000A78  0E00               	movlw	0
 12627  000A7A  6E20               	movwf	i2__doprnt@width,c
 12628  000A7C                     i2l8144:
 12629                           
 12630                           ;doprnt.c: 600: width *= 10;
 12631  000A7C  C020  F001         	movff	i2__doprnt@width,i2___wmul@multiplier
 12632  000A80  C021  F002         	movff	i2__doprnt@width+1,i2___wmul@multiplier+1
 12633  000A84  0E00               	movlw	0
 12634  000A86  6E04               	movwf	i2___wmul@multiplicand+1,c
 12635  000A88  0E0A               	movlw	10
 12636  000A8A  6E03               	movwf	i2___wmul@multiplicand,c
 12637  000A8C  ECDC  F01E         	call	i2___wmul	;wreg free
 12638  000A90  C001  F020         	movff	?i2___wmul,i2__doprnt@width
 12639  000A94  C002  F021         	movff	?i2___wmul+1,i2__doprnt@width+1
 12640                           
 12641                           ;doprnt.c: 601: width += *f++ - '0';
 12642  000A98  0ED0               	movlw	208
 12643  000A9A  6E13               	movwf	??i2__doprnt& (0+255),c
 12644  000A9C  0EFF               	movlw	255
 12645  000A9E  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 12646  000AA0  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 12647  000AA4  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 12648  000AA8  0E00               	movlw	low (__mediumconst shr (0+16))
 12649  000AAA  6EF8               	movwf	tblptru,c
 12650  000AAC  0E0F               	movlw	(high __ramtop+-1)
 12651  000AAE  64F7               	cpfsgt	tblptrh,c
 12652  000AB0  D003               	bra	i2u1351_47
 12653  000AB2  0008               	tblrd		*
 12654  000AB4  50F5               	movf	tablat,w,c
 12655  000AB6  D005               	bra	i2u1351_40
 12656  000AB8                     i2u1351_47:
 12657  000AB8  CFF6 FFE9          	movff	tblptrl,fsr0l
 12658  000ABC  CFF7 FFEA          	movff	tblptrh,fsr0h
 12659  000AC0  50EF               	movf	indf0,w,c
 12660  000AC2                     i2u1351_40:
 12661  000AC2  6E15               	movwf	(??i2__doprnt+2)& (0+255),c
 12662  000AC4  6A16               	clrf	(??i2__doprnt+3)& (0+255),c
 12663  000AC6  5013               	movf	??i2__doprnt,w,c
 12664  000AC8  2615               	addwf	??i2__doprnt+2,f,c
 12665  000ACA  5014               	movf	??i2__doprnt+1,w,c
 12666  000ACC  2216               	addwfc	??i2__doprnt+3,f,c
 12667  000ACE  5015               	movf	??i2__doprnt+2,w,c
 12668  000AD0  2620               	addwf	i2__doprnt@width,f,c
 12669  000AD2  5016               	movf	??i2__doprnt+3,w,c
 12670  000AD4  2221               	addwfc	i2__doprnt@width+1,f,c
 12671  000AD6  4A0F               	infsnz	i2__doprnt@f,f,c
 12672  000AD8  2A10               	incf	i2__doprnt@f+1,f,c
 12673                           
 12674                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
 12675  000ADA  C00F  FFF6         	movff	i2__doprnt@f,tblptrl
 12676  000ADE  C010  FFF7         	movff	i2__doprnt@f+1,tblptrh
 12677  000AE2  0E00               	movlw	low (__mediumconst shr (0+16))
 12678  000AE4  6EF8               	movwf	tblptru,c
 12679  000AE6  0E0F               	movlw	(high __ramtop+-1)
 12680  000AE8  64F7               	cpfsgt	tblptrh,c
 12681  000AEA  D003               	bra	i2u1352_47
 12682  000AEC  0008               	tblrd		*
 12683  000AEE  50F5               	movf	tablat,w,c
 12684  000AF0  D005               	bra	i2u1352_40
 12685  000AF2                     i2u1352_47:
 12686  000AF2  CFF6 FFE9          	movff	tblptrl,fsr0l
 12687  000AF6  CFF7 FFEA          	movff	tblptrh,fsr0h
 12688  000AFA  50EF               	movf	indf0,w,c
 12689  000AFC                     i2u1352_40:
 12690  000AFC  ECEF  F01E         	call	i2_isdigit
 12691  000B00  A0D8               	btfss	status,0,c
 12692  000B02  D10C               	goto	i2l8204
 12693  000B04  D7BB               	goto	i2l8144
 12694  000B06                     i2l8152:
 12695                           
 12696                           ;doprnt.c: 721: flag |= 0x80;
 12697  000B06  8E1F               	bsf	i2__doprnt@flag,7,c
 12698                           
 12699                           ;doprnt.c: 723: break;
 12700  000B08  D135               	goto	i2l533
 12701  000B0A                     i2l8154:
 12702                           
 12703                           ;doprnt.c: 734: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
 12704  000B0A  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 12705  000B0E  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 12706  000B12  CFDF F013          	movff	indf2,??i2__doprnt
 12707  000B16  0E02               	movlw	2
 12708  000B18  26DE               	addwf	postinc2,f,c
 12709  000B1A  CFDF F014          	movff	indf2,??i2__doprnt+1
 12710  000B1E  0E00               	movlw	0
 12711  000B20  22DD               	addwfc	postdec2,f,c
 12712  000B22  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12713  000B26  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12714  000B2A  CFDE F01B          	movff	postinc2,i2__doprnt@cp
 12715  000B2E  CFDD F01C          	movff	postdec2,i2__doprnt@cp+1
 12716                           
 12717                           ;doprnt.c: 740: if(!cp)
 12718  000B32  501B               	movf	i2__doprnt@cp,w,c
 12719  000B34  101C               	iorwf	i2__doprnt@cp+1,w,c
 12720  000B36  A4D8               	btfss	status,2,c
 12721  000B38  D004               	goto	i2l8160
 12722                           
 12723                           ;doprnt.c: 741: cp = "(null)";
 12724  000B3A  0EE5               	movlw	low STR_28
 12725  000B3C  6E1B               	movwf	i2__doprnt@cp,c
 12726  000B3E  0EFF               	movlw	high STR_28
 12727  000B40  6E1C               	movwf	i2__doprnt@cp+1,c
 12728  000B42                     i2l8160:
 12729                           
 12730                           ;doprnt.c: 745: len = 0;
 12731  000B42  0E00               	movlw	0
 12732  000B44  6E1A               	movwf	i2__doprnt@len+1,c
 12733  000B46  0E00               	movlw	0
 12734  000B48  6E19               	movwf	i2__doprnt@len,c
 12735                           
 12736                           ;doprnt.c: 746: while(cp[len])
 12737  000B4A  D002               	goto	i2l8164
 12738  000B4C                     i2l8162:
 12739                           
 12740                           ;doprnt.c: 747: len++;
 12741  000B4C  4A19               	infsnz	i2__doprnt@len,f,c
 12742  000B4E  2A1A               	incf	i2__doprnt@len+1,f,c
 12743  000B50                     i2l8164:
 12744  000B50  5019               	movf	i2__doprnt@len,w,c
 12745  000B52  241B               	addwf	i2__doprnt@cp,w,c
 12746  000B54  6E13               	movwf	??i2__doprnt& (0+255),c
 12747  000B56  501A               	movf	i2__doprnt@len+1,w,c
 12748  000B58  201C               	addwfc	i2__doprnt@cp+1,w,c
 12749  000B5A  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 12750  000B5C  C013  FFF6         	movff	??i2__doprnt,tblptrl
 12751  000B60  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 12752  000B64  0E00               	movlw	low (__mediumconst shr (0+16))
 12753  000B66  6EF8               	movwf	tblptru,c
 12754  000B68  0E0F               	movlw	(high __ramtop+-1)
 12755  000B6A  64F7               	cpfsgt	tblptrh,c
 12756  000B6C  D003               	bra	i2u1355_47
 12757  000B6E  0008               	tblrd		*
 12758  000B70  50F5               	movf	tablat,w,c
 12759  000B72  D005               	bra	i2u1355_40
 12760  000B74                     i2u1355_47:
 12761  000B74  CFF6 FFE9          	movff	tblptrl,fsr0l
 12762  000B78  CFF7 FFEA          	movff	tblptrh,fsr0h
 12763  000B7C  50EF               	movf	indf0,w,c
 12764  000B7E                     i2u1355_40:
 12765  000B7E  0900               	iorlw	0
 12766  000B80  A4D8               	btfss	status,2,c
 12767  000B82  D7E4               	goto	i2l8162
 12768  000B84                     i2l8166:
 12769                           
 12770                           ;doprnt.c: 757: if(width > len)
 12771  000B84  5020               	movf	i2__doprnt@width,w,c
 12772  000B86  5C19               	subwf	i2__doprnt@len,w,c
 12773  000B88  5021               	movf	i2__doprnt@width+1,w,c
 12774  000B8A  581A               	subwfb	i2__doprnt@len+1,w,c
 12775  000B8C  B0D8               	btfsc	status,0,c
 12776  000B8E  D005               	goto	i2l8170
 12777                           
 12778                           ;doprnt.c: 758: width -= len;
 12779  000B90  5019               	movf	i2__doprnt@len,w,c
 12780  000B92  5E20               	subwf	i2__doprnt@width,f,c
 12781  000B94  501A               	movf	i2__doprnt@len+1,w,c
 12782  000B96  5A21               	subwfb	i2__doprnt@width+1,f,c
 12783  000B98  D03A               	goto	i2l8180
 12784  000B9A                     i2l8170:
 12785                           
 12786                           ;doprnt.c: 759: else
 12787                           ;doprnt.c: 760: width = 0;
 12788  000B9A  0E00               	movlw	0
 12789  000B9C  6E21               	movwf	i2__doprnt@width+1,c
 12790  000B9E  0E00               	movlw	0
 12791  000BA0  6E20               	movwf	i2__doprnt@width,c
 12792                           
 12793                           ;doprnt.c: 764: while(width--)
 12794  000BA2  D035               	goto	i2l8180
 12795  000BA4                     i2l8172:
 12796                           
 12797                           ;doprnt.c: 765: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 12798  000BA4  EE20 F002          	lfsr	2,2
 12799  000BA8  500D               	movf	i2__doprnt@pb,w,c
 12800  000BAA  26D9               	addwf	fsr2l,f,c
 12801  000BAC  500E               	movf	i2__doprnt@pb+1,w,c
 12802  000BAE  22DA               	addwfc	fsr2h,f,c
 12803  000BB0  50DE               	movf	postinc2,w,c
 12804  000BB2  10DE               	iorwf	postinc2,w,c
 12805  000BB4  B4D8               	btfsc	status,2,c
 12806  000BB6  D016               	goto	i2l8176
 12807  000BB8  EE20 F002          	lfsr	2,2
 12808  000BBC  500D               	movf	i2__doprnt@pb,w,c
 12809  000BBE  26D9               	addwf	fsr2l,f,c
 12810  000BC0  500E               	movf	i2__doprnt@pb+1,w,c
 12811  000BC2  22DA               	addwfc	fsr2h,f,c
 12812  000BC4  CFDE F013          	movff	postinc2,??i2__doprnt
 12813  000BC8  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12814  000BCC  D801               	call	i2u1359_48
 12815  000BCE  D01F               	goto	i2l8180
 12816  000BD0                     i2u1359_48:
 12817  000BD0  0005               	push	
 12818  000BD2  6EFA               	movwf	pclath,c
 12819  000BD4  5013               	movf	??i2__doprnt,w,c
 12820  000BD6  6EFD               	movwf	tosl,c
 12821  000BD8  5014               	movf	??i2__doprnt+1,w,c
 12822  000BDA  6EFE               	movwf	tosh,c
 12823  000BDC  6AFF               	clrf	tosu,c
 12824  000BDE  50FA               	movf	pclath,w,c
 12825  000BE0  0E20               	movlw	32
 12826  000BE2  0012               	return		;indir
 12827  000BE4                     i2l8176:
 12828  000BE4  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12829  000BE8  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12830  000BEC  CFDE F013          	movff	postinc2,??i2__doprnt
 12831  000BF0  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12832  000BF4  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12833  000BF8  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12834  000BFC  0E20               	movlw	32
 12835  000BFE  6EDF               	movwf	indf2,c
 12836  000C00  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12837  000C04  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12838  000C08  2ADE               	incf	postinc2,f,c
 12839  000C0A  0E00               	movlw	0
 12840  000C0C  22DD               	addwfc	postdec2,f,c
 12841  000C0E                     i2l8180:
 12842  000C0E  0620               	decf	i2__doprnt@width,f,c
 12843  000C10  A0D8               	btfss	status,0,c
 12844  000C12  0621               	decf	i2__doprnt@width+1,f,c
 12845  000C14  2820               	incf	i2__doprnt@width,w,c
 12846  000C16  E1C6               	bnz	i2l8172
 12847  000C18  2821               	incf	i2__doprnt@width+1,w,c
 12848  000C1A  B4D8               	btfsc	status,2,c
 12849  000C1C  D05B               	goto	i2l8194
 12850  000C1E  D7C2               	goto	i2l8172
 12851  000C20                     i2l8182:
 12852                           
 12853                           ;doprnt.c: 768: if(pb->func) (pb->func(*cp++)); else ((*pb->ptr++ = *cp++));
 12854  000C20  EE20 F002          	lfsr	2,2
 12855  000C24  500D               	movf	i2__doprnt@pb,w,c
 12856  000C26  26D9               	addwf	fsr2l,f,c
 12857  000C28  500E               	movf	i2__doprnt@pb+1,w,c
 12858  000C2A  22DA               	addwfc	fsr2h,f,c
 12859  000C2C  50DE               	movf	postinc2,w,c
 12860  000C2E  10DE               	iorwf	postinc2,w,c
 12861  000C30  B4D8               	btfsc	status,2,c
 12862  000C32  D029               	goto	i2l8188
 12863  000C34  EE20 F002          	lfsr	2,2
 12864  000C38  500D               	movf	i2__doprnt@pb,w,c
 12865  000C3A  26D9               	addwf	fsr2l,f,c
 12866  000C3C  500E               	movf	i2__doprnt@pb+1,w,c
 12867  000C3E  22DA               	addwfc	fsr2h,f,c
 12868  000C40  CFDE F013          	movff	postinc2,??i2__doprnt
 12869  000C44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12870  000C48  D801               	call	i2u1362_48
 12871  000C4A  D01A               	goto	i2l8186
 12872  000C4C                     i2u1362_48:
 12873  000C4C  0005               	push	
 12874  000C4E  6EFA               	movwf	pclath,c
 12875  000C50  5013               	movf	??i2__doprnt,w,c
 12876  000C52  6EFD               	movwf	tosl,c
 12877  000C54  5014               	movf	??i2__doprnt+1,w,c
 12878  000C56  6EFE               	movwf	tosh,c
 12879  000C58  6AFF               	clrf	tosu,c
 12880  000C5A  50FA               	movf	pclath,w,c
 12881  000C5C  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 12882  000C60  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 12883  000C64  0E00               	movlw	low (__mediumconst shr (0+16))
 12884  000C66  6EF8               	movwf	tblptru,c
 12885  000C68  0E0F               	movlw	(high __ramtop+-1)
 12886  000C6A  64F7               	cpfsgt	tblptrh,c
 12887  000C6C  D003               	bra	i2u1363_47
 12888  000C6E  0008               	tblrd		*
 12889  000C70  50F5               	movf	tablat,w,c
 12890  000C72  D005               	bra	i2u1363_40
 12891  000C74                     i2u1363_47:
 12892  000C74  CFF6 FFE9          	movff	tblptrl,fsr0l
 12893  000C78  CFF7 FFEA          	movff	tblptrh,fsr0h
 12894  000C7C  50EF               	movf	indf0,w,c
 12895  000C7E                     i2u1363_40:
 12896  000C7E  0012               	return		;indir
 12897  000C80                     i2l8186:
 12898  000C80  4A1B               	infsnz	i2__doprnt@cp,f,c
 12899  000C82  2A1C               	incf	i2__doprnt@cp+1,f,c
 12900  000C84  D027               	goto	i2l8194
 12901  000C86                     i2l8188:
 12902  000C86  C01B  FFF6         	movff	i2__doprnt@cp,tblptrl
 12903  000C8A  C01C  FFF7         	movff	i2__doprnt@cp+1,tblptrh
 12904  000C8E  0E00               	movlw	low (__mediumconst shr (0+16))
 12905  000C90  6EF8               	movwf	tblptru,c
 12906  000C92  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12907  000C96  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12908  000C9A  CFDE F013          	movff	postinc2,??i2__doprnt
 12909  000C9E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 12910  000CA2  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12911  000CA6  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12912  000CAA  0E0F               	movlw	(high __ramtop+-1)
 12913  000CAC  64F7               	cpfsgt	tblptrh,c
 12914  000CAE  D003               	bra	i2u1364_47
 12915  000CB0  0008               	tblrd		*
 12916  000CB2  50F5               	movf	tablat,w,c
 12917  000CB4  D005               	bra	i2u1364_40
 12918  000CB6                     i2u1364_47:
 12919  000CB6  CFF6 FFE9          	movff	tblptrl,fsr0l
 12920  000CBA  CFF7 FFEA          	movff	tblptrh,fsr0h
 12921  000CBE  50EF               	movf	indf0,w,c
 12922  000CC0                     i2u1364_40:
 12923  000CC0  6EDF               	movwf	indf2,c
 12924  000CC2  4A1B               	infsnz	i2__doprnt@cp,f,c
 12925  000CC4  2A1C               	incf	i2__doprnt@cp+1,f,c
 12926  000CC6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 12927  000CCA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 12928  000CCE  2ADE               	incf	postinc2,f,c
 12929  000CD0  0E00               	movlw	0
 12930  000CD2  22DD               	addwfc	postdec2,f,c
 12931  000CD4                     i2l8194:
 12932  000CD4  0619               	decf	i2__doprnt@len,f,c
 12933  000CD6  A0D8               	btfss	status,0,c
 12934  000CD8  061A               	decf	i2__doprnt@len+1,f,c
 12935  000CDA  2819               	incf	i2__doprnt@len,w,c
 12936  000CDC  E1A1               	bnz	i2l8182
 12937  000CDE  281A               	incf	i2__doprnt@len+1,w,c
 12938  000CE0  B4D8               	btfsc	status,2,c
 12939  000CE2  D264               	goto	i2l8328
 12940  000CE4  D79D               	goto	i2l8182
 12941  000CE6                     i2l8196:
 12942                           
 12943                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
 12944  000CE6  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 12945  000CEA  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 12946  000CEE  CFDF F013          	movff	indf2,??i2__doprnt
 12947  000CF2  0E02               	movlw	2
 12948  000CF4  26DE               	addwf	postinc2,f,c
 12949  000CF6  CFDF F014          	movff	indf2,??i2__doprnt+1
 12950  000CFA  0E00               	movlw	0
 12951  000CFC  22DD               	addwfc	postdec2,f,c
 12952  000CFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 12953  000D02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 12954  000D06  50DF               	movf	indf2,w,c
 12955  000D08  6E22               	movwf	i2__doprnt@c,c
 12956  000D0A                     i2l8198:
 12957                           
 12958                           ;doprnt.c: 805: cp = (char *)&c;
 12959  000D0A  0E22               	movlw	low i2__doprnt@c
 12960  000D0C  6E1B               	movwf	i2__doprnt@cp,c
 12961  000D0E  0E00               	movlw	high i2__doprnt@c
 12962  000D10  6E1C               	movwf	i2__doprnt@cp+1,c
 12963                           
 12964                           ;doprnt.c: 806: len = 1;
 12965  000D12  0E00               	movlw	0
 12966  000D14  6E1A               	movwf	i2__doprnt@len+1,c
 12967  000D16  0E01               	movlw	1
 12968  000D18  6E19               	movwf	i2__doprnt@len,c
 12969                           
 12970                           ;doprnt.c: 807: goto dostring;
 12971  000D1A  D734               	goto	i2l8166
 12972  000D1C                     i2l8204:
 12973  000D1C  500F               	movf	i2__doprnt@f,w,c
 12974  000D1E  6E13               	movwf	??i2__doprnt& (0+255),c
 12975  000D20  5010               	movf	i2__doprnt@f+1,w,c
 12976  000D22  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 12977  000D24  4A0F               	infsnz	i2__doprnt@f,f,c
 12978  000D26  2A10               	incf	i2__doprnt@f+1,f,c
 12979  000D28  C013  FFF6         	movff	??i2__doprnt,tblptrl
 12980  000D2C  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 12981  000D30  0E00               	movlw	low (__mediumconst shr (0+16))
 12982  000D32  6EF8               	movwf	tblptru,c
 12983  000D34  0E0F               	movlw	(high __ramtop+-1)
 12984  000D36  64F7               	cpfsgt	tblptrh,c
 12985  000D38  D003               	bra	i2u1366_47
 12986  000D3A  0008               	tblrd		*
 12987  000D3C  50F5               	movf	tablat,w,c
 12988  000D3E  D005               	bra	i2u1366_40
 12989  000D40                     i2u1366_47:
 12990  000D40  CFF6 FFE9          	movff	tblptrl,fsr0l
 12991  000D44  CFF7 FFEA          	movff	tblptrh,fsr0h
 12992  000D48  50EF               	movf	indf0,w,c
 12993  000D4A                     i2u1366_40:
 12994  000D4A  6E22               	movwf	i2__doprnt@c,c
 12995  000D4C  5022               	movf	i2__doprnt@c,w,c
 12996                           
 12997                           ; Switch size 1, requested type "space"
 12998                           ; Number of cases is 6, Range of values is 0 to 120
 12999                           ; switch strategies available:
 13000                           ; Name         Instructions Cycles
 13001                           ; simple_byte           19    10 (average)
 13002                           ;	Chosen strategy is simple_byte
 13003  000D4E  0A00               	xorlw	0	; case 0
 13004  000D50  B4D8               	btfsc	status,2,c
 13005  000D52  D248               	goto	i2l8330
 13006  000D54  0A63               	xorlw	99	; case 99
 13007  000D56  B4D8               	btfsc	status,2,c
 13008  000D58  D7C6               	goto	i2l8196
 13009  000D5A  0A07               	xorlw	7	; case 100
 13010  000D5C  B4D8               	btfsc	status,2,c
 13011  000D5E  D00A               	goto	i2l533
 13012  000D60  0A0D               	xorlw	13	; case 105
 13013  000D62  B4D8               	btfsc	status,2,c
 13014  000D64  D007               	goto	i2l533
 13015  000D66  0A1A               	xorlw	26	; case 115
 13016  000D68  B4D8               	btfsc	status,2,c
 13017  000D6A  D6CF               	goto	i2l8154
 13018  000D6C  0A0B               	xorlw	11	; case 120
 13019  000D6E  B4D8               	btfsc	status,2,c
 13020  000D70  D6CA               	goto	i2l8152
 13021  000D72  D7CB               	goto	i2l8198
 13022  000D74                     i2l533:
 13023                           
 13024                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
 13025  000D74  BE1F               	btfsc	i2__doprnt@flag,7,c
 13026  000D76  D01D               	goto	i2l8214
 13027                           
 13028                           ;doprnt.c: 1253: {
 13029                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
 13030  000D78  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 13031  000D7C  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 13032  000D80  CFDF F013          	movff	indf2,??i2__doprnt
 13033  000D84  0E02               	movlw	2
 13034  000D86  26DE               	addwf	postinc2,f,c
 13035  000D88  CFDF F014          	movff	indf2,??i2__doprnt+1
 13036  000D8C  0E00               	movlw	0
 13037  000D8E  22DD               	addwfc	postdec2,f,c
 13038  000D90  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13039  000D94  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13040  000D98  CFDE F01D          	movff	postinc2,i2__doprnt@val
 13041  000D9C  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 13042                           
 13043                           ;doprnt.c: 1261: if((int)val < 0) {
 13044  000DA0  AE1E               	btfss	i2__doprnt@val+1,7,c
 13045  000DA2  D052               	goto	i2l8246
 13046                           
 13047                           ;doprnt.c: 1262: flag |= 0x03;
 13048  000DA4  0E03               	movlw	3
 13049  000DA6  121F               	iorwf	i2__doprnt@flag,f,c
 13050                           
 13051                           ;doprnt.c: 1263: val = -val;
 13052  000DA8  6C1D               	negf	i2__doprnt@val,c
 13053  000DAA  1E1E               	comf	i2__doprnt@val+1,f,c
 13054  000DAC  B0D8               	btfsc	status,0,c
 13055  000DAE  2A1E               	incf	i2__doprnt@val+1,f,c
 13056                           
 13057                           ;doprnt.c: 1264: }
 13058                           ;doprnt.c: 1266: }
 13059  000DB0  D04B               	goto	i2l8246
 13060  000DB2                     i2l8214:
 13061                           
 13062                           ;doprnt.c: 1268: else
 13063                           ;doprnt.c: 1273: {
 13064                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
 13065  000DB2  C011  FFD9         	movff	i2__doprnt@ap,fsr2l
 13066  000DB6  C012  FFDA         	movff	i2__doprnt@ap+1,fsr2h
 13067  000DBA  CFDF F013          	movff	indf2,??i2__doprnt
 13068  000DBE  0E02               	movlw	2
 13069  000DC0  26DE               	addwf	postinc2,f,c
 13070  000DC2  CFDF F014          	movff	indf2,??i2__doprnt+1
 13071  000DC6  0E00               	movlw	0
 13072  000DC8  22DD               	addwfc	postdec2,f,c
 13073  000DCA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13074  000DCE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13075  000DD2  CFDE F01D          	movff	postinc2,i2__doprnt@val
 13076  000DD6  CFDD F01E          	movff	postdec2,i2__doprnt@val+1
 13077                           
 13078                           ;doprnt.c: 1287: }
 13079                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
 13080  000DDA  D036               	goto	i2l8246
 13081  000DDC                     i2l8216:
 13082                           
 13083                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
 13084  000DDC  0E01               	movlw	1
 13085  000DDE  6E22               	movwf	i2__doprnt@c,c
 13086  000DE0                     i2l8218:
 13087  000DE0  0E05               	movlw	5
 13088  000DE2  1822               	xorwf	i2__doprnt@c,w,c
 13089  000DE4  B4D8               	btfsc	status,2,c
 13090  000DE6  D038               	goto	i2l8248
 13091                           
 13092                           ;doprnt.c: 1306: if(val < dpowers[c])
 13093  000DE8  5022               	movf	i2__doprnt@c,w,c
 13094  000DEA  0D02               	mullw	2
 13095  000DEC  0E48               	movlw	low _dpowers
 13096  000DEE  24F3               	addwf	prodl,w,c
 13097  000DF0  6EF6               	movwf	tblptrl,c
 13098  000DF2  0EFE               	movlw	high _dpowers
 13099  000DF4  20F4               	addwfc	prodh,w,c
 13100  000DF6  6EF7               	movwf	tblptrh,c
 13101  000DF8                     	if	1	;There are 3 active tblptr bytes
 13102  000DF8  6AF8               	clrf	tblptru,c
 13103  000DFA  0E00               	movlw	low (__mediumconst shr (0+16))
 13104  000DFC  22F8               	addwfc	tblptru,f,c
 13105  000DFE                     	endif
 13106  000DFE  0009               	tblrd		*+
 13107  000E00  50F5               	movf	tablat,w,c
 13108  000E02  5C1D               	subwf	i2__doprnt@val,w,c
 13109  000E04  0009               	tblrd		*+
 13110  000E06  50F5               	movf	tablat,w,c
 13111  000E08  581E               	subwfb	i2__doprnt@val+1,w,c
 13112  000E0A  A0D8               	btfss	status,0,c
 13113  000E0C  D025               	goto	i2l8248
 13114                           
 13115                           ;doprnt.c: 1307: break;
 13116  000E0E  2A22               	incf	i2__doprnt@c,f,c
 13117  000E10  D7E7               	goto	i2l8218
 13118  000E12                     i2l8230:
 13119                           
 13120                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
 13121  000E12  0E01               	movlw	1
 13122  000E14  6E22               	movwf	i2__doprnt@c,c
 13123  000E16                     i2l8232:
 13124  000E16  0E04               	movlw	4
 13125  000E18  1822               	xorwf	i2__doprnt@c,w,c
 13126  000E1A  B4D8               	btfsc	status,2,c
 13127  000E1C  D01D               	goto	i2l8248
 13128                           
 13129                           ;doprnt.c: 1317: if(val < hexpowers[c])
 13130  000E1E  5022               	movf	i2__doprnt@c,w,c
 13131  000E20  0D02               	mullw	2
 13132  000E22  0E52               	movlw	low _hexpowers
 13133  000E24  24F3               	addwf	prodl,w,c
 13134  000E26  6EF6               	movwf	tblptrl,c
 13135  000E28  0EFE               	movlw	high _hexpowers
 13136  000E2A  20F4               	addwfc	prodh,w,c
 13137  000E2C  6EF7               	movwf	tblptrh,c
 13138  000E2E                     	if	1	;There are 3 active tblptr bytes
 13139  000E2E  6AF8               	clrf	tblptru,c
 13140  000E30  0E00               	movlw	low (__mediumconst shr (0+16))
 13141  000E32  22F8               	addwfc	tblptru,f,c
 13142  000E34                     	endif
 13143  000E34  0009               	tblrd		*+
 13144  000E36  50F5               	movf	tablat,w,c
 13145  000E38  5C1D               	subwf	i2__doprnt@val,w,c
 13146  000E3A  0009               	tblrd		*+
 13147  000E3C  50F5               	movf	tablat,w,c
 13148  000E3E  581E               	subwfb	i2__doprnt@val+1,w,c
 13149  000E40  A0D8               	btfss	status,0,c
 13150  000E42  D00A               	goto	i2l8248
 13151                           
 13152                           ;doprnt.c: 1318: break;
 13153  000E44  2A22               	incf	i2__doprnt@c,f,c
 13154  000E46  D7E7               	goto	i2l8232
 13155  000E48                     i2l8246:
 13156  000E48  501F               	movf	i2__doprnt@flag,w,c
 13157  000E4A  0B80               	andlw	128
 13158                           
 13159                           ; Switch size 1, requested type "space"
 13160                           ; Number of cases is 2, Range of values is 0 to 128
 13161                           ; switch strategies available:
 13162                           ; Name         Instructions Cycles
 13163                           ; simple_byte            7     4 (average)
 13164                           ;	Chosen strategy is simple_byte
 13165  000E4C  0A00               	xorlw	0	; case 0
 13166  000E4E  B4D8               	btfsc	status,2,c
 13167  000E50  D7C5               	goto	i2l8216
 13168  000E52  0A80               	xorlw	128	; case 128
 13169  000E54  B4D8               	btfsc	status,2,c
 13170  000E56  D7DD               	goto	i2l8230
 13171  000E58                     i2l8248:
 13172                           
 13173                           ;doprnt.c: 1345: if(width && flag & 0x03)
 13174  000E58  5020               	movf	i2__doprnt@width,w,c
 13175  000E5A  1021               	iorwf	i2__doprnt@width+1,w,c
 13176  000E5C  B4D8               	btfsc	status,2,c
 13177  000E5E  D009               	goto	i2l8254
 13178  000E60  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 13179  000E64  0E03               	movlw	3
 13180  000E66  1613               	andwf	??i2__doprnt,f,c
 13181  000E68  B4D8               	btfsc	status,2,c
 13182  000E6A  D003               	goto	i2l8254
 13183                           
 13184                           ;doprnt.c: 1346: width--;
 13185  000E6C  0620               	decf	i2__doprnt@width,f,c
 13186  000E6E  A0D8               	btfss	status,0,c
 13187  000E70  0621               	decf	i2__doprnt@width+1,f,c
 13188  000E72                     i2l8254:
 13189                           
 13190                           ;doprnt.c: 1381: if(width > c)
 13191  000E72  0E80               	movlw	128
 13192  000E74  BE22               	btfsc	i2__doprnt@c,7,c
 13193  000E76  0E7F               	movlw	127
 13194  000E78  6E13               	movwf	??i2__doprnt& (0+255),c
 13195  000E7A  5020               	movf	i2__doprnt@width,w,c
 13196  000E7C  5C22               	subwf	i2__doprnt@c,w,c
 13197  000E7E  5021               	movf	i2__doprnt@width+1,w,c
 13198  000E80  0A80               	xorlw	128
 13199  000E82  5813               	subwfb	??i2__doprnt& (0+255),w,c
 13200  000E84  B0D8               	btfsc	status,0,c
 13201  000E86  D007               	goto	i2l8258
 13202                           
 13203                           ;doprnt.c: 1382: width -= c;
 13204  000E88  5022               	movf	i2__doprnt@c,w,c
 13205  000E8A  5E20               	subwf	i2__doprnt@width,f,c
 13206  000E8C  0E00               	movlw	0
 13207  000E8E  BE22               	btfsc	i2__doprnt@c,7,c
 13208  000E90  0EFF               	movlw	255
 13209  000E92  5A21               	subwfb	i2__doprnt@width+1,f,c
 13210  000E94  D004               	goto	i2l8260
 13211  000E96                     i2l8258:
 13212                           
 13213                           ;doprnt.c: 1383: else
 13214                           ;doprnt.c: 1384: width = 0;
 13215  000E96  0E00               	movlw	0
 13216  000E98  6E21               	movwf	i2__doprnt@width+1,c
 13217  000E9A  0E00               	movlw	0
 13218  000E9C  6E20               	movwf	i2__doprnt@width,c
 13219  000E9E                     i2l8260:
 13220                           
 13221                           ;doprnt.c: 1387: if(flag & 0x04) {
 13222  000E9E  A41F               	btfss	i2__doprnt@flag,2,c
 13223  000EA0  D078               	goto	i2l8284
 13224                           
 13225                           ;doprnt.c: 1392: if(flag & 0x03)
 13226  000EA2  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 13227  000EA6  0E03               	movlw	3
 13228  000EA8  1613               	andwf	??i2__doprnt,f,c
 13229  000EAA  B4D8               	btfsc	status,2,c
 13230  000EAC  D035               	goto	i2l8272
 13231                           
 13232                           ;doprnt.c: 1393: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 13233  000EAE  EE20 F002          	lfsr	2,2
 13234  000EB2  500D               	movf	i2__doprnt@pb,w,c
 13235  000EB4  26D9               	addwf	fsr2l,f,c
 13236  000EB6  500E               	movf	i2__doprnt@pb+1,w,c
 13237  000EB8  22DA               	addwfc	fsr2h,f,c
 13238  000EBA  50DE               	movf	postinc2,w,c
 13239  000EBC  10DE               	iorwf	postinc2,w,c
 13240  000EBE  B4D8               	btfsc	status,2,c
 13241  000EC0  D016               	goto	i2l8268
 13242  000EC2  EE20 F002          	lfsr	2,2
 13243  000EC6  500D               	movf	i2__doprnt@pb,w,c
 13244  000EC8  26D9               	addwf	fsr2l,f,c
 13245  000ECA  500E               	movf	i2__doprnt@pb+1,w,c
 13246  000ECC  22DA               	addwfc	fsr2h,f,c
 13247  000ECE  CFDE F013          	movff	postinc2,??i2__doprnt
 13248  000ED2  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13249  000ED6  D801               	call	i2u1381_48
 13250  000ED8  D01F               	goto	i2l8272
 13251  000EDA                     i2u1381_48:
 13252  000EDA  0005               	push	
 13253  000EDC  6EFA               	movwf	pclath,c
 13254  000EDE  5013               	movf	??i2__doprnt,w,c
 13255  000EE0  6EFD               	movwf	tosl,c
 13256  000EE2  5014               	movf	??i2__doprnt+1,w,c
 13257  000EE4  6EFE               	movwf	tosh,c
 13258  000EE6  6AFF               	clrf	tosu,c
 13259  000EE8  50FA               	movf	pclath,w,c
 13260  000EEA  0E2D               	movlw	45
 13261  000EEC  0012               	return		;indir
 13262  000EEE                     i2l8268:
 13263  000EEE  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13264  000EF2  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13265  000EF6  CFDE F013          	movff	postinc2,??i2__doprnt
 13266  000EFA  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13267  000EFE  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13268  000F02  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13269  000F06  0E2D               	movlw	45
 13270  000F08  6EDF               	movwf	indf2,c
 13271  000F0A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13272  000F0E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13273  000F12  2ADE               	incf	postinc2,f,c
 13274  000F14  0E00               	movlw	0
 13275  000F16  22DD               	addwfc	postdec2,f,c
 13276  000F18                     i2l8272:
 13277                           
 13278                           ;doprnt.c: 1415: if(width)
 13279  000F18  5020               	movf	i2__doprnt@width,w,c
 13280  000F1A  1021               	iorwf	i2__doprnt@width+1,w,c
 13281  000F1C  B4D8               	btfsc	status,2,c
 13282  000F1E  D0B4               	goto	i2l8306
 13283                           
 13284                           ;doprnt.c: 1417: if(pb->func) (pb->func('0')); else ((*pb->ptr++ = '0'));
 13285                           
 13286                           ;doprnt.c: 1416: do
 13287  000F20  EE20 F002          	lfsr	2,2
 13288  000F24  500D               	movf	i2__doprnt@pb,w,c
 13289  000F26  26D9               	addwf	fsr2l,f,c
 13290  000F28  500E               	movf	i2__doprnt@pb+1,w,c
 13291  000F2A  22DA               	addwfc	fsr2h,f,c
 13292  000F2C  50DE               	movf	postinc2,w,c
 13293  000F2E  10DE               	iorwf	postinc2,w,c
 13294  000F30  B4D8               	btfsc	status,2,c
 13295  000F32  D016               	goto	i2l8278
 13296  000F34  EE20 F002          	lfsr	2,2
 13297  000F38  500D               	movf	i2__doprnt@pb,w,c
 13298  000F3A  26D9               	addwf	fsr2l,f,c
 13299  000F3C  500E               	movf	i2__doprnt@pb+1,w,c
 13300  000F3E  22DA               	addwfc	fsr2h,f,c
 13301  000F40  CFDE F013          	movff	postinc2,??i2__doprnt
 13302  000F44  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13303  000F48  D801               	call	i2u1384_48
 13304  000F4A  D01F               	goto	i2l8282
 13305  000F4C                     i2u1384_48:
 13306  000F4C  0005               	push	
 13307  000F4E  6EFA               	movwf	pclath,c
 13308  000F50  5013               	movf	??i2__doprnt,w,c
 13309  000F52  6EFD               	movwf	tosl,c
 13310  000F54  5014               	movf	??i2__doprnt+1,w,c
 13311  000F56  6EFE               	movwf	tosh,c
 13312  000F58  6AFF               	clrf	tosu,c
 13313  000F5A  50FA               	movf	pclath,w,c
 13314  000F5C  0E30               	movlw	48
 13315  000F5E  0012               	return		;indir
 13316  000F60                     i2l8278:
 13317  000F60  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13318  000F64  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13319  000F68  CFDE F013          	movff	postinc2,??i2__doprnt
 13320  000F6C  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13321  000F70  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13322  000F74  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13323  000F78  0E30               	movlw	48
 13324  000F7A  6EDF               	movwf	indf2,c
 13325  000F7C  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13326  000F80  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13327  000F84  2ADE               	incf	postinc2,f,c
 13328  000F86  0E00               	movlw	0
 13329  000F88  22DD               	addwfc	postdec2,f,c
 13330  000F8A                     i2l8282:
 13331                           
 13332                           ;doprnt.c: 1418: while(--width);
 13333  000F8A  0620               	decf	i2__doprnt@width,f,c
 13334  000F8C  A0D8               	btfss	status,0,c
 13335  000F8E  0621               	decf	i2__doprnt@width+1,f,c
 13336  000F90  D7C3               	goto	i2l8272
 13337  000F92                     i2l8284:
 13338                           
 13339                           ;doprnt.c: 1422: {
 13340                           ;doprnt.c: 1424: if(width
 13341                           ;doprnt.c: 1428: )
 13342  000F92  5020               	movf	i2__doprnt@width,w,c
 13343  000F94  1021               	iorwf	i2__doprnt@width+1,w,c
 13344  000F96  B4D8               	btfsc	status,2,c
 13345  000F98  D03C               	goto	i2l8296
 13346  000F9A                     i2l8286:
 13347                           
 13348                           ;doprnt.c: 1430: if(pb->func) (pb->func(' ')); else ((*pb->ptr++ = ' '));
 13349  000F9A  EE20 F002          	lfsr	2,2
 13350  000F9E  500D               	movf	i2__doprnt@pb,w,c
 13351  000FA0  26D9               	addwf	fsr2l,f,c
 13352  000FA2  500E               	movf	i2__doprnt@pb+1,w,c
 13353  000FA4  22DA               	addwfc	fsr2h,f,c
 13354  000FA6  50DE               	movf	postinc2,w,c
 13355  000FA8  10DE               	iorwf	postinc2,w,c
 13356  000FAA  B4D8               	btfsc	status,2,c
 13357  000FAC  D016               	goto	i2l8290
 13358  000FAE  EE20 F002          	lfsr	2,2
 13359  000FB2  500D               	movf	i2__doprnt@pb,w,c
 13360  000FB4  26D9               	addwf	fsr2l,f,c
 13361  000FB6  500E               	movf	i2__doprnt@pb+1,w,c
 13362  000FB8  22DA               	addwfc	fsr2h,f,c
 13363  000FBA  CFDE F013          	movff	postinc2,??i2__doprnt
 13364  000FBE  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13365  000FC2  D801               	call	i2u1388_48
 13366  000FC4  D01F               	goto	i2l8294
 13367  000FC6                     i2u1388_48:
 13368  000FC6  0005               	push	
 13369  000FC8  6EFA               	movwf	pclath,c
 13370  000FCA  5013               	movf	??i2__doprnt,w,c
 13371  000FCC  6EFD               	movwf	tosl,c
 13372  000FCE  5014               	movf	??i2__doprnt+1,w,c
 13373  000FD0  6EFE               	movwf	tosh,c
 13374  000FD2  6AFF               	clrf	tosu,c
 13375  000FD4  50FA               	movf	pclath,w,c
 13376  000FD6  0E20               	movlw	32
 13377  000FD8  0012               	return		;indir
 13378  000FDA                     i2l8290:
 13379  000FDA  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13380  000FDE  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13381  000FE2  CFDE F013          	movff	postinc2,??i2__doprnt
 13382  000FE6  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13383  000FEA  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13384  000FEE  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13385  000FF2  0E20               	movlw	32
 13386  000FF4  6EDF               	movwf	indf2,c
 13387  000FF6  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13388  000FFA  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13389  000FFE  2ADE               	incf	postinc2,f,c
 13390  001000  0E00               	movlw	0
 13391  001002  22DD               	addwfc	postdec2,f,c
 13392  001004                     i2l8294:
 13393                           
 13394                           ;doprnt.c: 1431: while(--width);
 13395  001004  0620               	decf	i2__doprnt@width,f,c
 13396  001006  A0D8               	btfss	status,0,c
 13397  001008  0621               	decf	i2__doprnt@width+1,f,c
 13398  00100A  5020               	movf	i2__doprnt@width,w,c
 13399  00100C  1021               	iorwf	i2__doprnt@width+1,w,c
 13400  00100E  A4D8               	btfss	status,2,c
 13401  001010  D7C4               	goto	i2l8286
 13402  001012                     i2l8296:
 13403                           
 13404                           ;doprnt.c: 1438: if(flag & 0x03)
 13405  001012  C01F  F013         	movff	i2__doprnt@flag,??i2__doprnt
 13406  001016  0E03               	movlw	3
 13407  001018  1613               	andwf	??i2__doprnt,f,c
 13408  00101A  B4D8               	btfsc	status,2,c
 13409  00101C  D035               	goto	i2l8306
 13410                           
 13411                           ;doprnt.c: 1439: if(pb->func) (pb->func('-')); else ((*pb->ptr++ = '-'));
 13412  00101E  EE20 F002          	lfsr	2,2
 13413  001022  500D               	movf	i2__doprnt@pb,w,c
 13414  001024  26D9               	addwf	fsr2l,f,c
 13415  001026  500E               	movf	i2__doprnt@pb+1,w,c
 13416  001028  22DA               	addwfc	fsr2h,f,c
 13417  00102A  50DE               	movf	postinc2,w,c
 13418  00102C  10DE               	iorwf	postinc2,w,c
 13419  00102E  B4D8               	btfsc	status,2,c
 13420  001030  D016               	goto	i2l8302
 13421  001032  EE20 F002          	lfsr	2,2
 13422  001036  500D               	movf	i2__doprnt@pb,w,c
 13423  001038  26D9               	addwf	fsr2l,f,c
 13424  00103A  500E               	movf	i2__doprnt@pb+1,w,c
 13425  00103C  22DA               	addwfc	fsr2h,f,c
 13426  00103E  CFDE F013          	movff	postinc2,??i2__doprnt
 13427  001042  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13428  001046  D801               	call	i2u1392_48
 13429  001048  D01F               	goto	i2l8306
 13430  00104A                     i2u1392_48:
 13431  00104A  0005               	push	
 13432  00104C  6EFA               	movwf	pclath,c
 13433  00104E  5013               	movf	??i2__doprnt,w,c
 13434  001050  6EFD               	movwf	tosl,c
 13435  001052  5014               	movf	??i2__doprnt+1,w,c
 13436  001054  6EFE               	movwf	tosh,c
 13437  001056  6AFF               	clrf	tosu,c
 13438  001058  50FA               	movf	pclath,w,c
 13439  00105A  0E2D               	movlw	45
 13440  00105C  0012               	return		;indir
 13441  00105E                     i2l8302:
 13442  00105E  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13443  001062  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13444  001066  CFDE F013          	movff	postinc2,??i2__doprnt
 13445  00106A  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13446  00106E  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13447  001072  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13448  001076  0E2D               	movlw	45
 13449  001078  6EDF               	movwf	indf2,c
 13450  00107A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13451  00107E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13452  001082  2ADE               	incf	postinc2,f,c
 13453  001084  0E00               	movlw	0
 13454  001086  22DD               	addwfc	postdec2,f,c
 13455  001088                     i2l8306:
 13456                           
 13457                           ;doprnt.c: 1469: }
 13458                           ;doprnt.c: 1472: prec = c;
 13459  001088  C022  F018         	movff	i2__doprnt@c,i2__doprnt@prec
 13460                           
 13461                           ;doprnt.c: 1474: while(prec--) {
 13462  00108C  D08B               	goto	i2l8326
 13463  00108E                     i2l8308:
 13464                           
 13465                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
 13466  00108E  5018               	movf	i2__doprnt@prec,w,c
 13467  001090  0D02               	mullw	2
 13468  001092  0E48               	movlw	low _dpowers
 13469  001094  24F3               	addwf	prodl,w,c
 13470  001096  6EF6               	movwf	tblptrl,c
 13471  001098  0EFE               	movlw	high _dpowers
 13472  00109A  20F4               	addwfc	prodh,w,c
 13473  00109C  6EF7               	movwf	tblptrh,c
 13474  00109E                     	if	1	;There are 3 active tblptr bytes
 13475  00109E  6AF8               	clrf	tblptru,c
 13476  0010A0  0E00               	movlw	low (__mediumconst shr (0+16))
 13477  0010A2  22F8               	addwfc	tblptru,f,c
 13478  0010A4                     	endif
 13479  0010A4  0009               	tblrd		*+
 13480  0010A6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 13481  0010AA  000A               	tblrd		*-
 13482  0010AC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 13483  0010B0  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 13484  0010B4  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 13485  0010B8  ECB7  F01D         	call	i2___lwdiv
 13486  0010BC  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
 13487  0010C0  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
 13488  0010C4  0E00               	movlw	0
 13489  0010C6  6E0B               	movwf	i2___lwmod@divisor+1,c
 13490  0010C8  0E0A               	movlw	10
 13491  0010CA  6E0A               	movwf	i2___lwmod@divisor,c
 13492  0010CC  EC2A  F01E         	call	i2___lwmod	;wreg free
 13493  0010D0  5008               	movf	?i2___lwmod,w,c
 13494  0010D2  0F30               	addlw	48
 13495  0010D4  6E22               	movwf	i2__doprnt@c,c
 13496                           
 13497                           ;doprnt.c: 1491: break;
 13498  0010D6  D031               	goto	i2l8318
 13499  0010D8                     i2l8310:
 13500                           
 13501                           ;doprnt.c: 1499: {
 13502                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
 13503  0010D8  C01D  F001         	movff	i2__doprnt@val,i2___lwdiv@dividend
 13504  0010DC  C01E  F002         	movff	i2__doprnt@val+1,i2___lwdiv@dividend+1
 13505  0010E0  5018               	movf	i2__doprnt@prec,w,c
 13506  0010E2  0D02               	mullw	2
 13507  0010E4  0E52               	movlw	low _hexpowers
 13508  0010E6  24F3               	addwf	prodl,w,c
 13509  0010E8  6EF6               	movwf	tblptrl,c
 13510  0010EA  0EFE               	movlw	high _hexpowers
 13511  0010EC  20F4               	addwfc	prodh,w,c
 13512  0010EE  6EF7               	movwf	tblptrh,c
 13513  0010F0                     	if	1	;There are 3 active tblptr bytes
 13514  0010F0  6AF8               	clrf	tblptru,c
 13515  0010F2  0E00               	movlw	low (__mediumconst shr (0+16))
 13516  0010F4  22F8               	addwfc	tblptru,f,c
 13517  0010F6                     	endif
 13518  0010F6  0009               	tblrd		*+
 13519  0010F8  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
 13520  0010FC  000A               	tblrd		*-
 13521  0010FE  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
 13522  001102  ECB7  F01D         	call	i2___lwdiv	;wreg free
 13523  001106  5001               	movf	?i2___lwdiv,w,c
 13524  001108  0B0F               	andlw	15
 13525  00110A  6E17               	movwf	i2__doprnt@idx,c
 13526                           
 13527                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
 13528  00110C  5017               	movf	i2__doprnt@idx,w,c
 13529  00110E  0D01               	mullw	1
 13530  001110  0E49               	movlw	low STR_29
 13531  001112  24F3               	addwf	prodl,w,c
 13532  001114  6EF6               	movwf	tblptrl,c
 13533  001116  0EFF               	movlw	high STR_29
 13534  001118  20F4               	addwfc	prodh,w,c
 13535  00111A  6EF7               	movwf	tblptrh,c
 13536  00111C                     	if	1	;There are 3 active tblptr bytes
 13537  00111C  6AF8               	clrf	tblptru,c
 13538  00111E  0E00               	movlw	low (__mediumconst shr (0+16))
 13539  001120  22F8               	addwfc	tblptru,f,c
 13540  001122                     	endif
 13541  001122  0008               	tblrd		*
 13542  001124  CFF5 F022          	movff	tablat,i2__doprnt@c
 13543                           
 13544                           ;doprnt.c: 1523: }
 13545                           
 13546                           ;doprnt.c: 1508: }
 13547                           ;doprnt.c: 1510: break;
 13548  001128  D008               	goto	i2l8318
 13549  00112A                     i2l8316:
 13550  00112A  501F               	movf	i2__doprnt@flag,w,c
 13551  00112C  0B80               	andlw	128
 13552                           
 13553                           ; Switch size 1, requested type "space"
 13554                           ; Number of cases is 2, Range of values is 0 to 128
 13555                           ; switch strategies available:
 13556                           ; Name         Instructions Cycles
 13557                           ; simple_byte            7     4 (average)
 13558                           ;	Chosen strategy is simple_byte
 13559  00112E  0A00               	xorlw	0	; case 0
 13560  001130  B4D8               	btfsc	status,2,c
 13561  001132  D7AD               	goto	i2l8308
 13562  001134  0A80               	xorlw	128	; case 128
 13563  001136  B4D8               	btfsc	status,2,c
 13564  001138  D7CF               	goto	i2l8310
 13565  00113A                     i2l8318:
 13566                           
 13567                           ;doprnt.c: 1524: if(pb->func) (pb->func(c)); else ((*pb->ptr++ = c));
 13568  00113A  EE20 F002          	lfsr	2,2
 13569  00113E  500D               	movf	i2__doprnt@pb,w,c
 13570  001140  26D9               	addwf	fsr2l,f,c
 13571  001142  500E               	movf	i2__doprnt@pb+1,w,c
 13572  001144  22DA               	addwfc	fsr2h,f,c
 13573  001146  50DE               	movf	postinc2,w,c
 13574  001148  10DE               	iorwf	postinc2,w,c
 13575  00114A  B4D8               	btfsc	status,2,c
 13576  00114C  D016               	goto	i2l8322
 13577  00114E  EE20 F002          	lfsr	2,2
 13578  001152  500D               	movf	i2__doprnt@pb,w,c
 13579  001154  26D9               	addwf	fsr2l,f,c
 13580  001156  500E               	movf	i2__doprnt@pb+1,w,c
 13581  001158  22DA               	addwfc	fsr2h,f,c
 13582  00115A  CFDE F013          	movff	postinc2,??i2__doprnt
 13583  00115E  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13584  001162  D801               	call	i2u1394_48
 13585  001164  D01F               	goto	i2l8326
 13586  001166                     i2u1394_48:
 13587  001166  0005               	push	
 13588  001168  6EFA               	movwf	pclath,c
 13589  00116A  5013               	movf	??i2__doprnt,w,c
 13590  00116C  6EFD               	movwf	tosl,c
 13591  00116E  5014               	movf	??i2__doprnt+1,w,c
 13592  001170  6EFE               	movwf	tosh,c
 13593  001172  6AFF               	clrf	tosu,c
 13594  001174  50FA               	movf	pclath,w,c
 13595  001176  5022               	movf	i2__doprnt@c,w,c
 13596  001178  0012               	return		;indir
 13597  00117A                     i2l8322:
 13598  00117A  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13599  00117E  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13600  001182  CFDE F013          	movff	postinc2,??i2__doprnt
 13601  001186  CFDD F014          	movff	postdec2,??i2__doprnt+1
 13602  00118A  C013  FFD9         	movff	??i2__doprnt,fsr2l
 13603  00118E  C014  FFDA         	movff	??i2__doprnt+1,fsr2h
 13604  001192  C022  FFDF         	movff	i2__doprnt@c,indf2
 13605  001196  C00D  FFD9         	movff	i2__doprnt@pb,fsr2l
 13606  00119A  C00E  FFDA         	movff	i2__doprnt@pb+1,fsr2h
 13607  00119E  2ADE               	incf	postinc2,f,c
 13608  0011A0  0E00               	movlw	0
 13609  0011A2  22DD               	addwfc	postdec2,f,c
 13610  0011A4                     i2l8326:
 13611  0011A4  0618               	decf	i2__doprnt@prec,f,c
 13612  0011A6  2818               	incf	i2__doprnt@prec,w,c
 13613  0011A8  A4D8               	btfss	status,2,c
 13614  0011AA  D7BF               	goto	i2l8316
 13615  0011AC                     i2l8328:
 13616  0011AC  500F               	movf	i2__doprnt@f,w,c
 13617  0011AE  6E13               	movwf	??i2__doprnt& (0+255),c
 13618  0011B0  5010               	movf	i2__doprnt@f+1,w,c
 13619  0011B2  6E14               	movwf	(??i2__doprnt+1)& (0+255),c
 13620  0011B4  4A0F               	infsnz	i2__doprnt@f,f,c
 13621  0011B6  2A10               	incf	i2__doprnt@f+1,f,c
 13622  0011B8  C013  FFF6         	movff	??i2__doprnt,tblptrl
 13623  0011BC  C014  FFF7         	movff	??i2__doprnt+1,tblptrh
 13624  0011C0  0E00               	movlw	low (__mediumconst shr (0+16))
 13625  0011C2  6EF8               	movwf	tblptru,c
 13626  0011C4  0E0F               	movlw	(high __ramtop+-1)
 13627  0011C6  64F7               	cpfsgt	tblptrh,c
 13628  0011C8  D003               	bra	i2u1396_47
 13629  0011CA  0008               	tblrd		*
 13630  0011CC  50F5               	movf	tablat,w,c
 13631  0011CE  D005               	bra	i2u1396_40
 13632  0011D0                     i2u1396_47:
 13633  0011D0  CFF6 FFE9          	movff	tblptrl,fsr0l
 13634  0011D4  CFF7 FFEA          	movff	tblptrh,fsr0h
 13635  0011D8  50EF               	movf	indf0,w,c
 13636  0011DA                     i2u1396_40:
 13637  0011DA  6E22               	movwf	i2__doprnt@c,c
 13638  0011DC  5022               	movf	i2__doprnt@c,w,c
 13639  0011DE  A4D8               	btfss	status,2,c
 13640  0011E0  EFCD  F004         	goto	i2l8122
 13641  0011E4                     i2l8330:
 13642                           
 13643                           ;doprnt.c: 1540: return 0;
 13644  0011E4  0E00               	movlw	0
 13645  0011E6  6E0E               	movwf	?i2__doprnt+1,c
 13646  0011E8  0E00               	movlw	0
 13647  0011EA  6E0D               	movwf	?i2__doprnt,c
 13648  0011EC  0012               	return	
 13649  0011EE                     __end_ofi2__doprnt:
 13650                           	opt stack 0
 13651                           tosu	equ	0xFFF
 13652                           tosh	equ	0xFFE
 13653                           tosl	equ	0xFFD
 13654                           pclatu	equ	0xFFB
 13655                           pclath	equ	0xFFA
 13656                           tblptru	equ	0xFF8
 13657                           tblptrh	equ	0xFF7
 13658                           tblptrl	equ	0xFF6
 13659                           tablat	equ	0xFF5
 13660                           prodh	equ	0xFF4
 13661                           prodl	equ	0xFF3
 13662                           intcon	equ	0xFF2
 13663                           intcon2	equ	0xFF1
 13664                           intcon3	equ	0xFF0
 13665                           indf0	equ	0xFEF
 13666                           postinc0	equ	0xFEE
 13667                           fsr0h	equ	0xFEA
 13668                           fsr0l	equ	0xFE9
 13669                           wreg	equ	0xFE8
 13670                           indf1	equ	0xFE7
 13671                           postinc1	equ	0xFE6
 13672                           postdec1	equ	0xFE5
 13673                           fsr1h	equ	0xFE2
 13674                           fsr1l	equ	0xFE1
 13675                           indf2	equ	0xFDF
 13676                           postinc2	equ	0xFDE
 13677                           postdec2	equ	0xFDD
 13678                           fsr2h	equ	0xFDA
 13679                           fsr2l	equ	0xFD9
 13680                           status	equ	0xFD8
 13681                           
 13682 ;; *************** function i2_putch *****************
 13683 ;; Defined at:
 13684 ;;		line 30 in file "lcd.c"
 13685 ;; Parameters:    Size  Location     Type
 13686 ;;  data            1    wreg     unsigned char 
 13687 ;; Auto vars:     Size  Location     Type
 13688 ;;  data            1    2[COMRAM] unsigned char 
 13689 ;; Return value:  Size  Location     Type
 13690 ;;                  1    wreg      void 
 13691 ;; Registers used:
 13692 ;;		wreg, status,2, status,0, cstack
 13693 ;; Tracked objects:
 13694 ;;		On entry : 0/0
 13695 ;;		On exit  : 0/0
 13696 ;;		Unchanged: 0/0
 13697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13698 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13699 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13700 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13701 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13702 ;;Total ram usage:        1 bytes
 13703 ;; Hardware stack levels used:    1
 13704 ;; Hardware stack levels required when called:    1
 13705 ;; This function calls:
 13706 ;;		i2_lcdNibble
 13707 ;; This function is called by:
 13708 ;;		i2_printf
 13709 ;; This function uses a non-reentrant model
 13710 ;;
 13711                           
 13712                           	psect	text35
 13713  003E58                     __ptext35:
 13714                           	opt stack 0
 13715  003E58                     i2_putch:
 13716                           	opt stack 20
 13717                           
 13718                           ;incstack = 0
 13719                           ;i2putch@data stored from wreg
 13720  003E58  6E03               	movwf	i2putch@data,c
 13721                           
 13722                           ;lcd.c: 31: LATDbits.LATD2 = 1;
 13723  003E5A  848C               	bsf	3980,2,c	;volatile
 13724                           
 13725                           ;lcd.c: 32: lcdNibble(data);
 13726  003E5C  5003               	movf	i2putch@data,w,c
 13727  003E5E  EC63  F01D         	call	i2_lcdNibble
 13728  003E62  0012               	return		;funcret
 13729  003E64                     __end_ofi2_putch:
 13730                           	opt stack 0
 13731                           tosu	equ	0xFFF
 13732                           tosh	equ	0xFFE
 13733                           tosl	equ	0xFFD
 13734                           pclatu	equ	0xFFB
 13735                           pclath	equ	0xFFA
 13736                           tblptru	equ	0xFF8
 13737                           tblptrh	equ	0xFF7
 13738                           tblptrl	equ	0xFF6
 13739                           tablat	equ	0xFF5
 13740                           prodh	equ	0xFF4
 13741                           prodl	equ	0xFF3
 13742                           intcon	equ	0xFF2
 13743                           intcon2	equ	0xFF1
 13744                           intcon3	equ	0xFF0
 13745                           indf0	equ	0xFEF
 13746                           postinc0	equ	0xFEE
 13747                           fsr0h	equ	0xFEA
 13748                           fsr0l	equ	0xFE9
 13749                           wreg	equ	0xFE8
 13750                           indf1	equ	0xFE7
 13751                           postinc1	equ	0xFE6
 13752                           postdec1	equ	0xFE5
 13753                           fsr1h	equ	0xFE2
 13754                           fsr1l	equ	0xFE1
 13755                           indf2	equ	0xFDF
 13756                           postinc2	equ	0xFDE
 13757                           postdec2	equ	0xFDD
 13758                           fsr2h	equ	0xFDA
 13759                           fsr2l	equ	0xFD9
 13760                           status	equ	0xFD8
 13761                           
 13762 ;; *************** function i2_isdigit *****************
 13763 ;; Defined at:
 13764 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\isdigit.c"
 13765 ;; Parameters:    Size  Location     Type
 13766 ;;  c               1    wreg     unsigned char 
 13767 ;; Auto vars:     Size  Location     Type
 13768 ;;  c               1    2[COMRAM] unsigned char 
 13769 ;; Return value:  Size  Location     Type
 13770 ;;		None               void
 13771 ;; Registers used:
 13772 ;;		wreg, status,2, status,0
 13773 ;; Tracked objects:
 13774 ;;		On entry : 0/0
 13775 ;;		On exit  : 0/0
 13776 ;;		Unchanged: 0/0
 13777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13779 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13780 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13781 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13782 ;;Total ram usage:        3 bytes
 13783 ;; Hardware stack levels used:    1
 13784 ;; This function calls:
 13785 ;;		Nothing
 13786 ;; This function is called by:
 13787 ;;		i2__doprnt
 13788 ;; This function uses a non-reentrant model
 13789 ;;
 13790                           
 13791                           	psect	text36
 13792  003DDE                     __ptext36:
 13793                           	opt stack 0
 13794  003DDE                     i2_isdigit:
 13795                           	opt stack 21
 13796                           
 13797                           ;incstack = 0
 13798                           ;i2isdigit@c stored from wreg
 13799  003DDE  6E03               	movwf	i2isdigit@c,c
 13800  003DE0  0E00               	movlw	0
 13801  003DE2  6E02               	movwf	i2_isdigit$774,c
 13802  003DE4  0E3A               	movlw	58
 13803  003DE6  6003               	cpfslt	i2isdigit@c,c
 13804  003DE8  D005               	goto	i2l3256
 13805  003DEA  0E2F               	movlw	47
 13806  003DEC  6403               	cpfsgt	i2isdigit@c,c
 13807  003DEE  D002               	goto	i2l3256
 13808  003DF0  0E01               	movlw	1
 13809  003DF2  6E02               	movwf	i2_isdigit$774,c
 13810  003DF4                     i2l3256:
 13811  003DF4  C002  F001         	movff	i2_isdigit$774,??i2_isdigit
 13812  003DF8  3001               	rrcf	??i2_isdigit,w,c
 13813  003DFA  0012               	return	
 13814  003DFC                     __end_ofi2_isdigit:
 13815                           	opt stack 0
 13816                           tosu	equ	0xFFF
 13817                           tosh	equ	0xFFE
 13818                           tosl	equ	0xFFD
 13819                           pclatu	equ	0xFFB
 13820                           pclath	equ	0xFFA
 13821                           tblptru	equ	0xFF8
 13822                           tblptrh	equ	0xFF7
 13823                           tblptrl	equ	0xFF6
 13824                           tablat	equ	0xFF5
 13825                           prodh	equ	0xFF4
 13826                           prodl	equ	0xFF3
 13827                           intcon	equ	0xFF2
 13828                           intcon2	equ	0xFF1
 13829                           intcon3	equ	0xFF0
 13830                           indf0	equ	0xFEF
 13831                           postinc0	equ	0xFEE
 13832                           fsr0h	equ	0xFEA
 13833                           fsr0l	equ	0xFE9
 13834                           wreg	equ	0xFE8
 13835                           indf1	equ	0xFE7
 13836                           postinc1	equ	0xFE6
 13837                           postdec1	equ	0xFE5
 13838                           fsr1h	equ	0xFE2
 13839                           fsr1l	equ	0xFE1
 13840                           indf2	equ	0xFDF
 13841                           postinc2	equ	0xFDE
 13842                           postdec2	equ	0xFDD
 13843                           fsr2h	equ	0xFDA
 13844                           fsr2l	equ	0xFD9
 13845                           status	equ	0xFD8
 13846                           
 13847 ;; *************** function i2___wmul *****************
 13848 ;; Defined at:
 13849 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
 13850 ;; Parameters:    Size  Location     Type
 13851 ;;  multiplier      2    0[COMRAM] unsigned int 
 13852 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13853 ;; Auto vars:     Size  Location     Type
 13854 ;;  __wmul          2    4[COMRAM] unsigned int 
 13855 ;; Return value:  Size  Location     Type
 13856 ;;                  2    0[COMRAM] unsigned int 
 13857 ;; Registers used:
 13858 ;;		wreg, status,2, status,0, prodl, prodh
 13859 ;; Tracked objects:
 13860 ;;		On entry : 0/0
 13861 ;;		On exit  : 0/0
 13862 ;;		Unchanged: 0/0
 13863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13864 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13865 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13866 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13867 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13868 ;;Total ram usage:        6 bytes
 13869 ;; Hardware stack levels used:    1
 13870 ;; This function calls:
 13871 ;;		Nothing
 13872 ;; This function is called by:
 13873 ;;		i2__doprnt
 13874 ;; This function uses a non-reentrant model
 13875 ;;
 13876                           
 13877                           	psect	text37
 13878  003DB8                     __ptext37:
 13879                           	opt stack 0
 13880  003DB8                     i2___wmul:
 13881                           	opt stack 21
 13882                           
 13883                           ;incstack = 0
 13884  003DB8  5001               	movf	i2___wmul@multiplier,w,c
 13885  003DBA  0203               	mulwf	i2___wmul@multiplicand,c
 13886  003DBC  CFF3 F005          	movff	prodl,i2___wmul@product
 13887  003DC0  CFF4 F006          	movff	prodh,i2___wmul@product+1
 13888  003DC4  5001               	movf	i2___wmul@multiplier,w,c
 13889  003DC6  0204               	mulwf	i2___wmul@multiplicand+1,c
 13890  003DC8  50F3               	movf	prodl,w,c
 13891  003DCA  2606               	addwf	i2___wmul@product+1,f,c
 13892  003DCC  5002               	movf	i2___wmul@multiplier+1,w,c
 13893  003DCE  0203               	mulwf	i2___wmul@multiplicand,c
 13894  003DD0  50F3               	movf	prodl,w,c
 13895  003DD2  2606               	addwf	i2___wmul@product+1,f,c
 13896  003DD4  C005  F001         	movff	i2___wmul@product,?i2___wmul
 13897  003DD8  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 13898  003DDC  0012               	return	
 13899  003DDE                     __end_ofi2___wmul:
 13900                           	opt stack 0
 13901                           tosu	equ	0xFFF
 13902                           tosh	equ	0xFFE
 13903                           tosl	equ	0xFFD
 13904                           pclatu	equ	0xFFB
 13905                           pclath	equ	0xFFA
 13906                           tblptru	equ	0xFF8
 13907                           tblptrh	equ	0xFF7
 13908                           tblptrl	equ	0xFF6
 13909                           tablat	equ	0xFF5
 13910                           prodh	equ	0xFF4
 13911                           prodl	equ	0xFF3
 13912                           intcon	equ	0xFF2
 13913                           intcon2	equ	0xFF1
 13914                           intcon3	equ	0xFF0
 13915                           indf0	equ	0xFEF
 13916                           postinc0	equ	0xFEE
 13917                           fsr0h	equ	0xFEA
 13918                           fsr0l	equ	0xFE9
 13919                           wreg	equ	0xFE8
 13920                           indf1	equ	0xFE7
 13921                           postinc1	equ	0xFE6
 13922                           postdec1	equ	0xFE5
 13923                           fsr1h	equ	0xFE2
 13924                           fsr1l	equ	0xFE1
 13925                           indf2	equ	0xFDF
 13926                           postinc2	equ	0xFDE
 13927                           postdec2	equ	0xFDD
 13928                           fsr2h	equ	0xFDA
 13929                           fsr2l	equ	0xFD9
 13930                           status	equ	0xFD8
 13931                           
 13932 ;; *************** function i2___lwmod *****************
 13933 ;; Defined at:
 13934 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwmod.c"
 13935 ;; Parameters:    Size  Location     Type
 13936 ;;  dividend        2    7[COMRAM] unsigned int 
 13937 ;;  divisor         2    9[COMRAM] unsigned int 
 13938 ;; Auto vars:     Size  Location     Type
 13939 ;;  __lwmod         1   11[COMRAM] unsigned char 
 13940 ;; Return value:  Size  Location     Type
 13941 ;;                  2    7[COMRAM] unsigned int 
 13942 ;; Registers used:
 13943 ;;		wreg, status,2, status,0
 13944 ;; Tracked objects:
 13945 ;;		On entry : 0/0
 13946 ;;		On exit  : 0/0
 13947 ;;		Unchanged: 0/0
 13948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13949 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13950 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13952 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13953 ;;Total ram usage:        5 bytes
 13954 ;; Hardware stack levels used:    1
 13955 ;; This function calls:
 13956 ;;		Nothing
 13957 ;; This function is called by:
 13958 ;;		i2__doprnt
 13959 ;; This function uses a non-reentrant model
 13960 ;;
 13961                           
 13962                           	psect	text38
 13963  003C54                     __ptext38:
 13964                           	opt stack 0
 13965  003C54                     i2___lwmod:
 13966                           	opt stack 21
 13967                           
 13968                           ;incstack = 0
 13969  003C54  500A               	movf	i2___lwmod@divisor,w,c
 13970  003C56  100B               	iorwf	i2___lwmod@divisor+1,w,c
 13971  003C58  B4D8               	btfsc	status,2,c
 13972  003C5A  D018               	goto	i2l1017
 13973  003C5C  0E01               	movlw	1
 13974  003C5E  6E0C               	movwf	i2___lwmod@counter,c
 13975  003C60  D004               	goto	i2l3288
 13976  003C62                     i2l3286:
 13977  003C62  90D8               	bcf	status,0,c
 13978  003C64  360A               	rlcf	i2___lwmod@divisor,f,c
 13979  003C66  360B               	rlcf	i2___lwmod@divisor+1,f,c
 13980  003C68  2A0C               	incf	i2___lwmod@counter,f,c
 13981  003C6A                     i2l3288:
 13982  003C6A  AE0B               	btfss	i2___lwmod@divisor+1,7,c
 13983  003C6C  D7FA               	goto	i2l3286
 13984  003C6E                     i2l3290:
 13985  003C6E  500A               	movf	i2___lwmod@divisor,w,c
 13986  003C70  5C08               	subwf	i2___lwmod@dividend,w,c
 13987  003C72  500B               	movf	i2___lwmod@divisor+1,w,c
 13988  003C74  5809               	subwfb	i2___lwmod@dividend+1,w,c
 13989  003C76  A0D8               	btfss	status,0,c
 13990  003C78  D004               	goto	i2l3294
 13991  003C7A  500A               	movf	i2___lwmod@divisor,w,c
 13992  003C7C  5E08               	subwf	i2___lwmod@dividend,f,c
 13993  003C7E  500B               	movf	i2___lwmod@divisor+1,w,c
 13994  003C80  5A09               	subwfb	i2___lwmod@dividend+1,f,c
 13995  003C82                     i2l3294:
 13996  003C82  90D8               	bcf	status,0,c
 13997  003C84  320B               	rrcf	i2___lwmod@divisor+1,f,c
 13998  003C86  320A               	rrcf	i2___lwmod@divisor,f,c
 13999  003C88  2E0C               	decfsz	i2___lwmod@counter,f,c
 14000  003C8A  D7F1               	goto	i2l3290
 14001  003C8C                     i2l1017:
 14002  003C8C  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
 14003  003C90  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
 14004  003C94  0012               	return		;funcret
 14005  003C96                     __end_ofi2___lwmod:
 14006                           	opt stack 0
 14007                           tosu	equ	0xFFF
 14008                           tosh	equ	0xFFE
 14009                           tosl	equ	0xFFD
 14010                           pclatu	equ	0xFFB
 14011                           pclath	equ	0xFFA
 14012                           tblptru	equ	0xFF8
 14013                           tblptrh	equ	0xFF7
 14014                           tblptrl	equ	0xFF6
 14015                           tablat	equ	0xFF5
 14016                           prodh	equ	0xFF4
 14017                           prodl	equ	0xFF3
 14018                           intcon	equ	0xFF2
 14019                           intcon2	equ	0xFF1
 14020                           intcon3	equ	0xFF0
 14021                           indf0	equ	0xFEF
 14022                           postinc0	equ	0xFEE
 14023                           fsr0h	equ	0xFEA
 14024                           fsr0l	equ	0xFE9
 14025                           wreg	equ	0xFE8
 14026                           indf1	equ	0xFE7
 14027                           postinc1	equ	0xFE6
 14028                           postdec1	equ	0xFE5
 14029                           fsr1h	equ	0xFE2
 14030                           fsr1l	equ	0xFE1
 14031                           indf2	equ	0xFDF
 14032                           postinc2	equ	0xFDE
 14033                           postdec2	equ	0xFDD
 14034                           fsr2h	equ	0xFDA
 14035                           fsr2l	equ	0xFD9
 14036                           status	equ	0xFD8
 14037                           
 14038 ;; *************** function i2___lwdiv *****************
 14039 ;; Defined at:
 14040 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lwdiv.c"
 14041 ;; Parameters:    Size  Location     Type
 14042 ;;  dividend        2    0[COMRAM] unsigned int 
 14043 ;;  divisor         2    2[COMRAM] unsigned int 
 14044 ;; Auto vars:     Size  Location     Type
 14045 ;;  __lwdiv         2    4[COMRAM] unsigned int 
 14046 ;;  __lwdiv         1    6[COMRAM] unsigned char 
 14047 ;; Return value:  Size  Location     Type
 14048 ;;                  2    0[COMRAM] unsigned int 
 14049 ;; Registers used:
 14050 ;;		wreg, status,2, status,0
 14051 ;; Tracked objects:
 14052 ;;		On entry : 0/0
 14053 ;;		On exit  : 0/0
 14054 ;;		Unchanged: 0/0
 14055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14056 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14057 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14059 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14060 ;;Total ram usage:        7 bytes
 14061 ;; Hardware stack levels used:    1
 14062 ;; This function calls:
 14063 ;;		Nothing
 14064 ;; This function is called by:
 14065 ;;		i2__doprnt
 14066 ;; This function uses a non-reentrant model
 14067 ;;
 14068                           
 14069                           	psect	text39
 14070  003B6E                     __ptext39:
 14071                           	opt stack 0
 14072  003B6E                     i2___lwdiv:
 14073                           	opt stack 21
 14074                           
 14075                           ;incstack = 0
 14076  003B6E  0E00               	movlw	0
 14077  003B70  6E06               	movwf	i2___lwdiv@quotient+1,c
 14078  003B72  0E00               	movlw	0
 14079  003B74  6E05               	movwf	i2___lwdiv@quotient,c
 14080  003B76  5003               	movf	i2___lwdiv@divisor,w,c
 14081  003B78  1004               	iorwf	i2___lwdiv@divisor+1,w,c
 14082  003B7A  B4D8               	btfsc	status,2,c
 14083  003B7C  D01C               	goto	i2l1007
 14084  003B7E  0E01               	movlw	1
 14085  003B80  6E07               	movwf	i2___lwdiv@counter,c
 14086  003B82  D004               	goto	i2l3268
 14087  003B84                     i2l3266:
 14088  003B84  90D8               	bcf	status,0,c
 14089  003B86  3603               	rlcf	i2___lwdiv@divisor,f,c
 14090  003B88  3604               	rlcf	i2___lwdiv@divisor+1,f,c
 14091  003B8A  2A07               	incf	i2___lwdiv@counter,f,c
 14092  003B8C                     i2l3268:
 14093  003B8C  AE04               	btfss	i2___lwdiv@divisor+1,7,c
 14094  003B8E  D7FA               	goto	i2l3266
 14095  003B90                     i2l3270:
 14096  003B90  90D8               	bcf	status,0,c
 14097  003B92  3605               	rlcf	i2___lwdiv@quotient,f,c
 14098  003B94  3606               	rlcf	i2___lwdiv@quotient+1,f,c
 14099  003B96  5003               	movf	i2___lwdiv@divisor,w,c
 14100  003B98  5C01               	subwf	i2___lwdiv@dividend,w,c
 14101  003B9A  5004               	movf	i2___lwdiv@divisor+1,w,c
 14102  003B9C  5802               	subwfb	i2___lwdiv@dividend+1,w,c
 14103  003B9E  A0D8               	btfss	status,0,c
 14104  003BA0  D005               	goto	i2l3278
 14105  003BA2  5003               	movf	i2___lwdiv@divisor,w,c
 14106  003BA4  5E01               	subwf	i2___lwdiv@dividend,f,c
 14107  003BA6  5004               	movf	i2___lwdiv@divisor+1,w,c
 14108  003BA8  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
 14109  003BAA  8005               	bsf	i2___lwdiv@quotient,0,c
 14110  003BAC                     i2l3278:
 14111  003BAC  90D8               	bcf	status,0,c
 14112  003BAE  3204               	rrcf	i2___lwdiv@divisor+1,f,c
 14113  003BB0  3203               	rrcf	i2___lwdiv@divisor,f,c
 14114  003BB2  2E07               	decfsz	i2___lwdiv@counter,f,c
 14115  003BB4  D7ED               	goto	i2l3270
 14116  003BB6                     i2l1007:
 14117  003BB6  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
 14118  003BBA  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
 14119  003BBE  0012               	return		;funcret
 14120  003BC0                     __end_ofi2___lwdiv:
 14121                           	opt stack 0
 14122                           tosu	equ	0xFFF
 14123                           tosh	equ	0xFFE
 14124                           tosl	equ	0xFFD
 14125                           pclatu	equ	0xFFB
 14126                           pclath	equ	0xFFA
 14127                           tblptru	equ	0xFF8
 14128                           tblptrh	equ	0xFF7
 14129                           tblptrl	equ	0xFF6
 14130                           tablat	equ	0xFF5
 14131                           prodh	equ	0xFF4
 14132                           prodl	equ	0xFF3
 14133                           intcon	equ	0xFF2
 14134                           intcon2	equ	0xFF1
 14135                           intcon3	equ	0xFF0
 14136                           indf0	equ	0xFEF
 14137                           postinc0	equ	0xFEE
 14138                           fsr0h	equ	0xFEA
 14139                           fsr0l	equ	0xFE9
 14140                           wreg	equ	0xFE8
 14141                           indf1	equ	0xFE7
 14142                           postinc1	equ	0xFE6
 14143                           postdec1	equ	0xFE5
 14144                           fsr1h	equ	0xFE2
 14145                           fsr1l	equ	0xFE1
 14146                           indf2	equ	0xFDF
 14147                           postinc2	equ	0xFDE
 14148                           postdec2	equ	0xFDD
 14149                           fsr2h	equ	0xFDA
 14150                           fsr2l	equ	0xFD9
 14151                           status	equ	0xFD8
 14152                           
 14153 ;; *************** function i2_lcdInst *****************
 14154 ;; Defined at:
 14155 ;;		line 25 in file "lcd.c"
 14156 ;; Parameters:    Size  Location     Type
 14157 ;;  data            1    wreg     unsigned char 
 14158 ;; Auto vars:     Size  Location     Type
 14159 ;;  data            1    2[COMRAM] unsigned char 
 14160 ;; Return value:  Size  Location     Type
 14161 ;;                  1    wreg      void 
 14162 ;; Registers used:
 14163 ;;		wreg, status,2, status,0, cstack
 14164 ;; Tracked objects:
 14165 ;;		On entry : 0/0
 14166 ;;		On exit  : 0/0
 14167 ;;		Unchanged: 0/0
 14168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14169 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14170 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14171 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14172 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14173 ;;Total ram usage:        1 bytes
 14174 ;; Hardware stack levels used:    1
 14175 ;; Hardware stack levels required when called:    1
 14176 ;; This function calls:
 14177 ;;		i2_lcdNibble
 14178 ;; This function is called by:
 14179 ;;		_keypressed
 14180 ;; This function uses a non-reentrant model
 14181 ;;
 14182                           
 14183                           	psect	text40
 14184  003E64                     __ptext40:
 14185                           	opt stack 0
 14186  003E64                     i2_lcdInst:
 14187                           	opt stack 22
 14188                           
 14189                           ;incstack = 0
 14190                           ;i2lcdInst@data stored from wreg
 14191  003E64  6E03               	movwf	i2lcdInst@data,c
 14192                           
 14193                           ;lcd.c: 26: LATDbits.LATD2 = 0;
 14194  003E66  948C               	bcf	3980,2,c	;volatile
 14195                           
 14196                           ;lcd.c: 27: lcdNibble(data);
 14197  003E68  5003               	movf	i2lcdInst@data,w,c
 14198  003E6A  EC63  F01D         	call	i2_lcdNibble
 14199  003E6E  0012               	return		;funcret
 14200  003E70                     __end_ofi2_lcdInst:
 14201                           	opt stack 0
 14202                           tosu	equ	0xFFF
 14203                           tosh	equ	0xFFE
 14204                           tosl	equ	0xFFD
 14205                           pclatu	equ	0xFFB
 14206                           pclath	equ	0xFFA
 14207                           tblptru	equ	0xFF8
 14208                           tblptrh	equ	0xFF7
 14209                           tblptrl	equ	0xFF6
 14210                           tablat	equ	0xFF5
 14211                           prodh	equ	0xFF4
 14212                           prodl	equ	0xFF3
 14213                           intcon	equ	0xFF2
 14214                           intcon2	equ	0xFF1
 14215                           intcon3	equ	0xFF0
 14216                           indf0	equ	0xFEF
 14217                           postinc0	equ	0xFEE
 14218                           fsr0h	equ	0xFEA
 14219                           fsr0l	equ	0xFE9
 14220                           wreg	equ	0xFE8
 14221                           indf1	equ	0xFE7
 14222                           postinc1	equ	0xFE6
 14223                           postdec1	equ	0xFE5
 14224                           fsr1h	equ	0xFE2
 14225                           fsr1l	equ	0xFE1
 14226                           indf2	equ	0xFDF
 14227                           postinc2	equ	0xFDE
 14228                           postdec2	equ	0xFDD
 14229                           fsr2h	equ	0xFDA
 14230                           fsr2l	equ	0xFD9
 14231                           status	equ	0xFD8
 14232                           
 14233 ;; *************** function i2_lcdNibble *****************
 14234 ;; Defined at:
 14235 ;;		line 35 in file "lcd.c"
 14236 ;; Parameters:    Size  Location     Type
 14237 ;;  data            1    wreg     unsigned char 
 14238 ;; Auto vars:     Size  Location     Type
 14239 ;;  data            1    1[COMRAM] unsigned char 
 14240 ;;  lcdNibble       1    0[COMRAM] unsigned char 
 14241 ;; Return value:  Size  Location     Type
 14242 ;;                  1    wreg      void 
 14243 ;; Registers used:
 14244 ;;		wreg, status,2, status,0
 14245 ;; Tracked objects:
 14246 ;;		On entry : 0/0
 14247 ;;		On exit  : 0/0
 14248 ;;		Unchanged: 0/0
 14249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14251 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14252 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14253 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14254 ;;Total ram usage:        2 bytes
 14255 ;; Hardware stack levels used:    1
 14256 ;; This function calls:
 14257 ;;		Nothing
 14258 ;; This function is called by:
 14259 ;;		i2_lcdInst
 14260 ;;		i2_putch
 14261 ;; This function uses a non-reentrant model
 14262 ;;
 14263                           
 14264                           	psect	text41
 14265  003AC6                     __ptext41:
 14266                           	opt stack 0
 14267  003AC6                     i2_lcdNibble:
 14268                           	opt stack 20
 14269                           
 14270                           ;incstack = 0
 14271                           ;i2lcdNibble@data stored from wreg
 14272  003AC6  6E02               	movwf	i2lcdNibble@data,c
 14273                           
 14274                           ;lcd.c: 37: char temp = data & 0xF0;
 14275  003AC8  5002               	movf	i2lcdNibble@data,w,c
 14276  003ACA  0BF0               	andlw	240
 14277  003ACC  6E01               	movwf	i2lcdNibble@temp,c
 14278                           
 14279                           ;lcd.c: 38: LATD = LATD & 0x0F;
 14280  003ACE  508C               	movf	3980,w,c	;volatile
 14281  003AD0  0B0F               	andlw	15
 14282  003AD2  6E8C               	movwf	3980,c	;volatile
 14283                           
 14284                           ;lcd.c: 39: LATD = temp | LATD;
 14285  003AD4  5001               	movf	i2lcdNibble@temp,w,c
 14286  003AD6  108C               	iorwf	3980,w,c	;volatile
 14287  003AD8  6E8C               	movwf	3980,c	;volatile
 14288                           
 14289                           ;lcd.c: 41: LATDbits.LATD3 = 0;
 14290  003ADA  968C               	bcf	3980,3,c	;volatile
 14291                           
 14292                           ;lcd.c: 42: _delay((unsigned long)((25)*(10000000/4000000.0)));
 14293  003ADC  0E14               	movlw	20
 14294  003ADE                     i2u1482_47:
 14295  003ADE  2EE8               	decfsz	wreg,f,c
 14296  003AE0  D7FE               	bra	i2u1482_47
 14297  003AE2  D000               	nop2	
 14298                           
 14299                           ;lcd.c: 43: LATDbits.LATD3 = 1;
 14300  003AE4  868C               	bsf	3980,3,c	;volatile
 14301                           
 14302                           ;lcd.c: 44: _delay((unsigned long)((25)*(10000000/4000000.0)));
 14303  003AE6  0E14               	movlw	20
 14304  003AE8                     i2u1483_47:
 14305  003AE8  2EE8               	decfsz	wreg,f,c
 14306  003AEA  D7FE               	bra	i2u1483_47
 14307  003AEC  D000               	nop2	
 14308                           
 14309                           ;lcd.c: 46: data = data << 4;
 14310  003AEE  3802               	swapf	i2lcdNibble@data,w,c
 14311  003AF0  0BF0               	andlw	240
 14312  003AF2  6E02               	movwf	i2lcdNibble@data,c
 14313                           
 14314                           ;lcd.c: 48: temp = data & 0xF0;
 14315  003AF4  5002               	movf	i2lcdNibble@data,w,c
 14316  003AF6  0BF0               	andlw	240
 14317  003AF8  6E01               	movwf	i2lcdNibble@temp,c
 14318                           
 14319                           ;lcd.c: 49: LATD = LATD & 0x0F;
 14320  003AFA  508C               	movf	3980,w,c	;volatile
 14321  003AFC  0B0F               	andlw	15
 14322  003AFE  6E8C               	movwf	3980,c	;volatile
 14323                           
 14324                           ;lcd.c: 50: LATD = temp | LATD;
 14325  003B00  5001               	movf	i2lcdNibble@temp,w,c
 14326  003B02  108C               	iorwf	3980,w,c	;volatile
 14327  003B04  6E8C               	movwf	3980,c	;volatile
 14328                           
 14329                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 14330  003B06  968C               	bcf	3980,3,c	;volatile
 14331                           
 14332                           ;lcd.c: 53: _delay((unsigned long)((25)*(10000000/4000000.0)));
 14333  003B08  0E14               	movlw	20
 14334  003B0A                     i2u1484_47:
 14335  003B0A  2EE8               	decfsz	wreg,f,c
 14336  003B0C  D7FE               	bra	i2u1484_47
 14337  003B0E  D000               	nop2	
 14338                           
 14339                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 14340  003B10  868C               	bsf	3980,3,c	;volatile
 14341                           
 14342                           ;lcd.c: 55: _delay((unsigned long)((25)*(10000000/4000000.0)));
 14343  003B12  0E14               	movlw	20
 14344  003B14                     i2u1485_47:
 14345  003B14  2EE8               	decfsz	wreg,f,c
 14346  003B16  D7FE               	bra	i2u1485_47
 14347  003B18  D000               	nop2	
 14348  003B1A  0012               	return		;funcret
 14349  003B1C                     __end_ofi2_lcdNibble:
 14350                           	opt stack 0
 14351                           tosu	equ	0xFFF
 14352                           tosh	equ	0xFFE
 14353                           tosl	equ	0xFFD
 14354                           pclatu	equ	0xFFB
 14355                           pclath	equ	0xFFA
 14356                           tblptru	equ	0xFF8
 14357                           tblptrh	equ	0xFF7
 14358                           tblptrl	equ	0xFF6
 14359                           tablat	equ	0xFF5
 14360                           prodh	equ	0xFF4
 14361                           prodl	equ	0xFF3
 14362                           intcon	equ	0xFF2
 14363                           intcon2	equ	0xFF1
 14364                           intcon3	equ	0xFF0
 14365                           indf0	equ	0xFEF
 14366                           postinc0	equ	0xFEE
 14367                           fsr0h	equ	0xFEA
 14368                           fsr0l	equ	0xFE9
 14369                           wreg	equ	0xFE8
 14370                           indf1	equ	0xFE7
 14371                           postinc1	equ	0xFE6
 14372                           postdec1	equ	0xFE5
 14373                           fsr1h	equ	0xFE2
 14374                           fsr1l	equ	0xFE1
 14375                           indf2	equ	0xFDF
 14376                           postinc2	equ	0xFDE
 14377                           postdec2	equ	0xFDD
 14378                           fsr2h	equ	0xFDA
 14379                           fsr2l	equ	0xFD9
 14380                           status	equ	0xFD8
 14381                           
 14382 ;; *************** function i2___awmod *****************
 14383 ;; Defined at:
 14384 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
 14385 ;; Parameters:    Size  Location     Type
 14386 ;;  dividend        2    0[COMRAM] int 
 14387 ;;  divisor         2    2[COMRAM] int 
 14388 ;; Auto vars:     Size  Location     Type
 14389 ;;  __awmod         1    5[COMRAM] unsigned char 
 14390 ;;  __awmod         1    4[COMRAM] unsigned char 
 14391 ;; Return value:  Size  Location     Type
 14392 ;;                  2    0[COMRAM] int 
 14393 ;; Registers used:
 14394 ;;		wreg, status,2, status,0
 14395 ;; Tracked objects:
 14396 ;;		On entry : 0/0
 14397 ;;		On exit  : 0/0
 14398 ;;		Unchanged: 0/0
 14399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14400 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14401 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14403 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14404 ;;Total ram usage:        6 bytes
 14405 ;; Hardware stack levels used:    1
 14406 ;; This function calls:
 14407 ;;		Nothing
 14408 ;; This function is called by:
 14409 ;;		_keypressed
 14410 ;; This function uses a non-reentrant model
 14411 ;;
 14412                           
 14413                           	psect	text42
 14414  0038D6                     __ptext42:
 14415                           	opt stack 0
 14416  0038D6                     i2___awmod:
 14417                           	opt stack 23
 14418                           
 14419                           ;incstack = 0
 14420  0038D6  0E00               	movlw	0
 14421  0038D8  6E06               	movwf	i2___awmod@sign,c
 14422  0038DA  AE02               	btfss	i2___awmod@dividend+1,7,c
 14423  0038DC  D006               	goto	i2l4216
 14424  0038DE  6C01               	negf	i2___awmod@dividend,c
 14425  0038E0  1E02               	comf	i2___awmod@dividend+1,f,c
 14426  0038E2  B0D8               	btfsc	status,0,c
 14427  0038E4  2A02               	incf	i2___awmod@dividend+1,f,c
 14428  0038E6  0E01               	movlw	1
 14429  0038E8  6E06               	movwf	i2___awmod@sign,c
 14430  0038EA                     i2l4216:
 14431  0038EA  AE04               	btfss	i2___awmod@divisor+1,7,c
 14432  0038EC  D004               	goto	i2l4220
 14433  0038EE  6C03               	negf	i2___awmod@divisor,c
 14434  0038F0  1E04               	comf	i2___awmod@divisor+1,f,c
 14435  0038F2  B0D8               	btfsc	status,0,c
 14436  0038F4  2A04               	incf	i2___awmod@divisor+1,f,c
 14437  0038F6                     i2l4220:
 14438  0038F6  5003               	movf	i2___awmod@divisor,w,c
 14439  0038F8  1004               	iorwf	i2___awmod@divisor+1,w,c
 14440  0038FA  B4D8               	btfsc	status,2,c
 14441  0038FC  D018               	goto	i2l4236
 14442  0038FE  0E01               	movlw	1
 14443  003900  6E05               	movwf	i2___awmod@counter,c
 14444  003902  D004               	goto	i2l4226
 14445  003904                     i2l4224:
 14446  003904  90D8               	bcf	status,0,c
 14447  003906  3603               	rlcf	i2___awmod@divisor,f,c
 14448  003908  3604               	rlcf	i2___awmod@divisor+1,f,c
 14449  00390A  2A05               	incf	i2___awmod@counter,f,c
 14450  00390C                     i2l4226:
 14451  00390C  AE04               	btfss	i2___awmod@divisor+1,7,c
 14452  00390E  D7FA               	goto	i2l4224
 14453  003910                     i2l4228:
 14454  003910  5003               	movf	i2___awmod@divisor,w,c
 14455  003912  5C01               	subwf	i2___awmod@dividend,w,c
 14456  003914  5004               	movf	i2___awmod@divisor+1,w,c
 14457  003916  5802               	subwfb	i2___awmod@dividend+1,w,c
 14458  003918  A0D8               	btfss	status,0,c
 14459  00391A  D004               	goto	i2l4232
 14460  00391C  5003               	movf	i2___awmod@divisor,w,c
 14461  00391E  5E01               	subwf	i2___awmod@dividend,f,c
 14462  003920  5004               	movf	i2___awmod@divisor+1,w,c
 14463  003922  5A02               	subwfb	i2___awmod@dividend+1,f,c
 14464  003924                     i2l4232:
 14465  003924  90D8               	bcf	status,0,c
 14466  003926  3204               	rrcf	i2___awmod@divisor+1,f,c
 14467  003928  3203               	rrcf	i2___awmod@divisor,f,c
 14468  00392A  2E05               	decfsz	i2___awmod@counter,f,c
 14469  00392C  D7F1               	goto	i2l4228
 14470  00392E                     i2l4236:
 14471  00392E  5006               	movf	i2___awmod@sign,w,c
 14472  003930  B4D8               	btfsc	status,2,c
 14473  003932  D004               	goto	i2l4240
 14474  003934  6C01               	negf	i2___awmod@dividend,c
 14475  003936  1E02               	comf	i2___awmod@dividend+1,f,c
 14476  003938  B0D8               	btfsc	status,0,c
 14477  00393A  2A02               	incf	i2___awmod@dividend+1,f,c
 14478  00393C                     i2l4240:
 14479  00393C  C001  F001         	movff	i2___awmod@dividend,?i2___awmod
 14480  003940  C002  F002         	movff	i2___awmod@dividend+1,?i2___awmod+1
 14481  003944  0012               	return	
 14482  003946                     __end_ofi2___awmod:
 14483                           	opt stack 0
 14484                           tosu	equ	0xFFF
 14485                           tosh	equ	0xFFE
 14486                           tosl	equ	0xFFD
 14487                           pclatu	equ	0xFFB
 14488                           pclath	equ	0xFFA
 14489                           tblptru	equ	0xFF8
 14490                           tblptrh	equ	0xFF7
 14491                           tblptrl	equ	0xFF6
 14492                           tablat	equ	0xFF5
 14493                           prodh	equ	0xFF4
 14494                           prodl	equ	0xFF3
 14495                           intcon	equ	0xFF2
 14496                           intcon2	equ	0xFF1
 14497                           intcon3	equ	0xFF0
 14498                           indf0	equ	0xFEF
 14499                           postinc0	equ	0xFEE
 14500                           fsr0h	equ	0xFEA
 14501                           fsr0l	equ	0xFE9
 14502                           wreg	equ	0xFE8
 14503                           indf1	equ	0xFE7
 14504                           postinc1	equ	0xFE6
 14505                           postdec1	equ	0xFE5
 14506                           fsr1h	equ	0xFE2
 14507                           fsr1l	equ	0xFE1
 14508                           indf2	equ	0xFDF
 14509                           postinc2	equ	0xFDE
 14510                           postdec2	equ	0xFDD
 14511                           fsr2h	equ	0xFDA
 14512                           fsr2l	equ	0xFD9
 14513                           status	equ	0xFD8
 14514                           tosu	equ	0xFFF
 14515                           tosh	equ	0xFFE
 14516                           tosl	equ	0xFFD
 14517                           pclatu	equ	0xFFB
 14518                           pclath	equ	0xFFA
 14519                           tblptru	equ	0xFF8
 14520                           tblptrh	equ	0xFF7
 14521                           tblptrl	equ	0xFF6
 14522                           tablat	equ	0xFF5
 14523                           prodh	equ	0xFF4
 14524                           prodl	equ	0xFF3
 14525                           intcon	equ	0xFF2
 14526                           intcon2	equ	0xFF1
 14527                           intcon3	equ	0xFF0
 14528                           indf0	equ	0xFEF
 14529                           postinc0	equ	0xFEE
 14530                           fsr0h	equ	0xFEA
 14531                           fsr0l	equ	0xFE9
 14532                           wreg	equ	0xFE8
 14533                           indf1	equ	0xFE7
 14534                           postinc1	equ	0xFE6
 14535                           postdec1	equ	0xFE5
 14536                           fsr1h	equ	0xFE2
 14537                           fsr1l	equ	0xFE1
 14538                           indf2	equ	0xFDF
 14539                           postinc2	equ	0xFDE
 14540                           postdec2	equ	0xFDD
 14541                           fsr2h	equ	0xFDA
 14542                           fsr2l	equ	0xFD9
 14543                           status	equ	0xFD8
 14544                           
 14545                           	psect	text43
 14546  000000                     __ptext43:
 14547                           	opt stack 0
 14548                           tosu	equ	0xFFF
 14549                           tosh	equ	0xFFE
 14550                           tosl	equ	0xFFD
 14551                           pclatu	equ	0xFFB
 14552                           pclath	equ	0xFFA
 14553                           tblptru	equ	0xFF8
 14554                           tblptrh	equ	0xFF7
 14555                           tblptrl	equ	0xFF6
 14556                           tablat	equ	0xFF5
 14557                           prodh	equ	0xFF4
 14558                           prodl	equ	0xFF3
 14559                           intcon	equ	0xFF2
 14560                           intcon2	equ	0xFF1
 14561                           intcon3	equ	0xFF0
 14562                           indf0	equ	0xFEF
 14563                           postinc0	equ	0xFEE
 14564                           fsr0h	equ	0xFEA
 14565                           fsr0l	equ	0xFE9
 14566                           wreg	equ	0xFE8
 14567                           indf1	equ	0xFE7
 14568                           postinc1	equ	0xFE6
 14569                           postdec1	equ	0xFE5
 14570                           fsr1h	equ	0xFE2
 14571                           fsr1l	equ	0xFE1
 14572                           indf2	equ	0xFDF
 14573                           postinc2	equ	0xFDE
 14574                           postdec2	equ	0xFDD
 14575                           fsr2h	equ	0xFDA
 14576                           fsr2l	equ	0xFD9
 14577                           status	equ	0xFD8
 14578                           
 14579                           	psect	rparam
 14580  0000                     tosu	equ	0xFFF
 14581                           tosh	equ	0xFFE
 14582                           tosl	equ	0xFFD
 14583                           pclatu	equ	0xFFB
 14584                           pclath	equ	0xFFA
 14585                           tblptru	equ	0xFF8
 14586                           tblptrh	equ	0xFF7
 14587                           tblptrl	equ	0xFF6
 14588                           tablat	equ	0xFF5
 14589                           prodh	equ	0xFF4
 14590                           prodl	equ	0xFF3
 14591                           intcon	equ	0xFF2
 14592                           intcon2	equ	0xFF1
 14593                           intcon3	equ	0xFF0
 14594                           indf0	equ	0xFEF
 14595                           postinc0	equ	0xFEE
 14596                           fsr0h	equ	0xFEA
 14597                           fsr0l	equ	0xFE9
 14598                           wreg	equ	0xFE8
 14599                           indf1	equ	0xFE7
 14600                           postinc1	equ	0xFE6
 14601                           postdec1	equ	0xFE5
 14602                           fsr1h	equ	0xFE2
 14603                           fsr1l	equ	0xFE1
 14604                           indf2	equ	0xFDF
 14605                           postinc2	equ	0xFDE
 14606                           postdec2	equ	0xFDD
 14607                           fsr2h	equ	0xFDA
 14608                           fsr2l	equ	0xFD9
 14609                           status	equ	0xFD8
 14610                           
 14611                           	psect	temp
 14612  00007B                     btemp:
 14613                           	opt stack 0
 14614  00007B                     	ds	1
 14615  0000                     int$flags	set	btemp
 14616                           tosu	equ	0xFFF
 14617                           tosh	equ	0xFFE
 14618                           tosl	equ	0xFFD
 14619                           pclatu	equ	0xFFB
 14620                           pclath	equ	0xFFA
 14621                           tblptru	equ	0xFF8
 14622                           tblptrh	equ	0xFF7
 14623                           tblptrl	equ	0xFF6
 14624                           tablat	equ	0xFF5
 14625                           prodh	equ	0xFF4
 14626                           prodl	equ	0xFF3
 14627                           intcon	equ	0xFF2
 14628                           intcon2	equ	0xFF1
 14629                           intcon3	equ	0xFF0
 14630                           indf0	equ	0xFEF
 14631                           postinc0	equ	0xFEE
 14632                           fsr0h	equ	0xFEA
 14633                           fsr0l	equ	0xFE9
 14634                           wreg	equ	0xFE8
 14635                           indf1	equ	0xFE7
 14636                           postinc1	equ	0xFE6
 14637                           postdec1	equ	0xFE5
 14638                           fsr1h	equ	0xFE2
 14639                           fsr1l	equ	0xFE1
 14640                           indf2	equ	0xFDF
 14641                           postinc2	equ	0xFDE
 14642                           postdec2	equ	0xFDD
 14643                           fsr2h	equ	0xFDA
 14644                           fsr2l	equ	0xFD9
 14645                           status	equ	0xFD8


Data Sizes:
    Strings     413
    Constant    42
    Data        754
    BSS         195
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     61     122
    BANK0           128     88     128
    BANK1           256      4     138
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    display_menu$1164	PTR const unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    strcmp@s2	PTR const unsigned char  size(2) Largest target is 18
		 -> ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    strcmp@s1	PTR const unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_24(CODE[5]), STR_23(CODE[5]), STR_22(CODE[5]), STR_21(CODE[5]), 
		 -> STR_20(CODE[20]), STR_19(CODE[20]), STR_18(CODE[22]), STR_17(CODE[19]), 
		 -> menu(BIGRAM[720]), STR_16(CODE[15]), STR_15(CODE[6]), STR_14(CODE[24]), 
		 -> STR_13(CODE[7]), STR_12(CODE[18]), STR_11(CODE[19]), STR_10(CODE[16]), 
		 -> STR_9(CODE[12]), STR_8(CODE[19]), STR_7(CODE[17]), STR_6(CODE[14]), 
		 -> STR_5(CODE[12]), STR_4(CODE[16]), STR_3(CODE[25]), STR_2(CODE[23]), 
		 -> STR_1(CODE[23]), 

    sprintf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    sprintf@wh	PTR unsigned char  size(2) Largest target is 720
		 -> menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 18
		 -> STR_27(CODE[14]), STR_26(CODE[15]), STR_25(CODE[8]), display1(BANK1[18]), 
		 -> display0(BANK1[18]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), 

    pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> i2_putch(), Absolute function(), putch(), 

    pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@ap	PTR PTR void  size(2) Largest target is 2
		 -> sprintf@ap(BANK0[2]), printf@ap(BANK0[2]), 

    _doprnt@cp	PTR const unsigned char  size(2) Largest target is 7
		 -> ?_sprintf(BANK0[2]), ?_printf(BANK0[2]), NULL(NULL[0]), STR_28(CODE[7]), 
		 -> _doprnt@c(BANK0[1]), menu(BIGRAM[720]), ADRESH(SFR[1]), ndisplay1(BANK1[18]), 
		 -> ndisplay0(BANK1[18]), 

    _doprnt@f	PTR const unsigned char  size(2) Largest target is 720
		 -> STR_27(CODE[14]), STR_26(CODE[15]), STR_25(CODE[8]), STR_24(CODE[5]), 
		 -> STR_23(CODE[5]), STR_22(CODE[5]), STR_21(CODE[5]), STR_20(CODE[20]), 
		 -> STR_19(CODE[20]), STR_18(CODE[22]), STR_17(CODE[19]), menu(BIGRAM[720]), 
		 -> STR_16(CODE[15]), STR_15(CODE[6]), STR_14(CODE[24]), STR_13(CODE[7]), 
		 -> STR_12(CODE[18]), STR_11(CODE[19]), STR_10(CODE[16]), STR_9(CODE[12]), 
		 -> STR_8(CODE[19]), STR_7(CODE[17]), STR_6(CODE[14]), STR_5(CODE[12]), 
		 -> STR_4(CODE[16]), STR_3(CODE[25]), STR_2(CODE[23]), STR_1(CODE[23]), 
		 -> display1(BANK1[18]), display0(BANK1[18]), 

    S514__prbuf$func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    _doprnt@pb.func	PTR FTN(unsigned char ,)void  size(2) Largest target is 1
		 -> Absolute function(), putch(), 

    S514__prbuf$ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb.ptr	PTR unsigned char  size(2) Largest target is 720
		 -> NULL(NULL[0]), menu(BIGRAM[720]), ndisplay1(BANK1[18]), ndisplay0(BANK1[18]), 

    _doprnt@pb	PTR struct __prbuf size(2) Largest target is 5
		 -> sprintf@pb(BANK0[4]), printf@pb(BANK0[4]), 

    display_menu@menuSizePtr	PTR int  size(2) Largest target is 2
		 -> endSize(COMRAM[2]), menuSize(BANK0[2]), creditSize(BANK0[2]), events(BANK0[2]), 

    display_menu@menuIndexPtr	PTR int  size(2) Largest target is 2
		 -> endIndex(BANK0[2]), creditIndex(BANK0[2]), logIndex(BANK0[2]), menuIndex(BANK0[2]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 18
		 -> display1(BANK1[18]), display0(BANK1[18]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _keypressed in COMRAM

    _keypressed->i2_printf
    i2_printf->i2__doprnt
    i2__doprnt->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble

Critical Paths under _main in BANK0

    _main->_update_display
    _update_state->_sprintf
    _update_lcd->_printf
    _printf->__doprnt
    _update_display->_display_menu
    _display_menu->_sprintf
    _sprintf->__doprnt
    __doprnt->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _update_RTC->___wmul
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _sort->__measure
    __measure->___awmod
    _read_sensors->_readADC
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _keypressed in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_update_display

Critical Paths under _keypressed in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _keypressed in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _keypressed in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _keypressed in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _keypressed in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _keypressed in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _keypressed in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _keypressed in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _keypressed in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _keypressed in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _keypressed in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _keypressed in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _keypressed in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _keypressed in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _keypressed in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  116416
                                              3 BANK1      1     1      0
                    _I2C_Master_Init
                            _initLCD
                       _read_sensors
                               _sort
                         _update_RTC
                     _update_display
                         _update_lcd
                       _update_state
 ---------------------------------------------------------------------------------
 (1) _update_state                                         3     3      0   25054
                                             62 BANK0      3     3      0
                            ___awdiv
                            ___awmod
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _update_lcd                                           7     7      0   15418
                                             42 BANK0      3     3      0
                            _lcdInst
                             _printf
                             _strcmp
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     417
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _strcmp                                               6     2      4     441
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _printf                                               8     6      2   14250
                                             34 BANK0      8     6      2
                            __doprnt
 ---------------------------------------------------------------------------------
 (1) _update_display                                      14    14      0   60361
                                             77 BANK0     11    11      0
                                              0 BANK1      3     3      0
                            ___awdiv
                            ___awmod
                             ___wmul
                           __measure
                       _display_menu
                            _readADC
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _display_menu                                        25    25      0   27948
                                             62 BANK0     15    15      0
                             ___wmul
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             28     6     22   20618
                                             34 BANK0     28     6     22
                            ___awdiv (ARG)
                            ___awmod (ARG)
                            __doprnt
                           __measure (ARG)
 ---------------------------------------------------------------------------------
 (3) __doprnt                                             26    20      6   12022
                                             12 BANK0     22    16      6
                   Absolute function *
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch *
 ---------------------------------------------------------------------------------
 (4) _putch                                                1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _isdigit                                              3     3      0      99
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     386
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     549
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4     753
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _update_RTC                                           5     5      0    3760
                                              6 BANK0      5     5      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Write                                     2     0      2     493
                                              1 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Read                                      2     2      0      65
                                              1 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Wait                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _sort                                                 6     6      0   10716
                                             20 BANK0      6     6      0
                            ___awmod
                             ___wmul
                           __measure
 ---------------------------------------------------------------------------------
 (2) __measure                                            14    12      2    4343
                                              6 BANK0     14    12      2
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    3233
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    3010
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _read_sensors                                         5     5      0     409
                                              2 BANK0      5     5      0
                            _readADC
 ---------------------------------------------------------------------------------
 (2) _readADC                                              2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                              3 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     195
                                              2 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (5) _lcdNibble                                            2     2      0     164
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     503
                                             13 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     395
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _keypressed                                          19    19      0   11552
                                             42 COMRAM    19    19      0
                          i2___awmod
                          i2_lcdInst
                           i2_printf
 ---------------------------------------------------------------------------------
 (8) i2_printf                                             8     6      2    8568
                                             34 COMRAM     8     6      2
                          i2__doprnt
 ---------------------------------------------------------------------------------
 (9) i2__doprnt                                           26    20      6    8036
                                             12 COMRAM    22    16      6
                   Absolute function *
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch *
 ---------------------------------------------------------------------------------
 (10) i2_putch                                             1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (10) i2_isdigit                                           3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (10) i2___wmul                                            6     2      4     209
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) i2___lwmod                                           5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (10) i2___lwdiv                                           7     3      4     266
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (10) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (11) i2_lcdNibble                                         2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (8) i2___awmod                                            6     2      4     504
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _initLCD
     _lcdInst
       _lcdNibble
   _read_sensors
     _readADC
   _sort
     ___awmod
     ___wmul
     __measure
       ___awmod
   _update_RTC
     _I2C_Master_Read
       _I2C_Master_Wait
     _I2C_Master_Start
       _I2C_Master_Wait
     _I2C_Master_Stop
       _I2C_Master_Wait
     _I2C_Master_Write
       _I2C_Master_Wait
     ___wmul
   _update_display
     ___awdiv
     ___awmod
     ___wmul
     __measure
       ___awmod
     _display_menu
       ___wmul
       _sprintf
         ___awdiv (ARG)
         ___awmod (ARG)
         __doprnt (ARG)
           Absolute function(Fake) *
           ___lwdiv *
           ___lwmod *
             ___lwdiv (ARG)
           ___wmul *
           _isdigit *
           _putch *
             _lcdNibble
         __measure (ARG)
           ___awmod
     _readADC
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
       __measure (ARG)
         ___awmod
   _update_lcd
     _lcdInst
       _lcdNibble
     _printf
       __doprnt
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
     _strcmp
     _strcpy
   _update_state
     ___awdiv
     ___awmod
     _sprintf
       ___awdiv (ARG)
       ___awmod (ARG)
       __doprnt (ARG)
         Absolute function(Fake) *
         ___lwdiv *
         ___lwmod *
           ___lwdiv (ARG)
         ___wmul *
         _isdigit *
         _putch *
           _lcdNibble
       __measure (ARG)
         ___awmod

 _keypressed (ROOT)
   i2___awmod
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2__doprnt
       Absolute function(Fake) *
       i2___lwdiv *
       i2___lwmod *
         i2___lwdiv (ARG)
       i2___wmul *
       i2_isdigit *
       i2_putch *
         i2_lcdNibble

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0     2D0      37       18.1%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      4      8A       7       53.9%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     58      80       5      100.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3D      7A       1       96.8%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     184      34        0.0%
DATA                 0      0     454       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Tue Mar 07 13:29:40 2017

             _update_state 2A48                         l34 3E28               ___awdiv@sign 0085  
      ___wmul@multiplicand 0082         i2___lwdiv@dividend 0001                __CFG_BORV$3 000000  
           _update_display 1836               __CFG_CP0$OFF 000000               __CFG_CP1$OFF 000000  
             __CFG_CP2$OFF 000000               __CFG_CP3$OFF 000000                __CFG_OSC$HS 000000  
                      l533 0480                        l495 2A3E                        l954 3672  
                      _IR1 003E               __CFG_CPB$OFF 000000                        _IR2 0134  
            ?_display_menu 0001                        _PEN 007E2A               __CFG_CPD$OFF 000000  
                      _SEN 007E28               ___awmod@sign 0085                        prod 000FF3  
                      tosl 000FFD                        wreg 000FE8               __CFG_LVP$OFF 000000  
             __CFG_WDT$OFF 000000                       l1007 38CC                       l1017 3A06  
                     l5000 26E8                       l5010 2724                       l5100 2964  
                     l5004 26F2                       l5022 2762                       l5040 27D2  
                     l5016 2752                       l5114 29B8                       l5106 2992  
                     l5034 27C2                       l5018 2758                       l5204 3660  
                     l5140 3D88                       l5052 2836                       l5036 27C8  
                     l5028 2794                       l5118 29D2                       l5070 28AA  
                     l5054 283C                       l5046 2808                       l5150 3526  
                     l5128 2A32                       l5072 28B0                       l5064 287C  
                     l5138 3D76                       l5090 2924                       l5082 28F0  
                     l5058 2846                       l5162 355A                       l5076 28BA  
                     l5164 3566                       l5156 353C                       l5094 292E  
                     l5502 2212                       l5510 2234                       l5182 35BE  
                     l5174 359C                       l5166 356C                       l5192 35F6  
                     l5088 291E                       l5600 2556                       l5520 2284  
                     l8000 06C0                       l5194 3606                       l5530 22D6  
                     l5178 35AA                       l5196 360C                       l5604 2572  
                     l5524 229A                       l5516 2272                       l5460 3372  
                     l5452 32E4                       l4564 387C                       l4548 3DAE  
                     l8012 0746                       l8004 06EA                       l4830 3746  
                     l4566 3888                       l8030 0808                       l8006 06F4  
                     l4902 3D0C                       l5480 31EA                       l4840 3776  
                     l5552 2348                       l5544 2320                       l5448 32DA  
                     l4576 38BE                       l4568 388E                       l4592 39F8  
                     l4584 39C2                       l8032 085A                       l8040 08C6  
                     l8024 07D8                       l8016 0770                       l8008 0700  
                     l4904 3D18                       l4842 377C                       l4850 37AE  
                     l4834 3756                       l5562 237C                       l4586 39CE  
                     l8018 0784                       l8050 0944                       l8114 209C  
                     l5580 2466                       l5572 2430                       l5548 2334  
                     l5556 235E                       l4588 39D4                       l8044 090E  
                     l8028 0802                       l8052 098A                       l8108 1F5C  
                     l4854 37C2                       l4846 37A0                       l4838 376A  
                     l5566 23D4                       l5558 2364                       l8038 08B4  
                     l5584 247C                       l5576 244C                       l5592 251E  
                     l8048 0938                       l8072 1D50                       l8400 2CF6  
                     _ADFM 007E07                       l5498 21F8                       l8090 1DBE  
                     l4890 3A72                       l4980 2680                       l4964 2624  
                     l5596 253A                       l8084 1D90                       l8420 194A  
                     l8412 1838                       l4892 3A7E                       l8404 2D0A  
                     l4982 2686                       l4974 2652                       l4878 3D5A  
                     l8078 1D70                       l8414 18A2                       l8342 2A70  
                     l4992 26B4                       l4968 262E                       l8096 1DE2  
                     l8432 1A96                       l8424 19B6                       l8416 18A8  
                     l4896 3AB6                       l8344 2A76                       l8360 2AFC  
                     l4986 2690                       l8098 1DFC                       l8370 2B7C  
                     l8338 2A5C                       l8530 3708                       l8452 1B9E  
                     l8436 1B12                       l8428 1A32                       l8348 2A80  
                     l8524 36FC                       l8516 36E4                       l4998 26E2  
                     l7910 0374                       l7902 02EE                       l8454 1CE0  
                     l8534 3726                       l7920 0402                       l7904 0306  
                     l8384 2C8A                       l7850 006A                       l8458 1D1A  
                     l8474 34B2                       l8378 2C6C                       l7940 04F6  
                     l7908 036C                       l7916 03C4                       l7860 00B4  
                     l7844 0016                       l8468 3464                       l8396 2CE2  
                     l8388 2CA6                       _ADON 007E10                       l7918 03DC  
                     l7926 041A                       l7854 0098                       l7952 0532  
                     l7936 04C6                       l7856 00AA                       l7954 0538  
                     l7970 0586                       l7938 04F0                       l7882 01FA  
                     l7874 01B4                       l7866 0110                       l7980 05E0  
                     l7892 0272                       l7884 0206                       l7876 01BA  
                     l7990 0644                       l7982 05EA                       l7894 027E  
                     l7886 020C                       l7976 05A8                       l7968 0574  
                     l7888 024C                       l7994 066E                       l7898 02C4  
                     STR_1 FE92                       STR_2 FEA9                       STR_3 FE61  
                     STR_4 FF7B                       STR_5 FFC5                       STR_6 FFA9  
                     STR_7 FF5A                       STR_8 FF11                       STR_9 FFD1  
                     _LATA 000F89                       _LATB 000F8A                       _LATC 000F8B  
                     _LATD 000F8C                       _LATE 000F8D                       u7100 2716  
                     u7200 27FA                       u7300 28E2                       u7140 2784  
                     _RCEN 007E2B                       u7150 2786                       u7240 286C  
                     u7250 286E                       u7090 2714                       u7340 2954  
                     u8134 3260                       u7350 2956                       u7190 27F8  
                     u8150 21F4                       u8135 325A                       u8144 3288  
                     u8320 2392                       u8160 220E                       u8145 3282  
                     u7290 28E0                       u8170 2226                       u8075 3A40  
                     u8404 24C4                       u8340 23EA                       u8405 24BE  
                     u8430 2532                       u8334 23C6                       u8335 23C0  
                     u8440 254E                       u8424 2510                       u8360 2446  
                     u8425 250A                       u8450 256A                       u8370 2462  
                     u8354 241E                       u8355 2418                       u8460 260C  
                     u8390 2490                       u6950 3D58                       _RSEN 007E29  
                     _main 3684                i2__doprnt@c 0022                i2__doprnt@f 000F  
                     _menu 018A                       _keys FE37                       _time 005C  
                     fsr0h 000FEA                       fsr1h 000FE2         i2___lwdiv@quotient 0005  
                     indf0 000FEF                       fsr2h 000FDA                       fsr0l 000FE9  
                     indf1 000FE7                       indf2 000FDF                       fsr1l 000FE1  
                     fsr2l 000FD9                       _sort 21DE                       btemp 007B  
                     prodh 000FF4                       prodl 000FF3                       start 000E  
            __CFG_IESO$OFF 000000            __end_ofi2_putch 3E64              __CFG_MCLRE$ON 000000  
             ___param_bank 000000                i2_lcdNibble 3AC6     __end_of_update_display 1D44  
       _discretize_counter 00F0           ?_I2C_Master_Init 008D           ?_I2C_Master_Read 0001  
         ?_I2C_Master_Wait 0001           ?_I2C_Master_Stop 0001             ??_display_menu 00BE  
                    ?_main 0001                      _ACKEN 007E2C                      _ACKDT 007E2D  
          __end_of___awdiv 35C8                      STR_10 FF6B                      STR_11 FF24  
                    STR_12 FF37                      STR_20 FEEA                      STR_21 FFF9  
                    STR_13 FFEC                      STR_22 FFF9                      STR_14 FE7A  
                    STR_23 FFF9                      STR_15 FFF3                      STR_24 FFF9  
                    STR_16 FF8B                      STR_25 FFDD                      STR_17 FEFE  
                    STR_26 FF9A                      STR_18 FEC0                      STR_27 FFB7  
                    STR_19 FED6                      STR_28 FFE5            __end_of___awmod 37CC  
                    STR_29 FF49                      ?_sort 0001            __end_of___lldiv 3684  
                    _DIST1 012A                      u13000 0246            ___awdiv@divisor 0082  
                    u13110 0452                      u13007 023C                      u13117 0448  
                    u14110 2CA0                      u13080 036A                      u13048 02AE  
                    u13410 097C                      u13090 03AE                      u14050 2B76  
                    u14300 1C6C                      u13078 0336                      u13087 0360  
                    u13417 0972                      u13097 03A4                      u13338 0730  
                    u13268 062E                      u14265 1BE6                      u13378 07C2  
                    u13298 06AA                      u12930 00D6                      u14290 1C6A  
                    u14291 1C66                      u14275 1C00                      u12940 00FE  
                    u14285 1C26                      u13398 08F6                      u12960 015C  
                    u12928 0052                      u12937 00CC                      u12970 01AA  
                    u12947 00F4                      u14807 399C                      u12967 0152  
                    u14817 39A6                      u12977 01A0                      u14737 371C  
                    u14747 34CC                      u14757 3D7E                      u14767 3C12  
                    u14777 3C48                      u14787 3966                      u14797 3970  
          __end_of___lwdiv 38D6            __end_of___lwmod 3A10                      i2l413 17FA  
                    i2l372 17F8                      i2l533 0D74            ___awdiv@counter 0084  
                    _PORTB 000F81                      _PROX1 0048                      _PROX2 0052  
          __end_of__doprnt 0996                      _TRISA 000F92                      _TRISB 000F93  
                    _TRISC 000F94                      _TRISD 000F95                      _TRISE 000F96  
            __CFG_PWRT$OFF 000000              __CFG_WRT0$OFF 000000              __CFG_WRT1$OFF 000000  
            __CFG_WRT2$OFF 000000              __CFG_WRT3$OFF 000000            __end_of_lcdInst 3E4C  
           __CFG_EBTR0$OFF 000000             __CFG_FCMEN$OFF 000000             __CFG_EBTR1$OFF 000000  
           __CFG_EBTR2$OFF 000000             __CFG_EBTR3$OFF 000000                      _nRBPU 007F8F  
            __CFG_WRTB$OFF 000000              __CFG_WRTC$OFF 000000              __CFG_WRTD$OFF 000000  
          __end_of_readADC 3D8E            __end_of_initLCD 3C54             __CFG_EBTRB$OFF 000000  
               i2isdigit@c 0003            __end_of_dpowers FE52               i2__doprnt@ap 0011  
             i2__doprnt@cp 001B               i2__doprnt@pb 000D            __end_of_isdigit 3DB8  
                    _state 00DF                      _putch 3E12                      pclath 000FFA  
                    tablat 000FF5           __end_ofi2___wmul 3DDE                      sort@i 0098  
                    status 000FD8            __end_of_sprintf 3B6E         __size_ofi2___awmod 0070  
           __CFG_PBADEN$ON 000000           __end_ofi2_printf 3D02         __size_ofi2___lwdiv 0052  
       __size_ofi2___lwmod 0042         __size_ofi2__doprnt 0858            __initialization 37CC  
       __size_ofi2_lcdInst 000C               __end_of_main 372A               __end_of_keys FE48  
             __end_of_sort 2614                 i2printf@ap 0025                 i2printf@pb 0027  
          ?_update_display 0001            update_display@a 0186            update_display@i 0188  
       __size_ofi2_isdigit 001E            _IR_THRESHOLD_HI 00D8                     ??_main 0189  
                   ??_sort 0094              __activetblptr 000003          ?_I2C_Master_Start 0001  
        ?_I2C_Master_Write 0081     _latestSortedBottleTime 0100         ??_I2C_Master_Start 0081  
                   _ADCON0 000FC2                     _ADCON1 000FC1         ??_I2C_Master_Write 0083  
                   _ADRESH 000FC4                     _ADRESL 000FC3           ___awdiv@dividend 0080  
          i2lcdNibble@data 0002                     ?_putch 0001            i2lcdNibble@temp 0001  
                   _INT1IE 007F83                     _INT1IF 007F80                     _CVRCON 000FB5  
                   i2l1007 3BB6                     i2l1017 3C8C                     i2l4220 38F6  
                   i2l3270 3B90                     i2l4240 393C                     i2l4232 3924  
                   i2l4224 3904                     i2l4216 38EA                     i2l3256 3DF4  
                   i2l4226 390C                     i2l3266 3B84                     i2l3290 3C6E  
                   i2l4228 3910                     i2l4236 392E                     i2l3268 3B8C  
                   i2l3278 3BAC                     i2l3294 3C82                     i2l3286 3C62  
                   i2l3288 3C6A                     i2l8122 099A                     i2l8204 0D1C  
                   i2l8132 0A0E                     i2l8310 10D8                     i2l8302 105E  
                   i2l8230 0E12                     i2l8214 0DB2                     i2l8134 0A1C  
                   i2l8232 0E16                     i2l8216 0DDC                     i2l8160 0B42  
                   i2l8152 0B06                     i2l8144 0A7C                     i2l8128 09E2  
                   i2l8322 117A                     i2l8306 1088                     i2l8218 0DE0  
                   i2l8170 0B9A                     i2l8162 0B4C                     i2l8154 0B0A  
                   i2l8330 11E4                     i2l8138 0A22                     i2l8308 108E  
                   i2l8316 112A                     i2l8260 0E9E                     i2l8172 0BA4  
                   i2l8180 0C0E                     i2l8164 0B50                     i2l8318 113A  
                   i2l8326 11A4                     i2l8254 0E72                     i2l8246 0E48  
                   i2l8182 0C20                     i2l8166 0B84                     i2l8272 0F18  
                   i2l8248 0E58                     i2l8176 0BE4                     i2l8328 11AC  
                   i2l8600 13CE                     i2l8290 0FDA                     i2l8282 0F8A  
                   i2l8258 0E96                     i2l8186 0C80                     i2l8194 0CD4  
                   i2l8268 0EEE                     i2l8284 0F92                     i2l8196 0CE6  
                   i2l8188 0C86                     i2l8540 1236                     i2l8294 1004  
                   i2l8286 0F9A                     i2l8278 0F60                     i2l8198 0D0A  
                   i2l8702 17C0                     i2l8622 146A                     i2l8606 1412  
                   i2l8542 123E                     i2l8296 1012                     i2l8640 1520  
                   i2l8616 1452                     i2l8552 1280                     i2l8650 1588  
                   i2l8642 1540                     i2l8634 14E0                     i2l8618 145A  
                   i2l8570 132A                     i2l8546 124E                     i2l8706 17CE  
                   i2l8644 1544                     i2l8628 149C                     i2l8572 132E  
                   i2l8564 1304                     i2l8662 1610                     i2l8590 138C  
                   i2l8574 1332                     i2l8558 12C4                     i2l8680 16D8  
                   i2l8672 1694                     i2l8656 15CC                     i2l8568 1326  
                   i2l8584 135E                     i2l8674 1698                     i2l8594 139C  
                   i2l8692 1758                     i2l8668 1654                     i2l8588 1384  
                   i2l8686 1718                     i2l8698 1798                  ??i2_putch 0003  
                   _SSPADD 000FC8                     _TRISC3 007CA3                     _TRISC4 007CA4  
                   _SSPBUF 000FC9           __end_of__measure 2A48             __CFG_XINST$OFF 000000  
                   ___wmul 3C96                  ??___awdiv 0084             __CFG_STVREN$ON 000000  
                ??___awmod 0084                  ??___lldiv 0088                  ??___lwdiv 0084  
                ??___lwmod 008B              ?_read_sensors 0001            _release_counter 00F8  
                ??__doprnt 0092                     _events 00E6              i2__doprnt@idx 0017  
            i2__doprnt@len 0019              i2__doprnt@val 001D                     clear_0 3836  
                   clear_1 3842                     clear_2 384E           ___awdiv@quotient 0086  
          ___awmod@divisor 0082                     _time_i 011C               __doprnt@flag 009E  
                   _nstate 00DE            ___awmod@counter 0084                  ??_lcdInst 0082  
                   _printf 3BC0               __doprnt@prec 0097                     _strcmp 3A70  
                   _strcpy 3D02                  ??_readADC 0080                  ??_initLCD 0083  
             __pdataBIGRAM 018A               __pdataCOMRAM 0069                  ??_isdigit 0080  
        __end_ofi2___awmod 3946          __end_ofi2___lwdiv 3BC0               __mediumconst FE36  
        __end_ofi2___lwmod 3C96                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8          __end_ofi2__doprnt 11EE             i2___awmod@sign 0006  
        __end_ofi2_lcdInst 3E70                  ??_sprintf 00B8          __end_ofi2_isdigit 3DFC  
               __accesstop 0080    __end_of__initialization 3854       __end_of_display_menu 21DE  
            ___rparam_used 000001  display_menu@menuSelection 00C7         i2___lwmod@dividend 0008  
           __pcstackCOMRAM 0001               __pidataBANK0 3DFC             ??_read_sensors 0082  
            __end_of_putch 3E28                  ?i2___wmul 0001         __size_of_lcdNibble 0068  
              i2putch@data 0003                keypressed@i 003B                  ?i2_printf 0023  
            update_state@i 00C0           _IR_THRESHOLD_LOW 00DA                 __doprnt@ap 0090  
               __doprnt@cp 009A                 __doprnt@pb 008C                 __measure@i 008A  
                  ??_putch 0082                 __pbssBANK0 00EE                 __pbssBANK1 0100  
               __pnvCOMRAM 0075               ?i2_lcdNibble 0001                    ?___wmul 0080  
           _sorted_bottles 0065                    ?_printf 00A2                    ?_strcmp 0080  
                  ?_strcpy 0080                 ??i2___wmul 0005                    _IR1_PIN 0070  
                  _IR2_PIN 0071                 _creditSize 00E2                  ?__measure 0086  
               _discretize 0075       __measure@measurement 0092                 ??i2_printf 0025  
                  _SSPCON1 000FC6                    _SSPCON2 000FC5                    _SSPSTAT 000FC7  
                  i2_putch 3E58          __end_of_lcdNibble 39AE           ??_update_display 00CD  
                  __Hparam 0000                    __Lparam 0000             _manualDateTime FE5A  
                  ___awdiv 350A                    ___awmod 372A                    ___lldiv 35C8  
          __size_of___wmul 0036                    ___lwdiv 385E                    ___lwmod 39AE  
                _CMCONbits 000FB4                    __doprnt 0012                  _DIST1_PIN 0067  
                  __pcinit 37CC                    __ramtop 1000                    _endSize 0073  
                  _lcdInst 3E3C                    __ptext0 3684                    __ptext1 2A48  
                  __ptext2 340C                    __ptext3 3D02                    __ptext4 3A70  
                  __ptext5 3BC0                    __ptext6 1836                    __ptext7 1D44  
                  __ptext8 3B1C                    __ptext9 0012            __size_of_printf 004A  
          __size_of_strcmp 0056                    _readADC 3D62            __size_of_strcpy 0032  
                  _initLCD 3C0A          __end_of_hexpowers FE5A              i2_isdigit$774 0002  
                  _dpowers FE48                    _measure 0077                    _isdigit 3D8E  
               ??__measure 0088             i2__doprnt@flag 001F           ___awmod@dividend 0080  
           i2__doprnt@prec 0018                    _release 0079                 _keypressed 0008  
 __size_of_I2C_Master_Init 0060   __size_of_I2C_Master_Read 002E   __size_of_I2C_Master_Wait 0014  
 __size_of_I2C_Master_Stop 0008                    _runTime 0063                    _yopWCap 00FE  
                  _sprintf 3B1C              __doprnt@width 009F      __size_of_display_menu 049A  
           __pintcode_body 11EE         _DIST_THRESHOLD_LOW 006B       end_of_initialization 3854  
     __end_of_read_sensors 329E                    int_func 11EE        i2___wmul@multiplier 0001  
                i2u1351_40 0AC2                  i2u1351_47 0AB8                  i2u1352_40 0AFC  
                i2u1352_47 0AF2                  i2u1442_40 12FA                  i2u1363_40 0C7E  
                i2u1362_48 0C4C                  i2u1355_40 0B7E                  i2u1363_47 0C74  
                i2u1355_47 0B74                  i2u1364_40 0CC0                  i2u1348_40 0A44  
                i2u1347_48 09CE                  i2u1364_47 0CB6                  i2u1348_47 0A3A  
                i2u1349_40 0A6C                  i2u1349_47 0A62                  i2u1381_48 0EDA  
                i2u1366_40 0D4A                  i2u1366_47 0D40                  i2u1471_40 178E  
                i2u1359_48 0BD0                  i2u1456_40 1516                  i2u1392_48 104A  
                i2u1384_48 0F4C                  i2u1449_40 1448                  i2u1482_47 3ADE  
                i2u1394_48 1166                  i2u1467_40 170E                  i2u1483_47 3AE8  
                i2u1396_40 11DA     __end_of_manualDateTime FE61                  i2u1484_47 3B0A  
                i2u1396_47 11D0                  i2u1388_48 0FC6                  i2u1485_47 3B14  
__size_of_I2C_Master_Start 0008  __size_of_I2C_Master_Write 000A            ___lldiv@divisor 0084  
          ___lldiv@counter 008C                    printf@f 00A2           I2C_Master_Init@c 008D  
         I2C_Master_Read@a 0081                    postdec1 000FE5                    postdec2 000FDD  
                  postinc0 000FEE                    postinc1 000FE6                    postinc2 000FDE  
                  strcmp@r 0085                  _PROX1_PIN 0068                  _PROX2_PIN 0072  
             _display_menu 1D44                 _update_RTC 329E                 _update_lcd 340C  
                i2___awmod 38D6          i2___lwdiv@divisor 0003                  i2___lwdiv 3B6E  
                i2___lwmod 3C54          i2___lwdiv@counter 0007                  i2__doprnt 0996  
                i2_lcdInst 3E64                  i2_isdigit 3DDE              ?_update_state 0001  
            __pidataBIGRAM 2D42             __end_of___wmul 3CCC       __size_ofi2_lcdNibble 0056  
            __pidataCOMRAM 3E4C              i2lcdInst@data 0003           i2___wmul@product 0005  
           __end_of_printf 3C0A                update_RTC@i 008A             __end_of_strcmp 3AC6  
           __end_of_strcpy 3D34             update_lcd@flag 00AB        start_initialization 37CC  
              ?_keypressed 0001          __size_ofi2___wmul 0026                  i2printf@f 0023  
               ?i2___awmod 0001                 ?i2___lwdiv 0001                 ?i2___lwmod 0008  
        __size_ofi2_printf 0036                 ?i2__doprnt 000D          ??_I2C_Master_Init 0091  
        ??_I2C_Master_Read 0081          ??_I2C_Master_Wait 0080                 ?i2_lcdInst 0001  
        ??_I2C_Master_Stop 0081                 ?i2_isdigit 0001             ??_update_state 00BE  
                 ??___wmul 0084                __doprnt@idx 0096                __doprnt@len 0098  
              __doprnt@val 009C                __pdataBANK0 00D8           __CFG_LPT1OSC$OFF 000000  
                 ??_printf 00A4                   ??_strcmp 0084                   ??_strcpy 0084  
              __pbssCOMRAM 003E                ?_update_RTC 0001      __size_of_read_sensors 028C  
            __pcstackBANK0 0080              __pcstackBANK1 0186                ?_update_lcd 0001  
        i2___lwmod@divisor 000A          __size_of__measure 0434          i2___lwmod@counter 000C  
                 ?i2_putch 0001                  __doprnt@c 00A1                  __doprnt@f 008E  
         _I2C_Master_Start 3E82           _I2C_Master_Write 3E70           ___lwdiv@dividend 0080  
        __CFG_CCP2MX$PORTC 000000        __size_of_keypressed 182E                  __pintcode 0008  
            __pmediumconst FE36                  _lcdNibble 3946                   ?___awdiv 0080  
                 ?___awmod 0080                   ?___lldiv 0080                   ?___lwdiv 0080  
                 ?___lwmod 0087                   ?__doprnt 008C               _read_sensors 3012  
                 ?_lcdInst 0001                  _eskaNoCap 00F2                   ?_readADC 0001  
                 ?_initLCD 0001          _display_menu$1164 00C9                   ?_isdigit 0001  
                _hexpowers FE52                  _menuIndex 00EA           ___lwdiv@quotient 0085  
              ??i2___awmod 0005                   ?_sprintf 00A2                ??i2___lwdiv 0005  
                _ndisplay0 0162                ??i2___lwmod 000C                  _ndisplay1 0174  
           __size_of_putch 0016                ??i2__doprnt 0013                _creditIndex 00E0  
              ??i2_lcdInst 0003             ___wmul@product 0084                   _LATDbits 000F8C  
        _DIST_THRESHOLD_HI 0069                ??i2_isdigit 0001        __size_of_update_RTC 016E  
         __CFG_WDTPS$32768 000000                 ?_lcdNibble 0001        __size_of_update_lcd 00FE  
               _ADCON0bits 000FC2          ___wmul@multiplier 0080                  _startTime 010E  
                _sortIndex 00DC                   i2___wmul 3DB8              lcdNibble@data 0081  
            lcdNibble@temp 0080                   i2_printf 3CCC       __end_of_update_state 2D42  
      I2C_Master_Read@temp 0082                _bottle_type 00EE                  copy_data0 37E0  
                copy_data1 3804                  copy_data2 3824         i2___awmod@dividend 0001  
         __size_ofi2_putch 000C         keypressed@keypress 003D                   __Hrparam 0000  
                 __Lrparam 0000         __CFG_BOREN$SBORDIS 000000           __size_of___awdiv 00BE  
         __size_of___awmod 00A2      i2___wmul@multiplicand 0003           __size_of___lldiv 00BC  
         __size_of___lwdiv 0078           __size_of___lwmod 0062             readADC@channel 0081  
         __size_of__doprnt 0984    __size_of_update_display 050E                _isdigit$774 0081  
          _putch$intlevel0 3E18   display_menu@menuIndexPtr 00CB           __size_of_lcdInst 0010  
                 __measure 2614            _I2C_Master_Init 3A10           __size_of_readADC 002C  
          _I2C_Master_Read 3D34           __size_of_initLCD 004A            _I2C_Master_Wait 3E28  
          _I2C_Master_Stop 3E7A                 _DIST1_TRIG 006F               ??_keypressed 002B  
         __size_of_isdigit 002A                   _endIndex 00E4            ___lwdiv@divisor 0082  
          ___lwdiv@counter 0084                   __ptext10 3E12                   __ptext11 3D8E  
                 __ptext20 3E28                   __ptext12 39AE                   __ptext21 21DE  
                 __ptext13 385E                   __ptext30 3A10                   __ptext22 2614  
                 __ptext14 350A                   __ptext31 35C8                   __ptext23 372A  
                 __ptext15 329E                   __ptext40 3E64                   __ptext24 3C96  
                 __ptext16 3E70                   __ptext41 3AC6                   __ptext33 3CCC  
                 __ptext25 3012                   __ptext17 3E7A                   __ptext42 38D6  
                 __ptext34 0996                   __ptext26 3D62                   __ptext18 3E82  
                 __ptext43 0000                   __ptext35 3E58                   __ptext27 3C0A  
                 __ptext19 3D34                   __ptext36 3DDE                   __ptext28 3E3C  
                 __ptext37 3DB8                   __ptext29 3946                   __ptext38 3C54  
                 __ptext39 3B6E                   _display0 013E                   _eskaWCap 00F4  
                 _display1 0150           __size_of_sprintf 0052                 strcpy@from 0082  
                 _logIndex 00E8              __size_of_main 00A6                   _menuSize 00EC  
            __size_of_sort 0436            i2__doprnt@width 0020                   _timeDiff 00FA  
            ??i2_lcdNibble 0001                ??_lcdNibble 0080         __end_of_keypressed 1836  
                 int$flags 007B                   _sortSize 006D                   _yopNoCap 00FC  
        i2___awmod@divisor 0003                  putch@data 0082          i2___awmod@counter 0005  
 __end_of_I2C_Master_Start 3E8A   __end_of_I2C_Master_Write 3E7A                 _INTCONbits 000FF2  
             ??_update_RTC 0086               ??_update_lcd 00AA                   isdigit@c 0082  
                 intlevel2 0000                  sprintf@ap 00B8                  sprintf@pb 00BA  
                sprintf@wh 00A2            _measure_counter 00F6           ___lwmod@dividend 0087  
         ___lldiv@dividend 0080    display_menu@menuSizePtr 00C5             __measure@i_500 008F  
           __measure@i_501 0090             __measure@i_502 0091             __measure@i_496 008B  
           __measure@i_497 008C             __measure@i_498 008D             __measure@i_499 008E  
       __end_of_update_RTC 340C                   printf@ap 00A4                   printf@pb 00A6  
       __end_of_update_lcd 350A    __end_of_I2C_Master_Init 3A70    __end_of_I2C_Master_Read 3D62  
  __end_of_I2C_Master_Wait 3E3C    __end_of_I2C_Master_Stop 3E82                lcdInst@data 0082  
      __end_ofi2_lcdNibble 3B1C                   sprintf@f 00A4      __size_of_update_state 02FA  
                 strcmp@s1 0080                   strcmp@s2 0082           ___lldiv@quotient 0088  
        I2C_Master_Write@d 0081            ___lwmod@divisor 0089                   strcpy@cp 0084  
                 strcpy@to 0080            ___lwmod@counter 008B              read_sensors@i 0086  
     display_menu@selector 00C3  
